#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DestructibleGameplayAndNetworkRelevant

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GbxDestruction_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DestructibleGameplayAndNetworkRelevant.BP_DestructibleGameplayAndNetworkRelevant_C
// 0x0048 (0x0540 - 0x04F8)
class ABP_DestructibleGameplayAndNetworkRelevant_C : public AGbxDestructibleActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F8(0x0008)(Transient, DuplicateTransient)
	class UGbxNavBoxComponent*                    GbxNavBox;                                         // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ScriptedDestructionDamageOrigin;                   // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxNavMeshPainterComponent*            GbxNavMeshPainter;                                 // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Wwise_Fracture_Event;                              // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnedLootAlready;                                // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SupportsMultipleFractureEvents;                    // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasForcedTotalDestruction_;                        // 0x0522(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_523[0x1];                                      // 0x0523(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBeforeTotalDestruction;                       // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SelfDamageTimerDelay;                              // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChunksToFracturePerFrame;                          // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeverTurnOffNavPaint;                              // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceTotalDestructionDamageRadius;                 // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Wwise_TotalDestruction_Event;                      // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DestructibleGameplayAndNetworkRelevant(int32 EntryPoint);
	void BndEvt__DestructibleComponent_K2Node_ComponentBoundEvent_0_GbxComponentFractureSignature__DelegateSignature_BP_DestructibleGameplayAndNetworkRelevant(const struct FVector& FractureCentroid, const struct FVector& HitDirection, float FracturePercent, bool bSilentFracture);
	void BPI_ScriptedTotalDestruction(float DamageRadius, float ImpulseStrength);
	void ContinueSelfDamageLoop();
	void CauseDamageToRandomChunk();
	void BPI_SetFracturable(bool Fracturable);
	void BPI_SkipToDestroyedState();
	void UserConstructionScript();
	void AttemptLootableScripting();
	void ForceTotalDestruction();
	void TurnOffNavPaint();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DestructibleGameplayAndNetworkRelevant_C">();
	}
	static class ABP_DestructibleGameplayAndNetworkRelevant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DestructibleGameplayAndNetworkRelevant_C>();
	}
};
static_assert(alignof(ABP_DestructibleGameplayAndNetworkRelevant_C) == 0x000008, "Wrong alignment on ABP_DestructibleGameplayAndNetworkRelevant_C");
static_assert(sizeof(ABP_DestructibleGameplayAndNetworkRelevant_C) == 0x000540, "Wrong size on ABP_DestructibleGameplayAndNetworkRelevant_C");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, UberGraphFrame) == 0x0004F8, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, GbxNavBox) == 0x000500, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::GbxNavBox' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, ScriptedDestructionDamageOrigin) == 0x000508, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::ScriptedDestructionDamageOrigin' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, GbxNavMeshPainter) == 0x000510, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::GbxNavMeshPainter' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, Wwise_Fracture_Event) == 0x000518, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::Wwise_Fracture_Event' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, SpawnedLootAlready) == 0x000520, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::SpawnedLootAlready' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, SupportsMultipleFractureEvents) == 0x000521, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::SupportsMultipleFractureEvents' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, HasForcedTotalDestruction_) == 0x000522, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::HasForcedTotalDestruction_' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, DelayBeforeTotalDestruction) == 0x000524, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::DelayBeforeTotalDestruction' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, SelfDamageTimerDelay) == 0x000528, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::SelfDamageTimerDelay' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, ChunksToFracturePerFrame) == 0x00052C, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::ChunksToFracturePerFrame' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, NeverTurnOffNavPaint) == 0x000530, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::NeverTurnOffNavPaint' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, ForceTotalDestructionDamageRadius) == 0x000534, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::ForceTotalDestructionDamageRadius' has a wrong offset!");
static_assert(offsetof(ABP_DestructibleGameplayAndNetworkRelevant_C, Wwise_TotalDestruction_Event) == 0x000538, "Member 'ABP_DestructibleGameplayAndNetworkRelevant_C::Wwise_TotalDestruction_Event' has a wrong offset!");

}

