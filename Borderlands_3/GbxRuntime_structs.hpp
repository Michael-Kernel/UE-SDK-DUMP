#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GbxRuntime.EConditionRefreshRate
// NumValues: 0x0006
enum class EConditionRefreshRate : uint8
{
	OncePerThreeSeconds                      = 0,
	OncePerSecond                            = 1,
	TwicePerSecond                           = 2,
	FourTimesPerSecond                       = 3,
	Immediately                              = 4,
	EConditionRefreshRate_MAX                = 5,
};

// Enum GbxRuntime.ENumericRangeEditMode
// NumValues: 0x0005
enum class ENumericRangeEditMode : uint8
{
	MinMax                                   = 0,
	ValueVariance                            = 1,
	Variance                                 = 2,
	Value                                    = 3,
	ENumericRangeEditMode_MAX                = 4,
};

// ScriptStruct GbxRuntime.SceneBasedPosition
// 0x0038 (0x0038 - 0x0000)
struct FSceneBasedPosition final
{
public:
	class USceneComponent*                        Base;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedBaseLocation;                                // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CachedBaseRotation;                                // 0x0020(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CachedTransPosition;                               // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSceneBasedPosition) == 0x000008, "Wrong alignment on FSceneBasedPosition");
static_assert(sizeof(FSceneBasedPosition) == 0x000038, "Wrong size on FSceneBasedPosition");
static_assert(offsetof(FSceneBasedPosition, Base) == 0x000000, "Member 'FSceneBasedPosition::Base' has a wrong offset!");
static_assert(offsetof(FSceneBasedPosition, Position) == 0x000008, "Member 'FSceneBasedPosition::Position' has a wrong offset!");
static_assert(offsetof(FSceneBasedPosition, CachedBaseLocation) == 0x000014, "Member 'FSceneBasedPosition::CachedBaseLocation' has a wrong offset!");
static_assert(offsetof(FSceneBasedPosition, CachedBaseRotation) == 0x000020, "Member 'FSceneBasedPosition::CachedBaseRotation' has a wrong offset!");
static_assert(offsetof(FSceneBasedPosition, CachedTransPosition) == 0x00002C, "Member 'FSceneBasedPosition::CachedTransPosition' has a wrong offset!");

// ScriptStruct GbxRuntime.NumericRange
// 0x0008 (0x0008 - 0x0000)
struct FNumericRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Variance;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNumericRange) == 0x000004, "Wrong alignment on FNumericRange");
static_assert(sizeof(FNumericRange) == 0x000008, "Wrong size on FNumericRange");
static_assert(offsetof(FNumericRange, Value) == 0x000000, "Member 'FNumericRange::Value' has a wrong offset!");
static_assert(offsetof(FNumericRange, Variance) == 0x000004, "Member 'FNumericRange::Variance' has a wrong offset!");

// ScriptStruct GbxRuntime.GbxStructPtrParam
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGbxStructPtrParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxStructPtrParam) == 0x000008, "Wrong alignment on FGbxStructPtrParam");
static_assert(sizeof(FGbxStructPtrParam) == 0x000008, "Wrong size on FGbxStructPtrParam");

// ScriptStruct GbxRuntime.GbxTriggerProperty
// 0x0001 (0x0001 - 0x0000)
struct FGbxTriggerProperty final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxTriggerProperty) == 0x000001, "Wrong alignment on FGbxTriggerProperty");
static_assert(sizeof(FGbxTriggerProperty) == 0x000001, "Wrong size on FGbxTriggerProperty");

}

