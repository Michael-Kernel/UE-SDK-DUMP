#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Screen_Actor

#include "Basic.hpp"

#include "Struct_Screen_Params_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EScreenMaterialSelection_structs.hpp"
#include "Struct_MasterMaterial_BaseParams_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Screen_Actor.BP_Screen_Actor_C
// 0x0198 (0x0600 - 0x0468)
class ABP_Screen_Actor_C : public AStaticMeshActor
{
public:
	class UStaticMeshComponent*                   SM_FX_Cube_100x100x100;                            // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          BaseParameters_OverideDefaults;                    // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_MasterMaterial_BaseParams> MaterialParamsArray;                               // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          Randomize_On;                                      // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          Random_Seed;                                       // 0x0494(0x0008)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials_Array;                                   // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         RandomFloatFromStream;                             // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RandomVectorFromStream;                            // 0x04B4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Level_Primary_Color1;                              // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Level_Primary_Color2;                              // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Level_Secondary_Color1;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Level_Secondary_Color2;                            // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Level_Tertiary_Color1;                             // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Level_Tertiary_Color2;                             // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScreenMaterialSelection                      Screen_State;                                      // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GenerateSpotLight;                                 // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_522[0x2];                                      // 0x0522(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spotlight_IntensityMult;                           // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_Screen_Params                  ScreenParameters;                                  // 0x0528(0x0070)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         Screen_Image_Width;                                // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Screen_Image_Height;                               // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Screen_Image_Rotation;                             // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Screen_Material_Element;                           // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_Off;                                     // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_On;                                      // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_On_NoiseOnly;                            // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_On_ImageOnly;                            // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_On_ImageAndNoise;                        // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_On_ImageNoiseAndGlitches;                // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMat_On_ImageNoiseAndChromaticAberration;     // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunction_MaskRoundness;                       // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightFunction_Scale;                               // 0x05E4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicScreenMaterial;                             // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMissionSafe;                                     // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ManageLight();
	void Create_Dynamic_Screen_Material_Instance(class UMaterialInstanceDynamic** DynamicScreenMaterialOut, class UMaterialInterface** DefaultScreenMaterialOut, class UMaterialInstanceDynamic** DynamicLightMaterialOut);
	void Set_Per_Element_Screen_Material_Parameters(class UMaterialInstanceDynamic* DynamicScreenMat, class UMaterialInterface* DefaultScreenMaterial, class UMaterialInstanceDynamic* DynamicLightMat, class UMaterialInstanceDynamic** DynamicMaterial);
	void Set_Level_ColorScheme();
	void Set_Per_Element_Base_Material_Parameters(class UMaterialInstanceDynamic* Material_Instance_Dynamic, int32 Array_index, class UMaterialInstanceDynamic** Dynamic_Material_Instance, int32* Material_ID_Out, class UMaterialInstanceDynamic** Default_Material_Out);
	void Per_Instance_Master_Material_Parameters();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Screen_Actor_C">();
	}
	static class ABP_Screen_Actor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Screen_Actor_C>();
	}
};
static_assert(alignof(ABP_Screen_Actor_C) == 0x000008, "Wrong alignment on ABP_Screen_Actor_C");
static_assert(sizeof(ABP_Screen_Actor_C) == 0x000600, "Wrong size on ABP_Screen_Actor_C");
static_assert(offsetof(ABP_Screen_Actor_C, SM_FX_Cube_100x100x100) == 0x000468, "Member 'ABP_Screen_Actor_C::SM_FX_Cube_100x100x100' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, SpotLight) == 0x000470, "Member 'ABP_Screen_Actor_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, BaseParameters_OverideDefaults) == 0x000478, "Member 'ABP_Screen_Actor_C::BaseParameters_OverideDefaults' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, MaterialParamsArray) == 0x000480, "Member 'ABP_Screen_Actor_C::MaterialParamsArray' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Randomize_On) == 0x000490, "Member 'ABP_Screen_Actor_C::Randomize_On' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Random_Seed) == 0x000494, "Member 'ABP_Screen_Actor_C::Random_Seed' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Materials_Array) == 0x0004A0, "Member 'ABP_Screen_Actor_C::Materials_Array' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, RandomFloatFromStream) == 0x0004B0, "Member 'ABP_Screen_Actor_C::RandomFloatFromStream' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, RandomVectorFromStream) == 0x0004B4, "Member 'ABP_Screen_Actor_C::RandomVectorFromStream' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Level_Primary_Color1) == 0x0004C0, "Member 'ABP_Screen_Actor_C::Level_Primary_Color1' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Level_Primary_Color2) == 0x0004D0, "Member 'ABP_Screen_Actor_C::Level_Primary_Color2' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Level_Secondary_Color1) == 0x0004E0, "Member 'ABP_Screen_Actor_C::Level_Secondary_Color1' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Level_Secondary_Color2) == 0x0004F0, "Member 'ABP_Screen_Actor_C::Level_Secondary_Color2' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Level_Tertiary_Color1) == 0x000500, "Member 'ABP_Screen_Actor_C::Level_Tertiary_Color1' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Level_Tertiary_Color2) == 0x000510, "Member 'ABP_Screen_Actor_C::Level_Tertiary_Color2' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Screen_State) == 0x000520, "Member 'ABP_Screen_Actor_C::Screen_State' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, GenerateSpotLight) == 0x000521, "Member 'ABP_Screen_Actor_C::GenerateSpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Spotlight_IntensityMult) == 0x000524, "Member 'ABP_Screen_Actor_C::Spotlight_IntensityMult' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenParameters) == 0x000528, "Member 'ABP_Screen_Actor_C::ScreenParameters' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Screen_Image_Width) == 0x000598, "Member 'ABP_Screen_Actor_C::Screen_Image_Width' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Screen_Image_Height) == 0x00059C, "Member 'ABP_Screen_Actor_C::Screen_Image_Height' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Screen_Image_Rotation) == 0x0005A0, "Member 'ABP_Screen_Actor_C::Screen_Image_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, Screen_Material_Element) == 0x0005A4, "Member 'ABP_Screen_Actor_C::Screen_Material_Element' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_Off) == 0x0005A8, "Member 'ABP_Screen_Actor_C::ScreenMat_Off' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_On) == 0x0005B0, "Member 'ABP_Screen_Actor_C::ScreenMat_On' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_On_NoiseOnly) == 0x0005B8, "Member 'ABP_Screen_Actor_C::ScreenMat_On_NoiseOnly' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_On_ImageOnly) == 0x0005C0, "Member 'ABP_Screen_Actor_C::ScreenMat_On_ImageOnly' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_On_ImageAndNoise) == 0x0005C8, "Member 'ABP_Screen_Actor_C::ScreenMat_On_ImageAndNoise' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_On_ImageNoiseAndGlitches) == 0x0005D0, "Member 'ABP_Screen_Actor_C::ScreenMat_On_ImageNoiseAndGlitches' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, ScreenMat_On_ImageNoiseAndChromaticAberration) == 0x0005D8, "Member 'ABP_Screen_Actor_C::ScreenMat_On_ImageNoiseAndChromaticAberration' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, LightFunction_MaskRoundness) == 0x0005E0, "Member 'ABP_Screen_Actor_C::LightFunction_MaskRoundness' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, LightFunction_Scale) == 0x0005E4, "Member 'ABP_Screen_Actor_C::LightFunction_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, DynamicScreenMaterial) == 0x0005F0, "Member 'ABP_Screen_Actor_C::DynamicScreenMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Screen_Actor_C, IsMissionSafe) == 0x0005F8, "Member 'ABP_Screen_Actor_C::IsMissionSafe' has a wrong offset!");

}

