#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_JoshsFunctionLibrary

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_TestHitReactionType_structs.hpp"
#include "Enum_TestHitReactionDirection_structs.hpp"
#include "Enum_ResourceLockType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_JoshsFunctionLibrary.FL_JoshsFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UFL_JoshsFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GBXActionVariableSetup(class AActor* Actor, class UObject* __WorldContext, class AActor** MySelf, class AActor** MyTarget, class UDamageCauserComponent** MyDamageCausingComponent, class ACharacter** MyCharacter, class UTeam** MyTeam);
	static void ResourceLock(class AActor* Actor, Enum_ResourceLockType Lock_Type, class FName Reason, bool LockState, class UObject* __WorldContext);
	static void ForciblyResetSpawner(class ASpawner* Spawner, bool Kill_Existing_Actors, class UObject* __WorldContext);
	static void SetStance(class AActor* Target, class UOakStanceData* New_Stance, class UObject* __WorldContext);
	static void SetBlackboardBool(class AActor* ControlledActor, class FName BlackboardKey, bool Value, class UObject* __WorldContext);
	static void SetBlackboardFloat(class AActor* ControlledActor, class FName BlackboardKey, float Value, class UObject* __WorldContext);
	static void GetBlackboardBool(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, bool* Value);
	static void GetBlackboardFloat(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, float* Value);
	static void GetCurrentTarget(class APawn* Who_s_Target_, class UObject* __WorldContext, class AActor** Target);
	static void Setup_for_Throw_Actor_At(class APawn* Who_is_Throwing_, class AActor* TargetOverride, class FName TargetSocket, class UObject* __WorldContext, struct FVector* TargetLocation, struct FVector* TargetVelocity);
	static void SetBlackboardObject(class AActor* ControlledActor, class FName BlackboardKey, class UObject* Value, class UObject* __WorldContext);
	static void GetBlackboardObject(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, class UObject** Value);
	static void GetElementalTypeFromWeapon(class AActor* ActorWithWeapon, class UObject* __WorldContext, EOakElementalType* WeaponElement);
	static void SimpleScreenParticle(class AActor* Target, class UParticleSystem* ScreenParticle, bool AllowMultipleInstances, bool OnlyDrawIfShieldsAreDepleted, class UObject* __WorldContext);
	static void GrantSecondWind(class AActor* ActorToGrantSecondWindTo, class UObject* __WorldContext);
	static void TransformSplat(const struct FHitResult& HitResult, class UObject* __WorldContext, struct FTransform* SplatTransform);
	static void ThrowLightProjectile(class AActor* WhoIsThrowing_, class UClass* LightProjectileData, class FName SourceSocket, class AActor* TargetOverride, class FName TargetSocket, float MaxPrediction, float Speed, float AnglePercent, const struct FRotator& DirectionOffset, const struct FVector& LocalTargetOffset, int32 DataFlags, class UObject* __WorldContext);
	static void TestHitReaction(class AActor* Actor, Enum_TestHitReactionType Hit_Reaction_Type, Enum_TestHitReactionDirection Hit_Reaction_Direction, const struct FForceSelection& Force, class UObject* __WorldContext, class FText* Display_Text);
	static void GetBlackboardInt(class AActor* ControlledActor, class FName BlackboardKey, class UObject* __WorldContext, int32* Value);
	static void SetBlackboardInt(class FName BlackboardKey, class AActor* ControlledActor, int32 Value, class UObject* __WorldContext);
	static void AIScriptedLookAtPlayers(class AActor* Target, class UObject* __WorldContext);
	static void ValidateSpawnPoint(class USpawnPointComponent* PointToValidate, float MaxDropDistance, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_JoshsFunctionLibrary_C">();
	}
	static class UFL_JoshsFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_JoshsFunctionLibrary_C>();
	}
};
static_assert(alignof(UFL_JoshsFunctionLibrary_C) == 0x000008, "Wrong alignment on UFL_JoshsFunctionLibrary_C");
static_assert(sizeof(UFL_JoshsFunctionLibrary_C) == 0x000028, "Wrong size on UFL_JoshsFunctionLibrary_C");

}

