#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxGameSystemCore

#include "Basic.hpp"

#include "GbxGameSystemCore_classes.hpp"
#include "GbxGameSystemCore_parameters.hpp"


namespace SDK
{

// Function GbxGameSystemCore.GbxAction.OnBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnBegin(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "OnBegin");

	Params::GbxAction_OnBegin Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxAction.OnEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// EGbxActionEndState                      ActionEndState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnEnd(EGbxActionEndState ActionEndState, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "OnEnd");

	Params::GbxAction_OnEnd Parms{};

	Parms.ActionEndState = ActionEndState;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxAction.OnServerBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnServerBegin(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "OnServerBegin");

	Params::GbxAction_OnServerBegin Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxAction.OnServerEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// EGbxActionEndState                      ActionEndState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction::OnServerEnd(EGbxActionEndState ActionEndState, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "OnServerEnd");

	Params::GbxAction_OnServerEnd Parms{};

	Parms.ActionEndState = ActionEndState;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxAction.K2_GetActor
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxAction::K2_GetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetActor");

	Params::GbxAction_K2_GetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetCurrentNormalizedTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetCurrentNormalizedTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetCurrentNormalizedTime");

	Params::GbxAction_K2_GetCurrentNormalizedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetCurrentTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetCurrentTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetCurrentTime");

	Params::GbxAction_K2_GetCurrentTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetFloatRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutFloat                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetFloatRegisterValue(const class FName InName, float* OutFloat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetFloatRegisterValue");

	Params::GbxAction_K2_GetFloatRegisterValue Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFloat != nullptr)
		*OutFloat = Parms.OutFloat;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetIntRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutInt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetIntRegisterValue(const class FName InName, int32* OutInt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetIntRegisterValue");

	Params::GbxAction_K2_GetIntRegisterValue Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt != nullptr)
		*OutInt = Parms.OutInt;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetMaxCurrentTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetMaxCurrentTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetMaxCurrentTime");

	Params::GbxAction_K2_GetMaxCurrentTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetNameRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OutName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetNameRegisterValue(const class FName InName, class FName* OutName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetNameRegisterValue");

	Params::GbxAction_K2_GetNameRegisterValue Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutName != nullptr)
		*OutName = Parms.OutName;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetObjectRegisterValue
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutObject                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetObjectRegisterValue(const class FName InName, class UObject** OutObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetObjectRegisterValue");

	Params::GbxAction_K2_GetObjectRegisterValue Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObject != nullptr)
		*OutObject = Parms.OutObject;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetTimeRemaining
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAction::K2_GetTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetTimeRemaining");

	Params::GbxAction_K2_GetTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction.K2_GetVectorRegisterValue
// (Final, Native, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutVector                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAction::K2_GetVectorRegisterValue(const class FName InName, struct FVector* OutVector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction", "K2_GetVectorRegisterValue");

	Params::GbxAction_K2_GetVectorRegisterValue Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtActorSocketMulticast
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ParameterEvaluationContext                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtActorSocketMulticast(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class AActor* Actor, class FName Socket, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameState", "SpawnEmitterAtActorSocketMulticast");

	Params::GbxGameState_SpawnEmitterAtActorSocketMulticast Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Actor = Actor;
	Parms.Socket = Socket;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtComponentSocketMulticast
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ParameterEvaluationContext                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtComponentSocketMulticast(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class USceneComponent* Component, class FName Socket, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameState", "SpawnEmitterAtComponentSocketMulticast");

	Params::GbxGameState_SpawnEmitterAtComponentSocketMulticast Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Component = Component;
	Parms.Socket = Socket;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtLocationMulticast
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ParameterEvaluationContext                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtLocationMulticast(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, class UObject* ParameterEvaluationContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameState", "SpawnEmitterAtLocationMulticast");

	Params::GbxGameState_SpawnEmitterAtLocationMulticast Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.OnRep_bPlayersOnly
// (Final, Native, Private)

void AGbxGameState::OnRep_bPlayersOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "OnRep_bPlayersOnly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.OnRep_GameInstanceId
// (Final, Native, Private)

void AGbxGameState::OnRep_GameInstanceId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "OnRep_GameInstanceId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.OnRep_GameInstanceTime
// (Final, Native, Private)

void AGbxGameState::OnRep_GameInstanceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "OnRep_GameInstanceTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.OnRep_HostPlayerState
// (Native, Public)

void AGbxGameState::OnRep_HostPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "OnRep_HostPlayerState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.OnRep_StatsManager
// (Native, Public)

void AGbxGameState::OnRep_StatsManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "OnRep_StatsManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.PlayHitRegionImpactMulticast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UHitRegionData*                   HitRegion                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ImpactInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReplicatedImpactHitResult       HitResult                                              (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGbxGameState::PlayHitRegionImpactMulticast(const class UHitRegionData* HitRegion, class AActor* ImpactInstigator, const struct FReplicatedImpactHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "PlayHitRegionImpactMulticast");

	Params::GbxGameState_PlayHitRegionImpactMulticast Parms{};

	Parms.HitRegion = HitRegion;
	Parms.ImpactInstigator = ImpactInstigator;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.PlayImpactMulticast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UImpactData*                      ImpactData                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ImpactInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReplicatedImpactHitResult       HitResult                                              (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FImpactResponseParams            ResponseParams                                         (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGbxGameState::PlayImpactMulticast(const class UImpactData* ImpactData, class AActor* ImpactInstigator, const struct FReplicatedImpactHitResult& HitResult, const struct FImpactResponseParams& ResponseParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "PlayImpactMulticast");

	Params::GbxGameState_PlayImpactMulticast Parms{};

	Parms.ImpactData = ImpactData;
	Parms.ImpactInstigator = ImpactInstigator;
	Parms.HitResult = std::move(HitResult);
	Parms.ResponseParams = std::move(ResponseParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameState.SpawnEmitterAtLocationMulticastImpl
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ParameterEvaluationContext                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxGameState::SpawnEmitterAtLocationMulticastImpl(class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, class UObject* ParameterEvaluationContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameState", "SpawnEmitterAtLocationMulticastImpl");

	Params::GbxGameState_SpawnEmitterAtLocationMulticastImpl Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.ParameterEvaluationContext = ParameterEvaluationContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UsableComponent.ResetUseCount
// (Final, Native, Public, BlueprintCallable)

void UUsableComponent::ResetUseCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "ResetUseCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UsableComponent.SetInteractionHeader
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewHeaderName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUsableComponent::SetInteractionHeader(const class FText& NewHeaderName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "SetInteractionHeader");

	Params::UsableComponent_SetInteractionHeader Parms{};

	Parms.NewHeaderName = std::move(NewHeaderName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UsableComponent.SetUsableLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLocked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUsableComponent::SetUsableLocked(bool bLocked, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "SetUsableLocked");

	Params::UsableComponent_SetUsableLocked Parms{};

	Parms.bLocked = bLocked;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UsableComponent.GetInteractionHeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UUsableComponent::GetInteractionHeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "GetInteractionHeader");

	Params::UsableComponent_GetInteractionHeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UsableComponent.GetValidPrimitiveComponentNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     ComponentNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUsableComponent::GetValidPrimitiveComponentNames(TArray<class FName>* ComponentNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "GetValidPrimitiveComponentNames");

	Params::UsableComponent_GetValidPrimitiveComponentNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ComponentNames != nullptr)
		*ComponentNames = std::move(Parms.ComponentNames);
}


// Function GbxGameSystemCore.UsableComponent.K2_CanBeUsed
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUsabilityQuery                  Query                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUsableComponent::K2_CanBeUsed(const struct FUsabilityQuery& Query) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "K2_CanBeUsed");

	Params::UsableComponent_K2_CanBeUsed Parms{};

	Parms.Query = std::move(Query);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UsableComponent.K2_GetOptionalErrorText
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUsableComponent::K2_GetOptionalErrorText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UsableComponent", "K2_GetOptionalErrorText");

	Params::UsableComponent_K2_GetOptionalErrorText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AttributeValueResolver.GetValueForAttribute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAttributeValueResolver::GetValueForAttribute(const class UGbxAttributeData* Attribute, const class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttributeValueResolver", "GetValueForAttribute");

	Params::AttributeValueResolver_GetValueForAttribute Parms{};

	Parms.Attribute = Attribute;
	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AttributeValueResolver.SetValueForAttribute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAttributeValueResolver::SetValueForAttribute(const class UGbxAttributeData* Attribute, const class UObject* Context, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttributeValueResolver", "SetValueForAttribute");

	Params::AttributeValueResolver_SetValueForAttribute Parms{};

	Parms.Attribute = Attribute;
	Parms.Context = Context;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.OnAnimEnd
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::OnAnimEnd(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "OnAnimEnd");

	Params::GbxAction_SimpleAnim_OnAnimEnd Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetAimRotation
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetAimRotation(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetAimRotation");

	Params::GbxAction_SimpleAnim_K2_SetAimRotation Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetAIThinking
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetAIThinking(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetAIThinking");

	Params::GbxAction_SimpleAnim_K2_SetAIThinking Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetAvoidance
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetAvoidance(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetAvoidance");

	Params::GbxAction_SimpleAnim_K2_SetAvoidance Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetCollision
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetCollision(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetCollision");

	Params::GbxAction_SimpleAnim_K2_SetCollision Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetHeadLook
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetHeadLook(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetHeadLook");

	Params::GbxAction_SimpleAnim_K2_SetHeadLook Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetHeadLookLocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetHeadLookLocked(bool bLock) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetHeadLookLocked");

	Params::GbxAction_SimpleAnim_K2_SetHeadLookLocked Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetHitReactions
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetHitReactions(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetHitReactions");

	Params::GbxAction_SimpleAnim_K2_SetHitReactions Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetLook
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetLook(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetLook");

	Params::GbxAction_SimpleAnim_K2_SetLook Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetMovement
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetMovement(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetMovement");

	Params::GbxAction_SimpleAnim_K2_SetMovement Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetPhysNoneWithRootMotion
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetPhysNoneWithRootMotion(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetPhysNoneWithRootMotion");

	Params::GbxAction_SimpleAnim_K2_SetPhysNoneWithRootMotion Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_SimpleAnim.K2_SetTickAndRefreshBones
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bLockResource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_SimpleAnim::K2_SetTickAndRefreshBones(bool bLockResource) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_SimpleAnim", "K2_SetTickAndRefreshBones");

	Params::GbxAction_SimpleAnim_K2_SetTickAndRefreshBones Parms{};

	Parms.bLockResource = bLockResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnHitTargetable
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitNormal                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnHitTargetable(class AActor* HitActor, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnHitTargetable");

	Params::ControlledMove_OnHitTargetable Parms{};

	Parms.HitActor = HitActor;
	Parms.HitNormal = std::move(HitNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnHitWorld
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitNormal                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnHitWorld(class AActor* HitActor, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnHitWorld");

	Params::ControlledMove_OnHitWorld Parms{};

	Parms.HitActor = HitActor;
	Parms.HitNormal = std::move(HitNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnServerStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   MoveDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnServerStart(float MoveDuration, class AActor* TargetActor, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnServerStart");

	Params::ControlledMove_OnServerStart Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.TargetActor = TargetActor;
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnServerStop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnServerStop(bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnServerStop");

	Params::ControlledMove_OnServerStop Parms{};

	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnStart
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   MoveDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnStart(float MoveDuration, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnStart");

	Params::ControlledMove_OnStart Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnStop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnStop(bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnStop");

	Params::ControlledMove_OnStop Parms{};

	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnTargetLocationChanged
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          NewTargetLocation                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnTargetLocationChanged(const struct FVector& NewTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnTargetLocationChanged");

	Params::ControlledMove_OnTargetLocationChanged Parms{};

	Parms.NewTargetLocation = std::move(NewTargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMove.OnTeleported
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   MoveDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PreTeleportLocation                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMove::OnTeleported(float MoveDuration, const struct FVector& PreTeleportLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove", "OnTeleported");

	Params::ControlledMove_OnTeleported Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.PreTeleportLocation = std::move(PreTeleportLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAnimTable.Autofill
// (Native, Protected)

void UGbxAnimTable::Autofill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAnimTable", "Autofill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_CoordinatedEffect.SetConstantMaterialVectorParamValue
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_CoordinatedEffect::SetConstantMaterialVectorParamValue(class FName ParamName, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_CoordinatedEffect", "SetConstantMaterialVectorParamValue");

	Params::GbxAction_CoordinatedEffect_SetConstantMaterialVectorParamValue Parms{};

	Parms.ParamName = ParamName;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UIStatData.ComputeAttributeModification
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bScale                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIStatCollector                 Collector                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIStatData::ComputeAttributeModification(class UGbxAttributeData* Attribute, const bool bScale, const struct FUIStatCollector& Collector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStatData", "ComputeAttributeModification");

	Params::UIStatData_ComputeAttributeModification Parms{};

	Parms.Attribute = Attribute;
	Parms.bScale = bScale;
	Parms.Collector = std::move(Collector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UIStatData.EnumerateSectionNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     OutSectionNameList                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUIStatData::EnumerateSectionNames(TArray<class FName>* OutSectionNameList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStatData", "EnumerateSectionNames");

	Params::UIStatData_EnumerateSectionNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSectionNameList != nullptr)
		*OutSectionNameList = std::move(Parms.OutSectionNameList);
}


// Function GbxGameSystemCore.UIStatData.K2_GetComparisonValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIStatCollector                 Collector                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIStatData::K2_GetComparisonValue(class UObject* Context, const struct FUIStatCollector& Collector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStatData", "K2_GetComparisonValue");

	Params::UIStatData_K2_GetComparisonValue Parms{};

	Parms.Context = Context;
	Parms.Collector = std::move(Collector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UIStatData.K2_GetValueText
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIStatCollector                 Collector                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIStatData::K2_GetValueText(class UObject* Context, const struct FUIStatCollector& Collector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStatData", "K2_GetValueText");

	Params::UIStatData_K2_GetValueText Parms{};

	Parms.Context = Context;
	Parms.Collector = std::move(Collector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UIStatData.K2_ShouldDisplayStat
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIStatData::K2_ShouldDisplayStat(class UObject* Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStatData", "K2_ShouldDisplayStat");

	Params::UIStatData_K2_ShouldDisplayStat Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_JumpToNextSection
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Anim::K2_JumpToNextSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_JumpToNextSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_Pause
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Anim::K2_Pause() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_ProceedToNextSection
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Anim::K2_ProceedToNextSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_ProceedToNextSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_RepJumpToNextSection
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Anim::K2_RepJumpToNextSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_RepJumpToNextSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_RepProceedToNextSection
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Anim::K2_RepProceedToNextSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_RepProceedToNextSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_Resume
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Anim::K2_Resume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_Resume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetCrouchBlocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bBlocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetCrouchBlocked(bool bBlocked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetCrouchBlocked");

	Params::GbxAction_Anim_K2_SetCrouchBlocked Parms{};

	Parms.bBlocked = bBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetDemigodMode
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetDemigodMode(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetDemigodMode");

	Params::GbxAction_Anim_K2_SetDemigodMode Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetFootIK
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetFootIK(bool bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetFootIK");

	Params::GbxAction_Anim_K2_SetFootIK Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetGodMode
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetGodMode(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetGodMode");

	Params::GbxAction_Anim_K2_SetGodMode Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Anim.K2_SetMantlingBlocked
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    bBlocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Anim::K2_SetMantlingBlocked(bool bBlocked) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Anim", "K2_SetMantlingBlocked");

	Params::GbxAction_Anim_K2_SetMantlingBlocked Parms{};

	Parms.bBlocked = bBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PreviewComponent.OnBlueprintCompiled
// (Final, Native, Protected)
// Parameters:
// class UBlueprint*                       BP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPreviewComponent::OnBlueprintCompiled(class UBlueprint* BP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewComponent", "OnBlueprintCompiled");

	Params::PreviewComponent_OnBlueprintCompiled Parms{};

	Parms.BP = BP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.RadiusDamageReplicationManager.Multicast_ProcessRadiusRequest
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>          DamageData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>       DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              Location                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UExplosionData*                   ExplosionData                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  DefaultParticles                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      DefaultAudioEvent                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImpactData*                      DefaultImpactData                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxSignificanceEvent            SignificanceEvent                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARadiusDamageReplicationManager::Multicast_ProcessRadiusRequest(class AActor* ContextActor, TSubclassOf<class UDamageData> DamageData, TSubclassOf<class UGbxDamageType> DamageType, float Radius, const struct FVector_NetQuantize& Location, float Damage, class UExplosionData* ExplosionData, class UParticleSystem* DefaultParticles, class UWwiseEvent* DefaultAudioEvent, class UImpactData* DefaultImpactData, const struct FGbxSignificanceEvent& SignificanceEvent, float Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiusDamageReplicationManager", "Multicast_ProcessRadiusRequest");

	Params::RadiusDamageReplicationManager_Multicast_ProcessRadiusRequest Parms{};

	Parms.ContextActor = ContextActor;
	Parms.DamageData = DamageData;
	Parms.DamageType = DamageType;
	Parms.Radius = Radius;
	Parms.Location = std::move(Location);
	Parms.Damage = Damage;
	Parms.ExplosionData = ExplosionData;
	Parms.DefaultParticles = DefaultParticles;
	Parms.DefaultAudioEvent = DefaultAudioEvent;
	Parms.DefaultImpactData = DefaultImpactData;
	Parms.SignificanceEvent = std::move(SignificanceEvent);
	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.RadiusDamageReplicationManager.Multicast_StopRadiusEffect
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>          DamageData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopAllForContext                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARadiusDamageReplicationManager::Multicast_StopRadiusEffect(class AActor* ContextActor, TSubclassOf<class UDamageData> DamageData, bool bStopAllForContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiusDamageReplicationManager", "Multicast_StopRadiusEffect");

	Params::RadiusDamageReplicationManager_Multicast_StopRadiusEffect Parms{};

	Parms.ContextActor = ContextActor;
	Parms.DamageData = DamageData;
	Parms.bStopAllForContext = bStopAllForContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.InitializeTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UTeam*                            NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::InitializeTeam(class UTeam* NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "InitializeTeam");

	Params::TeamComponent_InitializeTeam Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.OnRep_bIgnoreCollisionWithTeam
// (Final, Native, Private)

void UTeamComponent::OnRep_bIgnoreCollisionWithTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "OnRep_bIgnoreCollisionWithTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.OnRep_Team
// (Final, Native, Private)
// Parameters:
// class UTeam*                            OldTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::OnRep_Team(class UTeam* OldTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "OnRep_Team");

	Params::TeamComponent_OnRep_Team Parms{};

	Parms.OldTeam = OldTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.SetCollidesWithTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCollidesWithTeam                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetCollidesWithTeam(bool bCollidesWithTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "SetCollidesWithTeam");

	Params::TeamComponent_SetCollidesWithTeam Parms{};

	Parms.bCollidesWithTeam = bCollidesWithTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.SetSourceTeamComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTeamComponent*                   NewSourceTeamComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetSourceTeamComponent(class UTeamComponent* NewSourceTeamComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "SetSourceTeamComponent");

	Params::TeamComponent_SetSourceTeamComponent Parms{};

	Parms.NewSourceTeamComponent = NewSourceTeamComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.SetTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UTeam*                            NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetTeam(class UTeam* NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "SetTeam");

	Params::TeamComponent_SetTeam Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.SetTeamCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOn                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamComponent::SetTeamCollision(bool bOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "SetTeamCollision");

	Params::TeamComponent_SetTeamCollision Parms{};

	Parms.bOn = bOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.SetTeamToDefault
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UTeamComponent::SetTeamToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "SetTeamToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TeamComponent.GetTeamAttitudeTowardsActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude UTeamComponent::GetTeamAttitudeTowardsActor(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "GetTeamAttitudeTowardsActor");

	Params::TeamComponent_GetTeamAttitudeTowardsActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TeamComponent.GetTeamAttitudeTowardsTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                            OtherTeam                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude UTeamComponent::GetTeamAttitudeTowardsTeam(const class UTeam* OtherTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "GetTeamAttitudeTowardsTeam");

	Params::TeamComponent_GetTeamAttitudeTowardsTeam Parms{};

	Parms.OtherTeam = OtherTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TeamComponent.GetTeamCollisionChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETeamCollisionChannel                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamCollisionChannel UTeamComponent::GetTeamCollisionChannel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "GetTeamCollisionChannel");

	Params::TeamComponent_GetTeamCollisionChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TeamComponent.IsFriendly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTeamComponent::IsFriendly(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "IsFriendly");

	Params::TeamComponent_IsFriendly Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TeamComponent.IsHostile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTeamComponent::IsHostile(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "IsHostile");

	Params::TeamComponent_IsHostile Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TeamComponent.IsNeutral
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTeamComponent::IsNeutral(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamComponent", "IsNeutral");

	Params::TeamComponent_IsNeutral Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.AttachCharacterToActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ParentActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         LocationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         RotationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         ScaleRule                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWeldSimulatedBodies                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::AttachCharacterToActor(class AActor* ParentActor, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "AttachCharacterToActor");

	Params::GbxCharacter_AttachCharacterToActor Parms{};

	Parms.ParentActor = ParentActor;
	Parms.SocketName = SocketName;
	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;
	Parms.ScaleRule = ScaleRule;
	Parms.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.AttachCharacterToComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         LocationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         RotationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         ScaleRule                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWeldSimulatedBodies                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::AttachCharacterToComponent(class USceneComponent* Parent, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "AttachCharacterToComponent");

	Params::GbxCharacter_AttachCharacterToComponent Parms{};

	Parms.Parent = Parent;
	Parms.SocketName = SocketName;
	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;
	Parms.ScaleRule = ScaleRule;
	Parms.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.CauseEveryoneToForgetMe
// (Final, Native, Public, BlueprintCallable)

void AGbxCharacter::CauseEveryoneToForgetMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "CauseEveryoneToForgetMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.ClientRotateCharacterTo
// (Final, Net, NetReliable, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// struct FRotator                         TargetRotation                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             Easing                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::ClientRotateCharacterTo(const struct FRotator& TargetRotation, float Duration, EEasingFunc Easing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "ClientRotateCharacterTo");

	Params::GbxCharacter_ClientRotateCharacterTo Parms{};

	Parms.TargetRotation = std::move(TargetRotation);
	Parms.Duration = Duration;
	Parms.Easing = Easing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.DetachCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDetachmentRule                         LocationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::DetachCharacter(EDetachmentRule LocationRule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "DetachCharacter");

	Params::GbxCharacter_DetachCharacter Parms{};

	Parms.LocationRule = LocationRule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.NetMulticast_PlayJumped
// (Net, Native, Event, NetMulticast, Public)

void AGbxCharacter::NetMulticast_PlayJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "NetMulticast_PlayJumped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.NetMulticast_PlayLanded
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ImpactSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandFromJump                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULandingData*                     LandingDataOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::NetMulticast_PlayLanded(const struct FHitResult& Hit, float ImpactSpeed, bool bLandFromJump, class ULandingData* LandingDataOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "NetMulticast_PlayLanded");

	Params::GbxCharacter_NetMulticast_PlayLanded Parms{};

	Parms.Hit = std::move(Hit);
	Parms.ImpactSpeed = ImpactSpeed;
	Parms.bLandFromJump = bLandFromJump;
	Parms.LandingDataOverride = LandingDataOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.NetMulticast_TriggerHitReactionSound
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UCharacterSoundTag*               Tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::NetMulticast_TriggerHitReactionSound(const class UCharacterSoundTag* Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "NetMulticast_TriggerHitReactionSound");

	Params::GbxCharacter_NetMulticast_TriggerHitReactionSound Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.OnLandingDataTriggered
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FLandingInfo                     LandingInfo                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::OnLandingDataTriggered(const struct FLandingInfo& LandingInfo, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "OnLandingDataTriggered");

	Params::GbxCharacter_OnLandingDataTriggered Parms{};

	Parms.LandingInfo = std::move(LandingInfo);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxCharacter.OnRep_ReplicatedPawnAttachState
// (Final, Native, Protected)

void AGbxCharacter::OnRep_ReplicatedPawnAttachState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "OnRep_ReplicatedPawnAttachState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.ReceiveOwnerPlayerControllerChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGbxPlayerController*             NewPlayerControllerOwner                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::ReceiveOwnerPlayerControllerChanged(class AGbxPlayerController* NewPlayerControllerOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "ReceiveOwnerPlayerControllerChanged");

	Params::GbxCharacter_ReceiveOwnerPlayerControllerChanged Parms{};

	Parms.NewPlayerControllerOwner = NewPlayerControllerOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.RotateCharacterTo
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         TargetRotation                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             Easing                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::RotateCharacterTo(const struct FRotator& TargetRotation, float Duration, EEasingFunc Easing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "RotateCharacterTo");

	Params::GbxCharacter_RotateCharacterTo Parms{};

	Parms.TargetRotation = std::move(TargetRotation);
	Parms.Duration = Duration;
	Parms.Easing = Easing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.SetCharacterName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewCharacterName                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGbxCharacter::SetCharacterName(const class FText& NewCharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "SetCharacterName");

	Params::GbxCharacter_SetCharacterName Parms{};

	Parms.NewCharacterName = std::move(NewCharacterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.SetCharacterNameFromString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewCharacterName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetCharacterNameFromString(const class FString& NewCharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "SetCharacterNameFromString");

	Params::GbxCharacter_SetCharacterNameFromString Parms{};

	Parms.NewCharacterName = std::move(NewCharacterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.SetCharacterUIName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIName*                       NewCharacterUIName                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetCharacterUIName(const class UGbxUIName* NewCharacterUIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "SetCharacterUIName");

	Params::GbxCharacter_SetCharacterUIName Parms{};

	Parms.NewCharacterUIName = NewCharacterUIName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.SetPlayerMaster
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGbxCharacter*                    NewPlayerMaster                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetPlayerMaster(class AGbxCharacter* NewPlayerMaster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "SetPlayerMaster");

	Params::GbxCharacter_SetPlayerMaster Parms{};

	Parms.NewPlayerMaster = NewPlayerMaster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacter.FindFirstPersonComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirstPersonComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirstPersonComponent* AGbxCharacter::FindFirstPersonComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "FindFirstPersonComponent");

	Params::GbxCharacter_FindFirstPersonComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetAimOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGbxCharacter::GetAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetAimOffset");

	Params::GbxCharacter_GetAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetAimVectorStartLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGbxCharacter::GetAimVectorStartLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetAimVectorStartLocation");

	Params::GbxCharacter_GetAimVectorStartLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetAvailableSocketNames
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGbxCharacter::GetAvailableSocketNames(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetAvailableSocketNames");

	Params::GbxCharacter_GetAvailableSocketNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function GbxGameSystemCore.GbxCharacter.GetBlackboardAsset
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBlackboardData*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardData* AGbxCharacter::GetBlackboardAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetBlackboardAsset");

	Params::GbxCharacter_GetBlackboardAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetBlackboardComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBlackboardComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlackboardComponent* AGbxCharacter::GetBlackboardComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetBlackboardComponent");

	Params::GbxCharacter_GetBlackboardComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetFirstPersonComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirstPersonComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirstPersonComponent* AGbxCharacter::GetFirstPersonComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetFirstPersonComponent");

	Params::GbxCharacter_GetFirstPersonComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetFirstPersonMesh
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AGbxCharacter::GetFirstPersonMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetFirstPersonMesh");

	Params::GbxCharacter_GetFirstPersonMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetLookAt
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          HeadLocation                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EyeLocation                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HeadWeight                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGbxCharacter::GetLookAt(struct FVector* HeadLocation, struct FVector* EyeLocation, float* HeadWeight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetLookAt");

	Params::GbxCharacter_GetLookAt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HeadLocation != nullptr)
		*HeadLocation = std::move(Parms.HeadLocation);

	if (EyeLocation != nullptr)
		*EyeLocation = std::move(Parms.EyeLocation);

	if (HeadWeight != nullptr)
		*HeadWeight = Parms.HeadWeight;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetLookAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OutWeight                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGbxCharacter::GetLookAtLocation(float* OutWeight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetLookAtLocation");

	Params::GbxCharacter_GetLookAtLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeight != nullptr)
		*OutWeight = Parms.OutWeight;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetPawnAttachActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGbxCharacter::GetPawnAttachActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetPawnAttachActor");

	Params::GbxCharacter_GetPawnAttachActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetPawnAttachComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPawnAttachSlotComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPawnAttachSlotComponent* AGbxCharacter::GetPawnAttachComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetPawnAttachComponent");

	Params::GbxCharacter_GetPawnAttachComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetPawnAttachStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPawnAttachStatus                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPawnAttachStatus AGbxCharacter::GetPawnAttachStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetPawnAttachStatus");

	Params::GbxCharacter_GetPawnAttachStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetPerceptionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxPerceptionComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxPerceptionComponent* AGbxCharacter::GetPerceptionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetPerceptionComponent");

	Params::GbxCharacter_GetPerceptionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetableComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* AGbxCharacter::GetTargetableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetTargetableComponent");

	Params::GbxCharacter_GetTargetableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetTargetingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetingComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* AGbxCharacter::GetTargetingComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetTargetingComponent");

	Params::GbxCharacter_GetTargetingComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeam* AGbxCharacter::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetTeam");

	Params::GbxCharacter_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.GetTeamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeamComponent* AGbxCharacter::GetTeamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "GetTeamComponent");

	Params::GbxCharacter_GetTeamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.IsZoomed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxCharacter::IsZoomed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "IsZoomed");

	Params::GbxCharacter_IsZoomed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacter.SetTeam
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UTeam*                            Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxCharacter::SetTeam(class UTeam* Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacter", "SetTeam");

	Params::GbxCharacter_SetTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BalanceStateComponent.OnInheritedBalanceSourceLevelChanged
// (Native, Protected)
// Parameters:
// class UBalanceStateComponent*           InheritedBalanceStateSource                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OldExperienceLevel                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewExperienceLevel                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::OnInheritedBalanceSourceLevelChanged(class UBalanceStateComponent* InheritedBalanceStateSource, const int32 OldExperienceLevel, const int32 NewExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "OnInheritedBalanceSourceLevelChanged");

	Params::BalanceStateComponent_OnInheritedBalanceSourceLevelChanged Parms{};

	Parms.InheritedBalanceStateSource = InheritedBalanceStateSource;
	Parms.OldExperienceLevel = OldExperienceLevel;
	Parms.NewExperienceLevel = NewExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BalanceStateComponent.OnRep_ExperienceLevel
// (Final, Native, Protected)
// Parameters:
// int32                                   OldExperienceLevel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::OnRep_ExperienceLevel(int32 OldExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "OnRep_ExperienceLevel");

	Params::BalanceStateComponent_OnRep_ExperienceLevel Parms{};

	Parms.OldExperienceLevel = OldExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BalanceStateComponent.SetExperienceLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewExperienceLevel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::SetExperienceLevel(int32 NewExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "SetExperienceLevel");

	Params::BalanceStateComponent_SetExperienceLevel Parms{};

	Parms.NewExperienceLevel = NewExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BalanceStateComponent.SetGameStage
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewGameStage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBalanceStateComponent::SetGameStage(int32 NewGameStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "SetGameStage");

	Params::BalanceStateComponent_SetGameStage Parms{};

	Parms.NewGameStage = NewGameStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BalanceStateComponent.GetBalanceTableRow
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle UBalanceStateComponent::GetBalanceTableRow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "GetBalanceTableRow");

	Params::BalanceStateComponent_GetBalanceTableRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.BalanceStateComponent.GetExperienceLevel
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBalanceStateComponent::GetExperienceLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "GetExperienceLevel");

	Params::BalanceStateComponent_GetExperienceLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.BalanceStateComponent.GetGameStage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBalanceStateComponent::GetGameStage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalanceStateComponent", "GetGameStage");

	Params::BalanceStateComponent_GetGameStage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxChildActorComponent.DespawnChildActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGbxChildActorComponent::DespawnChildActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxChildActorComponent", "DespawnChildActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxChildActorComponent.SpawnChildActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGbxChildActorComponent::SpawnChildActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxChildActorComponent", "SpawnChildActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.CopyFromCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCustomizationComponent*       SourceComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::CopyFromCustomization(class UGbxCustomizationComponent* SourceComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "CopyFromCustomization");

	Params::GbxCustomizationComponent_CopyFromCustomization Parms{};

	Parms.SourceComponent = SourceComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.GetDefaultCustomColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   SelectionIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     DefaultColor                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::GetDefaultCustomColor(int32 SelectionIndex, struct FLinearColor* DefaultColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "GetDefaultCustomColor");

	Params::GbxCustomizationComponent_GetDefaultCustomColor Parms{};

	Parms.SelectionIndex = SelectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DefaultColor != nullptr)
		*DefaultColor = std::move(Parms.DefaultColor);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.GetDefaultCustomSplitColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   SelectionIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     DefaultSplitColor                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::GetDefaultCustomSplitColor(int32 SelectionIndex, struct FLinearColor* DefaultSplitColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "GetDefaultCustomSplitColor");

	Params::GbxCustomizationComponent_GetDefaultCustomSplitColor Parms{};

	Parms.SelectionIndex = SelectionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DefaultSplitColor != nullptr)
		*DefaultSplitColor = std::move(Parms.DefaultSplitColor);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.LinkedCustomizationApplied
// (Final, Native, Public)
// Parameters:
// class UGbxCustomizationData*            Customization                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::LinkedCustomizationApplied(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "LinkedCustomizationApplied");

	Params::GbxCustomizationComponent_LinkedCustomizationApplied Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.LinkedCustomizationRemoved
// (Final, Native, Public)
// Parameters:
// class UGbxCustomizationData*            Customization                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::LinkedCustomizationRemoved(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "LinkedCustomizationRemoved");

	Params::GbxCustomizationComponent_LinkedCustomizationRemoved Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.LinkToCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCustomizationComponent*       SourceComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::LinkToCustomization(class UGbxCustomizationComponent* SourceComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "LinkToCustomization");

	Params::GbxCustomizationComponent_LinkToCustomization Parms{};

	Parms.SourceComponent = SourceComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.OnRep_CustomColorSelections
// (Final, Native, Public)

void UGbxCustomizationComponent::OnRep_CustomColorSelections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "OnRep_CustomColorSelections");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.RemoveCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCustomizationData*            Customization                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationComponent::RemoveCustomization(class UGbxCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "RemoveCustomization");

	Params::GbxCustomizationComponent_RemoveCustomization Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerApplyCustomColor
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// int32                                   CustomColorIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InAppliedColor                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InSplitColor                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InUseDefaultColor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InUseDefaultSplitColor                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerApplyCustomColor(int32 CustomColorIndex, const struct FVector& InAppliedColor, const struct FVector& InSplitColor, bool InUseDefaultColor, bool InUseDefaultSplitColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerApplyCustomColor");

	Params::GbxCustomizationComponent_ServerApplyCustomColor Parms{};

	Parms.CustomColorIndex = CustomColorIndex;
	Parms.InAppliedColor = std::move(InAppliedColor);
	Parms.InSplitColor = std::move(InSplitColor);
	Parms.InUseDefaultColor = InUseDefaultColor;
	Parms.InUseDefaultSplitColor = InUseDefaultSplitColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationComponent.ServerApplyCustomizationData
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class UGbxCustomizationData*            CustomizationToApply                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OptionalCustomizationId                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCustomizationComponent::ServerApplyCustomizationData(class UGbxCustomizationData* CustomizationToApply, int32 OptionalCustomizationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationComponent", "ServerApplyCustomizationData");

	Params::GbxCustomizationComponent_ServerApplyCustomizationData Parms{};

	Parms.CustomizationToApply = CustomizationToApply;
	Parms.OptionalCustomizationId = OptionalCustomizationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_PhysicalAnim.K2_FixupDynamicToKinematicIssues
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// float                                   AngularThreshold                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_PhysicalAnim::K2_FixupDynamicToKinematicIssues(float AngularThreshold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_PhysicalAnim", "K2_FixupDynamicToKinematicIssues");

	Params::GbxAction_PhysicalAnim_K2_FixupDynamicToKinematicIssues Parms{};

	Parms.AngularThreshold = AngularThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_PhysicalAnim.K2_GetDynamicBodyState
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   AngularThreshold                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxPhysicalActionDynamicBodyState      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxPhysicalActionDynamicBodyState UGbxAction_PhysicalAnim::K2_GetDynamicBodyState(float AngularThreshold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_PhysicalAnim", "K2_GetDynamicBodyState");

	Params::GbxAction_PhysicalAnim_K2_GetDynamicBodyState Parms{};

	Parms.AngularThreshold = AngularThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AttributeContextResolver.GetContextForAttribute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UAttributeContextResolver::GetContextForAttribute(const class UGbxAttributeData* Attribute, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttributeContextResolver", "GetContextForAttribute");

	Params::AttributeContextResolver_GetContextForAttribute Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.ActivateChallenge
// (Final, Native, Public, BlueprintCallable)

void UChallenge::ActivateChallenge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "ActivateChallenge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.Challenge.CompletedChallenge
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGbxPlayerController*             CompletedPlayer                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::CompletedChallenge(const class AGbxPlayerController* CompletedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "CompletedChallenge");

	Params::Challenge_CompletedChallenge Parms{};

	Parms.CompletedPlayer = CompletedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.Challenge.CompletedConditional
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::CompletedConditional()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "CompletedConditional");

	Params::Challenge_CompletedConditional Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.IncrementChallengeProgressByValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::IncrementChallengeProgressByValue(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "IncrementChallengeProgressByValue");

	Params::Challenge_IncrementChallengeProgressByValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.Challenge.OnChallengeActivated
// (Event, Public, BlueprintEvent)

void UChallenge::OnChallengeActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "OnChallengeActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxGameSystemCore.Challenge.OnInitChallengeInstance
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengesComponent*             OwningChallenges                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxCharacter*                    AssociatedCharacter                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "OnInitChallengeInstance");

	Params::Challenge_OnInitChallengeInstance Parms{};

	Parms.OwningChallenges = OwningChallenges;
	Parms.AssociatedCharacter = AssociatedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.Challenge.OnLevelActorRegistered
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengeLevelActorComponent*    RegisteredLevelActor                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::OnLevelActorRegistered(class UChallengeLevelActorComponent* RegisteredLevelActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "OnLevelActorRegistered");

	Params::Challenge_OnLevelActorRegistered Parms{};

	Parms.RegisteredLevelActor = RegisteredLevelActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.Challenge.PlayerEnterChallengeArea
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengeLevelActorComponent*    LevelActorComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::PlayerEnterChallengeArea(class UChallengeLevelActorComponent* LevelActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "PlayerEnterChallengeArea");

	Params::Challenge_PlayerEnterChallengeArea Parms{};

	Parms.LevelActorComponent = LevelActorComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.Challenge.PlayerExitChallengeArea
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengeLevelActorComponent*    LevelActorComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::PlayerExitChallengeArea(class UChallengeLevelActorComponent* LevelActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "PlayerExitChallengeArea");

	Params::Challenge_PlayerExitChallengeArea Parms{};

	Parms.LevelActorComponent = LevelActorComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.Challenge.TestForCompleted
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerToTest                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OtherObject                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   EnumTag                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::TestForCompleted(const class AGbxPlayerController* PlayerToTest, const class UObject* OtherObject, const TArray<class FString>& EnumTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "TestForCompleted");

	Params::Challenge_TestForCompleted Parms{};

	Parms.PlayerToTest = PlayerToTest;
	Parms.OtherObject = OtherObject;
	Parms.EnumTag = std::move(EnumTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.CompleteChallenge
// (Native, Public, BlueprintCallable, Const)

void UChallenge::CompleteChallenge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "CompleteChallenge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.Challenge.GetChallengeCompleteInfo
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   NumCompleted                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumChallenges                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::GetChallengeCompleteInfo(int32* NumCompleted, int32* NumChallenges) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "GetChallengeCompleteInfo");

	Params::Challenge_GetChallengeCompleteInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NumCompleted != nullptr)
		*NumCompleted = Parms.NumCompleted;

	if (NumChallenges != nullptr)
		*NumChallenges = Parms.NumChallenges;
}


// Function GbxGameSystemCore.Challenge.GetChallengeProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallenge::GetChallengeProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "GetChallengeProgress");

	Params::Challenge_GetChallengeProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.GetChallengeProgressGoalValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallenge::GetChallengeProgressGoalValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "GetChallengeProgressGoalValue");

	Params::Challenge_GetChallengeProgressGoalValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.GetLevelActorComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UChallengeLevelActorComponent*>LevelActorList                                         (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UChallenge::GetLevelActorComponents(TArray<class UChallengeLevelActorComponent*>* LevelActorList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "GetLevelActorComponents");

	Params::Challenge_GetLevelActorComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LevelActorList != nullptr)
		*LevelActorList = std::move(Parms.LevelActorList);
}


// Function GbxGameSystemCore.Challenge.IncrementChallengeProgress
// (Final, Native, Public, BlueprintCallable, Const)

void UChallenge::IncrementChallengeProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "IncrementChallengeProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.Challenge.IsChallengeActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::IsChallengeActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "IsChallengeActive");

	Params::Challenge_IsChallengeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.IsChallengeComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallenge::IsChallengeComplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "IsChallengeComplete");

	Params::Challenge_IsChallengeComplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Challenge.SetChallengeProgress
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int32                                   NewProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallenge::SetChallengeProgress(int32 NewProgress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge", "SetChallengeProgress");

	Params::Challenge_SetChallengeProgress Parms{};

	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SpawnPatternData.CalculateSpawnPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSpawnPatternInputs              Inputs                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSpawnPatternResult              Result                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USpawnPatternData::CalculateSpawnPoint(const struct FSpawnPatternInputs& Inputs, struct FSpawnPatternResult* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpawnPatternData", "CalculateSpawnPoint");

	Params::SpawnPatternData_CalculateSpawnPoint Parms{};

	Parms.Inputs = std::move(Inputs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function GbxGameSystemCore.GbxAnimInstance.CanUseAnimTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAnimTable*                    AnimTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAnimInstance::CanUseAnimTable(class UGbxAnimTable* AnimTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAnimInstance", "CanUseAnimTable");

	Params::GbxAnimInstance_CanUseAnimTable Parms{};

	Parms.AnimTable = AnimTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAnimInstance.GetAnimTableSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAnimTable*                    AnimTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequence* UGbxAnimInstance::GetAnimTableSequence(class UGbxAnimTable* AnimTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAnimInstance", "GetAnimTableSequence");

	Params::GbxAnimInstance_GetAnimTableSequence Parms{};

	Parms.AnimTable = AnimTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAreaComponent.AreaTest
// (Native, Public)

void UGbxAreaComponent::AreaTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAreaComponent", "AreaTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.RigidBodyComponent.SetKinematic
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              SleepingComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URigidBodyComponent::SetKinematic(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RigidBodyComponent", "SetKinematic");

	Params::RigidBodyComponent_SetKinematic Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationData.AsyncLoadCustomizationAssets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(class UGbxCustomizationData* LoadedCustomization)>LoadedDelegate                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCustomizationData::AsyncLoadCustomizationAssets(const TDelegate<void(class UGbxCustomizationData* LoadedCustomization)>& LoadedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "AsyncLoadCustomizationAssets");

	Params::GbxCustomizationData_AsyncLoadCustomizationAssets Parms{};

	Parms.LoadedDelegate = LoadedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationData.IsLoading
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::IsLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "IsLoading");

	Params::GbxCustomizationData_IsLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationData.K2_PlayAction
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActionState_Base                ActionData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UGbxAction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxCustomizationData::K2_PlayAction(class AActor* TargetActor, const struct FActionState_Base& ActionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "K2_PlayAction");

	Params::GbxCustomizationData_K2_PlayAction Parms{};

	Parms.TargetActor = TargetActor;
	Parms.ActionData = std::move(ActionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationData.OnCustomizationAssetLoaded
// (Final, Native, Private)

void UGbxCustomizationData::OnCustomizationAssetLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "OnCustomizationAssetLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationData.ApplyCustomizationToActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OptionalCustomizationId                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::ApplyCustomizationToActor(class AActor* TargetActor, int32 OptionalCustomizationId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "ApplyCustomizationToActor");

	Params::GbxCustomizationData_ApplyCustomizationToActor Parms{};

	Parms.TargetActor = TargetActor;
	Parms.OptionalCustomizationId = OptionalCustomizationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationData.IsLoaded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   OptionalCustomizationId                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::IsLoaded(int32 OptionalCustomizationId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "IsLoaded");

	Params::GbxCustomizationData_IsLoaded Parms{};

	Parms.OptionalCustomizationId = OptionalCustomizationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCustomizationData.RemoveCustomizationFromActor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCustomizationData::RemoveCustomizationFromActor(class AActor* TargetActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationData", "RemoveCustomizationFromActor");

	Params::GbxCustomizationData_RemoveCustomizationFromActor Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UserStatesFunctionLibrary.HasEnableConditionsSetForSpecificUserState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UserStateProperty                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUserStatesFunctionLibrary::HasEnableConditionsSetForSpecificUserState(class UObject* Context, class FName UserStateProperty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UserStatesFunctionLibrary", "HasEnableConditionsSetForSpecificUserState");

	Params::UserStatesFunctionLibrary_HasEnableConditionsSetForSpecificUserState Parms{};

	Parms.Context = Context;
	Parms.UserStateProperty = UserStateProperty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.ActivateChallenge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ActivateChallenge(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "ActivateChallenge");

	Params::ChallengesComponent_ActivateChallenge Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.AreGlobalChallengesRegistered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallengesComponent::AreGlobalChallengesRegistered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "AreGlobalChallengesRegistered");

	Params::ChallengesComponent_AreGlobalChallengesRegistered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.ClientActivateChallenge
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ClientActivateChallenge(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "ClientActivateChallenge");

	Params::ChallengesComponent_ClientActivateChallenge Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.ClientChallengeCompleted
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumTiersComplete                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceActive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ClientChallengeCompleted(class UClass* ChalClass, int32 NumTiersComplete, bool bForceActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "ClientChallengeCompleted");

	Params::ChallengesComponent_ClientChallengeCompleted Parms{};

	Parms.ChalClass = ChalClass;
	Parms.NumTiersComplete = NumTiersComplete;
	Parms.bForceActive = bForceActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.ClientChallengeUpdateProgress
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::ClientChallengeUpdateProgress(class UClass* ChalClass, int32 NewProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "ClientChallengeUpdateProgress");

	Params::ChallengesComponent_ClientChallengeUpdateProgress Parms{};

	Parms.ChalClass = ChalClass;
	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.CompleteChallenge
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceActive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::CompleteChallenge(class UClass* ChalClass, bool bForceActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "CompleteChallenge");

	Params::ChallengesComponent_CompleteChallenge Parms{};

	Parms.ChalClass = ChalClass;
	Parms.bForceActive = bForceActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.CompleteChallengeIfConditionsMet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::CompleteChallengeIfConditionsMet(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "CompleteChallengeIfConditionsMet");

	Params::ChallengesComponent_CompleteChallengeIfConditionsMet Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeCompleteInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumCompleted                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumChallenges                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::GetChallengeCompleteInfo(class UClass* ChalClass, int32* NumCompleted, int32* NumChallenges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeCompleteInfo");

	Params::ChallengesComponent_GetChallengeCompleteInfo Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NumCompleted != nullptr)
		*NumCompleted = Parms.NumCompleted;

	if (NumChallenges != nullptr)
		*NumChallenges = Parms.NumChallenges;
}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeCompleteInfoForLevels
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     LevelsForChallenges                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UChallengeCategoryData*           Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumCompleted                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumActive                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreHidden                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::GetChallengeCompleteInfoForLevels(const TArray<class FName>& LevelsForChallenges, class UChallengeCategoryData* Category, int32* NumCompleted, int32* NumActive, bool bIgnoreHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeCompleteInfoForLevels");

	Params::ChallengesComponent_GetChallengeCompleteInfoForLevels Parms{};

	Parms.LevelsForChallenges = std::move(LevelsForChallenges);
	Parms.Category = Category;
	Parms.bIgnoreHidden = bIgnoreHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NumCompleted != nullptr)
		*NumCompleted = Parms.NumCompleted;

	if (NumActive != nullptr)
		*NumActive = Parms.NumActive;
}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeProgress(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeProgress");

	Params::ChallengesComponent_GetChallengeProgress Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeProgressGoalValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeProgressGoalValue(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeProgressGoalValue");

	Params::ChallengesComponent_GetChallengeProgressGoalValue Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeStatGoalValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeStatGoalValue(class UClass* ChalClass, class UGameStatData* StatId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeStatGoalValue");

	Params::ChallengesComponent_GetChallengeStatGoalValue Parms{};

	Parms.ChalClass = ChalClass;
	Parms.StatId = StatId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.GetChallengeStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetChallengeStatValue(class UClass* ChalClass, class UGameStatData* StatId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetChallengeStatValue");

	Params::ChallengesComponent_GetChallengeStatValue Parms{};

	Parms.ChalClass = ChalClass;
	Parms.StatId = StatId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.GetCompletedChallengeTiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetCompletedChallengeTiers(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetCompletedChallengeTiers");

	Params::ChallengesComponent_GetCompletedChallengeTiers Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.GetLocalChallenges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FChallengeInstanceData>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FChallengeInstanceData> UChallengesComponent::GetLocalChallenges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetLocalChallenges");

	Params::ChallengesComponent_GetLocalChallenges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.GetMaxChallengeTiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UChallengesComponent::GetMaxChallengeTiers(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "GetMaxChallengeTiers");

	Params::ChallengesComponent_GetMaxChallengeTiers Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.IncrementChallengeProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::IncrementChallengeProgress(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "IncrementChallengeProgress");

	Params::ChallengesComponent_IncrementChallengeProgress Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.IsChallengeActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallengesComponent::IsChallengeActive(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "IsChallengeActive");

	Params::ChallengesComponent_IsChallengeActive Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.IsChallengeComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChallengesComponent::IsChallengeComplete(class UClass* ChalClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "IsChallengeComplete");

	Params::ChallengesComponent_IsChallengeComplete Parms{};

	Parms.ChalClass = ChalClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengesComponent.SetChallengeActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsActive                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::SetChallengeActive(class UClass* ChalClass, bool bInIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "SetChallengeActive");

	Params::ChallengesComponent_SetChallengeActive Parms{};

	Parms.ChalClass = ChalClass;
	Parms.bInIsActive = bInIsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.SetChallengeProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ChalClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesComponent::SetChallengeProgress(class UClass* ChalClass, int32 NewProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "SetChallengeProgress");

	Params::ChallengesComponent_SetChallengeProgress Parms{};

	Parms.ChalClass = ChalClass;
	Parms.NewProgress = NewProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengesComponent.UnregisterInActivePlayerChallenges
// (Final, Native, Public, BlueprintCallable)

void UChallengesComponent::UnregisterInActivePlayerChallenges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesComponent", "UnregisterInActivePlayerChallenges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterAnimInstance.OnStanceChanged
// (Event, Public, BlueprintEvent)

void UGbxCharacterAnimInstance::OnStanceChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterAnimInstance", "OnStanceChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxGameSystemCore.GbxCharacterAnimInstance.SetDesiredFacialEmoteWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterAnimInstance::SetDesiredFacialEmoteWeight(float Weight, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterAnimInstance", "SetDesiredFacialEmoteWeight");

	Params::GbxCharacterAnimInstance_SetDesiredFacialEmoteWeight Parms{};

	Parms.Weight = Weight;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.EffectCollectionData.StaticGetParticleEffect
// (Final, Native, Static, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UEffectCollectionData>Collection                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* UEffectCollectionData::StaticGetParticleEffect(TSubclassOf<class UEffectCollectionData> Collection, class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EffectCollectionData", "StaticGetParticleEffect");

	Params::EffectCollectionData_StaticGetParticleEffect Parms{};

	Parms.Collection = Collection;
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EffectCollectionData.StaticGetParticleEffectAndWwiseEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UEffectCollectionData>Collection                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ParticleEffect                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      WwiseEvent                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEffectCollectionData::StaticGetParticleEffectAndWwiseEvent(TSubclassOf<class UEffectCollectionData> Collection, class UObject* ContextObject, class UParticleSystem** ParticleEffect, class UWwiseEvent** WwiseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EffectCollectionData", "StaticGetParticleEffectAndWwiseEvent");

	Params::EffectCollectionData_StaticGetParticleEffectAndWwiseEvent Parms{};

	Parms.Collection = Collection;
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParticleEffect != nullptr)
		*ParticleEffect = Parms.ParticleEffect;

	if (WwiseEvent != nullptr)
		*WwiseEvent = Parms.WwiseEvent;
}


// Function GbxGameSystemCore.EffectCollectionData.StaticGetWwiseEvent
// (Final, Native, Static, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UEffectCollectionData>Collection                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* UEffectCollectionData::StaticGetWwiseEvent(TSubclassOf<class UEffectCollectionData> Collection, class UObject* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EffectCollectionData", "StaticGetWwiseEvent");

	Params::EffectCollectionData_StaticGetWwiseEvent Parms{};

	Parms.Collection = Collection;
	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EffectCollectionData.GetParticleEffect
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* UEffectCollectionData::GetParticleEffect(class UObject* ContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EffectCollectionData", "GetParticleEffect");

	Params::EffectCollectionData_GetParticleEffect Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EffectCollectionData.GetParticleEffectAndWwiseEvent
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ParticleEffect                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      WwiseEvent                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEffectCollectionData::GetParticleEffectAndWwiseEvent(class UObject* ContextObject, class UParticleSystem** ParticleEffect, class UWwiseEvent** WwiseEvent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EffectCollectionData", "GetParticleEffectAndWwiseEvent");

	Params::EffectCollectionData_GetParticleEffectAndWwiseEvent Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParticleEffect != nullptr)
		*ParticleEffect = Parms.ParticleEffect;

	if (WwiseEvent != nullptr)
		*WwiseEvent = Parms.WwiseEvent;
}


// Function GbxGameSystemCore.EffectCollectionData.GetWwiseEvent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* UEffectCollectionData::GetWwiseEvent(class UObject* ContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EffectCollectionData", "GetWwiseEvent");

	Params::EffectCollectionData_GetWwiseEvent Parms{};

	Parms.ContextObject = ContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DataTableAttributeValueResolver.GetDataTableColumnNames
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// TArray<class FString>                   ValueNames                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDataTableAttributeValueResolver::GetDataTableColumnNames(TArray<class FString>* ValueNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataTableAttributeValueResolver", "GetDataTableColumnNames");

	Params::DataTableAttributeValueResolver_GetDataTableColumnNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ValueNames != nullptr)
		*ValueNames = std::move(Parms.ValueNames);
}


// Function GbxGameSystemCore.DataTableFunctionAttributeValueResolver.GetDataTableRow
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UObject*                          Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle UDataTableFunctionAttributeValueResolver::GetDataTableRow(const class UObject* Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataTableFunctionAttributeValueResolver", "GetDataTableRow");

	Params::DataTableFunctionAttributeValueResolver_GetDataTableRow Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetApplyCriticalHitModsToAoEDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageInfoFunctionLibrary::GetApplyCriticalHitModsToAoEDamage(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetApplyCriticalHitModsToAoEDamage");

	Params::DamageInfoFunctionLibrary_GetApplyCriticalHitModsToAoEDamage Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetCriticalHitDamageOverrides
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FCriticalHitDamageOverrides      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCriticalHitDamageOverrides UDamageInfoFunctionLibrary::GetCriticalHitDamageOverrides(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetCriticalHitDamageOverrides");

	Params::DamageInfoFunctionLibrary_GetCriticalHitDamageOverrides Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageInfoFunctionLibrary::GetDamage(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetDamage");

	Params::DamageInfoFunctionLibrary_GetDamage Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageCauser
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UDamageInfoFunctionLibrary::GetDamageCauser(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetDamageCauser");

	Params::DamageInfoFunctionLibrary_GetDamageCauser Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageModifierComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UDamageModifierComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDamageModifierComponent* UDamageInfoFunctionLibrary::GetDamageModifierComponent(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetDamageModifierComponent");

	Params::DamageInfoFunctionLibrary_GetDamageModifierComponent Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageRadius
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageInfoFunctionLibrary::GetDamageRadius(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetDamageRadius");

	Params::DamageInfoFunctionLibrary_GetDamageRadius Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageSource
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UDamageSource> UDamageInfoFunctionLibrary::GetDamageSource(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetDamageSource");

	Params::DamageInfoFunctionLibrary_GetDamageSource Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetDamageType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxDamageType> UDamageInfoFunctionLibrary::GetDamageType(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetDamageType");

	Params::DamageInfoFunctionLibrary_GetDamageType Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.GetImpactForce
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageInfoFunctionLibrary::GetImpactForce(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "GetImpactForce");

	Params::DamageInfoFunctionLibrary_GetImpactForce Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetApplyCriticalHitModsToAoEDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bApplyCriticalHitModsToAoEDamage                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetApplyCriticalHitModsToAoEDamage(struct FDamageInfo& DamageInfo, bool bApplyCriticalHitModsToAoEDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetApplyCriticalHitModsToAoEDamage");

	Params::DamageInfoFunctionLibrary_SetApplyCriticalHitModsToAoEDamage Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.bApplyCriticalHitModsToAoEDamage = bApplyCriticalHitModsToAoEDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetCriticalHitDamageOverrides
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FCriticalHitDamageOverrides      Overrides                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetCriticalHitDamageOverrides(struct FDamageInfo& DamageInfo, const struct FCriticalHitDamageOverrides& Overrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetCriticalHitDamageOverrides");

	Params::DamageInfoFunctionLibrary_SetCriticalHitDamageOverrides Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.Overrides = std::move(Overrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   InDamage                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamage(struct FDamageInfo& DamageInfo, float InDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetDamage");

	Params::DamageInfoFunctionLibrary_SetDamage Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InDamage = InDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageCauser
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           InDamageCauser                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageCauser(struct FDamageInfo& DamageInfo, class AActor* InDamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetDamageCauser");

	Params::DamageInfoFunctionLibrary_SetDamageCauser Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InDamageCauser = InDamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageModifierComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UDamageModifierComponent*         InModifierComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageModifierComponent(struct FDamageInfo& DamageInfo, class UDamageModifierComponent* InModifierComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetDamageModifierComponent");

	Params::DamageInfoFunctionLibrary_SetDamageModifierComponent Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InModifierComponent = InModifierComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageRadius
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   InDamageRadius                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageRadius(struct FDamageInfo& DamageInfo, float InDamageRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetDamageRadius");

	Params::DamageInfoFunctionLibrary_SetDamageRadius Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InDamageRadius = InDamageRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageSource
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>        InDamageSource                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageSource(struct FDamageInfo& DamageInfo, TSubclassOf<class UDamageSource> InDamageSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetDamageSource");

	Params::DamageInfoFunctionLibrary_SetDamageSource Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InDamageSource = InDamageSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetDamageType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>       InDamageType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetDamageType(struct FDamageInfo& DamageInfo, TSubclassOf<class UGbxDamageType> InDamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetDamageType");

	Params::DamageInfoFunctionLibrary_SetDamageType Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InDamageType = InDamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageInfoFunctionLibrary.SetImpactForce
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   InImpactForce                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageInfoFunctionLibrary::SetImpactForce(struct FDamageInfo& DamageInfo, float InImpactForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageInfoFunctionLibrary", "SetImpactForce");

	Params::DamageInfoFunctionLibrary_SetImpactForce Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.InImpactForce = InImpactForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DamageInfo = std::move(Parms.DamageInfo);
}


// Function GbxGameSystemCore.DamageData.OnHitAnyAttitude
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails          Details                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnHitAnyAttitude(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, const struct FDamageDataEventDetails& Details) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageData", "OnHitAnyAttitude");

	Params::DamageData_OnHitAnyAttitude Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.DamageData.OnHitEnemy
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails          Details                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnHitEnemy(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, const struct FDamageDataEventDetails& Details) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageData", "OnHitEnemy");

	Params::DamageData_OnHitEnemy Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.DamageData.OnHitFriendly
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails          Details                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnHitFriendly(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, const struct FDamageDataEventDetails& Details) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageData", "OnHitFriendly");

	Params::DamageData_OnHitFriendly Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.DamageData.OnKilledEnemy
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageDataEventDetails          Details                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDamageData::OnKilledEnemy(class AActor* DamageInstigator, class AActor* DamageCauser, class AActor* DamageTarget, const struct FDamageDataEventDetails& Details) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageData", "OnKilledEnemy");

	Params::DamageData_OnKilledEnemy Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.ChallengeManager.OnStatIncrement
// (Final, Native, Public)
// Parameters:
// class AActor*                           StatContext                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AChallengeManager::OnStatIncrement(class AActor* StatContext, class UGameStatData* StatId, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeManager", "OnStatIncrement");

	Params::ChallengeManager_OnStatIncrement Parms{};

	Parms.StatContext = StatContext;
	Parms.StatId = StatId;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ProjectileHomingComponent.GetHomingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UProjectileHomingComponent::GetHomingLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileHomingComponent", "GetHomingLocation");

	Params::ProjectileHomingComponent_GetHomingLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ProjectileHomingComponent.SetAssociatedProjectileMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UProjectileMovementComponent*     ProjectileMovementComponent                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileHomingComponent::SetAssociatedProjectileMovement(class UProjectileMovementComponent* ProjectileMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileHomingComponent", "SetAssociatedProjectileMovement");

	Params::ProjectileHomingComponent_SetAssociatedProjectileMovement Parms{};

	Parms.ProjectileMovementComponent = ProjectileMovementComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ProjectileHomingComponent.SetHomeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileHomingComponent::SetHomeIn(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileHomingComponent", "SetHomeIn");

	Params::ProjectileHomingComponent_SetHomeIn Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ProjectileHomingComponent.ToggleHoming
// (Final, Native, Public, BlueprintCallable)

void UProjectileHomingComponent::ToggleHoming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileHomingComponent", "ToggleHoming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageCauserComponent.RegisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*       Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageCauserComponent::RegisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageCauserComponent", "RegisterConditionalDamageModifier");

	Params::DamageCauserComponent_RegisterConditionalDamageModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageCauserComponent.UnregisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*       Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageCauserComponent::UnregisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageCauserComponent", "UnregisterConditionalDamageModifier");

	Params::DamageCauserComponent_UnregisterConditionalDamageModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Loop.OnLoop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Loop::OnLoop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Loop", "OnLoop");

	Params::GbxAction_Loop_OnLoop Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Loop.OnStop
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_Loop::OnStop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Loop", "OnStop");

	Params::GbxAction_Loop_OnStop Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_Loop.K2_StopLooping
// (Final, Native, Private, BlueprintCallable, Const)

void UGbxAction_Loop::K2_StopLooping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_Loop", "K2_StopLooping");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClearAndSetCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UCinematicModeData*               InCinematicMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClearAndSetCinematicMode(class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClearAndSetCinematicMode");

	Params::GbxPlayerController_ClearAndSetCinematicMode Parms{};

	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClearCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGbxPlayerController::ClearCinematicMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClearCinematicMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.Client_PlayGbxFeedback
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class UGbxFeedbackData*                 Data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIs3D                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EffectFalloffMinDistance                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EffectFalloffMaxDistance                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::Client_PlayGbxFeedback(const class UGbxFeedbackData* Data, bool bIs3D, bool bLoop, float Scale, class UObject* SourceContext, const struct FVector& SourceLocation, float EffectFalloffMinDistance, float EffectFalloffMaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "Client_PlayGbxFeedback");

	Params::GbxPlayerController_Client_PlayGbxFeedback Parms{};

	Parms.Data = Data;
	Parms.bIs3D = bIs3D;
	Parms.bLoop = bLoop;
	Parms.Scale = Scale;
	Parms.SourceContext = SourceContext;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.EffectFalloffMinDistance = EffectFalloffMinDistance;
	Parms.EffectFalloffMaxDistance = EffectFalloffMaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.Client_StopGbxFeedback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UGbxFeedbackData*                 Data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::Client_StopGbxFeedback(const class UGbxFeedbackData* Data, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "Client_StopGbxFeedback");

	Params::GbxPlayerController_Client_StopGbxFeedback Parms{};

	Parms.Data = Data;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientApplyDamageDataPresentation
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class UDamageData*                      DamageData                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlayerDamageDataPresentation    PlayerPresentation                                     (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientApplyDamageDataPresentation(const class UDamageData* DamageData, const struct FPlayerDamageDataPresentation& PlayerPresentation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientApplyDamageDataPresentation");

	Params::GbxPlayerController_ClientApplyDamageDataPresentation Parms{};

	Parms.DamageData = DamageData;
	Parms.PlayerPresentation = std::move(PlayerPresentation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientCanSplitscreenJoin
// (Net, NetReliable, Native, Event, Public, NetClient, NetValidate)
// Parameters:
// int32                                   ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanJoin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientCanSplitscreenJoin(int32 ControllerId, bool bCanJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientCanSplitscreenJoin");

	Params::GbxPlayerController_ClientCanSplitscreenJoin Parms{};

	Parms.ControllerId = ControllerId;
	Parms.bCanJoin = bCanJoin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientNotifyActivateCheckpoint
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void AGbxPlayerController::ClientNotifyActivateCheckpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientNotifyActivateCheckpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientPerformFeedback
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPerformFeedback(class UFeedbackData* FeedbackData, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientPerformFeedback");

	Params::GbxPlayerController_ClientPerformFeedback Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientPerformFeedbackAtLocation
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides         RangedOverrides                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPerformFeedbackAtLocation(class UFeedbackData* FeedbackData, const struct FVector& SourceLocation, bool bLoop, class UObject* SourceContext, const struct FRangedDistanceOverrides& RangedOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientPerformFeedbackAtLocation");

	Params::GbxPlayerController_ClientPerformFeedbackAtLocation Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;
	Parms.RangedOverrides = std::move(RangedOverrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientPlayFeedback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UFeedbackData*                    Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPlayFeedback(class UFeedbackData* Data, float Scale, bool bLoop, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientPlayFeedback");

	Params::GbxPlayerController_ClientPlayFeedback Parms{};

	Parms.Data = Data;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientPlayWwiseEvent
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class UWwiseEvent*                      Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientPlayWwiseEvent(class UWwiseEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientPlayWwiseEvent");

	Params::GbxPlayerController_ClientPlayWwiseEvent Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ClientStopFeedback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UFeedbackData*                    Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ClientStopFeedback(class UFeedbackData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ClientStopFeedback");

	Params::GbxPlayerController_ClientStopFeedback Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.DebugCategory
// (Final, Exec, Native, Public)
// Parameters:
// class FName                             CategoryName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::DebugCategory(class FName CategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "DebugCategory");

	Params::GbxPlayerController_DebugCategory Parms{};

	Parms.CategoryName = CategoryName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxGameSystemCore.GbxPlayerController.OnPausedChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bPaused                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::OnPausedChangedDelegate__DelegateSignature(bool bPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "OnPausedChangedDelegate__DelegateSignature");

	Params::GbxPlayerController_OnPausedChangedDelegate__DelegateSignature Parms{};

	Parms.bPaused = bPaused;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GbxGameSystemCore.GbxPlayerController.OnPrimaryCharacterChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGbxCharacter*                    NewCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::OnPrimaryCharacterChanged__DelegateSignature(class AGbxCharacter* NewCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "OnPrimaryCharacterChanged__DelegateSignature");

	Params::GbxPlayerController_OnPrimaryCharacterChanged__DelegateSignature Parms{};

	Parms.NewCharacter = NewCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxPlayerController.OnRep_CinematicMode
// (Final, Native, Protected)

void AGbxPlayerController::OnRep_CinematicMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "OnRep_CinematicMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.OnRep_PrimaryCharacter
// (Final, Native, Protected)

void AGbxPlayerController::OnRep_PrimaryCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "OnRep_PrimaryCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.PopCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UCinematicModeData*               InCinematicMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::PopCinematicMode(class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "PopCinematicMode");

	Params::GbxPlayerController_PopCinematicMode Parms{};

	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.PushCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UCinematicModeData*               InCinematicMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::PushCinematicMode(class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "PushCinematicMode");

	Params::GbxPlayerController_PushCinematicMode Parms{};

	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ServerCanSplitscreenJoin
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ServerCanSplitscreenJoin(int32 ControllerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ServerCanSplitscreenJoin");

	Params::GbxPlayerController_ServerCanSplitscreenJoin Parms{};

	Parms.ControllerId = ControllerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.ServerRequestPawnSlotDetach
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class APawn*                            Occupant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::ServerRequestPawnSlotDetach(class APawn* Occupant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "ServerRequestPawnSlotDetach");

	Params::GbxPlayerController_ServerRequestPawnSlotDetach Parms{};

	Parms.Occupant = Occupant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxPlayerController.DeprojectViewportPositionToWorld
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ViewportX                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ViewportY                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldDirection                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseForegroundProjection                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxPlayerController::DeprojectViewportPositionToWorld(float ViewportX, float ViewportY, struct FVector* WorldLocation, struct FVector* WorldDirection, bool bUseForegroundProjection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "DeprojectViewportPositionToWorld");

	Params::GbxPlayerController_DeprojectViewportPositionToWorld Parms{};

	Parms.ViewportX = ViewportX;
	Parms.ViewportY = ViewportY;
	Parms.bUseForegroundProjection = bUseForegroundProjection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetGbxPerceptionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxPerceptionComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxPerceptionComponent* AGbxPlayerController::GetGbxPerceptionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetGbxPerceptionComponent");

	Params::GbxPlayerController_GetGbxPerceptionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetPlayerProfile
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxProfile*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxProfile* AGbxPlayerController::GetPlayerProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetPlayerProfile");

	Params::GbxPlayerController_GetPlayerProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetPlayerViewportOffset
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   OffsetX                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetY                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::GetPlayerViewportOffset(int32* OffsetX, int32* OffsetY) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetPlayerViewportOffset");

	Params::GbxPlayerController_GetPlayerViewportOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OffsetX != nullptr)
		*OffsetX = Parms.OffsetX;

	if (OffsetY != nullptr)
		*OffsetY = Parms.OffsetY;
}


// Function GbxGameSystemCore.GbxPlayerController.GetPlayerViewportSize
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SizeX                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeY                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::GetPlayerViewportSize(int32* SizeX, int32* SizeY) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetPlayerViewportSize");

	Params::GbxPlayerController_GetPlayerViewportSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SizeX != nullptr)
		*SizeX = Parms.SizeX;

	if (SizeY != nullptr)
		*SizeY = Parms.SizeY;
}


// Function GbxGameSystemCore.GbxPlayerController.GetPrimaryCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGbxCharacter*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGbxCharacter* AGbxPlayerController::GetPrimaryCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetPrimaryCharacter");

	Params::GbxPlayerController_GetPrimaryCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetableComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* AGbxPlayerController::GetTargetableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetTargetableComponent");

	Params::GbxPlayerController_GetTargetableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetTargetingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetingComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* AGbxPlayerController::GetTargetingComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetTargetingComponent");

	Params::GbxPlayerController_GetTargetingComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeam* AGbxPlayerController::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetTeam");

	Params::GbxPlayerController_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.GetTeamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeamComponent* AGbxPlayerController::GetTeamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "GetTeamComponent");

	Params::GbxPlayerController_GetTeamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.IsUsingGamepad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxPlayerController::IsUsingGamepad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "IsUsingGamepad");

	Params::GbxPlayerController_IsUsingGamepad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPlayerController.SetTeam
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UTeam*                            Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxPlayerController::SetTeam(class UTeam* Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxPlayerController", "SetTeam");

	Params::GbxPlayerController_SetTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoActor");

	Params::GbxCharacterMovementComponent_MakeFacingInfoActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoActorEyes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoActorEyes(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoActorEyes");

	Params::GbxCharacterMovementComponent_MakeFacingInfoActorEyes Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoComponent(class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoComponent");

	Params::GbxCharacterMovementComponent_MakeFacingInfoComponent Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoDirection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoDirection");

	Params::GbxCharacterMovementComponent_MakeFacingInfoDirection Parms{};

	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoLocation");

	Params::GbxCharacterMovementComponent_MakeFacingInfoLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoNone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoNone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoNone");

	Params::GbxCharacterMovementComponent_MakeFacingInfoNone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.MakeFacingInfoRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFacingInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFacingInfo UGbxCharacterMovementComponent::MakeFacingInfoRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCharacterMovementComponent", "MakeFacingInfoRotation");

	Params::GbxCharacterMovementComponent_MakeFacingInfoRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ClientAdjustControlledMovePosition
// (Final, Net, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FControlledMoveNetCorrection     ServerCMData                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          NewLoc                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewVel                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              NewBase                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewBaseBoneName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBaseRelativePosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ServerMovementMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ClientAdjustControlledMovePosition(float Timestamp, const struct FControlledMoveNetCorrection& ServerCMData, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ClientAdjustControlledMovePosition");

	Params::GbxCharacterMovementComponent_ClientAdjustControlledMovePosition Parms{};

	Parms.Timestamp = Timestamp;
	Parms.ServerCMData = std::move(ServerCMData);
	Parms.NewLoc = std::move(NewLoc);
	Parms.NewVel = std::move(NewVel);
	Parms.NewBase = NewBase;
	Parms.NewBaseBoneName = NewBaseBoneName;
	Parms.bHasBase = bHasBase;
	Parms.bBaseRelativePosition = bBaseRelativePosition;
	Parms.ServerMovementMode = ServerMovementMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ControlledServerMove
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10            InAccel                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           ClientLoc                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   CompressedMoveFlags                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ClientRoll                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  View                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ClientMovementBase                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ClientBaseBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ClientMovementMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  CMDir                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  ClientBodyYaw                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ControlledServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode, uint32 CMDir, uint16 ClientBodyYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ControlledServerMove");

	Params::GbxCharacterMovementComponent_ControlledServerMove Parms{};

	Parms.Timestamp = Timestamp;
	Parms.InAccel = std::move(InAccel);
	Parms.ClientLoc = std::move(ClientLoc);
	Parms.CompressedMoveFlags = CompressedMoveFlags;
	Parms.ClientRoll = ClientRoll;
	Parms.View = View;
	Parms.ClientMovementBase = ClientMovementBase;
	Parms.ClientBaseBoneName = ClientBaseBoneName;
	Parms.ClientMovementMode = ClientMovementMode;
	Parms.CMDir = CMDir;
	Parms.ClientBodyYaw = ClientBodyYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ControlledServerMoveDual
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                                   TimeStamp0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10            InAccel0                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PendingFlags                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  View0                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  CMDir0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10            InAccel                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           ClientLoc                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewFlags                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ClientRoll                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  View                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ClientMovementBase                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ClientBaseBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ClientMovementMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  CMDir                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  ClientBodyYaw                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ControlledServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, uint32 CMDir0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode, uint32 CMDir, uint16 ClientBodyYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ControlledServerMoveDual");

	Params::GbxCharacterMovementComponent_ControlledServerMoveDual Parms{};

	Parms.TimeStamp0 = TimeStamp0;
	Parms.InAccel0 = std::move(InAccel0);
	Parms.PendingFlags = PendingFlags;
	Parms.View0 = View0;
	Parms.CMDir0 = CMDir0;
	Parms.Timestamp = Timestamp;
	Parms.InAccel = std::move(InAccel);
	Parms.ClientLoc = std::move(ClientLoc);
	Parms.NewFlags = NewFlags;
	Parms.ClientRoll = ClientRoll;
	Parms.View = View;
	Parms.ClientMovementBase = ClientMovementBase;
	Parms.ClientBaseBoneName = ClientBaseBoneName;
	Parms.ClientMovementMode = ClientMovementMode;
	Parms.CMDir = CMDir;
	Parms.ClientBodyYaw = ClientBodyYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ControlledServerMoveOld
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                                   OldTimeStamp                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize10            OldAccel                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   OldMoveFlags                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  CMDir                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ControlledServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, uint8 OldMoveFlags, uint32 CMDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ControlledServerMoveOld");

	Params::GbxCharacterMovementComponent_ControlledServerMoveOld Parms{};

	Parms.OldTimeStamp = OldTimeStamp;
	Parms.OldAccel = std::move(OldAccel);
	Parms.OldMoveFlags = OldMoveFlags;
	Parms.CMDir = CMDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxGameSystemCore.GbxCharacterMovementComponent.GbxCharacterMovementEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGbxCharacterMovementComponent::GbxCharacterMovementEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GbxCharacterMovementEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GbxSetAnimInstanceClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkelMeshComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           NewClass                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::GbxSetAnimInstanceClass(class USkeletalMeshComponent* SkelMeshComponent, class UClass* NewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GbxSetAnimInstanceClass");

	Params::GbxCharacterMovementComponent_GbxSetAnimInstanceClass Parms{};

	Parms.SkelMeshComponent = SkelMeshComponent;
	Parms.NewClass = NewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.LeaveNoneWithRootMotionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bApplyDefault                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::LeaveNoneWithRootMotionMode(bool bApplyDefault)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "LeaveNoneWithRootMotionMode");

	Params::GbxCharacterMovementComponent_LeaveNoneWithRootMotionMode Parms{};

	Parms.bApplyDefault = bApplyDefault;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnCapsuleBeginOverlap
// (Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::OnCapsuleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnCapsuleBeginOverlap");

	Params::GbxCharacterMovementComponent_OnCapsuleBeginOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnCapsuleEndOverlap
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::OnCapsuleEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnCapsuleEndOverlap");

	Params::GbxCharacterMovementComponent_OnCapsuleEndOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnNotifyTurnEnter
// (Final, Native, Public, BlueprintCallable)

void UGbxCharacterMovementComponent::OnNotifyTurnEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnNotifyTurnEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnNotifyTurnExit
// (Final, Native, Public, BlueprintCallable)

void UGbxCharacterMovementComponent::OnNotifyTurnExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnNotifyTurnExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnRep_ControlledMove
// (Final, Native, Protected)

void UGbxCharacterMovementComponent::OnRep_ControlledMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnRep_ControlledMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.OnStanceChanged
// (Native, Public)
// Parameters:
// struct FStanceChangedEventArgs          Args                                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::OnStanceChanged(const struct FStanceChangedEventArgs& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "OnStanceChanged");

	Params::GbxCharacterMovementComponent_OnStanceChanged Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ServerAttemptMantle
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FMantleAttemptInfo               ClientData                                             (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ServerAttemptMantle(const struct FMantleAttemptInfo& ClientData, float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ServerAttemptMantle");

	Params::GbxCharacterMovementComponent_ServerAttemptMantle Parms{};

	Parms.ClientData = std::move(ClientData);
	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ServerStartMoveTo
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FCharacterMoveToCommand          MoveToCommand                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::ServerStartMoveTo(const struct FCharacterMoveToCommand& MoveToCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ServerStartMoveTo");

	Params::GbxCharacterMovementComponent_ServerStartMoveTo Parms{};

	Parms.MoveToCommand = std::move(MoveToCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.ServerStopMoveTo
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void UGbxCharacterMovementComponent::ServerStopMoveTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "ServerStopMoveTo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetAnimationBasedTurning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetAnimationBasedTurning(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetAnimationBasedTurning");

	Params::GbxCharacterMovementComponent_SetAnimationBasedTurning Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetFacingTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFacingInfo                      FacingTarget                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetFacingTarget(const struct FFacingInfo& FacingTarget, EFacingChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetFacingTarget");

	Params::GbxCharacterMovementComponent_SetFacingTarget Parms{};

	Parms.FacingTarget = std::move(FacingTarget);
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetNoneWithRootMotionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAnimationWalking                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetNoneWithRootMotionMode(bool bAnimationWalking, const class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetNoneWithRootMotionMode");

	Params::GbxCharacterMovementComponent_SetNoneWithRootMotionMode Parms{};

	Parms.bAnimationWalking = bAnimationWalking;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.SetPendingRawInputVector
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewInputVector                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::SetPendingRawInputVector(const struct FVector& NewInputVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "SetPendingRawInputVector");

	Params::GbxCharacterMovementComponent_SetPendingRawInputVector Parms{};

	Parms.NewInputVector = std::move(NewInputVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StartControlledMove
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UControlledMove>      ControlledMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedOverride                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOverride                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LaunchAngleOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::StartControlledMove(TSubclassOf<class UControlledMove> ControlledMove, class AActor* Instigator, float SpeedOverride, float DurationOverride, float LaunchAngleOverride, class AActor* TargetActor, const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StartControlledMove");

	Params::GbxCharacterMovementComponent_StartControlledMove Parms{};

	Parms.ControlledMove = ControlledMove;
	Parms.Instigator = Instigator;
	Parms.SpeedOverride = SpeedOverride;
	Parms.DurationOverride = DurationOverride;
	Parms.LaunchAngleOverride = LaunchAngleOverride;
	Parms.TargetActor = TargetActor;
	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StartMoveTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterMoveToCommand          MoveToCommand                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StartMoveTo(const struct FCharacterMoveToCommand& MoveToCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StartMoveTo");

	Params::GbxCharacterMovementComponent_StartMoveTo Parms{};

	Parms.MoveToCommand = std::move(MoveToCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StartRotateTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterRotateToCommand        RotateToCommand                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StartRotateTo(const struct FCharacterRotateToCommand& RotateToCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StartRotateTo");

	Params::GbxCharacterMovementComponent_StartRotateTo Parms{};

	Parms.RotateToCommand = std::move(RotateToCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StopControlledMove
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UControlledMove>      ControlledMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bZeroVelocity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StopControlledMove(TSubclassOf<class UControlledMove> ControlledMove, bool bZeroVelocity, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StopControlledMove");

	Params::GbxCharacterMovementComponent_StopControlledMove Parms{};

	Parms.ControlledMove = ControlledMove;
	Parms.bZeroVelocity = bZeroVelocity;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StopMoveTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicateStop                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCharacterMovementComponent::StopMoveTo(bool bForce, bool bReplicateStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StopMoveTo");

	Params::GbxCharacterMovementComponent_StopMoveTo Parms{};

	Parms.bForce = bForce;
	Parms.bReplicateStop = bReplicateStop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.StopRotateTo
// (Final, Native, Public, BlueprintCallable)

void UGbxCharacterMovementComponent::StopRotateTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "StopRotateTo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.CanStartMantle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::CanStartMantle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "CanStartMantle");

	Params::GbxCharacterMovementComponent_CanStartMantle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.CanStartPassiveMantle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::CanStartPassiveMantle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "CanStartPassiveMantle");

	Params::GbxCharacterMovementComponent_CanStartPassiveMantle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetCurrentFacingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxCharacterMovementComponent::GetCurrentFacingLocation(EFacingChannel Channel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetCurrentFacingLocation");

	Params::GbxCharacterMovementComponent_GetCurrentFacingLocation Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetCurrentFacingOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxCharacterMovementComponent::GetCurrentFacingOrigin(EFacingChannel Channel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetCurrentFacingOrigin");

	Params::GbxCharacterMovementComponent_GetCurrentFacingOrigin Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetCurrentFacingRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxCharacterMovementComponent::GetCurrentFacingRotation(EFacingChannel Channel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetCurrentFacingRotation");

	Params::GbxCharacterMovementComponent_GetCurrentFacingRotation Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetDesiredFacingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxCharacterMovementComponent::GetDesiredFacingLocation(EFacingChannel Channel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetDesiredFacingLocation");

	Params::GbxCharacterMovementComponent_GetDesiredFacingLocation Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetDesiredFacingRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxCharacterMovementComponent::GetDesiredFacingRotation(EFacingChannel Channel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetDesiredFacingRotation");

	Params::GbxCharacterMovementComponent_GetDesiredFacingRotation Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetMantleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMantleData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMantleData* UGbxCharacterMovementComponent::GetMantleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetMantleData");

	Params::GbxCharacterMovementComponent_GetMantleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.GetMaxAllowedAimOffset
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxCharacterMovementComponent::GetMaxAllowedAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "GetMaxAllowedAimOffset");

	Params::GbxCharacterMovementComponent_GetMaxAllowedAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsFacingTargetBP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ThresholdDegrees                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFacingChannel                          Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsFacingTargetBP(float ThresholdDegrees, EFacingChannel Channel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsFacingTargetBP");

	Params::GbxCharacterMovementComponent_IsFacingTargetBP Parms{};

	Parms.ThresholdDegrees = ThresholdDegrees;
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsFootIkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsFootIkEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsFootIkEnabled");

	Params::GbxCharacterMovementComponent_IsFootIkEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsFootIkTracingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsFootIkTracingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsFootIkTracingEnabled");

	Params::GbxCharacterMovementComponent_IsFootIkTracingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsHandIkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsHandIkEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsHandIkEnabled");

	Params::GbxCharacterMovementComponent_IsHandIkEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsInNoneWithRootMotionMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsInNoneWithRootMotionMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsInNoneWithRootMotionMode");

	Params::GbxCharacterMovementComponent_IsInNoneWithRootMotionMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsMantling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsMantling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsMantling");

	Params::GbxCharacterMovementComponent_IsMantling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsMantlingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsMantlingAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsMantlingAllowed");

	Params::GbxCharacterMovementComponent_IsMantlingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsMovingOnLadder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsMovingOnLadder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsMovingOnLadder");

	Params::GbxCharacterMovementComponent_IsMovingOnLadder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsPerformingControlledMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsPerformingControlledMove() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsPerformingControlledMove");

	Params::GbxCharacterMovementComponent_IsPerformingControlledMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCharacterMovementComponent.IsPerformingSpecificControlledMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UControlledMove>      ControlledMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCharacterMovementComponent::IsPerformingSpecificControlledMove(TSubclassOf<class UControlledMove> ControlledMove) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCharacterMovementComponent", "IsPerformingSpecificControlledMove");

	Params::GbxCharacterMovementComponent_IsPerformingSpecificControlledMove Parms{};

	Parms.ControlledMove = ControlledMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.GetAssociatedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UChallengeLevelActorComponent::GetAssociatedActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "GetAssociatedActor");

	Params::ChallengeLevelActorComponent_GetAssociatedActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.HandleAttachmentChanged
// (Final, Native, Private)

void UChallengeLevelActorComponent::HandleAttachmentChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "HandleAttachmentChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.OnRep_ChallengeReference
// (Final, Native, Private)

void UChallengeLevelActorComponent::OnRep_ChallengeReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "OnRep_ChallengeReference");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.OnRep_InWorldIconEnabled
// (Final, Native, Private)
// Parameters:
// bool                                    bOldEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::OnRep_InWorldIconEnabled(bool bOldEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "OnRep_InWorldIconEnabled");

	Params::ChallengeLevelActorComponent_OnRep_InWorldIconEnabled Parms{};

	Parms.bOldEnabled = bOldEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.OnRep_IsStationary
// (Final, Native, Private)
// Parameters:
// bool                                    bOldIsStationary                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::OnRep_IsStationary(bool bOldIsStationary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "OnRep_IsStationary");

	Params::ChallengeLevelActorComponent_OnRep_IsStationary Parms{};

	Parms.bOldIsStationary = bOldIsStationary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.SetInWorldIconEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::SetInWorldIconEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "SetInWorldIconEnabled");

	Params::ChallengeLevelActorComponent_SetInWorldIconEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelActorComponent.SetIsStationary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsStationary                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelActorComponent::SetIsStationary(bool bInIsStationary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelActorComponent", "SetIsStationary");

	Params::ChallengeLevelActorComponent_SetIsStationary Parms{};

	Parms.bInIsStationary = bInIsStationary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.SetDebugActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ControllerIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::SetDebugActor(class AActor* Actor, int32 ControllerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCheatManager", "SetDebugActor");

	Params::GbxCheatManager_SetDebugActor Parms{};

	Parms.Actor = Actor;
	Parms.ControllerIndex = ControllerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.ClearPlayerInit
// (Final, Exec, Native, Public)

void UGbxCheatManager::ClearPlayerInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "ClearPlayerInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.DebugNextAI
// (Final, Exec, Native, Public)

void UGbxCheatManager::DebugNextAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "DebugNextAI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.PlayFeedback
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           FeedbackData                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::PlayFeedback(const class FString& FeedbackData, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "PlayFeedback");

	Params::GbxCheatManager_PlayFeedback Parms{};

	Parms.FeedbackData = std::move(FeedbackData);
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.PlayFeedbackDirectional
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           FeedbackData                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DirectionAngle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::PlayFeedbackDirectional(const class FString& FeedbackData, float DirectionAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "PlayFeedbackDirectional");

	Params::GbxCheatManager_PlayFeedbackDirectional Parms{};

	Parms.FeedbackData = std::move(FeedbackData);
	Parms.DirectionAngle = DirectionAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.PlayFeedbackRangedFromThere
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           FeedbackData                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::PlayFeedbackRangedFromThere(const class FString& FeedbackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "PlayFeedbackRangedFromThere");

	Params::GbxCheatManager_PlayFeedbackRangedFromThere Parms{};

	Parms.FeedbackData = std::move(FeedbackData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.Server_DamageTarget
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::Server_DamageTarget(float DamageAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "Server_DamageTarget");

	Params::GbxCheatManager_Server_DamageTarget Parms{};

	Parms.DamageAmount = DamageAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.Server_TogglePlayersOnly
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void UGbxCheatManager::Server_TogglePlayersOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "Server_TogglePlayersOnly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.SetDebugActorByName
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ActorName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::SetDebugActorByName(const class FString& ActorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "SetDebugActorByName");

	Params::GbxCheatManager_SetDebugActorByName Parms{};

	Parms.ActorName = std::move(ActorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.ShowProjectileImpacts
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LifeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::ShowProjectileImpacts(float Size, float LifeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "ShowProjectileImpacts");

	Params::GbxCheatManager_ShowProjectileImpacts Parms{};

	Parms.Size = Size;
	Parms.LifeTime = LifeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.StartPlayerInit
// (Final, Exec, Native, Public)

void UGbxCheatManager::StartPlayerInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "StartPlayerInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.TestGameStage
// (Exec, Native, Public)
// Parameters:
// int32                                   GameStageOverride                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCheatManager::TestGameStage(int32 GameStageOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "TestGameStage");

	Params::GbxCheatManager_TestGameStage Parms{};

	Parms.GameStageOverride = GameStageOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.DamageAreaDebug
// (Final, Exec, Native, Public, Const)

void UGbxCheatManager::DamageAreaDebug() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "DamageAreaDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCheatManager.LogQatalystInfo
// (Final, Exec, Native, Public, Const)

void UGbxCheatManager::LogQatalystInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCheatManager", "LogQatalystInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxCustomizationManager.OnCustomizationAssetLoaded
// (Final, Native, Public)

void AGbxCustomizationManager::OnCustomizationAssetLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCustomizationManager", "OnCustomizationAssetLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.BroadcastPlayImpactSplatterEffect
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// class UImpactData*                      ImpactData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           HitLocation                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        HitDirection                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageSeverity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::BroadcastPlayImpactSplatterEffect(class UImpactData* ImpactData, const struct FVector_NetQuantize100& HitLocation, const struct FVector_NetQuantizeNormal& HitDirection, float DamageSeverity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "BroadcastPlayImpactSplatterEffect");

	Params::DamageComponent_BroadcastPlayImpactSplatterEffect Parms{};

	Parms.ImpactData = ImpactData;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDirection = std::move(HitDirection);
	Parms.DamageSeverity = DamageSeverity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.OnHealthResourceNowDepleted
// (Final, Native, Private)
// Parameters:
// struct FGameResourcePoolReference       ResourcePool                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageComponent::OnHealthResourceNowDepleted(const struct FGameResourcePoolReference& ResourcePool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "OnHealthResourceNowDepleted");

	Params::DamageComponent_OnHealthResourceNowDepleted Parms{};

	Parms.ResourcePool = std::move(ResourcePool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.OnHealthResourceNowNotDepleted
// (Final, Native, Private)
// Parameters:
// struct FGameResourcePoolReference       ResourcePool                                           (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageComponent::OnHealthResourceNowNotDepleted(const struct FGameResourcePoolReference& ResourcePool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "OnHealthResourceNowNotDepleted");

	Params::DamageComponent_OnHealthResourceNowNotDepleted Parms{};

	Parms.ResourcePool = std::move(ResourcePool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.OnOwnerExperienceLevelChanged
// (Final, Native, Private)
// Parameters:
// int32                                   OldExperienceLevel                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewExperienceLevel                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::OnOwnerExperienceLevelChanged(const int32 OldExperienceLevel, const int32 NewExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "OnOwnerExperienceLevelChanged");

	Params::DamageComponent_OnOwnerExperienceLevelChanged Parms{};

	Parms.OldExperienceLevel = OldExperienceLevel;
	Parms.NewExperienceLevel = NewExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.OnRep_bCurrentlyDead
// (Final, Native, Private)

void UDamageComponent::OnRep_bCurrentlyDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "OnRep_bCurrentlyDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.OnRep_DeathHitReaction
// (Native, Protected)

void UDamageComponent::OnRep_DeathHitReaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "OnRep_DeathHitReaction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.OnRep_HealthInformation
// (Native, Protected)

void UDamageComponent::OnRep_HealthInformation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "OnRep_HealthInformation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDamageType*                   DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageSource*                    DamageSource                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageCauserComponent*           DamageCauser                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReceivedDamageDetails           Details                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDamageComponent::ReceiveAnyDamage(float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "ReceiveAnyDamage");

	Params::DamageComponent_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.DamageComponent.ReceiveAnyHealing
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Healing                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HealInstigator                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::ReceiveAnyHealing(float Healing, class AActor* HealInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "ReceiveAnyHealing");

	Params::DamageComponent_ReceiveAnyHealing Parms{};

	Parms.Healing = Healing;
	Parms.HealInstigator = HealInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.DamageComponent.ReceiveHealthDepleted
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class UDamageCauserComponent*           DamageCauser                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::ReceiveHealthDepleted(class UDamageCauserComponent* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "ReceiveHealthDepleted");

	Params::DamageComponent_ReceiveHealthDepleted Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.DamageComponent.RegisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*       Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::RegisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "RegisterConditionalDamageModifier");

	Params::DamageComponent_RegisterConditionalDamageModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.SetCurrentHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewCurrentHealth                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetCurrentHealth(float NewCurrentHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "SetCurrentHealth");

	Params::DamageComponent_SetCurrentHealth Parms{};

	Parms.NewCurrentHealth = NewCurrentHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.SetCurrentShield
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewCurrentShield                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetCurrentShield(float NewCurrentShield)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "SetCurrentShield");

	Params::DamageComponent_SetCurrentShield Parms{};

	Parms.NewCurrentShield = NewCurrentShield;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.SetDemiGodMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInDemiGodMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetDemiGodMode(bool bInDemiGodMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "SetDemiGodMode");

	Params::DamageComponent_SetDemiGodMode Parms{};

	Parms.bInDemiGodMode = bInDemiGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.SetGodMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInGodMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetGodMode(bool bInGodMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "SetGodMode");

	Params::DamageComponent_SetGodMode Parms{};

	Parms.bInGodMode = bInGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.SetSelfReflectedDamageType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxDamageType>       DamageType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::SetSelfReflectedDamageType(const TSubclassOf<class UGbxDamageType>& DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "SetSelfReflectedDamageType");

	Params::DamageComponent_SetSelfReflectedDamageType Parms{};

	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.UnregisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*       Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageComponent::UnregisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "UnregisterConditionalDamageModifier");

	Params::DamageComponent_UnregisterConditionalDamageModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageComponent.GetCurrentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetCurrentHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetCurrentHealth");

	Params::DamageComponent_GetCurrentHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.GetCurrentHealthPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetCurrentHealthPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetCurrentHealthPercent");

	Params::DamageComponent_GetCurrentHealthPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.GetCurrentShield
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetCurrentShield() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetCurrentShield");

	Params::DamageComponent_GetCurrentShield Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.GetMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetMaxHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetMaxHealth");

	Params::DamageComponent_GetMaxHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.GetMaxShield
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetMaxShield() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetMaxShield");

	Params::DamageComponent_GetMaxShield Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.GetTotalMaxHealth
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageComponent::GetTotalMaxHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetTotalMaxHealth");

	Params::DamageComponent_GetTotalMaxHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.GetValidDamageEventFunctionNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Names                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDamageComponent::GetValidDamageEventFunctionNames(TArray<class FName>* Names) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "GetValidDamageEventFunctionNames");

	Params::DamageComponent_GetValidDamageEventFunctionNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);
}


// Function GbxGameSystemCore.DamageComponent.IsDamageOverkill
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverkillThreshold                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageComponent::IsDamageOverkill(float DamageAmount, float OverkillThreshold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "IsDamageOverkill");

	Params::DamageComponent_IsDamageOverkill Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.OverkillThreshold = OverkillThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.IsInDemiGodMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageComponent::IsInDemiGodMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "IsInDemiGodMode");

	Params::DamageComponent_IsInDemiGodMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageComponent.IsInGodMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDamageComponent::IsInGodMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageComponent", "IsInGodMode");

	Params::DamageComponent_IsInGodMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageModifierComponent.RegisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*       Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageModifierComponent::RegisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageModifierComponent", "RegisterConditionalDamageModifier");

	Params::DamageModifierComponent_RegisterConditionalDamageModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageModifierComponent.UnregisterConditionalDamageModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UConditionalDamageModifier*       Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageModifierComponent::UnregisterConditionalDamageModifier(class UConditionalDamageModifier* Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageModifierComponent", "UnregisterConditionalDamageModifier");

	Params::DamageModifierComponent_UnregisterConditionalDamageModifier Parms{};

	Parms.Modifier = Modifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageOverTimeManager.OnParticleSystemStopped
// (Final, Native, Public)
// Parameters:
// class UParticleSystemComponent*         ParticleSystem                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageOverTimeManager::OnParticleSystemStopped(class UParticleSystemComponent* ParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageOverTimeManager", "OnParticleSystemStopped");

	Params::DamageOverTimeManager_OnParticleSystemStopped Parms{};

	Parms.ParticleSystem = ParticleSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxDamageType.IsElementalType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxDamageType::IsElementalType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDamageType", "IsElementalType");

	Params::GbxDamageType_IsElementalType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.FirstPersonComponent.SetBaseEyeToWeaponTransform
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       NewWeaponTransform                                     (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFirstPersonComponent::SetBaseEyeToWeaponTransform(const struct FTransform& NewWeaponTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstPersonComponent", "SetBaseEyeToWeaponTransform");

	Params::FirstPersonComponent_SetBaseEyeToWeaponTransform Parms{};

	Parms.NewWeaponTransform = std::move(NewWeaponTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FirstPersonComponent.GetFirstPersonComponentByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UFirstPersonComponent::GetFirstPersonComponentByName(class FName Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstPersonComponent", "GetFirstPersonComponentByName");

	Params::FirstPersonComponent_GetFirstPersonComponentByName Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameInstance.DebugLoadStartupAssets
// (Final, Exec, Native, Public)

void UGbxGameInstance::DebugLoadStartupAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGameInstance", "DebugLoadStartupAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitRegionComponent.TriggerClientEvent
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDamageReactionEventSummary      EventSummary                                           (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHitRegionComponent::TriggerClientEvent(const struct FDamageReactionEventSummary& EventSummary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitRegionComponent", "TriggerClientEvent");

	Params::HitRegionComponent_TriggerClientEvent Parms{};

	Parms.EventSummary = std::move(EventSummary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitRegionComponent.GetHitRegionCurrentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitRegionComponent::GetHitRegionCurrentHealth(class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitRegionComponent", "GetHitRegionCurrentHealth");

	Params::HitRegionComponent_GetHitRegionCurrentHealth Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitRegionComponent.GetHitRegionMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitRegionComponent::GetHitRegionMaxHealth(class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitRegionComponent", "GetHitRegionMaxHealth");

	Params::HitRegionComponent_GetHitRegionMaxHealth Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitRegionComponent.GetHitRegionPercentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitRegionComponent::GetHitRegionPercentHealth(class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitRegionComponent", "GetHitRegionPercentHealth");

	Params::HitRegionComponent_GetHitRegionPercentHealth Parms{};

	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitRegionComponent.GetValidAssociatedComponentNames
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitRegionComponent::GetValidAssociatedComponentNames(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitRegionComponent", "GetValidAssociatedComponentNames");

	Params::HitRegionComponent_GetValidAssociatedComponentNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function GbxGameSystemCore.HitRegionComponent.GetValidDamageEventFunctionNames
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitRegionComponent::GetValidDamageEventFunctionNames(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitRegionComponent", "GetValidDamageEventFunctionNames");

	Params::HitRegionComponent_GetValidDamageEventFunctionNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function GbxGameSystemCore.ActorPartData.EnumerateGestaltMeshPartNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     OutPartNameList                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumerateGestaltMeshPartNames(TArray<class FName>* OutPartNameList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorPartData", "EnumerateGestaltMeshPartNames");

	Params::ActorPartData_EnumerateGestaltMeshPartNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartNameList != nullptr)
		*OutPartNameList = std::move(Parms.OutPartNameList);
}


// Function GbxGameSystemCore.ActorPartData.EnumerateOtherParts
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class UActorPartData*>           OutPartList                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumerateOtherParts(TArray<class UActorPartData*>* OutPartList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorPartData", "EnumerateOtherParts");

	Params::ActorPartData_EnumerateOtherParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);
}


// Function GbxGameSystemCore.ActorPartData.EnumeratePossibleDependencies
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class UActorPartData*>           OutPartList                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumeratePossibleDependencies(TArray<class UActorPartData*>* OutPartList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorPartData", "EnumeratePossibleDependencies");

	Params::ActorPartData_EnumeratePossibleDependencies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);
}


// Function GbxGameSystemCore.ActorPartData.EnumeratePossibleExcluders
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class UActorPartData*>           OutPartList                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartData::EnumeratePossibleExcluders(TArray<class UActorPartData*>* OutPartList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorPartData", "EnumeratePossibleExcluders");

	Params::ActorPartData_EnumeratePossibleExcluders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.CopyGestaltPartList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           GestaltPartListSource                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::CopyGestaltPartList(class AActor* GestaltPartListSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "CopyGestaltPartList");

	Params::GbxSkeletalMeshComponent_CopyGestaltPartList Parms{};

	Parms.GestaltPartListSource = GestaltPartListSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.HideGestaltMeshPart
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UGestaltPartData_Mesh*            GestaltMeshPart                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocalOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::HideGestaltMeshPart(const class UGestaltPartData_Mesh* GestaltMeshPart, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "HideGestaltMeshPart");

	Params::GbxSkeletalMeshComponent_HideGestaltMeshPart Parms{};

	Parms.GestaltMeshPart = GestaltMeshPart;
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.HideGestaltMeshParts
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UGestaltPartData_Mesh*>    Parts                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bLocalOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::HideGestaltMeshParts(const TArray<class UGestaltPartData_Mesh*>& Parts, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "HideGestaltMeshParts");

	Params::GbxSkeletalMeshComponent_HideGestaltMeshParts Parms{};

	Parms.Parts = std::move(Parts);
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.LinkSkelMeshAnimInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InLinkedSkelMeshComponent                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::LinkSkelMeshAnimInstance(class USkeletalMeshComponent* InLinkedSkelMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "LinkSkelMeshAnimInstance");

	Params::GbxSkeletalMeshComponent_LinkSkelMeshAnimInstance Parms{};

	Parms.InLinkedSkelMeshComponent = InLinkedSkelMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.LinkSkelMeshAnimInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USkeletalMeshComponent*>   InLinkedSkelMeshComponents                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::LinkSkelMeshAnimInstances(const TArray<class USkeletalMeshComponent*>& InLinkedSkelMeshComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "LinkSkelMeshAnimInstances");

	Params::GbxSkeletalMeshComponent_LinkSkelMeshAnimInstances Parms{};

	Parms.InLinkedSkelMeshComponents = std::move(InLinkedSkelMeshComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.OnRep_GestaltMeshParts
// (Final, Native, Private)

void UGbxSkeletalMeshComponent::OnRep_GestaltMeshParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "OnRep_GestaltMeshParts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.OnRep_GlobalBoneMod
// (Final, Native, Public)

void UGbxSkeletalMeshComponent::OnRep_GlobalBoneMod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "OnRep_GlobalBoneMod");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.RunPoseTest
// (Final, Native, Private)

void UGbxSkeletalMeshComponent::RunPoseTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "RunPoseTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.SetGestaltPartList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGestaltPartListData*             NewGestaltPartList                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::SetGestaltPartList(class UGestaltPartListData* NewGestaltPartList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "SetGestaltPartList");

	Params::GbxSkeletalMeshComponent_SetGestaltPartList Parms{};

	Parms.NewGestaltPartList = NewGestaltPartList;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.SetParentAnimationComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           ParentComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::SetParentAnimationComponent(class USkeletalMeshComponent* ParentComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "SetParentAnimationComponent");

	Params::GbxSkeletalMeshComponent_SetParentAnimationComponent Parms{};

	Parms.ParentComponent = ParentComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.SetUpdateOverrideValues
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           UpdateRateOverrides                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bEnableOverrideProperties                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::SetUpdateOverrideValues(const TArray<float>& UpdateRateOverrides, bool bEnableOverrideProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "SetUpdateOverrideValues");

	Params::GbxSkeletalMeshComponent_SetUpdateOverrideValues Parms{};

	Parms.UpdateRateOverrides = std::move(UpdateRateOverrides);
	Parms.bEnableOverrideProperties = bEnableOverrideProperties;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.ShowGestaltMeshPart
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UGestaltPartData_Mesh*            GestaltMeshPart                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocalOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::ShowGestaltMeshPart(const class UGestaltPartData_Mesh* GestaltMeshPart, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "ShowGestaltMeshPart");

	Params::GbxSkeletalMeshComponent_ShowGestaltMeshPart Parms{};

	Parms.GestaltMeshPart = GestaltMeshPart;
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.ShowGestaltMeshParts
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UGestaltPartData_Mesh*>    Parts                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bLocalOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::ShowGestaltMeshParts(const TArray<class UGestaltPartData_Mesh*>& Parts, bool bLocalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "ShowGestaltMeshParts");

	Params::GbxSkeletalMeshComponent_ShowGestaltMeshParts Parms{};

	Parms.Parts = std::move(Parts);
	Parms.bLocalOnly = bLocalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.GetAvailableBoneNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxSkeletalMeshComponent::GetAvailableBoneNames(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "GetAvailableBoneNames");

	Params::GbxSkeletalMeshComponent_GetAvailableBoneNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.GetUpdateOverrideValues
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UGbxSkeletalMeshComponent::GetUpdateOverrideValues() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "GetUpdateOverrideValues");

	Params::GbxSkeletalMeshComponent_GetUpdateOverrideValues Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.IsCustomizationTargetFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxCustomizationTargetData*      TargetToTest                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxSkeletalMeshComponent::IsCustomizationTargetFor(class UGbxCustomizationTargetData* TargetToTest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "IsCustomizationTargetFor");

	Params::GbxSkeletalMeshComponent_IsCustomizationTargetFor Parms{};

	Parms.TargetToTest = TargetToTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxSkeletalMeshComponent.IsGestaltMeshPartVisible
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGestaltPartData_Mesh*            GestaltMeshPart                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxSkeletalMeshComponent::IsGestaltMeshPartVisible(const class UGestaltPartData_Mesh* GestaltMeshPart) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSkeletalMeshComponent", "IsGestaltMeshPartVisible");

	Params::GbxSkeletalMeshComponent_IsGestaltMeshPartVisible Parms{};

	Parms.GestaltMeshPart = GestaltMeshPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.AttachPawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            AttachingPawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::AttachPawn(class APawn* AttachingPawn, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "AttachPawn");

	Params::PawnAttachSlotComponent_AttachPawn Parms{};

	Parms.AttachingPawn = AttachingPawn;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.DetachPawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipPlacement                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::DetachPawn(bool bInstant, bool bSkipPlacement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "DetachPawn");

	Params::PawnAttachSlotComponent_DetachPawn Parms{};

	Parms.bInstant = bInstant;
	Parms.bSkipPlacement = bSkipPlacement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.HandleActorDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::HandleActorDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "HandleActorDestroyed");

	Params::PawnAttachSlotComponent_HandleActorDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.ManuallyFinishAttach
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UPawnAttachSlotComponent::ManuallyFinishAttach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "ManuallyFinishAttach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.OnRep_AttachState
// (Final, Native, Private)

void UPawnAttachSlotComponent::OnRep_AttachState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "OnRep_AttachState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.RequestDetachPawn
// (Final, Native, Public, BlueprintCallable)

void UPawnAttachSlotComponent::RequestDetachPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "RequestDetachPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.SetDetachabilityLocked
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::SetDetachabilityLocked(bool bLock, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "SetDetachabilityLocked");

	Params::PawnAttachSlotComponent_SetDetachabilityLocked Parms{};

	Parms.bLock = bLock;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.SetPersistentAttachSocketName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachSlotComponent::SetPersistentAttachSocketName(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "SetPersistentAttachSocketName");

	Params::PawnAttachSlotComponent_SetPersistentAttachSocketName Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.GetAttachStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPawnAttachStatus                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPawnAttachStatus UPawnAttachSlotComponent::GetAttachStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "GetAttachStatus");

	Params::PawnAttachSlotComponent_GetAttachStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.GetOccupant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeDetaching                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UPawnAttachSlotComponent::GetOccupant(bool bIncludeDetaching) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "GetOccupant");

	Params::PawnAttachSlotComponent_GetOccupant Parms{};

	Parms.bIncludeDetaching = bIncludeDetaching;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.GetPersistentAttachSocketTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UPawnAttachSlotComponent::GetPersistentAttachSocketTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "GetPersistentAttachSocketTransform");

	Params::PawnAttachSlotComponent_GetPersistentAttachSocketTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.PawnAttachSlotComponent.IsOccupied
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeDetaching                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPawnAttachSlotComponent::IsOccupied(bool bIncludeDetaching) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnAttachSlotComponent", "IsOccupied");

	Params::PawnAttachSlotComponent_IsOccupied Parms{};

	Parms.bIncludeDetaching = bIncludeDetaching;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFeedbackBase.PlayGbxFeedbackData2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGbxFeedbackBase*                 FeedbackData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreController                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFeedbackBase::PlayGbxFeedbackData2D(const class UGbxFeedbackBase* FeedbackData, class UObject* WorldContextObject, class AGbxPlayerController* Controller, bool bLoop, bool bIgnoreController, float Scale, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFeedbackBase", "PlayGbxFeedbackData2D");

	Params::GbxFeedbackBase_PlayGbxFeedbackData2D Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Controller = Controller;
	Parms.bLoop = bLoop;
	Parms.bIgnoreController = bIgnoreController;
	Parms.Scale = Scale;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxFeedbackBase.PlayGbxFeedbackData3D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGbxFeedbackBase*                 FeedbackData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreController                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EffectFalloffMinDistance                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EffectFalloffMaxDistance                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFeedbackBase::PlayGbxFeedbackData3D(const class UGbxFeedbackBase* FeedbackData, class UObject* WorldContextObject, class AGbxPlayerController* Controller, const struct FVector& SourceLocation, bool bLoop, bool bIgnoreController, float Scale, class UObject* SourceContext, float EffectFalloffMinDistance, float EffectFalloffMaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFeedbackBase", "PlayGbxFeedbackData3D");

	Params::GbxFeedbackBase_PlayGbxFeedbackData3D Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Controller = Controller;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.bLoop = bLoop;
	Parms.bIgnoreController = bIgnoreController;
	Parms.Scale = Scale;
	Parms.SourceContext = SourceContext;
	Parms.EffectFalloffMinDistance = EffectFalloffMinDistance;
	Parms.EffectFalloffMaxDistance = EffectFalloffMaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxFeedbackBase.StopGbxFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGbxFeedbackBase*                 FeedbackData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFeedbackBase::StopGbxFeedback(const class UGbxFeedbackBase* FeedbackData, class UObject* WorldContextObject, class AGbxPlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFeedbackBase", "StopGbxFeedback");

	Params::GbxFeedbackBase_StopGbxFeedback Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.Beacon.OnBeaconSourceEndPlay
// (Final, Native, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABeacon::OnBeaconSourceEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Beacon", "OnBeaconSourceEndPlay");

	Params::Beacon_OnBeaconSourceEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StatusEffectManagerComponent.AddStatusEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectSpec                Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectInstanceReference   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FStatusEffectInstanceReference UStatusEffectManagerComponent::AddStatusEffect(const struct FStatusEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffectManagerComponent", "AddStatusEffect");

	Params::StatusEffectManagerComponent_AddStatusEffect Parms{};

	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffectManagerComponent.RemoveStatusEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectRemoveSpec          Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectManagerComponent::RemoveStatusEffect(const struct FStatusEffectRemoveSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffectManagerComponent", "RemoveStatusEffect");

	Params::StatusEffectManagerComponent_RemoveStatusEffect Parms{};

	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffectManagerComponent.RemoveStatusEffectInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectInstanceReference   Reference                                              (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectManagerComponent::RemoveStatusEffectInstance(struct FStatusEffectInstanceReference& Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffectManagerComponent", "RemoveStatusEffectInstance");

	Params::StatusEffectManagerComponent_RemoveStatusEffectInstance Parms{};

	Parms.Reference = std::move(Reference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Reference = std::move(Parms.Reference);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffectManagerComponent.QueryStatusEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStatusEffectQuery               Query                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectQueryResult         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FStatusEffectQueryResult UStatusEffectManagerComponent::QueryStatusEffect(const struct FStatusEffectQuery& Query) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffectManagerComponent", "QueryStatusEffect");

	Params::StatusEffectManagerComponent_QueryStatusEffect Parms{};

	Parms.Query = std::move(Query);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.ResetMotionState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::ResetMotionState(struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "ResetMotionState");

	Params::GbxSimpleMotionLibrary_ResetMotionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.TeleportFloatMotion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   CurrentValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::TeleportFloatMotion(float* CurrentValue, float ControlValue, const struct FSimpleMotionState& Data, float SpeedScale, float TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "TeleportFloatMotion");

	Params::GbxSimpleMotionLibrary_TeleportFloatMotion Parms{};

	Parms.ControlValue = ControlValue;
	Parms.Data = std::move(Data);
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = Parms.CurrentValue;

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.TeleportRotatorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         CurrentValue                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TargetValue                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::TeleportRotatorMotion(struct FRotator* CurrentValue, float ControlValue, const struct FSimpleMotionState& Data, float SpeedScale, const struct FRotator& TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "TeleportRotatorMotion");

	Params::GbxSimpleMotionLibrary_TeleportRotatorMotion Parms{};

	Parms.ControlValue = ControlValue;
	Parms.Data = std::move(Data);
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = std::move(TargetValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.TeleportVectorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CurrentValue                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetValue                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::TeleportVectorMotion(struct FVector* CurrentValue, float ControlValue, const struct FSimpleMotionState& Data, float SpeedScale, const struct FVector& TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "TeleportVectorMotion");

	Params::GbxSimpleMotionLibrary_TeleportVectorMotion Parms{};

	Parms.ControlValue = ControlValue;
	Parms.Data = std::move(Data);
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = std::move(TargetValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.UpdateFloatMotion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::UpdateFloatMotion(float DeltaTime, float* CurrentValue, float ControlValue, const struct FSimpleMotionState& Data, float SpeedScale, float TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "UpdateFloatMotion");

	Params::GbxSimpleMotionLibrary_UpdateFloatMotion Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ControlValue = ControlValue;
	Parms.Data = std::move(Data);
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = Parms.CurrentValue;

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.UpdateRotatorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CurrentValue                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TargetValue                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bShortestRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::UpdateRotatorMotion(float DeltaTime, struct FRotator* CurrentValue, float ControlValue, const struct FSimpleMotionState& Data, float SpeedScale, const struct FRotator& TargetValue, bool bShortestRotation, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "UpdateRotatorMotion");

	Params::GbxSimpleMotionLibrary_UpdateRotatorMotion Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ControlValue = ControlValue;
	Parms.Data = std::move(Data);
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = std::move(TargetValue);
	Parms.bShortestRotation = bShortestRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.GbxSimpleMotionLibrary.UpdateVectorMotion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrentValue                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionState               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetValue                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleMotionInstanceState       State                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxSimpleMotionLibrary::UpdateVectorMotion(float DeltaTime, struct FVector* CurrentValue, float ControlValue, const struct FSimpleMotionState& Data, float SpeedScale, const struct FVector& TargetValue, struct FSimpleMotionInstanceState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSimpleMotionLibrary", "UpdateVectorMotion");

	Params::GbxSimpleMotionLibrary_UpdateVectorMotion Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ControlValue = ControlValue;
	Parms.Data = std::move(Data);
	Parms.SpeedScale = SpeedScale;
	Parms.TargetValue = std::move(TargetValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentValue != nullptr)
		*CurrentValue = std::move(Parms.CurrentValue);

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function GbxGameSystemCore.StatusEffectsStatics.AddStatusEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectSpec                Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectInstanceReference   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FStatusEffectInstanceReference UStatusEffectsStatics::AddStatusEffect(class AActor* Target, const struct FStatusEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatusEffectsStatics", "AddStatusEffect");

	Params::StatusEffectsStatics_AddStatusEffect Parms{};

	Parms.Target = Target;
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffectsStatics.QueryStatusEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectQuery               Query                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStatusEffectQueryResult         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FStatusEffectQueryResult UStatusEffectsStatics::QueryStatusEffect(class AActor* Target, const struct FStatusEffectQuery& Query)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatusEffectsStatics", "QueryStatusEffect");

	Params::StatusEffectsStatics_QueryStatusEffect Parms{};

	Parms.Target = Target;
	Parms.Query = std::move(Query);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffectsStatics.RemoveStatusEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectRemoveSpec          RemoveSpec                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectsStatics::RemoveStatusEffect(class AActor* Target, const struct FStatusEffectRemoveSpec& RemoveSpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatusEffectsStatics", "RemoveStatusEffect");

	Params::StatusEffectsStatics_RemoveStatusEffect Parms{};

	Parms.Target = Target;
	Parms.RemoveSpec = std::move(RemoveSpec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffectsStatics.RemoveStatusEffectInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStatusEffectInstanceReference   Reference                                              (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStatusEffectsStatics::RemoveStatusEffectInstance(class AActor* Target, struct FStatusEffectInstanceReference& Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatusEffectsStatics", "RemoveStatusEffectInstance");

	Params::StatusEffectsStatics_RemoveStatusEffectInstance Parms{};

	Parms.Target = Target;
	Parms.Reference = std::move(Reference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Reference = std::move(Parms.Reference);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayHitResultImpact
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImpactData*                      ImpactData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bReplicated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayHitResultImpact(class UImpactData* ImpactData, class AActor* Instigator, const struct FHitResult& HitInfo, bool bReplicated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ImpactEffectFunctionLibrary", "PlayHitResultImpact");

	Params::ImpactEffectFunctionLibrary_PlayHitResultImpact Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.HitInfo = std::move(HitInfo);
	Parms.bReplicated = bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayHitResultImpactGetParticleSystemComponents
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImpactData*                      ImpactData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class UParticleSystemComponent*> SpawnedParticleSystemComponents                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayHitResultImpactGetParticleSystemComponents(class UImpactData* ImpactData, class AActor* Instigator, const struct FHitResult& HitInfo, TArray<class UParticleSystemComponent*>* SpawnedParticleSystemComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ImpactEffectFunctionLibrary", "PlayHitResultImpactGetParticleSystemComponents");

	Params::ImpactEffectFunctionLibrary_PlayHitResultImpactGetParticleSystemComponents Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.HitInfo = std::move(HitInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnedParticleSystemComponents != nullptr)
		*SpawnedParticleSystemComponents = std::move(Parms.SpawnedParticleSystemComponents);
}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayTraceImpact
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UImpactData*                      ImpactData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStart                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEnd                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicated                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayTraceImpact(class UImpactData* ImpactData, class AActor* Instigator, const struct FVector& TraceStart, const struct FVector& TraceEnd, ECollisionChannel TraceChannel, bool bReplicated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ImpactEffectFunctionLibrary", "PlayTraceImpact");

	Params::ImpactEffectFunctionLibrary_PlayTraceImpact Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);
	Parms.TraceChannel = TraceChannel;
	Parms.bReplicated = bReplicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ImpactEffectFunctionLibrary.PlayTraceImpactAndGetParticleSystemComponents
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UImpactData*                      ImpactData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStart                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEnd                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UParticleSystemComponent*> SpawnedParticleSystemComponents                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactEffectFunctionLibrary::PlayTraceImpactAndGetParticleSystemComponents(class UImpactData* ImpactData, class AActor* Instigator, const struct FVector& TraceStart, const struct FVector& TraceEnd, TArray<class UParticleSystemComponent*>* SpawnedParticleSystemComponents, ECollisionChannel TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ImpactEffectFunctionLibrary", "PlayTraceImpactAndGetParticleSystemComponents");

	Params::ImpactEffectFunctionLibrary_PlayTraceImpactAndGetParticleSystemComponents Parms{};

	Parms.ImpactData = ImpactData;
	Parms.Instigator = Instigator;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);
	Parms.TraceChannel = TraceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnedParticleSystemComponents != nullptr)
		*SpawnedParticleSystemComponents = std::move(Parms.SpawnedParticleSystemComponents);
}


// Function GbxGameSystemCore.UseComponent.ClientNotifyAttemptedUseCouldNotAfford
// (Final, Net, Native, Event, Private, NetClient)
// Parameters:
// class UUsableComponent*                 Usable                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ClientNotifyAttemptedUseCouldNotAfford(class UUsableComponent* Usable, EUsabilityType UseType, bool bUseHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "ClientNotifyAttemptedUseCouldNotAfford");

	Params::UseComponent_ClientNotifyAttemptedUseCouldNotAfford Parms{};

	Parms.Usable = Usable;
	Parms.UseType = UseType;
	Parms.bUseHeld = bUseHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseComponent.ForceUsingObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUsableComponent*                 UsableObject                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ForceUsingObject(class UUsableComponent* UsableObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "ForceUsingObject");

	Params::UseComponent_ForceUsingObject Parms{};

	Parms.UsableObject = UsableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxGameSystemCore.UseComponent.OnHoldUseStopped__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UUseComponent::OnHoldUseStopped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "OnHoldUseStopped__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction GbxGameSystemCore.UseComponent.OnImpactDataChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasDefaults)
// Parameters:
// class UUsableComponent*                 NewUsableComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewUsableComponentImpactPoint                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewUsableComponentDistanceAway                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::OnImpactDataChanged__DelegateSignature(class UUsableComponent* NewUsableComponent, const struct FVector& NewUsableComponentImpactPoint, float NewUsableComponentDistanceAway)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "OnImpactDataChanged__DelegateSignature");

	Params::UseComponent_OnImpactDataChanged__DelegateSignature Parms{};

	Parms.NewUsableComponent = NewUsableComponent;
	Parms.NewUsableComponentImpactPoint = std::move(NewUsableComponentImpactPoint);
	Parms.NewUsableComponentDistanceAway = NewUsableComponentDistanceAway;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUnableToAffordUsableObject__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UUsableComponent*                 Usable                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::OnUnableToAffordUsableObject__DelegateSignature(class UUsableComponent* Usable, EUsabilityType UseType, bool bUseHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "OnUnableToAffordUsableObject__DelegateSignature");

	Params::UseComponent_OnUnableToAffordUsableObject__DelegateSignature Parms{};

	Parms.Usable = Usable;
	Parms.UseType = UseType;
	Parms.bUseHeld = bUseHeld;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUsabilityChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class UUsableComponent*                 NewUsableComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUsabilityInfo                   InUsabilityInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUseComponent::OnUsabilityChanged__DelegateSignature(class UUsableComponent* NewUsableComponent, const struct FUsabilityInfo& InUsabilityInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "OnUsabilityChanged__DelegateSignature");

	Params::UseComponent_OnUsabilityChanged__DelegateSignature Parms{};

	Parms.NewUsableComponent = NewUsableComponent;
	Parms.InUsabilityInfo = std::move(InUsabilityInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction GbxGameSystemCore.UseComponent.OnUsableChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams, HasDefaults)
// Parameters:
// class UUsableComponent*                 NewUsableComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUsabilityInfo                   InUsabilityInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          NewUsableComponentImpactPoint                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewUsableComponentDistanceAway                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::OnUsableChanged__DelegateSignature(class UUsableComponent* NewUsableComponent, const struct FUsabilityInfo& InUsabilityInfo, const struct FVector& NewUsableComponentImpactPoint, float NewUsableComponentDistanceAway)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "OnUsableChanged__DelegateSignature");

	Params::UseComponent_OnUsableChanged__DelegateSignature Parms{};

	Parms.NewUsableComponent = NewUsableComponent;
	Parms.InUsabilityInfo = std::move(InUsabilityInfo);
	Parms.NewUsableComponentImpactPoint = std::move(NewUsableComponentImpactPoint);
	Parms.NewUsableComponentDistanceAway = NewUsableComponentDistanceAway;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.UseComponent.ServerStartUsingObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*                 UsableObject                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerStartUsingObject(class UUsableComponent* UsableObject, EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "ServerStartUsingObject");

	Params::UseComponent_ServerStartUsingObject Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseComponent.ServerStopUsingObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*                 UsableObject                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerStopUsingObject(class UUsableComponent* UsableObject, EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "ServerStopUsingObject");

	Params::UseComponent_ServerStopUsingObject Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseComponent.ServerUseObject
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UUsableComponent*                 UsableObject                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHeld                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::ServerUseObject(class UUsableComponent* UsableObject, EUsabilityType UseType, bool bHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "ServerUseObject");

	Params::UseComponent_ServerUseObject Parms{};

	Parms.UsableObject = UsableObject;
	Parms.UseType = UseType;
	Parms.bHeld = bHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseComponent.StartUsingCurrentObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::StartUsingCurrentObject(EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "StartUsingCurrentObject");

	Params::UseComponent_StartUsingCurrentObject Parms{};

	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseComponent.StopUsingCurrentObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUsabilityType                          UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseComponent::StopUsingCurrentObject(EUsabilityType UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "StopUsingCurrentObject");

	Params::UseComponent_StopUsingCurrentObject Parms{};

	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseComponent.CanInteractWithCurrentUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUsabilityType                          Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUseComponent::CanInteractWithCurrentUsable(EUsabilityType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "CanInteractWithCurrentUsable");

	Params::UseComponent_CanInteractWithCurrentUsable Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UseComponent.CanUseCurrentUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUsabilityType                          Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUseComponent::CanUseCurrentUsable(EUsabilityType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "CanUseCurrentUsable");

	Params::UseComponent_CanUseCurrentUsable Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UseComponent.GetCurrentUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUsableComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUsableComponent* UUseComponent::GetCurrentUsable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseComponent", "GetCurrentUsable");

	Params::UseComponent_GetCurrentUsable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.GetDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEnvQueryParamsExt::GetDescription(const struct FEnvQueryParams& QueryParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvQueryParamsExt", "GetDescription");

	Params::EnvQueryParamsExt_GetDescription Parms{};

	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.HasQuery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::HasQuery(const struct FEnvQueryParams& QueryParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvQueryParamsExt", "HasQuery");

	Params::EnvQueryParamsExt_HasQuery Parms{};

	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForAllActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ResultActors                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForAllActors(class UObject* QueryOwner, const struct FEnvQueryParams& QueryParams, TArray<class AActor*>* ResultActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvQueryParamsExt", "RunEnvQueryForAllActors");

	Params::EnvQueryParamsExt_RunEnvQueryForAllActors Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultActors != nullptr)
		*ResultActors = std::move(Parms.ResultActors);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForAllLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ResultLocations                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForAllLocations(class UObject* QueryOwner, const struct FEnvQueryParams& QueryParams, TArray<struct FVector>* ResultLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvQueryParamsExt", "RunEnvQueryForAllLocations");

	Params::EnvQueryParamsExt_RunEnvQueryForAllLocations Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultLocations != nullptr)
		*ResultLocations = std::move(Parms.ResultLocations);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForBestActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           ResultActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForBestActor(class UObject* QueryOwner, const struct FEnvQueryParams& QueryParams, class AActor** ResultActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvQueryParamsExt", "RunEnvQueryForBestActor");

	Params::EnvQueryParamsExt_RunEnvQueryForBestActor Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultActor != nullptr)
		*ResultActor = Parms.ResultActor;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.EnvQueryParamsExt.RunEnvQueryForBestLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          ResultLocation                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEnvQueryParamsExt::RunEnvQueryForBestLocation(class UObject* QueryOwner, const struct FEnvQueryParams& QueryParams, struct FVector* ResultLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvQueryParamsExt", "RunEnvQueryForBestLocation");

	Params::EnvQueryParamsExt_RunEnvQueryForBestLocation Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultLocation != nullptr)
		*ResultLocation = std::move(Parms.ResultLocation);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.CoordinatedEffectBlueprintLibrary.GetOriginalOverrideMaterialAtIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMeshComponent*                   MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutActualIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UCoordinatedEffectBlueprintLibrary::GetOriginalOverrideMaterialAtIndex(class UMeshComponent* MeshComponent, int32 Index_0, int32* OutActualIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoordinatedEffectBlueprintLibrary", "GetOriginalOverrideMaterialAtIndex");

	Params::CoordinatedEffectBlueprintLibrary_GetOriginalOverrideMaterialAtIndex Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActualIndex != nullptr)
		*OutActualIndex = Parms.OutActualIndex;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ActorPartSetData.EnumeratePartListForPartType
// (Native, Protected, HasOutParams, Const)
// Parameters:
// uint8                                   PartType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorPartData*>           OutPartList                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UActorPartSetData::EnumeratePartListForPartType(uint8 PartType, TArray<class UActorPartData*>* OutPartList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorPartSetData", "EnumeratePartListForPartType");

	Params::ActorPartSetData_EnumeratePartListForPartType Parms{};

	Parms.PartType = PartType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);
}


// Function GbxGameSystemCore.AttributeInitializer.EvaluateBalanceFormula
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Power                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAttributeInitializer::EvaluateBalanceFormula(float Multiplier, float Level, float Power, float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AttributeInitializer", "EvaluateBalanceFormula");

	Params::AttributeInitializer_EvaluateBalanceFormula Parms{};

	Parms.Multiplier = Multiplier;
	Parms.Level = Level;
	Parms.Power = Power;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AttributeInitializer.CalculateAttributeInitialValue
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAttributeInitializer::CalculateAttributeInitialValue(const class UObject* Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttributeInitializer", "CalculateAttributeInitialValue");

	Params::AttributeInitializer_CalculateAttributeInitialValue Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerBulletDodge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          MuzzleLoc                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BulletVel                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDodgeComponent::TriggerBulletDodge(class UObject* WorldContextObject, const struct FVector& MuzzleLoc, const struct FVector& BulletVel, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AIDodgeComponent", "TriggerBulletDodge");

	Params::AIDodgeComponent_TriggerBulletDodge Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MuzzleLoc = std::move(MuzzleLoc);
	Parms.BulletVel = std::move(BulletVel);
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerGrenadeDodge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          GrenadeLoc                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtraDelay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDodgeComponent::TriggerGrenadeDodge(class UObject* WorldContextObject, const struct FVector& GrenadeLoc, class AActor* Instigator, float ExtraDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AIDodgeComponent", "TriggerGrenadeDodge");

	Params::AIDodgeComponent_TriggerGrenadeDodge Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GrenadeLoc = std::move(GrenadeLoc);
	Parms.Instigator = Instigator;
	Parms.ExtraDelay = ExtraDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerZoneDodge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ZoneLoc                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ZoneVel                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorRef                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIDodgeComponent::TriggerZoneDodge(class UObject* WorldContextObject, class AActor* TargetActor, const struct FVector& ZoneLoc, const struct FVector& ZoneVel, class AActor* ActorRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AIDodgeComponent", "TriggerZoneDodge");

	Params::AIDodgeComponent_TriggerZoneDodge Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TargetActor = TargetActor;
	Parms.ZoneLoc = std::move(ZoneLoc);
	Parms.ZoneVel = std::move(ZoneVel);
	Parms.ActorRef = ActorRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.AIDodgeComponent.TriggerDodge
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EAIDodgeType                            Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLoc                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SourceActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtraDelay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForced                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAIDodgeComponent::TriggerDodge(EAIDodgeType Type, const struct FVector& SourceLoc, class AActor* SourceActor, float ExtraDelay, bool bForced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIDodgeComponent", "TriggerDodge");

	Params::AIDodgeComponent_TriggerDodge Parms{};

	Parms.Type = Type;
	Parms.SourceLoc = std::move(SourceLoc);
	Parms.SourceActor = SourceActor;
	Parms.ExtraDelay = ExtraDelay;
	Parms.bForced = bForced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AISense_Bullet.ReportBulletEvent
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLoc                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLoc                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFirstEvent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISense_Bullet::ReportBulletEvent(class UObject* WorldContext, const struct FVector& StartLoc, const struct FVector& EndLoc, bool bFirstEvent, class AActor* Instigator, float Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AISense_Bullet", "ReportBulletEvent");

	Params::AISense_Bullet_ReportBulletEvent Parms{};

	Parms.WorldContext = WorldContext;
	Parms.StartLoc = std::move(StartLoc);
	Parms.EndLoc = std::move(EndLoc);
	Parms.bFirstEvent = bFirstEvent;
	Parms.Instigator = Instigator;
	Parms.Strength = Strength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameStatsComponent.GetStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameStatData*                    GameStat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGameStatsComponent::GetStatValue(class UGameStatData* GameStat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsComponent", "GetStatValue");

	Params::GameStatsComponent_GetStatValue Parms{};

	Parms.GameStat = GameStat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameStatsComponent.IncrementStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameStatData*                    GameStat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStatsComponent::IncrementStat(class UGameStatData* GameStat, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsComponent", "IncrementStat");

	Params::GameStatsComponent_IncrementStat Parms{};

	Parms.GameStat = GameStat;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameStatsComponent.UpdateStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameStatData*                    GameStat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameStatsComponent::UpdateStat(class UGameStatData* GameStat, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsComponent", "UpdateStat");

	Params::GameStatsComponent_UpdateStat Parms{};

	Parms.GameStat = GameStat;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameStatsComponent.GetGameStats
// (Final, Native, Public, Const)
// Parameters:
// const TArray<struct FGameStat>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGameStat> UGameStatsComponent::GetGameStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsComponent", "GetGameStats");

	Params::GameStatsComponent_GetGameStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.AISense_GbxSight.ForceSightEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SeenActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           LookingActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISense_GbxSight::ForceSightEvent(class UObject* WorldContext, class AActor* SeenActor, class AActor* LookingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AISense_GbxSight", "ForceSightEvent");

	Params::AISense_GbxSight_ForceSightEvent Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SeenActor = SeenActor;
	Parms.LookingActor = LookingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.AddResourcePoolDelegate
// (Final, Native, Public)
// Parameters:
// class UGameResourceData*                InResourceData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DelegatePropertyName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameResourcePoolReference& ResourcePool)>ScriptDelegate                                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::AddResourcePoolDelegate(class UGameResourceData* InResourceData, class FName DelegatePropertyName, TDelegate<void(const struct FGameResourcePoolReference& ResourcePool)> ScriptDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "AddResourcePoolDelegate");

	Params::GameResourcePoolManagerComponent_AddResourcePoolDelegate Parms{};

	Parms.InResourceData = InResourceData;
	Parms.DelegatePropertyName = DelegatePropertyName;
	Parms.ScriptDelegate = ScriptDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.ClearResourcePoolDelegate
// (Final, Native, Public)
// Parameters:
// class UGameResourceData*                InResourceData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DelegatePropertyName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::ClearResourcePoolDelegate(class UGameResourceData* InResourceData, class FName DelegatePropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "ClearResourcePoolDelegate");

	Params::GameResourcePoolManagerComponent_ClearResourcePoolDelegate Parms{};

	Parms.InResourceData = InResourceData;
	Parms.DelegatePropertyName = DelegatePropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.CreatePool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameResourcePoolData*            PoolData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitializeExistingPool                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameResourcePoolReference       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameResourcePoolReference UGameResourcePoolManagerComponent::CreatePool(class UGameResourcePoolData* PoolData, bool bReinitializeExistingPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "CreatePool");

	Params::GameResourcePoolManagerComponent_CreatePool Parms{};

	Parms.PoolData = PoolData;
	Parms.bReinitializeExistingPool = bReinitializeExistingPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.GetResourcePoolByResource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameResourceData*                Resource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameResourcePoolReference       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGameResourcePoolReference UGameResourcePoolManagerComponent::GetResourcePoolByResource(class UGameResourceData* Resource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "GetResourcePoolByResource");

	Params::GameResourcePoolManagerComponent_GetResourcePoolByResource Parms{};

	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.OnOwnerExperienceLevelChanged
// (Final, Native, Private)
// Parameters:
// int32                                   OldExperienceLevel                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::OnOwnerExperienceLevelChanged(const int32 OldExperienceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "OnOwnerExperienceLevelChanged");

	Params::GameResourcePoolManagerComponent_OnOwnerExperienceLevelChanged Parms{};

	Parms.OldExperienceLevel = OldExperienceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.RecalculateAttributeInitializedPoolProperties
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGameResourcePoolManagerComponent::RecalculateAttributeInitializedPoolProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "RecalculateAttributeInitializedPoolProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolManagerComponent.RemoveResourcePoolDelegate
// (Final, Native, Public)
// Parameters:
// class UGameResourceData*                InResourceData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DelegatePropertyName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameResourcePoolReference& ResourcePool)>ScriptDelegate                                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGameResourcePoolManagerComponent::RemoveResourcePoolDelegate(class UGameResourceData* InResourceData, class FName DelegatePropertyName, TDelegate<void(const struct FGameResourcePoolReference& ResourcePool)> ScriptDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameResourcePoolManagerComponent", "RemoveResourcePoolDelegate");

	Params::GameResourcePoolManagerComponent_RemoveResourcePoolDelegate Parms{};

	Parms.InResourceData = InResourceData;
	Parms.DelegatePropertyName = DelegatePropertyName;
	Parms.ScriptDelegate = ScriptDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnHitWall
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnHitWall(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_AICharge", "OnHitWall");

	Params::GbxAction_AICharge_OnHitWall Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnLoop
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnLoop(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_AICharge", "OnLoop");

	Params::GbxAction_AICharge_OnLoop Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnMiss
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnMiss(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_AICharge", "OnMiss");

	Params::GbxAction_AICharge_OnMiss Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnReachCliff
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnReachCliff(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_AICharge", "OnReachCliff");

	Params::GbxAction_AICharge_OnReachCliff Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnStopForFriendly
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnStopForFriendly(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_AICharge", "OnStopForFriendly");

	Params::GbxAction_AICharge_OnStopForFriendly Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAction_AICharge.OnStrike
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAction_AICharge::OnStrike(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAction_AICharge", "OnStrike");

	Params::GbxAction_AICharge_OnStrike Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.K2_Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionComponent::K2_Play(TSubclassOf<class UGbxAction> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "K2_Play");

	Params::GbxActionComponent_K2_Play Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionComponent.NotifyInterruptRequest
// (Final, Native, Public)

void UGbxActionComponent::NotifyInterruptRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "NotifyInterruptRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.OnComponentAttached
// (Final, Native, Private)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::OnComponentAttached(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "OnComponentAttached");

	Params::GbxActionComponent_OnComponentAttached Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.OnComponentDetached
// (Final, Native, Private)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::OnComponentDetached(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "OnComponentDetached");

	Params::GbxActionComponent_OnComponentDetached Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.OnComponentUnregistered
// (Final, Native, Private)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::OnComponentUnregistered(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "OnComponentUnregistered");

	Params::GbxActionComponent_OnComponentUnregistered Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.PlayOnRemoteServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActionState_Base                ActionData                                             (Parm, NativeAccessSpecifierPublic)

void UGbxActionComponent::PlayOnRemoteServer(TSubclassOf<class UGbxAction> ActionClass, const struct FActionState_Base& ActionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "PlayOnRemoteServer");

	Params::GbxActionComponent_PlayOnRemoteServer Parms{};

	Parms.ActionClass = ActionClass;
	Parms.ActionData = std::move(ActionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.StopActionClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopActionClass(TSubclassOf<class UGbxAction> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "StopActionClass");

	Params::GbxActionComponent_StopActionClass Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.StopActions
// (Final, Native, Public, BlueprintCallable)

void UGbxActionComponent::StopActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "StopActions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.StopActionSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionSlotName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopActionSlot(const class FName ActionSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "StopActionSlot");

	Params::GbxActionComponent_StopActionSlot Parms{};

	Parms.ActionSlotName = ActionSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.StopLoopingActionClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction_Loop>      ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopLoopingActionClass(TSubclassOf<class UGbxAction_Loop> ActionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "StopLoopingActionClass");

	Params::GbxActionComponent_StopLoopingActionClass Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.StopOnRemoteServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   ManagerRepId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionEndState                      EndState                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionComponent::StopOnRemoteServer(int32 ManagerRepId, const EGbxActionEndState& EndState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "StopOnRemoteServer");

	Params::GbxActionComponent_StopOnRemoteServer Parms{};

	Parms.ManagerRepId = ManagerRepId;
	Parms.EndState = EndState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.UpdateActionRemoteServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FActionState_Base                ActionData                                             (Parm, NativeAccessSpecifierPublic)

void UGbxActionComponent::UpdateActionRemoteServer(const struct FActionState_Base& ActionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "UpdateActionRemoteServer");

	Params::GbxActionComponent_UpdateActionRemoteServer Parms{};

	Parms.ActionData = std::move(ActionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionComponent.IsPlayingClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActionComponent::IsPlayingClass(TSubclassOf<class UGbxAction> ActionClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "IsPlayingClass");

	Params::GbxActionComponent_IsPlayingClass Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionComponent.IsPlayingSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionSlotName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActionComponent::IsPlayingSlot(const class FName& ActionSlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "IsPlayingSlot");

	Params::GbxActionComponent_IsPlayingSlot Parms{};

	Parms.ActionSlotName = ActionSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionComponent.K2_GetActionByClass
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionComponent::K2_GetActionByClass(TSubclassOf<class UGbxAction> ActionClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "K2_GetActionByClass");

	Params::GbxActionComponent_K2_GetActionByClass Parms{};

	Parms.ActionClass = ActionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionComponent.K2_GetActionBySlot
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionSlotName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionComponent::K2_GetActionBySlot(const class FName ActionSlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "K2_GetActionBySlot");

	Params::GbxActionComponent_K2_GetActionBySlot Parms{};

	Parms.ActionSlotName = ActionSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionComponent.K2_IsPlayingObj
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActionComponent::K2_IsPlayingObj(class UGbxAction* Action) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxActionComponent", "K2_IsPlayingObj");

	Params::GbxActionComponent_K2_IsPlayingObj Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.CreateBoneMod
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             InBoneModName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InBoneName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InTranslation                                          (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotation                                             (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          InScale                                                (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlphaBlendOption                       InBlendOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InCustomBlendCurve                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInUseTranslation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInUseRotation                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInUseScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReplaceTranslation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReplaceRotation                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInReplaceScale                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneControlSpace                       InTranslationSpace                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneControlSpace                       InRotationSpace                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlendIn                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::CreateBoneMod(const class FName InBoneModName, const class FName InBoneName, const struct FVector& InTranslation, const struct FRotator& InRotation, const struct FVector& InScale, const float InBlendTime, class UObject* Target, const EAlphaBlendOption InBlendOption, const class UCurveFloat* InCustomBlendCurve, const bool bInUseTranslation, const bool bInUseRotation, const bool bInUseScale, const bool bInReplaceTranslation, const bool bInReplaceRotation, const bool bInReplaceScale, const EBoneControlSpace InTranslationSpace, const EBoneControlSpace InRotationSpace, const bool bBlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "CreateBoneMod");

	Params::BoneModBlueprintLibrary_CreateBoneMod Parms{};

	Parms.InBoneModName = InBoneModName;
	Parms.InBoneName = InBoneName;
	Parms.InTranslation = std::move(InTranslation);
	Parms.InRotation = std::move(InRotation);
	Parms.InScale = std::move(InScale);
	Parms.InBlendTime = InBlendTime;
	Parms.Target = Target;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;
	Parms.bInUseTranslation = bInUseTranslation;
	Parms.bInUseRotation = bInUseRotation;
	Parms.bInUseScale = bInUseScale;
	Parms.bInReplaceTranslation = bInReplaceTranslation;
	Parms.bInReplaceRotation = bInReplaceRotation;
	Parms.bInReplaceScale = bInReplaceScale;
	Parms.InTranslationSpace = InTranslationSpace;
	Parms.InRotationSpace = InRotationSpace;
	Parms.bBlendIn = bBlendIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.GetBoneMod
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBoneModInstance                 BoneMod                                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBoneModBlueprintLibrary::GetBoneMod(const class FName BoneModName, struct FBoneModInstance* BoneMod, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "GetBoneMod");

	Params::BoneModBlueprintLibrary_GetBoneMod Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BoneMod != nullptr)
		*BoneMod = std::move(Parms.BoneMod);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.RemoveBoneMod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModToRemove                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlendOut                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::RemoveBoneMod(const class FName BoneModToRemove, class UObject* Target, bool bBlendOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "RemoveBoneMod");

	Params::BoneModBlueprintLibrary_RemoveBoneMod Parms{};

	Parms.BoneModToRemove = BoneModToRemove;
	Parms.Target = Target;
	Parms.bBlendOut = bBlendOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneMod
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBoneModInstance                 InBoneMod                                              (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             BoneModToSet                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlendIn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneMod(struct FBoneModInstance& InBoneMod, const class FName BoneModToSet, class UObject* Target, bool bBlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneMod");

	Params::BoneModBlueprintLibrary_SetBoneMod Parms{};

	Parms.InBoneMod = std::move(InBoneMod);
	Parms.BoneModToSet = BoneModToSet;
	Parms.Target = Target;
	Parms.bBlendIn = bBlendIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InBoneMod = std::move(Parms.InBoneMod);
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModActive(const class FName BoneModName, bool bActive, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModActive");

	Params::BoneModBlueprintLibrary_SetBoneModActive Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bActive = bActive;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModAlphaBlend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAlphaBlend                      Blend                                                  (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModAlphaBlend(const class FName BoneModName, const struct FAlphaBlend& Blend, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModAlphaBlend");

	Params::BoneModBlueprintLibrary_SetBoneModAlphaBlend Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Blend = std::move(Blend);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModBlendTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModBlendTime(const class FName BoneModName, const float BlendTime, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModBlendTime");

	Params::BoneModBlueprintLibrary_SetBoneModBlendTime Parms{};

	Parms.BoneModName = BoneModName;
	Parms.BlendTime = BlendTime;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModBoneName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneModBoneName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModBoneName(const class FName BoneModName, const class FName BoneModBoneName, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModBoneName");

	Params::BoneModBlueprintLibrary_SetBoneModBoneName Parms{};

	Parms.BoneModName = BoneModName;
	Parms.BoneModBoneName = BoneModBoneName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModifyProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGbxBoneModifyProfile*            BoneModifyProfile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModifyProfile(class UGbxBoneModifyProfile* BoneModifyProfile, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModifyProfile");

	Params::BoneModBlueprintLibrary_SetBoneModifyProfile Parms{};

	Parms.BoneModifyProfile = BoneModifyProfile;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModifyProfileState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             StateName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModifyProfileState(const class FName StateName, bool bActive, class UObject* Target, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModifyProfileState");

	Params::BoneModBlueprintLibrary_SetBoneModifyProfileState Parms{};

	Parms.StateName = StateName;
	Parms.bActive = bActive;
	Parms.Target = Target;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewBoneModName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModName(const class FName BoneModName, const class FName NewBoneModName, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModName");

	Params::BoneModBlueprintLibrary_SetBoneModName Parms{};

	Parms.BoneModName = BoneModName;
	Parms.NewBoneModName = NewBoneModName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModReplaceRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplaceRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModReplaceRotation(const class FName BoneModName, const bool bReplaceRotation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModReplaceRotation");

	Params::BoneModBlueprintLibrary_SetBoneModReplaceRotation Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bReplaceRotation = bReplaceRotation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModReplaceScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplaceScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModReplaceScale(const class FName BoneModName, const bool bReplaceScale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModReplaceScale");

	Params::BoneModBlueprintLibrary_SetBoneModReplaceScale Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bReplaceScale = bReplaceScale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModReplaceTranslation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplaceTranslation                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModReplaceTranslation(const class FName BoneModName, const bool bReplaceTranslation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModReplaceTranslation");

	Params::BoneModBlueprintLibrary_SetBoneModReplaceTranslation Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bReplaceTranslation = bReplaceTranslation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModRotation(const class FName BoneModName, const struct FRotator& Rotation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModRotation");

	Params::BoneModBlueprintLibrary_SetBoneModRotation Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Rotation = std::move(Rotation);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModRotationSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneControlSpace                       RotationSpace                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModRotationSpace(const class FName BoneModName, const EBoneControlSpace RotationSpace, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModRotationSpace");

	Params::BoneModBlueprintLibrary_SetBoneModRotationSpace Parms{};

	Parms.BoneModName = BoneModName;
	Parms.RotationSpace = RotationSpace;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModScale(const class FName BoneModName, const float Scale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModScale");

	Params::BoneModBlueprintLibrary_SetBoneModScale Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Scale = Scale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModScale3D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModScale3D(const class FName BoneModName, const struct FVector& Scale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModScale3D");

	Params::BoneModBlueprintLibrary_SetBoneModScale3D Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Scale = std::move(Scale);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModTransform(const class FName BoneModName, const struct FTransform& Transform, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModTransform");

	Params::BoneModBlueprintLibrary_SetBoneModTransform Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Transform = std::move(Transform);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModTranslation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Translation                                            (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModTranslation(const class FName BoneModName, const struct FVector& Translation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModTranslation");

	Params::BoneModBlueprintLibrary_SetBoneModTranslation Parms{};

	Parms.BoneModName = BoneModName;
	Parms.Translation = std::move(Translation);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModTranslationSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBoneControlSpace                       TranslationSpace                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModTranslationSpace(const class FName BoneModName, const EBoneControlSpace TranslationSpace, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModTranslationSpace");

	Params::BoneModBlueprintLibrary_SetBoneModTranslationSpace Parms{};

	Parms.BoneModName = BoneModName;
	Parms.TranslationSpace = TranslationSpace;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModUseRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseRotation                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModUseRotation(const class FName BoneModName, const bool bUseRotation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModUseRotation");

	Params::BoneModBlueprintLibrary_SetBoneModUseRotation Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bUseRotation = bUseRotation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModUseScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseScale                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModUseScale(const class FName BoneModName, const bool bUseScale, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModUseScale");

	Params::BoneModBlueprintLibrary_SetBoneModUseScale Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bUseScale = bUseScale;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneModUseTranslation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneModName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseTranslation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneModUseTranslation(const class FName BoneModName, const bool bUseTranslation, class UObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneModUseTranslation");

	Params::BoneModBlueprintLibrary_SetBoneModUseTranslation Parms{};

	Parms.BoneModName = BoneModName;
	Parms.bUseTranslation = bUseTranslation;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlphaBlendOption                       InBlendOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InCustomBlendCurve                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneRotation(const class FName BoneName, const struct FRotator& Rotation, class UObject* Target, const float InBlendTime, const EAlphaBlendOption InBlendOption, const class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneRotation");

	Params::BoneModBlueprintLibrary_SetBoneRotation Parms{};

	Parms.BoneName = BoneName;
	Parms.Rotation = std::move(Rotation);
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlphaBlendOption                       InBlendOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InCustomBlendCurve                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneScale(const class FName BoneName, const float Scale, class UObject* Target, const float InBlendTime, const EAlphaBlendOption InBlendOption, const class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneScale");

	Params::BoneModBlueprintLibrary_SetBoneScale Parms{};

	Parms.BoneName = BoneName;
	Parms.Scale = Scale;
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneScale3D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Scale3D                                                (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlphaBlendOption                       InBlendOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InCustomBlendCurve                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneScale3D(const class FName BoneName, const struct FVector& Scale3D, class UObject* Target, const float InBlendTime, const EAlphaBlendOption InBlendOption, const class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneScale3D");

	Params::BoneModBlueprintLibrary_SetBoneScale3D Parms{};

	Parms.BoneName = BoneName;
	Parms.Scale3D = std::move(Scale3D);
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.BoneModBlueprintLibrary.SetBoneTranslation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Translation                                            (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlphaBlendOption                       InBlendOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InCustomBlendCurve                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoneModBlueprintLibrary::SetBoneTranslation(const class FName BoneName, const struct FVector& Translation, class UObject* Target, const float InBlendTime, const EAlphaBlendOption InBlendOption, const class UCurveFloat* InCustomBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BoneModBlueprintLibrary", "SetBoneTranslation");

	Params::BoneModBlueprintLibrary_SetBoneTranslation Parms{};

	Parms.BoneName = BoneName;
	Parms.Translation = std::move(Translation);
	Parms.Target = Target;
	Parms.InBlendTime = InBlendTime;
	Parms.InBlendOption = InBlendOption;
	Parms.InCustomBlendCurve = InCustomBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.AddAssociatedActor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           AssociatedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UChallengeLevelActorComponent>ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RelativeOffset                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelParentComponent::AddAssociatedActor(class AActor* AssociatedActor, TSubclassOf<class UChallengeLevelActorComponent> ComponentClass, const struct FVector& RelativeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "AddAssociatedActor");

	Params::ChallengeLevelParentComponent_AddAssociatedActor Parms{};

	Parms.AssociatedActor = AssociatedActor;
	Parms.ComponentClass = ComponentClass;
	Parms.RelativeOffset = std::move(RelativeOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.ClearAssociatedActors
// (Final, Native, Public, BlueprintCallable)

void UChallengeLevelParentComponent::ClearAssociatedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "ClearAssociatedActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.RemoveAssociatedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AssociatedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelParentComponent::RemoveAssociatedActor(class AActor* AssociatedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "RemoveAssociatedActor");

	Params::ChallengeLevelParentComponent_RemoveAssociatedActor Parms{};

	Parms.AssociatedActor = AssociatedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ChallengeLevelParentComponent.RemoveAssociatedActorComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UChallengeLevelActorComponent*    AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeLevelParentComponent::RemoveAssociatedActorComponent(class UChallengeLevelActorComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeLevelParentComponent", "RemoveAssociatedActorComponent");

	Params::ChallengeLevelParentComponent_RemoveAssociatedActorComponent Parms{};

	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.ClearAndSetCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCinematicModeData*               InCinematicMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::ClearAndSetCinematicMode(class UObject* WorldContextObject, class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CinematicModeBlueprintLibrary", "ClearAndSetCinematicMode");

	Params::CinematicModeBlueprintLibrary_ClearAndSetCinematicMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.ClearCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::ClearCinematicMode(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CinematicModeBlueprintLibrary", "ClearCinematicMode");

	Params::CinematicModeBlueprintLibrary_ClearCinematicMode Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.PopCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCinematicModeData*               InCinematicMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::PopCinematicMode(class UObject* WorldContextObject, class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CinematicModeBlueprintLibrary", "PopCinematicMode");

	Params::CinematicModeBlueprintLibrary_PopCinematicMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.CinematicModeBlueprintLibrary.PushCinematicMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCinematicModeData*               InCinematicMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicModeBlueprintLibrary::PushCinematicMode(class UObject* WorldContextObject, class UCinematicModeData* InCinematicMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CinematicModeBlueprintLibrary", "PushCinematicMode");

	Params::CinematicModeBlueprintLibrary_PushCinematicMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InCinematicMode = InCinematicMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.IsPerformingControlledMove
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControlledMoveFunctionLibrary::IsPerformingControlledMove(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControlledMoveFunctionLibrary", "IsPerformingControlledMove");

	Params::ControlledMoveFunctionLibrary_IsPerformingControlledMove Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.IsPerformingSpecificControlledMove
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlledMove>      ControlledMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControlledMoveFunctionLibrary::IsPerformingSpecificControlledMove(class AActor* Actor, TSubclassOf<class UControlledMove> ControlledMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControlledMoveFunctionLibrary", "IsPerformingSpecificControlledMove");

	Params::ControlledMoveFunctionLibrary_IsPerformingSpecificControlledMove Parms{};

	Parms.Actor = Actor;
	Parms.ControlledMove = ControlledMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.StartControlledMove
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlledMove>      ControlledMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedOverride                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOverride                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LaunchAngleOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UControlledMoveFunctionLibrary::StartControlledMove(class AActor* Actor, TSubclassOf<class UControlledMove> ControlledMove, class AActor* Instigator, float SpeedOverride, float DurationOverride, float LaunchAngleOverride, class AActor* TargetActor, const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControlledMoveFunctionLibrary", "StartControlledMove");

	Params::ControlledMoveFunctionLibrary_StartControlledMove Parms{};

	Parms.Actor = Actor;
	Parms.ControlledMove = ControlledMove;
	Parms.Instigator = Instigator;
	Parms.SpeedOverride = SpeedOverride;
	Parms.DurationOverride = DurationOverride;
	Parms.LaunchAngleOverride = LaunchAngleOverride;
	Parms.TargetActor = TargetActor;
	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ControlledMoveFunctionLibrary.StopControlledMove
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlledMove>      ControlledMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bZeroVelocity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlledMoveFunctionLibrary::StopControlledMove(class AActor* Actor, TSubclassOf<class UControlledMove> ControlledMove, bool bZeroVelocity, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ControlledMoveFunctionLibrary", "StopControlledMove");

	Params::ControlledMoveFunctionLibrary_StopControlledMove Parms{};

	Parms.Actor = Actor;
	Parms.ControlledMove = ControlledMove;
	Parms.bZeroVelocity = bZeroVelocity;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageStatics.ApplyDamage
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamageReceiver                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BaseDamage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>       DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>        DamageSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::ApplyDamage(class AActor* DamageReceiver, float BaseDamage, TSubclassOf<class UGbxDamageType> DamageType, TSubclassOf<class UDamageSource> DamageSource, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "ApplyDamage");

	Params::DamageStatics_ApplyDamage Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.BaseDamage = BaseDamage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageStatics.ApplyDamageEx
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FPipelineDamageInput             PipelineInput                                          (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   BaseDamage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::ApplyDamageEx(const struct FPipelineDamageInput& PipelineInput, float BaseDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "ApplyDamageEx");

	Params::DamageStatics_ApplyDamageEx Parms{};

	Parms.PipelineInput = std::move(PipelineInput);
	Parms.BaseDamage = BaseDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageStatics.ApplyDamageInRadius
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BaseDamage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>       DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>        DamageSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection                  BaseImpactForce                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       DamagePreventionChannel                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageFalloff                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageModifierComponent*         DamageModifierComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    InstigatorFeedback                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseInstigatorRadiusDamageScale                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::ApplyDamageInRadius(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float Radius, TSubclassOf<class UGbxDamageType> DamageType, TSubclassOf<class UDamageSource> DamageSource, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* EventInstigator, const struct FForceSelection& BaseImpactForce, ECollisionChannel DamagePreventionChannel, bool bDamageFalloff, class UDamageModifierComponent* DamageModifierComponent, class UFeedbackData* InstigatorFeedback, bool bUseInstigatorRadiusDamageScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "ApplyDamageInRadius");

	Params::DamageStatics_ApplyDamageInRadius Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BaseDamage = BaseDamage;
	Parms.Origin = std::move(Origin);
	Parms.Radius = Radius;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.DamageCauser = DamageCauser;
	Parms.EventInstigator = EventInstigator;
	Parms.BaseImpactForce = std::move(BaseImpactForce);
	Parms.DamagePreventionChannel = DamagePreventionChannel;
	Parms.bDamageFalloff = bDamageFalloff;
	Parms.DamageModifierComponent = DamageModifierComponent;
	Parms.InstigatorFeedback = InstigatorFeedback;
	Parms.bUseInstigatorRadiusDamageScale = bUseInstigatorRadiusDamageScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageStatics.Conv_FloatToForceSelection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ForceSelection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FForceSelection UDamageStatics::Conv_FloatToForceSelection(float ForceSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "Conv_FloatToForceSelection");

	Params::DamageStatics_Conv_FloatToForceSelection Parms{};

	Parms.ForceSelection = ForceSelection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageStatics.Conv_ForceSelectionToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FForceSelection                  ForceSelection                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDamageStatics::Conv_ForceSelectionToFloat(const struct FForceSelection& ForceSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "Conv_ForceSelectionToFloat");

	Params::DamageStatics_Conv_ForceSelectionToFloat Parms{};

	Parms.ForceSelection = std::move(ForceSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageStatics.GetDamageSourceFromClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UDamageSource>        DamageSourceClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageSource*              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UDamageSource* UDamageStatics::GetDamageSourceFromClass(TSubclassOf<class UDamageSource> DamageSourceClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "GetDamageSourceFromClass");

	Params::DamageStatics_GetDamageSourceFromClass Parms{};

	Parms.DamageSourceClass = DamageSourceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageStatics.GetDamageTypeFromClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGbxDamageType>       DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGbxDamageType*             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGbxDamageType* UDamageStatics::GetDamageTypeFromClass(TSubclassOf<class UGbxDamageType> DamageTypeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "GetDamageTypeFromClass");

	Params::DamageStatics_GetDamageTypeFromClass Parms{};

	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageStatics.GetSummary_ForceSelection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FForceSelection                  ForceSelection                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDamageStatics::GetSummary_ForceSelection(const struct FForceSelection& ForceSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "GetSummary_ForceSelection");

	Params::DamageStatics_GetSummary_ForceSelection Parms{};

	Parms.ForceSelection = std::move(ForceSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageStatics.MakePipelineDamageInput
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageReceiver                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxDamageType>       DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageSource>        DamageSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitDirection                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitForceDirection                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection                  HitForceMagnitude                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPipelineDamageInput             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FPipelineDamageInput UDamageStatics::MakePipelineDamageInput(class AActor* DamageCauser, class AActor* DamageReceiver, TSubclassOf<class UGbxDamageType> DamageType, TSubclassOf<class UDamageSource> DamageSource, const struct FHitResult& HitInfo, const struct FVector& HitLocation, const struct FVector& HitDirection, const struct FVector& HitForceDirection, const struct FForceSelection& HitForceMagnitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "MakePipelineDamageInput");

	Params::DamageStatics_MakePipelineDamageInput Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageReceiver = DamageReceiver;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.HitInfo = std::move(HitInfo);
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDirection = std::move(HitDirection);
	Parms.HitForceDirection = std::move(HitForceDirection);
	Parms.HitForceMagnitude = std::move(HitForceMagnitude);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DamageStatics.StopCausingAllDamage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingAllDamage(class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "StopCausingAllDamage");

	Params::DamageStatics_StopCausingAllDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageStatics.StopCausingDamage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>          DamageData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingDamage(class AActor* DamageCauser, TSubclassOf<class UDamageData> DamageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "StopCausingDamage");

	Params::DamageStatics_StopCausingDamage Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageData = DamageData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DamageStatics.StopCausingDamageToTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageData>          DamageData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDamageStatics::StopCausingDamageToTarget(class AActor* DamageCauser, class AActor* DamageTarget, TSubclassOf<class UDamageData> DamageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DamageStatics", "StopCausingDamageToTarget");

	Params::DamageStatics_StopCausingDamageToTarget Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;
	Parms.DamageData = DamageData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.AttachBodyTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BodyName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachToBodyName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocitySpaceBlend                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BreakForce                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::AttachBodyTo(class FName BodyName, class UPrimitiveComponent* AttachToComponent, class FName AttachToBodyName, float VelocitySpaceBlend, float BreakForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "AttachBodyTo");

	Params::DynamicPhysicalAnimationComponent_AttachBodyTo Parms{};

	Parms.BodyName = BodyName;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachToBodyName = AttachToBodyName;
	Parms.VelocitySpaceBlend = VelocitySpaceBlend;
	Parms.BreakForce = BreakForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.DetachBodyFromAllExternalRigidBodies
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BodyName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::DetachBodyFromAllExternalRigidBodies(class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "DetachBodyFromAllExternalRigidBodies");

	Params::DynamicPhysicalAnimationComponent_DetachBodyFromAllExternalRigidBodies Parms{};

	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.GetStrengthMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicPhysicalAnimationComponent::GetStrengthMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "GetStrengthMultiplier");

	Params::DynamicPhysicalAnimationComponent_GetStrengthMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.OnRigidBodyOverlap
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::OnRigidBodyOverlap(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "OnRigidBodyOverlap");

	Params::DynamicPhysicalAnimationComponent_OnRigidBodyOverlap Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetActiveProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicalAnimationProfileAsset*   Profile                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetActiveProfile(const class UPhysicalAnimationProfileAsset* Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetActiveProfile");

	Params::DynamicPhysicalAnimationComponent_SetActiveProfile Parms{};

	Parms.Profile = Profile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetEnablePhysicalAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BodyName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetEnablePhysicalAnimation(bool bEnable, class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetEnablePhysicalAnimation");

	Params::DynamicPhysicalAnimationComponent_SetEnablePhysicalAnimation Parms{};

	Parms.bEnable = bEnable;
	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetEnableRagdoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetEnableRagdoll(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetEnableRagdoll");

	Params::DynamicPhysicalAnimationComponent_SetEnableRagdoll Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetHasAnimationPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPlaying                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetHasAnimationPlaying(bool bPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetHasAnimationPlaying");

	Params::DynamicPhysicalAnimationComponent_SetHasAnimationPlaying Parms{};

	Parms.bPlaying = bPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetRootMotionControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPhysicalAnimationRootMotionControl     MotionControl                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetRootMotionControl(EPhysicalAnimationRootMotionControl MotionControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetRootMotionControl");

	Params::DynamicPhysicalAnimationComponent_SetRootMotionControl Parms{};

	Parms.MotionControl = MotionControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           NewSkeletalMeshComponent                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* NewSkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetSkeletalMeshComponent");

	Params::DynamicPhysicalAnimationComponent_SetSkeletalMeshComponent Parms{};

	Parms.NewSkeletalMeshComponent = NewSkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.SetStrengthMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicPhysicalAnimationComponent::SetStrengthMultiplier(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "SetStrengthMultiplier");

	Params::DynamicPhysicalAnimationComponent_SetStrengthMultiplier Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.DynamicPhysicalAnimationComponent.GetRootMotionControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPhysicalAnimationRootMotionControl     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPhysicalAnimationRootMotionControl UDynamicPhysicalAnimationComponent::GetRootMotionControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicPhysicalAnimationComponent", "GetRootMotionControl");

	Params::DynamicPhysicalAnimationComponent_GetRootMotionControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UseSystemFunctionLibrary.ResetUseCount
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseSystemFunctionLibrary::ResetUseCount(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UseSystemFunctionLibrary", "ResetUseCount");

	Params::UseSystemFunctionLibrary_ResetUseCount Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.UseSystemFunctionLibrary.SetIsUsable
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewIsUsable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseSystemFunctionLibrary::SetIsUsable(class AActor* Actor, bool bNewIsUsable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UseSystemFunctionLibrary", "SetIsUsable");

	Params::UseSystemFunctionLibrary_SetIsUsable Parms{};

	Parms.Actor = Actor;
	Parms.bNewIsUsable = bNewIsUsable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ExplosionBlueprintLibrary.PlayExplosion
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UExplosionData*                   ExplosionData                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ExplosionLocation                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystemComponent* UExplosionBlueprintLibrary::PlayExplosion(class UExplosionData* ExplosionData, float Size, const struct FVector& ExplosionLocation, class UObject* Context, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ExplosionBlueprintLibrary", "PlayExplosion");

	Params::ExplosionBlueprintLibrary_PlayExplosion Parms{};

	Parms.ExplosionData = ExplosionData;
	Parms.Size = Size;
	Parms.ExplosionLocation = std::move(ExplosionLocation);
	Parms.Context = Context;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ExplosionComponent.Explode
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UExplosionComponent::Explode(const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionComponent", "Explode");

	Params::ExplosionComponent_Explode Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ExplosionComponent.SetExplosionLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewLocation                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExplosionComponent::SetExplosionLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionComponent", "SetExplosionLocation");

	Params::ExplosionComponent_SetExplosionLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ExplosionData.SelectExplosion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExplosionSizeProperties         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FExplosionSizeProperties UExplosionData::SelectExplosion(float Size, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionData", "SelectExplosion");

	Params::ExplosionData_SelectExplosion Parms{};

	Parms.Size = Size;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ExplosionSizeSelectionData.GetExplosionPropertiesBySize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExplosionSizeProperties         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FExplosionSizeProperties UExplosionSizeSelectionData::GetExplosionPropertiesBySize(float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionSizeSelectionData", "GetExplosionPropertiesBySize");

	Params::ExplosionSizeSelectionData_GetExplosionPropertiesBySize Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.FeedbackData.GetFeedbackDataRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinRange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxRange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::GetFeedbackDataRange(class UFeedbackData* FeedbackData, float* MinRange, float* MaxRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "GetFeedbackDataRange");

	Params::FeedbackData_GetFeedbackDataRange Parms{};

	Parms.FeedbackData = FeedbackData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MinRange != nullptr)
		*MinRange = Parms.MinRange;

	if (MaxRange != nullptr)
		*MaxRange = Parms.MaxRange;
}


// Function GbxGameSystemCore.FeedbackData.GetFeedbackDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFeedbackData::GetFeedbackDuration(class UFeedbackData* FeedbackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "GetFeedbackDuration");

	Params::FeedbackData_GetFeedbackDuration Parms{};

	Parms.FeedbackData = FeedbackData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle          Feedback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedback(const struct FFeedbackTableRowHandle& Feedback, class APlayerController* Controller, float Scale, bool bLoop, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformDefaultFeedback");

	Params::FeedbackData_PerformDefaultFeedback Parms{};

	Parms.Feedback = std::move(Feedback);
	Parms.Controller = Controller;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedbackAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle          Feedback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides         RangedDistanceOverrides                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ControllerToIgnore                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    OverrideControllerFeedback                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedbackAtLocation(const struct FFeedbackTableRowHandle& Feedback, class APlayerController* Controller, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformDefaultFeedbackAtLocation");

	Params::FeedbackData_PerformDefaultFeedbackAtLocation Parms{};

	Parms.Feedback = std::move(Feedback);
	Parms.Controller = Controller;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.RangedDistanceOverrides = std::move(RangedDistanceOverrides);
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle          Feedback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ControllerToIgnore                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    OverrideControllerFeedback                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedbackForAll(const struct FFeedbackTableRowHandle& Feedback, float Scale, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformDefaultFeedbackForAll");

	Params::FeedbackData_PerformDefaultFeedbackForAll Parms{};

	Parms.Feedback = std::move(Feedback);
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformDefaultFeedbackForAllAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle          Feedback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides         RangedDistanceOverrides                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ControllerToIgnore                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    OverrideControllerFeedback                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformDefaultFeedbackForAllAtLocation(const struct FFeedbackTableRowHandle& Feedback, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformDefaultFeedbackForAllAtLocation");

	Params::FeedbackData_PerformDefaultFeedbackForAllAtLocation Parms{};

	Parms.Feedback = std::move(Feedback);
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.RangedDistanceOverrides = std::move(RangedDistanceOverrides);
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedback(class UFeedbackData* FeedbackData, class APlayerController* Controller, float Scale, bool bLoop, class UObject* SourceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformFeedback");

	Params::FeedbackData_PerformFeedback Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Controller = Controller;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformFeedbackAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides         RangedDistanceOverrides                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ControllerToIgnore                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    OverrideControllerFeedback                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedbackAtLocation(class UFeedbackData* FeedbackData, class APlayerController* Controller, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformFeedbackAtLocation");

	Params::FeedbackData_PerformFeedbackAtLocation Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Controller = Controller;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.RangedDistanceOverrides = std::move(RangedDistanceOverrides);
	Parms.bLoop = bLoop;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ControllerToIgnore                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    OverrideControllerFeedback                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedbackForAll(class UFeedbackData* FeedbackData, float Scale, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformFeedbackForAll");

	Params::FeedbackData_PerformFeedbackForAll Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Scale = Scale;
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.PerformFeedbackForAllAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceLocation                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRangedDistanceOverrides         RangedDistanceOverrides                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ControllerToIgnore                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFeedbackData*                    OverrideControllerFeedback                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::PerformFeedbackForAllAtLocation(class UFeedbackData* FeedbackData, const struct FVector& SourceLocation, const struct FRangedDistanceOverrides& RangedDistanceOverrides, bool bLoop, class UObject* WorldContextObject, class UObject* SourceContext, class APlayerController* ControllerToIgnore, class UFeedbackData* OverrideControllerFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "PerformFeedbackForAllAtLocation");

	Params::FeedbackData_PerformFeedbackForAllAtLocation Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.RangedDistanceOverrides = std::move(RangedDistanceOverrides);
	Parms.bLoop = bLoop;
	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceContext = SourceContext;
	Parms.ControllerToIgnore = ControllerToIgnore;
	Parms.OverrideControllerFeedback = OverrideControllerFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.StopDefaultFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle          Feedback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopDefaultFeedback(const struct FFeedbackTableRowHandle& Feedback, class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "StopDefaultFeedback");

	Params::FeedbackData_StopDefaultFeedback Parms{};

	Parms.Feedback = std::move(Feedback);
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.StopDefaultFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FFeedbackTableRowHandle          Feedback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopDefaultFeedbackForAll(const struct FFeedbackTableRowHandle& Feedback, class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "StopDefaultFeedbackForAll");

	Params::FeedbackData_StopDefaultFeedbackForAll Parms{};

	Parms.Feedback = std::move(Feedback);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.StopFeedback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopFeedback(class UFeedbackData* FeedbackData, class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "StopFeedback");

	Params::FeedbackData_StopFeedback Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FeedbackData.StopFeedbackForAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFeedbackData*                    FeedbackData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFeedbackData::StopFeedbackForAll(class UFeedbackData* FeedbackData, class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FeedbackData", "StopFeedbackForAll");

	Params::FeedbackData_StopFeedbackForAll Parms{};

	Parms.FeedbackData = FeedbackData;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FXVolumeManager.OnPlayerDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFXVolumeManager::OnPlayerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FXVolumeManager", "OnPlayerDestroyed");

	Params::FXVolumeManager_OnPlayerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FXVolumeManager.OnVolumeDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFXVolumeManager::OnVolumeDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FXVolumeManager", "OnVolumeDestroyed");

	Params::FXVolumeManager_OnVolumeDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FXVolume.OnActorEnteredVolume
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       OverlapInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFXVolume::OnActorEnteredVolume(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FXVolume", "OnActorEnteredVolume");

	Params::FXVolume_OnActorEnteredVolume Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.OverlapInfo = std::move(OverlapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.FXVolume.OnActorLeftVolume
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFXVolume::OnActorLeftVolume(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FXVolume", "OnActorLeftVolume");

	Params::FXVolume_OnActorLeftVolume Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameplayTagContainerComponent.GetGameplayTagContainerFromActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EContainsTagComponent                   Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTagContainerComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTagContainerComponent* UGameplayTagContainerComponent::GetGameplayTagContainerFromActor(const class AActor* Actor, EContainsTagComponent* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTagContainerComponent", "GetGameplayTagContainerFromActor");

	Params::GameplayTagContainerComponent_GetGameplayTagContainerFromActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult                  QueryResult                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ResultActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultActor(const struct FEnvQueryResult& QueryResult, class AActor** ResultActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "GetResultActor");

	Params::GameplayTask_RunEnvQuery_GetResultActor Parms{};

	Parms.QueryResult = std::move(QueryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultActor != nullptr)
		*ResultActor = Parms.ResultActor;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult                  QueryResult                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ResultActors                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultActors(const struct FEnvQueryResult& QueryResult, TArray<class AActor*>* ResultActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "GetResultActors");

	Params::GameplayTask_RunEnvQuery_GetResultActors Parms{};

	Parms.QueryResult = std::move(QueryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultActors != nullptr)
		*ResultActors = std::move(Parms.ResultActors);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult                  QueryResult                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ResultLocation                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultLocation(const struct FEnvQueryResult& QueryResult, struct FVector* ResultLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "GetResultLocation");

	Params::GameplayTask_RunEnvQuery_GetResultLocation Parms{};

	Parms.QueryResult = std::move(QueryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultLocation != nullptr)
		*ResultLocation = std::move(Parms.ResultLocation);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.GetResultLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEnvQueryResult                  QueryResult                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ResultLocations                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayTask_RunEnvQuery::GetResultLocations(const struct FEnvQueryResult& QueryResult, TArray<struct FVector>* ResultLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "GetResultLocations");

	Params::GameplayTask_RunEnvQuery_GetResultLocations Parms{};

	Parms.QueryResult = std::move(QueryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultLocations != nullptr)
		*ResultLocations = std::move(Parms.ResultLocations);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.RunEnvQuery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGameplayTask_RunEnvQuery*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::RunEnvQuery(class AActor* QueryOwner, const struct FEnvQueryParams& QueryParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "RunEnvQuery");

	Params::GameplayTask_RunEnvQuery_RunEnvQuery Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.RunEnvQueryOnActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_RunEnvQuery*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::RunEnvQueryOnActor(class AActor* QueryOwner, const struct FEnvQueryParams& QueryParams, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "RunEnvQueryOnActor");

	Params::GameplayTask_RunEnvQuery_RunEnvQueryOnActor Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameplayTask_RunEnvQuery.RunEnvQueryOnLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           QueryOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnvQueryParams                  QueryParams                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayTask_RunEnvQuery*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTask_RunEnvQuery* UGameplayTask_RunEnvQuery::RunEnvQueryOnLocation(class AActor* QueryOwner, const struct FEnvQueryParams& QueryParams, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTask_RunEnvQuery", "RunEnvQueryOnLocation");

	Params::GameplayTask_RunEnvQuery_RunEnvQueryOnLocation Parms{};

	Parms.QueryOwner = QueryOwner;
	Parms.QueryParams = std::move(QueryParams);
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.AdjustResourcePoolValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::AdjustResourcePoolValue(const struct FGameResourcePoolReference& InPool, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "AdjustResourcePoolValue");

	Params::GameResourcePoolFunctionLibrary_AdjustResourcePoolValue Parms{};

	Parms.InPool = std::move(InPool);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.BreakResourcePoolReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::BreakResourcePoolReference(const struct FGameResourcePoolReference& InPool, bool* bValid, float* CurrentValue, float* MinValue, float* MaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "BreakResourcePoolReference");

	Params::GameResourcePoolFunctionLibrary_BreakResourcePoolReference Parms{};

	Parms.InPool = std::move(InPool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (CurrentValue != nullptr)
		*CurrentValue = Parms.CurrentValue;

	if (MinValue != nullptr)
		*MinValue = Parms.MinValue;

	if (MaxValue != nullptr)
		*MaxValue = Parms.MaxValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ClearResourcePoolRegenDelay
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ClearResourcePoolRegenDelay(const struct FGameResourcePoolReference& InPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "ClearResourcePoolRegenDelay");

	Params::GameResourcePoolFunctionLibrary_ClearResourcePoolRegenDelay Parms{};

	Parms.InPool = std::move(InPool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ClearResourcePoolRegenDelayByGameResourceData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameResourceData*                Resource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ClearResourcePoolRegenDelayByGameResourceData(class AActor* Actor, class UGameResourceData* Resource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "ClearResourcePoolRegenDelayByGameResourceData");

	Params::GameResourcePoolFunctionLibrary_ClearResourcePoolRegenDelayByGameResourceData Parms{};

	Parms.Actor = Actor;
	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.DeleteResourcePool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::DeleteResourcePool(struct FGameResourcePoolReference& InPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "DeleteResourcePool");

	Params::GameResourcePoolFunctionLibrary_DeleteResourcePool Parms{};

	Parms.InPool = std::move(InPool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InPool = std::move(Parms.InPool);
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.DrainResourcePoolByPercentage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinPercentage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::DrainResourcePoolByPercentage(const struct FGameResourcePoolReference& InPool, float Percentage, float MinPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "DrainResourcePoolByPercentage");

	Params::GameResourcePoolFunctionLibrary_DrainResourcePoolByPercentage Parms{};

	Parms.InPool = std::move(InPool);
	Parms.Percentage = Percentage;
	Parms.MinPercentage = MinPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.EqualEqual_ResourceData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference       ResourcePoolReference                                  (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGameResourceData*                ResourceData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::EqualEqual_ResourceData(const struct FGameResourcePoolReference& ResourcePoolReference, class UGameResourceData* ResourceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "EqualEqual_ResourceData");

	Params::GameResourcePoolFunctionLibrary_EqualEqual_ResourceData Parms{};

	Parms.ResourcePoolReference = std::move(ResourcePoolReference);
	Parms.ResourceData = ResourceData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.EqualEqual_ResourcePoolData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference       ResourcePoolReference                                  (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGameResourcePoolData*            ResourcePoolData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::EqualEqual_ResourcePoolData(const struct FGameResourcePoolReference& ResourcePoolReference, class UGameResourcePoolData* ResourcePoolData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "EqualEqual_ResourcePoolData");

	Params::GameResourcePoolFunctionLibrary_EqualEqual_ResourcePoolData Parms{};

	Parms.ResourcePoolReference = std::move(ResourcePoolReference);
	Parms.ResourcePoolData = ResourcePoolData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.EqualEqual_ResourcePoolReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameResourcePoolReference       A                                                      (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGameResourcePoolReference       B                                                      (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::EqualEqual_ResourcePoolReference(const struct FGameResourcePoolReference& A, const struct FGameResourcePoolReference& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "EqualEqual_ResourcePoolReference");

	Params::GameResourcePoolFunctionLibrary_EqualEqual_ResourcePoolReference Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.GetDelegatePrefixForResourceEvent
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// struct FGameResourceUserEvent           InResourceUserEvent                                    (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGameResourcePoolFunctionLibrary::GetDelegatePrefixForResourceEvent(struct FGameResourceUserEvent* InResourceUserEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "GetDelegatePrefixForResourceEvent");

	Params::GameResourcePoolFunctionLibrary_GetDelegatePrefixForResourceEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InResourceUserEvent != nullptr)
		*InResourceUserEvent = std::move(Parms.InResourceUserEvent);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.IsResourcePoolInState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EGameResourcePoolState                  InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameResourcePoolFunctionLibrary::IsResourcePoolInState(const struct FGameResourcePoolReference& InPool, EGameResourcePoolState InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "IsResourcePoolInState");

	Params::GameResourcePoolFunctionLibrary_IsResourcePoolInState Parms{};

	Parms.InPool = std::move(InPool);
	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.RefillResourcePoolByPercentage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxPercentage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::RefillResourcePoolByPercentage(const struct FGameResourcePoolReference& InPool, float Percentage, float MaxPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "RefillResourcePoolByPercentage");

	Params::GameResourcePoolFunctionLibrary_RefillResourcePoolByPercentage Parms{};

	Parms.InPool = std::move(InPool);
	Parms.Percentage = Percentage;
	Parms.MaxPercentage = MaxPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ResetResourcePoolRegenDelay
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ResetResourcePoolRegenDelay(const struct FGameResourcePoolReference& InPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "ResetResourcePoolRegenDelay");

	Params::GameResourcePoolFunctionLibrary_ResetResourcePoolRegenDelay Parms{};

	Parms.InPool = std::move(InPool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.ResetResourcePoolRegenDelayByGameResourceData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameResourceData*                Resource                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::ResetResourcePoolRegenDelayByGameResourceData(class AActor* Actor, class UGameResourceData* Resource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "ResetResourcePoolRegenDelayByGameResourceData");

	Params::GameResourcePoolFunctionLibrary_ResetResourcePoolRegenDelayByGameResourceData Parms{};

	Parms.Actor = Actor;
	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameResourcePoolFunctionLibrary.SetResourcePoolValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameResourcePoolReference       InPool                                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameResourcePoolFunctionLibrary::SetResourcePoolValue(const struct FGameResourcePoolReference& InPool, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameResourcePoolFunctionLibrary", "SetResourcePoolValue");

	Params::GameResourcePoolFunctionLibrary_SetResourcePoolValue Parms{};

	Parms.InPool = std::move(InPool);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameStatsManager.GetStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           StatContext                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    GameStat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGameStatsManager::GetStatValue(class AActor* StatContext, class UGameStatData* GameStat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsManager", "GetStatValue");

	Params::GameStatsManager_GetStatValue Parms{};

	Parms.StatContext = StatContext;
	Parms.GameStat = GameStat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GameStatsManager.IncrementStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           StatContext                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    GameStat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IncrementAmount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStatsManager::IncrementStat(class AActor* StatContext, class UGameStatData* GameStat, int32 IncrementAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsManager", "IncrementStat");

	Params::GameStatsManager_IncrementStat Parms{};

	Parms.StatContext = StatContext;
	Parms.GameStat = GameStat;
	Parms.IncrementAmount = IncrementAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GameStatsManager.UpdateStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           StatContext                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    GameStat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStatsManager::UpdateStat(class AActor* StatContext, class UGameStatData* GameStat, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStatsManager", "UpdateStat");

	Params::GameStatsManager_UpdateStat Parms{};

	Parms.StatContext = StatContext;
	Parms.GameStat = GameStat;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StretchBonesBlueprintLibrary.SetStretchBonesDistance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>       GbxActionRegisters                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UStretchBonesBlueprintLibrary::SetStretchBonesDistance(TArray<struct FGbxActionRegister>& GbxActionRegisters, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StretchBonesBlueprintLibrary", "SetStretchBonesDistance");

	Params::StretchBonesBlueprintLibrary_SetStretchBonesDistance Parms{};

	Parms.GbxActionRegisters = std::move(GbxActionRegisters);
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxActionRegisters = std::move(Parms.GbxActionRegisters);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StretchBonesBlueprintLibrary.SetStretchBonesTarget
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>       GbxActionRegisters                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetPosition                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UStretchBonesBlueprintLibrary::SetStretchBonesTarget(TArray<struct FGbxActionRegister>& GbxActionRegisters, class AActor* TargetActor, const struct FVector& TargetPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StretchBonesBlueprintLibrary", "SetStretchBonesTarget");

	Params::StretchBonesBlueprintLibrary_SetStretchBonesTarget Parms{};

	Parms.GbxActionRegisters = std::move(GbxActionRegisters);
	Parms.TargetActor = TargetActor;
	Parms.TargetPosition = std::move(TargetPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxActionRegisters = std::move(Parms.GbxActionRegisters);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.GetKeyedActionClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     ActionKey                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxAction>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxAction> UGbxActionBlueprintLibrary::GetKeyedActionClass(const struct FGameplayTag& ActionKey, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "GetKeyedActionClass");

	Params::GbxActionBlueprintLibrary_GetKeyedActionClass Parms{};

	Parms.ActionKey = std::move(ActionKey);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.GetSummary_AnimActionDef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimActionDef                   AnimActionDef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxActionBlueprintLibrary::GetSummary_AnimActionDef(const struct FAnimActionDef& AnimActionDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "GetSummary_AnimActionDef");

	Params::GbxActionBlueprintLibrary_GetSummary_AnimActionDef Parms{};

	Parms.AnimActionDef = std::move(AnimActionDef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_GetActionByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAction* UGbxActionBlueprintLibrary::K2_GetActionByClass(TSubclassOf<class UGbxAction> ActionClass, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_GetActionByClass");

	Params::GbxActionBlueprintLibrary_K2_GetActionByClass Parms{};

	Parms.ActionClass = ActionClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_GetMaxCurrentTime
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxActionBlueprintLibrary::K2_GetMaxCurrentTime(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_GetMaxCurrentTime");

	Params::GbxActionBlueprintLibrary_K2_GetMaxCurrentTime Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_GetTimeRemaining
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxActionBlueprintLibrary::K2_GetTimeRemaining(class UGbxAction* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_GetTimeRemaining");

	Params::GbxActionBlueprintLibrary_K2_GetTimeRemaining Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_JumpToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_JumpToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_JumpToNextSection");

	Params::GbxActionBlueprintLibrary_K2_JumpToNextSection Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_Pause
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_Pause(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_Pause");

	Params::GbxActionBlueprintLibrary_K2_Pause Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ProceedToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ProceedToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_ProceedToNextSection");

	Params::GbxActionBlueprintLibrary_K2_ProceedToNextSection Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ReplicatedJumpToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ReplicatedJumpToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_ReplicatedJumpToNextSection");

	Params::GbxActionBlueprintLibrary_K2_ReplicatedJumpToNextSection Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ReplicatedProceedToNextSection
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ReplicatedProceedToNextSection(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_ReplicatedProceedToNextSection");

	Params::GbxActionBlueprintLibrary_K2_ReplicatedProceedToNextSection Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_Resume
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_Resume(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_Resume");

	Params::GbxActionBlueprintLibrary_K2_Resume Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_ShowGbxActionScreenLogs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bShowLogsOnScreen                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_ShowGbxActionScreenLogs(bool bShowLogsOnScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_ShowGbxActionScreenLogs");

	Params::GbxActionBlueprintLibrary_K2_ShowGbxActionScreenLogs Parms{};

	Parms.bShowLogsOnScreen = bShowLogsOnScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_StopActionObj
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_StopActionObj(class UGbxAction* Action, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_StopActionObj");

	Params::GbxActionBlueprintLibrary_K2_StopActionObj Parms{};

	Parms.Action = Action;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_UpdateActionDirection
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_UpdateActionDirection(class UGbxAction* Action, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_UpdateActionDirection");

	Params::GbxActionBlueprintLibrary_K2_UpdateActionDirection Parms{};

	Parms.Action = Action;
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.K2_UpdateActionPlayRate
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::K2_UpdateActionPlayRate(class UGbxAction* Action, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "K2_UpdateActionPlayRate");

	Params::GbxActionBlueprintLibrary_K2_UpdateActionPlayRate Parms{};

	Parms.Action = Action;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetFloatGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>       GbxActionRegisters                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             RegisterKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicates                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetFloatGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, float Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "SetFloatGbxActionRegister");

	Params::GbxActionBlueprintLibrary_SetFloatGbxActionRegister Parms{};

	Parms.GbxActionRegisters = std::move(GbxActionRegisters);
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxActionRegisters = std::move(Parms.GbxActionRegisters);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetIntGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>       GbxActionRegisters                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             RegisterKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicates                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetIntGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, int32 Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "SetIntGbxActionRegister");

	Params::GbxActionBlueprintLibrary_SetIntGbxActionRegister Parms{};

	Parms.GbxActionRegisters = std::move(GbxActionRegisters);
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxActionRegisters = std::move(Parms.GbxActionRegisters);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetNameGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>       GbxActionRegisters                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             RegisterKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicates                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetNameGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, class FName Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "SetNameGbxActionRegister");

	Params::GbxActionBlueprintLibrary_SetNameGbxActionRegister Parms{};

	Parms.GbxActionRegisters = std::move(GbxActionRegisters);
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxActionRegisters = std::move(Parms.GbxActionRegisters);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.SetObjectGbxActionRegister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxActionRegister>       GbxActionRegisters                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             RegisterKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicates                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActionRegister>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActionRegister> UGbxActionBlueprintLibrary::SetObjectGbxActionRegister(TArray<struct FGbxActionRegister>& GbxActionRegisters, class FName RegisterKey, class UObject* Value, bool bReplicates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "SetObjectGbxActionRegister");

	Params::GbxActionBlueprintLibrary_SetObjectGbxActionRegister Parms{};

	Parms.GbxActionRegisters = std::move(GbxActionRegisters);
	Parms.RegisterKey = RegisterKey;
	Parms.Value = Value;
	Parms.bReplicates = bReplicates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxActionRegisters = std::move(Parms.GbxActionRegisters);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopActionClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction>           ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopActionClass(TSubclassOf<class UGbxAction> ActionClass, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "StopActionClass");

	Params::GbxActionBlueprintLibrary_StopActionClass Parms{};

	Parms.ActionClass = ActionClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopActions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopActions(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "StopActions");

	Params::GbxActionBlueprintLibrary_StopActions Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopActionSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionSlotName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopActionSlot(const class FName ActionSlotName, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "StopActionSlot");

	Params::GbxActionBlueprintLibrary_StopActionSlot Parms{};

	Parms.ActionSlotName = ActionSlotName;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxActionBlueprintLibrary.StopLoopingActionClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAction_Loop>      ActionClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActionBlueprintLibrary::StopLoopingActionClass(TSubclassOf<class UGbxAction_Loop> ActionClass, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActionBlueprintLibrary", "StopLoopingActionClass");

	Params::GbxActionBlueprintLibrary_StopLoopingActionClass Parms{};

	Parms.ActionClass = ActionClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAnimBlueprintProfile.AnimBlueprintImportFunction
// (Final, Native, Private)
// Parameters:
// EAnimBPProfileImport                    ImportType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAnimBlueprintProfile::AnimBlueprintImportFunction(EAnimBPProfileImport ImportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAnimBlueprintProfile", "AnimBlueprintImportFunction");

	Params::GbxAnimBlueprintProfile_AnimBlueprintImportFunction Parms{};

	Parms.ImportType = ImportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAnimBlueprintProfile.RebuildBoneLists
// (Final, Native, Private)

void UGbxAnimBlueprintProfile::RebuildBoneLists()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAnimBlueprintProfile", "RebuildBoneLists");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAttributeData.CanAddAndRemoveModifiers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanAddAndRemoveModifiers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAttributeData", "CanAddAndRemoveModifiers");

	Params::GbxAttributeData_CanAddAndRemoveModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeData.CanAddModifiers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanAddModifiers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAttributeData", "CanAddModifiers");

	Params::GbxAttributeData_CanAddModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeData.CanBindToOnChangedEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanBindToOnChangedEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAttributeData", "CanBindToOnChangedEvent");

	Params::GbxAttributeData_CanBindToOnChangedEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeData.CanSetBaseValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeData::CanSetBaseValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAttributeData", "CanSetBaseValue");

	Params::GbxAttributeData_CanSetBaseValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingDebugServerRpcComponent.SetInspectedActor
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingDebugServerRpcComponent::SetInspectedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingDebugServerRpcComponent", "SetInspectedActor");

	Params::TargetingDebugServerRpcComponent_SetInspectedActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.AddModifierToGbxAttribute
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxAttributeModifierType               ModifierType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ModifierValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxAttributeModifierActionExecOutput   ModifierActionResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeModifierHandle UGbxAttributeFunctionLibrary::AddModifierToGbxAttribute(class UGbxAttributeData* Attribute, class UObject* ContextSource, EGbxAttributeModifierType ModifierType, float ModifierValue, EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "AddModifierToGbxAttribute");

	Params::GbxAttributeFunctionLibrary_AddModifierToGbxAttribute Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.ModifierType = ModifierType;
	Parms.ModifierValue = ModifierValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyAttributeBaseValueData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAttributeBaseValueData          BaseValueData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          AttributeToSetContextSource                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ValueContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxAttributeModifierActionExecOutput   ModifierActionResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::ApplyAttributeBaseValueData(const struct FAttributeBaseValueData& BaseValueData, class UObject* AttributeToSetContextSource, class UObject* ValueContext, EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "ApplyAttributeBaseValueData");

	Params::GbxAttributeFunctionLibrary_ApplyAttributeBaseValueData Parms{};

	Parms.BaseValueData = std::move(BaseValueData);
	Parms.AttributeToSetContextSource = AttributeToSetContextSource;
	Parms.ValueContext = ValueContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyAttributeEffect
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAttributeEffectData             Effect                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          ModifierValueContext                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AttributeToModifyContextSource                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxAttributeModifierActionExecOutput   ModifierActionResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeModifierHandle UGbxAttributeFunctionLibrary::ApplyAttributeEffect(const struct FAttributeEffectData& Effect, class UObject* ModifierValueContext, class UObject* AttributeToModifyContextSource, EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "ApplyAttributeEffect");

	Params::GbxAttributeFunctionLibrary_ApplyAttributeEffect Parms{};

	Parms.Effect = std::move(Effect);
	Parms.ModifierValueContext = ModifierValueContext;
	Parms.AttributeToModifyContextSource = AttributeToModifyContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyMultipleAttributeBaseValueData
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAttributeBaseValueData>  BaseValueData                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          AttributeToSetContextSource                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ValueContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::ApplyMultipleAttributeBaseValueData(const TArray<struct FAttributeBaseValueData>& BaseValueData, class UObject* AttributeToSetContextSource, class UObject* ValueContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "ApplyMultipleAttributeBaseValueData");

	Params::GbxAttributeFunctionLibrary_ApplyMultipleAttributeBaseValueData Parms{};

	Parms.BaseValueData = std::move(BaseValueData);
	Parms.AttributeToSetContextSource = AttributeToSetContextSource;
	Parms.ValueContext = ValueContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.ApplyMultipleAttributeEffects
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAttributeEffectData>     Effects                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ModifierValueContext                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AttributeToModifyContextSource                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxAttributeModifierHandle>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxAttributeModifierHandle> UGbxAttributeFunctionLibrary::ApplyMultipleAttributeEffects(const TArray<struct FAttributeEffectData>& Effects, class UObject* ModifierValueContext, class UObject* AttributeToModifyContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "ApplyMultipleAttributeEffects");

	Params::GbxAttributeFunctionLibrary_ApplyMultipleAttributeEffects Parms{};

	Parms.Effects = std::move(Effects);
	Parms.ModifierValueContext = ModifierValueContext;
	Parms.AttributeToModifyContextSource = AttributeToModifyContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BindEventToOnAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGbxAttributeDelegateBindingHandleReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeDelegateBindingHandle UGbxAttributeFunctionLibrary::BindEventToOnAttributeChanged(class UGbxAttributeData* Attribute, class UObject* ContextSource, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "BindEventToOnAttributeChanged");

	Params::GbxAttributeFunctionLibrary_BindEventToOnAttributeChanged Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BindEventToOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat               Attribute                                              (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BindEventToOnFloatAttributeChanged(struct FGbxAttributeFloat& Attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "BindEventToOnFloatAttributeChanged");

	Params::GbxAttributeFunctionLibrary_BindEventToOnFloatAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Attribute = std::move(Parms.Attribute);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BindEventToOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger             Attribute                                              (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BindEventToOnIntegerAttributeChanged(struct FGbxAttributeInteger& Attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "BindEventToOnIntegerAttributeChanged");

	Params::GbxAttributeFunctionLibrary_BindEventToOnIntegerAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Attribute = std::move(Parms.Attribute);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BreakGbxAttributeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat               Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BaseValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BreakGbxAttributeFloat(const struct FGbxAttributeFloat& Attribute, float* Value, float* BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "BreakGbxAttributeFloat");

	Params::GbxAttributeFunctionLibrary_BreakGbxAttributeFloat Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (BaseValue != nullptr)
		*BaseValue = Parms.BaseValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.BreakGbxAttributeInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger             Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BaseValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::BreakGbxAttributeInteger(const struct FGbxAttributeInteger& Attribute, int32* Value, int32* BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "BreakGbxAttributeInteger");

	Params::GbxAttributeFunctionLibrary_BreakGbxAttributeInteger Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (BaseValue != nullptr)
		*BaseValue = Parms.BaseValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_AttributeInitializationDataToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAttributeInitializationData     InitData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_AttributeInitializationDataToString(const struct FAttributeInitializationData& InitData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "Conv_AttributeInitializationDataToString");

	Params::GbxAttributeFunctionLibrary_Conv_AttributeInitializationDataToString Parms{};

	Parms.InitData = std::move(InitData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeFloatToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat               Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::Conv_GbxAttributeFloatToFloat(const struct FGbxAttributeFloat& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeFloatToFloat");

	Params::GbxAttributeFunctionLibrary_Conv_GbxAttributeFloatToFloat Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeFloatToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat               Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_GbxAttributeFloatToString(const struct FGbxAttributeFloat& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeFloatToString");

	Params::GbxAttributeFunctionLibrary_Conv_GbxAttributeFloatToString Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeIntegerToInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger             Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeFunctionLibrary::Conv_GbxAttributeIntegerToInteger(const struct FGbxAttributeInteger& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeIntegerToInteger");

	Params::GbxAttributeFunctionLibrary_Conv_GbxAttributeIntegerToInteger Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeIntegerToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger             Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_GbxAttributeIntegerToString(const struct FGbxAttributeInteger& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeIntegerToString");

	Params::GbxAttributeFunctionLibrary_Conv_GbxAttributeIntegerToString Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.Conv_GbxAttributeModifierHandleToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeModifierHandle      Attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeFunctionLibrary::Conv_GbxAttributeModifierHandleToString(const struct FGbxAttributeModifierHandle& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "Conv_GbxAttributeModifierHandleToString");

	Params::GbxAttributeFunctionLibrary_Conv_GbxAttributeModifierHandleToString Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat               A                                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeFloat               B                                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeFloat(const struct FGbxAttributeFloat& A, const struct FGbxAttributeFloat& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeFloat");

	Params::GbxAttributeFunctionLibrary_EqualEqual_GbxAttributeFloat Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeFloat               A                                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeFloatValue(const struct FGbxAttributeFloat& A, float B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeFloatValue");

	Params::GbxAttributeFunctionLibrary_EqualEqual_GbxAttributeFloatValue Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger             A                                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeInteger             B                                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeInteger(const struct FGbxAttributeInteger& A, const struct FGbxAttributeInteger& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeInteger");

	Params::GbxAttributeFunctionLibrary_EqualEqual_GbxAttributeInteger Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EqualEqual_GbxAttributeIntegerValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxAttributeInteger             A                                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::EqualEqual_GbxAttributeIntegerValue(const struct FGbxAttributeInteger& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "EqualEqual_GbxAttributeIntegerValue");

	Params::GbxAttributeFunctionLibrary_EqualEqual_GbxAttributeIntegerValue Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EvaluateAttributeInitializationData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAttributeInitializationData     InitializationData                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::EvaluateAttributeInitializationData(const struct FAttributeInitializationData& InitializationData, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "EvaluateAttributeInitializationData");

	Params::GbxAttributeFunctionLibrary_EvaluateAttributeInitializationData Parms{};

	Parms.InitializationData = std::move(InitializationData);
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.EvaluateAttributeInitializer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UAttributeInitializer>Initializer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::EvaluateAttributeInitializer(TSubclassOf<class UAttributeInitializer> Initializer, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "EvaluateAttributeInitializer");

	Params::GbxAttributeFunctionLibrary_EvaluateAttributeInitializer Parms{};

	Parms.Initializer = Initializer;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueFromAttributeDefinedRow
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDataTableRowHandle              RowHandle                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::GetValueFromAttributeDefinedRow(const struct FDataTableRowHandle& RowHandle, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "GetValueFromAttributeDefinedRow");

	Params::GbxAttributeFunctionLibrary_GetValueFromAttributeDefinedRow Parms{};

	Parms.RowHandle = std::move(RowHandle);
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueOfAttribute
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeFunctionLibrary::GetValueOfAttribute(const class UGbxAttributeData* Attribute, class UObject* ContextSource, float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "GetValueOfAttribute");

	Params::GbxAttributeFunctionLibrary_GetValueOfAttribute Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueOfAttributeAsBoolean
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::GetValueOfAttributeAsBoolean(const class UGbxAttributeData* Attribute, class UObject* ContextSource, bool DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "GetValueOfAttributeAsBoolean");

	Params::GbxAttributeFunctionLibrary_GetValueOfAttributeAsBoolean Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.GetValueOfAttributeAsInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeFunctionLibrary::GetValueOfAttributeAsInteger(const class UGbxAttributeData* Attribute, class UObject* ContextSource, int32 DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "GetValueOfAttributeAsInteger");

	Params::GbxAttributeFunctionLibrary_GetValueOfAttributeAsInteger Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.MakeGbxAttributeFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   BaseValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeFloat               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxAttributeFloat UGbxAttributeFunctionLibrary::MakeGbxAttributeFloat(float BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "MakeGbxAttributeFloat");

	Params::GbxAttributeFunctionLibrary_MakeGbxAttributeFloat Parms{};

	Parms.BaseValue = BaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.MakeGbxAttributeInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   BaseValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeInteger             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxAttributeInteger UGbxAttributeFunctionLibrary::MakeGbxAttributeInteger(int32 BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "MakeGbxAttributeInteger");

	Params::GbxAttributeFunctionLibrary_MakeGbxAttributeInteger Parms{};

	Parms.BaseValue = BaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RefreshBindingToOnAttributeChangedEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeDelegateBindingHandleBindingHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeDelegateBindingHandleReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeDelegateBindingHandle UGbxAttributeFunctionLibrary::RefreshBindingToOnAttributeChangedEvent(const struct FGbxAttributeDelegateBindingHandle& BindingHandle, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "RefreshBindingToOnAttributeChangedEvent");

	Params::GbxAttributeFunctionLibrary_RefreshBindingToOnAttributeChangedEvent Parms{};

	Parms.BindingHandle = std::move(BindingHandle);
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RemoveAttributeModifier
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeModifierHandle      ModifierHandle                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeFunctionLibrary::RemoveAttributeModifier(struct FGbxAttributeModifierHandle& ModifierHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "RemoveAttributeModifier");

	Params::GbxAttributeFunctionLibrary_RemoveAttributeModifier Parms{};

	Parms.ModifierHandle = std::move(ModifierHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandle = std::move(Parms.ModifierHandle);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RemoveModifierFromGbxAttribute
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGbxAttributeData*                Attribute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle      ModifierHandle                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGbxAttributeModifierActionExecOutput   ModifierActionResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::RemoveModifierFromGbxAttribute(class UGbxAttributeData* Attribute, class UObject* ContextSource, struct FGbxAttributeModifierHandle& ModifierHandle, EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "RemoveModifierFromGbxAttribute");

	Params::GbxAttributeFunctionLibrary_RemoveModifierFromGbxAttribute Parms{};

	Parms.Attribute = Attribute;
	Parms.ContextSource = ContextSource;
	Parms.ModifierHandle = std::move(ModifierHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandle = std::move(Parms.ModifierHandle);

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.RemoveMultipleAttributeModifiers
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxAttributeModifierHandle>ModifierHandles                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::RemoveMultipleAttributeModifiers(TArray<struct FGbxAttributeModifierHandle>& ModifierHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "RemoveMultipleAttributeModifiers");

	Params::GbxAttributeFunctionLibrary_RemoveMultipleAttributeModifiers Parms{};

	Parms.ModifierHandles = std::move(ModifierHandles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandles = std::move(Parms.ModifierHandles);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindAllEventsFromOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat               Attribute                                              (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindAllEventsFromOnFloatAttributeChanged(struct FGbxAttributeFloat& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "UnbindAllEventsFromOnFloatAttributeChanged");

	Params::GbxAttributeFunctionLibrary_UnbindAllEventsFromOnFloatAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Attribute = std::move(Parms.Attribute);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindAllEventsFromOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger             Attribute                                              (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindAllEventsFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "UnbindAllEventsFromOnIntegerAttributeChanged");

	Params::GbxAttributeFunctionLibrary_UnbindAllEventsFromOnIntegerAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Attribute = std::move(Parms.Attribute);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindEventFromOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat               Attribute                                              (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindEventFromOnFloatAttributeChanged(struct FGbxAttributeFloat& Attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "UnbindEventFromOnFloatAttributeChanged");

	Params::GbxAttributeFunctionLibrary_UnbindEventFromOnFloatAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Attribute = std::move(Parms.Attribute);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindEventFromOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger             Attribute                                              (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindEventFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& Attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "UnbindEventFromOnIntegerAttributeChanged");

	Params::GbxAttributeFunctionLibrary_UnbindEventFromOnIntegerAttributeChanged Parms{};

	Parms.Attribute = std::move(Attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Attribute = std::move(Parms.Attribute);
}


// Function GbxGameSystemCore.GbxAttributeFunctionLibrary.UnbindFromOnAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeDelegateBindingHandleBindingHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeFunctionLibrary::UnbindFromOnAttributeChanged(const struct FGbxAttributeDelegateBindingHandle& BindingHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeFunctionLibrary", "UnbindFromOnAttributeChanged");

	Params::GbxAttributeFunctionLibrary_UnbindFromOnAttributeChanged Parms{};

	Parms.BindingHandle = std::move(BindingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxAttributesComponent.IsAttributeSetClassUnrelatedToExistingSet
// (Final, Native, Public, Const)
// Parameters:
// class UClass*                           AttributeSetClass                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributesComponent::IsAttributeSetClassUnrelatedToExistingSet(const class UClass* AttributeSetClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAttributesComponent", "IsAttributeSetClassUnrelatedToExistingSet");

	Params::GbxAttributesComponent_IsAttributeSetClassUnrelatedToExistingSet Parms{};

	Parms.AttributeSetClass = AttributeSetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StatusEffect.OnBeginEffect
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatusEffect::OnBeginEffect(class AActor* Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffect", "OnBeginEffect");

	Params::StatusEffect_OnBeginEffect Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.StatusEffect.OnEndEffect
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatusEffect::OnEndEffect(class AActor* Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffect", "OnEndEffect");

	Params::StatusEffect_OnEndEffect Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.ClearValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::ClearValue(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "ClearValue");

	Params::GbxBlackboardKeySelectorExt_ClearValue Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetPropertyDescription
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// struct FGbxBlackboardKeySelector        BBKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UProperty*                        Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardKeySelectorExt::GetPropertyDescription(const struct FGbxBlackboardKeySelector& BBKey, class UProperty* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetPropertyDescription");

	Params::GbxBlackboardKeySelectorExt_GetPropertyDescription Parms{};

	Parms.BBKey = std::move(BBKey);
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxBlackboardKeySelectorExt::GetValueAsActor(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsActor");

	Params::GbxBlackboardKeySelectorExt_GetValueAsActor Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxBlackboardKeySelectorExt::GetValueAsBool(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsBool");

	Params::GbxBlackboardKeySelectorExt_GetValueAsBool Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UGbxBlackboardKeySelectorExt::GetValueAsClass(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsClass");

	Params::GbxBlackboardKeySelectorExt_GetValueAsClass Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGbxBlackboardKeySelectorExt::GetValueAsEnum(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsEnum");

	Params::GbxBlackboardKeySelectorExt_GetValueAsEnum Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxBlackboardKeySelectorExt::GetValueAsFloat(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsFloat");

	Params::GbxBlackboardKeySelectorExt_GetValueAsFloat Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxBlackboardKeySelectorExt::GetValueAsInt(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsInt");

	Params::GbxBlackboardKeySelectorExt_GetValueAsInt Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxBlackboardKeySelectorExt::GetValueAsName(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsName");

	Params::GbxBlackboardKeySelectorExt_GetValueAsName Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxBlackboardKeySelectorExt::GetValueAsObject(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsObject");

	Params::GbxBlackboardKeySelectorExt_GetValueAsObject Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxBlackboardKeySelectorExt::GetValueAsRotator(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsRotator");

	Params::GbxBlackboardKeySelectorExt_GetValueAsRotator Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardKeySelectorExt::GetValueAsString(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsString");

	Params::GbxBlackboardKeySelectorExt_GetValueAsString Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsTargetActorInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FTargetActorInfo UGbxBlackboardKeySelectorExt::GetValueAsTargetActorInfo(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsTargetActorInfo");

	Params::GbxBlackboardKeySelectorExt_GetValueAsTargetActorInfo Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.GetValueAsVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxBlackboardKeySelectorExt::GetValueAsVector(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "GetValueAsVector");

	Params::GbxBlackboardKeySelectorExt_GetValueAsVector Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsBool(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsBool");

	Params::GbxBlackboardKeySelectorExt_SetValueAsBool Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsClass(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, class UClass* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsClass");

	Params::GbxBlackboardKeySelectorExt_SetValueAsClass Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsEnum(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsEnum");

	Params::GbxBlackboardKeySelectorExt_SetValueAsEnum Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsFlag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsFlag(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const bool Value, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsFlag");

	Params::GbxBlackboardKeySelectorExt_SetValueAsFlag Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsFloat(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsFloat");

	Params::GbxBlackboardKeySelectorExt_SetValueAsFloat Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsInt(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsInt");

	Params::GbxBlackboardKeySelectorExt_SetValueAsInt Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsName(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, class FName Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsName");

	Params::GbxBlackboardKeySelectorExt_SetValueAsName Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsObject(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, class UObject* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsObject");

	Params::GbxBlackboardKeySelectorExt_SetValueAsObject Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Value                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsRotator(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsRotator");

	Params::GbxBlackboardKeySelectorExt_SetValueAsRotator Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsString(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsString");

	Params::GbxBlackboardKeySelectorExt_SetValueAsString Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsTargetActorInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsTargetActorInfo(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const struct FTargetActorInfo& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsTargetActorInfo");

	Params::GbxBlackboardKeySelectorExt_SetValueAsTargetActorInfo Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxBlackboardKeySelectorExt.SetValueAsVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGbxBlackboardKeySelector        Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlackboardComponent*             BlackboardComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardKeySelectorExt::SetValueAsVector(const struct FGbxBlackboardKeySelector& Key, class UBlackboardComponent* BlackboardComponent, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardKeySelectorExt", "SetValueAsVector");

	Params::GbxBlackboardKeySelectorExt_SetValueAsVector Parms{};

	Parms.Key = std::move(Key);
	Parms.BlackboardComponent = BlackboardComponent;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.ChangeSwitch
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SwitchName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StateName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::ChangeSwitch(class UObject* Context, class FName SwitchName, class FName StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SceneBodySwitchFunctionLibrary", "ChangeSwitch");

	Params::SceneBodySwitchFunctionLibrary_ChangeSwitch Parms{};

	Parms.Context = Context;
	Parms.SwitchName = SwitchName;
	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.ChangeSwitchExternal
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SwitchName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StateName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::ChangeSwitchExternal(class AActor* Actor, class FName SwitchName, class FName StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SceneBodySwitchFunctionLibrary", "ChangeSwitchExternal");

	Params::SceneBodySwitchFunctionLibrary_ChangeSwitchExternal Parms{};

	Parms.Actor = Actor;
	Parms.SwitchName = SwitchName;
	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.EnumerateValidSwitchNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Names                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::EnumerateValidSwitchNames(TArray<class FName>* Names) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SceneBodySwitchFunctionLibrary", "EnumerateValidSwitchNames");

	Params::SceneBodySwitchFunctionLibrary_EnumerateValidSwitchNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);
}


// Function GbxGameSystemCore.SceneBodySwitchFunctionLibrary.EnumerateValidSwitchStateNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// class FName                             SwitchName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     Names                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USceneBodySwitchFunctionLibrary::EnumerateValidSwitchStateNames(class FName SwitchName, TArray<class FName>* Names) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SceneBodySwitchFunctionLibrary", "EnumerateValidSwitchStateNames");

	Params::SceneBodySwitchFunctionLibrary_EnumerateValidSwitchStateNames Parms{};

	Parms.SwitchName = SwitchName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);
}


// Function GbxGameSystemCore.GbxCondition_Blueprint.EvaluateCondition
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCondition_Blueprint::EvaluateCondition(class UObject* Context, class UObject* OptionalContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCondition_Blueprint", "EvaluateCondition");

	Params::GbxCondition_Blueprint_EvaluateCondition Parms{};

	Parms.Context = Context;
	Parms.OptionalContext = OptionalContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.UserStatesInterface.BlueprintStateHandler
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bFromLoad                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IUserStatesInterface::BlueprintStateHandler(bool bFromLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserStatesInterface", "BlueprintStateHandler");

	Params::UserStatesInterface_BlueprintStateHandler Parms{};

	Parms.bFromLoad = bFromLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxGameSystemCore.UserStatesInterface.HasEnableConditionsSetForAnyUserState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IUserStatesInterface::HasEnableConditionsSetForAnyUserState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserStatesInterface", "HasEnableConditionsSetForAnyUserState");

	Params::UserStatesInterface_HasEnableConditionsSetForAnyUserState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCondition_List.GetRequiredInterface
// (Native, Public, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UGbxCondition_List::GetRequiredInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCondition_List", "GetRequiredInterface");

	Params::GbxCondition_List_GetRequiredInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxCondition_List.RequiresNativeClass
// (Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCondition_List::RequiresNativeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCondition_List", "RequiresNativeClass");

	Params::GbxCondition_List_RequiresNativeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.FindActorTargetingComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTargetingComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* UTargetActorInfoLibrary::FindActorTargetingComponent(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "FindActorTargetingComponent");

	Params::TargetActorInfoLibrary_FindActorTargetingComponent Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetBestAttackLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          OutTargetVelocity                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetBestAttackLocation(const struct FTargetActorInfo& Info, struct FVector* OutTargetVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "GetBestAttackLocation");

	Params::TargetActorInfoLibrary_GetBestAttackLocation Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargetVelocity != nullptr)
		*OutTargetVelocity = std::move(Parms.OutTargetVelocity);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetBestStimulus
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FAIStimulus                      Stimulus                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::GetBestStimulus(const struct FTargetActorInfo& Info, struct FAIStimulus* Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "GetBestStimulus");

	Params::TargetActorInfoLibrary_GetBestStimulus Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Stimulus != nullptr)
		*Stimulus = std::move(Parms.Stimulus);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetBestStimulusLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Age                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetBestStimulusLocation(const struct FTargetActorInfo& Info, float* Age)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "GetBestStimulusLocation");

	Params::TargetActorInfoLibrary_GetBestStimulusLocation Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Age != nullptr)
		*Age = Parms.Age;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetReceiverLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>             Sense                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetReceiverLocation(const struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "GetReceiverLocation");

	Params::TargetActorInfoLibrary_GetReceiverLocation Parms{};

	Parms.Info = std::move(Info);
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetStimulusForSense
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>             Sense                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAIStimulus                      Stimulus                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::GetStimulusForSense(const struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense, struct FAIStimulus* Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "GetStimulusForSense");

	Params::TargetActorInfoLibrary_GetStimulusForSense Parms{};

	Parms.Info = std::move(Info);
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Stimulus != nullptr)
		*Stimulus = std::move(Parms.Stimulus);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.GetStimulusLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>             Sense                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetActorInfoLibrary::GetStimulusLocation(const struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "GetStimulusLocation");

	Params::TargetActorInfoLibrary_GetStimulusLocation Parms{};

	Parms.Info = std::move(Info);
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.HasAnyKnownStimuli
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::HasAnyKnownStimuli(const struct FTargetActorInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "HasAnyKnownStimuli");

	Params::TargetActorInfoLibrary_HasAnyKnownStimuli Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.HasStimulusForSense
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>             Sense                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::HasStimulusForSense(const struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "HasStimulusForSense");

	Params::TargetActorInfoLibrary_HasStimulusForSense Parms{};

	Parms.Info = std::move(Info);
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.IsDirectlySensed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::IsDirectlySensed(const struct FTargetActorInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "IsDirectlySensed");

	Params::TargetActorInfoLibrary_IsDirectlySensed Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.IsExistingTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::IsExistingTarget(const struct FTargetActorInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "IsExistingTarget");

	Params::TargetActorInfoLibrary_IsExistingTarget Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetActorInfoLibrary.IsSenseActive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTargetActorInfo                 Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UAISense>             Sense                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetActorInfoLibrary::IsSenseActive(const struct FTargetActorInfo& Info, TSubclassOf<class UAISense> Sense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetActorInfoLibrary", "IsSenseActive");

	Params::TargetActorInfoLibrary_IsSenseActive Parms{};

	Parms.Info = std::move(Info);
	Parms.Sense = Sense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxDataTableFunctionLibrary.Conv_DataTableValueHandleToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDataTableValueHandle            ValueHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxDataTableFunctionLibrary::Conv_DataTableValueHandleToString(const struct FDataTableValueHandle& ValueHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxDataTableFunctionLibrary", "Conv_DataTableValueHandleToString");

	Params::GbxDataTableFunctionLibrary_Conv_DataTableValueHandleToString Parms{};

	Parms.ValueHandle = std::move(ValueHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxDataTableFunctionLibrary.GetDataTableValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDataTable*                       Table                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RowName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptStruct*                    ValueInStructType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxDataTableFunctionLibrary::GetDataTableValue(class UDataTable* Table, class FName RowName, class FName ValueName, class UScriptStruct* ValueInStructType, int32* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxDataTableFunctionLibrary", "GetDataTableValue");

	Params::GbxDataTableFunctionLibrary_GetDataTableValue Parms{};

	Parms.Table = Table;
	Parms.RowName = RowName;
	Parms.ValueName = ValueName;
	Parms.ValueInStructType = ValueInStructType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxDataTableFunctionLibrary.GetDataTableValueFromHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDataTableValueHandle            ValueHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxDataTableFunctionLibrary::GetDataTableValueFromHandle(const struct FDataTableValueHandle& ValueHandle, class UObject* ContextSource, float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxDataTableFunctionLibrary", "GetDataTableValueFromHandle");

	Params::GbxDataTableFunctionLibrary_GetDataTableValueFromHandle Parms{};

	Parms.ValueHandle = std::move(ValueHandle);
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxEqsRenderingComponent.GetAvailableEnvQueryParamRefNames
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FString>                   Names                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxEqsRenderingComponent::GetAvailableEnvQueryParamRefNames(TArray<class FString>* Names) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEqsRenderingComponent", "GetAvailableEnvQueryParamRefNames");

	Params::GbxEqsRenderingComponent_GetAvailableEnvQueryParamRefNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Names != nullptr)
		*Names = std::move(Parms.Names);
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataFalseFor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataFalseFor(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagDataFalseFor");

	Params::GbxFlagFunctionLibrary_FlagDataFalseFor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataFalseWithin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataFalseWithin(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagDataFalseWithin");

	Params::GbxFlagFunctionLibrary_FlagDataFalseWithin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataTrueFor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataTrueFor(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagDataTrueFor");

	Params::GbxFlagFunctionLibrary_FlagDataTrueFor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagDataTrueWithin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagDataTrueWithin(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagDataTrueWithin");

	Params::GbxFlagFunctionLibrary_FlagDataTrueWithin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagFalseFor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagFalseFor(class UObject* WorldContextObject, const struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagFalseFor");

	Params::GbxFlagFunctionLibrary_FlagFalseFor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagFalseWithin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagFalseWithin(class UObject* WorldContextObject, const struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagFalseWithin");

	Params::GbxFlagFunctionLibrary_FlagFalseWithin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagTrueFor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagTrueFor(class UObject* WorldContextObject, const struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagTrueFor");

	Params::GbxFlagFunctionLibrary_FlagTrueFor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.FlagTrueWithin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CheckTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::FlagTrueWithin(class UObject* WorldContextObject, const struct FGbxFlag& Flag, float CheckTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "FlagTrueWithin");

	Params::GbxFlagFunctionLibrary_FlagTrueWithin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);
	Parms.CheckTime = CheckTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.GetFlagDataValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::GetFlagDataValue(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "GetFlagDataValue");

	Params::GbxFlagFunctionLibrary_GetFlagDataValue Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.GetFlagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxFlagFunctionLibrary::GetFlagValue(class UObject* WorldContextObject, const struct FGbxFlag& Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "GetFlagValue");

	Params::GbxFlagFunctionLibrary_GetFlagValue Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagDataTrueTimed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagDataTrueTimed(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "SetFlagDataTrueTimed");

	Params::GbxFlagFunctionLibrary_SetFlagDataTrueTimed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagDataValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFlagData*                     FlagData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagDataValue(class UObject* WorldContextObject, const class UGbxFlagData* FlagData, class UObject* ContextSource, bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "SetFlagDataValue");

	Params::GbxFlagFunctionLibrary_SetFlagDataValue Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FlagData = FlagData;
	Parms.ContextSource = ContextSource;
	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagTrueTimed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagTrueTimed(class UObject* WorldContextObject, struct FGbxFlag& Flag, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "SetFlagTrueTimed");

	Params::GbxFlagFunctionLibrary_SetFlagTrueTimed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Flag = std::move(Parms.Flag);
}


// Function GbxGameSystemCore.GbxFlagFunctionLibrary.SetFlagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFlag                         Flag                                                   (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxFlagFunctionLibrary::SetFlagValue(class UObject* WorldContextObject, struct FGbxFlag& Flag, bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxFlagFunctionLibrary", "SetFlagValue");

	Params::GbxFlagFunctionLibrary_SetFlagValue Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Flag = std::move(Flag);
	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Flag = std::move(Parms.Flag);
}


// Function GbxGameSystemCore.GbxGameplayStatics.AlignTransformToSurface
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          SurfaceNormal                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGbxGameplayStatics::AlignTransformToSurface(const struct FTransform& Transform, const struct FVector& SurfaceNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "AlignTransformToSurface");

	Params::GbxGameplayStatics_AlignTransformToSurface Parms{};

	Parms.Transform = std::move(Transform);
	Parms.SurfaceNormal = std::move(SurfaceNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameplayStatics.GetAssociatedPrimaryCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxCharacter*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGbxCharacter* UGbxGameplayStatics::GetAssociatedPrimaryCharacter(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "GetAssociatedPrimaryCharacter");

	Params::GbxGameplayStatics_GetAssociatedPrimaryCharacter Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameplayStatics.GetPrimaryPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* UGbxGameplayStatics::GetPrimaryPlayerController(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "GetPrimaryPlayerController");

	Params::GbxGameplayStatics_GetPrimaryPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameplayStatics.ProjectFromQueryToSimulation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGbxSkeletalMeshComponent*        Component                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BodyName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InOutHitPoint                                          (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InOutHitNormal                                         (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::ProjectFromQueryToSimulation(const class UGbxSkeletalMeshComponent* Component, const class FName& BodyName, struct FVector& InOutHitPoint, struct FVector& InOutHitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "ProjectFromQueryToSimulation");

	Params::GbxGameplayStatics_ProjectFromQueryToSimulation Parms{};

	Parms.Component = Component;
	Parms.BodyName = BodyName;
	Parms.InOutHitPoint = std::move(InOutHitPoint);
	Parms.InOutHitNormal = std::move(InOutHitNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutHitPoint = std::move(Parms.InOutHitPoint);
	InOutHitNormal = std::move(Parms.InOutHitNormal);
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetComponentTeamCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamCollisionChannel                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOn                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetComponentTeamCollisionChannel(class USceneComponent* Component, ETeamCollisionChannel Channel, bool bOn, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetComponentTeamCollisionChannel");

	Params::GbxGameplayStatics_SetComponentTeamCollisionChannel Parms{};

	Parms.Component = Component;
	Parms.Channel = Channel;
	Parms.bOn = bOn;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetComponentTeamCollisionResponseToChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamCollisionChannel                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnore                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetComponentTeamCollisionResponseToChannel(class USceneComponent* Component, ETeamCollisionChannel Channel, bool bIgnore, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetComponentTeamCollisionResponseToChannel");

	Params::GbxGameplayStatics_SetComponentTeamCollisionResponseToChannel Parms{};

	Parms.Component = Component;
	Parms.Channel = Channel;
	Parms.bIgnore = bIgnore;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetComponentTeamCollisionResponseWith
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TeamActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnore                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetComponentTeamCollisionResponseWith(class USceneComponent* Component, class AActor* TeamActor, bool bIgnore, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetComponentTeamCollisionResponseWith");

	Params::GbxGameplayStatics_SetComponentTeamCollisionResponseWith Parms{};

	Parms.Component = Component;
	Parms.TeamActor = TeamActor;
	Parms.bIgnore = bIgnore;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetPlayerMaster
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AIActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PlayerMaster                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameplayStatics::SetPlayerMaster(class AActor* AIActor, class AActor* PlayerMaster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetPlayerMaster");

	Params::GbxGameplayStatics_SetPlayerMaster Parms{};

	Parms.AIActor = AIActor;
	Parms.PlayerMaster = PlayerMaster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamCollisionChannel                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOn                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionChannel(class AActor* Actor, ETeamCollisionChannel Channel, bool bOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetTeamCollisionChannel");

	Params::GbxGameplayStatics_SetTeamCollisionChannel Parms{};

	Parms.Actor = Actor;
	Parms.Channel = Channel;
	Parms.bOn = bOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionChannelFrom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TeamActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOn                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionChannelFrom(class AActor* Actor, class AActor* TeamActor, bool bOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetTeamCollisionChannelFrom");

	Params::GbxGameplayStatics_SetTeamCollisionChannelFrom Parms{};

	Parms.Actor = Actor;
	Parms.TeamActor = TeamActor;
	Parms.bOn = bOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionResponseToChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamCollisionChannel                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnore                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionResponseToChannel(class AActor* Actor, ETeamCollisionChannel Channel, bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetTeamCollisionResponseToChannel");

	Params::GbxGameplayStatics_SetTeamCollisionResponseToChannel Parms{};

	Parms.Actor = Actor;
	Parms.Channel = Channel;
	Parms.bIgnore = bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameplayStatics.SetTeamCollisionResponseWith
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TeamActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnore                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameplayStatics::SetTeamCollisionResponseWith(class AActor* Actor, class AActor* TeamActor, bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameplayStatics", "SetTeamCollisionResponseWith");

	Params::GbxGameplayStatics_SetTeamCollisionResponseWith Parms{};

	Parms.Actor = Actor;
	Parms.TeamActor = TeamActor;
	Parms.bIgnore = bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.DecrementStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::DecrementStat(class AActor* ContextActor, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "DecrementStat");

	Params::GbxGameStatsBlueprintLibrary_DecrementStat Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.DecrementStatForParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::DecrementStatForParty(class UObject* WorldContextObject, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "DecrementStatForParty");

	Params::GbxGameStatsBlueprintLibrary_DecrementStatForParty Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.GetStatValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxGameStatsBlueprintLibrary::GetStatValue(class AActor* ContextActor, class UGameStatData* StatData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "GetStatValue");

	Params::GbxGameStatsBlueprintLibrary_GetStatValue Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.IncrementStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::IncrementStat(class AActor* ContextActor, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "IncrementStat");

	Params::GbxGameStatsBlueprintLibrary_IncrementStat Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.IncrementStatForParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::IncrementStatForParty(class UObject* WorldContextObject, class UGameStatData* StatData, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "IncrementStatForParty");

	Params::GbxGameStatsBlueprintLibrary_IncrementStatForParty Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StatData = StatData;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.UpdateStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::UpdateStat(class AActor* ContextActor, class UGameStatData* StatData, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "UpdateStat");

	Params::GbxGameStatsBlueprintLibrary_UpdateStat Parms{};

	Parms.ContextActor = ContextActor;
	Parms.StatData = StatData;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameStatsBlueprintLibrary.UpdateStatForParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameStatsBlueprintLibrary::UpdateStatForParty(class UObject* WorldContextObject, class UGameStatData* StatData, int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameStatsBlueprintLibrary", "UpdateStatForParty");

	Params::GbxGameStatsBlueprintLibrary_UpdateStatForParty Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StatData = StatData;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.HideScreenParticleForActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowParticleToFinish                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bServerAuthority                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::HideScreenParticleForActor(class AActor* Actor, class UParticleSystem* Template, class FName Tag, bool bAllowParticleToFinish, bool bServerAuthority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ScreenParticleManagerComponent", "HideScreenParticleForActor");

	Params::ScreenParticleManagerComponent_HideScreenParticleForActor Parms{};

	Parms.Actor = Actor;
	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.bAllowParticleToFinish = bAllowParticleToFinish;
	Parms.bServerAuthority = bServerAuthority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ShowScreenParticleForActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHideWhenFinished                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ContentDims                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ParticleDepth                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScreenParticleScalingMode              ScalingMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyOwnerSee                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysVisible                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowMultipleInstances                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bServerAuthority                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTickEvenWhenPaused                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHideDuringInGameMenu                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ShowScreenParticleForActor(class AActor* Actor, class UParticleSystem* Template, bool bHideWhenFinished, const struct FVector2D& ContentDims, float ParticleDepth, EScreenParticleScalingMode ScalingMode, bool bOnlyOwnerSee, bool bAlwaysVisible, class FName Tag, bool bAllowMultipleInstances, bool bServerAuthority, bool bTickEvenWhenPaused, bool bHideDuringInGameMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ScreenParticleManagerComponent", "ShowScreenParticleForActor");

	Params::ScreenParticleManagerComponent_ShowScreenParticleForActor Parms{};

	Parms.Actor = Actor;
	Parms.Template = Template;
	Parms.bHideWhenFinished = bHideWhenFinished;
	Parms.ContentDims = std::move(ContentDims);
	Parms.ParticleDepth = ParticleDepth;
	Parms.ScalingMode = ScalingMode;
	Parms.bOnlyOwnerSee = bOnlyOwnerSee;
	Parms.bAlwaysVisible = bAlwaysVisible;
	Parms.Tag = Tag;
	Parms.bAllowMultipleInstances = bAllowMultipleInstances;
	Parms.bServerAuthority = bServerAuthority;
	Parms.bTickEvenWhenPaused = bTickEvenWhenPaused;
	Parms.bHideDuringInGameMenu = bHideDuringInGameMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientHideScreenParticle
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowParticleToFinish                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientHideScreenParticle(class UParticleSystem* Template, class FName Tag, bool bAllowParticleToFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientHideScreenParticle");

	Params::ScreenParticleManagerComponent_ClientHideScreenParticle Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.bAllowParticleToFinish = bAllowParticleToFinish;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleActorParameter
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleActorParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, class AActor* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleActorParameter");

	Params::ScreenParticleManagerComponent_ClientSetScreenParticleActorParameter Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleColorParameter
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Param                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleColorParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, const struct FLinearColor& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleColorParameter");

	Params::ScreenParticleManagerComponent_ClientSetScreenParticleColorParameter Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleFloatParameter
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleFloatParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleFloatParameter");

	Params::ScreenParticleManagerComponent_ClientSetScreenParticleFloatParameter Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleMaterialParameter
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleMaterialParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, class UMaterialInterface* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleMaterialParameter");

	Params::ScreenParticleManagerComponent_ClientSetScreenParticleMaterialParameter Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientSetScreenParticleVectorParameter
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Param                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientSetScreenParticleVectorParameter(class UParticleSystem* Template, class FName Tag, class FName ParameterName, const struct FVector& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientSetScreenParticleVectorParameter");

	Params::ScreenParticleManagerComponent_ClientSetScreenParticleVectorParameter Parms{};

	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.ParameterName = ParameterName;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientShowScreenParticle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHideWhenFinished                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ContentDims                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ParticleDepth                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScreenParticleScalingMode              ScalingMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyOwnerSee                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysVisible                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowMultipleInstances                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTickEvenWhenPaused                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHideDuringInGameMenu                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDepthPriorityWorld                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientShowScreenParticle(class UParticleSystem* Template, bool bHideWhenFinished, const struct FVector2D& ContentDims, float ParticleDepth, EScreenParticleScalingMode ScalingMode, bool bOnlyOwnerSee, bool bAlwaysVisible, class FName Tag, bool bAllowMultipleInstances, bool bTickEvenWhenPaused, bool bHideDuringInGameMenu, bool bDepthPriorityWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientShowScreenParticle");

	Params::ScreenParticleManagerComponent_ClientShowScreenParticle Parms{};

	Parms.Template = Template;
	Parms.bHideWhenFinished = bHideWhenFinished;
	Parms.ContentDims = std::move(ContentDims);
	Parms.ParticleDepth = ParticleDepth;
	Parms.ScalingMode = ScalingMode;
	Parms.bOnlyOwnerSee = bOnlyOwnerSee;
	Parms.bAlwaysVisible = bAlwaysVisible;
	Parms.Tag = Tag;
	Parms.bAllowMultipleInstances = bAllowMultipleInstances;
	Parms.bTickEvenWhenPaused = bTickEvenWhenPaused;
	Parms.bHideDuringInGameMenu = bHideDuringInGameMenu;
	Parms.bDepthPriorityWorld = bDepthPriorityWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientShowScreenParticleEx
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   InitFlags                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ContentDims                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ParticleDepth                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScreenParticleScalingMode              ScalingMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientShowScreenParticleEx(class UParticleSystem* Template, uint8 InitFlags, const struct FVector2D& ContentDims, float ParticleDepth, EScreenParticleScalingMode ScalingMode, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientShowScreenParticleEx");

	Params::ScreenParticleManagerComponent_ClientShowScreenParticleEx Parms{};

	Parms.Template = Template;
	Parms.InitFlags = InitFlags;
	Parms.ContentDims = std::move(ContentDims);
	Parms.ParticleDepth = ParticleDepth;
	Parms.ScalingMode = ScalingMode;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.ClientTrackParticleProperty
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class UParticlePropertyTrackingData*    TrackingData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PropertyValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddToValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               UsedMaterialProperty                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MaterialPropertyName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::ClientTrackParticleProperty(class UParticlePropertyTrackingData* TrackingData, class UParticleSystem* Template, class FName Tag, class FName PropertyName, float PropertyValue, bool bAddToValue, class UMaterialInterface* UsedMaterialProperty, class FName MaterialPropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "ClientTrackParticleProperty");

	Params::ScreenParticleManagerComponent_ClientTrackParticleProperty Parms{};

	Parms.TrackingData = TrackingData;
	Parms.Template = Template;
	Parms.Tag = Tag;
	Parms.PropertyName = PropertyName;
	Parms.PropertyValue = PropertyValue;
	Parms.bAddToValue = bAddToValue;
	Parms.UsedMaterialProperty = UsedMaterialProperty;
	Parms.MaterialPropertyName = MaterialPropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ScreenParticleManagerComponent.OnScreenParticleFinished
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*         Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScreenParticleManagerComponent::OnScreenParticleFinished(class UParticleSystemComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenParticleManagerComponent", "OnScreenParticleFinished");

	Params::ScreenParticleManagerComponent_OnScreenParticleFinished Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAllPlayersInVolume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AVolume*>                  Volumes                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayersInVolumeOutput                  Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAllPlayersInVolume(class UObject* WorldContextObject, const TArray<class AVolume*>& Volumes, EPlayersInVolumeOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAllPlayersInVolume");

	Params::GbxGameSystemCoreBlueprintLibrary_AreAllPlayersInVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Volumes = std::move(Volumes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAllPlayersOverlappingActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayersOverlappingActorOutput          Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAllPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor, EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAllPlayersOverlappingActor");

	Params::GbxGameSystemCoreBlueprintLibrary_AreAllPlayersOverlappingActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAllPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayersOverlappingActorOutput          Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAllPlayersOverlappingActors(class UObject* WorldContextObject, const TArray<class AActor*>& Actors, EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAllPlayersOverlappingActors");

	Params::GbxGameSystemCoreBlueprintLibrary_AreAllPlayersOverlappingActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAnyPlayersInVolume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AVolume*>                  Volumes                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayersInVolumeOutput                  Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAnyPlayersInVolume(class UObject* WorldContextObject, const TArray<class AVolume*>& Volumes, EPlayersInVolumeOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAnyPlayersInVolume");

	Params::GbxGameSystemCoreBlueprintLibrary_AreAnyPlayersInVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Volumes = std::move(Volumes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAnyPlayersOverlappingActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayersOverlappingActorOutput          Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAnyPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor, EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAnyPlayersOverlappingActor");

	Params::GbxGameSystemCoreBlueprintLibrary_AreAnyPlayersOverlappingActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.AreAnyPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayersOverlappingActorOutput          Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::AreAnyPlayersOverlappingActors(class UObject* WorldContextObject, const TArray<class AActor*>& Actors, EPlayersOverlappingActorOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "AreAnyPlayersOverlappingActors");

	Params::GbxGameSystemCoreBlueprintLibrary_AreAnyPlayersOverlappingActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.BranchOnIsAutonomous
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EIsAutonomousOuput                      Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::BranchOnIsAutonomous(class AActor* Actor, EIsAutonomousOuput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "BranchOnIsAutonomous");

	Params::GbxGameSystemCoreBlueprintLibrary_BranchOnIsAutonomous Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.BranchOnIsPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EIsPlayerExecOutput                     Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::BranchOnIsPlayer(class AActor* Actor, EIsPlayerExecOutput* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "BranchOnIsPlayer");

	Params::GbxGameSystemCoreBlueprintLibrary_BranchOnIsPlayer Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetActorListTrimmedToBestCluster
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   OutputActors                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FVector                          ClusterMidpoint                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   InputActors                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           SourceActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClusterRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreferClusterContainingCurrentTarget                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::GetActorListTrimmedToBestCluster(TArray<class AActor*>* OutputActors, struct FVector* ClusterMidpoint, const TArray<class AActor*>& InputActors, class AActor* SourceActor, float ClusterRadius, bool bPreferClusterContainingCurrentTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetActorListTrimmedToBestCluster");

	Params::GbxGameSystemCoreBlueprintLibrary_GetActorListTrimmedToBestCluster Parms{};

	Parms.InputActors = std::move(InputActors);
	Parms.SourceActor = SourceActor;
	Parms.ClusterRadius = ClusterRadius;
	Parms.bPreferClusterContainingCurrentTarget = bPreferClusterContainingCurrentTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutputActors != nullptr)
		*OutputActors = std::move(Parms.OutputActors);

	if (ClusterMidpoint != nullptr)
		*ClusterMidpoint = std::move(Parms.ClusterMidpoint);
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAllPlayersOverlappingActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAllPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAllPlayersOverlappingActor");

	Params::GbxGameSystemCoreBlueprintLibrary_GetAreAllPlayersOverlappingActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAllPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAllPlayersOverlappingActors(class UObject* WorldContextObject, const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAllPlayersOverlappingActors");

	Params::GbxGameSystemCoreBlueprintLibrary_GetAreAllPlayersOverlappingActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAnyPlayersOverlappingActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAnyPlayersOverlappingActor(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAnyPlayersOverlappingActor");

	Params::GbxGameSystemCoreBlueprintLibrary_GetAreAnyPlayersOverlappingActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetAreAnyPlayersOverlappingActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::GetAreAnyPlayersOverlappingActors(class UObject* WorldContextObject, const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetAreAnyPlayersOverlappingActors");

	Params::GbxGameSystemCoreBlueprintLibrary_GetAreAnyPlayersOverlappingActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetCurveFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRuntimeFloatCurve               Curve                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxGameSystemCoreBlueprintLibrary::GetCurveFloatValue(const struct FRuntimeFloatCurve& Curve, float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetCurveFloatValue");

	Params::GbxGameSystemCoreBlueprintLibrary_GetCurveFloatValue Parms{};

	Parms.Curve = std::move(Curve);
	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.GetRelativeDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRelativeDirectionData           RelativeDirectionData                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          DefaultDirection                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SourceActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SourceSocketName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxGameSystemCoreBlueprintLibrary::GetRelativeDirection(const struct FRelativeDirectionData& RelativeDirectionData, const struct FVector& DefaultDirection, class AActor* SourceActor, const class FName& SourceSocketName, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "GetRelativeDirection");

	Params::GbxGameSystemCoreBlueprintLibrary_GetRelativeDirection Parms{};

	Parms.RelativeDirectionData = std::move(RelativeDirectionData);
	Parms.DefaultDirection = std::move(DefaultDirection);
	Parms.SourceActor = SourceActor;
	Parms.SourceSocketName = SourceSocketName;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.HoverComponentAtActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Altitude                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AccelerationTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::HoverComponentAtActor(class USceneComponent* Component, class AActor* TargetActor, float Altitude, float Radius, float AccelerationTime, float Speed, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "HoverComponentAtActor");

	Params::GbxGameSystemCoreBlueprintLibrary_HoverComponentAtActor Parms{};

	Parms.Component = Component;
	Parms.TargetActor = TargetActor;
	Parms.Altitude = Altitude;
	Parms.Radius = Radius;
	Parms.AccelerationTime = AccelerationTime;
	Parms.Speed = Speed;
	Parms.Duration = Duration;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.IsContentCensored
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::IsContentCensored(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "IsContentCensored");

	Params::GbxGameSystemCoreBlueprintLibrary_IsContentCensored Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.IsPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::IsPlayer(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "IsPlayer");

	Params::GbxGameSystemCoreBlueprintLibrary_IsPlayer Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.IsSplitScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGameSystemCoreBlueprintLibrary::IsSplitScreen(class UGameInstance* GameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "IsSplitScreen");

	Params::GbxGameSystemCoreBlueprintLibrary_IsSplitScreen Parms{};

	Parms.GameInstance = GameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockAiming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockAiming(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockAiming");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockAiming Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockAIThinking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAbort                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockAIThinking(class AActor* Actor, class FName Reason, bool bAbort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockAIThinking");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockAIThinking Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;
	Parms.bAbort = bAbort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockCrouching
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockCrouching(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockCrouching");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockCrouching Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockDemigod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockDemigod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockDemigod");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockDemigod Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockDodging
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockDodging(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockDodging");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockDodging Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockFootIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockFootIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockFootIk");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockFootIk Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockFootIkTracing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockFootIkTracing(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockFootIkTracing");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockFootIkTracing Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockGod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockGod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockGod");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockGod Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockHandIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockHandIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockHandIk");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockHandIk Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockJumping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockJumping(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockJumping");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockJumping Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockLookAt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockLookAt(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockLookAt");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockLookAt Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockLookAtTargetLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockLookAtTargetLocation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockLookAtTargetLocation");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockLookAtTargetLocation Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockMantling
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockMantling(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockMantling");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockMantling Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockMomentum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockMomentum(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockMomentum");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockMomentum Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockMovement(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockMovement");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockMovement Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockPhysicsRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockPhysicsRotation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockPhysicsRotation");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockPhysicsRotation Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockRotation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockRotation");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockRotation Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTargetable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTargetable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTargetable(class AActor* Actor, class FName Reason, bool bTargetable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTargetable");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockTargetable Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;
	Parms.bTargetable = bTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTickAndRefreshBones
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTickAndRefreshBones(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTickAndRefreshBones");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockTickAndRefreshBones Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceLockTurns
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceLockTurns(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceLockTurns");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceLockTurns Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockAiming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockAiming(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockAiming");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockAiming Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockAIThinking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockAIThinking(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockAIThinking");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockAIThinking Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockCrouching
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockCrouching(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockCrouching");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockCrouching Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockDemigod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockDemigod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockDemigod");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockDemigod Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockDodging
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockDodging(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockDodging");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockDodging Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockFootIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockFootIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockFootIk");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockFootIk Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockFootIkTracing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockFootIkTracing(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockFootIkTracing");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockFootIkTracing Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockGod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockGod(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockGod");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockGod Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockHandIk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockHandIk(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockHandIk");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockHandIk Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockJumping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockJumping(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockJumping");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockJumping Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockLookAt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockLookAt(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockLookAt");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockLookAt Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockLookAtTargetLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockLookAtTargetLocation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockLookAtTargetLocation");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockLookAtTargetLocation Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockMantling
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockMantling(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockMantling");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockMantling Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockMomentum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockMomentum(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockMomentum");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockMomentum Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockMovement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockMovement(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockMovement");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockMovement Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockRotation(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockRotation");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockRotation Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockTickAndRefreshBones
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockTickAndRefreshBones(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockTickAndRefreshBones");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockTickAndRefreshBones Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.ResourceUnlockTurns
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::ResourceUnlockTurns(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "ResourceUnlockTurns");

	Params::GbxGameSystemCoreBlueprintLibrary_ResourceUnlockTurns Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxGameSystemCoreBlueprintLibrary.SetComponentPhysicalRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YawRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RollRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGameSystemCoreBlueprintLibrary::SetComponentPhysicalRotation(class UPrimitiveComponent* Target, float PitchRotation, float YawRotation, float RollRotation, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGameSystemCoreBlueprintLibrary", "SetComponentPhysicalRotation");

	Params::GbxGameSystemCoreBlueprintLibrary_SetComponentPhysicalRotation Parms{};

	Parms.Target = Target;
	Parms.PitchRotation = PitchRotation;
	Parms.YawRotation = YawRotation;
	Parms.RollRotation = RollRotation;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxMediaManager.GbxPlayMovie
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxMediaData*                    InMediaData                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMediaPlayer*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMediaPlayer* UGbxMediaManager::GbxPlayMovie(class UObject* WorldContextObject, class UGbxMediaData* InMediaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxMediaManager", "GbxPlayMovie");

	Params::GbxMediaManager_GbxPlayMovie Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InMediaData = InMediaData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxMediaManager.OnMovieEndReached
// (Final, Native, Private)

void UGbxMediaManager::OnMovieEndReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMediaManager", "OnMovieEndReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxMediaManager.OnMovieMediaClosed
// (Final, Native, Private)

void UGbxMediaManager::OnMovieMediaClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMediaManager", "OnMovieMediaClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxMediaManager.OnMovieMediaOpenFailed
// (Final, Native, Private)
// Parameters:
// class FString                           DeviceUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMediaManager::OnMovieMediaOpenFailed(const class FString& DeviceUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMediaManager", "OnMovieMediaOpenFailed");

	Params::GbxMediaManager_OnMovieMediaOpenFailed Parms{};

	Parms.DeviceUrl = std::move(DeviceUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxNavAvoidanceInterface.SetObstacleAvoidanceLock
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxNavAvoidanceInterface::SetObstacleAvoidanceLock(bool bDisable, const class FName& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavAvoidanceInterface", "SetObstacleAvoidanceLock");

	Params::GbxNavAvoidanceInterface_SetObstacleAvoidanceLock Parms{};

	Parms.bDisable = bDisable;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.ClearBlueprintStance
// (Final, Native, Public, BlueprintCallable)

void UStanceComponent::ClearBlueprintStance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "ClearBlueprintStance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.ClearStanceLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStanceStackLayer                       Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::ClearStanceLayer(EStanceStackLayer Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "ClearStanceLayer");

	Params::StanceComponent_ClearStanceLayer Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.OnRep_StanceState
// (Final, Native, Private)

void UStanceComponent::OnRep_StanceState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "OnRep_StanceState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.SetBlueprintStance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStanceDataProvider*              NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::SetBlueprintStance(class UStanceDataProvider* NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "SetBlueprintStance");

	Params::StanceComponent_SetBlueprintStance Parms{};

	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.SetStanceLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStanceStackLayer                       Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*              NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::SetStanceLayer(EStanceStackLayer Layer, class UStanceDataProvider* NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "SetStanceLayer");

	Params::StanceComponent_SetStanceLayer Parms{};

	Parms.Layer = Layer;
	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.StackStanceChangedCallback
// (Final, Native, Private)
// Parameters:
// EStanceStackLayer                       PreviousLayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                      PreviousStance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStanceStackLayer                       NextLayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                      NextStance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceComponent::StackStanceChangedCallback(EStanceStackLayer PreviousLayer, class UStanceData* PreviousStance, EStanceStackLayer NextLayer, class UStanceData* NextStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "StackStanceChangedCallback");

	Params::StanceComponent_StackStanceChangedCallback Parms{};

	Parms.PreviousLayer = PreviousLayer;
	Parms.PreviousStance = PreviousStance;
	Parms.NextLayer = NextLayer;
	Parms.NextStance = NextStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceComponent.FindStanceForType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceType*                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceData* UStanceComponent::FindStanceForType(class UStanceType* Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "FindStanceForType");

	Params::StanceComponent_FindStanceForType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.FindTypeForStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceData*                      Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceType*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceType* UStanceComponent::FindTypeForStance(class UStanceData* Stance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "FindTypeForStance");

	Params::StanceComponent_FindTypeForStance Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.GetStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceData*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceData* UStanceComponent::GetStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "GetStance");

	Params::StanceComponent_GetStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.GetStanceLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EStanceStackLayer                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStanceStackLayer UStanceComponent::GetStanceLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "GetStanceLayer");

	Params::StanceComponent_GetStanceLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.GetTimeSpentInCurrentStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStanceComponent::GetTimeSpentInCurrentStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "GetTimeSpentInCurrentStance");

	Params::StanceComponent_GetTimeSpentInCurrentStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.IsInAnimStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceDataProvider*              Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInAnimStance(class UStanceDataProvider* Stance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "IsInAnimStance");

	Params::StanceComponent_IsInAnimStance Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.IsInStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceDataProvider*              Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInStance(class UStanceDataProvider* Stance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "IsInStance");

	Params::StanceComponent_IsInStance Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.IsInStanceLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EStanceStackLayer                       Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInStanceLayer(EStanceStackLayer Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "IsInStanceLayer");

	Params::StanceComponent_IsInStanceLayer Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceComponent.IsInStanceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStanceType*                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceComponent::IsInStanceType(class UStanceType* Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StanceComponent", "IsInStanceType");

	Params::StanceComponent_IsInStanceType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.Evaluate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::Evaluate(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "Evaluate");

	Params::GbxParamExt_Evaluate Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.EvaluateBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::EvaluateBool(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "EvaluateBool");

	Params::GbxParamExt_EvaluateBool Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.EvaluateBoolPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::EvaluateBoolPure(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "EvaluateBoolPure");

	Params::GbxParamExt_EvaluateBoolPure Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.EvaluateInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::EvaluateInt(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "EvaluateInt");

	Params::GbxParamExt_EvaluateInt Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.EvaluateIntPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::EvaluateIntPure(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "EvaluateIntPure");

	Params::GbxParamExt_EvaluateIntPure Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.EvaluatePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamExt::EvaluatePure(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "EvaluatePure");

	Params::GbxParamExt_EvaluatePure Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.GetNamedParamDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxNamedParam                   Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamExt::GetNamedParamDescription(const struct FGbxNamedParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "GetNamedParamDescription");

	Params::GbxParamExt_GetNamedParamDescription Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.GetNamedParamDescriptionText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxNamedParam                   Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxParamExt::GetNamedParamDescriptionText(const struct FGbxNamedParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "GetNamedParamDescriptionText");

	Params::GbxParamExt_GetNamedParamDescriptionText Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.GetParamDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamExt::GetParamDescription(const struct FGbxParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "GetParamDescription");

	Params::GbxParamExt_GetParamDescription Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.GetParamDescriptionText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxParamExt::GetParamDescriptionText(const struct FGbxParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "GetParamDescriptionText");

	Params::GbxParamExt_GetParamDescriptionText Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.GetParamPropertyDescription
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UProperty*                        Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamExt::GetParamPropertyDescription(const struct FGbxParam& Param, class UProperty* Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "GetParamPropertyDescription");

	Params::GbxParamExt_GetParamPropertyDescription Parms{};

	Parms.Param = std::move(Param);
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.IsValueInRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::IsValueInRange(const struct FGbxParam& Param, float Value, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "IsValueInRange");

	Params::GbxParamExt_IsValueInRange Parms{};

	Parms.Param = std::move(Param);
	Parms.Value = Value;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxParamExt.IsValueInRangePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxParam                        Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamExt::IsValueInRangePure(const struct FGbxParam& Param, float Value, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamExt", "IsValueInRangePure");

	Params::GbxParamExt_IsValueInRangePure Parms{};

	Parms.Param = std::move(Param);
	Parms.Value = Value;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GbxPhysicsSettings.StaticSetRigidBodySimulationInteractability
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAesthetic                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BodyName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsSettings::StaticSetRigidBodySimulationInteractability(class USkeletalMeshComponent* Comp, bool bAesthetic, class FName BodyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsSettings", "StaticSetRigidBodySimulationInteractability");

	Params::GbxPhysicsSettings_StaticSetRigidBodySimulationInteractability Parms{};

	Parms.Comp = Comp;
	Parms.bAesthetic = bAesthetic;
	Parms.BodyName = BodyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxQueryManager.NotifyAIHotSpotListChangedFor
// (Final, Native, Public)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxQueryManager::NotifyAIHotSpotListChangedFor(class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxQueryManager", "NotifyAIHotSpotListChangedFor");

	Params::GbxQueryManager_NotifyAIHotSpotListChangedFor Parms{};

	Parms.OwnerActor = OwnerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.GbxSignificanceSettings.EnumerateSignificanceEvents
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TArray<class FName>                     OutEvents                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxSignificanceSettings::EnumerateSignificanceEvents(TArray<class FName>* OutEvents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxSignificanceSettings", "EnumerateSignificanceEvents");

	Params::GbxSignificanceSettings_EnumerateSignificanceEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEvents != nullptr)
		*OutEvents = std::move(Parms.OutEvents);
}


// Function GbxGameSystemCore.GbxUIName.GetFormattedText
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUIName::GetFormattedText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIName", "GetFormattedText");

	Params::GbxUIName_GetFormattedText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.GestaltPartData_Mesh.EnumerateGestaltMeshPartNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     OutPartNameList                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGestaltPartData_Mesh::EnumerateGestaltMeshPartNames(TArray<class FName>* OutPartNameList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GestaltPartData_Mesh", "EnumerateGestaltMeshPartNames");

	Params::GestaltPartData_Mesh_EnumerateGestaltMeshPartNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartNameList != nullptr)
		*OutPartNameList = std::move(Parms.OutPartNameList);
}


// Function GbxGameSystemCore.GlobalBoneModBlueprintLibrary.K2_SetGBMP
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGlobalBoneModifyProfileState*    State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalBoneModBlueprintLibrary::K2_SetGBMP(const class UGlobalBoneModifyProfileState* State, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalBoneModBlueprintLibrary", "K2_SetGBMP");

	Params::GlobalBoneModBlueprintLibrary_K2_SetGBMP Parms{};

	Parms.State = State;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.AddHitReactionDeathLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>    Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::AddHitReactionDeathLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "AddHitReactionDeathLayer");

	Params::HitReactionBlueprintLibrary_AddHitReactionDeathLayer Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.AddHitReactionLiveLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>    Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::AddHitReactionLiveLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "AddHitReactionLiveLayer");

	Params::HitReactionBlueprintLibrary_AddHitReactionLiveLayer Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.IsHitReactionTagActive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*                  Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHitReactionBlueprintLibrary::IsHitReactionTagActive(class AActor* Actor, class UHitReactionTag* Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "IsHitReactionTagActive");

	Params::HitReactionBlueprintLibrary_IsHitReactionTagActive Parms{};

	Parms.Actor = Actor;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetBoneIndexFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHitReactionBlueprintLibrary::K2_GetBoneIndexFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "K2_GetBoneIndexFromAction");

	Params::HitReactionBlueprintLibrary_K2_GetBoneIndexFromAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetForceFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitReactionBlueprintLibrary::K2_GetForceFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "K2_GetForceFromAction");

	Params::HitReactionBlueprintLibrary_K2_GetForceFromAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHealthPercentFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHitReactionBlueprintLibrary::K2_GetHealthPercentFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "K2_GetHealthPercentFromAction");

	Params::HitReactionBlueprintLibrary_K2_GetHealthPercentFromAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHitCauserFromAction
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UHitReactionBlueprintLibrary::K2_GetHitCauserFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "K2_GetHitCauserFromAction");

	Params::HitReactionBlueprintLibrary_K2_GetHitCauserFromAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHitDirectionFromAction
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocalSpace                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHitReactionBlueprintLibrary::K2_GetHitDirectionFromAction(class UGbxAction* Action, bool bLocalSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "K2_GetHitDirectionFromAction");

	Params::HitReactionBlueprintLibrary_K2_GetHitDirectionFromAction Parms{};

	Parms.Action = Action;
	Parms.bLocalSpace = bLocalSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.K2_GetHitLocationFromAction
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxAction*                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHitReactionBlueprintLibrary::K2_GetHitLocationFromAction(class UGbxAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "K2_GetHitLocationFromAction");

	Params::HitReactionBlueprintLibrary_K2_GetHitLocationFromAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.RemoveHitReactionDeathLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>    Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::RemoveHitReactionDeathLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "RemoveHitReactionDeathLayer");

	Params::HitReactionBlueprintLibrary_RemoveHitReactionDeathLayer Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.RemoveHitReactionLiveLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UHitReactionLayer>    Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::RemoveHitReactionLiveLayer(class AActor* Actor, TSubclassOf<class UHitReactionLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "RemoveHitReactionLiveLayer");

	Params::HitReactionBlueprintLibrary_RemoveHitReactionLiveLayer Parms{};

	Parms.Actor = Actor;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ResourceLockHitReactions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ResourceLockHitReactions(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "ResourceLockHitReactions");

	Params::HitReactionBlueprintLibrary_ResourceLockHitReactions Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ResourceUnlockHitReactions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ResourceUnlockHitReactions(class AActor* Actor, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "ResourceUnlockHitReactions");

	Params::HitReactionBlueprintLibrary_ResourceUnlockHitReactions Parms{};

	Parms.Actor = Actor;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ScriptDeath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Causer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*                  Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocalHitDirection                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection                  Force                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ScriptDeath(class AActor* Actor, class AActor* Causer, class UHitReactionTag* Tag, const struct FVector& LocalHitDirection, class FName BoneName, const struct FForceSelection& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "ScriptDeath");

	Params::HitReactionBlueprintLibrary_ScriptDeath Parms{};

	Parms.Actor = Actor;
	Parms.Causer = Causer;
	Parms.Tag = Tag;
	Parms.LocalHitDirection = std::move(LocalHitDirection);
	Parms.BoneName = BoneName;
	Parms.Force = std::move(Force);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.ScriptHitReaction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Causer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*                  Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocalHitDirection                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceSelection                  Force                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::ScriptHitReaction(class AActor* Actor, class AActor* Causer, class UHitReactionTag* Tag, const struct FVector& LocalHitDirection, class FName BoneName, const struct FForceSelection& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "ScriptHitReaction");

	Params::HitReactionBlueprintLibrary_ScriptHitReaction Parms{};

	Parms.Actor = Actor;
	Parms.Causer = Causer;
	Parms.Tag = Tag;
	Parms.LocalHitDirection = std::move(LocalHitDirection);
	Parms.BoneName = BoneName;
	Parms.Force = std::move(Force);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionBlueprintLibrary.SetHitReactionData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionData*                 HitReactionData                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitReactionBlueprintLibrary::SetHitReactionData(class AActor* Actor, class UHitReactionData* HitReactionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitReactionBlueprintLibrary", "SetHitReactionData");

	Params::HitReactionBlueprintLibrary_SetHitReactionData Parms{};

	Parms.Actor = Actor;
	Parms.HitReactionData = HitReactionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitReactionLayer_Blueprint.EvaluateTag
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UDamageComponent*                 Receiver                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageCauserComponent*           Causer                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDamageType*                   DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageSource*                    DamageSource                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*                  PreviousTag                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitReactionTag*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHitReactionTag* UHitReactionLayer_Blueprint::EvaluateTag(class UDamageComponent* Receiver, class UDamageCauserComponent* Causer, float DamageAmount, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class UHitRegionData* HitRegion, float Force, class UHitReactionTag* PreviousTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitReactionLayer_Blueprint", "EvaluateTag");

	Params::HitReactionLayer_Blueprint_EvaluateTag Parms{};

	Parms.Receiver = Receiver;
	Parms.Causer = Causer;
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.HitRegion = HitRegion;
	Parms.Force = Force;
	Parms.PreviousTag = PreviousTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.AssociateComponentWithHitRegion
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentToAssociate                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::AssociateComponentWithHitRegion(class AActor* Actor, class UPrimitiveComponent* ComponentToAssociate, class UHitRegionData* HitRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitRegionFunctionLibrary", "AssociateComponentWithHitRegion");

	Params::HitRegionFunctionLibrary_AssociateComponentWithHitRegion Parms{};

	Parms.Actor = Actor;
	Parms.ComponentToAssociate = ComponentToAssociate;
	Parms.HitRegion = HitRegion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.RefillHitRegionHealthByAmount
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   RefillAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::RefillHitRegionHealthByAmount(float RefillAmount, class AActor* Actor, class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitRegionFunctionLibrary", "RefillHitRegionHealthByAmount");

	Params::HitRegionFunctionLibrary_RefillHitRegionHealthByAmount Parms{};

	Parms.RefillAmount = RefillAmount;
	Parms.Actor = Actor;
	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.RefillHitRegionHealthByPercent
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   RefillPercent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::RefillHitRegionHealthByPercent(float RefillPercent, class AActor* Actor, class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitRegionFunctionLibrary", "RefillHitRegionHealthByPercent");

	Params::HitRegionFunctionLibrary_RefillHitRegionHealthByPercent Parms{};

	Parms.RefillPercent = RefillPercent;
	Parms.Actor = Actor;
	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.ResetAllHitRegionHealth
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::ResetAllHitRegionHealth(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitRegionFunctionLibrary", "ResetAllHitRegionHealth");

	Params::HitRegionFunctionLibrary_ResetAllHitRegionHealth Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.HitRegionFunctionLibrary.ResetHitRegionHealth
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHitRegionData*                   HitRegion                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AssociatedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitRegionFunctionLibrary::ResetHitRegionHealth(class AActor* Actor, class UHitRegionData* HitRegion, class UPrimitiveComponent* AssociatedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HitRegionFunctionLibrary", "ResetHitRegionHealth");

	Params::HitRegionFunctionLibrary_ResetHitRegionHealth Parms{};

	Parms.Actor = Actor;
	Parms.HitRegion = HitRegion;
	Parms.AssociatedComponent = AssociatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InspectionInfoProvider.GetInspectionInfo
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FInspectionInfo                  InspectionInfo                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IInspectionInfoProvider::GetInspectionInfo(struct FInspectionInfo& InspectionInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectionInfoProvider", "GetInspectionInfo");

	Params::InspectionInfoProvider_GetInspectionInfo Parms{};

	Parms.InspectionInfo = std::move(InspectionInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InspectionInfo = std::move(Parms.InspectionInfo);
}


// Function GbxGameSystemCore.ImpactFXManagerComponent.OnHit
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactFXManagerComponent", "OnHit");

	Params::ImpactFXManagerComponent_OnHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ImpactFXManagerComponent.OnTrackedComponentDeactivated
// (Final, Native, Protected)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::OnTrackedComponentDeactivated(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactFXManagerComponent", "OnTrackedComponentDeactivated");

	Params::ImpactFXManagerComponent_OnTrackedComponentDeactivated Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ImpactFXManagerComponent.OnTrackedParticleSystemFinished
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         PSC                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::OnTrackedParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactFXManagerComponent", "OnTrackedParticleSystemFinished");

	Params::ImpactFXManagerComponent_OnTrackedParticleSystemFinished Parms{};

	Parms.PSC = PSC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ImpactFXManagerComponent.SetEffectsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpactFXManagerComponent::SetEffectsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactFXManagerComponent", "SetEffectsEnabled");

	Params::ImpactFXManagerComponent_SetEffectsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InspectionInfoFunctionLibrary.AddAboveActorOutput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectionInfo                  InspectionInfo                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDebugDisplayVerbosityLevel             Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectionInfoFunctionLibrary::AddAboveActorOutput(struct FInspectionInfo& InspectionInfo, const class FString& String, EDebugDisplayVerbosityLevel Verbosity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectionInfoFunctionLibrary", "AddAboveActorOutput");

	Params::InspectionInfoFunctionLibrary_AddAboveActorOutput Parms{};

	Parms.InspectionInfo = std::move(InspectionInfo);
	Parms.String = std::move(String);
	Parms.Verbosity = Verbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InspectionInfo = std::move(Parms.InspectionInfo);
}


// Function GbxGameSystemCore.InspectionInfoFunctionLibrary.AddScreenOutput
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectionInfo                  InspectionInfo                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDebugDisplayVerbosityLevel             Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectionInfoFunctionLibrary::AddScreenOutput(struct FInspectionInfo& InspectionInfo, const class FString& String, EDebugDisplayVerbosityLevel Verbosity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectionInfoFunctionLibrary", "AddScreenOutput");

	Params::InspectionInfoFunctionLibrary_AddScreenOutput Parms{};

	Parms.InspectionInfo = std::move(InspectionInfo);
	Parms.String = std::move(String);
	Parms.Verbosity = Verbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InspectionInfo = std::move(Parms.InspectionInfo);
}


// Function GbxGameSystemCore.InterpComponent.InterpBallistics
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          StartLoc                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLoc                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeapSpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeapAngle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInterpComponent::InterpBallistics(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapSpeed, float LeapAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "InterpBallistics");

	Params::InterpComponent_InterpBallistics Parms{};

	Parms.StartLoc = std::move(StartLoc);
	Parms.EndLoc = std::move(EndLoc);
	Parms.LeapSpeed = LeapSpeed;
	Parms.LeapAngle = LeapAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.InterpComponent.InterpBallisticsByTime
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          StartLoc                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLoc                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeapTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeapGravity                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UInterpComponent::InterpBallisticsByTime(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapTime, float LeapGravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "InterpBallisticsByTime");

	Params::InterpComponent_InterpBallisticsByTime Parms{};

	Parms.StartLoc = std::move(StartLoc);
	Parms.EndLoc = std::move(EndLoc);
	Parms.LeapTime = LeapTime;
	Parms.LeapGravity = LeapGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.InterpComponent.InterpDeltaLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          DeltaLoc                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLinear                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNoZ                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInRelative                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpDeltaLocation(const struct FVector& DeltaLoc, float InterpTime, bool bLinear, bool bNoZ, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "InterpDeltaLocation");

	Params::InterpComponent_InterpDeltaLocation Parms{};

	Parms.DeltaLoc = std::move(DeltaLoc);
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bNoZ = bNoZ;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.InterpDeltaRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         DeltaRot                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InterpTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLinear                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bYawOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInRelative                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpDeltaRotation(const struct FRotator& DeltaRot, float InterpTime, bool bLinear, bool bYawOnly, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "InterpDeltaRotation");

	Params::InterpComponent_InterpDeltaRotation Parms{};

	Parms.DeltaRot = std::move(DeltaRot);
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bYawOnly = bYawOnly;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.InterpLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewLoc                                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLinear                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNoZ                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInRelative                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpLocation(const struct FVector& NewLoc, float InterpTime, bool bLinear, bool bNoZ, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "InterpLocation");

	Params::InterpComponent_InterpLocation Parms{};

	Parms.NewLoc = std::move(NewLoc);
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bNoZ = bNoZ;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.InterpRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         NewRot                                                 (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InterpTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLinear                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bYawOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInRelative                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::InterpRotation(const struct FRotator& NewRot, float InterpTime, bool bLinear, bool bYawOnly, bool bInRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "InterpRotation");

	Params::InterpComponent_InterpRotation Parms{};

	Parms.NewRot = std::move(NewRot);
	Parms.InterpTime = InterpTime;
	Parms.bLinear = bLinear;
	Parms.bYawOnly = bYawOnly;
	Parms.bInRelative = bInRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.ManualTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::ManualTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "ManualTick");

	Params::InterpComponent_ManualTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.MatchRotationToVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInSetToInitialWhenFinished                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::MatchRotationToVelocity(bool bInSetToInitialWhenFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "MatchRotationToVelocity");

	Params::InterpComponent_MatchRotationToVelocity Parms{};

	Parms.bInSetToInitialWhenFinished = bInSetToInitialWhenFinished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.SetClearVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewClearVelocity                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetClearVelocity(bool bNewClearVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "SetClearVelocity");

	Params::InterpComponent_SetClearVelocity Parms{};

	Parms.bNewClearVelocity = bNewClearVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.SetManualTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bManual                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetManualTick(bool bManual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "SetManualTick");

	Params::InterpComponent_SetManualTick Parms{};

	Parms.bManual = bManual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.SetRemoveOnCompletion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRemove                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetRemoveOnCompletion(bool bRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "SetRemoveOnCompletion");

	Params::InterpComponent_SetRemoveOnCompletion Parms{};

	Parms.bRemove = bRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.SetUpdateVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewUpdateVelocity                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterpComponent::SetUpdateVelocity(bool bNewUpdateVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "SetUpdateVelocity");

	Params::InterpComponent_SetUpdateVelocity Parms{};

	Parms.bNewUpdateVelocity = bNewUpdateVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UInterpComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.InterpComponent.IsFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterpComponent::IsFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterpComponent", "IsFinished");

	Params::InterpComponent_IsFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.MotionControlLibrary.Spin
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         CurrentRotation                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   RotationRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RotationAxis                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UMotionControlLibrary::Spin(const struct FRotator& CurrentRotation, float RotationRate, const struct FVector& RotationAxis, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionControlLibrary", "Spin");

	Params::MotionControlLibrary_Spin Parms{};

	Parms.CurrentRotation = std::move(CurrentRotation);
	Parms.RotationRate = RotationRate;
	Parms.RotationAxis = std::move(RotationAxis);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.MotionControlLibrary.UpdateSpeed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   CurrentSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Acceleration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMotionControlLibrary::UpdateSpeed(float CurrentSpeed, float TargetSpeed, float Acceleration, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionControlLibrary", "UpdateSpeed");

	Params::MotionControlLibrary_UpdateSpeed Parms{};

	Parms.CurrentSpeed = CurrentSpeed;
	Parms.TargetSpeed = TargetSpeed;
	Parms.Acceleration = Acceleration;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.OrbitingActorComponent.OnRep_TargetActor
// (Final, Native, Protected)
// Parameters:
// class AActor*                           LastTarget                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrbitingActorComponent::OnRep_TargetActor(class AActor* LastTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrbitingActorComponent", "OnRep_TargetActor");

	Params::OrbitingActorComponent_OnRep_TargetActor Parms{};

	Parms.LastTarget = LastTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.OrbitingActorComponent.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrbitingActorComponent::SetTargetActor(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrbitingActorComponent", "SetTargetActor");

	Params::OrbitingActorComponent_SetTargetActor Parms{};

	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.AttachPawnToSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::AttachPawnToSlot(class AActor* Actor, class FName SlotName, class APawn* Pawn, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "AttachPawnToSlot");

	Params::PawnAttachmentFunctionLibrary_AttachPawnToSlot Parms{};

	Parms.Actor = Actor;
	Parms.SlotName = SlotName;
	Parms.Pawn = Pawn;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.DetachPawnFromActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::DetachPawnFromActor(class APawn* Pawn, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "DetachPawnFromActor");

	Params::PawnAttachmentFunctionLibrary_DetachPawnFromActor Parms{};

	Parms.Pawn = Pawn;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.DetachPawnFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::DetachPawnFromSlot(class AActor* Actor, class FName SlotName, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "DetachPawnFromSlot");

	Params::PawnAttachmentFunctionLibrary_DetachPawnFromSlot Parms{};

	Parms.Actor = Actor;
	Parms.SlotName = SlotName;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.FindPawnAttachSlotComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPawnAttachSlotComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPawnAttachSlotComponent* UPawnAttachmentFunctionLibrary::FindPawnAttachSlotComponent(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "FindPawnAttachSlotComponent");

	Params::PawnAttachmentFunctionLibrary_FindPawnAttachSlotComponent Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.QueryPawnAttachment
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPawnAttachmentQueryResult       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPawnAttachmentQueryResult UPawnAttachmentFunctionLibrary::QueryPawnAttachment(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "QueryPawnAttachment");

	Params::PawnAttachmentFunctionLibrary_QueryPawnAttachment Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.RequestDetachPawnFromActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::RequestDetachPawnFromActor(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "RequestDetachPawnFromActor");

	Params::PawnAttachmentFunctionLibrary_RequestDetachPawnFromActor Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.PawnAttachmentFunctionLibrary.RequestDetachPawnFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnAttachmentFunctionLibrary::RequestDetachPawnFromSlot(class AActor* Actor, class FName SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnAttachmentFunctionLibrary", "RequestDetachPawnFromSlot");

	Params::PawnAttachmentFunctionLibrary_RequestDetachPawnFromSlot Parms{};

	Parms.Actor = Actor;
	Parms.SlotName = SlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InTargetActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileAimViewPointHomingTargetComponent::SetTargetActor(class AActor* InTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "SetTargetActor");

	Params::ProjectileAimViewPointHomingTargetComponent_SetTargetActor Parms{};

	Parms.InTargetActor = InTargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.SetTargetController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      InTargetController                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileAimViewPointHomingTargetComponent::SetTargetController(class AController* InTargetController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "SetTargetController");

	Params::ProjectileAimViewPointHomingTargetComponent_SetTargetController Parms{};

	Parms.InTargetController = InTargetController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.GetCurrentHomingLoc
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UProjectileAimViewPointHomingTargetComponent::GetCurrentHomingLoc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "GetCurrentHomingLoc");

	Params::ProjectileAimViewPointHomingTargetComponent_GetCurrentHomingLoc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ProjectileAimViewPointHomingTargetComponent.GetTargetController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* UProjectileAimViewPointHomingTargetComponent::GetTargetController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileAimViewPointHomingTargetComponent", "GetTargetController");

	Params::ProjectileAimViewPointHomingTargetComponent_GetTargetController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.ReferenceActor.EnumeratePreviewClasses
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     ClasssList                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AReferenceActor::EnumeratePreviewClasses(TArray<class FName>* ClasssList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReferenceActor", "EnumeratePreviewClasses");

	Params::ReferenceActor_EnumeratePreviewClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ClasssList != nullptr)
		*ClasssList = std::move(Parms.ClasssList);
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_OwnerNoSeeEmitter
// (Final, Native, Protected)

void AReplicatedEmitter::OnRep_OwnerNoSeeEmitter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_OwnerNoSeeEmitter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedColorParams
// (Final, Native, Protected)

void AReplicatedEmitter::OnRep_ReplicatedColorParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedColorParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedFloatParams
// (Final, Native, Protected)

void AReplicatedEmitter::OnRep_ReplicatedFloatParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedFloatParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedVectorParams
// (Final, Native, Protected)

void AReplicatedEmitter::OnRep_ReplicatedVectorParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedVectorParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_ReplicatedWwiseEvent
// (Final, Native, Protected)

void AReplicatedEmitter::OnRep_ReplicatedWwiseEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_ReplicatedWwiseEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.ReplicatedEmitter.OnRep_TemplateOptions
// (Final, Native, Protected)

void AReplicatedEmitter::OnRep_TemplateOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicatedEmitter", "OnRep_TemplateOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchComponent.HandleParticleSystemFinished
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*         PSC                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchComponent::HandleParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SceneBodySwitchComponent", "HandleParticleSystemFinished");

	Params::SceneBodySwitchComponent_HandleParticleSystemFinished Parms{};

	Parms.PSC = PSC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchComponent.HandleWwiseEventFinished
// (Final, Native, Private)
// Parameters:
// class UWwiseAudioComponent*             WAC                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      WwiseEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USceneBodySwitchComponent::HandleWwiseEventFinished(class UWwiseAudioComponent* WAC, class UWwiseEvent* WwiseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SceneBodySwitchComponent", "HandleWwiseEventFinished");

	Params::SceneBodySwitchComponent_HandleWwiseEventFinished Parms{};

	Parms.WAC = WAC;
	Parms.WwiseEvent = WwiseEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchComponent.OnRep_ReplicatedState
// (Final, Native, Private)

void USceneBodySwitchComponent::OnRep_ReplicatedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SceneBodySwitchComponent", "OnRep_ReplicatedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.SceneBodySwitchComponent.GetValidSwitchStateNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     OutNames                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USceneBodySwitchComponent::GetValidSwitchStateNames(TArray<class FName>* OutNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SceneBodySwitchComponent", "GetValidSwitchStateNames");

	Params::SceneBodySwitchComponent_GetValidSwitchStateNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNames != nullptr)
		*OutNames = std::move(Parms.OutNames);
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.ClearStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceBlueprintLibrary::ClearStance(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "ClearStance");

	Params::StanceBlueprintLibrary_ClearStance Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.EqualEqual_StanceDataStanceData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStanceData*                      A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceData*                      B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::EqualEqual_StanceDataStanceData(class UStanceData* A, class UStanceData* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "EqualEqual_StanceDataStanceData");

	Params::StanceBlueprintLibrary_EqualEqual_StanceDataStanceData Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.EqualEqual_StanceTypeStanceType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStanceType*                      A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceType*                      B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::EqualEqual_StanceTypeStanceType(class UStanceType* A, class UStanceType* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "EqualEqual_StanceTypeStanceType");

	Params::StanceBlueprintLibrary_EqualEqual_StanceTypeStanceType Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.IsInStance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*              Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::IsInStance(class UAnimInstance* AnimInstance, class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "IsInStance");

	Params::StanceBlueprintLibrary_IsInStance Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.IsStanceComponentInStance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStanceComponent*                 StanceComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*              Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStanceBlueprintLibrary::IsStanceComponentInStance(class UStanceComponent* StanceComponent, class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "IsStanceComponentInStance");

	Params::StanceBlueprintLibrary_IsStanceComponentInStance Parms{};

	Parms.StanceComponent = StanceComponent;
	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.SetStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceDataProvider*              Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStanceBlueprintLibrary::SetStance(class AActor* Target, class UStanceDataProvider* Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "SetStance");

	Params::StanceBlueprintLibrary_SetStance Parms{};

	Parms.Target = Target;
	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.StanceBlueprintLibrary.TryGetStanceComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AAIController*                    AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStanceComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStanceComponent* UStanceBlueprintLibrary::TryGetStanceComponent(class AAIController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StanceBlueprintLibrary", "TryGetStanceComponent");

	Params::StanceBlueprintLibrary_TryGetStanceComponent Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.GetTargetNameString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTargetableComponent::GetTargetNameString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetTargetNameString");

	Params::TargetableComponent_GetTargetNameString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.OnRep_TargetUIName
// (Final, Native, Private)

void UTargetableComponent::OnRep_TargetUIName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "OnRep_TargetUIName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsTargetable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetable(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetable");

	Params::TargetableComponent_SetIsTargetable Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetableByAIPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsTargetable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetableByAIPlayers(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetableByAIPlayers");

	Params::TargetableComponent_SetIsTargetableByAIPlayers Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetableByHumanPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsTargetable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetableByHumanPlayers(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetableByHumanPlayers");

	Params::TargetableComponent_SetIsTargetableByHumanPlayers Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.SetIsTargetableByNonPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsTargetable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetIsTargetableByNonPlayers(bool IsTargetable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "SetIsTargetableByNonPlayers");

	Params::TargetableComponent_SetIsTargetableByNonPlayers Parms{};

	Parms.IsTargetable = IsTargetable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.SetTargetName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewTargetName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTargetableComponent::SetTargetName(const class FText& NewTargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "SetTargetName");

	Params::TargetableComponent_SetTargetName Parms{};

	Parms.NewTargetName = std::move(NewTargetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.SetTargetUIName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIName*                       NewTargetUIName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetableComponent::SetTargetUIName(const class UGbxUIName* NewTargetUIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "SetTargetUIName");

	Params::TargetableComponent_SetTargetUIName Parms{};

	Parms.NewTargetUIName = NewTargetUIName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetableComponent.GetAvailableSocketNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetableComponent::GetAvailableSocketNames(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetAvailableSocketNames");

	Params::TargetableComponent_GetAvailableSocketNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function GbxGameSystemCore.TargetableComponent.GetClosestTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetableComponent::GetClosestTargetLocation(const struct FVector& Origin, const struct FVector& Direction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetClosestTargetLocation");

	Params::TargetableComponent_GetClosestTargetLocation Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.GetTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetableComponent::GetTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetTargetLocation");

	Params::TargetableComponent_GetTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.GetTargetLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UTargetableComponent::GetTargetLocations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetTargetLocations");

	Params::TargetableComponent_GetTargetLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.GetTargetProxyComponentNames
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetableComponent::GetTargetProxyComponentNames(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetTargetProxyComponentNames");

	Params::TargetableComponent_GetTargetProxyComponentNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function GbxGameSystemCore.TargetableComponent.GetTargetSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UTargetableComponent::GetTargetSocketName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "GetTargetSocketName");

	Params::TargetableComponent_GetTargetSocketName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetable");

	Params::TargetableComponent_IsTargetable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByActor(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByActor");

	Params::TargetableComponent_IsTargetableByActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByAIPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByAIPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByAIPlayers");

	Params::TargetableComponent_IsTargetableByAIPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      Controller                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByController(const class AController* Controller) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByController");

	Params::TargetableComponent_IsTargetableByController Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByHumanPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByHumanPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByHumanPlayers");

	Params::TargetableComponent_IsTargetableByHumanPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByNonPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByNonPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByNonPlayers");

	Params::TargetableComponent_IsTargetableByNonPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetableComponent.IsTargetableByPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            Pawn                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetableComponent::IsTargetableByPawn(const class APawn* Pawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetableComponent", "IsTargetableByPawn");

	Params::TargetableComponent_IsTargetableByPawn Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.ServerSetBestTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                           NewBestTarget                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingComponent::ServerSetBestTarget(class AActor* NewBestTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "ServerSetBestTarget");

	Params::TargetingComponent_ServerSetBestTarget Parms{};

	Parms.NewBestTarget = NewBestTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxGameSystemCore.TargetingComponent.DoesBestTargetHaveStimulusForSense
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UAISense>             Sense                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAge                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::DoesBestTargetHaveStimulusForSense(TSubclassOf<class UAISense> Sense, float MaxAge, int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "DoesBestTargetHaveStimulusForSense");

	Params::TargetingComponent_DoesBestTargetHaveStimulusForSense Parms{};

	Parms.Sense = Sense;
	Parms.MaxAge = MaxAge;
	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetBestAttackTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutTargetVelocity                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingComponent::GetBestAttackTargetLocation(struct FVector* OutTargetVelocity, int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetBestAttackTargetLocation");

	Params::TargetingComponent_GetBestAttackTargetLocation Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargetVelocity != nullptr)
		*OutTargetVelocity = std::move(Parms.OutTargetVelocity);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTargetableComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* UTargetingComponent::GetBestTargetableComponent(int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetableComponent");

	Params::TargetingComponent_GetBestTargetableComponent Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTargetingComponent::GetBestTargetActor(int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetActor");

	Params::TargetingComponent_GetBestTargetActor Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTargetActorInfo                 TargetInfo                                             (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetBestTargetInfo(struct FTargetActorInfo* TargetInfo, int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetInfo");

	Params::TargetingComponent_GetBestTargetInfo Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetInfo != nullptr)
		*TargetInfo = std::move(Parms.TargetInfo);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetBestTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingComponent::GetBestTargetLocation(int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetBestTargetLocation");

	Params::TargetingComponent_GetBestTargetLocation Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetBestThreatActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bRequireFirsthandKnowledge                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTargetingComponent::GetBestThreatActor(bool bRequireFirsthandKnowledge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetBestThreatActor");

	Params::TargetingComponent_GetBestThreatActor Parms{};

	Parms.bRequireFirsthandKnowledge = bRequireFirsthandKnowledge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetTargetActorAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTargetingComponent::GetTargetActorAt(int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetTargetActorAt");

	Params::TargetingComponent_GetTargetActorAt Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetTargetInfoAt
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo                 TargetInfo                                             (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetTargetInfoAt(int32 TargetIndex, struct FTargetActorInfo* TargetInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetTargetInfoAt");

	Params::TargetingComponent_GetTargetInfoAt Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetInfo != nullptr)
		*TargetInfo = std::move(Parms.TargetInfo);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetTargetInfoCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTargetingComponent::GetTargetInfoCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetTargetInfoCount");

	Params::TargetingComponent_GetTargetInfoCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetTargetInfoForActor
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetActorInfo                 TargetInfo                                             (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetTargetInfoForActor(const class AActor* Actor, struct FTargetActorInfo* TargetInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetTargetInfoForActor");

	Params::TargetingComponent_GetTargetInfoForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetInfo != nullptr)
		*TargetInfo = std::move(Parms.TargetInfo);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.GetTargetLocationForActor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::GetTargetLocationForActor(const class AActor* Actor, struct FVector* TargetLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "GetTargetLocationForActor");

	Params::TargetingComponent_GetTargetLocationForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.HasTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::HasTarget(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "HasTarget");

	Params::TargetingComponent_HasTarget Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.HasTargets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::HasTargets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "HasTargets");

	Params::TargetingComponent_HasTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.TargetingComponent.IsBestTargetDirectlySensed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetingComponent::IsBestTargetDirectlySensed(int32 TargetIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingComponent", "IsBestTargetDirectlySensed");

	Params::TargetingComponent_IsBestTargetDirectlySensed Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxGameSystemCore.Team.GetAttitudeToward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                            Team                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude UTeam::GetAttitudeToward(const class UTeam* Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Team", "GetAttitudeToward");

	Params::Team_GetAttitudeToward Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

