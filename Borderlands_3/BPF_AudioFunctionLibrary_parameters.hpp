#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AudioFunctionLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPF_AudioFunctionLibrary.BPF_AudioFunctionLibrary_C.GetDistanceBetweenVectors
// 0x0060 (0x0060 - 0x0000)
struct BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors final
{
public:
	struct FVector                                Vector_1;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector_2;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue1;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue2;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors) == 0x000008, "Wrong alignment on BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors");
static_assert(sizeof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors) == 0x000060, "Wrong size on BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, Vector_1) == 0x000000, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::Vector_1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, Vector_2) == 0x00000C, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::Vector_2' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, __WorldContext) == 0x000018, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, Distance) == 0x000020, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::Distance' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_BreakVector_X) == 0x000024, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_BreakVector_Y) == 0x000028, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_BreakVector_X1) == 0x000030, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_BreakVector_Y1) == 0x000034, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_BreakVector_Z1) == 0x000038, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000040, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Square_ReturnValue) == 0x000044, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Square_ReturnValue1) == 0x000048, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Square_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x00004C, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Square_ReturnValue2) == 0x000050, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Square_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000058, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors, CallFunc_Sqrt_ReturnValue) == 0x00005C, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceBetweenVectors::CallFunc_Sqrt_ReturnValue' has a wrong offset!");

// Function BPF_AudioFunctionLibrary.BPF_AudioFunctionLibrary_C.SetRandomVariation
// 0x0018 (0x0018 - 0x0000)
struct BPF_AudioFunctionLibrary_C_SetRandomVariation final
{
public:
	class UWwiseAudioComponent*                   TargetWwiseComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AudioFunctionLibrary_C_SetRandomVariation) == 0x000008, "Wrong alignment on BPF_AudioFunctionLibrary_C_SetRandomVariation");
static_assert(sizeof(BPF_AudioFunctionLibrary_C_SetRandomVariation) == 0x000018, "Wrong size on BPF_AudioFunctionLibrary_C_SetRandomVariation");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_SetRandomVariation, TargetWwiseComponent) == 0x000000, "Member 'BPF_AudioFunctionLibrary_C_SetRandomVariation::TargetWwiseComponent' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_SetRandomVariation, __WorldContext) == 0x000008, "Member 'BPF_AudioFunctionLibrary_C_SetRandomVariation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_SetRandomVariation, CallFunc_RandomFloat_ReturnValue) == 0x000010, "Member 'BPF_AudioFunctionLibrary_C_SetRandomVariation::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");

// Function BPF_AudioFunctionLibrary.BPF_AudioFunctionLibrary_C.GetDistanceFromEmitterToListener
// 0x0060 (0x0060 - 0x0000)
struct BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener final
{
public:
	class UWwiseAudioComponent*                   AudioComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RTPCValue;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAttenuationRadius_ReturnValue;      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClosestListenerLocation_ClosestLocation; // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetClosestListenerLocation_bSuccess;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener) == 0x000008, "Wrong alignment on BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener");
static_assert(sizeof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener) == 0x000060, "Wrong size on BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, AudioComponent) == 0x000000, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::AudioComponent' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, __WorldContext) == 0x000008, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, RTPCValue) == 0x000010, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::RTPCValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_GetMaxAttenuationRadius_ReturnValue) == 0x000014, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_GetMaxAttenuationRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_GetClosestListenerLocation_ClosestLocation) == 0x000028, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_GetClosestListenerLocation_ClosestLocation' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_GetClosestListenerLocation_bSuccess) == 0x000034, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_GetClosestListenerLocation_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000035, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_VSizeSquared_ReturnValue) == 0x000044, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00004C, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000050, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_FClamp_ReturnValue) == 0x000054, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'BPF_AudioFunctionLibrary_C_GetDistanceFromEmitterToListener::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

}

