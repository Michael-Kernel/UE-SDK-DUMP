#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IO_Operative_ShoulderCannon

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "EOperativeShoulderCannon_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IO_Operative_ShoulderCannon.IO_Operative_ShoulderCannon_C
// 0x0208 (0x0758 - 0x0550)
class AIO_Operative_ShoulderCannon_C final : public AInteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SK_Operative_Cannon_3rd;                           // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Operative_Cannon_1st;                           // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxActionComponent*                    GbxAction;                                         // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EOperativeShoulderCannon                      CannonState;                                       // 0x0578(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakCharacter_Player*                   PlayerOwner;                                       // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestReload;                                     // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakActionAbility_ShoulderCannon*       PlayerActionAbility;                               // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FastDespawn;                                       // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           IdleEquipTimer;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UClass*                                 FireAction;                                        // 0x05A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FOakLightProjectileInitializationData  CannonLightProjectileData;                         // 0x05B0(0x0158)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FDataTableValueHandle                  Mod3NovaDamage;                                    // 0x0708(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableValueHandle                  Mod5Duration;                                      // 0x0720(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ABPChar_Operative_C*                    BPCharOperative;                                   // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableValueHandle                  Mod3Radius;                                        // 0x0740(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_IO_Operative_ShoulderCannon(int32 EntryPoint);
	void Audio_PlayFiringSound();
	void ReceiveBeginPlay();
	void ShoulderCannon_OnCausedAnyDamage(class AActor* DamageInstigator, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details);
	void BeginCannonFireAnim();
	void ShoulderCannon_OnCausedDeath(const class UDamageComponent* Damaged, const struct FCausedDeathDetails& Details);
	void StartUnequippedIdle();
	void TransitionToUnequipState();
	void IdleToUnequip();
	void StartIdleAfterFireTimer();
	void OperativeRemoveShoulderCannon(bool Fast);
	void OperativeShoulderCannonReload(bool Start);
	void EndReload();
	void BeginReloadAnim();
	void UserConstructionScript();
	void OnRep_CannonState();
	void OnCannonCreated();
	void OnCannonFired();
	void OnDespawning();
	void OnFininshedDespawned();
	void OnBeginReload();
	float GetShoulderCannonDamage();
	void GetFireAction(class UClass** Res);
	void AttachToOwner();
	void PlayCannonFeedback();
	void CanBePulled(class AActor* Target, bool* Res);
	void TryCannonMod3(class AActor* DamagedActor, bool WasCritOrDeath, bool* Res);
	void TryCannonMod4(bool WarCrit, bool* Res);
	void TryCannonMod5(const class UObject* DamageType, class AActor* DamagedActor, bool* Res);
	void OperativeShoulderCannonDigistructFinished(bool DigistructIn, bool* Res);
	void OperativeFireShoulderCannon(bool* Res);
	void OperativeShoulderCannonSetState(EOperativeShoulderCannon NewState, bool* Res);
	void OperativeShoulderCannonCreateLightProjectile(bool* Res);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IO_Operative_ShoulderCannon_C">();
	}
	static class AIO_Operative_ShoulderCannon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIO_Operative_ShoulderCannon_C>();
	}
};
static_assert(alignof(AIO_Operative_ShoulderCannon_C) == 0x000008, "Wrong alignment on AIO_Operative_ShoulderCannon_C");
static_assert(sizeof(AIO_Operative_ShoulderCannon_C) == 0x000758, "Wrong size on AIO_Operative_ShoulderCannon_C");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, UberGraphFrame) == 0x000550, "Member 'AIO_Operative_ShoulderCannon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, SK_Operative_Cannon_3rd) == 0x000558, "Member 'AIO_Operative_ShoulderCannon_C::SK_Operative_Cannon_3rd' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, SK_Operative_Cannon_1st) == 0x000560, "Member 'AIO_Operative_ShoulderCannon_C::SK_Operative_Cannon_1st' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, GbxAction) == 0x000568, "Member 'AIO_Operative_ShoulderCannon_C::GbxAction' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, DefaultSceneRoot) == 0x000570, "Member 'AIO_Operative_ShoulderCannon_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, CannonState) == 0x000578, "Member 'AIO_Operative_ShoulderCannon_C::CannonState' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, PlayerOwner) == 0x000580, "Member 'AIO_Operative_ShoulderCannon_C::PlayerOwner' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, RequestReload) == 0x000588, "Member 'AIO_Operative_ShoulderCannon_C::RequestReload' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, PlayerActionAbility) == 0x000590, "Member 'AIO_Operative_ShoulderCannon_C::PlayerActionAbility' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, FastDespawn) == 0x000598, "Member 'AIO_Operative_ShoulderCannon_C::FastDespawn' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, IdleEquipTimer) == 0x0005A0, "Member 'AIO_Operative_ShoulderCannon_C::IdleEquipTimer' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, FireAction) == 0x0005A8, "Member 'AIO_Operative_ShoulderCannon_C::FireAction' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, CannonLightProjectileData) == 0x0005B0, "Member 'AIO_Operative_ShoulderCannon_C::CannonLightProjectileData' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, Mod3NovaDamage) == 0x000708, "Member 'AIO_Operative_ShoulderCannon_C::Mod3NovaDamage' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, Mod5Duration) == 0x000720, "Member 'AIO_Operative_ShoulderCannon_C::Mod5Duration' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, BPCharOperative) == 0x000738, "Member 'AIO_Operative_ShoulderCannon_C::BPCharOperative' has a wrong offset!");
static_assert(offsetof(AIO_Operative_ShoulderCannon_C, Mod3Radius) == 0x000740, "Member 'AIO_Operative_ShoulderCannon_C::Mod3Radius' has a wrong offset!");

}

