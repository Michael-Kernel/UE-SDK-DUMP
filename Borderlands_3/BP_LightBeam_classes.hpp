#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightBeam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightBeam.BP_LightBeam_C
// 0x0068 (0x04C0 - 0x0458)
class ABP_LightBeam_C final : public ARenderActor
{
public:
	class UStaticMeshComponent*                   SM_FX_Grid_100x100_18Triangles;                    // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LightBeam_Mat_Inst;                                // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fresnel_Power;                                     // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightBeam_Mat_Instance;                            // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0480(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Mult;                                     // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Depth_Fade_Distance;                               // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Far_Fade_Start;                                    // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Far_Fade_End;                                      // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Near_Fade_Start;                                   // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Near_Fade_End;                                     // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity_Mult;                                      // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sphere_Mask_Hardness;                              // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Animation_Speed;                                   // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tiling;                                            // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunColorBlend;                                     // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightBeam_C">();
	}
	static class ABP_LightBeam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightBeam_C>();
	}
};
static_assert(alignof(ABP_LightBeam_C) == 0x000008, "Wrong alignment on ABP_LightBeam_C");
static_assert(sizeof(ABP_LightBeam_C) == 0x0004C0, "Wrong size on ABP_LightBeam_C");
static_assert(offsetof(ABP_LightBeam_C, SM_FX_Grid_100x100_18Triangles) == 0x000458, "Member 'ABP_LightBeam_C::SM_FX_Grid_100x100_18Triangles' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Billboard) == 0x000460, "Member 'ABP_LightBeam_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, LightBeam_Mat_Inst) == 0x000468, "Member 'ABP_LightBeam_C::LightBeam_Mat_Inst' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Fresnel_Power) == 0x000470, "Member 'ABP_LightBeam_C::Fresnel_Power' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, LightBeam_Mat_Instance) == 0x000478, "Member 'ABP_LightBeam_C::LightBeam_Mat_Instance' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Color) == 0x000480, "Member 'ABP_LightBeam_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Emissive_Mult) == 0x000490, "Member 'ABP_LightBeam_C::Emissive_Mult' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Depth_Fade_Distance) == 0x000494, "Member 'ABP_LightBeam_C::Depth_Fade_Distance' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Far_Fade_Start) == 0x000498, "Member 'ABP_LightBeam_C::Far_Fade_Start' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Far_Fade_End) == 0x00049C, "Member 'ABP_LightBeam_C::Far_Fade_End' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Near_Fade_Start) == 0x0004A0, "Member 'ABP_LightBeam_C::Near_Fade_Start' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Near_Fade_End) == 0x0004A4, "Member 'ABP_LightBeam_C::Near_Fade_End' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Opacity_Mult) == 0x0004A8, "Member 'ABP_LightBeam_C::Opacity_Mult' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Sphere_Mask_Hardness) == 0x0004AC, "Member 'ABP_LightBeam_C::Sphere_Mask_Hardness' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Animation_Speed) == 0x0004B0, "Member 'ABP_LightBeam_C::Animation_Speed' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, Tiling) == 0x0004B4, "Member 'ABP_LightBeam_C::Tiling' has a wrong offset!");
static_assert(offsetof(ABP_LightBeam_C, SunColorBlend) == 0x0004B8, "Member 'ABP_LightBeam_C::SunColorBlend' has a wrong offset!");

}

