#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Projectile_Krakatoa

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GbxWeapon_structs.hpp"


namespace SDK::Params
{

// Function Projectile_Krakatoa.Projectile_Krakatoa_C.ExecuteUbergraph_Projectile_Krakatoa
// 0x0170 (0x0170 - 0x0000)
struct Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit1;                                 // 0x0008(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x00D8(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0168(0x0008)(NoDestructor)
};
static_assert(alignof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa) == 0x000008, "Wrong alignment on Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa");
static_assert(sizeof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa) == 0x000170, "Wrong size on Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, EntryPoint) == 0x000000, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::EntryPoint' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_Hit1) == 0x000008, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_Hit1' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_MyComp) == 0x000098, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_Other) == 0x0000A0, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_OtherComp) == 0x0000A8, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_bSelfMoved) == 0x0000B0, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_HitLocation) == 0x0000B4, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_HitNormal) == 0x0000C0, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_NormalImpulse) == 0x0000CC, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, K2Node_Event_Hit) == 0x0000D8, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa, CallFunc_K2_SetTimer_ReturnValue) == 0x000168, "Member 'Projectile_Krakatoa_C_ExecuteUbergraph_Projectile_Krakatoa::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function Projectile_Krakatoa.Projectile_Krakatoa_C.FireProjectile
// 0x01E0 (0x01E0 - 0x0000)
struct Projectile_Krakatoa_C_FireProjectile final
{
public:
	struct FVector                                EndLocation;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue1;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GeneratePointsOnCone_ReturnValue;         // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLightProjectileInitializationData     K2Node_MakeStruct_LightProjectileInitializationData; // 0x0078(0x0140)(ContainsInstancedReference)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Projectile_Krakatoa_C_FireProjectile) == 0x000008, "Wrong alignment on Projectile_Krakatoa_C_FireProjectile");
static_assert(sizeof(Projectile_Krakatoa_C_FireProjectile) == 0x0001E0, "Wrong size on Projectile_Krakatoa_C_FireProjectile");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, EndLocation) == 0x000000, "Member 'Projectile_Krakatoa_C_FireProjectile::EndLocation' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, StartLocation) == 0x00000C, "Member 'Projectile_Krakatoa_C_FireProjectile::StartLocation' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_RandomFloatInRange_ReturnValue) == 0x000018, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_RandomFloatInRange_ReturnValue1) == 0x00001C, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_RandomFloatInRange_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_GeneratePointsOnCone_ReturnValue) == 0x000030, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_GeneratePointsOnCone_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000040, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_BreakTransform_Location) == 0x000050, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, K2Node_MakeStruct_LightProjectileInitializationData) == 0x000078, "Member 'Projectile_Krakatoa_C_FireProjectile::K2Node_MakeStruct_LightProjectileInitializationData' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_GetForwardVector_ReturnValue) == 0x0001B8, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001C4, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_FireProjectile, CallFunc_Add_VectorVector_ReturnValue) == 0x0001D0, "Member 'Projectile_Krakatoa_C_FireProjectile::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function Projectile_Krakatoa.Projectile_Krakatoa_C.ReceiveHit
// 0x00D0 (0x00D0 - 0x0000)
struct Projectile_Krakatoa_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Projectile_Krakatoa_C_ReceiveHit) == 0x000008, "Wrong alignment on Projectile_Krakatoa_C_ReceiveHit");
static_assert(sizeof(Projectile_Krakatoa_C_ReceiveHit) == 0x0000D0, "Wrong size on Projectile_Krakatoa_C_ReceiveHit");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, MyComp) == 0x000000, "Member 'Projectile_Krakatoa_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, Other) == 0x000008, "Member 'Projectile_Krakatoa_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, OtherComp) == 0x000010, "Member 'Projectile_Krakatoa_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'Projectile_Krakatoa_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, HitLocation) == 0x00001C, "Member 'Projectile_Krakatoa_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, HitNormal) == 0x000028, "Member 'Projectile_Krakatoa_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'Projectile_Krakatoa_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Projectile_Krakatoa_C_ReceiveHit, Hit) == 0x000040, "Member 'Projectile_Krakatoa_C_ReceiveHit::Hit' has a wrong offset!");

// Function Projectile_Krakatoa.Projectile_Krakatoa_C.OnHitWorld
// 0x0090 (0x0090 - 0x0000)
struct Projectile_Krakatoa_C_OnHitWorld final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Projectile_Krakatoa_C_OnHitWorld) == 0x000008, "Wrong alignment on Projectile_Krakatoa_C_OnHitWorld");
static_assert(sizeof(Projectile_Krakatoa_C_OnHitWorld) == 0x000090, "Wrong size on Projectile_Krakatoa_C_OnHitWorld");
static_assert(offsetof(Projectile_Krakatoa_C_OnHitWorld, Hit) == 0x000000, "Member 'Projectile_Krakatoa_C_OnHitWorld::Hit' has a wrong offset!");

}

