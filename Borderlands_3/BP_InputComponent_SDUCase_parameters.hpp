#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputComponent_SDUCase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Released_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_InitialPulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_1_Pressed_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Released_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_InitialPulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_3_Pressed_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Released_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_InitialPulse_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_Button_PressPulse_6_Pressed_exec::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_OakUIAxis_0_Released_exec
// 0x0010 (0x0010 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec) == 0x000010, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec, Val) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec::Val' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec, bGamePad) == 0x00000C, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Released_exec::bGamePad' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_OakUIAxis_0_Held_exec
// 0x0010 (0x0010 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec) == 0x000010, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec, Val) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec::Val' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec, bGamePad) == 0x00000C, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Held_exec::bGamePad' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec
// 0x0010 (0x0010 - 0x0000)
struct BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec");
static_assert(sizeof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec) == 0x000010, "Wrong size on BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec, Val) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec::Val' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec, bGamePad) == 0x00000C, "Member 'BP_InputComponent_SDUCase_C_K2Node_GbxInputEvent_OakUIAxis_0_Pressed_exec::bGamePad' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.GbxInputEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_GbxInputEvent_0 final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_GbxInputEvent_0) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_GbxInputEvent_0");
static_assert(sizeof(BP_InputComponent_SDUCase_C_GbxInputEvent_0) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_GbxInputEvent_0");
static_assert(offsetof(BP_InputComponent_SDUCase_C_GbxInputEvent_0, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_GbxInputEvent_0::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.GbxInputEvent_1
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_GbxInputEvent_1 final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_GbxInputEvent_1) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_GbxInputEvent_1");
static_assert(sizeof(BP_InputComponent_SDUCase_C_GbxInputEvent_1) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_GbxInputEvent_1");
static_assert(offsetof(BP_InputComponent_SDUCase_C_GbxInputEvent_1, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_GbxInputEvent_1::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.GbxInputEvent_2
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_GbxInputEvent_2 final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_GbxInputEvent_2) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_GbxInputEvent_2");
static_assert(sizeof(BP_InputComponent_SDUCase_C_GbxInputEvent_2) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_GbxInputEvent_2");
static_assert(offsetof(BP_InputComponent_SDUCase_C_GbxInputEvent_2, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_GbxInputEvent_2::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.GbxInputEvent_3
// 0x0004 (0x0004 - 0x0000)
struct BP_InputComponent_SDUCase_C_GbxInputEvent_3 final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_GbxInputEvent_3) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_GbxInputEvent_3");
static_assert(sizeof(BP_InputComponent_SDUCase_C_GbxInputEvent_3) == 0x000004, "Wrong size on BP_InputComponent_SDUCase_C_GbxInputEvent_3");
static_assert(offsetof(BP_InputComponent_SDUCase_C_GbxInputEvent_3, NextPulseDelay) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_GbxInputEvent_3::NextPulseDelay' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.GbxInputEvent_6
// 0x0010 (0x0010 - 0x0000)
struct BP_InputComponent_SDUCase_C_GbxInputEvent_6 final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_GbxInputEvent_6) == 0x000004, "Wrong alignment on BP_InputComponent_SDUCase_C_GbxInputEvent_6");
static_assert(sizeof(BP_InputComponent_SDUCase_C_GbxInputEvent_6) == 0x000010, "Wrong size on BP_InputComponent_SDUCase_C_GbxInputEvent_6");
static_assert(offsetof(BP_InputComponent_SDUCase_C_GbxInputEvent_6, Val) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_GbxInputEvent_6::Val' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_GbxInputEvent_6, bGamePad) == 0x00000C, "Member 'BP_InputComponent_SDUCase_C_GbxInputEvent_6::bGamePad' has a wrong offset!");

// Function BP_InputComponent_SDUCase.BP_InputComponent_SDUCase_C.ExecuteUbergraph_BP_InputComponent_SDUCase
// 0x00B0 (0x00B0 - 0x0000)
struct BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay15;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay14;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay13;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay12;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay11;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay10;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay9;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay8;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay7;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay6;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay5;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay4;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay3;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay2;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay1;                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Val2;                           // 0x0044(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bGamepad2;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Val1;                           // 0x0054(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bGamepad1;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Val;                            // 0x0064(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bGamepad;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASDUCaseProxy*                          K2Node_DynamicCast_AsSDUCase_Proxy;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay3; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay2; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay1; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_GbxInputEvent_OakUIAxis_Val;                // 0x009C(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_GbxInputEvent_OakUIAxis_bGamepad;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase) == 0x000008, "Wrong alignment on BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase");
static_assert(sizeof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase) == 0x0000B0, "Wrong size on BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, EntryPoint) == 0x000000, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay15) == 0x000004, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay15' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay14) == 0x000008, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay14' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay13) == 0x00000C, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay13' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay12) == 0x000010, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay12' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay11) == 0x000014, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay11' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay10) == 0x000018, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay10' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay9) == 0x00001C, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay9' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay8) == 0x000020, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay8' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay7) == 0x000024, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay7' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay6) == 0x000028, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay6' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay5) == 0x00002C, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay5' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay4) == 0x000030, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay4' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay3) == 0x000034, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay3' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay2) == 0x000038, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay2' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay1) == 0x00003C, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay1' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_NextPulseDelay) == 0x000040, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_NextPulseDelay' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_Val2) == 0x000044, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_Val2' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_bGamepad2) == 0x000050, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_bGamepad2' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_Val1) == 0x000054, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_Val1' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_bGamepad1) == 0x000060, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_bGamepad1' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_Val) == 0x000064, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_Val' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_CustomEvent_bGamepad) == 0x000070, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_CustomEvent_bGamepad' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, CallFunc_GetOwner_ReturnValue) == 0x000078, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_DynamicCast_AsSDUCase_Proxy) == 0x000080, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_DynamicCast_AsSDUCase_Proxy' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay3) == 0x00008C, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay3' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay2) == 0x000090, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay2' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay1) == 0x000094, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay1' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay) == 0x000098, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_GbxInputEvent_OakUIAxis_Val) == 0x00009C, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_GbxInputEvent_OakUIAxis_Val' has a wrong offset!");
static_assert(offsetof(BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase, K2Node_GbxInputEvent_OakUIAxis_bGamepad) == 0x0000A8, "Member 'BP_InputComponent_SDUCase_C_ExecuteUbergraph_BP_InputComponent_SDUCase::K2Node_GbxInputEvent_OakUIAxis_bGamepad' has a wrong offset!");

}

