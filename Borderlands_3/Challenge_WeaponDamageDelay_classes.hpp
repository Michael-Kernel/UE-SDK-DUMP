#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_WeaponDamageDelay

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Challenge_WeaponDamageDelay.Challenge_WeaponDamageDelay_C
// 0x0058 (0x02B8 - 0x0260)
class UChallenge_WeaponDamageDelay_C final : public UOakChallenge
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(Transient, DuplicateTransient)
	class AOakCharacter_Player*                   ChallengeCharacter;                                // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakWeapon*                             MyWeapon;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireWeaponType;                                 // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RequiredWeaponType;                                // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireManufacturer;                               // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RequiredManufacturer;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireCrit;                                       // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamagedActor;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamagingActor;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Require_Hostile;                                   // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Challenge_WeaponDamageDelay(int32 EntryPoint);
	void CheckDamageDealt(class AActor* DamageInstigator, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AActor* DamagedActor_0, const struct FCausedDamageDetails& Details);

	void OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter) const;
	void SetBinds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Challenge_WeaponDamageDelay_C">();
	}
	static class UChallenge_WeaponDamageDelay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallenge_WeaponDamageDelay_C>();
	}
};
static_assert(alignof(UChallenge_WeaponDamageDelay_C) == 0x000008, "Wrong alignment on UChallenge_WeaponDamageDelay_C");
static_assert(sizeof(UChallenge_WeaponDamageDelay_C) == 0x0002B8, "Wrong size on UChallenge_WeaponDamageDelay_C");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, UberGraphFrame) == 0x000260, "Member 'UChallenge_WeaponDamageDelay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, ChallengeCharacter) == 0x000268, "Member 'UChallenge_WeaponDamageDelay_C::ChallengeCharacter' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, MyWeapon) == 0x000270, "Member 'UChallenge_WeaponDamageDelay_C::MyWeapon' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, RequireWeaponType) == 0x000278, "Member 'UChallenge_WeaponDamageDelay_C::RequireWeaponType' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, RequiredWeaponType) == 0x000280, "Member 'UChallenge_WeaponDamageDelay_C::RequiredWeaponType' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, RequireManufacturer) == 0x000288, "Member 'UChallenge_WeaponDamageDelay_C::RequireManufacturer' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, RequiredManufacturer) == 0x000290, "Member 'UChallenge_WeaponDamageDelay_C::RequiredManufacturer' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, RequireCrit) == 0x000298, "Member 'UChallenge_WeaponDamageDelay_C::RequireCrit' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, DamagedActor) == 0x0002A0, "Member 'UChallenge_WeaponDamageDelay_C::DamagedActor' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, DamagingActor) == 0x0002A8, "Member 'UChallenge_WeaponDamageDelay_C::DamagingActor' has a wrong offset!");
static_assert(offsetof(UChallenge_WeaponDamageDelay_C, Require_Hostile) == 0x0002B0, "Member 'UChallenge_WeaponDamageDelay_C::Require_Hostile' has a wrong offset!");

}

