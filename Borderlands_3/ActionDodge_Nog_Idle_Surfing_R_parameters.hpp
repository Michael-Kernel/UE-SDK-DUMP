#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActionDodge_Nog_Idle_Surfing_R

#include "Basic.hpp"

#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function ActionDodge_Nog_Idle_Surfing_R.ActionDodge_Nog_Idle_Surfing_R_C.ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R
// 0x0058 (0x0058 - 0x0000)
struct ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Nog_C>            K2Node_DynamicCast_AsBPI_Nog;                      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGbxActionEndState                            K2Node_Event_ActionEndState;                       // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Actor;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Nog_C>            K2Node_DynamicCast_AsBPI_Nog1;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Nog_C>            K2Node_DynamicCast_AsBPI_Nog2;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R) == 0x000008, "Wrong alignment on ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R");
static_assert(sizeof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R) == 0x000058, "Wrong size on ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, EntryPoint) == 0x000000, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::EntryPoint' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_DynamicCast_AsBPI_Nog) == 0x000008, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_DynamicCast_AsBPI_Nog' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000019, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, Temp_bool_Has_Been_Initd_Variable) == 0x00001A, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, Temp_bool_IsClosed_Variable) == 0x00001B, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_Event_ActionEndState) == 0x00001C, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_Event_ActionEndState' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_Event_Actor) == 0x000020, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_Event_Actor' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_DynamicCast_AsBPI_Nog1) == 0x000028, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_DynamicCast_AsBPI_Nog1' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_DynamicCast_AsBPI_Nog2) == 0x000040, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_DynamicCast_AsBPI_Nog2' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R, K2Node_DynamicCast_bSuccess2) == 0x000050, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_ExecuteUbergraph_ActionDodge_Nog_Idle_Surfing_R::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

// Function ActionDodge_Nog_Idle_Surfing_R.ActionDodge_Nog_Idle_Surfing_R_C.OnEnd
// 0x0010 (0x0010 - 0x0000)
struct ActionDodge_Nog_Idle_Surfing_R_C_OnEnd final
{
public:
	EGbxActionEndState                            ActionEndState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActionDodge_Nog_Idle_Surfing_R_C_OnEnd) == 0x000008, "Wrong alignment on ActionDodge_Nog_Idle_Surfing_R_C_OnEnd");
static_assert(sizeof(ActionDodge_Nog_Idle_Surfing_R_C_OnEnd) == 0x000010, "Wrong size on ActionDodge_Nog_Idle_Surfing_R_C_OnEnd");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_OnEnd, ActionEndState) == 0x000000, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_OnEnd::ActionEndState' has a wrong offset!");
static_assert(offsetof(ActionDodge_Nog_Idle_Surfing_R_C_OnEnd, Actor) == 0x000008, "Member 'ActionDodge_Nog_Idle_Surfing_R_C_OnEnd::Actor' has a wrong offset!");

}

