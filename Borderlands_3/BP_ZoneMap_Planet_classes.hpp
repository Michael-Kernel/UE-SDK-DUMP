#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZoneMap_Planet

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ZoneMap_Planet.BP_ZoneMap_Planet_C
// 0x0148 (0x05C0 - 0x0478)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_ZoneMap_Planet_C : public AZoneMapPlanetViewer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0478(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Space;                                             // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SpaceRoot;                                         // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Atmosphere;                                        // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Planet;                                            // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PlanetRoot;                                        // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Animate_Orbital_Components_FOV_Alpha_876AF08540DB19B150D273AB90428E97; // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Animate_Orbital_Components_Space_Rotation_Alpha_876AF08540DB19B150D273AB90428E97; // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Animate_Orbital_Components_Planet_Offset_Alpha_876AF08540DB19B150D273AB90428E97; // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Animate_Orbital_Components__Direction_876AF08540DB19B150D273AB90428E97; // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5[0x3];                                      // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Animate_Orbital_Components;                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha_Value;                                       // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Planet_Surface_DMI;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Particle_Grid_DMI;                                 // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DecoRings;                                         // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Ring_Deco_DMI;                                     // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Atmosphere_DMI;                                    // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Space_DMI;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Offset;                                   // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Desired_Transform;                                 // 0x0510(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Delta_Seconds;                                     // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Cirrus_DMI;                                        // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Color;                                         // 0x0550(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Brightness;                                    // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Radius;                                        // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         World_Scale;                                       // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mie_Scale_Height;                                  // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Raleigh_Factor;                                    // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Planet_Radius;                                     // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmosphere_Radius;                                 // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Space_Rotation;                                    // 0x057C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          Invert_Space_Rotation;                             // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_589[0x3];                                      // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Initial_Space_Rotation;                            // 0x058C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          Debug;                                             // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Planet_Material_Override;                          // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Atmosphere_Material_Override;                      // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Space_Material_Override;                           // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ZoneMap_Planet(int32 EntryPoint);
	void Stop_Animation();
	void Update();
	void Initialize_Planet();
	void ReceiveDestroyed();
	void Interrupt_Transition_Out();
	void Transition_Out();
	void Interrupt_Transition_In();
	void Transition_In();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Animate_Orbital_Components__UpdateFunc();
	void Animate_Orbital_Components__FinishedFunc();
	void UserConstructionScript();
	void Initialize();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ZoneMap_Planet_C">();
	}
	static class ABP_ZoneMap_Planet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ZoneMap_Planet_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_ZoneMap_Planet_C) == 0x000010, "Wrong alignment on ABP_ZoneMap_Planet_C");
static_assert(sizeof(ABP_ZoneMap_Planet_C) == 0x0005C0, "Wrong size on ABP_ZoneMap_Planet_C");
static_assert(offsetof(ABP_ZoneMap_Planet_C, UberGraphFrame) == 0x000478, "Member 'ABP_ZoneMap_Planet_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Space) == 0x000480, "Member 'ABP_ZoneMap_Planet_C::Space' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, DirectionalLight) == 0x000488, "Member 'ABP_ZoneMap_Planet_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, SpaceRoot) == 0x000490, "Member 'ABP_ZoneMap_Planet_C::SpaceRoot' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Atmosphere) == 0x000498, "Member 'ABP_ZoneMap_Planet_C::Atmosphere' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Planet) == 0x0004A0, "Member 'ABP_ZoneMap_Planet_C::Planet' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, PlanetRoot) == 0x0004A8, "Member 'ABP_ZoneMap_Planet_C::PlanetRoot' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, DefaultSceneRoot) == 0x0004B0, "Member 'ABP_ZoneMap_Planet_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Animate_Orbital_Components_FOV_Alpha_876AF08540DB19B150D273AB90428E97) == 0x0004B8, "Member 'ABP_ZoneMap_Planet_C::Animate_Orbital_Components_FOV_Alpha_876AF08540DB19B150D273AB90428E97' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Animate_Orbital_Components_Space_Rotation_Alpha_876AF08540DB19B150D273AB90428E97) == 0x0004BC, "Member 'ABP_ZoneMap_Planet_C::Animate_Orbital_Components_Space_Rotation_Alpha_876AF08540DB19B150D273AB90428E97' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Animate_Orbital_Components_Planet_Offset_Alpha_876AF08540DB19B150D273AB90428E97) == 0x0004C0, "Member 'ABP_ZoneMap_Planet_C::Animate_Orbital_Components_Planet_Offset_Alpha_876AF08540DB19B150D273AB90428E97' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Animate_Orbital_Components__Direction_876AF08540DB19B150D273AB90428E97) == 0x0004C4, "Member 'ABP_ZoneMap_Planet_C::Animate_Orbital_Components__Direction_876AF08540DB19B150D273AB90428E97' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Animate_Orbital_Components) == 0x0004C8, "Member 'ABP_ZoneMap_Planet_C::Animate_Orbital_Components' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Alpha_Value) == 0x0004D0, "Member 'ABP_ZoneMap_Planet_C::Alpha_Value' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Planet_Surface_DMI) == 0x0004D8, "Member 'ABP_ZoneMap_Planet_C::Planet_Surface_DMI' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Particle_Grid_DMI) == 0x0004E0, "Member 'ABP_ZoneMap_Planet_C::Particle_Grid_DMI' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, DecoRings) == 0x0004E8, "Member 'ABP_ZoneMap_Planet_C::DecoRings' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Ring_Deco_DMI) == 0x0004F0, "Member 'ABP_ZoneMap_Planet_C::Ring_Deco_DMI' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Atmosphere_DMI) == 0x0004F8, "Member 'ABP_ZoneMap_Planet_C::Atmosphere_DMI' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Space_DMI) == 0x000500, "Member 'ABP_ZoneMap_Planet_C::Space_DMI' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Rotation_Offset) == 0x000508, "Member 'ABP_ZoneMap_Planet_C::Rotation_Offset' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Desired_Transform) == 0x000510, "Member 'ABP_ZoneMap_Planet_C::Desired_Transform' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Delta_Seconds) == 0x000540, "Member 'ABP_ZoneMap_Planet_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Cirrus_DMI) == 0x000548, "Member 'ABP_ZoneMap_Planet_C::Cirrus_DMI' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Sun_Color) == 0x000550, "Member 'ABP_ZoneMap_Planet_C::Sun_Color' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Sun_Brightness) == 0x000560, "Member 'ABP_ZoneMap_Planet_C::Sun_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Sun_Radius) == 0x000564, "Member 'ABP_ZoneMap_Planet_C::Sun_Radius' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, World_Scale) == 0x000568, "Member 'ABP_ZoneMap_Planet_C::World_Scale' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Mie_Scale_Height) == 0x00056C, "Member 'ABP_ZoneMap_Planet_C::Mie_Scale_Height' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Raleigh_Factor) == 0x000570, "Member 'ABP_ZoneMap_Planet_C::Raleigh_Factor' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Planet_Radius) == 0x000574, "Member 'ABP_ZoneMap_Planet_C::Planet_Radius' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Atmosphere_Radius) == 0x000578, "Member 'ABP_ZoneMap_Planet_C::Atmosphere_Radius' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Space_Rotation) == 0x00057C, "Member 'ABP_ZoneMap_Planet_C::Space_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Invert_Space_Rotation) == 0x000588, "Member 'ABP_ZoneMap_Planet_C::Invert_Space_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Initial_Space_Rotation) == 0x00058C, "Member 'ABP_ZoneMap_Planet_C::Initial_Space_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Debug) == 0x000598, "Member 'ABP_ZoneMap_Planet_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Planet_Material_Override) == 0x0005A0, "Member 'ABP_ZoneMap_Planet_C::Planet_Material_Override' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Atmosphere_Material_Override) == 0x0005A8, "Member 'ABP_ZoneMap_Planet_C::Atmosphere_Material_Override' has a wrong offset!");
static_assert(offsetof(ABP_ZoneMap_Planet_C, Space_Material_Override) == 0x0005B0, "Member 'ABP_ZoneMap_Planet_C::Space_Material_Override' has a wrong offset!");

}

