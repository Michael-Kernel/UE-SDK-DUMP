#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPEventHub_Operative

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "EOperativeGadgets_structs.hpp"
#include "EOperativeGadgetAugments_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPEventHub_Operative.BPEventHub_Operative_C
// 0x0070 (0x0110 - 0x00A0)
class UBPEventHub_Operative_C final : public UOakPlayerAbilityEventHub_Operative
{
public:
	UMulticastDelegateProperty_                   OnSeeingRedActivated;                              // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillEvent_OperativeActionSkillActivated;          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillEvent_OperativeGadgetModActivated;            // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillEvent_OperativeActionSkillEnded;              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillEvent_OperativeSwappedPlaces;                 // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillEvent_OperativeUsedBarrier;                   // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillEvent_OperativeSetDroneManualTarget;          // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnSeeingRedActivated__DelegateSignature();
	void SkillEvent_OperativeActionSkillActivated__DelegateSignature(EOperativeGadgets ActionSkill);
	void SkillEvent_OperativeGadgetModActivated__DelegateSignature(EOperativeGadgetAugments ActionSkillMod);
	void SkillEvent_OperativeActionSkillEnded__DelegateSignature(EOperativeGadgets ActionSkill);
	void SkillEvent_OperativeSwappedPlaces__DelegateSignature();
	void SkillEvent_OperativeUsedBarrier__DelegateSignature(bool PickedUp);
	void SkillEvent_OperativeSetDroneManualTarget__DelegateSignature(class AActor* NewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPEventHub_Operative_C">();
	}
	static class UBPEventHub_Operative_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPEventHub_Operative_C>();
	}
};
static_assert(alignof(UBPEventHub_Operative_C) == 0x000008, "Wrong alignment on UBPEventHub_Operative_C");
static_assert(sizeof(UBPEventHub_Operative_C) == 0x000110, "Wrong size on UBPEventHub_Operative_C");
static_assert(offsetof(UBPEventHub_Operative_C, OnSeeingRedActivated) == 0x0000A0, "Member 'UBPEventHub_Operative_C::OnSeeingRedActivated' has a wrong offset!");
static_assert(offsetof(UBPEventHub_Operative_C, SkillEvent_OperativeActionSkillActivated) == 0x0000B0, "Member 'UBPEventHub_Operative_C::SkillEvent_OperativeActionSkillActivated' has a wrong offset!");
static_assert(offsetof(UBPEventHub_Operative_C, SkillEvent_OperativeGadgetModActivated) == 0x0000C0, "Member 'UBPEventHub_Operative_C::SkillEvent_OperativeGadgetModActivated' has a wrong offset!");
static_assert(offsetof(UBPEventHub_Operative_C, SkillEvent_OperativeActionSkillEnded) == 0x0000D0, "Member 'UBPEventHub_Operative_C::SkillEvent_OperativeActionSkillEnded' has a wrong offset!");
static_assert(offsetof(UBPEventHub_Operative_C, SkillEvent_OperativeSwappedPlaces) == 0x0000E0, "Member 'UBPEventHub_Operative_C::SkillEvent_OperativeSwappedPlaces' has a wrong offset!");
static_assert(offsetof(UBPEventHub_Operative_C, SkillEvent_OperativeUsedBarrier) == 0x0000F0, "Member 'UBPEventHub_Operative_C::SkillEvent_OperativeUsedBarrier' has a wrong offset!");
static_assert(offsetof(UBPEventHub_Operative_C, SkillEvent_OperativeSetDroneManualTarget) == 0x000100, "Member 'UBPEventHub_Operative_C::SkillEvent_OperativeSetDroneManualTarget' has a wrong offset!");

}

