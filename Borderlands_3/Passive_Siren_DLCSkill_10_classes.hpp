#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Passive_Siren_DLCSkill_10

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxAbilities_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Passive_Siren_DLCSkill_10.Passive_Siren_DLCSkill_10_C
// 0x0088 (0x0238 - 0x01B0)
class UPassive_Siren_DLCSkill_10_C final : public UOakPassiveAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(Transient, DuplicateTransient)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Siren_DLCSkill_10; // 0x01B8(0x0028)()
	struct FDataTableValueHandle                  EffectDuration;                                    // 0x01E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableValueHandle                  DamageCalc;                                        // 0x01F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UClass*                                 AttunedElement;                                    // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UExplosionData*                         ExplosionData;                                     // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableValueHandle                  SplashRadius;                                      // 0x0220(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_Passive_Siren_DLCSkill_10(int32 EntryPoint);
	void SetupData();
	void DLCSkill10_OnCausedAnyDamage(class AActor* DamageInstigator, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details);
	void DLCSkill10_OnCausedDeath(const class UDamageComponent* Damaged, const struct FCausedDeathDetails& Details);
	void OnActivated();
	EGbxAbilityState CalculateAbilityState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Passive_Siren_DLCSkill_10_C">();
	}
	static class UPassive_Siren_DLCSkill_10_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPassive_Siren_DLCSkill_10_C>();
	}
};
static_assert(alignof(UPassive_Siren_DLCSkill_10_C) == 0x000008, "Wrong alignment on UPassive_Siren_DLCSkill_10_C");
static_assert(sizeof(UPassive_Siren_DLCSkill_10_C) == 0x000238, "Wrong size on UPassive_Siren_DLCSkill_10_C");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, UberGraphFrame) == 0x0001B0, "Member 'UPassive_Siren_DLCSkill_10_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Siren_DLCSkill_10) == 0x0001B8, "Member 'UPassive_Siren_DLCSkill_10_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Siren_DLCSkill_10' has a wrong offset!");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, EffectDuration) == 0x0001E0, "Member 'UPassive_Siren_DLCSkill_10_C::EffectDuration' has a wrong offset!");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, DamageCalc) == 0x0001F8, "Member 'UPassive_Siren_DLCSkill_10_C::DamageCalc' has a wrong offset!");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, AttunedElement) == 0x000210, "Member 'UPassive_Siren_DLCSkill_10_C::AttunedElement' has a wrong offset!");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, ExplosionData) == 0x000218, "Member 'UPassive_Siren_DLCSkill_10_C::ExplosionData' has a wrong offset!");
static_assert(offsetof(UPassive_Siren_DLCSkill_10_C, SplashRadius) == 0x000220, "Member 'UPassive_Siren_DLCSkill_10_C::SplashRadius' has a wrong offset!");

}

