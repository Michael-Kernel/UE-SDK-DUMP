#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AIStolenProj

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_AIThrowAtStyle_structs.hpp"


namespace SDK::Params
{

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_AttemptDisarm
// 0x0001 (0x0001 - 0x0000)
struct BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm) == 0x000001, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm) == 0x000001, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm, Success) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptDisarm::Success' has a wrong offset!");

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_AttemptDestroy
// 0x0001 (0x0001 - 0x0000)
struct BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy) == 0x000001, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy) == 0x000001, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy, Success) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptDestroy::Success' has a wrong offset!");

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_AttemptAttach
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) BPI_AIStolenProj_C_AIStolenProj_AttemptAttach final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_AttemptAttach) == 0x000008, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_AttemptAttach");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_AttemptAttach) == 0x000010, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_AttemptAttach");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptAttach, SocketName) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptAttach::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptAttach, Success) == 0x000008, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptAttach::Success' has a wrong offset!");

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_AttemptReturnTo
// 0x0050 (0x0050 - 0x0000)
struct BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo final
{
public:
	Enum_AIThrowAtStyle                           ReturnTo;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPrediction;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglePercent;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DirectionOffset;                                   // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector                                TargetOffset;                                      // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpecifiedActor;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo) == 0x000008, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo) == 0x000050, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, ReturnTo) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::ReturnTo' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, TargetSocket) == 0x000008, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::TargetSocket' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, MaxPrediction) == 0x000010, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::MaxPrediction' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, Speed) == 0x000014, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::Speed' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, AnglePercent) == 0x000018, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::AnglePercent' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, DirectionOffset) == 0x00001C, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::DirectionOffset' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, TargetOffset) == 0x000028, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::TargetOffset' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, SpecifiedActor) == 0x000038, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::SpecifiedActor' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, WorldLocation) == 0x000040, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::WorldLocation' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo, Success) == 0x00004C, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptReturnTo::Success' has a wrong offset!");

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_AttemptLerpToSocket
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket final
{
public:
	class FName                                   SocketToLerpTo;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpDuration;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket) == 0x000008, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket) == 0x000010, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket, SocketToLerpTo) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket::SocketToLerpTo' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket, LerpDuration) == 0x000008, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket::LerpDuration' has a wrong offset!");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket, Success) == 0x00000C, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptLerpToSocket::Success' has a wrong offset!");

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_GetElementalTypeFromStolenProjectile
// 0x0001 (0x0001 - 0x0000)
struct BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile final
{
public:
	EOakElementalType                             StolenProjectileElement;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile) == 0x000001, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile) == 0x000001, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile, StolenProjectileElement) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_GetElementalTypeFromStolenProjectile::StolenProjectileElement' has a wrong offset!");

// Function BPI_AIStolenProj.BPI_AIStolenProj_C.AIStolenProj_AttemptDetonate
// 0x0001 (0x0001 - 0x0000)
struct BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate) == 0x000001, "Wrong alignment on BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate");
static_assert(sizeof(BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate) == 0x000001, "Wrong size on BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate");
static_assert(offsetof(BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate, Success) == 0x000000, "Member 'BPI_AIStolenProj_C_AIStolenProj_AttemptDetonate::Success' has a wrong offset!");

}

