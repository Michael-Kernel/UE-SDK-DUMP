#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_WeaponDamageDelay

#include "Basic.hpp"

#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function Challenge_WeaponDamageDelay.Challenge_WeaponDamageDelay_C.ExecuteUbergraph_Challenge_WeaponDamageDelay
// 0x00C8 (0x00C8 - 0x0000)
struct Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DamageInstigator;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Damage;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGbxDamageType*                   K2Node_CustomEvent_DamageType;                     // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageSource*                    K2Node_CustomEvent_DamageSource;                   // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamagedActor;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCausedDamageDetails                   K2Node_CustomEvent_Details;                        // 0x0030(0x0060)(ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakWeapon*                             K2Node_DynamicCast_AsOak_Weapon;                   // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UManufacturerData*                      CallFunc_GetManufacturer_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTargetableComponent*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHostile_ReturnValue;                    // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay) == 0x000008, "Wrong alignment on Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay");
static_assert(sizeof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay) == 0x0000C8, "Wrong size on Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, EntryPoint) == 0x000000, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_CustomEvent_DamageInstigator) == 0x000008, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_CustomEvent_DamageInstigator' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_CustomEvent_Damage) == 0x000010, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_CustomEvent_DamageType) == 0x000018, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_CustomEvent_DamageType' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_CustomEvent_DamageSource) == 0x000020, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_CustomEvent_DamageSource' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_CustomEvent_DamagedActor) == 0x000028, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_CustomEvent_DamagedActor' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_CustomEvent_Details) == 0x000030, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_CustomEvent_Details' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_DynamicCast_AsOak_Weapon) == 0x000098, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_DynamicCast_AsOak_Weapon' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanAND_ReturnValue) == 0x0000A2, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, Temp_bool_IsClosed_Variable) == 0x0000A3, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanOR_ReturnValue) == 0x0000A4, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_Not_PreBool_ReturnValue1) == 0x0000A5, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_Not_PreBool_ReturnValue2) == 0x0000A6, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_GetManufacturer_ReturnValue) == 0x0000A8, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_GetManufacturer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000B0, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x0000B1, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanAND_ReturnValue1) == 0x0000B2, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanAND_ReturnValue2) == 0x0000B3, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanOR_ReturnValue1) == 0x0000B4, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanOR_ReturnValue2) == 0x0000B5, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_GetComponentByClass_ReturnValue) == 0x0000B8, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_IsValid_ReturnValue1) == 0x0000C0, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_Not_PreBool_ReturnValue3) == 0x0000C1, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_IsHostile_ReturnValue) == 0x0000C2, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_IsHostile_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanAND_ReturnValue3) == 0x0000C3, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay, CallFunc_BooleanOR_ReturnValue3) == 0x0000C4, "Member 'Challenge_WeaponDamageDelay_C_ExecuteUbergraph_Challenge_WeaponDamageDelay::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");

// Function Challenge_WeaponDamageDelay.Challenge_WeaponDamageDelay_C.CheckDamageDealt
// 0x0088 (0x0088 - 0x0000)
struct Challenge_WeaponDamageDelay_C_CheckDamageDealt final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGbxDamageType*                   DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageSource*                    DamageSource;                                      // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamagedActor_0;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCausedDamageDetails                   Details;                                           // 0x0028(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(Challenge_WeaponDamageDelay_C_CheckDamageDealt) == 0x000008, "Wrong alignment on Challenge_WeaponDamageDelay_C_CheckDamageDealt");
static_assert(sizeof(Challenge_WeaponDamageDelay_C_CheckDamageDealt) == 0x000088, "Wrong size on Challenge_WeaponDamageDelay_C_CheckDamageDealt");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_CheckDamageDealt, DamageInstigator) == 0x000000, "Member 'Challenge_WeaponDamageDelay_C_CheckDamageDealt::DamageInstigator' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_CheckDamageDealt, Damage) == 0x000008, "Member 'Challenge_WeaponDamageDelay_C_CheckDamageDealt::Damage' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_CheckDamageDealt, DamageType) == 0x000010, "Member 'Challenge_WeaponDamageDelay_C_CheckDamageDealt::DamageType' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_CheckDamageDealt, DamageSource) == 0x000018, "Member 'Challenge_WeaponDamageDelay_C_CheckDamageDealt::DamageSource' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_CheckDamageDealt, DamagedActor_0) == 0x000020, "Member 'Challenge_WeaponDamageDelay_C_CheckDamageDealt::DamagedActor_0' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_CheckDamageDealt, Details) == 0x000028, "Member 'Challenge_WeaponDamageDelay_C_CheckDamageDealt::Details' has a wrong offset!");

// Function Challenge_WeaponDamageDelay.Challenge_WeaponDamageDelay_C.OnInitChallengeInstance
// 0x0010 (0x0010 - 0x0000)
struct Challenge_WeaponDamageDelay_C_OnInitChallengeInstance final
{
public:
	class UChallengesComponent*                   OwningChallenges;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          AssociatedCharacter;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_WeaponDamageDelay_C_OnInitChallengeInstance) == 0x000008, "Wrong alignment on Challenge_WeaponDamageDelay_C_OnInitChallengeInstance");
static_assert(sizeof(Challenge_WeaponDamageDelay_C_OnInitChallengeInstance) == 0x000010, "Wrong size on Challenge_WeaponDamageDelay_C_OnInitChallengeInstance");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_OnInitChallengeInstance, OwningChallenges) == 0x000000, "Member 'Challenge_WeaponDamageDelay_C_OnInitChallengeInstance::OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_OnInitChallengeInstance, AssociatedCharacter) == 0x000008, "Member 'Challenge_WeaponDamageDelay_C_OnInitChallengeInstance::AssociatedCharacter' has a wrong offset!");

// Function Challenge_WeaponDamageDelay.Challenge_WeaponDamageDelay_C.SetBinds
// 0x0028 (0x0028 - 0x0000)
struct Challenge_WeaponDamageDelay_C_SetBinds final
{
public:
	TDelegate<void(class AActor* DamageInstigator, float Damage, class UGbxDamageType* DamageType, class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_WeaponDamageDelay_C_SetBinds) == 0x000008, "Wrong alignment on Challenge_WeaponDamageDelay_C_SetBinds");
static_assert(sizeof(Challenge_WeaponDamageDelay_C_SetBinds) == 0x000028, "Wrong size on Challenge_WeaponDamageDelay_C_SetBinds");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_SetBinds, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'Challenge_WeaponDamageDelay_C_SetBinds::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_SetBinds, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'Challenge_WeaponDamageDelay_C_SetBinds::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_SetBinds, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000018, "Member 'Challenge_WeaponDamageDelay_C_SetBinds::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_WeaponDamageDelay_C_SetBinds, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Challenge_WeaponDamageDelay_C_SetBinds::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

