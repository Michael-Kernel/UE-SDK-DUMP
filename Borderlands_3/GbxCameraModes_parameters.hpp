#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxCameraModes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GbxCameraModes.CameraBehavior.End
// 0x0008 (0x0008 - 0x0000)
struct CameraBehavior_End final
{
public:
	class UCameraState*                           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBehavior_End) == 0x000008, "Wrong alignment on CameraBehavior_End");
static_assert(sizeof(CameraBehavior_End) == 0x000008, "Wrong size on CameraBehavior_End");
static_assert(offsetof(CameraBehavior_End, State) == 0x000000, "Member 'CameraBehavior_End::State' has a wrong offset!");

// Function GbxCameraModes.CameraBehavior.Start
// 0x0008 (0x0008 - 0x0000)
struct CameraBehavior_Start final
{
public:
	class UCameraState*                           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBehavior_Start) == 0x000008, "Wrong alignment on CameraBehavior_Start");
static_assert(sizeof(CameraBehavior_Start) == 0x000008, "Wrong size on CameraBehavior_Start");
static_assert(offsetof(CameraBehavior_Start, State) == 0x000000, "Member 'CameraBehavior_Start::State' has a wrong offset!");

// Function GbxCameraModes.CameraBehavior.Update
// 0x0010 (0x0010 - 0x0000)
struct CameraBehavior_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraState*                           State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBehavior_Update) == 0x000008, "Wrong alignment on CameraBehavior_Update");
static_assert(sizeof(CameraBehavior_Update) == 0x000010, "Wrong size on CameraBehavior_Update");
static_assert(offsetof(CameraBehavior_Update, DeltaTime) == 0x000000, "Member 'CameraBehavior_Update::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraBehavior_Update, State) == 0x000008, "Member 'CameraBehavior_Update::State' has a wrong offset!");

// Function GbxCameraModes.PlayerCameraModesManager.UpdateCameraShakeFromFeedback
// 0x0060 (0x0060 - 0x0000)
struct PlayerCameraModesManager_UpdateCameraShakeFromFeedback final
{
public:
	struct FActiveTrackedFeedback                 TrackedFeedback;                                   // 0x0000(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCameraModesManager_UpdateCameraShakeFromFeedback) == 0x000008, "Wrong alignment on PlayerCameraModesManager_UpdateCameraShakeFromFeedback");
static_assert(sizeof(PlayerCameraModesManager_UpdateCameraShakeFromFeedback) == 0x000060, "Wrong size on PlayerCameraModesManager_UpdateCameraShakeFromFeedback");
static_assert(offsetof(PlayerCameraModesManager_UpdateCameraShakeFromFeedback, TrackedFeedback) == 0x000000, "Member 'PlayerCameraModesManager_UpdateCameraShakeFromFeedback::TrackedFeedback' has a wrong offset!");

// Function GbxCameraModes.PlayerCameraModesManager.UpdateCameraShakeFromGbxFeedback
// 0x0068 (0x0068 - 0x0000)
struct PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback final
{
public:
	struct FActiveGbxFeedbackEffect               TrackedFeedback;                                   // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback) == 0x000008, "Wrong alignment on PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback");
static_assert(sizeof(PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback) == 0x000068, "Wrong size on PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback");
static_assert(offsetof(PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback, TrackedFeedback) == 0x000000, "Member 'PlayerCameraModesManager_UpdateCameraShakeFromGbxFeedback::TrackedFeedback' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.AddCameraModeSet
// 0x0010 (0x0010 - 0x0000)
struct CameraModesFunctionLibrary_AddCameraModeSet final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModeSetData*                     ModeSet;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModesFunctionLibrary_AddCameraModeSet) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_AddCameraModeSet");
static_assert(sizeof(CameraModesFunctionLibrary_AddCameraModeSet) == 0x000010, "Wrong size on CameraModesFunctionLibrary_AddCameraModeSet");
static_assert(offsetof(CameraModesFunctionLibrary_AddCameraModeSet, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_AddCameraModeSet::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_AddCameraModeSet, ModeSet) == 0x000008, "Member 'CameraModesFunctionLibrary_AddCameraModeSet::ModeSet' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.ApplyCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct CameraModesFunctionLibrary_ApplyCameraRotation final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRotation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModesFunctionLibrary_ApplyCameraRotation) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_ApplyCameraRotation");
static_assert(sizeof(CameraModesFunctionLibrary_ApplyCameraRotation) == 0x000018, "Wrong size on CameraModesFunctionLibrary_ApplyCameraRotation");
static_assert(offsetof(CameraModesFunctionLibrary_ApplyCameraRotation, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_ApplyCameraRotation::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_ApplyCameraRotation, DeltaRotation) == 0x000008, "Member 'CameraModesFunctionLibrary_ApplyCameraRotation::DeltaRotation' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.PopCameraMode
// 0x0018 (0x0018 - 0x0000)
struct CameraModesFunctionLibrary_PopCameraMode final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModeName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeOverride;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModesFunctionLibrary_PopCameraMode) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_PopCameraMode");
static_assert(sizeof(CameraModesFunctionLibrary_PopCameraMode) == 0x000018, "Wrong size on CameraModesFunctionLibrary_PopCameraMode");
static_assert(offsetof(CameraModesFunctionLibrary_PopCameraMode, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_PopCameraMode::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_PopCameraMode, ModeName) == 0x000008, "Member 'CameraModesFunctionLibrary_PopCameraMode::ModeName' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_PopCameraMode, BlendTimeOverride) == 0x000010, "Member 'CameraModesFunctionLibrary_PopCameraMode::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_PopCameraMode, bTeleport) == 0x000014, "Member 'CameraModesFunctionLibrary_PopCameraMode::bTeleport' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.PushCameraMode
// 0x0018 (0x0018 - 0x0000)
struct CameraModesFunctionLibrary_PushCameraMode final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModeName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeOverride;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModesFunctionLibrary_PushCameraMode) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_PushCameraMode");
static_assert(sizeof(CameraModesFunctionLibrary_PushCameraMode) == 0x000018, "Wrong size on CameraModesFunctionLibrary_PushCameraMode");
static_assert(offsetof(CameraModesFunctionLibrary_PushCameraMode, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_PushCameraMode::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_PushCameraMode, ModeName) == 0x000008, "Member 'CameraModesFunctionLibrary_PushCameraMode::ModeName' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_PushCameraMode, BlendTimeOverride) == 0x000010, "Member 'CameraModesFunctionLibrary_PushCameraMode::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_PushCameraMode, bTeleport) == 0x000014, "Member 'CameraModesFunctionLibrary_PushCameraMode::bTeleport' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.RemoveCameraModeSet
// 0x0010 (0x0010 - 0x0000)
struct CameraModesFunctionLibrary_RemoveCameraModeSet final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModeSetData*                     ModeSet;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModesFunctionLibrary_RemoveCameraModeSet) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_RemoveCameraModeSet");
static_assert(sizeof(CameraModesFunctionLibrary_RemoveCameraModeSet) == 0x000010, "Wrong size on CameraModesFunctionLibrary_RemoveCameraModeSet");
static_assert(offsetof(CameraModesFunctionLibrary_RemoveCameraModeSet, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_RemoveCameraModeSet::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_RemoveCameraModeSet, ModeSet) == 0x000008, "Member 'CameraModesFunctionLibrary_RemoveCameraModeSet::ModeSet' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.ResetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct CameraModesFunctionLibrary_ResetCameraRotation final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModesFunctionLibrary_ResetCameraRotation) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_ResetCameraRotation");
static_assert(sizeof(CameraModesFunctionLibrary_ResetCameraRotation) == 0x000018, "Wrong size on CameraModesFunctionLibrary_ResetCameraRotation");
static_assert(offsetof(CameraModesFunctionLibrary_ResetCameraRotation, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_ResetCameraRotation::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_ResetCameraRotation, NewRotation) == 0x000008, "Member 'CameraModesFunctionLibrary_ResetCameraRotation::NewRotation' has a wrong offset!");

// Function GbxCameraModes.CameraModesFunctionLibrary.SetCameraMode
// 0x0018 (0x0018 - 0x0000)
struct CameraModesFunctionLibrary_SetCameraMode final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModeName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeOverride;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceResetMode;                                   // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModesFunctionLibrary_SetCameraMode) == 0x000008, "Wrong alignment on CameraModesFunctionLibrary_SetCameraMode");
static_assert(sizeof(CameraModesFunctionLibrary_SetCameraMode) == 0x000018, "Wrong size on CameraModesFunctionLibrary_SetCameraMode");
static_assert(offsetof(CameraModesFunctionLibrary_SetCameraMode, Controller) == 0x000000, "Member 'CameraModesFunctionLibrary_SetCameraMode::Controller' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_SetCameraMode, ModeName) == 0x000008, "Member 'CameraModesFunctionLibrary_SetCameraMode::ModeName' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_SetCameraMode, BlendTimeOverride) == 0x000010, "Member 'CameraModesFunctionLibrary_SetCameraMode::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_SetCameraMode, bTeleport) == 0x000014, "Member 'CameraModesFunctionLibrary_SetCameraMode::bTeleport' has a wrong offset!");
static_assert(offsetof(CameraModesFunctionLibrary_SetCameraMode, bForceResetMode) == 0x000015, "Member 'CameraModesFunctionLibrary_SetCameraMode::bForceResetMode' has a wrong offset!");

// Function GbxCameraModes.CameraState.AddPostProcessBlend
// 0x0610 (0x0610 - 0x0000)
struct CameraState_AddPostProcessBlend final
{
public:
	struct FPostProcessSettings                   Settings;                                          // 0x0000(0x0600)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0600(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_604[0xC];                                      // 0x0604(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraState_AddPostProcessBlend) == 0x000010, "Wrong alignment on CameraState_AddPostProcessBlend");
static_assert(sizeof(CameraState_AddPostProcessBlend) == 0x000610, "Wrong size on CameraState_AddPostProcessBlend");
static_assert(offsetof(CameraState_AddPostProcessBlend, Settings) == 0x000000, "Member 'CameraState_AddPostProcessBlend::Settings' has a wrong offset!");
static_assert(offsetof(CameraState_AddPostProcessBlend, BlendWeight) == 0x000600, "Member 'CameraState_AddPostProcessBlend::BlendWeight' has a wrong offset!");

// Function GbxCameraModes.CameraState.CameraTrace
// 0x00B8 (0x00B8 - 0x0000)
struct CameraState_CameraTrace final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IgnoreMask;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0020(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraState_CameraTrace) == 0x000008, "Wrong alignment on CameraState_CameraTrace");
static_assert(sizeof(CameraState_CameraTrace) == 0x0000B8, "Wrong size on CameraState_CameraTrace");
static_assert(offsetof(CameraState_CameraTrace, Start) == 0x000000, "Member 'CameraState_CameraTrace::Start' has a wrong offset!");
static_assert(offsetof(CameraState_CameraTrace, End) == 0x00000C, "Member 'CameraState_CameraTrace::End' has a wrong offset!");
static_assert(offsetof(CameraState_CameraTrace, Radius) == 0x000018, "Member 'CameraState_CameraTrace::Radius' has a wrong offset!");
static_assert(offsetof(CameraState_CameraTrace, TraceChannel) == 0x00001C, "Member 'CameraState_CameraTrace::TraceChannel' has a wrong offset!");
static_assert(offsetof(CameraState_CameraTrace, IgnoreMask) == 0x00001D, "Member 'CameraState_CameraTrace::IgnoreMask' has a wrong offset!");
static_assert(offsetof(CameraState_CameraTrace, OutHit) == 0x000020, "Member 'CameraState_CameraTrace::OutHit' has a wrong offset!");
static_assert(offsetof(CameraState_CameraTrace, ReturnValue) == 0x0000B0, "Member 'CameraState_CameraTrace::ReturnValue' has a wrong offset!");

// Function GbxCameraModes.CameraState.SetBaseFOV
// 0x0008 (0x0008 - 0x0000)
struct CameraState_SetBaseFOV final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraState_SetBaseFOV) == 0x000004, "Wrong alignment on CameraState_SetBaseFOV");
static_assert(sizeof(CameraState_SetBaseFOV) == 0x000008, "Wrong size on CameraState_SetBaseFOV");
static_assert(offsetof(CameraState_SetBaseFOV, NewFOV) == 0x000000, "Member 'CameraState_SetBaseFOV::NewFOV' has a wrong offset!");
static_assert(offsetof(CameraState_SetBaseFOV, bDefault) == 0x000004, "Member 'CameraState_SetBaseFOV::bDefault' has a wrong offset!");

// Function GbxCameraModes.CameraState.SetBaseLocation
// 0x000C (0x000C - 0x0000)
struct CameraState_SetBaseLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraState_SetBaseLocation) == 0x000004, "Wrong alignment on CameraState_SetBaseLocation");
static_assert(sizeof(CameraState_SetBaseLocation) == 0x00000C, "Wrong size on CameraState_SetBaseLocation");
static_assert(offsetof(CameraState_SetBaseLocation, NewLocation) == 0x000000, "Member 'CameraState_SetBaseLocation::NewLocation' has a wrong offset!");

// Function GbxCameraModes.CameraState.SetBaseRotation
// 0x000C (0x000C - 0x0000)
struct CameraState_SetBaseRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraState_SetBaseRotation) == 0x000004, "Wrong alignment on CameraState_SetBaseRotation");
static_assert(sizeof(CameraState_SetBaseRotation) == 0x00000C, "Wrong size on CameraState_SetBaseRotation");
static_assert(offsetof(CameraState_SetBaseRotation, NewRotation) == 0x000000, "Member 'CameraState_SetBaseRotation::NewRotation' has a wrong offset!");

// Function GbxCameraModes.CameraState.SetViewModelFOV
// 0x0008 (0x0008 - 0x0000)
struct CameraState_SetViewModelFOV final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraState_SetViewModelFOV) == 0x000004, "Wrong alignment on CameraState_SetViewModelFOV");
static_assert(sizeof(CameraState_SetViewModelFOV) == 0x000008, "Wrong size on CameraState_SetViewModelFOV");
static_assert(offsetof(CameraState_SetViewModelFOV, NewFOV) == 0x000000, "Member 'CameraState_SetViewModelFOV::NewFOV' has a wrong offset!");
static_assert(offsetof(CameraState_SetViewModelFOV, bDefault) == 0x000004, "Member 'CameraState_SetViewModelFOV::bDefault' has a wrong offset!");

// Function GbxCameraModes.CameraState.GetBaseFOV
// 0x0004 (0x0004 - 0x0000)
struct CameraState_GetBaseFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraState_GetBaseFOV) == 0x000004, "Wrong alignment on CameraState_GetBaseFOV");
static_assert(sizeof(CameraState_GetBaseFOV) == 0x000004, "Wrong size on CameraState_GetBaseFOV");
static_assert(offsetof(CameraState_GetBaseFOV, ReturnValue) == 0x000000, "Member 'CameraState_GetBaseFOV::ReturnValue' has a wrong offset!");

// Function GbxCameraModes.CameraState.GetBaseLocation
// 0x000C (0x000C - 0x0000)
struct CameraState_GetBaseLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraState_GetBaseLocation) == 0x000004, "Wrong alignment on CameraState_GetBaseLocation");
static_assert(sizeof(CameraState_GetBaseLocation) == 0x00000C, "Wrong size on CameraState_GetBaseLocation");
static_assert(offsetof(CameraState_GetBaseLocation, ReturnValue) == 0x000000, "Member 'CameraState_GetBaseLocation::ReturnValue' has a wrong offset!");

// Function GbxCameraModes.CameraState.GetBaseRotation
// 0x000C (0x000C - 0x0000)
struct CameraState_GetBaseRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraState_GetBaseRotation) == 0x000004, "Wrong alignment on CameraState_GetBaseRotation");
static_assert(sizeof(CameraState_GetBaseRotation) == 0x00000C, "Wrong size on CameraState_GetBaseRotation");
static_assert(offsetof(CameraState_GetBaseRotation, ReturnValue) == 0x000000, "Member 'CameraState_GetBaseRotation::ReturnValue' has a wrong offset!");

}

