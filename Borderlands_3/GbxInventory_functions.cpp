#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxInventory

#include "Basic.hpp"

#include "GbxInventory_classes.hpp"
#include "GbxInventory_parameters.hpp"


namespace SDK
{

// Function GbxInventory.InventoryGenericPartExpansionData.EnumeratePartListForPartType
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// uint8                                   PartType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorPartData*>           OutPartList                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInventoryGenericPartExpansionData::EnumeratePartListForPartType(uint8 PartType, TArray<class UActorPartData*>* OutPartList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryGenericPartExpansionData", "EnumeratePartListForPartType");

	Params::InventoryGenericPartExpansionData_EnumeratePartListForPartType Parms{};

	Parms.PartType = PartType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);
}


// Function GbxInventory.InventoryItemPickup.ActivateAfterSpawnDelay
// (Native, Public, BlueprintCallable)

void AInventoryItemPickup::ActivateAfterSpawnDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "ActivateAfterSpawnDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.ActivatePickup
// (Final, Native, Public, BlueprintCallable)

void AInventoryItemPickup::ActivatePickup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "ActivatePickup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.CanBePickedUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UsedByOther                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseHeld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForMassPickup                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryItemPickup::CanBePickedUp(class AActor* Other, bool UsedByOther, bool bUseHeld, bool bForMassPickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "CanBePickedUp");

	Params::InventoryItemPickup_CanBePickedUp Parms{};

	Parms.Other = Other;
	Parms.UsedByOther = UsedByOther;
	Parms.bUseHeld = bUseHeld;
	Parms.bForMassPickup = bForMassPickup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.DeactivatePickup
// (Final, Native, Public, BlueprintCallable)

void AInventoryItemPickup::DeactivatePickup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "DeactivatePickup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.GiveInventoryToUser
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEquip                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItemPickup::GiveInventoryToUser(class AActor* Other, bool bAutoEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GiveInventoryToUser");

	Params::InventoryItemPickup_GiveInventoryToUser Parms{};

	Parms.Other = Other;
	Parms.bAutoEquip = bAutoEquip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.IsPickupInitialized
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryItemPickup::IsPickupInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "IsPickupInitialized");

	Params::InventoryItemPickup_IsPickupInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.OnLookedAtByPlayer
// (Native, Public, HasDefaults)
// Parameters:
// class APlayerController*                InstigatingPlayer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanInteractWith                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewUsableComponentImpactPoint                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewUsableDistanceAway                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItemPickup::OnLookedAtByPlayer(class APlayerController* InstigatingPlayer, bool bCanInteractWith, const struct FVector& NewUsableComponentImpactPoint, float NewUsableDistanceAway)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnLookedAtByPlayer");

	Params::InventoryItemPickup_OnLookedAtByPlayer Parms{};

	Parms.InstigatingPlayer = InstigatingPlayer;
	Parms.bCanInteractWith = bCanInteractWith;
	Parms.NewUsableComponentImpactPoint = std::move(NewUsableComponentImpactPoint);
	Parms.NewUsableDistanceAway = NewUsableDistanceAway;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnPickedUpEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           WasPickedUpBy                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItemPickup::OnPickedUpEvent(class AActor* WasPickedUpBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnPickedUpEvent");

	Params::InventoryItemPickup_OnPickedUpEvent Parms{};

	Parms.WasPickedUpBy = WasPickedUpBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxInventory.InventoryItemPickup.OnRep_BumpAngularDir
// (Native, Protected)

void AInventoryItemPickup::OnRep_BumpAngularDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRep_BumpAngularDir");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnRep_IsActive
// (Native, Public)

void AInventoryItemPickup::OnRep_IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRep_IsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnRep_PickedUpBy
// (Native, Public)

void AInventoryItemPickup::OnRep_PickedUpBy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRep_PickedUpBy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnRep_PickupActor
// (Final, Native, Public)

void AInventoryItemPickup::OnRep_PickupActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRep_PickupActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnRep_PickupActorClientSpawnData
// (Native, Public)

void AInventoryItemPickup::OnRep_PickupActorClientSpawnData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRep_PickupActorClientSpawnData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnRep_RepLootSpawnAction
// (Final, Native, Private)

void AInventoryItemPickup::OnRep_RepLootSpawnAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRep_RepLootSpawnAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.OnRespawnEvent
// (Event, Public, BlueprintEvent)

void AInventoryItemPickup::OnRespawnEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnRespawnEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxInventory.InventoryItemPickup.OnUsedBy
// (Native, Public, HasOutParams)
// Parameters:
// struct FUseEvent                        UseEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AInventoryItemPickup::OnUsedBy(const struct FUseEvent& UseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "OnUsedBy");

	Params::InventoryItemPickup_OnUsedBy Parms{};

	Parms.UseEvent = std::move(UseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.ResetBumpOnPickupFail
// (Final, Native, Private)

void AInventoryItemPickup::ResetBumpOnPickupFail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "ResetBumpOnPickupFail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.SetCanOnlyBePickedUpByOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewCanOnlyBePickedUpByOwnerController                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      OwnerController                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItemPickup::SetCanOnlyBePickedUpByOwner(bool bNewCanOnlyBePickedUpByOwnerController, class AController* OwnerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "SetCanOnlyBePickedUpByOwner");

	Params::InventoryItemPickup_SetCanOnlyBePickedUpByOwner Parms{};

	Parms.bNewCanOnlyBePickedUpByOwnerController = bNewCanOnlyBePickedUpByOwnerController;
	Parms.OwnerController = OwnerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.WaitForBalanceState
// (Final, Native, Private)

void AInventoryItemPickup::WaitForBalanceState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "WaitForBalanceState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryBalanceStateComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryBalanceStateComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryBalanceStateComponent* AInventoryItemPickup::GetInventoryBalanceStateComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryBalanceStateComponent");

	Params::InventoryItemPickup_GetInventoryBalanceStateComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryDisplayRarityOutline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryItemPickup::GetInventoryDisplayRarityOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryDisplayRarityOutline");

	Params::InventoryItemPickup_GetInventoryDisplayRarityOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryRarityColorFX
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor AInventoryItemPickup::GetInventoryRarityColorFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryRarityColorFX");

	Params::InventoryItemPickup_GetInventoryRarityColorFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryRarityColorOutline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor AInventoryItemPickup::GetInventoryRarityColorOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryRarityColorOutline");

	Params::InventoryItemPickup_GetInventoryRarityColorOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryRarityLifeSpanType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDropLifeSpanType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDropLifeSpanType AInventoryItemPickup::GetInventoryRarityLifeSpanType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryRarityLifeSpanType");

	Params::InventoryItemPickup_GetInventoryRarityLifeSpanType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryRarityLootAudioStinger
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWwiseEvent*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* AInventoryItemPickup::GetInventoryRarityLootAudioStinger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryRarityLootAudioStinger");

	Params::InventoryItemPickup_GetInventoryRarityLootAudioStinger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetInventoryRarityLootBeamOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UParticleSystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* AInventoryItemPickup::GetInventoryRarityLootBeamOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetInventoryRarityLootBeamOverride");

	Params::InventoryItemPickup_GetInventoryRarityLootBeamOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryItemPickup.GetMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* AInventoryItemPickup::GetMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemPickup", "GetMeshComponent");

	Params::InventoryItemPickup_GetMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryAspectData.K2_CloneAppearance
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           CloneActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InventoryActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInventoryBalanceStateComponent*  InventoryBalanceState                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAspectData::K2_CloneAppearance(class AActor* CloneActor, class AActor* InventoryActor, const class UInventoryBalanceStateComponent* InventoryBalanceState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAspectData", "K2_CloneAppearance");

	Params::InventoryAspectData_K2_CloneAppearance Parms{};

	Parms.CloneActor = CloneActor;
	Parms.InventoryActor = InventoryActor;
	Parms.InventoryBalanceState = InventoryBalanceState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryAspectData.K2_GetFriendlyDescription
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInventoryAspectData::K2_GetFriendlyDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAspectData", "K2_GetFriendlyDescription");

	Params::InventoryAspectData_K2_GetFriendlyDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryAspectData.K2_OnApplyAspect
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           InventoryActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInventoryBalanceStateComponent*  InventoryBalanceState                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAspectData::K2_OnApplyAspect(class AActor* InventoryActor, const class UInventoryBalanceStateComponent* InventoryBalanceState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAspectData", "K2_OnApplyAspect");

	Params::InventoryAspectData_K2_OnApplyAspect Parms{};

	Parms.InventoryActor = InventoryActor;
	Parms.InventoryBalanceState = InventoryBalanceState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryAspectData.K2_OnBeginPlay
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           InventoryActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInventoryBalanceStateComponent*  InventoryBalanceState                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAspectData::K2_OnBeginPlay(class AActor* InventoryActor, const class UInventoryBalanceStateComponent* InventoryBalanceState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAspectData", "K2_OnBeginPlay");

	Params::InventoryAspectData_K2_OnBeginPlay Parms{};

	Parms.InventoryActor = InventoryActor;
	Parms.InventoryBalanceState = InventoryBalanceState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.LootableComponent.ActivateAttachedLoot
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ULootableComponent::ActivateAttachedLoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LootableComponent", "ActivateAttachedLoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.LootableComponent.GetAttachedPickups
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ADroppedInventoryItemPickup*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ADroppedInventoryItemPickup*> ULootableComponent::GetAttachedPickups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LootableComponent", "GetAttachedPickups");

	Params::LootableComponent_GetAttachedPickups Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.LootableComponent.InitializeLootConfigurations
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ULootableBalanceData*             LootableBalanceData                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULootableComponent::InitializeLootConfigurations(class ULootableBalanceData* LootableBalanceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LootableComponent", "InitializeLootConfigurations");

	Params::LootableComponent_InitializeLootConfigurations Parms{};

	Parms.LootableBalanceData = LootableBalanceData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.LootableComponent.SetBalanceContextOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewOverrideContext                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyUseForGameStage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULootableComponent::SetBalanceContextOverride(class AActor* NewOverrideContext, bool bOnlyUseForGameStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LootableComponent", "SetBalanceContextOverride");

	Params::LootableComponent_SetBalanceContextOverride Parms{};

	Parms.NewOverrideContext = NewOverrideContext;
	Parms.bOnlyUseForGameStage = bOnlyUseForGameStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.LootableComponent.SpawnAndAttachLoot
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SelectedConfigurationName                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULootableComponent::SpawnAndAttachLoot(class FName* SelectedConfigurationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LootableComponent", "SpawnAndAttachLoot");

	Params::LootableComponent_SpawnAndAttachLoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SelectedConfigurationName != nullptr)
		*SelectedConfigurationName = Parms.SelectedConfigurationName;
}


// Function GbxInventory.LootableComponent.SpawnAndDropLoot
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SelectedConfigurationName                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULootableComponent::SpawnAndDropLoot(class FName* SelectedConfigurationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LootableComponent", "SpawnAndDropLoot");

	Params::LootableComponent_SpawnAndDropLoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SelectedConfigurationName != nullptr)
		*SelectedConfigurationName = Parms.SelectedConfigurationName;
}


// Function GbxInventory.InventoryBalanceStateComponent.NotifyAttached
// (Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryBalanceStateComponent::NotifyAttached(class APawn* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "NotifyAttached");

	Params::InventoryBalanceStateComponent_NotifyAttached Parms{};

	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBalanceStateComponent.NotifyEquipped
// (Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            NewInstigator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryBalanceStateComponent::NotifyEquipped(class APawn* NewInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "NotifyEquipped");

	Params::InventoryBalanceStateComponent_NotifyEquipped Parms{};

	Parms.NewInstigator = NewInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBalanceStateComponent.NotifyUnequipped
// (Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            OldInstigator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryBalanceStateComponent::NotifyUnequipped(class APawn* OldInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "NotifyUnequipped");

	Params::InventoryBalanceStateComponent_NotifyUnequipped Parms{};

	Parms.OldInstigator = OldInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBalanceStateComponent.OnRep_ReplicatedUIStats
// (Final, Native, Protected)

void UInventoryBalanceStateComponent::OnRep_ReplicatedUIStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "OnRep_ReplicatedUIStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBalanceStateComponent.PostBeginPlay
// (Native, Protected)

void UInventoryBalanceStateComponent::PostBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "PostBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBalanceStateComponent.CloneAppearance
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AActor*                           DestActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ParentComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAbsoluteScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryBalanceStateComponent::CloneAppearance(class AActor* DestActor, class USceneComponent* ParentComp, bool bAbsoluteScale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "CloneAppearance");

	Params::InventoryBalanceStateComponent_CloneAppearance Parms{};

	Parms.DestActor = DestActor;
	Parms.ParentComp = ParentComp;
	Parms.bAbsoluteScale = bAbsoluteScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetCustomizationPartList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UInventoryCustomizationPartData*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UInventoryCustomizationPartData*> UInventoryBalanceStateComponent::GetCustomizationPartList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetCustomizationPartList");

	Params::InventoryBalanceStateComponent_GetCustomizationPartList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetDamageType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxDamageType>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxDamageType> UInventoryBalanceStateComponent::GetDamageType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetDamageType");

	Params::InventoryBalanceStateComponent_GetDamageType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryBalanceStateComponent::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetDisplayName");

	Params::InventoryBalanceStateComponent_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetGenericPartList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UInventoryGenericPartData*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UInventoryGenericPartData*> UInventoryBalanceStateComponent::GetGenericPartList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetGenericPartList");

	Params::InventoryBalanceStateComponent_GetGenericPartList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryBalanceData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryBalanceData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryBalanceData* UInventoryBalanceStateComponent::GetInventoryBalanceData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryBalanceData");

	Params::InventoryBalanceStateComponent_GetInventoryBalanceData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryData*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryData* UInventoryBalanceStateComponent::GetInventoryData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryData");

	Params::InventoryBalanceStateComponent_GetInventoryData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryDisplayRarityOutline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryBalanceStateComponent::GetInventoryDisplayRarityOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryDisplayRarityOutline");

	Params::InventoryBalanceStateComponent_GetInventoryDisplayRarityOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityColorFX
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UInventoryBalanceStateComponent::GetInventoryRarityColorFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityColorFX");

	Params::InventoryBalanceStateComponent_GetInventoryRarityColorFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityColorOutline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UInventoryBalanceStateComponent::GetInventoryRarityColorOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityColorOutline");

	Params::InventoryBalanceStateComponent_GetInventoryRarityColorOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryRarityData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryRarityData* UInventoryBalanceStateComponent::GetInventoryRarityData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityData");

	Params::InventoryBalanceStateComponent_GetInventoryRarityData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UInventoryBalanceStateComponent::GetInventoryRarityDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityDisplayName");

	Params::InventoryBalanceStateComponent_GetInventoryRarityDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityFrameName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInventoryBalanceStateComponent::GetInventoryRarityFrameName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityFrameName");

	Params::InventoryBalanceStateComponent_GetInventoryRarityFrameName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityLifeSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInventoryBalanceStateComponent::GetInventoryRarityLifeSpan() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityLifeSpan");

	Params::InventoryBalanceStateComponent_GetInventoryRarityLifeSpan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityLifeSpanType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDropLifeSpanType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDropLifeSpanType UInventoryBalanceStateComponent::GetInventoryRarityLifeSpanType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityLifeSpanType");

	Params::InventoryBalanceStateComponent_GetInventoryRarityLifeSpanType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityLootAudioStinger
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWwiseEvent*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* UInventoryBalanceStateComponent::GetInventoryRarityLootAudioStinger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityLootAudioStinger");

	Params::InventoryBalanceStateComponent_GetInventoryRarityLootAudioStinger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityLootBeamHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInventoryBalanceStateComponent::GetInventoryRarityLootBeamHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityLootBeamHeight");

	Params::InventoryBalanceStateComponent_GetInventoryRarityLootBeamHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryRarityLootBeamOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UParticleSystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* UInventoryBalanceStateComponent::GetInventoryRarityLootBeamOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryRarityLootBeamOverride");

	Params::InventoryBalanceStateComponent_GetInventoryRarityLootBeamOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetInventoryScoreValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryBalanceStateComponent::GetInventoryScoreValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetInventoryScoreValue");

	Params::InventoryBalanceStateComponent_GetInventoryScoreValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetManufacturer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UManufacturerData*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UManufacturerData* UInventoryBalanceStateComponent::GetManufacturer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetManufacturer");

	Params::InventoryBalanceStateComponent_GetManufacturer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetMonetaryValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryBalanceStateComponent::GetMonetaryValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetMonetaryValue");

	Params::InventoryBalanceStateComponent_GetMonetaryValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetPartList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UInventoryPartData*> ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UInventoryPartData*> UInventoryBalanceStateComponent::GetPartList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetPartList");

	Params::InventoryBalanceStateComponent_GetPartList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.GetReRollCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UInventoryBalanceStateComponent::GetReRollCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "GetReRollCount");

	Params::InventoryBalanceStateComponent_GetReRollCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.IsManufactureredBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UManufacturerData*                Manufacturer                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryBalanceStateComponent::IsManufactureredBy(const class UManufacturerData* Manufacturer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "IsManufactureredBy");

	Params::InventoryBalanceStateComponent_IsManufactureredBy Parms{};

	Parms.Manufacturer = Manufacturer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBalanceStateComponent.K2_GetDamageType
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TSubclassOf<class UGbxDamageType>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxDamageType> UInventoryBalanceStateComponent::K2_GetDamageType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBalanceStateComponent", "K2_GetDamageType");

	Params::InventoryBalanceStateComponent_K2_GetDamageType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetInventoryDisplayDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InventoryActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryListComponent::GetInventoryDisplayDescription(class AActor* InventoryActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryListComponent", "GetInventoryDisplayDescription");

	Params::InventoryListComponent_GetInventoryDisplayDescription Parms{};

	Parms.InventoryActor = InventoryActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetInventoryDisplayName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InventoryActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryListComponent::GetInventoryDisplayName(class AActor* InventoryActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryListComponent", "GetInventoryDisplayName");

	Params::InventoryListComponent_GetInventoryDisplayName Parms{};

	Parms.InventoryActor = InventoryActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetInventoryListEntryDisplayDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInventoryListEntry              ListEntry                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryListComponent::GetInventoryListEntryDisplayDescription(struct FInventoryListEntry* ListEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryListComponent", "GetInventoryListEntryDisplayDescription");

	Params::InventoryListComponent_GetInventoryListEntryDisplayDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ListEntry != nullptr)
		*ListEntry = std::move(Parms.ListEntry);

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetInventoryListEntryDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInventoryListEntry              ListEntry                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryListComponent::GetInventoryListEntryDisplayName(struct FInventoryListEntry* ListEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryListComponent", "GetInventoryListEntryDisplayName");

	Params::InventoryListComponent_GetInventoryListEntryDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ListEntry != nullptr)
		*ListEntry = std::move(Parms.ListEntry);

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.AddCategory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ItemCategory                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TrackQuantity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryListComponent::AddCategory(const class UInventoryCategoryData* ItemCategory, bool TrackQuantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "AddCategory");

	Params::InventoryListComponent_AddCategory Parms{};

	Parms.ItemCategory = ItemCategory;
	Parms.TrackQuantity = TrackQuantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.AddExternalItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ItemCategory                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AddedByPickup                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEquip                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConditionalDestroyActor                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredSlot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBypassInventoryFull                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryListEntryHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventoryListEntryHandle UInventoryListComponent::AddExternalItem(const class UInventoryCategoryData* ItemCategory, class AActor* ActorToAdd, int32 Quantity, bool AddedByPickup, bool bAutoEquip, bool bConditionalDestroyActor, int32 DesiredSlot, bool bBypassInventoryFull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "AddExternalItem");

	Params::InventoryListComponent_AddExternalItem Parms{};

	Parms.ItemCategory = ItemCategory;
	Parms.ActorToAdd = ActorToAdd;
	Parms.Quantity = Quantity;
	Parms.AddedByPickup = AddedByPickup;
	Parms.bAutoEquip = bAutoEquip;
	Parms.bConditionalDestroyActor = bConditionalDestroyActor;
	Parms.DesiredSlot = DesiredSlot;
	Parms.bBypassInventoryFull = bBypassInventoryFull;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.AddExternalItemEx
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ItemCategory                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConditionalDestroyActor                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredSlot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBypassInventoryFull                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryListEntryHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventoryListEntryHandle UInventoryListComponent::AddExternalItemEx(const class UInventoryCategoryData* ItemCategory, class AActor* ActorToAdd, int32 Quantity, int32 Flags_0, bool bConditionalDestroyActor, int32 DesiredSlot, bool bBypassInventoryFull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "AddExternalItemEx");

	Params::InventoryListComponent_AddExternalItemEx Parms{};

	Parms.ItemCategory = ItemCategory;
	Parms.ActorToAdd = ActorToAdd;
	Parms.Quantity = Quantity;
	Parms.Flags_0 = Flags_0;
	Parms.bConditionalDestroyActor = bConditionalDestroyActor;
	Parms.DesiredSlot = DesiredSlot;
	Parms.bBypassInventoryFull = bBypassInventoryFull;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.AddItemFromPickup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AInventoryItemPickup*             PickupActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryListEntryHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventoryListEntryHandle UInventoryListComponent::AddItemFromPickup(class AInventoryItemPickup* PickupActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "AddItemFromPickup");

	Params::InventoryListComponent_AddItemFromPickup Parms{};

	Parms.PickupActor = PickupActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.AddOrUpdateCategoryOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ItemCategory                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::AddOrUpdateCategoryOnly(const class UInventoryCategoryData* ItemCategory, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "AddOrUpdateCategoryOnly");

	Params::InventoryListComponent_AddOrUpdateCategoryOnly Parms{};

	Parms.ItemCategory = ItemCategory;
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.CanUseSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ChildTypeToUse                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryListComponent::CanUseSelected(const class UInventoryCategoryData* ChildTypeToUse, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "CanUseSelected");

	Params::InventoryListComponent_CanUseSelected Parms{};

	Parms.ChildTypeToUse = ChildTypeToUse;
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.ClearInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    DestroyInventory                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ClearInventory(bool DestroyInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ClearInventory");

	Params::InventoryListComponent_ClearInventory Parms{};

	Parms.DestroyInventory = DestroyInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.GetAndConsumeItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInventoryListComponent::GetAndConsumeItem(const struct FInventoryListEntryHandle& InventoryItemHandle, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetAndConsumeItem");

	Params::InventoryListComponent_GetAndConsumeItem Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetAndConsumeSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           TypeToConsume                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInventoryListComponent::GetAndConsumeSelected(const class UInventoryCategoryData* TypeToConsume, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetAndConsumeSelected");

	Params::InventoryListComponent_GetAndConsumeSelected Parms{};

	Parms.TypeToConsume = TypeToConsume;
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetCategoryItemQuantity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ItemCategory                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryListComponent::GetCategoryItemQuantity(const class UInventoryCategoryData* ItemCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetCategoryItemQuantity");

	Params::InventoryListComponent_GetCategoryItemQuantity Parms{};

	Parms.ItemCategory = ItemCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetCategoryOnlyInventoryHandles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ChildTypeToGet                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInventoryListEntryHandle>ItemHandleList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInventoryListComponent::GetCategoryOnlyInventoryHandles(const class UInventoryCategoryData* ChildTypeToGet, TArray<struct FInventoryListEntryHandle>* ItemHandleList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetCategoryOnlyInventoryHandles");

	Params::InventoryListComponent_GetCategoryOnlyInventoryHandles Parms{};

	Parms.ChildTypeToGet = ChildTypeToGet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemHandleList != nullptr)
		*ItemHandleList = std::move(Parms.ItemHandleList);
}


// Function GbxInventory.InventoryListComponent.GetInventoryHandlesOfType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ChildTypeToGet                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInventoryListEntryHandle>ItemHandleList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInventoryListComponent::GetInventoryHandlesOfType(const class UInventoryCategoryData* ChildTypeToGet, TArray<struct FInventoryListEntryHandle>* ItemHandleList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetInventoryHandlesOfType");

	Params::InventoryListComponent_GetInventoryHandlesOfType Parms{};

	Parms.ChildTypeToGet = ChildTypeToGet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemHandleList != nullptr)
		*ItemHandleList = std::move(Parms.ItemHandleList);
}


// Function GbxInventory.InventoryListComponent.GetItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryListEntry              ListEntry                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryListComponent::GetItem(const struct FInventoryListEntryHandle& InventoryItemHandle, struct FInventoryListEntry* ListEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetItem");

	Params::InventoryListComponent_GetItem Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ListEntry != nullptr)
		*ListEntry = std::move(Parms.ListEntry);

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetSelectedItemQuantity
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInventoryCategoryData*           ChildTypeToGet                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxQuantity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::GetSelectedItemQuantity(const class UInventoryCategoryData* ChildTypeToGet, int32* Quantity, int32* MaxQuantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetSelectedItemQuantity");

	Params::InventoryListComponent_GetSelectedItemQuantity Parms{};

	Parms.ChildTypeToGet = ChildTypeToGet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Quantity != nullptr)
		*Quantity = Parms.Quantity;

	if (MaxQuantity != nullptr)
		*MaxQuantity = Parms.MaxQuantity;
}


// Function GbxInventory.InventoryListComponent.GetStoredInventoryActor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInventoryListComponent::GetStoredInventoryActor(const struct FInventoryListEntryHandle& InventoryItemHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetStoredInventoryActor");

	Params::InventoryListComponent_GetStoredInventoryActor Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.HasActorInList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ItemActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryListComponent::HasActorInList(class AActor* ItemActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "HasActorInList");

	Params::InventoryListComponent_HasActorInList Parms{};

	Parms.ItemActor = ItemActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.ServerAddCustomizationPartToInventoryActor
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInventoryCustomizationPartData*  Part                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerAddCustomizationPartToInventoryActor(const struct FInventoryListEntryHandle& InventoryItemHandle, class UInventoryCustomizationPartData* Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerAddCustomizationPartToInventoryActor");

	Params::InventoryListComponent_ServerAddCustomizationPartToInventoryActor Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);
	Parms.Part = Part;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerConsumeItem
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerConsumeItem(const struct FInventoryListEntryHandle& InventoryItemHandle, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerConsumeItem");

	Params::InventoryListComponent_ServerConsumeItem Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerDropItem
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InitialLocation                                        (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InitialRotation                                        (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerDropItem(const struct FInventoryListEntryHandle& InventoryItemHandle, const struct FVector& InitialLocation, const struct FRotator& InitialRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerDropItem");

	Params::InventoryListComponent_ServerDropItem Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);
	Parms.InitialLocation = std::move(InitialLocation);
	Parms.InitialRotation = std::move(InitialRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerRemoveCustomizationPartFromInventoryActor
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInventoryCustomizationPartData*  Part                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerRemoveCustomizationPartFromInventoryActor(const struct FInventoryListEntryHandle& InventoryItemHandle, class UInventoryCustomizationPartData* Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerRemoveCustomizationPartFromInventoryActor");

	Params::InventoryListComponent_ServerRemoveCustomizationPartFromInventoryActor Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);
	Parms.Part = Part;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerRemoveItem
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerRemoveItem(const struct FInventoryListEntryHandle& InventoryItemHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerRemoveItem");

	Params::InventoryListComponent_ServerRemoveItem Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerSetItemsUIFlags
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class UInventoryCategoryData*           Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   FlagsMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerSetItemsUIFlags(class UInventoryCategoryData* Category, uint8 Flags_0, uint8 FlagsMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerSetItemsUIFlags");

	Params::InventoryListComponent_ServerSetItemsUIFlags Parms{};

	Parms.Category = Category;
	Parms.Flags_0 = Flags_0;
	Parms.FlagsMask = FlagsMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerSetItemUIFlags
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        Handle                                                 (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   FlagsMask                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerSetItemUIFlags(const struct FInventoryListEntryHandle& Handle, uint8 Flags_0, uint8 FlagsMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerSetItemUIFlags");

	Params::InventoryListComponent_ServerSetItemUIFlags Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Flags_0 = Flags_0;
	Parms.FlagsMask = FlagsMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.ServerTransferItem
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FInventoryListEntryHandle        InventoryItemHandle                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DestinationActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryListComponent::ServerTransferItem(const struct FInventoryListEntryHandle& InventoryItemHandle, class AActor* DestinationActor, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "ServerTransferItem");

	Params::InventoryListComponent_ServerTransferItem Parms{};

	Parms.InventoryItemHandle = std::move(InventoryItemHandle);
	Parms.DestinationActor = DestinationActor;
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryListComponent.SizeInInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AInventoryItemPickup*             PickupToTest                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryListComponent::SizeInInventory(class AInventoryItemPickup* PickupToTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "SizeInInventory");

	Params::InventoryListComponent_SizeInInventory Parms{};

	Parms.PickupToTest = PickupToTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.CanSwapItemForPickup
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AInventoryItemPickup*             Pickup                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryListComponent::CanSwapItemForPickup(class AActor* Item, class AInventoryItemPickup* Pickup) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "CanSwapItemForPickup");

	Params::InventoryListComponent_CanSwapItemForPickup Parms{};

	Parms.Item = Item;
	Parms.Pickup = Pickup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetInventoryItemCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryListComponent::GetInventoryItemCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetInventoryItemCount");

	Params::InventoryListComponent_GetInventoryItemCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.GetMaxInventoryItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryListComponent::GetMaxInventoryItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "GetMaxInventoryItems");

	Params::InventoryListComponent_GetMaxInventoryItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryListComponent.IsInventoryFull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryListComponent::IsInventoryFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryListComponent", "IsInventoryFull");

	Params::InventoryListComponent_IsInventoryFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryData.EnumeratePickupFlyToTargets
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     Targets                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInventoryData::EnumeratePickupFlyToTargets(TArray<class FName>* Targets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryData", "EnumeratePickupFlyToTargets");

	Params::InventoryData_EnumeratePickupFlyToTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Targets != nullptr)
		*Targets = std::move(Parms.Targets);
}


// Function GbxInventory.DroppedInventoryItemPickup.OnPhysicsSleep
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              WakingComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADroppedInventoryItemPickup::OnPhysicsSleep(class UPrimitiveComponent* WakingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DroppedInventoryItemPickup", "OnPhysicsSleep");

	Params::DroppedInventoryItemPickup_OnPhysicsSleep Parms{};

	Parms.WakingComponent = WakingComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.DroppedInventoryItemPickup.OnPhysicsWake
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              WakingComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADroppedInventoryItemPickup::OnPhysicsWake(class UPrimitiveComponent* WakingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DroppedInventoryItemPickup", "OnPhysicsWake");

	Params::DroppedInventoryItemPickup_OnPhysicsWake Parms{};

	Parms.WakingComponent = WakingComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.DroppedInventoryItemPickup.OnPickupHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADroppedInventoryItemPickup::OnPickupHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DroppedInventoryItemPickup", "OnPickupHit");

	Params::DroppedInventoryItemPickup_OnPickupHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.DroppedInventoryItemPickup.OnRep_DroppedQuantity
// (Final, Native, Public)

void ADroppedInventoryItemPickup::OnRep_DroppedQuantity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DroppedInventoryItemPickup", "OnRep_DroppedQuantity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.DroppedInventoryItemPickup.OnRep_InitialMassScale
// (Final, Native, Public)

void ADroppedInventoryItemPickup::OnRep_InitialMassScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DroppedInventoryItemPickup", "OnRep_InitialMassScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.DroppedInventoryItemPickup.OnRep_ShrinkLifeSpan
// (Final, Native, Public)

void ADroppedInventoryItemPickup::OnRep_ShrinkLifeSpan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DroppedInventoryItemPickup", "OnRep_ShrinkLifeSpan");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.InventoryBlueprintLibrary.BuildInventory
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreatePickup                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocation                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryBalanceStateInitializationDataInitData                                               (Parm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInventoryBlueprintLibrary::BuildInventory(class UObject* WorldContextObject, bool bCreatePickup, const struct FVector& SpawnLocation, const struct FInventoryBalanceStateInitializationData& InitData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryBlueprintLibrary", "BuildInventory");

	Params::InventoryBlueprintLibrary_BuildInventory Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bCreatePickup = bCreatePickup;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.InitData = std::move(InitData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBlueprintLibrary.CloneInventory
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceInventory                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInventoryBlueprintLibrary::CloneInventory(class AActor* SourceInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryBlueprintLibrary", "CloneInventory");

	Params::InventoryBlueprintLibrary_CloneInventory Parms{};

	Parms.SourceInventory = SourceInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBlueprintLibrary.CreateInventory
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreatePickup                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocation                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryBalanceStateInitializationDataInitData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UInventoryBlueprintLibrary::CreateInventory(class UObject* WorldContextObject, bool bCreatePickup, const struct FVector& SpawnLocation, const struct FInventoryBalanceStateInitializationData& InitData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryBlueprintLibrary", "CreateInventory");

	Params::InventoryBlueprintLibrary_CreateInventory Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bCreatePickup = bCreatePickup;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.InitData = std::move(InitData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBlueprintLibrary.GetInventoryBalanceState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Inventory                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInventoryBalanceStateComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryBalanceStateComponent* UInventoryBlueprintLibrary::GetInventoryBalanceState(class AActor* Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryBlueprintLibrary", "GetInventoryBalanceState");

	Params::InventoryBlueprintLibrary_GetInventoryBalanceState Parms{};

	Parms.Inventory = Inventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryBlueprintLibrary.GetPossibleGenericParts
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInventoryBalanceStateComponent*  InventoryBalanceState                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bMustHaveAllTags                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeCurrentlySelectedParts                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInventoryGenericPartData*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UInventoryGenericPartData*> UInventoryBlueprintLibrary::GetPossibleGenericParts(class UInventoryBalanceStateComponent* InventoryBalanceState, const struct FGameplayTagContainer& Tags, bool bMustHaveAllTags, bool bExcludeCurrentlySelectedParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryBlueprintLibrary", "GetPossibleGenericParts");

	Params::InventoryBlueprintLibrary_GetPossibleGenericParts Parms{};

	Parms.InventoryBalanceState = InventoryBalanceState;
	Parms.Tags = std::move(Tags);
	Parms.bMustHaveAllTags = bMustHaveAllTags;
	Parms.bExcludeCurrentlySelectedParts = bExcludeCurrentlySelectedParts;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryPartData.GetMonetaryValueModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FAttributeInitializationDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FAttributeInitializationData UInventoryPartData::GetMonetaryValueModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryPartData", "GetMonetaryValueModifier");

	Params::InventoryPartData_GetMonetaryValueModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetDisplayRarityOutline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryRarityData::GetDisplayRarityOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetDisplayRarityOutline");

	Params::InventoryRarityData_GetDisplayRarityOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetItemScoreRarityModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FAttributeInitializationDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FAttributeInitializationData UInventoryRarityData::GetItemScoreRarityModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetItemScoreRarityModifier");

	Params::InventoryRarityData_GetItemScoreRarityModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityColorFX
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UInventoryRarityData::GetRarityColorFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityColorFX");

	Params::InventoryRarityData_GetRarityColorFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityColorOutline
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UInventoryRarityData::GetRarityColorOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityColorOutline");

	Params::InventoryRarityData_GetRarityColorOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UInventoryRarityData::GetRarityDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityDisplayName");

	Params::InventoryRarityData_GetRarityDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityLifeSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInventoryRarityData::GetRarityLifeSpan() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityLifeSpan");

	Params::InventoryRarityData_GetRarityLifeSpan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityLifeSpanType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDropLifeSpanType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDropLifeSpanType UInventoryRarityData::GetRarityLifeSpanType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityLifeSpanType");

	Params::InventoryRarityData_GetRarityLifeSpanType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityLootAudioStinger
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWwiseEvent*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWwiseEvent* UInventoryRarityData::GetRarityLootAudioStinger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityLootAudioStinger");

	Params::InventoryRarityData_GetRarityLootAudioStinger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityLootBeamHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInventoryRarityData::GetRarityLootBeamHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityLootBeamHeight");

	Params::InventoryRarityData_GetRarityLootBeamHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityLootBeamOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bInventoryHasAFoilPart                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* UInventoryRarityData::GetRarityLootBeamOverride(bool bInventoryHasAFoilPart) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityLootBeamOverride");

	Params::InventoryRarityData_GetRarityLootBeamOverride Parms{};

	Parms.bInventoryHasAFoilPart = bInventoryHasAFoilPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRarityOutlineDepthStencilValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryRarityData::GetRarityOutlineDepthStencilValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRarityOutlineDepthStencilValue");

	Params::InventoryRarityData_GetRarityOutlineDepthStencilValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryRarityData.GetRaritySortValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryRarityData::GetRaritySortValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryRarityData", "GetRaritySortValue");

	Params::InventoryRarityData_GetRaritySortValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxInventory.InventoryOwnerInterface.AttachedItemPickedUp
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AInventoryItemPickup*             InventoryItemPickedUp                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PickedUpBy                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInventoryOwnerInterface::AttachedItemPickedUp(class AInventoryItemPickup* InventoryItemPickedUp, class AActor* PickedUpBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryOwnerInterface", "AttachedItemPickedUp");

	Params::InventoryOwnerInterface_AttachedItemPickedUp Parms{};

	Parms.InventoryItemPickedUp = InventoryItemPickedUp;
	Parms.PickedUpBy = PickedUpBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxInventory.ItemPoolPartSelectionOverrideData.EnumerateInventoryParts
// (Final, Native, Private, HasOutParams)
// Parameters:
// uint8                                   PartType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorPartData*>           OutPartList                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UItemPoolPartSelectionOverrideData::EnumerateInventoryParts(uint8 PartType, TArray<class UActorPartData*>* OutPartList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemPoolPartSelectionOverrideData", "EnumerateInventoryParts");

	Params::ItemPoolPartSelectionOverrideData_EnumerateInventoryParts Parms{};

	Parms.PartType = PartType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPartList != nullptr)
		*OutPartList = std::move(Parms.OutPartList);
}


// Function GbxInventory.LootFunctionLibrary.SpawnItemsRaw
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UItemPoolListData*>        ItemPoolLists                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FItemPoolInfo>            ExtraItemPools                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   GameStage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InitialVelocity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULootFunctionLibrary::SpawnItemsRaw(class UObject* WorldContextObject, const TArray<class UItemPoolListData*>& ItemPoolLists, const TArray<struct FItemPoolInfo>& ExtraItemPools, int32 GameStage, const struct FVector& Location, const struct FRotator& Rotation, float InitialVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LootFunctionLibrary", "SpawnItemsRaw");

	Params::LootFunctionLibrary_SpawnItemsRaw Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ItemPoolLists = std::move(ItemPoolLists);
	Parms.ExtraItemPools = std::move(ExtraItemPools);
	Parms.GameStage = GameStage;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.InitialVelocity = InitialVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

