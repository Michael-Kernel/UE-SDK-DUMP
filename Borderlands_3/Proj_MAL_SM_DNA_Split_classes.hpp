#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_MAL_SM_DNA_Split

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Proj_Weapon_BaseProjectile_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_MAL_SM_DNA_Split.Proj_MAL_SM_DNA_Split_C
// 0x0060 (0x07F0 - 0x0790)
class AProj_MAL_SM_DNA_Split_C final : public AProj_Weapon_BaseProjectile_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Proj_MAL_SM_DNA_Split_C;            // 0x0790(0x0008)(Transient, DuplicateTransient)
	class UDrunkenWaveMovementComponent*          DrunkenWaveCryo2;                                  // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveCryo1;                                  // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveCorr2;                                  // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveCorr1;                                  // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveShock2;                                 // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveShock1;                                 // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveFire2;                                  // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrunkenWaveMovementComponent*          DrunkenWaveFire1;                                  // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Trail;                                             // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AProj_MAL_SM_DNA_Split_C*               LinkedProjectile;                                  // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasImpacted;                                      // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E9[0x3];                                      // 0x07E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireID;                                            // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Proj_MAL_SM_DNA_Split(int32 EntryPoint);
	void OnExplode();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_MAL_SM_DNA_Split_C">();
	}
	static class AProj_MAL_SM_DNA_Split_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_MAL_SM_DNA_Split_C>();
	}
};
static_assert(alignof(AProj_MAL_SM_DNA_Split_C) == 0x000008, "Wrong alignment on AProj_MAL_SM_DNA_Split_C");
static_assert(sizeof(AProj_MAL_SM_DNA_Split_C) == 0x0007F0, "Wrong size on AProj_MAL_SM_DNA_Split_C");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, UberGraphFrame_Proj_MAL_SM_DNA_Split_C) == 0x000790, "Member 'AProj_MAL_SM_DNA_Split_C::UberGraphFrame_Proj_MAL_SM_DNA_Split_C' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveCryo2) == 0x000798, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveCryo2' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveCryo1) == 0x0007A0, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveCryo1' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveCorr2) == 0x0007A8, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveCorr2' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveCorr1) == 0x0007B0, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveCorr1' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveShock2) == 0x0007B8, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveShock2' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveShock1) == 0x0007C0, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveShock1' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveFire2) == 0x0007C8, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveFire2' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, DrunkenWaveFire1) == 0x0007D0, "Member 'AProj_MAL_SM_DNA_Split_C::DrunkenWaveFire1' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, Trail) == 0x0007D8, "Member 'AProj_MAL_SM_DNA_Split_C::Trail' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, LinkedProjectile) == 0x0007E0, "Member 'AProj_MAL_SM_DNA_Split_C::LinkedProjectile' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, bHasImpacted) == 0x0007E8, "Member 'AProj_MAL_SM_DNA_Split_C::bHasImpacted' has a wrong offset!");
static_assert(offsetof(AProj_MAL_SM_DNA_Split_C, FireID) == 0x0007EC, "Member 'AProj_MAL_SM_DNA_Split_C::FireID' has a wrong offset!");

}

