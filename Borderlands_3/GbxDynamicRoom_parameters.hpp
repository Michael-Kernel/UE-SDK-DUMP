#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxDynamicRoom

#include "Basic.hpp"

#include "GbxDynamicRoom_structs.hpp"


namespace SDK::Params
{

// Function GbxDynamicRoom.DynamicRoomBase.GetAvailableRoomData
// 0x0010 (0x0010 - 0x0000)
struct DynamicRoomBase_GetAvailableRoomData final
{
public:
	TArray<class UDynamicRoomBaseData*>           AvailableRooms;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicRoomBase_GetAvailableRoomData) == 0x000008, "Wrong alignment on DynamicRoomBase_GetAvailableRoomData");
static_assert(sizeof(DynamicRoomBase_GetAvailableRoomData) == 0x000010, "Wrong size on DynamicRoomBase_GetAvailableRoomData");
static_assert(offsetof(DynamicRoomBase_GetAvailableRoomData, AvailableRooms) == 0x000000, "Member 'DynamicRoomBase_GetAvailableRoomData::AvailableRooms' has a wrong offset!");

// Function GbxDynamicRoom.DynamicRoomBase.GetCurrentRoomData
// 0x0008 (0x0008 - 0x0000)
struct DynamicRoomBase_GetCurrentRoomData final
{
public:
	class UDynamicRoomBaseData*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicRoomBase_GetCurrentRoomData) == 0x000008, "Wrong alignment on DynamicRoomBase_GetCurrentRoomData");
static_assert(sizeof(DynamicRoomBase_GetCurrentRoomData) == 0x000008, "Wrong size on DynamicRoomBase_GetCurrentRoomData");
static_assert(offsetof(DynamicRoomBase_GetCurrentRoomData, ReturnValue) == 0x000000, "Member 'DynamicRoomBase_GetCurrentRoomData::ReturnValue' has a wrong offset!");

// Function GbxDynamicRoom.DynamicRoomBase.GetPlayersInLevel
// 0x0010 (0x0010 - 0x0000)
struct DynamicRoomBase_GetPlayersInLevel final
{
public:
	TArray<class AGbxCharacter*>                  Players;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicRoomBase_GetPlayersInLevel) == 0x000008, "Wrong alignment on DynamicRoomBase_GetPlayersInLevel");
static_assert(sizeof(DynamicRoomBase_GetPlayersInLevel) == 0x000010, "Wrong size on DynamicRoomBase_GetPlayersInLevel");
static_assert(offsetof(DynamicRoomBase_GetPlayersInLevel, Players) == 0x000000, "Member 'DynamicRoomBase_GetPlayersInLevel::Players' has a wrong offset!");

// Function GbxDynamicRoom.DynamicRoomBase.InstanceRoom
// 0x0008 (0x0008 - 0x0000)
struct DynamicRoomBase_InstanceRoom final
{
public:
	class UDynamicRoomBaseData*                   RoomToLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicRoomBase_InstanceRoom) == 0x000008, "Wrong alignment on DynamicRoomBase_InstanceRoom");
static_assert(sizeof(DynamicRoomBase_InstanceRoom) == 0x000008, "Wrong size on DynamicRoomBase_InstanceRoom");
static_assert(offsetof(DynamicRoomBase_InstanceRoom, RoomToLoad) == 0x000000, "Member 'DynamicRoomBase_InstanceRoom::RoomToLoad' has a wrong offset!");

// Function GbxDynamicRoom.DynamicRoomBase.OnRep_RoomInfoToLoad
// 0x0010 (0x0010 - 0x0000)
struct DynamicRoomBase_OnRep_RoomInfoToLoad final
{
public:
	struct FDynamicRoomReplicationInfo            OldRoomInfoToLoad;                                 // 0x0000(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicRoomBase_OnRep_RoomInfoToLoad) == 0x000008, "Wrong alignment on DynamicRoomBase_OnRep_RoomInfoToLoad");
static_assert(sizeof(DynamicRoomBase_OnRep_RoomInfoToLoad) == 0x000010, "Wrong size on DynamicRoomBase_OnRep_RoomInfoToLoad");
static_assert(offsetof(DynamicRoomBase_OnRep_RoomInfoToLoad, OldRoomInfoToLoad) == 0x000000, "Member 'DynamicRoomBase_OnRep_RoomInfoToLoad::OldRoomInfoToLoad' has a wrong offset!");

// Function GbxDynamicRoom.DynamicRoomBase.VisibleForAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct DynamicRoomBase_VisibleForAllPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicRoomBase_VisibleForAllPlayers) == 0x000001, "Wrong alignment on DynamicRoomBase_VisibleForAllPlayers");
static_assert(sizeof(DynamicRoomBase_VisibleForAllPlayers) == 0x000001, "Wrong size on DynamicRoomBase_VisibleForAllPlayers");
static_assert(offsetof(DynamicRoomBase_VisibleForAllPlayers, ReturnValue) == 0x000000, "Member 'DynamicRoomBase_VisibleForAllPlayers::ReturnValue' has a wrong offset!");

// Function GbxDynamicRoom.DynamicRoomActorData.HandleDynamicRoomActorSpawned
// 0x0010 (0x0010 - 0x0000)
struct DynamicRoomActorData_HandleDynamicRoomActorSpawned final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicRoomActorData_HandleDynamicRoomActorSpawned) == 0x000008, "Wrong alignment on DynamicRoomActorData_HandleDynamicRoomActorSpawned");
static_assert(sizeof(DynamicRoomActorData_HandleDynamicRoomActorSpawned) == 0x000010, "Wrong size on DynamicRoomActorData_HandleDynamicRoomActorSpawned");
static_assert(offsetof(DynamicRoomActorData_HandleDynamicRoomActorSpawned, SpawnedActor) == 0x000000, "Member 'DynamicRoomActorData_HandleDynamicRoomActorSpawned::SpawnedActor' has a wrong offset!");
static_assert(offsetof(DynamicRoomActorData_HandleDynamicRoomActorSpawned, InstanceIndex) == 0x000008, "Member 'DynamicRoomActorData_HandleDynamicRoomActorSpawned::InstanceIndex' has a wrong offset!");

}

