#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_MAL_BaseWeapon

#include "Basic.hpp"

#include "BPWeap_MAL_BaseWeapon_classes.hpp"
#include "BPWeap_MAL_BaseWeapon_parameters.hpp"


namespace SDK
{

// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.ExecuteUbergraph_BPWeap_MAL_BaseWeapon
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_MAL_BaseWeapon_C::ExecuteUbergraph_BPWeap_MAL_BaseWeapon(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "ExecuteUbergraph_BPWeap_MAL_BaseWeapon");

	Params::BPWeap_MAL_BaseWeapon_C_ExecuteUbergraph_BPWeap_MAL_BaseWeapon Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.PutDown_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeapon*                          EventWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_MAL_BaseWeapon_C::PutDown_Event(class AWeapon* EventWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "PutDown_Event");

	Params::BPWeap_MAL_BaseWeapon_C_PutDown_Event Parms{};

	Parms.EventWeapon = EventWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.SetSecondaryElementalData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     BaseColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     HighlightColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_MAL_BaseWeapon_C::SetSecondaryElementalData(const struct FLinearColor& BaseColor, const struct FLinearColor& HighlightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "SetSecondaryElementalData");

	Params::BPWeap_MAL_BaseWeapon_C_SetSecondaryElementalData Parms{};

	Parms.BaseColor = std::move(BaseColor);
	Parms.HighlightColor = std::move(HighlightColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.Event_ModeSwitched
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::Event_ModeSwitched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "Event_ModeSwitched");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.Weapon_NotifyEquipped
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::Weapon_NotifyEquipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "Weapon_NotifyEquipped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.K2_OnWeaponSkinApplied
// (Event, Protected, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::K2_OnWeaponSkinApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "K2_OnWeaponSkinApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.SetSecondary
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::SetSecondary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "SetSecondary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.SetPrimary
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::SetPrimary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "SetPrimary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.Initialize Elemental Emissive
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::Initialize_Elemental_Emissive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "Initialize Elemental Emissive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.OnSwitchToSecondary
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::OnSwitchToSecondary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "OnSwitchToSecondary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.OnSwitchToPrimary
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::OnSwitchToPrimary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "OnSwitchToPrimary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.SetPrimaryElementalData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     BaseColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     HighlightColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_MAL_BaseWeapon_C::SetPrimaryElementalData(const struct FLinearColor& BaseColor, const struct FLinearColor& HighlightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "SetPrimaryElementalData");

	Params::BPWeap_MAL_BaseWeapon_C_SetPrimaryElementalData Parms{};

	Parms.BaseColor = std::move(BaseColor);
	Parms.HighlightColor = std::move(HighlightColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.ElementalInterpolationTimeline__UpdateFunc
// (BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::ElementalInterpolationTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "ElementalInterpolationTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.ElementalInterpolationTimeline__FinishedFunc
// (BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::ElementalInterpolationTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "ElementalInterpolationTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.WeaponAttached
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::WeaponAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "WeaponAttached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.Notify_ReloadStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAutoReload                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWeap_MAL_BaseWeapon_C::Notify_ReloadStarted(bool bAutoReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "Notify_ReloadStarted");

	Params::BPWeap_MAL_BaseWeapon_C_Notify_ReloadStarted Parms{};

	Parms.bAutoReload = bAutoReload;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABPWeap_MAL_BaseWeapon_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C.GetChargePercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ChargePercent                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_MAL_BaseWeapon_C::GetChargePercent(float* ChargePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_MAL_BaseWeapon_C", "GetChargePercent");

	Params::BPWeap_MAL_BaseWeapon_C_GetChargePercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChargePercent != nullptr)
		*ChargePercent = Parms.ChargePercent;
}

}

