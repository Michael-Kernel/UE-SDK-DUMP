#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIShieldSpawningComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AIShieldSpawningComponent.AIShieldSpawningComponent_C.ExecuteUbergraph_AIShieldSpawningComponent
// 0x00C8 (0x00C8 - 0x0000)
struct AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed2;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercent;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_TargetSocket;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_TargetOffset;                         // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset1;                    // 0x0024(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewShield3;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist2;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_ActorToThrowAt;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage1;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ActorSocket;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ActorOffset;                          // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset;                     // 0x005C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewShield2;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist1;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_LocationToThrowAt;                    // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewShield1;                    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist;                   // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_RequestNewShield;                     // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Event_NewShieldClass;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue1;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue2;                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue3;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent) == 0x000008, "Wrong alignment on AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent");
static_assert(sizeof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent) == 0x0000C8, "Wrong size on AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, EntryPoint) == 0x000000, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowSpeed2) == 0x000004, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowSpeed2' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowAnglePercent) == 0x000008, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_TargetSocket) == 0x000010, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_TargetSocket' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_TargetOffset) == 0x000018, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_TargetOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowAngleOffset1) == 0x000024, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowAngleOffset1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_MaxPrediction1) == 0x000030, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_MaxPrediction1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_RequestNewShield3) == 0x000034, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_RequestNewShield3' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_SpawnIfDoesntExist2) == 0x000035, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_SpawnIfDoesntExist2' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ActorToThrowAt) == 0x000038, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowSpeed1) == 0x000040, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowSpeed1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowAnglePercentage1) == 0x000044, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowAnglePercentage1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ActorSocket) == 0x000048, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ActorSocket' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ActorOffset) == 0x000050, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ActorOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowAngleOffset) == 0x00005C, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_MaxPrediction) == 0x000068, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_RequestNewShield2) == 0x00006C, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_RequestNewShield2' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_SpawnIfDoesntExist1) == 0x00006D, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_SpawnIfDoesntExist1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_LocationToThrowAt) == 0x000070, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowSpeed) == 0x00007C, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_ThrowAnglePercentage) == 0x000080, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_RequestNewShield1) == 0x000084, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_RequestNewShield1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_SpawnIfDoesntExist) == 0x000085, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_SpawnIfDoesntExist' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_RequestNewShield) == 0x000086, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_RequestNewShield' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, K2Node_Event_NewShieldClass) == 0x000088, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::K2Node_Event_NewShieldClass' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_GetHeldActor_ReturnValue) == 0x000090, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_GetHeldActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_GetHeldActor_ReturnValue1) == 0x0000A0, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_GetHeldActor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_IsValid_ReturnValue1) == 0x0000A8, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_GetHeldActor_ReturnValue2) == 0x0000B0, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_GetHeldActor_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_GetHeldActor_ReturnValue3) == 0x0000B8, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_GetHeldActor_ReturnValue3' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_IsValid_ReturnValue2) == 0x0000C0, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent, CallFunc_IsValid_ReturnValue3) == 0x0000C1, "Member 'AIShieldSpawningComponent_C_ExecuteUbergraph_AIShieldSpawningComponent::CallFunc_IsValid_ReturnValue3' has a wrong offset!");

// Function AIShieldSpawningComponent.AIShieldSpawningComponent_C.AIShield_SetNewShieldClass
// 0x0008 (0x0008 - 0x0000)
struct AIShieldSpawningComponent_C_AIShield_SetNewShieldClass final
{
public:
	class UClass*                                 NewShieldClass;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIShieldSpawningComponent_C_AIShield_SetNewShieldClass) == 0x000008, "Wrong alignment on AIShieldSpawningComponent_C_AIShield_SetNewShieldClass");
static_assert(sizeof(AIShieldSpawningComponent_C_AIShield_SetNewShieldClass) == 0x000008, "Wrong size on AIShieldSpawningComponent_C_AIShield_SetNewShieldClass");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_SetNewShieldClass, NewShieldClass) == 0x000000, "Member 'AIShieldSpawningComponent_C_AIShield_SetNewShieldClass::NewShieldClass' has a wrong offset!");

// Function AIShieldSpawningComponent.AIShieldSpawningComponent_C.AIShield_Drop
// 0x0001 (0x0001 - 0x0000)
struct AIShieldSpawningComponent_C_AIShield_Drop final
{
public:
	bool                                          RequestNewShield;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIShieldSpawningComponent_C_AIShield_Drop) == 0x000001, "Wrong alignment on AIShieldSpawningComponent_C_AIShield_Drop");
static_assert(sizeof(AIShieldSpawningComponent_C_AIShield_Drop) == 0x000001, "Wrong size on AIShieldSpawningComponent_C_AIShield_Drop");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_Drop, RequestNewShield) == 0x000000, "Member 'AIShieldSpawningComponent_C_AIShield_Drop::RequestNewShield' has a wrong offset!");

// Function AIShieldSpawningComponent.AIShieldSpawningComponent_C.AIShield_ThrowAtLocation
// 0x0018 (0x0018 - 0x0000)
struct AIShieldSpawningComponent_C_AIShield_ThrowAtLocation final
{
public:
	struct FVector                                LocationToThrowAt;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewShield;                                  // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation) == 0x000004, "Wrong alignment on AIShieldSpawningComponent_C_AIShield_ThrowAtLocation");
static_assert(sizeof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation) == 0x000018, "Wrong size on AIShieldSpawningComponent_C_AIShield_ThrowAtLocation");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation, LocationToThrowAt) == 0x000000, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtLocation::LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation, ThrowSpeed) == 0x00000C, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtLocation::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation, ThrowAnglePercentage) == 0x000010, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtLocation::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation, RequestNewShield) == 0x000014, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtLocation::RequestNewShield' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtLocation, SpawnIfDoesntExist) == 0x000015, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtLocation::SpawnIfDoesntExist' has a wrong offset!");

// Function AIShieldSpawningComponent.AIShieldSpawningComponent_C.AIShield_ThrowAtActor
// 0x0038 (0x0038 - 0x0000)
struct AIShieldSpawningComponent_C_AIShield_ThrowAtActor final
{
public:
	class AActor*                                 ActorToThrowAt;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActorSocket;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewShield;                                  // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor) == 0x000008, "Wrong alignment on AIShieldSpawningComponent_C_AIShield_ThrowAtActor");
static_assert(sizeof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor) == 0x000038, "Wrong size on AIShieldSpawningComponent_C_AIShield_ThrowAtActor");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, ActorToThrowAt) == 0x000000, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, ThrowSpeed) == 0x000008, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, ThrowAnglePercentage) == 0x00000C, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, ActorSocket) == 0x000010, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::ActorSocket' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, ActorOffset) == 0x000018, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::ActorOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, ThrowAngleOffset) == 0x000024, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, MaxPrediction) == 0x000030, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, RequestNewShield) == 0x000034, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::RequestNewShield' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtActor, SpawnIfDoesntExist) == 0x000035, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtActor::SpawnIfDoesntExist' has a wrong offset!");

// Function AIShieldSpawningComponent.AIShieldSpawningComponent_C.AIShield_ThrowAtTarget
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) AIShieldSpawningComponent_C_AIShield_ThrowAtTarget final
{
public:
	float                                         ThrowSpeed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercent;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewShield;                                  // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget) == 0x000008, "Wrong alignment on AIShieldSpawningComponent_C_AIShield_ThrowAtTarget");
static_assert(sizeof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget) == 0x000030, "Wrong size on AIShieldSpawningComponent_C_AIShield_ThrowAtTarget");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, ThrowSpeed) == 0x000000, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, ThrowAnglePercent) == 0x000004, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, TargetSocket) == 0x000008, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::TargetSocket' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, TargetOffset) == 0x000010, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, ThrowAngleOffset) == 0x00001C, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, MaxPrediction) == 0x000028, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, RequestNewShield) == 0x00002C, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::RequestNewShield' has a wrong offset!");
static_assert(offsetof(AIShieldSpawningComponent_C_AIShield_ThrowAtTarget, SpawnIfDoesntExist) == 0x00002D, "Member 'AIShieldSpawningComponent_C_AIShield_ThrowAtTarget::SpawnIfDoesntExist' has a wrong offset!");

}

