#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightProjectile_AmberManagement_Healing

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LightProjectile_AmberManagement_Healing.LightProjectile_AmberManagement_Healing_C.EnableProjectileHoming
// 0x0008 (0x0008 - 0x0000)
struct LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming final
{
public:
	class UOakLightProjectile*                    LightProjectile;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming) == 0x000008, "Wrong alignment on LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming");
static_assert(sizeof(LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming) == 0x000008, "Wrong size on LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming");
static_assert(offsetof(LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming, LightProjectile) == 0x000000, "Member 'LightProjectile_AmberManagement_Healing_C_EnableProjectileHoming::LightProjectile' has a wrong offset!");

// Function LightProjectile_AmberManagement_Healing.LightProjectile_AmberManagement_Healing_C.TryEnableHoming
// 0x0010 (0x0010 - 0x0000)
struct LightProjectile_AmberManagement_Healing_C_TryEnableHoming final
{
public:
	class UOakLightProjectile*                    LightProjectile;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightProjectile_AmberManagement_Healing_C_TryEnableHoming) == 0x000008, "Wrong alignment on LightProjectile_AmberManagement_Healing_C_TryEnableHoming");
static_assert(sizeof(LightProjectile_AmberManagement_Healing_C_TryEnableHoming) == 0x000010, "Wrong size on LightProjectile_AmberManagement_Healing_C_TryEnableHoming");
static_assert(offsetof(LightProjectile_AmberManagement_Healing_C_TryEnableHoming, LightProjectile) == 0x000000, "Member 'LightProjectile_AmberManagement_Healing_C_TryEnableHoming::LightProjectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_AmberManagement_Healing_C_TryEnableHoming, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000008, "Member 'LightProjectile_AmberManagement_Healing_C_TryEnableHoming::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");

// Function LightProjectile_AmberManagement_Healing.LightProjectile_AmberManagement_Healing_C.OnLifetimeExpired
// 0x00A0 (0x00A0 - 0x0000)
struct LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Temp_struct_Variable;                              // 0x0008(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 CallFunc_GetTarget_ReturnValue;                    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired) == 0x000008, "Wrong alignment on LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired");
static_assert(sizeof(LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired) == 0x0000A0, "Wrong size on LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired");
static_assert(offsetof(LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired, Projectile) == 0x000000, "Member 'LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired, Temp_struct_Variable) == 0x000008, "Member 'LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired, CallFunc_GetTarget_ReturnValue) == 0x000098, "Member 'LightProjectile_AmberManagement_Healing_C_OnLifetimeExpired::CallFunc_GetTarget_ReturnValue' has a wrong offset!");

}

