#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Challenge_Console_24

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Challenge_Console_24.BP_Challenge_Console_24_C.ExecuteUbergraph_BP_Challenge_Console_24
// 0x0020 (0x0020 - 0x0000)
struct BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AGbxPlayerController*             K2Node_Event_CompletedPlayer;                      // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24) == 0x000008, "Wrong alignment on BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24");
static_assert(sizeof(BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24) == 0x000020, "Wrong size on BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24");
static_assert(offsetof(BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24, EntryPoint) == 0x000000, "Member 'BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24, K2Node_Event_CompletedPlayer) == 0x000008, "Member 'BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24::K2Node_Event_CompletedPlayer' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000010, "Member 'BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Challenge_Console_24_C_ExecuteUbergraph_BP_Challenge_Console_24::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Challenge_Console_24.BP_Challenge_Console_24_C.CompletedChallenge
// 0x0008 (0x0008 - 0x0000)
struct BP_Challenge_Console_24_C_CompletedChallenge final
{
public:
	const class AGbxPlayerController*             CompletedPlayer;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Challenge_Console_24_C_CompletedChallenge) == 0x000008, "Wrong alignment on BP_Challenge_Console_24_C_CompletedChallenge");
static_assert(sizeof(BP_Challenge_Console_24_C_CompletedChallenge) == 0x000008, "Wrong size on BP_Challenge_Console_24_C_CompletedChallenge");
static_assert(offsetof(BP_Challenge_Console_24_C_CompletedChallenge, CompletedPlayer) == 0x000000, "Member 'BP_Challenge_Console_24_C_CompletedChallenge::CompletedPlayer' has a wrong offset!");

}

