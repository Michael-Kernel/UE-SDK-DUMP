#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_TinyTinaGun

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_TinyTinaGun.Proj_TinyTinaGun_C
// 0x0058 (0x0738 - 0x06E0)
class AProj_TinyTinaGun_C final : public AOakAIBalancedProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E0(0x0008)(Transient, DuplicateTransient)
	class UOakDamageComponent*                    OakDamage;                                         // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ExplosiveMesh;                                     // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakCapsuleComponent*                   OakCapsule;                                        // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxProjectileMovementComponent*        GbxProjectileMovement;                             // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PrimedLight;                                       // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PrimedFX;                                          // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FuseTimer;                                         // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MyDamageData;                                      // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsPrimed;                                          // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BonusDamage;                                       // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Proj_TinyTinaGun(int32 EntryPoint);
	void BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileStopDelegate__DelegateSignature_Proj_Sidewinder_old(const struct FHitResult& ImpactResult);
	void OnTakeDmg(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details);
	void BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_4_OnProjectileBounceDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void HNT_Drop();
	void HNT_Prime();
	void HNT_Throw();
	void OnExplode();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_TinyTinaGun_C">();
	}
	static class AProj_TinyTinaGun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_TinyTinaGun_C>();
	}
};
static_assert(alignof(AProj_TinyTinaGun_C) == 0x000008, "Wrong alignment on AProj_TinyTinaGun_C");
static_assert(sizeof(AProj_TinyTinaGun_C) == 0x000738, "Wrong size on AProj_TinyTinaGun_C");
static_assert(offsetof(AProj_TinyTinaGun_C, UberGraphFrame) == 0x0006E0, "Member 'AProj_TinyTinaGun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, OakDamage) == 0x0006E8, "Member 'AProj_TinyTinaGun_C::OakDamage' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, ExplosiveMesh) == 0x0006F0, "Member 'AProj_TinyTinaGun_C::ExplosiveMesh' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, OakCapsule) == 0x0006F8, "Member 'AProj_TinyTinaGun_C::OakCapsule' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, GbxProjectileMovement) == 0x000700, "Member 'AProj_TinyTinaGun_C::GbxProjectileMovement' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, PrimedLight) == 0x000708, "Member 'AProj_TinyTinaGun_C::PrimedLight' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, PrimedFX) == 0x000710, "Member 'AProj_TinyTinaGun_C::PrimedFX' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, RotatingMovement) == 0x000718, "Member 'AProj_TinyTinaGun_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, FuseTimer) == 0x000720, "Member 'AProj_TinyTinaGun_C::FuseTimer' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, MyDamageData) == 0x000728, "Member 'AProj_TinyTinaGun_C::MyDamageData' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, IsPrimed) == 0x000730, "Member 'AProj_TinyTinaGun_C::IsPrimed' has a wrong offset!");
static_assert(offsetof(AProj_TinyTinaGun_C, BonusDamage) == 0x000734, "Member 'AProj_TinyTinaGun_C::BonusDamage' has a wrong offset!");

}

