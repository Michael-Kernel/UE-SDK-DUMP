#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxNav

#include "Basic.hpp"

#include "GbxNav_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GbxNav.GbxNavComponent.SetPathFindingData
// 0x0008 (0x0008 - 0x0000)
struct GbxNavComponent_SetPathFindingData final
{
public:
	class UHavokPathFindingData*                  NewPathFindingData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavComponent_SetPathFindingData) == 0x000008, "Wrong alignment on GbxNavComponent_SetPathFindingData");
static_assert(sizeof(GbxNavComponent_SetPathFindingData) == 0x000008, "Wrong size on GbxNavComponent_SetPathFindingData");
static_assert(offsetof(GbxNavComponent_SetPathFindingData, NewPathFindingData) == 0x000000, "Member 'GbxNavComponent_SetPathFindingData::NewPathFindingData' has a wrong offset!");

// Function GbxNav.GbxNavComponent.TryMoving
// 0x0004 (0x0004 - 0x0000)
struct GbxNavComponent_TryMoving final
{
public:
	float                                         FDuration;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavComponent_TryMoving) == 0x000004, "Wrong alignment on GbxNavComponent_TryMoving");
static_assert(sizeof(GbxNavComponent_TryMoving) == 0x000004, "Wrong size on GbxNavComponent_TryMoving");
static_assert(offsetof(GbxNavComponent_TryMoving, FDuration) == 0x000000, "Member 'GbxNavComponent_TryMoving::FDuration' has a wrong offset!");

// Function GbxNav.GbxNavComponent.GetPathFindingData
// 0x0008 (0x0008 - 0x0000)
struct GbxNavComponent_GetPathFindingData final
{
public:
	class UHavokPathFindingData*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavComponent_GetPathFindingData) == 0x000008, "Wrong alignment on GbxNavComponent_GetPathFindingData");
static_assert(sizeof(GbxNavComponent_GetPathFindingData) == 0x000008, "Wrong size on GbxNavComponent_GetPathFindingData");
static_assert(offsetof(GbxNavComponent_GetPathFindingData, ReturnValue) == 0x000000, "Member 'GbxNavComponent_GetPathFindingData::ReturnValue' has a wrong offset!");

// Function GbxNav.GbxNavBlueprintLibrary.FindNavMeshPoint
// 0x0038 (0x0038 - 0x0000)
struct GbxNavBlueprintLibrary_FindNavMeshPoint final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxNavMeshLayer*                       Layer;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxNavBlueprintLibrary_FindNavMeshPoint) == 0x000008, "Wrong alignment on GbxNavBlueprintLibrary_FindNavMeshPoint");
static_assert(sizeof(GbxNavBlueprintLibrary_FindNavMeshPoint) == 0x000038, "Wrong size on GbxNavBlueprintLibrary_FindNavMeshPoint");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPoint, WorldContextObject) == 0x000000, "Member 'GbxNavBlueprintLibrary_FindNavMeshPoint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPoint, Point) == 0x000008, "Member 'GbxNavBlueprintLibrary_FindNavMeshPoint::Point' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPoint, Radius) == 0x000014, "Member 'GbxNavBlueprintLibrary_FindNavMeshPoint::Radius' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPoint, Result) == 0x000018, "Member 'GbxNavBlueprintLibrary_FindNavMeshPoint::Result' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPoint, Layer) == 0x000028, "Member 'GbxNavBlueprintLibrary_FindNavMeshPoint::Layer' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPoint, ReturnValue) == 0x000030, "Member 'GbxNavBlueprintLibrary_FindNavMeshPoint::ReturnValue' has a wrong offset!");

// Function GbxNav.GbxNavBlueprintLibrary.FindNavMeshPointForActor
// 0x0028 (0x0028 - 0x0000)
struct GbxNavBlueprintLibrary_FindNavMeshPointForActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxNavBlueprintLibrary_FindNavMeshPointForActor) == 0x000008, "Wrong alignment on GbxNavBlueprintLibrary_FindNavMeshPointForActor");
static_assert(sizeof(GbxNavBlueprintLibrary_FindNavMeshPointForActor) == 0x000028, "Wrong size on GbxNavBlueprintLibrary_FindNavMeshPointForActor");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPointForActor, Actor) == 0x000000, "Member 'GbxNavBlueprintLibrary_FindNavMeshPointForActor::Actor' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPointForActor, Point) == 0x000008, "Member 'GbxNavBlueprintLibrary_FindNavMeshPointForActor::Point' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPointForActor, Radius) == 0x000014, "Member 'GbxNavBlueprintLibrary_FindNavMeshPointForActor::Radius' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPointForActor, Result) == 0x000018, "Member 'GbxNavBlueprintLibrary_FindNavMeshPointForActor::Result' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_FindNavMeshPointForActor, ReturnValue) == 0x000024, "Member 'GbxNavBlueprintLibrary_FindNavMeshPointForActor::ReturnValue' has a wrong offset!");

// Function GbxNav.GbxNavBlueprintLibrary.ForceNavMeshLayer
// 0x0010 (0x0010 - 0x0000)
struct GbxNavBlueprintLibrary_ForceNavMeshLayer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxNavMeshLayer*                       ForcedNavMeshLayer;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavBlueprintLibrary_ForceNavMeshLayer) == 0x000008, "Wrong alignment on GbxNavBlueprintLibrary_ForceNavMeshLayer");
static_assert(sizeof(GbxNavBlueprintLibrary_ForceNavMeshLayer) == 0x000010, "Wrong size on GbxNavBlueprintLibrary_ForceNavMeshLayer");
static_assert(offsetof(GbxNavBlueprintLibrary_ForceNavMeshLayer, Actor) == 0x000000, "Member 'GbxNavBlueprintLibrary_ForceNavMeshLayer::Actor' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_ForceNavMeshLayer, ForcedNavMeshLayer) == 0x000008, "Member 'GbxNavBlueprintLibrary_ForceNavMeshLayer::ForcedNavMeshLayer' has a wrong offset!");

// Function GbxNav.GbxNavBlueprintLibrary.ResourceLockAvoidance
// 0x0010 (0x0010 - 0x0000)
struct GbxNavBlueprintLibrary_ResourceLockAvoidance final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reason;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavBlueprintLibrary_ResourceLockAvoidance) == 0x000008, "Wrong alignment on GbxNavBlueprintLibrary_ResourceLockAvoidance");
static_assert(sizeof(GbxNavBlueprintLibrary_ResourceLockAvoidance) == 0x000010, "Wrong size on GbxNavBlueprintLibrary_ResourceLockAvoidance");
static_assert(offsetof(GbxNavBlueprintLibrary_ResourceLockAvoidance, Actor) == 0x000000, "Member 'GbxNavBlueprintLibrary_ResourceLockAvoidance::Actor' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_ResourceLockAvoidance, Reason) == 0x000008, "Member 'GbxNavBlueprintLibrary_ResourceLockAvoidance::Reason' has a wrong offset!");

// Function GbxNav.GbxNavBlueprintLibrary.ResourceUnlockAvoidance
// 0x0010 (0x0010 - 0x0000)
struct GbxNavBlueprintLibrary_ResourceUnlockAvoidance final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reason;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavBlueprintLibrary_ResourceUnlockAvoidance) == 0x000008, "Wrong alignment on GbxNavBlueprintLibrary_ResourceUnlockAvoidance");
static_assert(sizeof(GbxNavBlueprintLibrary_ResourceUnlockAvoidance) == 0x000010, "Wrong size on GbxNavBlueprintLibrary_ResourceUnlockAvoidance");
static_assert(offsetof(GbxNavBlueprintLibrary_ResourceUnlockAvoidance, Actor) == 0x000000, "Member 'GbxNavBlueprintLibrary_ResourceUnlockAvoidance::Actor' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_ResourceUnlockAvoidance, Reason) == 0x000008, "Member 'GbxNavBlueprintLibrary_ResourceUnlockAvoidance::Reason' has a wrong offset!");

// Function GbxNav.GbxNavBlueprintLibrary.SetAINavPathType
// 0x0010 (0x0010 - 0x0000)
struct GbxNavBlueprintLibrary_SetAINavPathType final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxPathType                                  PathType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxNavBlueprintLibrary_SetAINavPathType) == 0x000008, "Wrong alignment on GbxNavBlueprintLibrary_SetAINavPathType");
static_assert(sizeof(GbxNavBlueprintLibrary_SetAINavPathType) == 0x000010, "Wrong size on GbxNavBlueprintLibrary_SetAINavPathType");
static_assert(offsetof(GbxNavBlueprintLibrary_SetAINavPathType, Actor) == 0x000000, "Member 'GbxNavBlueprintLibrary_SetAINavPathType::Actor' has a wrong offset!");
static_assert(offsetof(GbxNavBlueprintLibrary_SetAINavPathType, PathType) == 0x000008, "Member 'GbxNavBlueprintLibrary_SetAINavPathType::PathType' has a wrong offset!");

// Function GbxNav.GbxNavMeshPainter.SetPainterEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxNavMeshPainter_SetPainterEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavMeshPainter_SetPainterEnabled) == 0x000001, "Wrong alignment on GbxNavMeshPainter_SetPainterEnabled");
static_assert(sizeof(GbxNavMeshPainter_SetPainterEnabled) == 0x000001, "Wrong size on GbxNavMeshPainter_SetPainterEnabled");
static_assert(offsetof(GbxNavMeshPainter_SetPainterEnabled, bNewEnabled) == 0x000000, "Member 'GbxNavMeshPainter_SetPainterEnabled::bNewEnabled' has a wrong offset!");

// Function GbxNav.GbxNavMeshPainter.IsPainterEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxNavMeshPainter_IsPainterEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavMeshPainter_IsPainterEnabled) == 0x000001, "Wrong alignment on GbxNavMeshPainter_IsPainterEnabled");
static_assert(sizeof(GbxNavMeshPainter_IsPainterEnabled) == 0x000001, "Wrong size on GbxNavMeshPainter_IsPainterEnabled");
static_assert(offsetof(GbxNavMeshPainter_IsPainterEnabled, ReturnValue) == 0x000000, "Member 'GbxNavMeshPainter_IsPainterEnabled::ReturnValue' has a wrong offset!");

// Function GbxNav.GbxNavMeshPainterComponent.SetPainterAlwaysEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxNavMeshPainterComponent_SetPainterAlwaysEnabled final
{
public:
	bool                                          bNewAlwaysEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavMeshPainterComponent_SetPainterAlwaysEnabled) == 0x000001, "Wrong alignment on GbxNavMeshPainterComponent_SetPainterAlwaysEnabled");
static_assert(sizeof(GbxNavMeshPainterComponent_SetPainterAlwaysEnabled) == 0x000001, "Wrong size on GbxNavMeshPainterComponent_SetPainterAlwaysEnabled");
static_assert(offsetof(GbxNavMeshPainterComponent_SetPainterAlwaysEnabled, bNewAlwaysEnabled) == 0x000000, "Member 'GbxNavMeshPainterComponent_SetPainterAlwaysEnabled::bNewAlwaysEnabled' has a wrong offset!");

// Function GbxNav.GbxNavMeshPainterComponent.SetPainterEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxNavMeshPainterComponent_SetPainterEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavMeshPainterComponent_SetPainterEnabled) == 0x000001, "Wrong alignment on GbxNavMeshPainterComponent_SetPainterEnabled");
static_assert(sizeof(GbxNavMeshPainterComponent_SetPainterEnabled) == 0x000001, "Wrong size on GbxNavMeshPainterComponent_SetPainterEnabled");
static_assert(offsetof(GbxNavMeshPainterComponent_SetPainterEnabled, bNewEnabled) == 0x000000, "Member 'GbxNavMeshPainterComponent_SetPainterEnabled::bNewEnabled' has a wrong offset!");

// Function GbxNav.GbxNavMeshPainterComponent.IsPainterEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxNavMeshPainterComponent_IsPainterEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxNavMeshPainterComponent_IsPainterEnabled) == 0x000001, "Wrong alignment on GbxNavMeshPainterComponent_IsPainterEnabled");
static_assert(sizeof(GbxNavMeshPainterComponent_IsPainterEnabled) == 0x000001, "Wrong size on GbxNavMeshPainterComponent_IsPainterEnabled");
static_assert(offsetof(GbxNavMeshPainterComponent_IsPainterEnabled, ReturnValue) == 0x000000, "Member 'GbxNavMeshPainterComponent_IsPainterEnabled::ReturnValue' has a wrong offset!");

// Function GbxNav.HavokNavObstacleComponent.LockObstacle
// 0x0008 (0x0008 - 0x0000)
struct HavokNavObstacleComponent_LockObstacle final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokNavObstacleComponent_LockObstacle) == 0x000004, "Wrong alignment on HavokNavObstacleComponent_LockObstacle");
static_assert(sizeof(HavokNavObstacleComponent_LockObstacle) == 0x000008, "Wrong size on HavokNavObstacleComponent_LockObstacle");
static_assert(offsetof(HavokNavObstacleComponent_LockObstacle, Reason) == 0x000000, "Member 'HavokNavObstacleComponent_LockObstacle::Reason' has a wrong offset!");

// Function GbxNav.HavokNavObstacleComponent.UnlockObstacle
// 0x0008 (0x0008 - 0x0000)
struct HavokNavObstacleComponent_UnlockObstacle final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokNavObstacleComponent_UnlockObstacle) == 0x000004, "Wrong alignment on HavokNavObstacleComponent_UnlockObstacle");
static_assert(sizeof(HavokNavObstacleComponent_UnlockObstacle) == 0x000008, "Wrong size on HavokNavObstacleComponent_UnlockObstacle");
static_assert(offsetof(HavokNavObstacleComponent_UnlockObstacle, Reason) == 0x000000, "Member 'HavokNavObstacleComponent_UnlockObstacle::Reason' has a wrong offset!");

// Function GbxNav.HavokUserEdgeActor.SetEdgeEnabled
// 0x0001 (0x0001 - 0x0000)
struct HavokUserEdgeActor_SetEdgeEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokUserEdgeActor_SetEdgeEnabled) == 0x000001, "Wrong alignment on HavokUserEdgeActor_SetEdgeEnabled");
static_assert(sizeof(HavokUserEdgeActor_SetEdgeEnabled) == 0x000001, "Wrong size on HavokUserEdgeActor_SetEdgeEnabled");
static_assert(offsetof(HavokUserEdgeActor_SetEdgeEnabled, bNewEnabled) == 0x000000, "Member 'HavokUserEdgeActor_SetEdgeEnabled::bNewEnabled' has a wrong offset!");

// Function GbxNav.HavokUserEdgeActor.IsEdgeEnabled
// 0x0001 (0x0001 - 0x0000)
struct HavokUserEdgeActor_IsEdgeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokUserEdgeActor_IsEdgeEnabled) == 0x000001, "Wrong alignment on HavokUserEdgeActor_IsEdgeEnabled");
static_assert(sizeof(HavokUserEdgeActor_IsEdgeEnabled) == 0x000001, "Wrong size on HavokUserEdgeActor_IsEdgeEnabled");
static_assert(offsetof(HavokUserEdgeActor_IsEdgeEnabled, ReturnValue) == 0x000000, "Member 'HavokUserEdgeActor_IsEdgeEnabled::ReturnValue' has a wrong offset!");

// Function GbxNav.HavokUserEdgeComponent.AnchorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct HavokUserEdgeComponent_AnchorDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokUserEdgeComponent_AnchorDestroyed) == 0x000008, "Wrong alignment on HavokUserEdgeComponent_AnchorDestroyed");
static_assert(sizeof(HavokUserEdgeComponent_AnchorDestroyed) == 0x000008, "Wrong size on HavokUserEdgeComponent_AnchorDestroyed");
static_assert(offsetof(HavokUserEdgeComponent_AnchorDestroyed, Actor) == 0x000000, "Member 'HavokUserEdgeComponent_AnchorDestroyed::Actor' has a wrong offset!");

// Function GbxNav.HavokUserEdgeComponent.SetEdgeEnabled
// 0x0001 (0x0001 - 0x0000)
struct HavokUserEdgeComponent_SetEdgeEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokUserEdgeComponent_SetEdgeEnabled) == 0x000001, "Wrong alignment on HavokUserEdgeComponent_SetEdgeEnabled");
static_assert(sizeof(HavokUserEdgeComponent_SetEdgeEnabled) == 0x000001, "Wrong size on HavokUserEdgeComponent_SetEdgeEnabled");
static_assert(offsetof(HavokUserEdgeComponent_SetEdgeEnabled, bNewEnabled) == 0x000000, "Member 'HavokUserEdgeComponent_SetEdgeEnabled::bNewEnabled' has a wrong offset!");

// Function GbxNav.HavokUserEdgeComponent.IsEdgeEnabled
// 0x0001 (0x0001 - 0x0000)
struct HavokUserEdgeComponent_IsEdgeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokUserEdgeComponent_IsEdgeEnabled) == 0x000001, "Wrong alignment on HavokUserEdgeComponent_IsEdgeEnabled");
static_assert(sizeof(HavokUserEdgeComponent_IsEdgeEnabled) == 0x000001, "Wrong size on HavokUserEdgeComponent_IsEdgeEnabled");
static_assert(offsetof(HavokUserEdgeComponent_IsEdgeEnabled, ReturnValue) == 0x000000, "Member 'HavokUserEdgeComponent_IsEdgeEnabled::ReturnValue' has a wrong offset!");

// Function GbxNav.HavokUserEdgePreviewComponent.OnBlueprintCompiled
// 0x0008 (0x0008 - 0x0000)
struct HavokUserEdgePreviewComponent_OnBlueprintCompiled final
{
public:
	class UBlueprint*                             BP;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HavokUserEdgePreviewComponent_OnBlueprintCompiled) == 0x000008, "Wrong alignment on HavokUserEdgePreviewComponent_OnBlueprintCompiled");
static_assert(sizeof(HavokUserEdgePreviewComponent_OnBlueprintCompiled) == 0x000008, "Wrong size on HavokUserEdgePreviewComponent_OnBlueprintCompiled");
static_assert(offsetof(HavokUserEdgePreviewComponent_OnBlueprintCompiled, BP) == 0x000000, "Member 'HavokUserEdgePreviewComponent_OnBlueprintCompiled::BP' has a wrong offset!");

}

