#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_HeavyShared

#include "Basic.hpp"

#include "Enum_Heavy_WeaponSocket_structs.hpp"
#include "OakGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_FireBeam_Start
// 0x0002 (0x0002 - 0x0000)
struct BPI_HeavyShared_C_Heavy_FireBeam_Start final
{
public:
	Enum_Heavy_WeaponSocket                       WeaponSocket;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNavAnim;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_FireBeam_Start) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_Heavy_FireBeam_Start");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_FireBeam_Start) == 0x000002, "Wrong size on BPI_HeavyShared_C_Heavy_FireBeam_Start");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_FireBeam_Start, WeaponSocket) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_FireBeam_Start::WeaponSocket' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_FireBeam_Start, IsNavAnim) == 0x000001, "Member 'BPI_HeavyShared_C_Heavy_FireBeam_Start::IsNavAnim' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_FireBeam_Stop
// 0x0001 (0x0001 - 0x0000)
struct BPI_HeavyShared_C_Heavy_FireBeam_Stop final
{
public:
	bool                                          IsNavAnim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_FireBeam_Stop) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_Heavy_FireBeam_Stop");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_FireBeam_Stop) == 0x000001, "Wrong size on BPI_HeavyShared_C_Heavy_FireBeam_Stop");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_FireBeam_Stop, IsNavAnim) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_FireBeam_Stop::IsNavAnim' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_ElementalTrap_Spawn
// 0x0010 (0x0010 - 0x0000)
struct BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn final
{
public:
	class AActor*                                 Obstruction1;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Obstruction2;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn) == 0x000010, "Wrong size on BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn, Obstruction1) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn::Obstruction1' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn, Obstruction2) == 0x000008, "Member 'BPI_HeavyShared_C_Heavy_ElementalTrap_Spawn::Obstruction2' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_BlastWave
// 0x0008 (0x0008 - 0x0000)
struct BPI_HeavyShared_C_Heavy_BlastWave final
{
public:
	class AActor*                                 AttackTarget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_BlastWave) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_BlastWave");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_BlastWave) == 0x000008, "Wrong size on BPI_HeavyShared_C_Heavy_BlastWave");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BlastWave, AttackTarget) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_BlastWave::AttackTarget' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_BlastShot
// 0x0010 (0x0010 - 0x0000)
struct BPI_HeavyShared_C_Heavy_BlastShot final
{
public:
	class AActor*                                 ProjectileTarget;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_BlastShot) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_BlastShot");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_BlastShot) == 0x000010, "Wrong size on BPI_HeavyShared_C_Heavy_BlastShot");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BlastShot, ProjectileTarget) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_BlastShot::ProjectileTarget' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BlastShot, WeaponSocket) == 0x000008, "Member 'BPI_HeavyShared_C_Heavy_BlastShot::WeaponSocket' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_BackpackDeathBegan
// 0x0008 (0x0008 - 0x0000)
struct BPI_HeavyShared_C_Heavy_BackpackDeathBegan final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_BackpackDeathBegan) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_BackpackDeathBegan");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_BackpackDeathBegan) == 0x000008, "Wrong size on BPI_HeavyShared_C_Heavy_BackpackDeathBegan");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BackpackDeathBegan, DamageCauser) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_BackpackDeathBegan::DamageCauser' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_WasBackpackExplosionThresholdTriggered
// 0x0001 (0x0001 - 0x0000)
struct BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered final
{
public:
	bool                                          ThresholdReached;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered) == 0x000001, "Wrong size on BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered, ThresholdReached) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_WasBackpackExplosionThresholdTriggered::ThresholdReached' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_BackpackExplosion_TriggerExplosion_PostDeath
// 0x0018 (0x0018 - 0x0000)
struct BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath final
{
public:
	struct FVector                                ExplosionLocation;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath) == 0x000018, "Wrong size on BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath, ExplosionLocation) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath, DamageCauser) == 0x000010, "Member 'BPI_HeavyShared_C_Heavy_BackpackExplosion_TriggerExplosion_PostDeath::DamageCauser' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct BPI_HeavyShared_C_Heavy_GetMaxHealth final
{
public:
	float                                         MaxHealth;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_GetMaxHealth) == 0x000004, "Wrong alignment on BPI_HeavyShared_C_Heavy_GetMaxHealth");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_GetMaxHealth) == 0x000004, "Wrong size on BPI_HeavyShared_C_Heavy_GetMaxHealth");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GetMaxHealth, MaxHealth) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_GetMaxHealth::MaxHealth' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_GroundPoundTrail
// 0x0040 (0x0040 - 0x0000)
struct BPI_HeavyShared_C_Heavy_GroundPoundTrail final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OptionalStartingSocket;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalImpactsAlongPath;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OptionalDamageAlongPath;                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OptionalDamageAtTargetLocation;                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        PathFX;                                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        TargetFX;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PathFXStartScale;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PathFXEndScale;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_GroundPoundTrail) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_GroundPoundTrail");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_GroundPoundTrail) == 0x000040, "Wrong size on BPI_HeavyShared_C_Heavy_GroundPoundTrail");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, MyTarget) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::MyTarget' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, OptionalStartingSocket) == 0x000008, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::OptionalStartingSocket' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, TotalImpactsAlongPath) == 0x000010, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::TotalImpactsAlongPath' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, Duration) == 0x000014, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::Duration' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, OptionalDamageAlongPath) == 0x000018, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::OptionalDamageAlongPath' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, OptionalDamageAtTargetLocation) == 0x000020, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::OptionalDamageAtTargetLocation' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, PathFX) == 0x000028, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::PathFX' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, TargetFX) == 0x000030, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::TargetFX' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, PathFXStartScale) == 0x000038, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::PathFXStartScale' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GroundPoundTrail, PathFXEndScale) == 0x00003C, "Member 'BPI_HeavyShared_C_Heavy_GroundPoundTrail::PathFXEndScale' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_Powerhouse_LaunchPole
// 0x0010 (0x0010 - 0x0000)
struct BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftHand;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole) == 0x000010, "Wrong size on BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole, MyTarget) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole::MyTarget' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole, IsLeftHand) == 0x000008, "Member 'BPI_HeavyShared_C_Heavy_Powerhouse_LaunchPole::IsLeftHand' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_BombLaunch
// 0x0010 (0x0010 - 0x0000)
struct BPI_HeavyShared_C_Heavy_BombLaunch final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftHand;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EOakElementalType                             OverrideElementType;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_BombLaunch) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_BombLaunch");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_BombLaunch) == 0x000010, "Wrong size on BPI_HeavyShared_C_Heavy_BombLaunch");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BombLaunch, MyTarget) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_BombLaunch::MyTarget' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BombLaunch, IsLeftHand) == 0x000008, "Member 'BPI_HeavyShared_C_Heavy_BombLaunch::IsLeftHand' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_BombLaunch, OverrideElementType) == 0x000009, "Member 'BPI_HeavyShared_C_Heavy_BombLaunch::OverrideElementType' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_WeaponChargeFX
// 0x0002 (0x0002 - 0x0000)
struct BPI_HeavyShared_C_Heavy_WeaponChargeFX final
{
public:
	bool                                          IsLeftHand;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_WeaponChargeFX) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_Heavy_WeaponChargeFX");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_WeaponChargeFX) == 0x000002, "Wrong size on BPI_HeavyShared_C_Heavy_WeaponChargeFX");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_WeaponChargeFX, IsLeftHand) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_WeaponChargeFX::IsLeftHand' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_WeaponChargeFX, Enable) == 0x000001, "Member 'BPI_HeavyShared_C_Heavy_WeaponChargeFX::Enable' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_GetElementalMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_HeavyShared_C_Heavy_GetElementalMode final
{
public:
	EOakElementalType                             ElementalMode;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_GetElementalMode) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_Heavy_GetElementalMode");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_GetElementalMode) == 0x000001, "Wrong size on BPI_HeavyShared_C_Heavy_GetElementalMode");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_GetElementalMode, ElementalMode) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_GetElementalMode::ElementalMode' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_FistChargeFX
// 0x0002 (0x0002 - 0x0000)
struct BPI_HeavyShared_C_Heavy_FistChargeFX final
{
public:
	bool                                          IsLeftHand;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_FistChargeFX) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_Heavy_FistChargeFX");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_FistChargeFX) == 0x000002, "Wrong size on BPI_HeavyShared_C_Heavy_FistChargeFX");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_FistChargeFX, IsLeftHand) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_FistChargeFX::IsLeftHand' has a wrong offset!");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_FistChargeFX, Enable) == 0x000001, "Member 'BPI_HeavyShared_C_Heavy_FistChargeFX::Enable' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.Heavy_TargetChanged
// 0x0008 (0x0008 - 0x0000)
struct BPI_HeavyShared_C_Heavy_TargetChanged final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HeavyShared_C_Heavy_TargetChanged) == 0x000008, "Wrong alignment on BPI_HeavyShared_C_Heavy_TargetChanged");
static_assert(sizeof(BPI_HeavyShared_C_Heavy_TargetChanged) == 0x000008, "Wrong size on BPI_HeavyShared_C_Heavy_TargetChanged");
static_assert(offsetof(BPI_HeavyShared_C_Heavy_TargetChanged, TargetActor) == 0x000000, "Member 'BPI_HeavyShared_C_Heavy_TargetChanged::TargetActor' has a wrong offset!");

// Function BPI_HeavyShared.BPI_HeavyShared_C.HeavyLoot_FleeBeam
// 0x0001 (0x0001 - 0x0000)
struct BPI_HeavyShared_C_HeavyLoot_FleeBeam final
{
public:
	bool                                          Start;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HeavyShared_C_HeavyLoot_FleeBeam) == 0x000001, "Wrong alignment on BPI_HeavyShared_C_HeavyLoot_FleeBeam");
static_assert(sizeof(BPI_HeavyShared_C_HeavyLoot_FleeBeam) == 0x000001, "Wrong size on BPI_HeavyShared_C_HeavyLoot_FleeBeam");
static_assert(offsetof(BPI_HeavyShared_C_HeavyLoot_FleeBeam, Start) == 0x000000, "Member 'BPI_HeavyShared_C_HeavyLoot_FleeBeam::Start' has a wrong offset!");

}

