#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DA_ExplodingObject

#include "Basic.hpp"

#include "Enum_ExplodingObjectDamage_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DA_ExplodingObject.DA_ExplodingObject_C
// 0x00E0 (0x0110 - 0x0030)
class UDA_ExplodingObject_C final : public UGbxDataAssetBlueprintable
{
public:
	int32                                         DamageTypes;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    RemnantMesh;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<Enum_ExplodingObjectDamage, class UMaterialInstance*> RemnantMaterial;                                   // 0x0058(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<Enum_ExplodingObjectDamage, class UDA_ExplodingObjectPresentation_C*> Explosion;                                         // 0x00A8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UItemPoolListData*                      ItemPool;                                          // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimulatePhysics;                                   // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FuseDuration;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodedDuration;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DA_ExplodingObject_C">();
	}
	static class UDA_ExplodingObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDA_ExplodingObject_C>();
	}
};
static_assert(alignof(UDA_ExplodingObject_C) == 0x000008, "Wrong alignment on UDA_ExplodingObject_C");
static_assert(sizeof(UDA_ExplodingObject_C) == 0x000110, "Wrong size on UDA_ExplodingObject_C");
static_assert(offsetof(UDA_ExplodingObject_C, DamageTypes) == 0x000030, "Member 'UDA_ExplodingObject_C::DamageTypes' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, Mesh) == 0x000038, "Member 'UDA_ExplodingObject_C::Mesh' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, Material) == 0x000040, "Member 'UDA_ExplodingObject_C::Material' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, RemnantMesh) == 0x000048, "Member 'UDA_ExplodingObject_C::RemnantMesh' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, RemnantMaterial) == 0x000058, "Member 'UDA_ExplodingObject_C::RemnantMaterial' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, Explosion) == 0x0000A8, "Member 'UDA_ExplodingObject_C::Explosion' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, ItemPool) == 0x0000F8, "Member 'UDA_ExplodingObject_C::ItemPool' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, SimulatePhysics) == 0x000100, "Member 'UDA_ExplodingObject_C::SimulatePhysics' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, FuseDuration) == 0x000104, "Member 'UDA_ExplodingObject_C::FuseDuration' has a wrong offset!");
static_assert(offsetof(UDA_ExplodingObject_C, ExplodedDuration) == 0x000108, "Member 'UDA_ExplodingObject_C::ExplodedDuration' has a wrong offset!");

}

