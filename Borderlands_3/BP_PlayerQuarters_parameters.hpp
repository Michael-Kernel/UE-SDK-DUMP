#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerQuarters

#include "Basic.hpp"

#include "Enum_States_DoorLocked_structs.hpp"
#include "Enum_Door_State_structs.hpp"
#include "GbxMission_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.GetDoorFeedbackState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_GetDoorFeedbackState final
{
public:
	Enum_States_DoorLocked                        FeedbackState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_GetDoorFeedbackState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_GetDoorFeedbackState");
static_assert(sizeof(BP_PlayerQuarters_C_GetDoorFeedbackState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_GetDoorFeedbackState");
static_assert(offsetof(BP_PlayerQuarters_C_GetDoorFeedbackState, FeedbackState) == 0x000000, "Member 'BP_PlayerQuarters_C_GetDoorFeedbackState::FeedbackState' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.GetDoorState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_GetDoorState final
{
public:
	Enum_Door_State                               DoorState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_GetDoorState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_GetDoorState");
static_assert(sizeof(BP_PlayerQuarters_C_GetDoorState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_GetDoorState");
static_assert(offsetof(BP_PlayerQuarters_C_GetDoorState, DoorState) == 0x000000, "Member 'BP_PlayerQuarters_C_GetDoorState::DoorState' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.GetDoorLockedState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_GetDoorLockedState final
{
public:
	bool                                          Locked;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_GetDoorLockedState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_GetDoorLockedState");
static_assert(sizeof(BP_PlayerQuarters_C_GetDoorLockedState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_GetDoorLockedState");
static_assert(offsetof(BP_PlayerQuarters_C_GetDoorLockedState, Locked) == 0x000000, "Member 'BP_PlayerQuarters_C_GetDoorLockedState::Locked' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.GetDoorInteractiveState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_GetDoorInteractiveState final
{
public:
	bool                                          Interactive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_GetDoorInteractiveState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_GetDoorInteractiveState");
static_assert(sizeof(BP_PlayerQuarters_C_GetDoorInteractiveState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_GetDoorInteractiveState");
static_assert(offsetof(BP_PlayerQuarters_C_GetDoorInteractiveState, Interactive) == 0x000000, "Member 'BP_PlayerQuarters_C_GetDoorInteractiveState::Interactive' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.ClosePlayersQuarters
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerQuarters_C_ClosePlayersQuarters final
{
public:
	class AIO_Door_Parent_C*                      K2Node_DynamicCast_AsIO_Door_Parent;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Door_C>           K2Node_DynamicCast_AsBPI_Door;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_ClosePlayersQuarters) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_ClosePlayersQuarters");
static_assert(sizeof(BP_PlayerQuarters_C_ClosePlayersQuarters) == 0x000028, "Wrong size on BP_PlayerQuarters_C_ClosePlayersQuarters");
static_assert(offsetof(BP_PlayerQuarters_C_ClosePlayersQuarters, K2Node_DynamicCast_AsIO_Door_Parent) == 0x000000, "Member 'BP_PlayerQuarters_C_ClosePlayersQuarters::K2Node_DynamicCast_AsIO_Door_Parent' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ClosePlayersQuarters, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_PlayerQuarters_C_ClosePlayersQuarters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ClosePlayersQuarters, K2Node_DynamicCast_AsBPI_Door) == 0x000010, "Member 'BP_PlayerQuarters_C_ClosePlayersQuarters::K2Node_DynamicCast_AsBPI_Door' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ClosePlayersQuarters, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_PlayerQuarters_C_ClosePlayersQuarters::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ClosePlayersQuarters, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_PlayerQuarters_C_ClosePlayersQuarters::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.OpenPlayersQuarters
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerQuarters_C_OpenPlayersQuarters final
{
public:
	class AIO_Door_Parent_C*                      K2Node_DynamicCast_AsIO_Door_Parent;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Door_C>           K2Node_DynamicCast_AsBPI_Door;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_OpenPlayersQuarters) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_OpenPlayersQuarters");
static_assert(sizeof(BP_PlayerQuarters_C_OpenPlayersQuarters) == 0x000028, "Wrong size on BP_PlayerQuarters_C_OpenPlayersQuarters");
static_assert(offsetof(BP_PlayerQuarters_C_OpenPlayersQuarters, K2Node_DynamicCast_AsIO_Door_Parent) == 0x000000, "Member 'BP_PlayerQuarters_C_OpenPlayersQuarters::K2Node_DynamicCast_AsIO_Door_Parent' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_OpenPlayersQuarters, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_PlayerQuarters_C_OpenPlayersQuarters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_OpenPlayersQuarters, K2Node_DynamicCast_AsBPI_Door) == 0x000010, "Member 'BP_PlayerQuarters_C_OpenPlayersQuarters::K2Node_DynamicCast_AsBPI_Door' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_OpenPlayersQuarters, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_PlayerQuarters_C_OpenPlayersQuarters::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_OpenPlayersQuarters, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_PlayerQuarters_C_OpenPlayersQuarters::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.UserConstructionScript
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) BP_PlayerQuarters_C_UserConstructionScript final
{
public:
	TDelegate<void(class ADynamicRoomBase* RoomReference)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ADynamicRoomBase* RoomReference)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float CountdownTime)>          K2Node_CreateDelegate_OutputDelegate2;             // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ADynamicRoomBase* RoomReference)> K2Node_CreateDelegate_OutputDelegate3;             // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_UserConstructionScript");
static_assert(sizeof(BP_PlayerQuarters_C_UserConstructionScript) == 0x000048, "Wrong size on BP_PlayerQuarters_C_UserConstructionScript");
static_assert(offsetof(BP_PlayerQuarters_C_UserConstructionScript, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_PlayerQuarters_C_UserConstructionScript::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_PlayerQuarters_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_UserConstructionScript, K2Node_CreateDelegate_OutputDelegate1) == 0x000018, "Member 'BP_PlayerQuarters_C_UserConstructionScript::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_UserConstructionScript, K2Node_CreateDelegate_OutputDelegate2) == 0x000028, "Member 'BP_PlayerQuarters_C_UserConstructionScript::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_UserConstructionScript, K2Node_CreateDelegate_OutputDelegate3) == 0x000038, "Member 'BP_PlayerQuarters_C_UserConstructionScript::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.SetDoorState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_SetDoorState final
{
public:
	Enum_Door_State                               DoorState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_SetDoorState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_SetDoorState");
static_assert(sizeof(BP_PlayerQuarters_C_SetDoorState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_SetDoorState");
static_assert(offsetof(BP_PlayerQuarters_C_SetDoorState, DoorState) == 0x000000, "Member 'BP_PlayerQuarters_C_SetDoorState::DoorState' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.SetDoorLockedState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_SetDoorLockedState final
{
public:
	bool                                          Locked_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_SetDoorLockedState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_SetDoorLockedState");
static_assert(sizeof(BP_PlayerQuarters_C_SetDoorLockedState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_SetDoorLockedState");
static_assert(offsetof(BP_PlayerQuarters_C_SetDoorLockedState, Locked_) == 0x000000, "Member 'BP_PlayerQuarters_C_SetDoorLockedState::Locked_' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.SetDoorInteractiveState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_SetDoorInteractiveState final
{
public:
	bool                                          Interactive_;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_SetDoorInteractiveState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_SetDoorInteractiveState");
static_assert(sizeof(BP_PlayerQuarters_C_SetDoorInteractiveState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_SetDoorInteractiveState");
static_assert(offsetof(BP_PlayerQuarters_C_SetDoorInteractiveState, Interactive_) == 0x000000, "Member 'BP_PlayerQuarters_C_SetDoorInteractiveState::Interactive_' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.SetDoorFeedbackState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerQuarters_C_SetDoorFeedbackState final
{
public:
	Enum_States_DoorLocked                        FeedbackState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_SetDoorFeedbackState) == 0x000001, "Wrong alignment on BP_PlayerQuarters_C_SetDoorFeedbackState");
static_assert(sizeof(BP_PlayerQuarters_C_SetDoorFeedbackState) == 0x000001, "Wrong size on BP_PlayerQuarters_C_SetDoorFeedbackState");
static_assert(offsetof(BP_PlayerQuarters_C_SetDoorFeedbackState, FeedbackState) == 0x000000, "Member 'BP_PlayerQuarters_C_SetDoorFeedbackState::FeedbackState' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.Room_FullyLoaded
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerQuarters_C_Room_FullyLoaded final
{
public:
	class ADynamicRoomBase*                       RoomReference_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_Room_FullyLoaded) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_Room_FullyLoaded");
static_assert(sizeof(BP_PlayerQuarters_C_Room_FullyLoaded) == 0x000008, "Wrong size on BP_PlayerQuarters_C_Room_FullyLoaded");
static_assert(offsetof(BP_PlayerQuarters_C_Room_FullyLoaded, RoomReference_0) == 0x000000, "Member 'BP_PlayerQuarters_C_Room_FullyLoaded::RoomReference_0' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.Room_CountdownBegin
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerQuarters_C_Room_CountdownBegin final
{
public:
	float                                         CountdownTime;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_Room_CountdownBegin) == 0x000004, "Wrong alignment on BP_PlayerQuarters_C_Room_CountdownBegin");
static_assert(sizeof(BP_PlayerQuarters_C_Room_CountdownBegin) == 0x000004, "Wrong size on BP_PlayerQuarters_C_Room_CountdownBegin");
static_assert(offsetof(BP_PlayerQuarters_C_Room_CountdownBegin, CountdownTime) == 0x000000, "Member 'BP_PlayerQuarters_C_Room_CountdownBegin::CountdownTime' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.Room_Unloaded
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerQuarters_C_Room_Unloaded final
{
public:
	class ADynamicRoomBase*                       RoomReference_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_Room_Unloaded) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_Room_Unloaded");
static_assert(sizeof(BP_PlayerQuarters_C_Room_Unloaded) == 0x000008, "Wrong size on BP_PlayerQuarters_C_Room_Unloaded");
static_assert(offsetof(BP_PlayerQuarters_C_Room_Unloaded, RoomReference_0) == 0x000000, "Member 'BP_PlayerQuarters_C_Room_Unloaded::RoomReference_0' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.RoomOwnerAssigned
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerQuarters_C_RoomOwnerAssigned final
{
public:
	class ADynamicRoomBase*                       RoomReference_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_RoomOwnerAssigned) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_RoomOwnerAssigned");
static_assert(sizeof(BP_PlayerQuarters_C_RoomOwnerAssigned) == 0x000008, "Wrong size on BP_PlayerQuarters_C_RoomOwnerAssigned");
static_assert(offsetof(BP_PlayerQuarters_C_RoomOwnerAssigned, RoomReference_0) == 0x000000, "Member 'BP_PlayerQuarters_C_RoomOwnerAssigned::RoomReference_0' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters final
{
public:
	struct FMissionObjectiveReference             Objective;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	EMissionObjectiveEvent                        ObjectiveEvent;                                    // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectiveCount;                                    // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters");
static_assert(sizeof(BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters) == 0x000038, "Wrong size on BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters");
static_assert(offsetof(BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters, Objective) == 0x000000, "Member 'BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters::Objective' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters, ObjectiveEvent) == 0x000030, "Member 'BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters::ObjectiveEvent' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters, ObjectiveCount) == 0x000034, "Member 'BP_PlayerQuarters_C_BndEvt__MissionObserver_K2Node_ComponentBoundEvent_1_MissionObserverMissionObjectiveUpdate__DelegateSignature_BP_PlayerQuarters::ObjectiveCount' has a wrong offset!");

// Function BP_PlayerQuarters.BP_PlayerQuarters_C.ExecuteUbergraph_BP_PlayerQuarters
// 0x00B8 (0x00B8 - 0x0000)
struct BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AIO_Door_Parent_C*                      K2Node_DynamicCast_AsIO_Door_Parent;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_EvaluateCondition_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_Door_State                               K2Node_Event_DoorState;                            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Locked_;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Interactive_;                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_States_DoorLocked                        K2Node_Event_FeedbackState;                        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ADynamicRoomBase*                       K2Node_CustomEvent_RoomReference2;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_CountdownTime;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADynamicRoomBase*                       K2Node_CustomEvent_RoomReference1;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADynamicRoomBase*                       K2Node_CustomEvent_RoomReference;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMissionObjectiveStatus                       CallFunc_GetMissionObjectiveStatusRef_ReturnValue; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionObjectiveReference             K2Node_ComponentBoundEvent_Objective;              // 0x0048(0x0030)()
	EMissionObjectiveEvent                        K2Node_ComponentBoundEvent_ObjectiveEvent;         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_ObjectiveCount;         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIO_Door_Parent_C*                      K2Node_DynamicCast_AsIO_Door_Parent1;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters) == 0x000008, "Wrong alignment on BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters");
static_assert(sizeof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters) == 0x0000B8, "Wrong size on BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, EntryPoint) == 0x000000, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_DynamicCast_AsIO_Door_Parent) == 0x000008, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_DynamicCast_AsIO_Door_Parent' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, CallFunc_K2_EvaluateCondition_ReturnValue) == 0x000011, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::CallFunc_K2_EvaluateCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_Event_DoorState) == 0x000012, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_Event_DoorState' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_Event_Locked_) == 0x000013, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_Event_Locked_' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_Event_Interactive_) == 0x000014, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_Event_Interactive_' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_Event_FeedbackState) == 0x000015, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_Event_FeedbackState' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_CustomEvent_RoomReference2) == 0x000018, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_CustomEvent_RoomReference2' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_CustomEvent_CountdownTime) == 0x000020, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_CustomEvent_CountdownTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_CustomEvent_RoomReference1) == 0x000028, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_CustomEvent_RoomReference1' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_CustomEvent_RoomReference) == 0x000038, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_CustomEvent_RoomReference' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, CallFunc_GetMissionObjectiveStatusRef_ReturnValue) == 0x000040, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::CallFunc_GetMissionObjectiveStatusRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_ComponentBoundEvent_Objective) == 0x000048, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_ComponentBoundEvent_Objective' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_ComponentBoundEvent_ObjectiveEvent) == 0x000078, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_ComponentBoundEvent_ObjectiveEvent' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_ComponentBoundEvent_ObjectiveCount) == 0x00007C, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_ComponentBoundEvent_ObjectiveCount' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000080, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_DynamicCast_AsIO_Door_Parent1) == 0x000088, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_DynamicCast_AsIO_Door_Parent1' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_DynamicCast_bSuccess1) == 0x000090, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_CreateDelegate_OutputDelegate) == 0x000098, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters, K2Node_CreateDelegate_OutputDelegate1) == 0x0000A8, "Member 'BP_PlayerQuarters_C_ExecuteUbergraph_BP_PlayerQuarters::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");

}

