#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryCondition_RarityMultiple

#include "Basic.hpp"


namespace SDK::Params
{

// Function InventoryCondition_RarityMultiple.InventoryCondition_RarityMultiple_C.EvaluateCondition
// 0x0050 (0x0050 - 0x0000)
struct InventoryCondition_RarityMultiple_C_EvaluateCondition final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                OptionalContext;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          EverReturnedTrue;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakInventoryEquippableItem*            K2Node_DynamicCast_AsOak_Inventory_Equippable_Item; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBalanceStateComponent*        CallFunc_GetInventoryBalanceState_ReturnValue;     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryRarityData*                   CallFunc_GetInventoryRarityData_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakInventoryRarityData*                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryCondition_RarityMultiple_C_EvaluateCondition) == 0x000008, "Wrong alignment on InventoryCondition_RarityMultiple_C_EvaluateCondition");
static_assert(sizeof(InventoryCondition_RarityMultiple_C_EvaluateCondition) == 0x000050, "Wrong size on InventoryCondition_RarityMultiple_C_EvaluateCondition");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, Context) == 0x000000, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::Context' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, OptionalContext) == 0x000008, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::OptionalContext' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, ReturnValue) == 0x000010, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, EverReturnedTrue) == 0x000011, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::EverReturnedTrue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, K2Node_DynamicCast_AsOak_Inventory_Equippable_Item) == 0x000018, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::K2Node_DynamicCast_AsOak_Inventory_Equippable_Item' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, Temp_int_Array_Index_Variable) == 0x000024, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_GetInventoryBalanceState_ReturnValue) == 0x000028, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_GetInventoryBalanceState_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_GetInventoryRarityData_ReturnValue) == 0x000030, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_GetInventoryRarityData_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_Array_Get_Item) == 0x000040, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00004C, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryCondition_RarityMultiple_C_EvaluateCondition, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'InventoryCondition_RarityMultiple_C_EvaluateCondition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

