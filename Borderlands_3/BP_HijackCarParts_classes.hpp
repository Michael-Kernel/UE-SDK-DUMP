#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HijackCarParts

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Enum_TrophyState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HijackCarParts.BP_HijackCarParts_C
// 0x00A0 (0x0730 - 0x0690)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_HijackCarParts_C : public AConditionalFlavorTextIO
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0690(0x0008)(Transient, DuplicateTransient)
	class UGbxSkeletalMeshComponent*              GbxSkeletalMesh;                                   // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Part;                                              // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CarPartMesh;                                       // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          CarPartSkeletalMesh;                               // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HijackChallenge;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      HoloMaterial;                                      // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TrophyTransform;                                   // 0x06D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_TrophyState                              Trophy_State;                                      // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelData*                             ChallengeZoneMap;                                  // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_Trophy_State_NewEnumerator1;                  // 0x0718(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_Trophy_State_NewEnumerator2;                  // 0x0720(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Challenge_Incomplete();
	void Challenge_Complete();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void EvaluateChallenge();
	void OnUsedSecondary(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void ChallengeCompleted(class UChallengesComponent* ChallengeComponent, class UClass* ChallengeClass);
	void __UserState_Trophy_State_1(bool bFromLoad);
	void __UserState_Trophy_State_0(bool bFromLoad);
	void __UserState_Trophy_State_2(bool bFromLoad);
	void ExecuteUbergraph_BP_HijackCarParts(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HijackCarParts_C">();
	}
	static class ABP_HijackCarParts_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HijackCarParts_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_HijackCarParts_C) == 0x000010, "Wrong alignment on ABP_HijackCarParts_C");
static_assert(sizeof(ABP_HijackCarParts_C) == 0x000730, "Wrong size on ABP_HijackCarParts_C");
static_assert(offsetof(ABP_HijackCarParts_C, UberGraphFrame) == 0x000690, "Member 'ABP_HijackCarParts_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, GbxSkeletalMesh) == 0x000698, "Member 'ABP_HijackCarParts_C::GbxSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, Box) == 0x0006A0, "Member 'ABP_HijackCarParts_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, Part) == 0x0006A8, "Member 'ABP_HijackCarParts_C::Part' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, CarPartMesh) == 0x0006B0, "Member 'ABP_HijackCarParts_C::CarPartMesh' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, CarPartSkeletalMesh) == 0x0006B8, "Member 'ABP_HijackCarParts_C::CarPartSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, HijackChallenge) == 0x0006C0, "Member 'ABP_HijackCarParts_C::HijackChallenge' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, HoloMaterial) == 0x0006C8, "Member 'ABP_HijackCarParts_C::HoloMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, TrophyTransform) == 0x0006D0, "Member 'ABP_HijackCarParts_C::TrophyTransform' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, Trophy_State) == 0x000700, "Member 'ABP_HijackCarParts_C::Trophy_State' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, PlayerController) == 0x000708, "Member 'ABP_HijackCarParts_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, ChallengeZoneMap) == 0x000710, "Member 'ABP_HijackCarParts_C::ChallengeZoneMap' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, Cond_Trophy_State_NewEnumerator1) == 0x000718, "Member 'ABP_HijackCarParts_C::Cond_Trophy_State_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(ABP_HijackCarParts_C, Cond_Trophy_State_NewEnumerator2) == 0x000720, "Member 'ABP_HijackCarParts_C::Cond_Trophy_State_NewEnumerator2' has a wrong offset!");

}

