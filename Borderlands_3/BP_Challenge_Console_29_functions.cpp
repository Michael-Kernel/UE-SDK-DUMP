#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Challenge_Console_29

#include "Basic.hpp"

#include "BP_Challenge_Console_29_classes.hpp"
#include "BP_Challenge_Console_29_parameters.hpp"


namespace SDK
{

// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.ExecuteUbergraph_BP_Challenge_Console_29
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Challenge_Console_29_C::ExecuteUbergraph_BP_Challenge_Console_29(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Challenge_Console_29_C", "ExecuteUbergraph_BP_Challenge_Console_29");

	Params::BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.OnInitChallengeInstance
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengesComponent*             OwningChallenges                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AGbxCharacter*                    AssociatedCharacter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Challenge_Console_29_C::OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Challenge_Console_29_C", "OnInitChallengeInstance");

	Params::BP_Challenge_Console_29_C_OnInitChallengeInstance Parms{};

	Parms.OwningChallenges = OwningChallenges;
	Parms.AssociatedCharacter = AssociatedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.CheckInvSlotRarity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlotData*               InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRare                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Challenge_Console_29_C::CheckInvSlotRarity(class UInventorySlotData* InvSlot, bool* IsRare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Challenge_Console_29_C", "CheckInvSlotRarity");

	Params::BP_Challenge_Console_29_C_CheckInvSlotRarity Parms{};

	Parms.InvSlot = InvSlot;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRare != nullptr)
		*IsRare = Parms.IsRare;
}


// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.CheckAllSlots
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EquippedActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventorySlotData*               SlotData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Challenge_Console_29_C::CheckAllSlots(class AActor* EquippedActor, class UInventorySlotData* SlotData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Challenge_Console_29_C", "CheckAllSlots");

	Params::BP_Challenge_Console_29_C_CheckAllSlots Parms{};

	Parms.EquippedActor = EquippedActor;
	Parms.SlotData = SlotData;

	UObject::ProcessEvent(Func, &Parms);
}

}

