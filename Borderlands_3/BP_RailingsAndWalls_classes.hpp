#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RailingsAndWalls

#include "Basic.hpp"

#include "GbxGameSystemCore_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_BP_RailingEndType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RailingsAndWalls.BP_RailingsAndWalls_C
// 0x00C0 (0x0518 - 0x0458)
class ABP_RailingsAndWalls_C : public ADecorator
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0460(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x046C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StartMesh;                                         // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            MainMesh;                                          // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            PostMesh;                                          // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            EndMesh;                                           // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material;                                          // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberOfPosts;                                     // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BP_RailingEndType                        StartType;                                         // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BP_RailingEndType                        EndType;                                           // 0x04A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_Start_Mesh;                                  // 0x04A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A7[0x1];                                      // 0x04A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Space_Between_Posts;                               // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Post_Start_Offset;                                 // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Post_End_Offset;                                   // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_Posts;                                       // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Spawn_End_Mesh;                                    // 0x04B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          StartISM;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          EndISM;                                            // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          PostISM;                                           // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          MainISM;                                           // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               StartRotation;                                     // 0x04D8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               EndRotation;                                       // 0x04E4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CurrentMeshNumber;                                 // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WallWidth;                                         // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainMeshWidth;                                     // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartMeshWidth;                                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndMeshWidth;                                      // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flip_left_mesh;                                    // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flip_right_mesh;                                   // 0x0505(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_506[0x2];                                      // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LastMeshMI;                                        // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          LastMeshISM;                                       // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SpawnMainMeshes();
	void SpawnPostsAlongRail();
	void InitializeMainMeshWidth();
	void SetUpPostInstance();
	void SetUpMainInstance();
	void LockYandZLocations();
	void FindNewTransfromFromType(Enum_BP_RailingEndType Type, bool IsEnd, struct FRotator* NewRotation);
	void SetUpEndInstance();
	void SetUpStartInstance();
	void FlipDirectionOfEndMesh();
	void FlipDirectionOfStartMesh();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RailingsAndWalls_C">();
	}
	static class ABP_RailingsAndWalls_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RailingsAndWalls_C>();
	}
};
static_assert(alignof(ABP_RailingsAndWalls_C) == 0x000008, "Wrong alignment on ABP_RailingsAndWalls_C");
static_assert(sizeof(ABP_RailingsAndWalls_C) == 0x000518, "Wrong size on ABP_RailingsAndWalls_C");
static_assert(offsetof(ABP_RailingsAndWalls_C, DefaultSceneRoot) == 0x000458, "Member 'ABP_RailingsAndWalls_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Start) == 0x000460, "Member 'ABP_RailingsAndWalls_C::Start' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, End) == 0x00046C, "Member 'ABP_RailingsAndWalls_C::End' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, StartMesh) == 0x000478, "Member 'ABP_RailingsAndWalls_C::StartMesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, MainMesh) == 0x000480, "Member 'ABP_RailingsAndWalls_C::MainMesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, PostMesh) == 0x000488, "Member 'ABP_RailingsAndWalls_C::PostMesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, EndMesh) == 0x000490, "Member 'ABP_RailingsAndWalls_C::EndMesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Material) == 0x000498, "Member 'ABP_RailingsAndWalls_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, NumberOfPosts) == 0x0004A0, "Member 'ABP_RailingsAndWalls_C::NumberOfPosts' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, StartType) == 0x0004A4, "Member 'ABP_RailingsAndWalls_C::StartType' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, EndType) == 0x0004A5, "Member 'ABP_RailingsAndWalls_C::EndType' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Spawn_Start_Mesh) == 0x0004A6, "Member 'ABP_RailingsAndWalls_C::Spawn_Start_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Space_Between_Posts) == 0x0004A8, "Member 'ABP_RailingsAndWalls_C::Space_Between_Posts' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Post_Start_Offset) == 0x0004AC, "Member 'ABP_RailingsAndWalls_C::Post_Start_Offset' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Post_End_Offset) == 0x0004B0, "Member 'ABP_RailingsAndWalls_C::Post_End_Offset' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Spawn_Posts) == 0x0004B4, "Member 'ABP_RailingsAndWalls_C::Spawn_Posts' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Spawn_End_Mesh) == 0x0004B5, "Member 'ABP_RailingsAndWalls_C::Spawn_End_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, StartISM) == 0x0004B8, "Member 'ABP_RailingsAndWalls_C::StartISM' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, EndISM) == 0x0004C0, "Member 'ABP_RailingsAndWalls_C::EndISM' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, PostISM) == 0x0004C8, "Member 'ABP_RailingsAndWalls_C::PostISM' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, MainISM) == 0x0004D0, "Member 'ABP_RailingsAndWalls_C::MainISM' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, StartRotation) == 0x0004D8, "Member 'ABP_RailingsAndWalls_C::StartRotation' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, EndRotation) == 0x0004E4, "Member 'ABP_RailingsAndWalls_C::EndRotation' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, CurrentMeshNumber) == 0x0004F0, "Member 'ABP_RailingsAndWalls_C::CurrentMeshNumber' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, WallWidth) == 0x0004F4, "Member 'ABP_RailingsAndWalls_C::WallWidth' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, MainMeshWidth) == 0x0004F8, "Member 'ABP_RailingsAndWalls_C::MainMeshWidth' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, StartMeshWidth) == 0x0004FC, "Member 'ABP_RailingsAndWalls_C::StartMeshWidth' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, EndMeshWidth) == 0x000500, "Member 'ABP_RailingsAndWalls_C::EndMeshWidth' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Flip_left_mesh) == 0x000504, "Member 'ABP_RailingsAndWalls_C::Flip_left_mesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, Flip_right_mesh) == 0x000505, "Member 'ABP_RailingsAndWalls_C::Flip_right_mesh' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, LastMeshMI) == 0x000508, "Member 'ABP_RailingsAndWalls_C::LastMeshMI' has a wrong offset!");
static_assert(offsetof(ABP_RailingsAndWalls_C, LastMeshISM) == 0x000510, "Member 'ABP_RailingsAndWalls_C::LastMeshISM' has a wrong offset!");

}

