#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CohtmlPlugin

#include "Basic.hpp"


namespace SDK
{

// Enum CohtmlPlugin.ECohtmlKeys
// NumValues: 0x006C
enum class ECohtmlKeys : uint8
{
	LeftMouseButton                          = 0,
	RightMouseButton                         = 1,
	MiddleMouseButton                        = 2,
	ThumbMouseButton                         = 3,
	ThumbMouseButton2                        = 4,
	BackSpace                                = 5,
	Tab                                      = 6,
	Enter                                    = 7,
	Pause                                    = 8,
	CapsLock                                 = 9,
	Escape                                   = 10,
	SpaceBar                                 = 11,
	PageUp                                   = 12,
	PageDown                                 = 13,
	End                                      = 14,
	Home                                     = 15,
	Left                                     = 16,
	Up                                       = 17,
	Right                                    = 18,
	Down                                     = 19,
	Insert                                   = 20,
	Delete                                   = 21,
	Zero                                     = 22,
	One                                      = 23,
	Two                                      = 24,
	Three                                    = 25,
	Four                                     = 26,
	Five                                     = 27,
	Six                                      = 28,
	Seven                                    = 29,
	Eight                                    = 30,
	Nine                                     = 31,
	A                                        = 32,
	B                                        = 33,
	C                                        = 34,
	D                                        = 35,
	E                                        = 36,
	F                                        = 37,
	G                                        = 38,
	H                                        = 39,
	I                                        = 40,
	J                                        = 41,
	K                                        = 42,
	L                                        = 43,
	M                                        = 44,
	N                                        = 45,
	O                                        = 46,
	P                                        = 47,
	Q                                        = 48,
	R                                        = 49,
	S                                        = 50,
	T                                        = 51,
	U                                        = 52,
	V                                        = 53,
	W                                        = 54,
	X                                        = 55,
	Y                                        = 56,
	Z                                        = 57,
	NumPadZero                               = 58,
	NumPadOne                                = 59,
	NumPadTwo                                = 60,
	NumPadThree                              = 61,
	NumPadFour                               = 62,
	NumPadFive                               = 63,
	NumPadSix                                = 64,
	NumPadSeven                              = 65,
	NumPadEight                              = 66,
	NumPadNine                               = 67,
	Multiply                                 = 68,
	Add                                      = 69,
	Subtract                                 = 70,
	Decimal                                  = 71,
	Divide                                   = 72,
	F1                                       = 73,
	F2                                       = 74,
	F3                                       = 75,
	F4                                       = 76,
	F5                                       = 77,
	F6                                       = 78,
	F7                                       = 79,
	F8                                       = 80,
	F9                                       = 81,
	F10                                      = 82,
	F11                                      = 83,
	F12                                      = 84,
	NumLock                                  = 85,
	ScrollLock                               = 86,
	LeftShift                                = 87,
	RightShift                               = 88,
	LeftControl                              = 89,
	RightControl                             = 90,
	LeftAlt                                  = 91,
	RightAlt                                 = 92,
	LeftCommand                              = 93,
	RightCommand                             = 94,
	Semicolon                                = 95,
	Equals                                   = 96,
	Comma                                    = 97,
	Underscore                               = 98,
	Period                                   = 99,
	Slash                                    = 100,
	Tilde                                    = 101,
	LeftBracket                              = 102,
	Backslash                                = 103,
	RightBracket                             = 104,
	Quote                                    = 105,
	Unknown                                  = 106,
	ECohtmlKeys_MAX                          = 107,
};

// Enum CohtmlPlugin.ECohtmlImageFormat
// NumValues: 0x000B
enum class ECohtmlImageFormat : uint8
{
	PNG                                      = 0,
	TGA                                      = 1,
	JPEG                                     = 2,
	PSD                                      = 3,
	SVG                                      = 4,
	DDS                                      = 5,
	BMP                                      = 6,
	ASTC                                     = 7,
	PKM                                      = 8,
	KTX                                      = 9,
	ECohtmlImageFormat_MAX                   = 10,
};

// Enum CohtmlPlugin.ECohtmlMSAA
// NumValues: 0x0004
enum class ECohtmlMSAA : uint8
{
	MSAA_1x                                  = 0,
	MSAA_2x                                  = 1,
	MSAA_4x                                  = 2,
	MSAA_MAX                                 = 3,
};

// Enum CohtmlPlugin.ECohtmlSettingsSeverity
// NumValues: 0x0007
enum class ECohtmlSettingsSeverity : uint8
{
	Trace                                    = 0,
	Debug                                    = 1,
	Info                                     = 2,
	Warning                                  = 3,
	AssertFailure                            = 4,
	Error                                    = 5,
	ECohtmlSettingsSeverity_MAX              = 6,
};

// Enum CohtmlPlugin.ECohtmlInputPropagationBehaviour
// NumValues: 0x0005
enum class ECohtmlInputPropagationBehaviour : uint8
{
	None                                     = 0,
	Keyboard                                 = 1,
	Joystick                                 = 2,
	KeyboardAndJoystick                      = 3,
	ECohtmlInputPropagationBehaviour_MAX     = 4,
};

// Enum CohtmlPlugin.ECohtmlGamepadBehaviourOnFocusLost
// NumValues: 0x0004
enum class ECohtmlGamepadBehaviourOnFocusLost : uint8
{
	CohtmlResetState                         = 0,
	CohtmlUseCurrentState                    = 1,
	CohtmlUseStateBeforeReset                = 2,
	ECohtmlGamepadBehaviourOnFocusLost_MAX   = 3,
};

// Enum CohtmlPlugin.ECohtmlInputWidgetLineTraceMode
// NumValues: 0x0003
enum class ECohtmlInputWidgetLineTraceMode : uint8
{
	CohtmlInputLineTrace_Single              = 0,
	CohtmlInputLineTrace_Multi               = 1,
	CohtmlInputLineTrace_MAX                 = 2,
};

// Enum CohtmlPlugin.ECohtmlInputWidgetRaycastQuality
// NumValues: 0x0004
enum class ECohtmlInputWidgetRaycastQuality : uint8
{
	CohtmlRaycastQuality_Fast                = 0,
	CohtmlRaycastQuality_Balanced            = 1,
	CohtmlRaycastQuality_Accurate            = 2,
	CohtmlRaycastQuality_MAX                 = 3,
};

// ScriptStruct CohtmlPlugin.ProtocolPathDef
// 0x0040 (0x0040 - 0x0000)
struct FProtocolPathDef final
{
public:
	class FString                                 Protocol;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RootPath;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RelativePrefix;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WatcherPrefix;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProtocolPathDef) == 0x000008, "Wrong alignment on FProtocolPathDef");
static_assert(sizeof(FProtocolPathDef) == 0x000040, "Wrong size on FProtocolPathDef");
static_assert(offsetof(FProtocolPathDef, Protocol) == 0x000000, "Member 'FProtocolPathDef::Protocol' has a wrong offset!");
static_assert(offsetof(FProtocolPathDef, RootPath) == 0x000010, "Member 'FProtocolPathDef::RootPath' has a wrong offset!");
static_assert(offsetof(FProtocolPathDef, RelativePrefix) == 0x000020, "Member 'FProtocolPathDef::RelativePrefix' has a wrong offset!");
static_assert(offsetof(FProtocolPathDef, WatcherPrefix) == 0x000030, "Member 'FProtocolPathDef::WatcherPrefix' has a wrong offset!");

// ScriptStruct CohtmlPlugin.TextureAtlasMetaData
// 0x0100 (0x0100 - 0x0000)
struct FTextureAtlasMetaData final
{
public:
	TMap<class FString, class UCohtmlAtlasContainedTextures*> AtlasContainedTextures;                            // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class UCohtmlTextureAtlasDetails*> AtlasDetails;                                      // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x60];                                      // 0x00A0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextureAtlasMetaData) == 0x000008, "Wrong alignment on FTextureAtlasMetaData");
static_assert(sizeof(FTextureAtlasMetaData) == 0x000100, "Wrong size on FTextureAtlasMetaData");
static_assert(offsetof(FTextureAtlasMetaData, AtlasContainedTextures) == 0x000000, "Member 'FTextureAtlasMetaData::AtlasContainedTextures' has a wrong offset!");
static_assert(offsetof(FTextureAtlasMetaData, AtlasDetails) == 0x000050, "Member 'FTextureAtlasMetaData::AtlasDetails' has a wrong offset!");

// ScriptStruct CohtmlPlugin.TextureAtlasMappingInfo
// 0x0020 (0x0020 - 0x0000)
struct FTextureAtlasMappingInfo final
{
public:
	class FString                                 AtlasPath;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginX;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginY;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextureAtlasMappingInfo) == 0x000008, "Wrong alignment on FTextureAtlasMappingInfo");
static_assert(sizeof(FTextureAtlasMappingInfo) == 0x000020, "Wrong size on FTextureAtlasMappingInfo");
static_assert(offsetof(FTextureAtlasMappingInfo, AtlasPath) == 0x000000, "Member 'FTextureAtlasMappingInfo::AtlasPath' has a wrong offset!");
static_assert(offsetof(FTextureAtlasMappingInfo, Width) == 0x000010, "Member 'FTextureAtlasMappingInfo::Width' has a wrong offset!");
static_assert(offsetof(FTextureAtlasMappingInfo, Height) == 0x000014, "Member 'FTextureAtlasMappingInfo::Height' has a wrong offset!");
static_assert(offsetof(FTextureAtlasMappingInfo, OriginX) == 0x000018, "Member 'FTextureAtlasMappingInfo::OriginX' has a wrong offset!");
static_assert(offsetof(FTextureAtlasMappingInfo, OriginY) == 0x00001C, "Member 'FTextureAtlasMappingInfo::OriginY' has a wrong offset!");

// ScriptStruct CohtmlPlugin.SingleFormatFallbacks
// 0x0018 (0x0018 - 0x0000)
struct FSingleFormatFallbacks final
{
public:
	ECohtmlImageFormat                            BaseFormat;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECohtmlImageFormat>                    PossibleFallbacks;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSingleFormatFallbacks) == 0x000008, "Wrong alignment on FSingleFormatFallbacks");
static_assert(sizeof(FSingleFormatFallbacks) == 0x000018, "Wrong size on FSingleFormatFallbacks");
static_assert(offsetof(FSingleFormatFallbacks, BaseFormat) == 0x000000, "Member 'FSingleFormatFallbacks::BaseFormat' has a wrong offset!");
static_assert(offsetof(FSingleFormatFallbacks, PossibleFallbacks) == 0x000008, "Member 'FSingleFormatFallbacks::PossibleFallbacks' has a wrong offset!");

// ScriptStruct CohtmlPlugin.CohtmlSound
// 0x0018 (0x0018 - 0x0000)
struct FCohtmlSound final
{
public:
	class UAudioComponent*                        Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWaveProcedural*                   Stream;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCohtmlSound) == 0x000008, "Wrong alignment on FCohtmlSound");
static_assert(sizeof(FCohtmlSound) == 0x000018, "Wrong size on FCohtmlSound");
static_assert(offsetof(FCohtmlSound, Component) == 0x000000, "Member 'FCohtmlSound::Component' has a wrong offset!");
static_assert(offsetof(FCohtmlSound, Stream) == 0x000008, "Member 'FCohtmlSound::Stream' has a wrong offset!");

// ScriptStruct CohtmlPlugin.CohtmlViewSettings
// 0x0010 (0x0010 - 0x0000)
struct FCohtmlViewSettings final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransparent;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationFrameDefer;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCohtmlViewSettings) == 0x000004, "Wrong alignment on FCohtmlViewSettings");
static_assert(sizeof(FCohtmlViewSettings) == 0x000010, "Wrong size on FCohtmlViewSettings");
static_assert(offsetof(FCohtmlViewSettings, Width) == 0x000000, "Member 'FCohtmlViewSettings::Width' has a wrong offset!");
static_assert(offsetof(FCohtmlViewSettings, Height) == 0x000004, "Member 'FCohtmlViewSettings::Height' has a wrong offset!");
static_assert(offsetof(FCohtmlViewSettings, IsTransparent) == 0x000008, "Member 'FCohtmlViewSettings::IsTransparent' has a wrong offset!");
static_assert(offsetof(FCohtmlViewSettings, AnimationFrameDefer) == 0x00000C, "Member 'FCohtmlViewSettings::AnimationFrameDefer' has a wrong offset!");

}

