#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxPerfAnalytics

#include "Basic.hpp"

#include "GbxPerfAnalytics_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.DefineTelemetryEventRef
// 0x0038 (0x0038 - 0x0000)
struct GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TableDesc;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK2EventRef                            ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef) == 0x000038, "Wrong size on GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef, EventName) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef::EventName' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef, TableDesc) == 0x000010, "Member 'GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef::TableDesc' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef, ReturnValue) == 0x000020, "Member 'GbxTelemetryBlueprintLibrary_DefineTelemetryEventRef::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.EmitTelemetryEvent
// 0x0058 (0x0058 - 0x0000)
struct GbxTelemetryBlueprintLibrary_EmitTelemetryEvent final
{
public:
	struct FK2EventRef                            Event;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 EventContext;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventContextObject;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventInstigatorObject;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0040(0x0010)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunOnClient;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_EmitTelemetryEvent");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent) == 0x000058, "Wrong size on GbxTelemetryBlueprintLibrary_EmitTelemetryEvent");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, Event) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::Event' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, EventContext) == 0x000018, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::EventContext' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, EventContextObject) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::EventContextObject' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, EventInstigatorObject) == 0x000030, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::EventInstigatorObject' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, WorldContextObject) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, Guid) == 0x000040, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::Guid' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, bRunOnClient) == 0x000050, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::bRunOnClient' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryEvent, ReturnValue) == 0x000051, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryEvent::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.EmitTelemetryValues
// 0x0058 (0x0058 - 0x0000)
struct GbxTelemetryBlueprintLibrary_EmitTelemetryValues final
{
public:
	class FString                                 EventContext;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK2TelemetryValues                     Values;                                            // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0040(0x0010)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunOnClient;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_EmitTelemetryValues");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues) == 0x000058, "Wrong size on GbxTelemetryBlueprintLibrary_EmitTelemetryValues");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues, EventContext) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryValues::EventContext' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues, Values) == 0x000010, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryValues::Values' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues, WorldContextObject) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryValues::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues, Guid) == 0x000040, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryValues::Guid' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues, bRunOnClient) == 0x000050, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryValues::bRunOnClient' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_EmitTelemetryValues, ReturnValue) == 0x000051, "Member 'GbxTelemetryBlueprintLibrary_EmitTelemetryValues::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.IsValid
// 0x0020 (0x0020 - 0x0000)
struct GbxTelemetryBlueprintLibrary_IsValid final
{
public:
	struct FK2EventRef                            EventRef;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_IsValid) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_IsValid");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_IsValid) == 0x000020, "Wrong size on GbxTelemetryBlueprintLibrary_IsValid");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_IsValid, EventRef) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_IsValid::EventRef' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_IsValid, ReturnValue) == 0x000018, "Member 'GbxTelemetryBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.MakeTelemetryEventRef
// 0x0028 (0x0028 - 0x0000)
struct GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK2EventRef                            ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef) == 0x000028, "Wrong size on GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef, EventName) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef::EventName' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef, ReturnValue) == 0x000010, "Member 'GbxTelemetryBlueprintLibrary_MakeTelemetryEventRef::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryBool
// 0x0068 (0x0068 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0040(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool) == 0x000068, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool, Opt) == 0x000039, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool, ReturnValue) == 0x000040, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryBool::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryByte
// 0x0068 (0x0068 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0040(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte) == 0x000068, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte, Opt) == 0x000039, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte, ReturnValue) == 0x000040, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryByte::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryFloat
// 0x0068 (0x0068 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0040(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat) == 0x000068, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat, Opt) == 0x00003C, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat, ReturnValue) == 0x000040, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryFloat::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryInt
// 0x0068 (0x0068 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0040(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt) == 0x000068, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt, Opt) == 0x00003C, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt, ReturnValue) == 0x000040, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryInt::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryRotator
// 0x0070 (0x0070 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0038(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0048(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator) == 0x000070, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator, Opt) == 0x000044, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator, ReturnValue) == 0x000048, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryRotator::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryString
// 0x0078 (0x0078 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryString final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryString");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString) == 0x000078, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryString");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryString::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryString::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryString::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString, Opt) == 0x000048, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryString::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryString, ReturnValue) == 0x000050, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryString::ReturnValue' has a wrong offset!");

// Function GbxPerfAnalytics.GbxTelemetryBlueprintLibrary.SetNamedTelemetryVector
// 0x0070 (0x0070 - 0x0000)
struct GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector final
{
public:
	struct FK2TelemetryValues                     StatArray;                                         // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0038(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetTelemetryValue                            Opt;                                               // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK2TelemetryValues                     ReturnValue;                                       // 0x0048(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector) == 0x000008, "Wrong alignment on GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector");
static_assert(sizeof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector) == 0x000070, "Wrong size on GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector, StatArray) == 0x000000, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector::StatArray' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector, Key) == 0x000028, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector::Key' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector, Value) == 0x000038, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector::Value' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector, Opt) == 0x000044, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector::Opt' has a wrong offset!");
static_assert(offsetof(GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector, ReturnValue) == 0x000048, "Member 'GbxTelemetryBlueprintLibrary_SetNamedTelemetryVector::ReturnValue' has a wrong offset!");

}

