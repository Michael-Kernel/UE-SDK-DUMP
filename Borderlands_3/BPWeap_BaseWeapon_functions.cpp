#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_BaseWeapon

#include "Basic.hpp"

#include "BPWeap_BaseWeapon_classes.hpp"
#include "BPWeap_BaseWeapon_parameters.hpp"


namespace SDK
{

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.ExecuteUbergraph_BPWeap_BaseWeapon
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_BaseWeapon_C::ExecuteUbergraph_BPWeap_BaseWeapon(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "ExecuteUbergraph_BPWeap_BaseWeapon");

	Params::BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.Notify_ReloadEnded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCompleted                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWeap_BaseWeapon_C::Notify_ReloadEnded(bool bCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "Notify_ReloadEnded");

	Params::BPWeap_BaseWeapon_C_Notify_ReloadEnded Parms{};

	Parms.bCompleted = bCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.Notify_ReloadStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAutoReload                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWeap_BaseWeapon_C::Notify_ReloadStarted(bool bAutoReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "Notify_ReloadStarted");

	Params::BPWeap_BaseWeapon_C_Notify_ReloadStarted Parms{};

	Parms.bAutoReload = bAutoReload;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.WeaponAttached
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_BaseWeapon_C::WeaponAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "WeaponAttached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.ReInitialize
// (BlueprintCallable, BlueprintEvent)

void ABPWeap_BaseWeapon_C::ReInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "ReInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABPWeap_BaseWeapon_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABPWeap_BaseWeapon_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.BoneRotator_Incremental
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BoneRotationSpeed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TotalRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentRotation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CurrentRotator                                         (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABPWeap_BaseWeapon_C::BoneRotator_Incremental(float Current, float Target, float DeltaTime, float BoneRotationSpeed, float TotalRotation, float* CurrentRotation, float* NewRotation, struct FRotator* CurrentRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "BoneRotator_Incremental");

	Params::BPWeap_BaseWeapon_C_BoneRotator_Incremental Parms{};

	Parms.Current = Current;
	Parms.Target = Target;
	Parms.DeltaTime = DeltaTime;
	Parms.BoneRotationSpeed = BoneRotationSpeed;
	Parms.TotalRotation = TotalRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentRotation != nullptr)
		*CurrentRotation = Parms.CurrentRotation;

	if (NewRotation != nullptr)
		*NewRotation = Parms.NewRotation;

	if (CurrentRotator != nullptr)
		*CurrentRotator = std::move(Parms.CurrentRotator);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.Get IK Offset Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DebugSockets                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    First_Person                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             WeaponSocket_Left                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             WeaponSocket_Right                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       L_IK_Offset                                            (Parm, OutParm, IsPlainOldData, NoDestructor)
// struct FTransform                       R_IK_Offset                                            (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABPWeap_BaseWeapon_C::Get_IK_Offset_Data(bool DebugSockets, bool First_Person, class FName WeaponSocket_Left, class FName WeaponSocket_Right, struct FTransform* L_IK_Offset, struct FTransform* R_IK_Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "Get IK Offset Data");

	Params::BPWeap_BaseWeapon_C_Get_IK_Offset_Data Parms{};

	Parms.DebugSockets = DebugSockets;
	Parms.First_Person = First_Person;
	Parms.WeaponSocket_Left = WeaponSocket_Left;
	Parms.WeaponSocket_Right = WeaponSocket_Right;

	UObject::ProcessEvent(Func, &Parms);

	if (L_IK_Offset != nullptr)
		*L_IK_Offset = std::move(Parms.L_IK_Offset);

	if (R_IK_Offset != nullptr)
		*R_IK_Offset = std::move(Parms.R_IK_Offset);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.JokeReload
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWeap_BaseWeapon_C::JokeReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "JokeReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.GetChargePercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ChargePercent                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_BaseWeapon_C::GetChargePercent(float* ChargePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "GetChargePercent");

	Params::BPWeap_BaseWeapon_C_GetChargePercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChargePercent != nullptr)
		*ChargePercent = Parms.ChargePercent;
}


// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.BPAnim_Data
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FiregripType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   GripType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScopeType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ModeType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWeap_BaseWeapon_C::BPAnim_Data(float* FiregripType, float* GripType, float* ScopeType, float* ModeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeap_BaseWeapon_C", "BPAnim_Data");

	Params::BPWeap_BaseWeapon_C_BPAnim_Data Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FiregripType != nullptr)
		*FiregripType = Parms.FiregripType;

	if (GripType != nullptr)
		*GripType = Parms.GripType;

	if (ScopeType != nullptr)
		*ScopeType = Parms.ScopeType;

	if (ModeType != nullptr)
		*ModeType = Parms.ModeType;
}

}

