#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxVehicle

#include "Basic.hpp"

#include "GbxVehicle_classes.hpp"
#include "GbxVehicle_parameters.hpp"


namespace SDK
{

// Function GbxVehicle.TurretMovementComponent.ServerSetRotationInputs
// (Net, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector2D                        InRotationInputs                                       (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTurretMovementComponent::ServerSetRotationInputs(const struct FVector2D& InRotationInputs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurretMovementComponent", "ServerSetRotationInputs");

	Params::TurretMovementComponent_ServerSetRotationInputs Parms{};

	Parms.InRotationInputs = std::move(InRotationInputs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.TurretMovementComponent.SetRotationInputs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   XValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTurretMovementComponent::SetRotationInputs(float XValue, float YValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurretMovementComponent", "SetRotationInputs");

	Params::TurretMovementComponent_SetRotationInputs Parms{};

	Parms.XValue = XValue;
	Parms.YValue = YValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.TurretMovementComponent.UpdateParentInitialOffset
// (Final, Native, Public, BlueprintCallable)

void UTurretMovementComponent::UpdateParentInitialOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurretMovementComponent", "UpdateParentInitialOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.TurretMovementComponent.UpdateTurretControlDependency
// (Final, Native, Public, BlueprintCallable)

void UTurretMovementComponent::UpdateTurretControlDependency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurretMovementComponent", "UpdateTurretControlDependency");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleBoostComponent.K2_BoostStarted
// (Event, Protected, BlueprintEvent)

void UVehicleBoostComponent::K2_BoostStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "K2_BoostStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxVehicle.VehicleBoostComponent.K2_BoostStopped
// (Event, Protected, BlueprintEvent)

void UVehicleBoostComponent::K2_BoostStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "K2_BoostStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxVehicle.VehicleBoostComponent.OnRep_IsBoosting
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasBoosting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleBoostComponent::OnRep_IsBoosting(bool bWasBoosting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "OnRep_IsBoosting");

	Params::VehicleBoostComponent_OnRep_IsBoosting Parms{};

	Parms.bWasBoosting = bWasBoosting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleBoostComponent.PauseBoost
// (Final, Native, Public, BlueprintCallable)

void UVehicleBoostComponent::PauseBoost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "PauseBoost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleBoostComponent.RegisterBoostRegenerateEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   BoostTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       BoostValueReachedDelegate                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVehicleBoostComponent::RegisterBoostRegenerateEvent(float BoostTarget, const TDelegate<void()>& BoostValueReachedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "RegisterBoostRegenerateEvent");

	Params::VehicleBoostComponent_RegisterBoostRegenerateEvent Parms{};

	Parms.BoostTarget = BoostTarget;
	Parms.BoostValueReachedDelegate = BoostValueReachedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleBoostComponent.ResumeBoost
// (Final, Native, Public, BlueprintCallable)

void UVehicleBoostComponent::ResumeBoost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "ResumeBoost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleBoostComponent.StartBoost
// (Final, Native, Public, BlueprintCallable)

void UVehicleBoostComponent::StartBoost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "StartBoost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleBoostComponent.StopBoost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleBoostComponent::StopBoost(bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "StopBoost");

	Params::VehicleBoostComponent_StopBoost Parms{};

	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxVehicle.VehicleBoostComponent.VehicleBoostEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UVehicleBoostComponent::VehicleBoostEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "VehicleBoostEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxVehicle.VehicleBoostComponent.GetBoostDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVehicleBoostComponent::GetBoostDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "GetBoostDirection");

	Params::VehicleBoostComponent_GetBoostDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleBoostComponent.GetBoostEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleBoostComponent::GetBoostEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "GetBoostEnabled");

	Params::VehicleBoostComponent_GetBoostEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleBoostComponent.GetCurrentBoostChargesCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVehicleBoostComponent::GetCurrentBoostChargesCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "GetCurrentBoostChargesCount");

	Params::VehicleBoostComponent_GetCurrentBoostChargesCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleBoostComponent.GetCurrentBoostPoolValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleBoostComponent::GetCurrentBoostPoolValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "GetCurrentBoostPoolValue");

	Params::VehicleBoostComponent_GetCurrentBoostPoolValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleBoostComponent.GetMaxBoostPoolValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleBoostComponent::GetMaxBoostPoolValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "GetMaxBoostPoolValue");

	Params::VehicleBoostComponent_GetMaxBoostPoolValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleBoostComponent.GetRelativeBoostSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleBoostComponent::GetRelativeBoostSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleBoostComponent", "GetRelativeBoostSpeed");

	Params::VehicleBoostComponent_GetRelativeBoostSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.AddVehiclePart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVehiclePartData*                 CharacterPart                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicle::AddVehiclePart(class UVehiclePartData* CharacterPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "AddVehiclePart");

	Params::Vehicle_AddVehiclePart Parms{};

	Parms.CharacterPart = CharacterPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.Vehicle.OnRep_VehicleParts
// (Final, Native, Protected)

void AVehicle::OnRep_VehicleParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "OnRep_VehicleParts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.Vehicle.RemoveVehiclePart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVehiclePartData*                 CharacterPart                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicle::RemoveVehiclePart(class UVehiclePartData* CharacterPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "RemoveVehiclePart");

	Params::Vehicle_RemoveVehiclePart Parms{};

	Parms.CharacterPart = CharacterPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.Vehicle.GetEquipedParts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UVehiclePartData*>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UVehiclePartData*> AVehicle::GetEquipedParts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "GetEquipedParts");

	Params::Vehicle_GetEquipedParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.GetNumWheelsInAir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AVehicle::GetNumWheelsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "GetNumWheelsInAir");

	Params::Vehicle_GetNumWheelsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.GetTargetableComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetableComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetableComponent* AVehicle::GetTargetableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "GetTargetableComponent");

	Params::Vehicle_GetTargetableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.GetTargetingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTargetingComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTargetingComponent* AVehicle::GetTargetingComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "GetTargetingComponent");

	Params::Vehicle_GetTargetingComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeam*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeam* AVehicle::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "GetTeam");

	Params::Vehicle_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.GetTeamComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTeamComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTeamComponent* AVehicle::GetTeamComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "GetTeamComponent");

	Params::Vehicle_GetTeamComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.IsInAir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVehicle::IsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "IsInAir");

	Params::Vehicle_IsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.IsPowerSliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVehicle::IsPowerSliding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "IsPowerSliding");

	Params::Vehicle_IsPowerSliding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.Vehicle.SetTeam
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UTeam*                            Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicle::SetTeam(class UTeam* Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle", "SetTeam");

	Params::Vehicle_SetTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxVehicle.VehicleDigiThrustComponent.DigiThrustEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UVehicleDigiThrustComponent::DigiThrustEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "DigiThrustEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxVehicle.VehicleDigiThrustComponent.NetMulticast_OnDigiThrustCollision
// (Net, Native, Event, NetMulticast, Public)

void UVehicleDigiThrustComponent::NetMulticast_OnDigiThrustCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "NetMulticast_OnDigiThrustCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleDigiThrustComponent.NetMulticast_OnDigiThrustEnd
// (Net, Native, Event, NetMulticast, Public)

void UVehicleDigiThrustComponent::NetMulticast_OnDigiThrustEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "NetMulticast_OnDigiThrustEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleDigiThrustComponent.NetMulticast_OnDigiThrustEndFinished
// (Net, Native, Event, NetMulticast, Public)

void UVehicleDigiThrustComponent::NetMulticast_OnDigiThrustEndFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "NetMulticast_OnDigiThrustEndFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleDigiThrustComponent.NetMulticast_OnDigiThrustStarted
// (Net, Native, Event, NetMulticast, Public)

void UVehicleDigiThrustComponent::NetMulticast_OnDigiThrustStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "NetMulticast_OnDigiThrustStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleDigiThrustComponent.RequestTeleport
// (Final, Native, Public, BlueprintCallable)

void UVehicleDigiThrustComponent::RequestTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "RequestTeleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleDigiThrustComponent.SetTeleportDirection
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// struct FVector                          WantedDirection                                        (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleDigiThrustComponent::SetTeleportDirection(const struct FVector& WantedDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "SetTeleportDirection");

	Params::VehicleDigiThrustComponent_SetTeleportDirection Parms{};

	Parms.WantedDirection = std::move(WantedDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleDigiThrustComponent.GetCurrentBoostPoolValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleDigiThrustComponent::GetCurrentBoostPoolValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "GetCurrentBoostPoolValue");

	Params::VehicleDigiThrustComponent_GetCurrentBoostPoolValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleDigiThrustComponent.GetMaxBoostPoolValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleDigiThrustComponent::GetMaxBoostPoolValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "GetMaxBoostPoolValue");

	Params::VehicleDigiThrustComponent_GetMaxBoostPoolValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleDigiThrustComponent.IsTeleporting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleDigiThrustComponent::IsTeleporting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleDigiThrustComponent", "IsTeleporting");

	Params::VehicleDigiThrustComponent_IsTeleporting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction GbxVehicle.VehicleHitchAttachPtComponent.HitchAttachAction__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AVehicle*                         FromVehicle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleHitchAttachPtComponent::HitchAttachAction__DelegateSignature(class AVehicle* FromVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHitchAttachPtComponent", "HitchAttachAction__DelegateSignature");

	Params::VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature Parms{};

	Parms.FromVehicle = FromVehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxVehicle.VehicleHitchAttachPtComponent.IsAttached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleHitchAttachPtComponent::IsAttached() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHitchAttachPtComponent", "IsAttached");

	Params::VehicleHitchAttachPtComponent_IsAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleHitchComponent.AttachToHitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVehicleHitchAttachPtComponent*   AttachPtToAttach                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleHitchComponent::AttachToHitch(class UVehicleHitchAttachPtComponent* AttachPtToAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHitchComponent", "AttachToHitch");

	Params::VehicleHitchComponent_AttachToHitch Parms{};

	Parms.AttachPtToAttach = AttachPtToAttach;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleHitchComponent.DetachFromHitch
// (Final, Native, Public, BlueprintCallable)

void UVehicleHitchComponent::DetachFromHitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHitchComponent", "DetachFromHitch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxVehicle.VehicleHitchComponent.HitchAttachAction__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AVehicle*                         FromVehicle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleHitchComponent::HitchAttachAction__DelegateSignature(class AVehicle* FromVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHitchComponent", "HitchAttachAction__DelegateSignature");

	Params::VehicleHitchComponent_HitchAttachAction__DelegateSignature Parms{};

	Parms.FromVehicle = FromVehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxVehicle.VehicleHitchComponent.TeleportTrailerAndAttachToHitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TrailerToAttach                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleHitchComponent::TeleportTrailerAndAttachToHitch(class AActor* TrailerToAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHitchComponent", "TeleportTrailerAndAttachToHitch");

	Params::VehicleHitchComponent_TeleportTrailerAndAttachToHitch Parms{};

	Parms.TrailerToAttach = TrailerToAttach;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleHoverComponent.EnableHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleHoverComponent::EnableHover(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHoverComponent", "EnableHover");

	Params::VehicleHoverComponent_EnableHover Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehicleHoverComponent.ServerUpdateState
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// bool                                    InbIsEnabled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStrafeInput                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InForwardInput                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InTargetRotation                                       (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UVehicleHoverComponent::ServerUpdateState(bool InbIsEnabled, float InStrafeInput, float InForwardInput, const struct FRotator& InTargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHoverComponent", "ServerUpdateState");

	Params::VehicleHoverComponent_ServerUpdateState Parms{};

	Parms.InbIsEnabled = InbIsEnabled;
	Parms.InStrafeInput = InStrafeInput;
	Parms.InForwardInput = InForwardInput;
	Parms.InTargetRotation = std::move(InTargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxVehicle.VehicleHoverComponent.VehicleHoverEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UVehicleHoverComponent::VehicleHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHoverComponent", "VehicleHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxVehicle.VehicleHoverComponent.IsHoverEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleHoverComponent::IsHoverEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleHoverComponent", "IsHoverEnabled");

	Params::VehicleHoverComponent_IsHoverEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehicleMovementInterface.GetDirectionBasedThrottleAndSteer
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        StickInput                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D IVehicleMovementInterface::GetDirectionBasedThrottleAndSteer(const struct FVector2D& StickInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleMovementInterface", "GetDirectionBasedThrottleAndSteer");

	Params::VehicleMovementInterface_GetDirectionBasedThrottleAndSteer Parms{};

	Parms.StickInput = std::move(StickInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehiclePartActor.OnRep_OwningVehicle
// (Final, Native, Private)

void AVehiclePartActor::OnRep_OwningVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePartActor", "OnRep_OwningVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePartActor.OnRep_ParentSocket
// (Final, Native, Private)

void AVehiclePartActor::OnRep_ParentSocket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePartActor", "OnRep_ParentSocket");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePartActor.ReceiveParentVehicleBeginPlay
// (Event, Protected, BlueprintEvent)

void AVehiclePartActor::ReceiveParentVehicleBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePartActor", "ReceiveParentVehicleBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxVehicle.VehiclePartActor.WeldActorToVehicle
// (Final, Native, Private)
// Parameters:
// class AActor*                           SpawnedPart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehiclePartActor::WeldActorToVehicle(class AActor* SpawnedPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePartActor", "WeldActorToVehicle");

	Params::VehiclePartActor_WeldActorToVehicle Parms{};

	Parms.SpawnedPart = SpawnedPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePowerSlideComponent.CancelPowerSlide
// (Final, Native, Public, BlueprintCallable)

void UVehiclePowerSlideComponent::CancelPowerSlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "CancelPowerSlide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePowerSlideComponent.GetPowerSlideEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehiclePowerSlideComponent::GetPowerSlideEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "GetPowerSlideEnabled");

	Params::VehiclePowerSlideComponent_GetPowerSlideEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehiclePowerSlideComponent.IsPowerSlidePaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehiclePowerSlideComponent::IsPowerSlidePaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "IsPowerSlidePaused");

	Params::VehiclePowerSlideComponent_IsPowerSlidePaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehiclePowerSlideComponent.OnRep_IsPowerSliding
// (Final, Native, Private)
// Parameters:
// bool                                    bWasPowerSliding                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehiclePowerSlideComponent::OnRep_IsPowerSliding(bool bWasPowerSliding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "OnRep_IsPowerSliding");

	Params::VehiclePowerSlideComponent_OnRep_IsPowerSliding Parms{};

	Parms.bWasPowerSliding = bWasPowerSliding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePowerSlideComponent.PausePowerSlide
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehiclePowerSlideComponent::PausePowerSlide(class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "PausePowerSlide");

	Params::VehiclePowerSlideComponent_PausePowerSlide Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePowerSlideComponent.ResumePowerSlide
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehiclePowerSlideComponent::ResumePowerSlide(class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "ResumePowerSlide");

	Params::VehiclePowerSlideComponent_ResumePowerSlide Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePowerSlideComponent.SetPowerSlideEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehiclePowerSlideComponent::SetPowerSlideEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "SetPowerSlideEnabled");

	Params::VehiclePowerSlideComponent_SetPowerSlideEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.VehiclePowerSlideComponent.GetCurrentBoostRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehiclePowerSlideComponent::GetCurrentBoostRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "GetCurrentBoostRatio");

	Params::VehiclePowerSlideComponent_GetCurrentBoostRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.VehiclePowerSlideComponent.IsInPowerSlideBoost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehiclePowerSlideComponent::IsInPowerSlideBoost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehiclePowerSlideComponent", "IsInPowerSlideBoost");

	Params::VehiclePowerSlideComponent_IsInPowerSlideBoost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.ApplyAngularVelocityInfluence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxInfluence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::ApplyAngularVelocityInfluence(float DeltaTime, float MaxInfluence, float Pitch, float Roll, float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "ApplyAngularVelocityInfluence");

	Params::WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.MaxInfluence = MaxInfluence;
	Parms.Pitch = Pitch;
	Parms.Roll = Roll;
	Parms.Yaw = Yaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetAerialRotationalDampingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWheeledVehicleMovementComponentNW::GetAerialRotationalDampingEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetAerialRotationalDampingEnabled");

	Params::WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetCameraRelativeThrottleAndSteer
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        StickInput                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WantedDirAngle                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVehicleCameraRelativeDrivingMode       Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      AngleToSteeringCurve                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UWheeledVehicleMovementComponentNW::GetCameraRelativeThrottleAndSteer(const struct FVector2D& StickInput, float* WantedDirAngle, EVehicleCameraRelativeDrivingMode Mode, class UCurveFloat* AngleToSteeringCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetCameraRelativeThrottleAndSteer");

	Params::WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer Parms{};

	Parms.StickInput = std::move(StickInput);
	Parms.Mode = Mode;
	Parms.AngleToSteeringCurve = AngleToSteeringCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WantedDirAngle != nullptr)
		*WantedDirAngle = Parms.WantedDirAngle;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetCoronalBalancingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWheeledVehicleMovementComponentNW::GetCoronalBalancingEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetCoronalBalancingEnabled");

	Params::WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetDirectionBasedThrottleAndSteer
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        StickInput                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UWheeledVehicleMovementComponentNW::GetDirectionBasedThrottleAndSteer(const struct FVector2D& StickInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetDirectionBasedThrottleAndSteer");

	Params::WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer Parms{};

	Parms.StickInput = std::move(StickInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetLateralToLongitudinalVelocityShiftEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWheeledVehicleMovementComponentNW::GetLateralToLongitudinalVelocityShiftEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetLateralToLongitudinalVelocityShiftEnabled");

	Params::WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetOversteerFixupEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWheeledVehicleMovementComponentNW::GetOversteerFixupEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetOversteerFixupEnabled");

	Params::WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetSagittalBalancingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWheeledVehicleMovementComponentNW::GetSagittalBalancingEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetSagittalBalancingEnabled");

	Params::WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.ResetCustomGravityModifer
// (Final, Native, Public, BlueprintCallable)

void UWheeledVehicleMovementComponentNW::ResetCustomGravityModifer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "ResetCustomGravityModifer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetAerialRotationalDampingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetAerialRotationalDampingEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetAerialRotationalDampingEnabled");

	Params::WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetCoronalBalancingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetCoronalBalancingEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetCoronalBalancingEnabled");

	Params::WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetCustomGravityModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewModifier                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetCustomGravityModifier(float NewModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetCustomGravityModifier");

	Params::WheeledVehicleMovementComponentNW_SetCustomGravityModifier Parms{};

	Parms.NewModifier = NewModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetLateralToLongitudinalVelocityShiftEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetLateralToLongitudinalVelocityShiftEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetLateralToLongitudinalVelocityShiftEnabled");

	Params::WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetNoDriveBrakeTorque
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BrakeTorque                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetNoDriveBrakeTorque(float BrakeTorque, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetNoDriveBrakeTorque");

	Params::WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque Parms{};

	Parms.BrakeTorque = BrakeTorque;
	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetNoDriveDriveTorque
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DriveTorque                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetNoDriveDriveTorque(float DriveTorque, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetNoDriveDriveTorque");

	Params::WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque Parms{};

	Parms.DriveTorque = DriveTorque;
	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetNoDriveSteerAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   SteerAngle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetNoDriveSteerAngle(float SteerAngle, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetNoDriveSteerAngle");

	Params::WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle Parms{};

	Parms.SteerAngle = SteerAngle;
	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetOversteerFixupEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetOversteerFixupEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetOversteerFixupEnabled");

	Params::WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetSagittalBalancingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetSagittalBalancingEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetSagittalBalancingEnabled");

	Params::WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetSteerAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   SteerAngle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWheeledVehicleMovementComponentNW::SetSteerAngle(float SteerAngle, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetSteerAngle");

	Params::WheeledVehicleMovementComponentNW_SetSteerAngle Parms{};

	Parms.SteerAngle = SteerAngle;
	Parms.WheelIndex = WheelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetToRestState
// (Final, Native, Public, BlueprintCallable)

void UWheeledVehicleMovementComponentNW::SetToRestState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "SetToRestState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetCustomGravityModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWheeledVehicleMovementComponentNW::GetCustomGravityModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetCustomGravityModifier");

	Params::WheeledVehicleMovementComponentNW_GetCustomGravityModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetNumWheelsInAir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWheeledVehicleMovementComponentNW::GetNumWheelsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "GetNumWheelsInAir");

	Params::WheeledVehicleMovementComponentNW_GetNumWheelsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxVehicle.WheeledVehicleMovementComponentNW.IsInAir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWheeledVehicleMovementComponentNW::IsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WheeledVehicleMovementComponentNW", "IsInAir");

	Params::WheeledVehicleMovementComponentNW_IsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

