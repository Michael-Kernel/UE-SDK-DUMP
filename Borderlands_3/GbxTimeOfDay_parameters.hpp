#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTimeOfDay

#include "Basic.hpp"

#include "GbxTimeOfDay_structs.hpp"


namespace SDK::Params
{

// Function GbxTimeOfDay.TimeOfDayActor.AddEventListener
// 0x0008 (0x0008 - 0x0000)
struct TimeOfDayActor_AddEventListener final
{
public:
	class UObject*                                InListener;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayActor_AddEventListener) == 0x000008, "Wrong alignment on TimeOfDayActor_AddEventListener");
static_assert(sizeof(TimeOfDayActor_AddEventListener) == 0x000008, "Wrong size on TimeOfDayActor_AddEventListener");
static_assert(offsetof(TimeOfDayActor_AddEventListener, InListener) == 0x000000, "Member 'TimeOfDayActor_AddEventListener::InListener' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayActor.GetDirectionalLightComponent
// 0x0008 (0x0008 - 0x0000)
struct TimeOfDayActor_GetDirectionalLightComponent final
{
public:
	class UDirectionalLightComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayActor_GetDirectionalLightComponent) == 0x000008, "Wrong alignment on TimeOfDayActor_GetDirectionalLightComponent");
static_assert(sizeof(TimeOfDayActor_GetDirectionalLightComponent) == 0x000008, "Wrong size on TimeOfDayActor_GetDirectionalLightComponent");
static_assert(offsetof(TimeOfDayActor_GetDirectionalLightComponent, ReturnValue) == 0x000000, "Member 'TimeOfDayActor_GetDirectionalLightComponent::ReturnValue' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayActor.EnumerateLayerNames
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayActor_EnumerateLayerNames final
{
public:
	TArray<class FName>                           OutLayerNames;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayActor_EnumerateLayerNames) == 0x000008, "Wrong alignment on TimeOfDayActor_EnumerateLayerNames");
static_assert(sizeof(TimeOfDayActor_EnumerateLayerNames) == 0x000010, "Wrong size on TimeOfDayActor_EnumerateLayerNames");
static_assert(offsetof(TimeOfDayActor_EnumerateLayerNames, OutLayerNames) == 0x000000, "Member 'TimeOfDayActor_EnumerateLayerNames::OutLayerNames' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.AddTimeOfDayListener
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayBlueprintLibrary_AddTimeOfDayListener final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InListener;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayBlueprintLibrary_AddTimeOfDayListener) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_AddTimeOfDayListener");
static_assert(sizeof(TimeOfDayBlueprintLibrary_AddTimeOfDayListener) == 0x000010, "Wrong size on TimeOfDayBlueprintLibrary_AddTimeOfDayListener");
static_assert(offsetof(TimeOfDayBlueprintLibrary_AddTimeOfDayListener, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_AddTimeOfDayListener::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_AddTimeOfDayListener, InListener) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_AddTimeOfDayListener::InListener' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.GetTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayBlueprintLibrary_GetTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeOfDayBlueprintLibrary_GetTimeOfDay) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_GetTimeOfDay");
static_assert(sizeof(TimeOfDayBlueprintLibrary_GetTimeOfDay) == 0x000010, "Wrong size on TimeOfDayBlueprintLibrary_GetTimeOfDay");
static_assert(offsetof(TimeOfDayBlueprintLibrary_GetTimeOfDay, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_GetTimeOfDay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_GetTimeOfDay, ReturnValue) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_GetTimeOfDay::ReturnValue' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.GetTimeOfDayState
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayBlueprintLibrary_GetTimeOfDayState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeOfDayState                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeOfDayBlueprintLibrary_GetTimeOfDayState) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_GetTimeOfDayState");
static_assert(sizeof(TimeOfDayBlueprintLibrary_GetTimeOfDayState) == 0x000010, "Wrong size on TimeOfDayBlueprintLibrary_GetTimeOfDayState");
static_assert(offsetof(TimeOfDayBlueprintLibrary_GetTimeOfDayState, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_GetTimeOfDayState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_GetTimeOfDayState, ReturnValue) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_GetTimeOfDayState::ReturnValue' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.PauseTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct TimeOfDayBlueprintLibrary_PauseTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayBlueprintLibrary_PauseTimeOfDay) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_PauseTimeOfDay");
static_assert(sizeof(TimeOfDayBlueprintLibrary_PauseTimeOfDay) == 0x000008, "Wrong size on TimeOfDayBlueprintLibrary_PauseTimeOfDay");
static_assert(offsetof(TimeOfDayBlueprintLibrary_PauseTimeOfDay, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_PauseTimeOfDay::WorldContextObject' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.SetTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayBlueprintLibrary_SetTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTimeOfDay;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeOfDayBlueprintLibrary_SetTimeOfDay) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_SetTimeOfDay");
static_assert(sizeof(TimeOfDayBlueprintLibrary_SetTimeOfDay) == 0x000010, "Wrong size on TimeOfDayBlueprintLibrary_SetTimeOfDay");
static_assert(offsetof(TimeOfDayBlueprintLibrary_SetTimeOfDay, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_SetTimeOfDay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_SetTimeOfDay, NewTimeOfDay) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_SetTimeOfDay::NewTimeOfDay' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.StartTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct TimeOfDayBlueprintLibrary_StartTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayBlueprintLibrary_StartTimeOfDay) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_StartTimeOfDay");
static_assert(sizeof(TimeOfDayBlueprintLibrary_StartTimeOfDay) == 0x000008, "Wrong size on TimeOfDayBlueprintLibrary_StartTimeOfDay");
static_assert(offsetof(TimeOfDayBlueprintLibrary_StartTimeOfDay, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_StartTimeOfDay::WorldContextObject' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.TransitionDownOneLayer
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayBlueprintLibrary_TransitionDownOneLayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeOfDayBlueprintLibrary_TransitionDownOneLayer) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_TransitionDownOneLayer");
static_assert(sizeof(TimeOfDayBlueprintLibrary_TransitionDownOneLayer) == 0x000010, "Wrong size on TimeOfDayBlueprintLibrary_TransitionDownOneLayer");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionDownOneLayer, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_TransitionDownOneLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionDownOneLayer, TransitionDuration) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_TransitionDownOneLayer::TransitionDuration' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.TransitionToLayer
// 0x0020 (0x0020 - 0x0000)
struct TimeOfDayBlueprintLibrary_TransitionToLayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToLayer;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeOfDayBlueprintLibrary_TransitionToLayer) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_TransitionToLayer");
static_assert(sizeof(TimeOfDayBlueprintLibrary_TransitionToLayer) == 0x000020, "Wrong size on TimeOfDayBlueprintLibrary_TransitionToLayer");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionToLayer, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_TransitionToLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionToLayer, ToLayer) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_TransitionToLayer::ToLayer' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionToLayer, TransitionDuration) == 0x000018, "Member 'TimeOfDayBlueprintLibrary_TransitionToLayer::TransitionDuration' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayBlueprintLibrary.TransitionUpOneLayer
// 0x0010 (0x0010 - 0x0000)
struct TimeOfDayBlueprintLibrary_TransitionUpOneLayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeOfDayBlueprintLibrary_TransitionUpOneLayer) == 0x000008, "Wrong alignment on TimeOfDayBlueprintLibrary_TransitionUpOneLayer");
static_assert(sizeof(TimeOfDayBlueprintLibrary_TransitionUpOneLayer) == 0x000010, "Wrong size on TimeOfDayBlueprintLibrary_TransitionUpOneLayer");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionUpOneLayer, WorldContextObject) == 0x000000, "Member 'TimeOfDayBlueprintLibrary_TransitionUpOneLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TimeOfDayBlueprintLibrary_TransitionUpOneLayer, TransitionDuration) == 0x000008, "Member 'TimeOfDayBlueprintLibrary_TransitionUpOneLayer::TransitionDuration' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayComponent.SetCinematicTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct TimeOfDayComponent_SetCinematicTimeOfDay final
{
public:
	float                                         InCinematicTimeOfDay;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayComponent_SetCinematicTimeOfDay) == 0x000004, "Wrong alignment on TimeOfDayComponent_SetCinematicTimeOfDay");
static_assert(sizeof(TimeOfDayComponent_SetCinematicTimeOfDay) == 0x000004, "Wrong size on TimeOfDayComponent_SetCinematicTimeOfDay");
static_assert(offsetof(TimeOfDayComponent_SetCinematicTimeOfDay, InCinematicTimeOfDay) == 0x000000, "Member 'TimeOfDayComponent_SetCinematicTimeOfDay::InCinematicTimeOfDay' has a wrong offset!");

// Function GbxTimeOfDay.TimeOfDayComponent.SetUseCinematicTimeOfDay
// 0x0001 (0x0001 - 0x0000)
struct TimeOfDayComponent_SetUseCinematicTimeOfDay final
{
public:
	bool                                          InUseCinematicTimeOfDay;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOfDayComponent_SetUseCinematicTimeOfDay) == 0x000001, "Wrong alignment on TimeOfDayComponent_SetUseCinematicTimeOfDay");
static_assert(sizeof(TimeOfDayComponent_SetUseCinematicTimeOfDay) == 0x000001, "Wrong size on TimeOfDayComponent_SetUseCinematicTimeOfDay");
static_assert(offsetof(TimeOfDayComponent_SetUseCinematicTimeOfDay, InUseCinematicTimeOfDay) == 0x000000, "Member 'TimeOfDayComponent_SetUseCinematicTimeOfDay::InUseCinematicTimeOfDay' has a wrong offset!");

}

