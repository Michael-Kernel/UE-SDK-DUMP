#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIMeleeSpawningComponent

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AIMeleeSpawningComponent.AIMeleeSpawningComponent_C
// 0x0018 (0x03C8 - 0x03B0)
class UAIMeleeSpawningComponent_C final : public UAIHeldActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B0(0x0008)(Transient, DuplicateTransient)
	class AActor*                                 MyMeleeWeapon;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  MyPawn;                                            // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AIMeleeSpawningComponent(int32 EntryPoint);
	void OnHeldActorNativeDrop(class AActor* Actor);
	void AIMelee_SetNewMeleeWeaponClass(class UClass* NewMeleeWeaponClass);
	void AIMelee_ThrowAtLocation(const struct FVector& LocationToThrowAt, float ThrowSpeed, float ThrowAnglePercentage, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist);
	void AIMelee_ThrowAtActor(class AActor* ActorToThrowAt, float ThrowSpeed, float ThrowAnglePercentage, class FName ActorSocket, const struct FVector& ActorOffset, const struct FRotator& ThrowAngleOffset, float MaxPrediction, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist);
	void AIMelee_Spawn();
	void AIMelee_ThrowAtTarget(float ThrowSpeed, float ThrowAnglePercent, class FName TargetSocket, const struct FVector& TargetOffset, const struct FRotator& ThrowAngleOffset, float MaxPrediction, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist);
	void AIMelee_Drop(bool RequestNewMeleeWeapon);
	void AIMelee_GetElementalTypeFromMeleeWeapon(EOakElementalType* MeleeWeaponElement);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AIMeleeSpawningComponent_C">();
	}
	static class UAIMeleeSpawningComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIMeleeSpawningComponent_C>();
	}
};
static_assert(alignof(UAIMeleeSpawningComponent_C) == 0x000008, "Wrong alignment on UAIMeleeSpawningComponent_C");
static_assert(sizeof(UAIMeleeSpawningComponent_C) == 0x0003C8, "Wrong size on UAIMeleeSpawningComponent_C");
static_assert(offsetof(UAIMeleeSpawningComponent_C, UberGraphFrame) == 0x0003B0, "Member 'UAIMeleeSpawningComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAIMeleeSpawningComponent_C, MyMeleeWeapon) == 0x0003B8, "Member 'UAIMeleeSpawningComponent_C::MyMeleeWeapon' has a wrong offset!");
static_assert(offsetof(UAIMeleeSpawningComponent_C, MyPawn) == 0x0003C0, "Member 'UAIMeleeSpawningComponent_C::MyPawn' has a wrong offset!");

}

