#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxInput

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum GbxInput.EGbxButtonEvent
// NumValues: 0x0003
enum class EGbxButtonEvent : uint8
{
	Pressed                                  = 0,
	Released                                 = 1,
	EGbxButtonEvent_MAX                      = 2,
};

// Enum GbxInput.EGbxInputEvent_Button_PressHoldRelease_Events
// NumValues: 0x0004
enum class EGbxInputEvent_Button_PressHoldRelease_Events : uint8
{
	Pressed                                  = 0,
	Held                                     = 1,
	Released                                 = 2,
	EGbxInputEvent_Button_PressHoldRelease_MAX = 3,
};

// Enum GbxInput.EGbxInputEvent_Button_PressPulse_Events
// NumValues: 0x0005
enum class EGbxInputEvent_Button_PressPulse_Events : uint8
{
	Pressed                                  = 0,
	InitialPulse                             = 1,
	Pulse                                    = 2,
	Released                                 = 3,
	EGbxInputEvent_Button_PressPulse_MAX     = 4,
};

// Enum GbxInput.EGbxInputEvent_Button_PressRelease_Events
// NumValues: 0x0003
enum class EGbxInputEvent_Button_PressRelease_Events : uint8
{
	Pressed                                  = 0,
	Released                                 = 1,
	EGbxInputEvent_Button_PressRelease_MAX   = 2,
};

// Enum GbxInput.EGbxInputRebindPlatformSupportType
// NumValues: 0x0004
enum class EGbxInputRebindPlatformSupportType : uint8
{
	PC_Only                                  = 0,
	Console_Only                             = 1,
	PC_And_Console                           = 2,
	EGbxInputRebindPlatformSupportType_MAX   = 3,
};

// ScriptStruct GbxInput.BlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector
// 0x0020 (0x0020 - 0x0000)
struct FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector final
{
public:
	class UGbxInputActionData_Continuous_Vector*  Action;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionNameToBind;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BindingID;                                         // 0x0010(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector) == 0x000008, "Wrong alignment on FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector");
static_assert(sizeof(FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector) == 0x000020, "Wrong size on FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector, Action) == 0x000000, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector::Action' has a wrong offset!");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector, FunctionNameToBind) == 0x000008, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector::FunctionNameToBind' has a wrong offset!");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector, BindingID) == 0x000010, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Continuous_Vector::BindingID' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputKey
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGbxInputKey
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyName;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputKey) == 0x000008, "Wrong alignment on FGbxInputKey");
static_assert(sizeof(FGbxInputKey) == 0x000010, "Wrong size on FGbxInputKey");
static_assert(offsetof(FGbxInputKey, KeyName) == 0x000008, "Member 'FGbxInputKey::KeyName' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputButton
// 0x0010 (0x0020 - 0x0010)
struct FGbxInputButton final : public FGbxInputKey
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputButton) == 0x000008, "Wrong alignment on FGbxInputButton");
static_assert(sizeof(FGbxInputButton) == 0x000020, "Wrong size on FGbxInputButton");
static_assert(offsetof(FGbxInputButton, Keys) == 0x000010, "Member 'FGbxInputButton::Keys' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEventExecOutput_FastPath
// 0x0018 (0x0018 - 0x0000)
struct FGbxInputEventExecOutput_FastPath final
{
public:
	bool                                          bUsesFastpath;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxInputActionData*                    DirectActionData;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumeEvent;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputEventExecOutput_FastPath) == 0x000008, "Wrong alignment on FGbxInputEventExecOutput_FastPath");
static_assert(sizeof(FGbxInputEventExecOutput_FastPath) == 0x000018, "Wrong size on FGbxInputEventExecOutput_FastPath");
static_assert(offsetof(FGbxInputEventExecOutput_FastPath, bUsesFastpath) == 0x000000, "Member 'FGbxInputEventExecOutput_FastPath::bUsesFastpath' has a wrong offset!");
static_assert(offsetof(FGbxInputEventExecOutput_FastPath, DirectActionData) == 0x000008, "Member 'FGbxInputEventExecOutput_FastPath::DirectActionData' has a wrong offset!");
static_assert(offsetof(FGbxInputEventExecOutput_FastPath, bConsumeEvent) == 0x000010, "Member 'FGbxInputEventExecOutput_FastPath::bConsumeEvent' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEventExecOutput
// 0x0038 (0x0038 - 0x0000)
struct FGbxInputEventExecOutput final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExecFunctionName;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBound;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxInputEventExecOutput_FastPath      FastPathData;                                      // 0x0018(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	class UFunction*                              ExecFunction;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxInputEventExecOutput) == 0x000008, "Wrong alignment on FGbxInputEventExecOutput");
static_assert(sizeof(FGbxInputEventExecOutput) == 0x000038, "Wrong size on FGbxInputEventExecOutput");
static_assert(offsetof(FGbxInputEventExecOutput, EventName) == 0x000000, "Member 'FGbxInputEventExecOutput::EventName' has a wrong offset!");
static_assert(offsetof(FGbxInputEventExecOutput, ExecFunctionName) == 0x000008, "Member 'FGbxInputEventExecOutput::ExecFunctionName' has a wrong offset!");
static_assert(offsetof(FGbxInputEventExecOutput, bIsBound) == 0x000010, "Member 'FGbxInputEventExecOutput::bIsBound' has a wrong offset!");
static_assert(offsetof(FGbxInputEventExecOutput, FastPathData) == 0x000018, "Member 'FGbxInputEventExecOutput::FastPathData' has a wrong offset!");
static_assert(offsetof(FGbxInputEventExecOutput, ExecFunction) == 0x000030, "Member 'FGbxInputEventExecOutput::ExecFunction' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent
// 0x0048 (0x0048 - 0x0000)
struct FGbxInputEvent
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGbxInputEventExecOutput>       ExecOutputs;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UClass*                                 SelfClass;                                         // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxInputComponent*                     Component;                                         // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGbxInputActionData_Discrete*>   PendingDiscreteActions;                            // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	bool                                          bBlockParentClassEvent;                            // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputEvent) == 0x000008, "Wrong alignment on FGbxInputEvent");
static_assert(sizeof(FGbxInputEvent) == 0x000048, "Wrong size on FGbxInputEvent");
static_assert(offsetof(FGbxInputEvent, ExecOutputs) == 0x000010, "Member 'FGbxInputEvent::ExecOutputs' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent, SelfClass) == 0x000020, "Member 'FGbxInputEvent::SelfClass' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent, Component) == 0x000028, "Member 'FGbxInputEvent::Component' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent, PendingDiscreteActions) == 0x000030, "Member 'FGbxInputEvent::PendingDiscreteActions' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent, bBlockParentClassEvent) == 0x000040, "Member 'FGbxInputEvent::bBlockParentClassEvent' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent_Button_Core
// 0x0030 (0x0078 - 0x0048)
struct FGbxInputEvent_Button_Core : public FGbxInputEvent
{
public:
	struct FGbxInputButton                        BUTTON;                                            // 0x0048(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class UGbxInputKeyRebindData_Button*          RebindData;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputEvent_Button_Core) == 0x000008, "Wrong alignment on FGbxInputEvent_Button_Core");
static_assert(sizeof(FGbxInputEvent_Button_Core) == 0x000078, "Wrong size on FGbxInputEvent_Button_Core");
static_assert(offsetof(FGbxInputEvent_Button_Core, BUTTON) == 0x000048, "Member 'FGbxInputEvent_Button_Core::BUTTON' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent_Button_Core, RebindData) == 0x000068, "Member 'FGbxInputEvent_Button_Core::RebindData' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent_Button_PressRelease
// 0x0000 (0x0078 - 0x0078)
struct FGbxInputEvent_Button_PressRelease final : public FGbxInputEvent_Button_Core
{
};
static_assert(alignof(FGbxInputEvent_Button_PressRelease) == 0x000008, "Wrong alignment on FGbxInputEvent_Button_PressRelease");
static_assert(sizeof(FGbxInputEvent_Button_PressRelease) == 0x000078, "Wrong size on FGbxInputEvent_Button_PressRelease");

// ScriptStruct GbxInput.GbxInputAxisKey
// 0x0028 (0x0028 - 0x0000)
struct FGbxInputAxisKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0018(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputAxisKey) == 0x000008, "Wrong alignment on FGbxInputAxisKey");
static_assert(sizeof(FGbxInputAxisKey) == 0x000028, "Wrong size on FGbxInputAxisKey");
static_assert(offsetof(FGbxInputAxisKey, Key) == 0x000000, "Member 'FGbxInputAxisKey::Key' has a wrong offset!");
static_assert(offsetof(FGbxInputAxisKey, Scale3D) == 0x000018, "Member 'FGbxInputAxisKey::Scale3D' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputAxis
// 0x0010 (0x0020 - 0x0010)
struct FGbxInputAxis final : public FGbxInputKey
{
public:
	TArray<struct FGbxInputAxisKey>               Keys;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputAxis) == 0x000008, "Wrong alignment on FGbxInputAxis");
static_assert(sizeof(FGbxInputAxis) == 0x000020, "Wrong size on FGbxInputAxis");
static_assert(offsetof(FGbxInputAxis, Keys) == 0x000010, "Member 'FGbxInputAxis::Keys' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMappedEventParam
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGbxInputActionMappedEventParam
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputActionMappedEventParam) == 0x000008, "Wrong alignment on FGbxInputActionMappedEventParam");
static_assert(sizeof(FGbxInputActionMappedEventParam) == 0x000008, "Wrong size on FGbxInputActionMappedEventParam");
static_assert(offsetof(FGbxInputActionMappedEventParam, ParamName) == 0x000000, "Member 'FGbxInputActionMappedEventParam::ParamName' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMappedEventParam_String
// 0x0010 (0x0018 - 0x0008)
struct FGbxInputActionMappedEventParam_String final : public FGbxInputActionMappedEventParam
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputActionMappedEventParam_String) == 0x000008, "Wrong alignment on FGbxInputActionMappedEventParam_String");
static_assert(sizeof(FGbxInputActionMappedEventParam_String) == 0x000018, "Wrong size on FGbxInputActionMappedEventParam_String");
static_assert(offsetof(FGbxInputActionMappedEventParam_String, Value) == 0x000008, "Member 'FGbxInputActionMappedEventParam_String::Value' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMappedEventParam_Int
// 0x0008 (0x0010 - 0x0008)
struct FGbxInputActionMappedEventParam_Int final : public FGbxInputActionMappedEventParam
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputActionMappedEventParam_Int) == 0x000008, "Wrong alignment on FGbxInputActionMappedEventParam_Int");
static_assert(sizeof(FGbxInputActionMappedEventParam_Int) == 0x000010, "Wrong size on FGbxInputActionMappedEventParam_Int");
static_assert(offsetof(FGbxInputActionMappedEventParam_Int, Value) == 0x000008, "Member 'FGbxInputActionMappedEventParam_Int::Value' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMappedEventParam_Name
// 0x0008 (0x0010 - 0x0008)
struct FGbxInputActionMappedEventParam_Name final : public FGbxInputActionMappedEventParam
{
public:
	class FName                                   Value;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputActionMappedEventParam_Name) == 0x000008, "Wrong alignment on FGbxInputActionMappedEventParam_Name");
static_assert(sizeof(FGbxInputActionMappedEventParam_Name) == 0x000010, "Wrong size on FGbxInputActionMappedEventParam_Name");
static_assert(offsetof(FGbxInputActionMappedEventParam_Name, Value) == 0x000008, "Member 'FGbxInputActionMappedEventParam_Name::Value' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMappedEventParam_Float
// 0x0008 (0x0010 - 0x0008)
struct FGbxInputActionMappedEventParam_Float final : public FGbxInputActionMappedEventParam
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputActionMappedEventParam_Float) == 0x000008, "Wrong alignment on FGbxInputActionMappedEventParam_Float");
static_assert(sizeof(FGbxInputActionMappedEventParam_Float) == 0x000010, "Wrong size on FGbxInputActionMappedEventParam_Float");
static_assert(offsetof(FGbxInputActionMappedEventParam_Float, Value) == 0x000008, "Member 'FGbxInputActionMappedEventParam_Float::Value' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMappedEventData
// 0x0070 (0x0070 - 0x0000)
struct FGbxInputActionMappedEventData final
{
public:
	TArray<struct FGbxInputButton>                Buttons;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGbxInputAxis>                  Axes;                                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UGbxInputKeyRebindData*>         Bindings;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGbxInputActionMappedEventParam_String> StringParams;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGbxInputActionMappedEventParam_Name> NameParams;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGbxInputActionMappedEventParam_Int> IntParams;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGbxInputActionMappedEventParam_Float> FloatParams;                                       // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputActionMappedEventData) == 0x000008, "Wrong alignment on FGbxInputActionMappedEventData");
static_assert(sizeof(FGbxInputActionMappedEventData) == 0x000070, "Wrong size on FGbxInputActionMappedEventData");
static_assert(offsetof(FGbxInputActionMappedEventData, Buttons) == 0x000000, "Member 'FGbxInputActionMappedEventData::Buttons' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMappedEventData, Axes) == 0x000010, "Member 'FGbxInputActionMappedEventData::Axes' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMappedEventData, Bindings) == 0x000020, "Member 'FGbxInputActionMappedEventData::Bindings' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMappedEventData, StringParams) == 0x000030, "Member 'FGbxInputActionMappedEventData::StringParams' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMappedEventData, NameParams) == 0x000040, "Member 'FGbxInputActionMappedEventData::NameParams' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMappedEventData, IntParams) == 0x000050, "Member 'FGbxInputActionMappedEventData::IntParams' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMappedEventData, FloatParams) == 0x000060, "Member 'FGbxInputActionMappedEventData::FloatParams' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionMap
// 0x0018 (0x0018 - 0x0000)
struct FGbxInputActionMap final
{
public:
	class UGbxInputActionData*                    InputActionData;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGbxInputActionMappedEventData> Events;                                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputActionMap) == 0x000008, "Wrong alignment on FGbxInputActionMap");
static_assert(sizeof(FGbxInputActionMap) == 0x000018, "Wrong size on FGbxInputActionMap");
static_assert(offsetof(FGbxInputActionMap, InputActionData) == 0x000000, "Member 'FGbxInputActionMap::InputActionData' has a wrong offset!");
static_assert(offsetof(FGbxInputActionMap, Events) == 0x000008, "Member 'FGbxInputActionMap::Events' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputActionEventLookupList
// 0x0010 (0x0010 - 0x0000)
struct FGbxInputActionEventLookupList final
{
public:
	TArray<struct FGbxInputActionMap>             InputActionMaps;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputActionEventLookupList) == 0x000008, "Wrong alignment on FGbxInputActionEventLookupList");
static_assert(sizeof(FGbxInputActionEventLookupList) == 0x000010, "Wrong size on FGbxInputActionEventLookupList");
static_assert(offsetof(FGbxInputActionEventLookupList, InputActionMaps) == 0x000000, "Member 'FGbxInputActionEventLookupList::InputActionMaps' has a wrong offset!");

// ScriptStruct GbxInput.BlueprintGbxInputActionReceiverDelegateBinding_Discrete
// 0x0028 (0x0028 - 0x0000)
struct FBlueprintGbxInputActionReceiverDelegateBinding_Discrete final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FunctionNameToBind;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BindingID;                                         // 0x0018(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintGbxInputActionReceiverDelegateBinding_Discrete) == 0x000008, "Wrong alignment on FBlueprintGbxInputActionReceiverDelegateBinding_Discrete");
static_assert(sizeof(FBlueprintGbxInputActionReceiverDelegateBinding_Discrete) == 0x000028, "Wrong size on FBlueprintGbxInputActionReceiverDelegateBinding_Discrete");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Discrete, Action) == 0x000000, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Discrete::Action' has a wrong offset!");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Discrete, InputEvent) == 0x000008, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Discrete::InputEvent' has a wrong offset!");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Discrete, FunctionNameToBind) == 0x000010, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Discrete::FunctionNameToBind' has a wrong offset!");
static_assert(offsetof(FBlueprintGbxInputActionReceiverDelegateBinding_Discrete, BindingID) == 0x000018, "Member 'FBlueprintGbxInputActionReceiverDelegateBinding_Discrete::BindingID' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent_Axis_Core
// 0x0028 (0x0070 - 0x0048)
struct FGbxInputEvent_Axis_Core : public FGbxInputEvent
{
public:
	struct FGbxInputAxis                          AXIS;                                              // 0x0048(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class UGbxInputKeyRebindData_Axis*            RebindData;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputEvent_Axis_Core) == 0x000008, "Wrong alignment on FGbxInputEvent_Axis_Core");
static_assert(sizeof(FGbxInputEvent_Axis_Core) == 0x000070, "Wrong size on FGbxInputEvent_Axis_Core");
static_assert(offsetof(FGbxInputEvent_Axis_Core, AXIS) == 0x000048, "Member 'FGbxInputEvent_Axis_Core::AXIS' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent_Axis_Core, RebindData) == 0x000068, "Member 'FGbxInputEvent_Axis_Core::RebindData' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent_Axis_Basic
// 0x0000 (0x0070 - 0x0070)
struct FGbxInputEvent_Axis_Basic final : public FGbxInputEvent_Axis_Core
{
};
static_assert(alignof(FGbxInputEvent_Axis_Basic) == 0x000008, "Wrong alignment on FGbxInputEvent_Axis_Basic");
static_assert(sizeof(FGbxInputEvent_Axis_Basic) == 0x000070, "Wrong size on FGbxInputEvent_Axis_Basic");

// ScriptStruct GbxInput.GbxInputEventHelper_SigFunc_Axis_Data
// 0x000C (0x000C - 0x0000)
struct FGbxInputEventHelper_SigFunc_Axis_Data final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxInputEventHelper_SigFunc_Axis_Data) == 0x000004, "Wrong alignment on FGbxInputEventHelper_SigFunc_Axis_Data");
static_assert(sizeof(FGbxInputEventHelper_SigFunc_Axis_Data) == 0x00000C, "Wrong size on FGbxInputEventHelper_SigFunc_Axis_Data");
static_assert(offsetof(FGbxInputEventHelper_SigFunc_Axis_Data, Val) == 0x000000, "Member 'FGbxInputEventHelper_SigFunc_Axis_Data::Val' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent_Button_PressHoldRelease
// 0x0008 (0x0080 - 0x0078)
struct FGbxInputEvent_Button_PressHoldRelease final : public FGbxInputEvent_Button_Core
{
public:
	uint8                                         Pad_78[0x4];                                       // 0x0078(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTime;                                          // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGbxInputEvent_Button_PressHoldRelease) == 0x000008, "Wrong alignment on FGbxInputEvent_Button_PressHoldRelease");
static_assert(sizeof(FGbxInputEvent_Button_PressHoldRelease) == 0x000080, "Wrong size on FGbxInputEvent_Button_PressHoldRelease");
static_assert(offsetof(FGbxInputEvent_Button_PressHoldRelease, HoldTime) == 0x00007C, "Member 'FGbxInputEvent_Button_PressHoldRelease::HoldTime' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEvent_Button_PressPulse
// 0x0020 (0x0098 - 0x0078)
struct FGbxInputEvent_Button_PressPulse final : public FGbxInputEvent_Button_Core
{
public:
	float                                         DelayBeforeInitialPulse;                           // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BaseDelayBetweenPulses;                            // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PulseDelayAcceleration;                            // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalDelayBetweenPulses;                           // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputEvent_Button_PressPulse) == 0x000008, "Wrong alignment on FGbxInputEvent_Button_PressPulse");
static_assert(sizeof(FGbxInputEvent_Button_PressPulse) == 0x000098, "Wrong size on FGbxInputEvent_Button_PressPulse");
static_assert(offsetof(FGbxInputEvent_Button_PressPulse, DelayBeforeInitialPulse) == 0x000078, "Member 'FGbxInputEvent_Button_PressPulse::DelayBeforeInitialPulse' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent_Button_PressPulse, BaseDelayBetweenPulses) == 0x00007C, "Member 'FGbxInputEvent_Button_PressPulse::BaseDelayBetweenPulses' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent_Button_PressPulse, PulseDelayAcceleration) == 0x000080, "Member 'FGbxInputEvent_Button_PressPulse::PulseDelayAcceleration' has a wrong offset!");
static_assert(offsetof(FGbxInputEvent_Button_PressPulse, FinalDelayBetweenPulses) == 0x000084, "Member 'FGbxInputEvent_Button_PressPulse::FinalDelayBetweenPulses' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputEventHelper_SigFunc_Button_PressPulse_Data
// 0x0004 (0x0004 - 0x0000)
struct FGbxInputEventHelper_SigFunc_Button_PressPulse_Data final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxInputEventHelper_SigFunc_Button_PressPulse_Data) == 0x000004, "Wrong alignment on FGbxInputEventHelper_SigFunc_Button_PressPulse_Data");
static_assert(sizeof(FGbxInputEventHelper_SigFunc_Button_PressPulse_Data) == 0x000004, "Wrong size on FGbxInputEventHelper_SigFunc_Button_PressPulse_Data");
static_assert(offsetof(FGbxInputEventHelper_SigFunc_Button_PressPulse_Data, NextPulseDelay) == 0x000000, "Member 'FGbxInputEventHelper_SigFunc_Button_PressPulse_Data::NextPulseDelay' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputRebind_Axis
// 0x0030 (0x0030 - 0x0000)
struct FGbxInputRebind_Axis final
{
public:
	class UGbxInputKeyRebindData_Axis*            Binding;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGbxInputAxis                          AXIS;                                              // 0x0008(0x0020)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputRebind_Axis) == 0x000008, "Wrong alignment on FGbxInputRebind_Axis");
static_assert(sizeof(FGbxInputRebind_Axis) == 0x000030, "Wrong size on FGbxInputRebind_Axis");
static_assert(offsetof(FGbxInputRebind_Axis, Binding) == 0x000000, "Member 'FGbxInputRebind_Axis::Binding' has a wrong offset!");
static_assert(offsetof(FGbxInputRebind_Axis, AXIS) == 0x000008, "Member 'FGbxInputRebind_Axis::AXIS' has a wrong offset!");

// ScriptStruct GbxInput.GbxInputRebind_Button
// 0x0030 (0x0030 - 0x0000)
struct FGbxInputRebind_Button final
{
public:
	class UGbxInputKeyRebindData_Button*          Binding;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGbxInputButton                        BUTTON;                                            // 0x0008(0x0020)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxInputRebind_Button) == 0x000008, "Wrong alignment on FGbxInputRebind_Button");
static_assert(sizeof(FGbxInputRebind_Button) == 0x000030, "Wrong size on FGbxInputRebind_Button");
static_assert(offsetof(FGbxInputRebind_Button, Binding) == 0x000000, "Member 'FGbxInputRebind_Button::Binding' has a wrong offset!");
static_assert(offsetof(FGbxInputRebind_Button, BUTTON) == 0x000008, "Member 'FGbxInputRebind_Button::BUTTON' has a wrong offset!");

}

