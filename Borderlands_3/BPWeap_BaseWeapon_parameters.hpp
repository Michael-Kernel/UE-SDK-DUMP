#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_BaseWeapon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.ExecuteUbergraph_BPWeap_BaseWeapon
// 0x0080 (0x0080 - 0x0000)
struct BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bCompleted)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakInventoryBalanceStateComponent*     CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UManufacturerData*                      CallFunc_GetManufacturer_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	class UWeaponReloadComponent*                 CallFunc_GetUseModeComponentByClass_ReturnValue;   // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAutoReload;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bAutoReload)>             K2Node_CreateDelegate_OutputDelegate2;             // 0x0068(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_bCompleted;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon) == 0x000008, "Wrong alignment on BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon");
static_assert(sizeof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon) == 0x000080, "Wrong size on BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, EntryPoint) == 0x000000, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_DynamicCast_AsOak_Character) == 0x000028, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, CallFunc_GetManufacturer_ReturnValue) == 0x000038, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::CallFunc_GetManufacturer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, CallFunc_IsValid_ReturnValue1) == 0x000040, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_CreateDelegate_OutputDelegate1) == 0x000048, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, CallFunc_GetUseModeComponentByClass_ReturnValue) == 0x000058, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::CallFunc_GetUseModeComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_CustomEvent_bAutoReload) == 0x000060, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_CustomEvent_bAutoReload' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_CreateDelegate_OutputDelegate2) == 0x000068, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon, K2Node_CustomEvent_bCompleted) == 0x000078, "Member 'BPWeap_BaseWeapon_C_ExecuteUbergraph_BPWeap_BaseWeapon::K2Node_CustomEvent_bCompleted' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.Notify_ReloadEnded
// 0x0001 (0x0001 - 0x0000)
struct BPWeap_BaseWeapon_C_Notify_ReloadEnded final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_BaseWeapon_C_Notify_ReloadEnded) == 0x000001, "Wrong alignment on BPWeap_BaseWeapon_C_Notify_ReloadEnded");
static_assert(sizeof(BPWeap_BaseWeapon_C_Notify_ReloadEnded) == 0x000001, "Wrong size on BPWeap_BaseWeapon_C_Notify_ReloadEnded");
static_assert(offsetof(BPWeap_BaseWeapon_C_Notify_ReloadEnded, bCompleted) == 0x000000, "Member 'BPWeap_BaseWeapon_C_Notify_ReloadEnded::bCompleted' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.Notify_ReloadStarted
// 0x0001 (0x0001 - 0x0000)
struct BPWeap_BaseWeapon_C_Notify_ReloadStarted final
{
public:
	bool                                          bAutoReload;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_BaseWeapon_C_Notify_ReloadStarted) == 0x000001, "Wrong alignment on BPWeap_BaseWeapon_C_Notify_ReloadStarted");
static_assert(sizeof(BPWeap_BaseWeapon_C_Notify_ReloadStarted) == 0x000001, "Wrong size on BPWeap_BaseWeapon_C_Notify_ReloadStarted");
static_assert(offsetof(BPWeap_BaseWeapon_C_Notify_ReloadStarted, bAutoReload) == 0x000000, "Member 'BPWeap_BaseWeapon_C_Notify_ReloadStarted::bAutoReload' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.BoneRotator_Incremental
// 0x004C (0x004C - 0x0000)
struct BPWeap_BaseWeapon_C_BoneRotator_Incremental final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoneRotationSpeed;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalRotation;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRotation;                                   // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewRotation;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotator;                                    // 0x001C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FRotator                               Local_BoneIncrementRotation;                       // 0x0028(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Local_CurrentRotation;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_BaseWeapon_C_BoneRotator_Incremental) == 0x000004, "Wrong alignment on BPWeap_BaseWeapon_C_BoneRotator_Incremental");
static_assert(sizeof(BPWeap_BaseWeapon_C_BoneRotator_Incremental) == 0x00004C, "Wrong size on BPWeap_BaseWeapon_C_BoneRotator_Incremental");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, Current) == 0x000000, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::Current' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, Target) == 0x000004, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::Target' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, DeltaTime) == 0x000008, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, BoneRotationSpeed) == 0x00000C, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::BoneRotationSpeed' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, TotalRotation) == 0x000010, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::TotalRotation' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, CurrentRotation) == 0x000014, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::CurrentRotation' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, NewRotation) == 0x000018, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::NewRotation' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, CurrentRotator) == 0x00001C, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::CurrentRotator' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, Local_BoneIncrementRotation) == 0x000028, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::Local_BoneIncrementRotation' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, Local_CurrentRotation) == 0x000034, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::Local_CurrentRotation' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000038, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BoneRotator_Incremental, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'BPWeap_BaseWeapon_C_BoneRotator_Incremental::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.Get IK Offset Data
// 0x02F0 (0x02F0 - 0x0000)
struct BPWeap_BaseWeapon_C_Get_IK_Offset_Data final
{
public:
	bool                                          DebugSockets;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          First_Person;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponSocket_Left;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponSocket_Right;                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             L_IK_Offset;                                       // 0x0020(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             R_IK_Offset;                                       // 0x0050(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	class UMeshComponent*                         CallFunc_GetAttachmentMesh_ReturnValue;            // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00CC(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue1;          // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location1;                 // 0x0120(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation1;                 // 0x012C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale1;                    // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue2;          // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location2;                 // 0x0180(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation2;                 // 0x018C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale2;                    // 0x0198(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0xC];                                      // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue3;          // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue4;          // 0x01E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location3;                 // 0x0210(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation3;                 // 0x021C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale3;                    // 0x0228(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location4;                 // 0x0234(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation4;                 // 0x0240(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale4;                    // 0x024C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0258(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue1;      // 0x0264(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0290(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue1;               // 0x02C0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data) == 0x000010, "Wrong alignment on BPWeap_BaseWeapon_C_Get_IK_Offset_Data");
static_assert(sizeof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data) == 0x0002F0, "Wrong size on BPWeap_BaseWeapon_C_Get_IK_Offset_Data");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, DebugSockets) == 0x000000, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::DebugSockets' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, First_Person) == 0x000001, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::First_Person' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, WeaponSocket_Left) == 0x000008, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::WeaponSocket_Left' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, WeaponSocket_Right) == 0x000010, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::WeaponSocket_Right' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, L_IK_Offset) == 0x000020, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::L_IK_Offset' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, R_IK_Offset) == 0x000050, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::R_IK_Offset' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_GetAttachmentMesh_ReturnValue) == 0x000080, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_GetAttachmentMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_GetSocketTransform_ReturnValue) == 0x000090, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Rotation) == 0x0000CC, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_GetSocketTransform_ReturnValue1) == 0x0000F0, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_GetSocketTransform_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Location1) == 0x000120, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Location1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Rotation1) == 0x00012C, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Rotation1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Scale1) == 0x000138, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Scale1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_GetSocketTransform_ReturnValue2) == 0x000150, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_GetSocketTransform_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Location2) == 0x000180, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Location2' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Rotation2) == 0x00018C, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Rotation2' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Scale2) == 0x000198, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Scale2' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_GetSocketTransform_ReturnValue3) == 0x0001B0, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_GetSocketTransform_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_GetSocketTransform_ReturnValue4) == 0x0001E0, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_GetSocketTransform_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Location3) == 0x000210, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Location3' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Rotation3) == 0x00021C, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Rotation3' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Scale3) == 0x000228, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Scale3' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Location4) == 0x000234, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Location4' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Rotation4) == 0x000240, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Rotation4' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_BreakTransform_Scale4) == 0x00024C, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_BreakTransform_Scale4' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000258, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_NormalizedDeltaRotator_ReturnValue1) == 0x000264, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_NormalizedDeltaRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000270, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x00027C, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_MakeTransform_ReturnValue) == 0x000290, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_Get_IK_Offset_Data, CallFunc_MakeTransform_ReturnValue1) == 0x0002C0, "Member 'BPWeap_BaseWeapon_C_Get_IK_Offset_Data::CallFunc_MakeTransform_ReturnValue1' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.JokeReload
// 0x0008 (0x0008 - 0x0000)
struct BPWeap_BaseWeapon_C_JokeReload final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_BaseWeapon_C_JokeReload) == 0x000004, "Wrong alignment on BPWeap_BaseWeapon_C_JokeReload");
static_assert(sizeof(BPWeap_BaseWeapon_C_JokeReload) == 0x000008, "Wrong size on BPWeap_BaseWeapon_C_JokeReload");
static_assert(offsetof(BPWeap_BaseWeapon_C_JokeReload, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'BPWeap_BaseWeapon_C_JokeReload::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_JokeReload, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BPWeap_BaseWeapon_C_JokeReload::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct BPWeap_BaseWeapon_C_GetChargePercent final
{
public:
	float                                         ChargePercent;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_BaseWeapon_C_GetChargePercent) == 0x000004, "Wrong alignment on BPWeap_BaseWeapon_C_GetChargePercent");
static_assert(sizeof(BPWeap_BaseWeapon_C_GetChargePercent) == 0x000004, "Wrong size on BPWeap_BaseWeapon_C_GetChargePercent");
static_assert(offsetof(BPWeap_BaseWeapon_C_GetChargePercent, ChargePercent) == 0x000000, "Member 'BPWeap_BaseWeapon_C_GetChargePercent::ChargePercent' has a wrong offset!");

// Function BPWeap_BaseWeapon.BPWeap_BaseWeapon_C.BPAnim_Data
// 0x0010 (0x0010 - 0x0000)
struct BPWeap_BaseWeapon_C_BPAnim_Data final
{
public:
	float                                         FiregripType;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GripType;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeType;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ModeType;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_BaseWeapon_C_BPAnim_Data) == 0x000004, "Wrong alignment on BPWeap_BaseWeapon_C_BPAnim_Data");
static_assert(sizeof(BPWeap_BaseWeapon_C_BPAnim_Data) == 0x000010, "Wrong size on BPWeap_BaseWeapon_C_BPAnim_Data");
static_assert(offsetof(BPWeap_BaseWeapon_C_BPAnim_Data, FiregripType) == 0x000000, "Member 'BPWeap_BaseWeapon_C_BPAnim_Data::FiregripType' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BPAnim_Data, GripType) == 0x000004, "Member 'BPWeap_BaseWeapon_C_BPAnim_Data::GripType' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BPAnim_Data, ScopeType) == 0x000008, "Member 'BPWeap_BaseWeapon_C_BPAnim_Data::ScopeType' has a wrong offset!");
static_assert(offsetof(BPWeap_BaseWeapon_C_BPAnim_Data, ModeType) == 0x00000C, "Member 'BPWeap_BaseWeapon_C_BPAnim_Data::ModeType' has a wrong offset!");

}

