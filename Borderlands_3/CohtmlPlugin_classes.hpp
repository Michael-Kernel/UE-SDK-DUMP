#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CohtmlPlugin

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CohtmlPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class CohtmlPlugin.CohtmlBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCohtmlBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddArray(class UCohtmlJSEvent* JSEvent, const TArray<int32>& Arg, int32 ArrayType);
	static void AddArrayOfStructs(class UCohtmlJSEvent* JSEvent, const TArray<int32>& Arg);
	static void AddBool(class UCohtmlJSEvent* JSEvent, bool Arg);
	static void AddByte(class UCohtmlJSEvent* JSEvent, uint8 Arg);
	static void AddFloat(class UCohtmlJSEvent* JSEvent, float Arg);
	static void AddInt32(class UCohtmlJSEvent* JSEvent, int32 Arg);
	static void AddObject(class UCohtmlJSEvent* JSEvent, class UObject* Arg);
	static void AddString(class UCohtmlJSEvent* JSEvent, const class FString& Arg);
	static void AddStructArg(class UCohtmlJSEvent* JSEvent, const class UStructProperty* Arg);
	static class UCohtmlJSEvent* CreateJSEvent(class UObject* WorldContextObject);
	static void TriggerJSEvent(class UCohtmlBaseComponent* Component, const class FString& EventName, class UCohtmlJSEvent* JSEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlBlueprintFunctionLibrary">();
	}
	static class UCohtmlBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UCohtmlBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UCohtmlBlueprintFunctionLibrary");
static_assert(sizeof(UCohtmlBlueprintFunctionLibrary) == 0x000028, "Wrong size on UCohtmlBlueprintFunctionLibrary");

// Class CohtmlPlugin.CohtmlAssetReferencer
// 0x0000 (0x0028 - 0x0028)
class UCohtmlAssetReferencer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlAssetReferencer">();
	}
	static class UCohtmlAssetReferencer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlAssetReferencer>();
	}
};
static_assert(alignof(UCohtmlAssetReferencer) == 0x000008, "Wrong alignment on UCohtmlAssetReferencer");
static_assert(sizeof(UCohtmlAssetReferencer) == 0x000028, "Wrong size on UCohtmlAssetReferencer");

// Class CohtmlPlugin.CohtmlBaseComponent
// 0x00C0 (0x0238 - 0x0178)
class UCohtmlBaseComponent : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   ReadyForBindings;                                  // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   BindingsReleased;                                  // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ScriptingReady;                                    // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableComplexCSSSupport;                          // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Texture;                                           // 0x01B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInput;                                     // 0x01B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayedUpdate;                                    // 0x01BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB[0x1D];                                     // 0x01BB(0x001D)(Fixing Size After Last Property [ Dumper-7 ])
	class UCohtmlAudioWrapper*                    AudioWrapper;                                      // 0x01D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x58];                                     // 0x01E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginDebugFrameSave();
	void CreateDataModelFromObject(const class FString& Name_0, class UObject* Model);
	void CreateDataModelFromStruct(const class FString& Name_0, const class UStructProperty* Arg);
	class UCohtmlJSEvent* CreateJSEvent();
	void DebugSaveNextFrame();
	void EnableDelayedUpdate(bool bEnabled);
	void EnableRendering(bool bEnabled);
	void EndDebugFrameSave();
	void Load(const class FString& Path);
	void Reload();
	void Resize(int32 Width, int32 Height);
	void SetSoundAttenuation(const struct FSoundAttenuationSettings& Settings);
	void ShowPaintRects(bool Show);

	bool HasRequestedView() const;
	bool IsReadyForBindings() const;
	bool IsReadyToCreateView() const;
	void SynchronizeModels() const;
	void TriggerJSEvent(const class FString& Name_0, class UCohtmlJSEvent* EventData) const;
	void UpdateWholeDataModelFromObject(class UObject* Model) const;
	void UpdateWholeDataModelFromStruct(const class UStructProperty* Struct) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlBaseComponent">();
	}
	static class UCohtmlBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlBaseComponent>();
	}
};
static_assert(alignof(UCohtmlBaseComponent) == 0x000008, "Wrong alignment on UCohtmlBaseComponent");
static_assert(sizeof(UCohtmlBaseComponent) == 0x000238, "Wrong size on UCohtmlBaseComponent");
static_assert(offsetof(UCohtmlBaseComponent, ReadyForBindings) == 0x000178, "Member 'UCohtmlBaseComponent::ReadyForBindings' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, BindingsReleased) == 0x000188, "Member 'UCohtmlBaseComponent::BindingsReleased' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, ScriptingReady) == 0x000198, "Member 'UCohtmlBaseComponent::ScriptingReady' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bEnableComplexCSSSupport) == 0x0001A8, "Member 'UCohtmlBaseComponent::bEnableComplexCSSSupport' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, Texture) == 0x0001B0, "Member 'UCohtmlBaseComponent::Texture' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, Filter) == 0x0001B8, "Member 'UCohtmlBaseComponent::Filter' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bReceiveInput) == 0x0001B9, "Member 'UCohtmlBaseComponent::bReceiveInput' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, bDelayedUpdate) == 0x0001BA, "Member 'UCohtmlBaseComponent::bDelayedUpdate' has a wrong offset!");
static_assert(offsetof(UCohtmlBaseComponent, AudioWrapper) == 0x0001D8, "Member 'UCohtmlBaseComponent::AudioWrapper' has a wrong offset!");

// Class CohtmlPlugin.CohtmlComponent
// 0x0038 (0x0270 - 0x0238)
class UCohtmlComponent : public UCohtmlBaseComponent
{
public:
	class FString                                 URL;                                               // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualTexture;                                     // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrimitiveName;                                     // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260[0x10];                                     // 0x0260(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlComponent">();
	}
	static class UCohtmlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlComponent>();
	}
};
static_assert(alignof(UCohtmlComponent) == 0x000008, "Wrong alignment on UCohtmlComponent");
static_assert(sizeof(UCohtmlComponent) == 0x000270, "Wrong size on UCohtmlComponent");
static_assert(offsetof(UCohtmlComponent, URL) == 0x000238, "Member 'UCohtmlComponent::URL' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, Width) == 0x000248, "Member 'UCohtmlComponent::Width' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, Height) == 0x00024C, "Member 'UCohtmlComponent::Height' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, ManualTexture) == 0x000250, "Member 'UCohtmlComponent::ManualTexture' has a wrong offset!");
static_assert(offsetof(UCohtmlComponent, PrimitiveName) == 0x000258, "Member 'UCohtmlComponent::PrimitiveName' has a wrong offset!");

// Class CohtmlPlugin.CohtmlAtlasContainedTextures
// 0x0050 (0x0078 - 0x0028)
class UCohtmlAtlasContainedTextures final : public UObject
{
public:
	TSet<class UTexture2D*>                       Textures;                                          // 0x0028(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlAtlasContainedTextures">();
	}
	static class UCohtmlAtlasContainedTextures* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlAtlasContainedTextures>();
	}
};
static_assert(alignof(UCohtmlAtlasContainedTextures) == 0x000008, "Wrong alignment on UCohtmlAtlasContainedTextures");
static_assert(sizeof(UCohtmlAtlasContainedTextures) == 0x000078, "Wrong size on UCohtmlAtlasContainedTextures");
static_assert(offsetof(UCohtmlAtlasContainedTextures, Textures) == 0x000028, "Member 'UCohtmlAtlasContainedTextures::Textures' has a wrong offset!");

// Class CohtmlPlugin.CohtmlEventHelpers
// 0x0000 (0x0028 - 0x0028)
class UCohtmlEventHelpers final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlEventHelpers">();
	}
	static class UCohtmlEventHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlEventHelpers>();
	}
};
static_assert(alignof(UCohtmlEventHelpers) == 0x000008, "Wrong alignment on UCohtmlEventHelpers");
static_assert(sizeof(UCohtmlEventHelpers) == 0x000028, "Wrong size on UCohtmlEventHelpers");

// Class CohtmlPlugin.CohtmlTextureAtlasDetails
// 0x0038 (0x0060 - 0x0028)
class UCohtmlTextureAtlasDetails final : public UObject
{
public:
	class FString                                 AtlasPath;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PixelFormat;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAtlasWidth;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAtlasHeight;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTextureWidth;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTextureHeight;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlTextureAtlasDetails">();
	}
	static class UCohtmlTextureAtlasDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlTextureAtlasDetails>();
	}
};
static_assert(alignof(UCohtmlTextureAtlasDetails) == 0x000008, "Wrong alignment on UCohtmlTextureAtlasDetails");
static_assert(sizeof(UCohtmlTextureAtlasDetails) == 0x000060, "Wrong size on UCohtmlTextureAtlasDetails");
static_assert(offsetof(UCohtmlTextureAtlasDetails, AtlasPath) == 0x000028, "Member 'UCohtmlTextureAtlasDetails::AtlasPath' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, Width) == 0x000038, "Member 'UCohtmlTextureAtlasDetails::Width' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, Height) == 0x00003C, "Member 'UCohtmlTextureAtlasDetails::Height' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, PixelFormat) == 0x000040, "Member 'UCohtmlTextureAtlasDetails::PixelFormat' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxAtlasWidth) == 0x000050, "Member 'UCohtmlTextureAtlasDetails::MaxAtlasWidth' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxAtlasHeight) == 0x000054, "Member 'UCohtmlTextureAtlasDetails::MaxAtlasHeight' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxTextureWidth) == 0x000058, "Member 'UCohtmlTextureAtlasDetails::MaxTextureWidth' has a wrong offset!");
static_assert(offsetof(UCohtmlTextureAtlasDetails, MaxTextureHeight) == 0x00005C, "Member 'UCohtmlTextureAtlasDetails::MaxTextureHeight' has a wrong offset!");

// Class CohtmlPlugin.CohtmlAudioWrapper
// 0x0308 (0x0330 - 0x0028)
class UCohtmlAudioWrapper final : public UObject
{
public:
	class UObject*                                Owner;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int32, struct FCohtmlSound>              Sounds;                                            // 0x0030(0x0050)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x2B0];                                     // 0x0080(0x02B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlAudioWrapper">();
	}
	static class UCohtmlAudioWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlAudioWrapper>();
	}
};
static_assert(alignof(UCohtmlAudioWrapper) == 0x000008, "Wrong alignment on UCohtmlAudioWrapper");
static_assert(sizeof(UCohtmlAudioWrapper) == 0x000330, "Wrong size on UCohtmlAudioWrapper");
static_assert(offsetof(UCohtmlAudioWrapper, Owner) == 0x000028, "Member 'UCohtmlAudioWrapper::Owner' has a wrong offset!");
static_assert(offsetof(UCohtmlAudioWrapper, Sounds) == 0x000030, "Member 'UCohtmlAudioWrapper::Sounds' has a wrong offset!");

// Class CohtmlPlugin.CohtmlGameHUD
// 0x00A8 (0x0620 - 0x0578)
class ACohtmlGameHUD : public AHUD
{
public:
	class UCohtmlHUD*                             CohtmlHUD;                                         // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCohtmlHUD*                             CohtmlHUDInternal;                                 // 0x0580(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x98];                                     // 0x0588(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupView(const class FString& PageUrl, bool bEnableComplexCSSSupport, bool bDelayedUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlGameHUD">();
	}
	static class ACohtmlGameHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACohtmlGameHUD>();
	}
};
static_assert(alignof(ACohtmlGameHUD) == 0x000008, "Wrong alignment on ACohtmlGameHUD");
static_assert(sizeof(ACohtmlGameHUD) == 0x000620, "Wrong size on ACohtmlGameHUD");
static_assert(offsetof(ACohtmlGameHUD, CohtmlHUD) == 0x000578, "Member 'ACohtmlGameHUD::CohtmlHUD' has a wrong offset!");
static_assert(offsetof(ACohtmlGameHUD, CohtmlHUDInternal) == 0x000580, "Member 'ACohtmlGameHUD::CohtmlHUDInternal' has a wrong offset!");

// Class CohtmlPlugin.CohtmlHUD
// 0x0030 (0x0268 - 0x0238)
class UCohtmlHUD : public UCohtmlBaseComponent
{
public:
	struct FSoftObjectPath                        HUDMaterialName;                                   // 0x0238(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              HUDMaterial;                                       // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               HUDMaterialInstance;                               // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlHUD">();
	}
	static class UCohtmlHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlHUD>();
	}
};
static_assert(alignof(UCohtmlHUD) == 0x000008, "Wrong alignment on UCohtmlHUD");
static_assert(sizeof(UCohtmlHUD) == 0x000268, "Wrong size on UCohtmlHUD");
static_assert(offsetof(UCohtmlHUD, HUDMaterialName) == 0x000238, "Member 'UCohtmlHUD::HUDMaterialName' has a wrong offset!");
static_assert(offsetof(UCohtmlHUD, HUDMaterial) == 0x000250, "Member 'UCohtmlHUD::HUDMaterial' has a wrong offset!");
static_assert(offsetof(UCohtmlHUD, HUDMaterialInstance) == 0x000258, "Member 'UCohtmlHUD::HUDMaterialInstance' has a wrong offset!");

// Class CohtmlPlugin.CohtmlInputActor
// 0x0058 (0x04B0 - 0x0458)
class ACohtmlInputActor : public AActor
{
public:
	UMulticastDelegateProperty_                   OnCohtmlInputActorMouseButtonDown;                 // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCohtmlInputActorMouseButtonUp;                   // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCohtmlInputActorKeyDown;                         // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCohtmlInputActorKeyUp;                           // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0x18];                                     // 0x0498(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AlwaysAcceptMouseInput(bool bAccept);
	void Initialize(ECollisionChannel CollisionChannel, ETextureAddress AddressMode, ECohtmlInputWidgetRaycastQuality RaycastQuality, int32 UVChannel);
	void SetCohtmlInputFocus(bool FocusUI);
	void SetCohtmlViewFocus(class UCohtmlBaseComponent* NewFocusedView);
	void SetInputPropagationBehaviour(ECohtmlInputPropagationBehaviour Propagation);
	void SetLineTraceMode(ECohtmlInputWidgetLineTraceMode Mode);
	void ToggleCohtmlInputFocus();

	ECohtmlInputPropagationBehaviour GetInputPropagationBehaviour() const;
	bool IsCohtmlFocused() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlInputActor">();
	}
	static class ACohtmlInputActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACohtmlInputActor>();
	}
};
static_assert(alignof(ACohtmlInputActor) == 0x000008, "Wrong alignment on ACohtmlInputActor");
static_assert(sizeof(ACohtmlInputActor) == 0x0004B0, "Wrong size on ACohtmlInputActor");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorMouseButtonDown) == 0x000458, "Member 'ACohtmlInputActor::OnCohtmlInputActorMouseButtonDown' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorMouseButtonUp) == 0x000468, "Member 'ACohtmlInputActor::OnCohtmlInputActorMouseButtonUp' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorKeyDown) == 0x000478, "Member 'ACohtmlInputActor::OnCohtmlInputActorKeyDown' has a wrong offset!");
static_assert(offsetof(ACohtmlInputActor, OnCohtmlInputActorKeyUp) == 0x000488, "Member 'ACohtmlInputActor::OnCohtmlInputActorKeyUp' has a wrong offset!");

// Class CohtmlPlugin.CohtmlJSEvent
// 0x0090 (0x00B8 - 0x0028)
class UCohtmlJSEvent final : public UObject
{
public:
	uint8                                         Pad_28[0x80];                                      // 0x0028(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStruct*>                        StructTypes;                                       // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	void AddArray(const TArray<int32>& Array);
	void AddBool(bool B);
	void AddByte(uint8 byte);
	void AddFloat(float Fl);
	void AddInt32(int32 Integer);
	void AddName(const class FName& Name_0);
	void AddObject(class UObject* Object);
	void AddString(const class FString& Str);
	void AddStructArg(const class UStructProperty* Arg);
	void AddText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlJSEvent">();
	}
	static class UCohtmlJSEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlJSEvent>();
	}
};
static_assert(alignof(UCohtmlJSEvent) == 0x000008, "Wrong alignment on UCohtmlJSEvent");
static_assert(sizeof(UCohtmlJSEvent) == 0x0000B8, "Wrong size on UCohtmlJSEvent");
static_assert(offsetof(UCohtmlJSEvent, StructTypes) == 0x0000A8, "Member 'UCohtmlJSEvent::StructTypes' has a wrong offset!");

// Class CohtmlPlugin.CohtmlSettings
// 0x0060 (0x0088 - 0x0028)
class UCohtmlSettings final : public UObject
{
public:
	bool                                          EnableLiveReload;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevToolsPort;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLocalization;                                // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableBreakIterator;                               // 0x0031(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HandleInputOnHTMLBody;                             // 0x0032(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InputTransparentCssClasses;                        // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         ScrollDelta;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowWarningsOnScreen;                              // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlSettingsSeverity                       LogSeverity;                                       // 0x004D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectTitleSafeZone;                             // 0x004E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectLetterboxing;                              // 0x004F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickWhileGameIsPaused;                             // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLowerCaseNamesForAutoExposedProperties;        // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlMSAA                                   MSAA;                                              // 0x0052(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSingleFormatFallbacks>         FallbacksForAllFormats;                            // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bUseInputPreprocessor;                             // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProtocolPathDef>               ProtocolPathDefs;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlSettings">();
	}
	static class UCohtmlSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlSettings>();
	}
};
static_assert(alignof(UCohtmlSettings) == 0x000008, "Wrong alignment on UCohtmlSettings");
static_assert(sizeof(UCohtmlSettings) == 0x000088, "Wrong size on UCohtmlSettings");
static_assert(offsetof(UCohtmlSettings, EnableLiveReload) == 0x000028, "Member 'UCohtmlSettings::EnableLiveReload' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, DevToolsPort) == 0x00002C, "Member 'UCohtmlSettings::DevToolsPort' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, EnableLocalization) == 0x000030, "Member 'UCohtmlSettings::EnableLocalization' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, EnableBreakIterator) == 0x000031, "Member 'UCohtmlSettings::EnableBreakIterator' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, HandleInputOnHTMLBody) == 0x000032, "Member 'UCohtmlSettings::HandleInputOnHTMLBody' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, InputTransparentCssClasses) == 0x000038, "Member 'UCohtmlSettings::InputTransparentCssClasses' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ScrollDelta) == 0x000048, "Member 'UCohtmlSettings::ScrollDelta' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ShowWarningsOnScreen) == 0x00004C, "Member 'UCohtmlSettings::ShowWarningsOnScreen' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, LogSeverity) == 0x00004D, "Member 'UCohtmlSettings::LogSeverity' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bRespectTitleSafeZone) == 0x00004E, "Member 'UCohtmlSettings::bRespectTitleSafeZone' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bRespectLetterboxing) == 0x00004F, "Member 'UCohtmlSettings::bRespectLetterboxing' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, TickWhileGameIsPaused) == 0x000050, "Member 'UCohtmlSettings::TickWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bUseLowerCaseNamesForAutoExposedProperties) == 0x000051, "Member 'UCohtmlSettings::bUseLowerCaseNamesForAutoExposedProperties' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, MSAA) == 0x000052, "Member 'UCohtmlSettings::MSAA' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, FallbacksForAllFormats) == 0x000058, "Member 'UCohtmlSettings::FallbacksForAllFormats' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, bUseInputPreprocessor) == 0x000068, "Member 'UCohtmlSettings::bUseInputPreprocessor' has a wrong offset!");
static_assert(offsetof(UCohtmlSettings, ProtocolPathDefs) == 0x000070, "Member 'UCohtmlSettings::ProtocolPathDefs' has a wrong offset!");

// Class CohtmlPlugin.CohtmlSystem
// 0x0040 (0x0498 - 0x0458)
class ACohtmlSystem : public AActor
{
public:
	uint8                                         Pad_458[0x40];                                     // 0x0458(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlSystem">();
	}
	static class ACohtmlSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACohtmlSystem>();
	}
};
static_assert(alignof(ACohtmlSystem) == 0x000008, "Wrong alignment on ACohtmlSystem");
static_assert(sizeof(ACohtmlSystem) == 0x000498, "Wrong size on ACohtmlSystem");

// Class CohtmlPlugin.CohtmlWidget
// 0x00F0 (0x01F0 - 0x0100)
class UCohtmlWidget final : public UWidget
{
public:
	uint8                                         Pad_100[0x18];                                     // 0x0100(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0118(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ReadyForBindings;                                  // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   BindingsReleased;                                  // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ScriptingReady;                                    // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableComplexCSSSupport;                          // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInput;                                     // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECohtmlInputPropagationBehaviour              InputPropagationBehaviour;                         // 0x0153(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGammaCorrectedMaterial;                           // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickPeriodInMinimizedGame;                         // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCohtmlAudioWrapper*                    AudioWrapper;                                      // 0x0160(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x78];                                     // 0x0168(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CreateDataModelFromObject(const class FString& Name_0, class UObject* Model);
	void CreateDataModelFromStruct(const class FString& Name_0, const class UStructProperty* Struct);
	class UCohtmlJSEvent* CreateJSEvent();
	void Load(const class FString& Path);
	void Reload();
	void SetInputPropagationBehaviour(ECohtmlInputPropagationBehaviour Propagation);
	void SetSoundAttenuation(const struct FSoundAttenuationSettings& Settings);
	void ShowPaintRects(bool Show);

	ECohtmlInputPropagationBehaviour GetInputPropagationBehaviour() const;
	class UTextureRenderTarget2D* GetRenderTexture() const;
	bool HasRequestedView() const;
	bool IsReadyForBindings() const;
	bool IsReadyToCreateView() const;
	void SynchronizeModels() const;
	void TriggerJSEvent(const class FString& Name_0, class UCohtmlJSEvent* EventData) const;
	void UpdateWholeDataModelFromObject(class UObject* Model) const;
	void UpdateWholeDataModelFromStruct(const class UStructProperty* Struct) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CohtmlWidget">();
	}
	static class UCohtmlWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCohtmlWidget>();
	}
};
static_assert(alignof(UCohtmlWidget) == 0x000008, "Wrong alignment on UCohtmlWidget");
static_assert(sizeof(UCohtmlWidget) == 0x0001F0, "Wrong size on UCohtmlWidget");
static_assert(offsetof(UCohtmlWidget, Owner) == 0x000118, "Member 'UCohtmlWidget::Owner' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, ReadyForBindings) == 0x000120, "Member 'UCohtmlWidget::ReadyForBindings' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, BindingsReleased) == 0x000130, "Member 'UCohtmlWidget::BindingsReleased' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, ScriptingReady) == 0x000140, "Member 'UCohtmlWidget::ScriptingReady' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bEnableComplexCSSSupport) == 0x000150, "Member 'UCohtmlWidget::bEnableComplexCSSSupport' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, Filter) == 0x000151, "Member 'UCohtmlWidget::Filter' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bReceiveInput) == 0x000152, "Member 'UCohtmlWidget::bReceiveInput' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, InputPropagationBehaviour) == 0x000153, "Member 'UCohtmlWidget::InputPropagationBehaviour' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, bGammaCorrectedMaterial) == 0x000154, "Member 'UCohtmlWidget::bGammaCorrectedMaterial' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, TickPeriodInMinimizedGame) == 0x000158, "Member 'UCohtmlWidget::TickPeriodInMinimizedGame' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, AudioWrapper) == 0x000160, "Member 'UCohtmlWidget::AudioWrapper' has a wrong offset!");
static_assert(offsetof(UCohtmlWidget, URL) == 0x0001E0, "Member 'UCohtmlWidget::URL' has a wrong offset!");

// Class CohtmlPlugin.HummingbirdBaseComponent
// 0x0000 (0x0238 - 0x0238)
class UHummingbirdBaseComponent final : public UCohtmlBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HummingbirdBaseComponent">();
	}
	static class UHummingbirdBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHummingbirdBaseComponent>();
	}
};
static_assert(alignof(UHummingbirdBaseComponent) == 0x000008, "Wrong alignment on UHummingbirdBaseComponent");
static_assert(sizeof(UHummingbirdBaseComponent) == 0x000238, "Wrong size on UHummingbirdBaseComponent");

// Class CohtmlPlugin.HummingbirdComponent
// 0x0000 (0x0270 - 0x0270)
class UHummingbirdComponent final : public UCohtmlComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HummingbirdComponent">();
	}
	static class UHummingbirdComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHummingbirdComponent>();
	}
};
static_assert(alignof(UHummingbirdComponent) == 0x000008, "Wrong alignment on UHummingbirdComponent");
static_assert(sizeof(UHummingbirdComponent) == 0x000270, "Wrong size on UHummingbirdComponent");

// Class CohtmlPlugin.HummingbirdGameHUD
// 0x0000 (0x0620 - 0x0620)
class AHummingbirdGameHUD final : public ACohtmlGameHUD
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HummingbirdGameHUD">();
	}
	static class AHummingbirdGameHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHummingbirdGameHUD>();
	}
};
static_assert(alignof(AHummingbirdGameHUD) == 0x000008, "Wrong alignment on AHummingbirdGameHUD");
static_assert(sizeof(AHummingbirdGameHUD) == 0x000620, "Wrong size on AHummingbirdGameHUD");

// Class CohtmlPlugin.HummingbirdHUD
// 0x0000 (0x0268 - 0x0268)
class UHummingbirdHUD final : public UCohtmlHUD
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HummingbirdHUD">();
	}
	static class UHummingbirdHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHummingbirdHUD>();
	}
};
static_assert(alignof(UHummingbirdHUD) == 0x000008, "Wrong alignment on UHummingbirdHUD");
static_assert(sizeof(UHummingbirdHUD) == 0x000268, "Wrong size on UHummingbirdHUD");

// Class CohtmlPlugin.HummingbirdInputActor
// 0x0000 (0x04B0 - 0x04B0)
class AHummingbirdInputActor final : public ACohtmlInputActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HummingbirdInputActor">();
	}
	static class AHummingbirdInputActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHummingbirdInputActor>();
	}
};
static_assert(alignof(AHummingbirdInputActor) == 0x000008, "Wrong alignment on AHummingbirdInputActor");
static_assert(sizeof(AHummingbirdInputActor) == 0x0004B0, "Wrong size on AHummingbirdInputActor");

// Class CohtmlPlugin.HummingbirdSystem
// 0x0000 (0x0498 - 0x0498)
class AHummingbirdSystem final : public ACohtmlSystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HummingbirdSystem">();
	}
	static class AHummingbirdSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHummingbirdSystem>();
	}
};
static_assert(alignof(AHummingbirdSystem) == 0x000008, "Wrong alignment on AHummingbirdSystem");
static_assert(sizeof(AHummingbirdSystem) == 0x000498, "Wrong size on AHummingbirdSystem");

}

