#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIMeleeSpawningComponent

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.ExecuteUbergraph_AIMeleeSpawningComponent
// 0x00D8 (0x00D8 - 0x0000)
struct AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Actor;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon3;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ThrowSpeed2;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercent;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_TargetSocket;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_TargetOffset;                         // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset1;                    // 0x0034(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction1;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon2;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist2;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_ActorToThrowAt;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage1;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ActorSocket;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ActorOffset;                          // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset;                     // 0x006C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon1;               // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist1;                  // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_LocationToThrowAt;                    // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed;                           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon;                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist;                   // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Event_NewMeleeWeaponClass;                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue;                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue1;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue2;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue3;                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent) == 0x000008, "Wrong alignment on AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent");
static_assert(sizeof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent) == 0x0000D8, "Wrong size on AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, EntryPoint) == 0x000000, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_Actor) == 0x000008, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_Actor' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_RequestNewMeleeWeapon3) == 0x000010, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_RequestNewMeleeWeapon3' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowSpeed2) == 0x000014, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowSpeed2' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowAnglePercent) == 0x000018, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_TargetSocket) == 0x000020, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_TargetSocket' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_TargetOffset) == 0x000028, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_TargetOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowAngleOffset1) == 0x000034, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowAngleOffset1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_MaxPrediction1) == 0x000040, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_MaxPrediction1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_RequestNewMeleeWeapon2) == 0x000044, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_RequestNewMeleeWeapon2' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_SpawnIfDoesntExist2) == 0x000045, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_SpawnIfDoesntExist2' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ActorToThrowAt) == 0x000048, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowSpeed1) == 0x000050, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowSpeed1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowAnglePercentage1) == 0x000054, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowAnglePercentage1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ActorSocket) == 0x000058, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ActorSocket' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ActorOffset) == 0x000060, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ActorOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowAngleOffset) == 0x00006C, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_MaxPrediction) == 0x000078, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_RequestNewMeleeWeapon1) == 0x00007C, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_RequestNewMeleeWeapon1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_SpawnIfDoesntExist1) == 0x00007D, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_SpawnIfDoesntExist1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_LocationToThrowAt) == 0x000080, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowSpeed) == 0x00008C, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_ThrowAnglePercentage) == 0x000090, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_RequestNewMeleeWeapon) == 0x000094, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_SpawnIfDoesntExist) == 0x000095, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_SpawnIfDoesntExist' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, K2Node_Event_NewMeleeWeaponClass) == 0x000098, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::K2Node_Event_NewMeleeWeaponClass' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_GetHeldActor_ReturnValue) == 0x0000A0, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_GetHeldActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_GetHeldActor_ReturnValue1) == 0x0000A8, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_GetHeldActor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_IsValid_ReturnValue1) == 0x0000B1, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_GetHeldActor_ReturnValue2) == 0x0000B8, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_GetHeldActor_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_IsValid_ReturnValue2) == 0x0000C0, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_GetHeldActor_ReturnValue3) == 0x0000C8, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_GetHeldActor_ReturnValue3' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent, CallFunc_IsValid_ReturnValue3) == 0x0000D0, "Member 'AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent::CallFunc_IsValid_ReturnValue3' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.OnHeldActorNativeDrop
// 0x0008 (0x0008 - 0x0000)
struct AIMeleeSpawningComponent_C_OnHeldActorNativeDrop final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMeleeSpawningComponent_C_OnHeldActorNativeDrop) == 0x000008, "Wrong alignment on AIMeleeSpawningComponent_C_OnHeldActorNativeDrop");
static_assert(sizeof(AIMeleeSpawningComponent_C_OnHeldActorNativeDrop) == 0x000008, "Wrong size on AIMeleeSpawningComponent_C_OnHeldActorNativeDrop");
static_assert(offsetof(AIMeleeSpawningComponent_C_OnHeldActorNativeDrop, Actor) == 0x000000, "Member 'AIMeleeSpawningComponent_C_OnHeldActorNativeDrop::Actor' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_SetNewMeleeWeaponClass
// 0x0008 (0x0008 - 0x0000)
struct AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass final
{
public:
	class UClass*                                 NewMeleeWeaponClass;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass) == 0x000008, "Wrong alignment on AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass");
static_assert(sizeof(AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass) == 0x000008, "Wrong size on AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass, NewMeleeWeaponClass) == 0x000000, "Member 'AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass::NewMeleeWeaponClass' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_ThrowAtLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation final
{
public:
	struct FVector                                LocationToThrowAt;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewMeleeWeapon;                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation) == 0x000004, "Wrong alignment on AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation");
static_assert(sizeof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation) == 0x000018, "Wrong size on AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation, LocationToThrowAt) == 0x000000, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation::LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation, ThrowSpeed) == 0x00000C, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation, ThrowAnglePercentage) == 0x000010, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation, RequestNewMeleeWeapon) == 0x000014, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation::RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation, SpawnIfDoesntExist) == 0x000015, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation::SpawnIfDoesntExist' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_ThrowAtActor
// 0x0038 (0x0038 - 0x0000)
struct AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor final
{
public:
	class AActor*                                 ActorToThrowAt;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActorSocket;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewMeleeWeapon;                             // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor) == 0x000008, "Wrong alignment on AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor");
static_assert(sizeof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor) == 0x000038, "Wrong size on AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, ActorToThrowAt) == 0x000000, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, ThrowSpeed) == 0x000008, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, ThrowAnglePercentage) == 0x00000C, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, ActorSocket) == 0x000010, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::ActorSocket' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, ActorOffset) == 0x000018, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::ActorOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, ThrowAngleOffset) == 0x000024, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, MaxPrediction) == 0x000030, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, RequestNewMeleeWeapon) == 0x000034, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor, SpawnIfDoesntExist) == 0x000035, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor::SpawnIfDoesntExist' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_ThrowAtTarget
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget final
{
public:
	float                                         ThrowSpeed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercent;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewMeleeWeapon;                             // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget) == 0x000008, "Wrong alignment on AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget");
static_assert(sizeof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget) == 0x000030, "Wrong size on AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, ThrowSpeed) == 0x000000, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, ThrowAnglePercent) == 0x000004, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, TargetSocket) == 0x000008, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::TargetSocket' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, TargetOffset) == 0x000010, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, ThrowAngleOffset) == 0x00001C, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, MaxPrediction) == 0x000028, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, RequestNewMeleeWeapon) == 0x00002C, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget, SpawnIfDoesntExist) == 0x00002D, "Member 'AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget::SpawnIfDoesntExist' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_Drop
// 0x0001 (0x0001 - 0x0000)
struct AIMeleeSpawningComponent_C_AIMelee_Drop final
{
public:
	bool                                          RequestNewMeleeWeapon;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIMeleeSpawningComponent_C_AIMelee_Drop) == 0x000001, "Wrong alignment on AIMeleeSpawningComponent_C_AIMelee_Drop");
static_assert(sizeof(AIMeleeSpawningComponent_C_AIMelee_Drop) == 0x000001, "Wrong size on AIMeleeSpawningComponent_C_AIMelee_Drop");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_Drop, RequestNewMeleeWeapon) == 0x000000, "Member 'AIMeleeSpawningComponent_C_AIMelee_Drop::RequestNewMeleeWeapon' has a wrong offset!");

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_GetElementalTypeFromMeleeWeapon
// 0x0020 (0x0020 - 0x0000)
struct AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon final
{
public:
	EOakElementalType                             MeleeWeaponElement;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAIHeldActorInterface> K2Node_DynamicCast_AsAIHeld_Actor_Interface;       // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOakElementalType                             CallFunc_AIHeldActor_GetElementalType_ReturnValue; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon) == 0x000008, "Wrong alignment on AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon");
static_assert(sizeof(AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon) == 0x000020, "Wrong size on AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon, MeleeWeaponElement) == 0x000000, "Member 'AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon::MeleeWeaponElement' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon, K2Node_DynamicCast_AsAIHeld_Actor_Interface) == 0x000008, "Member 'AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon::K2Node_DynamicCast_AsAIHeld_Actor_Interface' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon, CallFunc_AIHeldActor_GetElementalType_ReturnValue) == 0x000019, "Member 'AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon::CallFunc_AIHeldActor_GetElementalType_ReturnValue' has a wrong offset!");

}

