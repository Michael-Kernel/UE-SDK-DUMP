#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPCont_Player

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPCont_Player.BPCont_Player_C
// 0x0030 (0x1CB0 - 0x1C80)
class ABPCont_Player_C final : public AOakPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1C80(0x0008)(Transient, DuplicateTransient)
	class UBP_DevPerks_C*                         DeveloperPerks;                                    // 0x1C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxPerceptionComponent*                GbxPerception;                                     // 0x1C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetingComponent*                    Targeting;                                         // 0x1C98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnJokeEulaClosed;                                  // 0x1CA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void UserConstructionScript();
	void OnJokeEULAClosedByPlayer();
	void ExecuteUbergraph_BPCont_Player(int32 EntryPoint);
	void OnJokeEulaClosed__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPCont_Player_C">();
	}
	static class ABPCont_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPCont_Player_C>();
	}
};
static_assert(alignof(ABPCont_Player_C) == 0x000008, "Wrong alignment on ABPCont_Player_C");
static_assert(sizeof(ABPCont_Player_C) == 0x001CB0, "Wrong size on ABPCont_Player_C");
static_assert(offsetof(ABPCont_Player_C, UberGraphFrame) == 0x001C80, "Member 'ABPCont_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPCont_Player_C, DeveloperPerks) == 0x001C88, "Member 'ABPCont_Player_C::DeveloperPerks' has a wrong offset!");
static_assert(offsetof(ABPCont_Player_C, GbxPerception) == 0x001C90, "Member 'ABPCont_Player_C::GbxPerception' has a wrong offset!");
static_assert(offsetof(ABPCont_Player_C, Targeting) == 0x001C98, "Member 'ABPCont_Player_C::Targeting' has a wrong offset!");
static_assert(offsetof(ABPCont_Player_C, OnJokeEulaClosed) == 0x001CA0, "Member 'ABPCont_Player_C::OnJokeEulaClosed' has a wrong offset!");

}

