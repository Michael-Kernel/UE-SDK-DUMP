#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTimeOfDay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "GbxTimeOfDay_structs.hpp"


namespace SDK
{

// Class GbxTimeOfDay.MaterialExpressionTimeOfDay
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionTimeOfDay final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionTimeOfDay">();
	}
	static class UMaterialExpressionTimeOfDay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTimeOfDay>();
	}
};
static_assert(alignof(UMaterialExpressionTimeOfDay) == 0x000008, "Wrong alignment on UMaterialExpressionTimeOfDay");
static_assert(sizeof(UMaterialExpressionTimeOfDay) == 0x000040, "Wrong size on UMaterialExpressionTimeOfDay");

// Class GbxTimeOfDay.TimeOfDayActor
// 0x0078 (0x04D0 - 0x0458)
class ATimeOfDayActor final : public AActor
{
public:
	class UTimeOfDayComponent*                    TimeOfDayComponent;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLightComponent;                         // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtmosphericFogComponent*               AtmosphericFogComponent;                           // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExponentialHeightFogComponent;                     // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcessComponent;                              // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALight*>                         ControlledLightActors;                             // 0x0490(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FControlledLight>               ControlledLights;                                  // 0x04A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartLayer;                                        // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UObject>>         EventListeners;                                    // 0x04C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void AddEventListener(class UObject* InListener);
	class UDirectionalLightComponent* GetDirectionalLightComponent();

	void EnumerateLayerNames(TArray<class FName>* OutLayerNames) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayActor">();
	}
	static class ATimeOfDayActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeOfDayActor>();
	}
};
static_assert(alignof(ATimeOfDayActor) == 0x000008, "Wrong alignment on ATimeOfDayActor");
static_assert(sizeof(ATimeOfDayActor) == 0x0004D0, "Wrong size on ATimeOfDayActor");
static_assert(offsetof(ATimeOfDayActor, TimeOfDayComponent) == 0x000458, "Member 'ATimeOfDayActor::TimeOfDayComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, DirectionalLightComponent) == 0x000460, "Member 'ATimeOfDayActor::DirectionalLightComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, SkyLightComponent) == 0x000468, "Member 'ATimeOfDayActor::SkyLightComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, AtmosphericFogComponent) == 0x000470, "Member 'ATimeOfDayActor::AtmosphericFogComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, ExponentialHeightFogComponent) == 0x000478, "Member 'ATimeOfDayActor::ExponentialHeightFogComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, StaticMeshComponent) == 0x000480, "Member 'ATimeOfDayActor::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, PostProcessComponent) == 0x000488, "Member 'ATimeOfDayActor::PostProcessComponent' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, ControlledLightActors) == 0x000490, "Member 'ATimeOfDayActor::ControlledLightActors' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, ControlledLights) == 0x0004A0, "Member 'ATimeOfDayActor::ControlledLights' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, StartTime) == 0x0004B0, "Member 'ATimeOfDayActor::StartTime' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, StartLayer) == 0x0004B8, "Member 'ATimeOfDayActor::StartLayer' has a wrong offset!");
static_assert(offsetof(ATimeOfDayActor, EventListeners) == 0x0004C0, "Member 'ATimeOfDayActor::EventListeners' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UTimeOfDayBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddTimeOfDayListener(class UObject* WorldContextObject, class UObject* InListener);
	static float GetTimeOfDay(class UObject* WorldContextObject);
	static ETimeOfDayState GetTimeOfDayState(class UObject* WorldContextObject);
	static void PauseTimeOfDay(class UObject* WorldContextObject);
	static void SetTimeOfDay(class UObject* WorldContextObject, float NewTimeOfDay);
	static void StartTimeOfDay(class UObject* WorldContextObject);
	static void TransitionDownOneLayer(class UObject* WorldContextObject, float TransitionDuration);
	static void TransitionToLayer(class UObject* WorldContextObject, const class FString& ToLayer, float TransitionDuration);
	static void TransitionUpOneLayer(class UObject* WorldContextObject, float TransitionDuration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayBlueprintLibrary">();
	}
	static class UTimeOfDayBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayBlueprintLibrary>();
	}
};
static_assert(alignof(UTimeOfDayBlueprintLibrary) == 0x000008, "Wrong alignment on UTimeOfDayBlueprintLibrary");
static_assert(sizeof(UTimeOfDayBlueprintLibrary) == 0x000028, "Wrong size on UTimeOfDayBlueprintLibrary");

// Class GbxTimeOfDay.TimeOfDayComponent
// 0x00E0 (0x03B0 - 0x02D0)
class UTimeOfDayComponent final : public USceneComponent
{
public:
	struct FTimeOfDayCycleInstanceData            TimeOfDayCycleInstanceData;                        // 0x02D0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	class UTimeOfDayCycleInstance*                TimeOfDayCycleInstance;                            // 0x0370(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0378(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        CycleCount;                                        // 0x037C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CurrentLayerName;                                  // 0x0380(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TransitionTimeLeft;                                // 0x0388(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastEvaluatedTime;                                 // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CinematicTimeOfDay;                                // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseCinematicTimeOfDay;                            // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_395[0xB];                                      // 0x0395(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldTick;                                       // 0x03A0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A1[0xF];                                      // 0x03A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCinematicTimeOfDay(float InCinematicTimeOfDay);
	void SetUseCinematicTimeOfDay(bool InUseCinematicTimeOfDay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayComponent">();
	}
	static class UTimeOfDayComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayComponent>();
	}
};
static_assert(alignof(UTimeOfDayComponent) == 0x000008, "Wrong alignment on UTimeOfDayComponent");
static_assert(sizeof(UTimeOfDayComponent) == 0x0003B0, "Wrong size on UTimeOfDayComponent");
static_assert(offsetof(UTimeOfDayComponent, TimeOfDayCycleInstanceData) == 0x0002D0, "Member 'UTimeOfDayComponent::TimeOfDayCycleInstanceData' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, TimeOfDayCycleInstance) == 0x000370, "Member 'UTimeOfDayComponent::TimeOfDayCycleInstance' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, TimeOfDay) == 0x000378, "Member 'UTimeOfDayComponent::TimeOfDay' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, CycleCount) == 0x00037C, "Member 'UTimeOfDayComponent::CycleCount' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, CurrentLayerName) == 0x000380, "Member 'UTimeOfDayComponent::CurrentLayerName' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, TransitionTimeLeft) == 0x000388, "Member 'UTimeOfDayComponent::TransitionTimeLeft' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, LastEvaluatedTime) == 0x00038C, "Member 'UTimeOfDayComponent::LastEvaluatedTime' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, CinematicTimeOfDay) == 0x000390, "Member 'UTimeOfDayComponent::CinematicTimeOfDay' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, bUseCinematicTimeOfDay) == 0x000394, "Member 'UTimeOfDayComponent::bUseCinematicTimeOfDay' has a wrong offset!");
static_assert(offsetof(UTimeOfDayComponent, bShouldTick) == 0x0003A0, "Member 'UTimeOfDayComponent::bShouldTick' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayCycle
// 0x0018 (0x0040 - 0x0028)
class UTimeOfDayCycle final : public UObject
{
public:
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             TimeOfDayAudioParameter;                           // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CycleLength;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayCycle">();
	}
	static class UTimeOfDayCycle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayCycle>();
	}
};
static_assert(alignof(UTimeOfDayCycle) == 0x000008, "Wrong alignment on UTimeOfDayCycle");
static_assert(sizeof(UTimeOfDayCycle) == 0x000040, "Wrong size on UTimeOfDayCycle");
static_assert(offsetof(UTimeOfDayCycle, ParameterCollection) == 0x000028, "Member 'UTimeOfDayCycle::ParameterCollection' has a wrong offset!");
static_assert(offsetof(UTimeOfDayCycle, TimeOfDayAudioParameter) == 0x000030, "Member 'UTimeOfDayCycle::TimeOfDayAudioParameter' has a wrong offset!");
static_assert(offsetof(UTimeOfDayCycle, CycleLength) == 0x000038, "Member 'UTimeOfDayCycle::CycleLength' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayCycleInstance
// 0x0030 (0x0058 - 0x0028)
class UTimeOfDayCycleInstance final : public UObject
{
public:
	class UTimeOfDayCycle*                        ParentCycle;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCycleLength;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideCycleLength;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLayerParameterCurves>          ParameterLayerCurves;                              // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLayerPropertyCurves>           PropertyLayerCurves;                               // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayCycleInstance">();
	}
	static class UTimeOfDayCycleInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayCycleInstance>();
	}
};
static_assert(alignof(UTimeOfDayCycleInstance) == 0x000008, "Wrong alignment on UTimeOfDayCycleInstance");
static_assert(sizeof(UTimeOfDayCycleInstance) == 0x000058, "Wrong size on UTimeOfDayCycleInstance");
static_assert(offsetof(UTimeOfDayCycleInstance, ParentCycle) == 0x000028, "Member 'UTimeOfDayCycleInstance::ParentCycle' has a wrong offset!");
static_assert(offsetof(UTimeOfDayCycleInstance, bOverrideCycleLength) == 0x000030, "Member 'UTimeOfDayCycleInstance::bOverrideCycleLength' has a wrong offset!");
static_assert(offsetof(UTimeOfDayCycleInstance, OverrideCycleLength) == 0x000034, "Member 'UTimeOfDayCycleInstance::OverrideCycleLength' has a wrong offset!");
static_assert(offsetof(UTimeOfDayCycleInstance, ParameterLayerCurves) == 0x000038, "Member 'UTimeOfDayCycleInstance::ParameterLayerCurves' has a wrong offset!");
static_assert(offsetof(UTimeOfDayCycleInstance, PropertyLayerCurves) == 0x000048, "Member 'UTimeOfDayCycleInstance::PropertyLayerCurves' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayKeyBase
// 0x0010 (0x0038 - 0x0028)
class UTimeOfDayKeyBase : public UObject
{
public:
	class UTimeOfDayLayer*                        ParentLayer;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeyTime;                                           // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeOfDayKeyType                             KeyType;                                           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayKeyBase">();
	}
	static class UTimeOfDayKeyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayKeyBase>();
	}
};
static_assert(alignof(UTimeOfDayKeyBase) == 0x000008, "Wrong alignment on UTimeOfDayKeyBase");
static_assert(sizeof(UTimeOfDayKeyBase) == 0x000038, "Wrong size on UTimeOfDayKeyBase");
static_assert(offsetof(UTimeOfDayKeyBase, ParentLayer) == 0x000028, "Member 'UTimeOfDayKeyBase::ParentLayer' has a wrong offset!");
static_assert(offsetof(UTimeOfDayKeyBase, KeyTime) == 0x000030, "Member 'UTimeOfDayKeyBase::KeyTime' has a wrong offset!");
static_assert(offsetof(UTimeOfDayKeyBase, bEnabled) == 0x000034, "Member 'UTimeOfDayKeyBase::bEnabled' has a wrong offset!");
static_assert(offsetof(UTimeOfDayKeyBase, KeyType) == 0x000035, "Member 'UTimeOfDayKeyBase::KeyType' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayEventKey
// 0x0010 (0x0048 - 0x0038)
class UTimeOfDayEventKey final : public UTimeOfDayKeyBase
{
public:
	class FName                                   EventName;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeOfDayState                               State;                                             // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayEventKey">();
	}
	static class UTimeOfDayEventKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayEventKey>();
	}
};
static_assert(alignof(UTimeOfDayEventKey) == 0x000008, "Wrong alignment on UTimeOfDayEventKey");
static_assert(sizeof(UTimeOfDayEventKey) == 0x000048, "Wrong size on UTimeOfDayEventKey");
static_assert(offsetof(UTimeOfDayEventKey, EventName) == 0x000038, "Member 'UTimeOfDayEventKey::EventName' has a wrong offset!");
static_assert(offsetof(UTimeOfDayEventKey, State) == 0x000040, "Member 'UTimeOfDayEventKey::State' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayLayer
// 0x0078 (0x00A0 - 0x0028)
class UTimeOfDayLayer final : public UObject
{
public:
	class UTimeOfDayCycle*                        ParentCycle;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerOverrideName;                                 // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTimeOfDayKeyBase*>              Keys;                                              // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>     OverrideScalarParameters;                          // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FCollectionVectorParameter>     OverrideVectorParameters;                          // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FCollectionScalarParameter>     OverrideScalarProperties;                          // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FCollectionVectorParameter>     OverrideVectorProperties;                          // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FTODCollectionVector4Parameter> OverrideVector4Properties;                         // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayLayer">();
	}
	static class UTimeOfDayLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayLayer>();
	}
};
static_assert(alignof(UTimeOfDayLayer) == 0x000008, "Wrong alignment on UTimeOfDayLayer");
static_assert(sizeof(UTimeOfDayLayer) == 0x0000A0, "Wrong size on UTimeOfDayLayer");
static_assert(offsetof(UTimeOfDayLayer, ParentCycle) == 0x000028, "Member 'UTimeOfDayLayer::ParentCycle' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, LayerOverrideName) == 0x000030, "Member 'UTimeOfDayLayer::LayerOverrideName' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, Keys) == 0x000040, "Member 'UTimeOfDayLayer::Keys' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, OverrideScalarParameters) == 0x000050, "Member 'UTimeOfDayLayer::OverrideScalarParameters' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, OverrideVectorParameters) == 0x000060, "Member 'UTimeOfDayLayer::OverrideVectorParameters' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, OverrideScalarProperties) == 0x000070, "Member 'UTimeOfDayLayer::OverrideScalarProperties' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, OverrideVectorProperties) == 0x000080, "Member 'UTimeOfDayLayer::OverrideVectorProperties' has a wrong offset!");
static_assert(offsetof(UTimeOfDayLayer, OverrideVector4Properties) == 0x000090, "Member 'UTimeOfDayLayer::OverrideVector4Properties' has a wrong offset!");

// Class GbxTimeOfDay.TimeOfDayPropertyKey
// 0x0050 (0x0088 - 0x0038)
class UTimeOfDayPropertyKey final : public UTimeOfDayKeyBase
{
public:
	TArray<struct FCollectionScalarParameter>     OverrideScalarParameters;                          // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FCollectionVectorParameter>     OverrideVectorParameters;                          // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FCollectionScalarParameter>     OverrideScalarProperties;                          // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FCollectionVectorParameter>     OverrideVectorProperties;                          // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FTODCollectionVector4Parameter> OverrideVector4Properties;                         // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeOfDayPropertyKey">();
	}
	static class UTimeOfDayPropertyKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayPropertyKey>();
	}
};
static_assert(alignof(UTimeOfDayPropertyKey) == 0x000008, "Wrong alignment on UTimeOfDayPropertyKey");
static_assert(sizeof(UTimeOfDayPropertyKey) == 0x000088, "Wrong size on UTimeOfDayPropertyKey");
static_assert(offsetof(UTimeOfDayPropertyKey, OverrideScalarParameters) == 0x000038, "Member 'UTimeOfDayPropertyKey::OverrideScalarParameters' has a wrong offset!");
static_assert(offsetof(UTimeOfDayPropertyKey, OverrideVectorParameters) == 0x000048, "Member 'UTimeOfDayPropertyKey::OverrideVectorParameters' has a wrong offset!");
static_assert(offsetof(UTimeOfDayPropertyKey, OverrideScalarProperties) == 0x000058, "Member 'UTimeOfDayPropertyKey::OverrideScalarProperties' has a wrong offset!");
static_assert(offsetof(UTimeOfDayPropertyKey, OverrideVectorProperties) == 0x000068, "Member 'UTimeOfDayPropertyKey::OverrideVectorProperties' has a wrong offset!");
static_assert(offsetof(UTimeOfDayPropertyKey, OverrideVector4Properties) == 0x000078, "Member 'UTimeOfDayPropertyKey::OverrideVector4Properties' has a wrong offset!");

}

