#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommandRing_Mortar

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CommandRing_Mortar.CommandRing_Mortar_C
// 0x0028 (0x04D8 - 0x04B0)
class ACommandRing_Mortar_C final : public ACommandRing
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04B0(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               PS_VLA_Mortar_Command_Ring_Target;                 // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxTrajectometerComponent*             GbxTrajectometer;                                  // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CommandRing_Mortar(int32 EntryPoint);
	void BndEvt__GbxTrajectometer_K2Node_ComponentBoundEvent_0_SimulationResultEvent__DelegateSignature_CommandRing_Mortar(const struct FHitResult& HitResult);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CommandRing_Mortar_C">();
	}
	static class ACommandRing_Mortar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACommandRing_Mortar_C>();
	}
};
static_assert(alignof(ACommandRing_Mortar_C) == 0x000008, "Wrong alignment on ACommandRing_Mortar_C");
static_assert(sizeof(ACommandRing_Mortar_C) == 0x0004D8, "Wrong size on ACommandRing_Mortar_C");
static_assert(offsetof(ACommandRing_Mortar_C, UberGraphFrame) == 0x0004B0, "Member 'ACommandRing_Mortar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACommandRing_Mortar_C, PS_VLA_Mortar_Command_Ring_Target) == 0x0004B8, "Member 'ACommandRing_Mortar_C::PS_VLA_Mortar_Command_Ring_Target' has a wrong offset!");
static_assert(offsetof(ACommandRing_Mortar_C, Decal) == 0x0004C0, "Member 'ACommandRing_Mortar_C::Decal' has a wrong offset!");
static_assert(offsetof(ACommandRing_Mortar_C, GbxTrajectometer) == 0x0004C8, "Member 'ACommandRing_Mortar_C::GbxTrajectometer' has a wrong offset!");
static_assert(offsetof(ACommandRing_Mortar_C, DefaultSceneRoot) == 0x0004D0, "Member 'ACommandRing_Mortar_C::DefaultSceneRoot' has a wrong offset!");

}

