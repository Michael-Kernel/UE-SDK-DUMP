#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxProbes

#include "Basic.hpp"

#include "GbxProbesCore_structs.hpp"
#include "GbxProbes_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GbxProbes.GbxProbesBlueprintLibrary.EmitTestProbeResult
// 0x0038 (0x0038 - 0x0000)
struct GbxProbesBlueprintLibrary_EmitTestProbeResult final
{
public:
	struct FGbxProbeId                            ProbeId;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Test;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxProbeResult                               Result;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtraData;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProbesBlueprintLibrary_EmitTestProbeResult) == 0x000008, "Wrong alignment on GbxProbesBlueprintLibrary_EmitTestProbeResult");
static_assert(sizeof(GbxProbesBlueprintLibrary_EmitTestProbeResult) == 0x000038, "Wrong size on GbxProbesBlueprintLibrary_EmitTestProbeResult");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResult, ProbeId) == 0x000000, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResult::ProbeId' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResult, Test) == 0x000018, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResult::Test' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResult, Result) == 0x000020, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResult::Result' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResult, ExtraData) == 0x000028, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResult::ExtraData' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.EmitTestProbeResultWithData
// 0x0038 (0x0038 - 0x0000)
struct GbxProbesBlueprintLibrary_EmitTestProbeResultWithData final
{
public:
	struct FGbxProbeId                            ProbeId;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Test;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxProbeResult                               Result;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGbxProbeExtraData>             ExtraDataArray;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProbesBlueprintLibrary_EmitTestProbeResultWithData) == 0x000008, "Wrong alignment on GbxProbesBlueprintLibrary_EmitTestProbeResultWithData");
static_assert(sizeof(GbxProbesBlueprintLibrary_EmitTestProbeResultWithData) == 0x000038, "Wrong size on GbxProbesBlueprintLibrary_EmitTestProbeResultWithData");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResultWithData, ProbeId) == 0x000000, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResultWithData::ProbeId' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResultWithData, Test) == 0x000018, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResultWithData::Test' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResultWithData, Result) == 0x000020, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResultWithData::Result' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_EmitTestProbeResultWithData, ExtraDataArray) == 0x000028, "Member 'GbxProbesBlueprintLibrary_EmitTestProbeResultWithData::ExtraDataArray' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.IsClassEnabled
// 0x0010 (0x0010 - 0x0000)
struct GbxProbesBlueprintLibrary_IsClassEnabled final
{
public:
	class FName                                   Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProbesBlueprintLibrary_IsClassEnabled) == 0x000004, "Wrong alignment on GbxProbesBlueprintLibrary_IsClassEnabled");
static_assert(sizeof(GbxProbesBlueprintLibrary_IsClassEnabled) == 0x000010, "Wrong size on GbxProbesBlueprintLibrary_IsClassEnabled");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsClassEnabled, Class_0) == 0x000000, "Member 'GbxProbesBlueprintLibrary_IsClassEnabled::Class_0' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsClassEnabled, IsEnabled) == 0x000008, "Member 'GbxProbesBlueprintLibrary_IsClassEnabled::IsEnabled' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.IsTestEnabled
// 0x0010 (0x0010 - 0x0000)
struct GbxProbesBlueprintLibrary_IsTestEnabled final
{
public:
	class FName                                   Test;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProbesBlueprintLibrary_IsTestEnabled) == 0x000004, "Wrong alignment on GbxProbesBlueprintLibrary_IsTestEnabled");
static_assert(sizeof(GbxProbesBlueprintLibrary_IsTestEnabled) == 0x000010, "Wrong size on GbxProbesBlueprintLibrary_IsTestEnabled");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsTestEnabled, Test) == 0x000000, "Member 'GbxProbesBlueprintLibrary_IsTestEnabled::Test' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsTestEnabled, IsEnabled) == 0x000008, "Member 'GbxProbesBlueprintLibrary_IsTestEnabled::IsEnabled' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.IsTestProbeEnabled
// 0x0028 (0x0028 - 0x0000)
struct GbxProbesBlueprintLibrary_IsTestProbeEnabled final
{
public:
	struct FGbxProbeId                            ProbeId;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Test;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProbesBlueprintLibrary_IsTestProbeEnabled) == 0x000008, "Wrong alignment on GbxProbesBlueprintLibrary_IsTestProbeEnabled");
static_assert(sizeof(GbxProbesBlueprintLibrary_IsTestProbeEnabled) == 0x000028, "Wrong size on GbxProbesBlueprintLibrary_IsTestProbeEnabled");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsTestProbeEnabled, ProbeId) == 0x000000, "Member 'GbxProbesBlueprintLibrary_IsTestProbeEnabled::ProbeId' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsTestProbeEnabled, Test) == 0x000018, "Member 'GbxProbesBlueprintLibrary_IsTestProbeEnabled::Test' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsTestProbeEnabled, IsEnabled) == 0x000020, "Member 'GbxProbesBlueprintLibrary_IsTestProbeEnabled::IsEnabled' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.IsValidId
// 0x0020 (0x0020 - 0x0000)
struct GbxProbesBlueprintLibrary_IsValidId final
{
public:
	struct FGbxProbeId                            ProbeId;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProbesBlueprintLibrary_IsValidId) == 0x000008, "Wrong alignment on GbxProbesBlueprintLibrary_IsValidId");
static_assert(sizeof(GbxProbesBlueprintLibrary_IsValidId) == 0x000020, "Wrong size on GbxProbesBlueprintLibrary_IsValidId");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsValidId, ProbeId) == 0x000000, "Member 'GbxProbesBlueprintLibrary_IsValidId::ProbeId' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_IsValidId, IsValid) == 0x000018, "Member 'GbxProbesBlueprintLibrary_IsValidId::IsValid' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.MakeProbeId
// 0x0048 (0x0048 - 0x0000)
struct GbxProbesBlueprintLibrary_MakeProbeId final
{
public:
	class FString                                 Class_0;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxProbeId                            OutId;                                             // 0x0030(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProbesBlueprintLibrary_MakeProbeId) == 0x000008, "Wrong alignment on GbxProbesBlueprintLibrary_MakeProbeId");
static_assert(sizeof(GbxProbesBlueprintLibrary_MakeProbeId) == 0x000048, "Wrong size on GbxProbesBlueprintLibrary_MakeProbeId");
static_assert(offsetof(GbxProbesBlueprintLibrary_MakeProbeId, Class_0) == 0x000000, "Member 'GbxProbesBlueprintLibrary_MakeProbeId::Class_0' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_MakeProbeId, Type) == 0x000010, "Member 'GbxProbesBlueprintLibrary_MakeProbeId::Type' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_MakeProbeId, SubType) == 0x000020, "Member 'GbxProbesBlueprintLibrary_MakeProbeId::SubType' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_MakeProbeId, OutId) == 0x000030, "Member 'GbxProbesBlueprintLibrary_MakeProbeId::OutId' has a wrong offset!");

// Function GbxProbes.GbxProbesBlueprintLibrary.ResolveGbxProbeId
// 0x0030 (0x0030 - 0x0000)
struct GbxProbesBlueprintLibrary_ResolveGbxProbeId final
{
public:
	const class UObject*                          InObj;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InTag;                                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxProbeId                            OutId;                                             // 0x0010(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProbesBlueprintLibrary_ResolveGbxProbeId) == 0x000008, "Wrong alignment on GbxProbesBlueprintLibrary_ResolveGbxProbeId");
static_assert(sizeof(GbxProbesBlueprintLibrary_ResolveGbxProbeId) == 0x000030, "Wrong size on GbxProbesBlueprintLibrary_ResolveGbxProbeId");
static_assert(offsetof(GbxProbesBlueprintLibrary_ResolveGbxProbeId, InObj) == 0x000000, "Member 'GbxProbesBlueprintLibrary_ResolveGbxProbeId::InObj' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_ResolveGbxProbeId, InTag) == 0x000008, "Member 'GbxProbesBlueprintLibrary_ResolveGbxProbeId::InTag' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_ResolveGbxProbeId, OutId) == 0x000010, "Member 'GbxProbesBlueprintLibrary_ResolveGbxProbeId::OutId' has a wrong offset!");
static_assert(offsetof(GbxProbesBlueprintLibrary_ResolveGbxProbeId, IsValid) == 0x000028, "Member 'GbxProbesBlueprintLibrary_ResolveGbxProbeId::IsValid' has a wrong offset!");

}

