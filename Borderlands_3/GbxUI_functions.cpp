#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxUI

#include "Basic.hpp"

#include "GbxUI_classes.hpp"
#include "GbxUI_parameters.hpp"


namespace SDK
{

// Function GbxUI.GbxUserWidget.IsFocusableWidgetStateFocused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUserWidget::IsFocusableWidgetStateFocused(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUserWidget", "IsFocusableWidgetStateFocused");

	Params::GbxUserWidget_IsFocusableWidgetStateFocused Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUserWidget.IsFocusableWidgetStateHovered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUserWidget::IsFocusableWidgetStateHovered(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUserWidget", "IsFocusableWidgetStateHovered");

	Params::GbxUserWidget_IsFocusableWidgetStateHovered Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUserWidget.GetAllChildWidgetsOfClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UWidget>              TargetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  OutputArray                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxUserWidget::GetAllChildWidgetsOfClass(TSubclassOf<class UWidget> TargetClass, TArray<class UWidget*>& OutputArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "GetAllChildWidgetsOfClass");

	Params::GbxUserWidget_GetAllChildWidgetsOfClass Parms{};

	Parms.TargetClass = TargetClass;
	Parms.OutputArray = std::move(OutputArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutputArray = std::move(Parms.OutputArray);
}


// Function GbxUI.GbxUserWidget.GotoAndStop
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// struct FFrameTime                       StopTime                                               (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 InAnimation                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUserWidget::GotoAndStop(const struct FFrameTime& StopTime, const class UWidgetAnimation* InAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "GotoAndStop");

	Params::GbxUserWidget_GotoAndStop Parms{};

	Parms.StopTime = std::move(StopTime);
	Parms.InAnimation = InAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.HandleFocusableWidgetStateChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGbxFocusableWidgetState                NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBecameFocused                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLostFocus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUserWidget::HandleFocusableWidgetStateChanged(EGbxFocusableWidgetState NewState, bool bBecameFocused, bool bLostFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "HandleFocusableWidgetStateChanged");

	Params::GbxUserWidget_HandleFocusableWidgetStateChanged Parms{};

	Parms.NewState = NewState;
	Parms.bBecameFocused = bBecameFocused;
	Parms.bLostFocus = bLostFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxUserWidget.OnFocusableWidgetClicked
// (Native, Public)

void UGbxUserWidget::OnFocusableWidgetClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "OnFocusableWidgetClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.OnFocusableWidgetHovered
// (Native, Public)

void UGbxUserWidget::OnFocusableWidgetHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "OnFocusableWidgetHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.OnFocusableWidgetPressed
// (Native, Public)

void UGbxUserWidget::OnFocusableWidgetPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "OnFocusableWidgetPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.OnFocusableWidgetReleased
// (Native, Public)

void UGbxUserWidget::OnFocusableWidgetReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "OnFocusableWidgetReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.OnFocusableWidgetUnhovered
// (Native, Public)

void UGbxUserWidget::OnFocusableWidgetUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "OnFocusableWidgetUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.SetLabelText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)

void UGbxUserWidget::SetLabelText(const class FText& LabelText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "SetLabelText");

	Params::GbxUserWidget_SetLabelText Parms{};

	Parms.LabelText = std::move(LabelText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUserWidget.IsRegisteredAsFocusableWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUserWidget::IsRegisteredAsFocusableWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUserWidget", "IsRegisteredAsFocusableWidget");

	Params::GbxUserWidget_IsRegisteredAsFocusableWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.HandleMenuActivate
// (Event, Public, BlueprintEvent)

void UGbxUmgMenu::HandleMenuActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxUmgMenu.HandleMenuAspectRatioChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewAspectRatio                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::HandleMenuAspectRatioChanged(float NewAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuAspectRatioChanged");

	Params::GbxUmgMenu_HandleMenuAspectRatioChanged Parms{};

	Parms.NewAspectRatio = NewAspectRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxUmgMenu.HandleMenuDeactivate
// (Event, Public, BlueprintEvent)

void UGbxUmgMenu::HandleMenuDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuDeactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxUmgMenu.HandleMenuDeinit
// (Event, Public, BlueprintEvent)

void UGbxUmgMenu::HandleMenuDeinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuDeinit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxUmgMenu.HandleMenuInit
// (Event, Public, BlueprintEvent)

void UGbxUmgMenu::HandleMenuInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxUmgMenu.HandleMenuInputAction
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             InputAction                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::HandleMenuInputAction(const class FName& InputAction, int32 ControllerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuInputAction");

	Params::GbxUmgMenu_HandleMenuInputAction Parms{};

	Parms.InputAction = InputAction;
	Parms.ControllerId = ControllerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxUmgMenu.HandleMenuInputDeviceChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EGbxMenuInputDevice                     NewInputDevice                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::HandleMenuInputDeviceChanged(EGbxMenuInputDevice NewInputDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "HandleMenuInputDeviceChanged");

	Params::GbxUmgMenu_HandleMenuInputDeviceChanged Parms{};

	Parms.NewInputDevice = NewInputDevice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxUmgMenu.MenuStack_Clear
// (Final, Native, Public, BlueprintCallable)

void UGbxUmgMenu::MenuStack_Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "MenuStack_Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.MenuStack_Pop
// (Final, Native, Public, BlueprintCallable)

void UGbxUmgMenu::MenuStack_Pop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "MenuStack_Pop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.MenuStack_PopTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Menu                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::MenuStack_PopTo(const class UObject* Menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "MenuStack_PopTo");

	Params::GbxUmgMenu_MenuStack_PopTo Parms{};

	Parms.Menu = Menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.MenuStack_PopToSwitchTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Menu                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxMenuData*                     MenuDataIn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxUmgMenu::MenuStack_PopToSwitchTo(const class UObject* Menu, class UGbxMenuData* MenuDataIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "MenuStack_PopToSwitchTo");

	Params::GbxUmgMenu_MenuStack_PopToSwitchTo Parms{};

	Parms.Menu = Menu;
	Parms.MenuDataIn = MenuDataIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.MenuStack_Push
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxMenuData*                     MenuDataIn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxUmgMenu::MenuStack_Push(class UGbxMenuData* MenuDataIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "MenuStack_Push");

	Params::GbxUmgMenu_MenuStack_Push Parms{};

	Parms.MenuDataIn = MenuDataIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.MenuStack_SwitchTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxMenuData*                     MenuDataIn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxUmgMenu::MenuStack_SwitchTo(class UGbxMenuData* MenuDataIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "MenuStack_SwitchTo");

	Params::GbxUmgMenu_MenuStack_SwitchTo Parms{};

	Parms.MenuDataIn = MenuDataIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.NavigateBack
// (Final, Native, Public, BlueprintCallable)

void UGbxUmgMenu::NavigateBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "NavigateBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.PopulateHintBar
// (Native, Public, BlueprintCallable)

void UGbxUmgMenu::PopulateHintBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "PopulateHintBar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.RegisterFocusableWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFocusableWidgetAdjacencyInfo AdjacencyInfo                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxUmgMenu::RegisterFocusableWidget(class UObject* Widget, const struct FGbxFocusableWidgetAdjacencyInfo& AdjacencyInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "RegisterFocusableWidget");

	Params::GbxUmgMenu_RegisterFocusableWidget Parms{};

	Parms.Widget = Widget;
	Parms.AdjacencyInfo = std::move(AdjacencyInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.RegisterFocusableWidgetWithAdjacency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentDown                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentLeft                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentRight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::RegisterFocusableWidgetWithAdjacency(class UObject* Widget, class UObject* AdjacentUp, class UObject* AdjacentDown, class UObject* AdjacentLeft, class UObject* AdjacentRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "RegisterFocusableWidgetWithAdjacency");

	Params::GbxUmgMenu_RegisterFocusableWidgetWithAdjacency Parms{};

	Parms.Widget = Widget;
	Parms.AdjacentUp = AdjacentUp;
	Parms.AdjacentDown = AdjacentDown;
	Parms.AdjacentLeft = AdjacentLeft;
	Parms.AdjacentRight = AdjacentRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.RegisterStagePlacedHint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxHintWidget>  InHintWidget                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class FName                             InInputAction                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::RegisterStagePlacedHint(const TScriptInterface<class IGbxHintWidget>& InHintWidget, const class FName InInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "RegisterStagePlacedHint");

	Params::GbxUmgMenu_RegisterStagePlacedHint Parms{};

	Parms.InHintWidget = InHintWidget;
	Parms.InInputAction = InInputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.SetFocusableWidgetAdjancency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentDown                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentLeft                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentRight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::SetFocusableWidgetAdjancency(class UObject* Widget, class UObject* AdjacentUp, class UObject* AdjacentDown, class UObject* AdjacentLeft, class UObject* AdjacentRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "SetFocusableWidgetAdjancency");

	Params::GbxUmgMenu_SetFocusableWidgetAdjancency Parms{};

	Parms.Widget = Widget;
	Parms.AdjacentUp = AdjacentUp;
	Parms.AdjacentDown = AdjacentDown;
	Parms.AdjacentLeft = AdjacentLeft;
	Parms.AdjacentRight = AdjacentRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.SetFocusedWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::SetFocusedWidget(class UObject* Widget, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "SetFocusedWidget");

	Params::GbxUmgMenu_SetFocusedWidget Parms{};

	Parms.Widget = Widget;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.SetHintBarContainer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxHintBarWidgetContainer>InContainer                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UGbxUmgMenu::SetHintBarContainer(const TScriptInterface<class IGbxHintBarWidgetContainer>& InContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "SetHintBarContainer");

	Params::GbxUmgMenu_SetHintBarContainer Parms{};

	Parms.InContainer = InContainer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.SetSlateFocusedWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUmgMenu::SetSlateFocusedWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "SetSlateFocusedWidget");

	Params::GbxUmgMenu_SetSlateFocusedWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.SetWidgetAdjacency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxFocusableWidgetAdjacencyInfo AdjacencyInfo                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxUmgMenu::SetWidgetAdjacency(class UObject* Widget, const struct FGbxFocusableWidgetAdjacencyInfo& AdjacencyInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "SetWidgetAdjacency");

	Params::GbxUmgMenu_SetWidgetAdjacency Parms{};

	Parms.Widget = Widget;
	Parms.AdjacencyInfo = std::move(AdjacencyInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUmgMenu.GetCurrentInputDevice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGbxMenuInputDevice                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxMenuInputDevice UGbxUmgMenu::GetCurrentInputDevice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "GetCurrentInputDevice");

	Params::GbxUmgMenu_GetCurrentInputDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.GetFocusedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxUmgMenu::GetFocusedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "GetFocusedWidget");

	Params::GbxUmgMenu_GetFocusedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.GetListItemFactory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxListItemFactory*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemFactory* UGbxUmgMenu::GetListItemFactory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "GetListItemFactory");

	Params::GbxUmgMenu_GetListItemFactory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.IsActiveMenuOnStack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUmgMenu::IsActiveMenuOnStack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "IsActiveMenuOnStack");

	Params::GbxUmgMenu_IsActiveMenuOnStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUmgMenu.IsWidgetFocused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WidgetInQuestion                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUmgMenu::IsWidgetFocused(const class UObject* WidgetInQuestion) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUmgMenu", "IsWidgetFocused");

	Params::GbxUmgMenu_IsWidgetFocused Parms{};

	Parms.WidgetInQuestion = WidgetInQuestion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxObject.RotateAboutPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Degrees                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxObject::RotateAboutPoint(const float Degrees, const struct FVector2D& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxObject", "RotateAboutPoint");

	Params::GbxGFxObject_RotateAboutPoint Parms{};

	Parms.Degrees = Degrees;
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxObject.SetBaseDisplayTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxObject::SetBaseDisplayTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxObject", "SetBaseDisplayTransform");

	Params::GbxGFxObject_SetBaseDisplayTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxObject.SetOffsetDisplayTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxObject::SetOffsetDisplayTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxObject", "SetOffsetDisplayTransform");

	Params::GbxGFxObject_SetOffsetDisplayTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxObject.GetBaseDisplayTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGbxGFxObject::GetBaseDisplayTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxObject", "GetBaseDisplayTransform");

	Params::GbxGFxObject_GetBaseDisplayTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxObject.GetOffsetDisplayTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGbxGFxObject::GetOffsetDisplayTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxObject", "GetOffsetDisplayTransform");

	Params::GbxGFxObject_GetOffsetDisplayTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxGridScrollingList.OnScrollBarPositionUpdated
// (Final, Native, Protected)
// Parameters:
// float                                   SliderPercentage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxGridScrollingList::OnScrollBarPositionUpdated(float SliderPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxGridScrollingList", "OnScrollBarPositionUpdated");

	Params::GbxGFxGridScrollingList_OnScrollBarPositionUpdated Parms{};

	Parms.SliderPercentage = SliderPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.SpawnGbxGFxMovie
// (Final, Native, Static, Public, BlueprintCallable, Const)
// Parameters:
// class AGbxPlayerController*             GbxPlayerController                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxGFxMovie>         MovieClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGbxGFxMovie*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGbxGFxMovie* UGbxGFxMovie::SpawnGbxGFxMovie(class AGbxPlayerController* GbxPlayerController, TSubclassOf<class UGbxGFxMovie> MovieClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxMovie", "SpawnGbxGFxMovie");

	Params::GbxGFxMovie_SpawnGbxGFxMovie Parms{};

	Parms.GbxPlayerController = GbxPlayerController;
	Parms.MovieClass = MovieClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.ApplyNewAudioSettings
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UDataTable*                       NewDataTable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIAudioSettingOperation                MergeOperation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMovie::ApplyNewAudioSettings(class UDataTable* NewDataTable, EUIAudioSettingOperation MergeOperation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "ApplyNewAudioSettings");

	Params::GbxGFxMovie_ApplyNewAudioSettings Parms{};

	Parms.NewDataTable = NewDataTable;
	Parms.MergeOperation = MergeOperation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.extAnimationFinished
// (Native, Public, Const)
// Parameters:
// class FString                           TargetName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMovie::ExtAnimationFinished(const class FString& TargetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "extAnimationFinished");

	Params::GbxGFxMovie_ExtAnimationFinished Parms{};

	Parms.TargetName = std::move(TargetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.extTransitionComplete
// (Final, Native, Public, Const)

void UGbxGFxMovie::ExtTransitionComplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "extTransitionComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.GetBaseDisplayTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGbxGFxMovie::GetBaseDisplayTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetBaseDisplayTransform");

	Params::GbxGFxMovie_GetBaseDisplayTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetMovieDimensions
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxGFxMovie::GetMovieDimensions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetMovieDimensions");

	Params::GbxGFxMovie_GetMovieDimensions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetOffsetDisplayTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGbxGFxMovie::GetOffsetDisplayTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetOffsetDisplayTransform");

	Params::GbxGFxMovie_GetOffsetDisplayTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetOwningPlayerController
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGbxPlayerController*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGbxPlayerController* UGbxGFxMovie::GetOwningPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetOwningPlayerController");

	Params::GbxGFxMovie_GetOwningPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetOwningPlayerPawn
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UGbxGFxMovie::GetOwningPlayerPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetOwningPlayerPawn");

	Params::GbxGFxMovie_GetOwningPlayerPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetStageDimensions
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxGFxMovie::GetStageDimensions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetStageDimensions");

	Params::GbxGFxMovie_GetStageDimensions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetViewportDimensions
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxGFxMovie::GetViewportDimensions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetViewportDimensions");

	Params::GbxGFxMovie_GetViewportDimensions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.GetViewportOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxGFxMovie::GetViewportOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "GetViewportOffset");

	Params::GbxGFxMovie_GetViewportOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.RunUIEventAudio
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ProviderHistory                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxMovie::RunUIEventAudio(class FName EventName, const class FString& ProviderHistory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "RunUIEventAudio");

	Params::GbxGFxMovie_RunUIEventAudio Parms{};

	Parms.EventName = EventName;
	Parms.ProviderHistory = std::move(ProviderHistory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.SetAnchor
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FGbxGFxAnchor                    Anchor                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxMovie::SetAnchor(const struct FGbxGFxAnchor& Anchor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "SetAnchor");

	Params::GbxGFxMovie_SetAnchor Parms{};

	Parms.Anchor = std::move(Anchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.SetAudioEnabled
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMovie::SetAudioEnabled(bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "SetAudioEnabled");

	Params::GbxGFxMovie_SetAudioEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.SetBaseDisplayTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxMovie::SetBaseDisplayTransform(const struct FTransform& Transform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "SetBaseDisplayTransform");

	Params::GbxGFxMovie_SetBaseDisplayTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.SetOffsetDisplayTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxMovie::SetOffsetDisplayTransform(const struct FTransform& Transform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "SetOffsetDisplayTransform");

	Params::GbxGFxMovie_SetOffsetDisplayTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.SetViewportToPlayerScreen
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMovie::SetViewportToPlayerScreen(class AGbxPlayerController* Pc) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "SetViewportToPlayerScreen");

	Params::GbxGFxMovie_SetViewportToPlayerScreen Parms{};

	Parms.Pc = Pc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.SpawnMovie
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AGbxPlayerController*             NewGPCOwner                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMovie::SpawnMovie(class AGbxPlayerController* NewGPCOwner, class UTextureRenderTarget2D* RenderTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "SpawnMovie");

	Params::GbxGFxMovie_SpawnMovie Parms{};

	Parms.NewGPCOwner = NewGPCOwner;
	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMovie.TranslateRectToScreen
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FBox2D                           Rect                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBox2D                           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBox2D UGbxGFxMovie::TranslateRectToScreen(const struct FBox2D& Rect) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "TranslateRectToScreen");

	Params::GbxGFxMovie_TranslateRectToScreen Parms{};

	Parms.Rect = std::move(Rect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.TranslateScreenToLocal
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseMovieDimensions                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxGFxMovie::TranslateScreenToLocal(const struct FVector2D& Point, bool bUseMovieDimensions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "TranslateScreenToLocal");

	Params::GbxGFxMovie_TranslateScreenToLocal Parms{};

	Parms.Point = std::move(Point);
	Parms.bUseMovieDimensions = bUseMovieDimensions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.TranslateToScreen
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxGFxMovie::TranslateToScreen(const struct FVector2D& Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "TranslateToScreen");

	Params::GbxGFxMovie_TranslateToScreen Parms{};

	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMovie.TranslateWorldToLocal
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          LocationWorldSpace                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutPositionLocal                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayerViewportRelative                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseMovieDimensions                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxMovie::TranslateWorldToLocal(const struct FVector& LocationWorldSpace, struct FVector2D* OutPositionLocal, bool bPlayerViewportRelative, bool bUseMovieDimensions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMovie", "TranslateWorldToLocal");

	Params::GbxGFxMovie_TranslateWorldToLocal Parms{};

	Parms.LocationWorldSpace = std::move(LocationWorldSpace);
	Parms.bPlayerViewportRelative = bPlayerViewportRelative;
	Parms.bUseMovieDimensions = bUseMovieDimensions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPositionLocal != nullptr)
		*OutPositionLocal = std::move(Parms.OutPositionLocal);

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMenu.GetFocusedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxGFxMenu::GetFocusedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "GetFocusedWidget");

	Params::GbxGFxMenu_GetFocusedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMenu.IsWidgetFocused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WidgetInQuestion                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxMenu::IsWidgetFocused(const class UObject* WidgetInQuestion) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "IsWidgetFocused");

	Params::GbxGFxMenu_IsWidgetFocused Parms{};

	Parms.WidgetInQuestion = WidgetInQuestion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxMenu.MenuStack_Clear
// (Final, Native, Public, BlueprintCallable, Const)

void UGbxGFxMenu::MenuStack_Clear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "MenuStack_Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMenu.RegisterFocusableWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TScriptInterface<class IGbxFocusableWidget>Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// struct FGbxFocusableWidgetAdjacencyInfo AdjacencyInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxMenu::RegisterFocusableWidget(TScriptInterface<class IGbxFocusableWidget> Widget, const struct FGbxFocusableWidgetAdjacencyInfo& AdjacencyInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "RegisterFocusableWidget");

	Params::GbxGFxMenu_RegisterFocusableWidget Parms{};

	Parms.Widget = Widget;
	Parms.AdjacencyInfo = std::move(AdjacencyInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMenu.RegisterFocusableWidgetWithAdjacency
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TScriptInterface<class IGbxFocusableWidget>Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentDown                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentLeft                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentRight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMenu::RegisterFocusableWidgetWithAdjacency(TScriptInterface<class IGbxFocusableWidget> Widget, class UObject* AdjacentUp, class UObject* AdjacentDown, class UObject* AdjacentLeft, class UObject* AdjacentRight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "RegisterFocusableWidgetWithAdjacency");

	Params::GbxGFxMenu_RegisterFocusableWidgetWithAdjacency Parms{};

	Parms.Widget = Widget;
	Parms.AdjacentUp = AdjacentUp;
	Parms.AdjacentDown = AdjacentDown;
	Parms.AdjacentLeft = AdjacentLeft;
	Parms.AdjacentRight = AdjacentRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMenu.SetFocusableWidgetAdjancency
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TScriptInterface<class IGbxFocusableWidget>Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentDown                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentLeft                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          AdjacentRight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMenu::SetFocusableWidgetAdjancency(TScriptInterface<class IGbxFocusableWidget> Widget, class UObject* AdjacentUp, class UObject* AdjacentDown, class UObject* AdjacentLeft, class UObject* AdjacentRight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "SetFocusableWidgetAdjancency");

	Params::GbxGFxMenu_SetFocusableWidgetAdjancency Parms{};

	Parms.Widget = Widget;
	Parms.AdjacentUp = AdjacentUp;
	Parms.AdjacentDown = AdjacentDown;
	Parms.AdjacentLeft = AdjacentLeft;
	Parms.AdjacentRight = AdjacentRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMenu.SetFocusedWidget
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TScriptInterface<class IGbxFocusableWidget>WidgetToFocus                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMenu::SetFocusedWidget(TScriptInterface<class IGbxFocusableWidget> WidgetToFocus, bool bFromMouse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "SetFocusedWidget");

	Params::GbxGFxMenu_SetFocusedWidget Parms{};

	Parms.WidgetToFocus = WidgetToFocus;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMenu.SetWidgetAdjacency
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TScriptInterface<class IGbxFocusableWidget>Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// struct FGbxFocusableWidgetAdjacencyInfo AdjacencyInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxMenu::SetWidgetAdjacency(TScriptInterface<class IGbxFocusableWidget> Widget, const struct FGbxFocusableWidgetAdjacencyInfo& AdjacencyInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenu", "SetWidgetAdjacency");

	Params::GbxGFxMenu_SetWidgetAdjacency Parms{};

	Parms.Widget = Widget;
	Parms.AdjacencyInfo = std::move(AdjacencyInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCoreDialogBoxHelpers.ShowBlockingDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             HeaderText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FText                             MessageText                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bBlocksAllUsers                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDialogBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxDialogBox* UGbxCoreDialogBoxHelpers::ShowBlockingDialog(class AGbxPlayerController* Pc, const class FText& HeaderText, const class FText& MessageText, bool bBlocksAllUsers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCoreDialogBoxHelpers", "ShowBlockingDialog");

	Params::GbxCoreDialogBoxHelpers_ShowBlockingDialog Parms{};

	Parms.Pc = Pc;
	Parms.HeaderText = std::move(HeaderText);
	Parms.MessageText = std::move(MessageText);
	Parms.bBlocksAllUsers = bBlocksAllUsers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxCoreDialogBoxHelpers.ShowConfirmCancelDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             HeaderText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FText                             MessageText                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bAnyUserCanInteract                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDialogBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxDialogBox* UGbxCoreDialogBoxHelpers::ShowConfirmCancelDialog(class AGbxPlayerController* Pc, const class FText& HeaderText, const class FText& MessageText, bool bAnyUserCanInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCoreDialogBoxHelpers", "ShowConfirmCancelDialog");

	Params::GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog Parms{};

	Parms.Pc = Pc;
	Parms.HeaderText = std::move(HeaderText);
	Parms.MessageText = std::move(MessageText);
	Parms.bAnyUserCanInteract = bAnyUserCanInteract;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxCoreDialogBoxHelpers.ShowDialog
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxDialogBoxInfo                DialogBoxInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UGbxDialogBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxDialogBox* UGbxCoreDialogBoxHelpers::ShowDialog(class AGbxPlayerController* Pc, const struct FGbxDialogBoxInfo& DialogBoxInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCoreDialogBoxHelpers", "ShowDialog");

	Params::GbxCoreDialogBoxHelpers_ShowDialog Parms{};

	Parms.Pc = Pc;
	Parms.DialogBoxInfo = std::move(DialogBoxInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxCoreDialogBoxHelpers.ShowOkayDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             HeaderText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FText                             MessageText                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bAnyUserCanInteract                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxDialogBoxHelpersDialogTemplate      Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDialogBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxDialogBox* UGbxCoreDialogBoxHelpers::ShowOkayDialog(class AGbxPlayerController* Pc, const class FText& HeaderText, const class FText& MessageText, bool bAnyUserCanInteract, EGbxDialogBoxHelpersDialogTemplate Template)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCoreDialogBoxHelpers", "ShowOkayDialog");

	Params::GbxCoreDialogBoxHelpers_ShowOkayDialog Parms{};

	Parms.Pc = Pc;
	Parms.HeaderText = std::move(HeaderText);
	Parms.MessageText = std::move(MessageText);
	Parms.bAnyUserCanInteract = bAnyUserCanInteract;
	Parms.Template = Template;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxCoreDialogBoxHelpers.ShowYesNoDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             HeaderText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FText                             MessageText                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    bAnyUserCanInteract                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxDialogBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxDialogBox* UGbxCoreDialogBoxHelpers::ShowYesNoDialog(class AGbxPlayerController* Pc, const class FText& HeaderText, const class FText& MessageText, bool bAnyUserCanInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxCoreDialogBoxHelpers", "ShowYesNoDialog");

	Params::GbxCoreDialogBoxHelpers_ShowYesNoDialog Parms{};

	Parms.Pc = Pc;
	Parms.HeaderText = std::move(HeaderText);
	Parms.MessageText = std::move(MessageText);
	Parms.bAnyUserCanInteract = bAnyUserCanInteract;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxHUDWidget.extHideAnimationFinished
// (Native, Public, Const)

void UGbxGFxHUDWidget::ExtHideAnimationFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxHUDWidget", "extHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxHUDWidget.extInitAnimationFinished
// (Native, Public, Const)

void UGbxGFxHUDWidget::ExtInitAnimationFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxHUDWidget", "extInitAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUDContainer.HandleActivate
// (Event, Public, BlueprintEvent)

void UGbxHUDContainer::HandleActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDContainer", "HandleActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHUDContainer.HandleDeactivate
// (Event, Public, BlueprintEvent)

void UGbxHUDContainer::HandleDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDContainer", "HandleDeactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHUDContainer.HandleDeinit
// (Event, Public, BlueprintEvent)

void UGbxHUDContainer::HandleDeinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDContainer", "HandleDeinit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHUDContainer.HandleInit
// (Event, Public, BlueprintEvent)

void UGbxHUDContainer::HandleInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDContainer", "HandleInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxListItem.GetItemIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxListItem::GetItemIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItem", "GetItemIndex");

	Params::GbxListItem_GetItemIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxDebugRumbleMenu.OnSliderValueChanged
// (Final, Native, Protected)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxDebugRumbleMenu::OnSliderValueChanged(class UGbxListItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDebugRumbleMenu", "OnSliderValueChanged");

	Params::GbxDebugRumbleMenu_OnSliderValueChanged Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxFullScreenMovie.OnMovieFinishedPlaying
// (Final, Native, Public)

void UGbxFullScreenMovie::OnMovieFinishedPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxFullScreenMovie", "OnMovieFinishedPlaying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateDisabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsFocusableWidgetStateDisabled(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxButton", "IsFocusableWidgetStateDisabled");

	Params::GbxGFxButton_IsFocusableWidgetStateDisabled Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateDown
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsFocusableWidgetStateDown(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxButton", "IsFocusableWidgetStateDown");

	Params::GbxGFxButton_IsFocusableWidgetStateDown Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateFocused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsFocusableWidgetStateFocused(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxButton", "IsFocusableWidgetStateFocused");

	Params::GbxGFxButton_IsFocusableWidgetStateFocused Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateHovered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsFocusableWidgetStateHovered(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxButton", "IsFocusableWidgetStateHovered");

	Params::GbxGFxButton_IsFocusableWidgetStateHovered Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateUp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsFocusableWidgetStateUp(EGbxFocusableWidgetState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxButton", "IsFocusableWidgetStateUp");

	Params::GbxGFxButton_IsFocusableWidgetStateUp Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction GbxUI.GbxGFxButton.GbxGFxButtonEvent__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxButton::GbxGFxButtonEvent__DelegateSignature(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "GbxGFxButtonEvent__DelegateSignature");

	Params::GbxGFxButton_GbxGFxButtonEvent__DelegateSignature Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxGFxButton.K2_HandleFocusableWidgetStateChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGbxFocusableWidgetState                NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBecameFocused                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLostFocus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxButton::K2_HandleFocusableWidgetStateChanged(EGbxFocusableWidgetState NewState, bool bBecameFocused, bool bLostFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "K2_HandleFocusableWidgetStateChanged");

	Params::GbxGFxButton_K2_HandleFocusableWidgetStateChanged Parms{};

	Parms.NewState = NewState;
	Parms.bBecameFocused = bBecameFocused;
	Parms.bLostFocus = bLostFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxGFxButton.RefreshView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGbxFocusableWidgetState                PrevState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxButton::RefreshView(EGbxFocusableWidgetState PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "RefreshView");

	Params::GbxGFxButton_RefreshView Parms{};

	Parms.PrevState = PrevState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxButton.SetButtonType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGbxGFxButtonType                       InButtonType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxButton::SetButtonType(EGbxGFxButtonType InButtonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "SetButtonType");

	Params::GbxGFxButton_SetButtonType Parms{};

	Parms.InButtonType = InButtonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxButton.SetCheckedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGbxGFxButtonCheckedState               InCheckedState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefresh                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxButton::SetCheckedState(EGbxGFxButtonCheckedState InCheckedState, bool bShouldRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "SetCheckedState");

	Params::GbxGFxButton_SetCheckedState Parms{};

	Parms.InCheckedState = InCheckedState;
	Parms.bShouldRefresh = bShouldRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxButton.SetLabelText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bForceUpdate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxButton::SetLabelText(const class FText& Text, bool bForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "SetLabelText");

	Params::GbxGFxButton_SetLabelText Parms{};

	Parms.Text = std::move(Text);
	Parms.bForceUpdate = bForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxButton.SetLockedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGbxGFxButtonLockedState                InLockedState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefresh                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxButton::SetLockedState(EGbxGFxButtonLockedState InLockedState, bool bShouldRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "SetLockedState");

	Params::GbxGFxButton_SetLockedState Parms{};

	Parms.InLockedState = InLockedState;
	Parms.bShouldRefresh = bShouldRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxButton.GetButtonType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGbxGFxButtonType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxGFxButtonType UGbxGFxButton::GetButtonType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "GetButtonType");

	Params::GbxGFxButton_GetButtonType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.GetCheckedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGbxGFxButtonCheckedState               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxGFxButtonCheckedState UGbxGFxButton::GetCheckedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "GetCheckedState");

	Params::GbxGFxButton_GetCheckedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.GetLockedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGbxGFxButtonLockedState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxGFxButtonLockedState UGbxGFxButton::GetLockedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "GetLockedState");

	Params::GbxGFxButton_GetLockedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsChecked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "IsChecked");

	Params::GbxGFxButton_IsChecked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "IsLocked");

	Params::GbxGFxButton_IsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxButton.IsRegisteredAsFocusableWidget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxButton::IsRegisteredAsFocusableWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxButton", "IsRegisteredAsFocusableWidget");

	Params::GbxGFxButton_IsRegisteredAsFocusableWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxFocusableWidget.SetFocusableWidgetEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxFocusableWidget::SetFocusableWidgetEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxFocusableWidget", "SetFocusableWidgetEnabled");

	Params::GbxFocusableWidget_SetFocusableWidgetEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxFocusableWidget.GetFocusableWidgetState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGbxFocusableWidgetState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxFocusableWidgetState IGbxFocusableWidget::GetFocusableWidgetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxFocusableWidget", "GetFocusableWidgetState");

	Params::GbxFocusableWidget_GetFocusableWidgetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxFocusableWidget.IsFocusableWidgetEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxFocusableWidget::IsFocusableWidgetEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxFocusableWidget", "IsFocusableWidgetEnabled");

	Params::GbxFocusableWidget_IsFocusableWidgetEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxFocusableWidget.IsFocusableWidgetFocused
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxFocusableWidget::IsFocusableWidgetFocused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxFocusableWidget", "IsFocusableWidgetFocused");

	Params::GbxFocusableWidget_IsFocusableWidgetFocused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxDropDownList.OnDropDownButtonClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxDropDownList::OnDropDownButtonClicked(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxDropDownList", "OnDropDownButtonClicked");

	Params::GbxGFxDropDownList_OnDropDownButtonClicked Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxDropDownList.OnEntryClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxDropDownList::OnEntryClicked(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxDropDownList", "OnEntryClicked");

	Params::GbxGFxDropDownList_OnEntryClicked Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxListItemSpinner.OnSpinnerValueUpdated
// (Final, Native, Private)

void UGbxGFxListItemSpinner::OnSpinnerValueUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxListItemSpinner", "OnSpinnerValueUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.EnteredPercentRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   RangeMin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RangeMax                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDecreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxProgressBar::EnteredPercentRange(float RangeMin, float RangeMax, float OldValue, float CurrentValue, bool bIncreasing, bool bDecreasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxProgressBar", "EnteredPercentRange");

	Params::GbxGFxProgressBar_EnteredPercentRange Parms{};

	Parms.RangeMin = RangeMin;
	Parms.RangeMax = RangeMax;
	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;
	Parms.bIncreasing = bIncreasing;
	Parms.bDecreasing = bDecreasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxProgressBar.PassedPercentThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDecreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxGFxProgressBar::PassedPercentThreshold(float Threshold, float OldValue, float CurrentValue, bool bIncreasing, bool bDecreasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGFxProgressBar", "PassedPercentThreshold");

	Params::GbxGFxProgressBar_PassedPercentThreshold Parms{};

	Parms.Threshold = Threshold;
	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;
	Parms.bIncreasing = bIncreasing;
	Parms.bDecreasing = bDecreasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxProgressBar.HandleEnterPercentRange
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             RangeName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::HandleEnterPercentRange(const class FName& RangeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "HandleEnterPercentRange");

	Params::GbxGFxProgressBar_HandleEnterPercentRange Parms{};

	Parms.RangeName = RangeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxGFxProgressBar.HandlePercentChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInterpolating                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxProgressBarInterpolator      ActiveInterpolator                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::HandlePercentChanged(float OldValue, float CurrentValue, bool bIsInterpolating, const struct FGbxProgressBarInterpolator& ActiveInterpolator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "HandlePercentChanged");

	Params::GbxGFxProgressBar_HandlePercentChanged Parms{};

	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;
	Parms.bIsInterpolating = bIsInterpolating;
	Parms.ActiveInterpolator = std::move(ActiveInterpolator);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxGFxProgressBar.InterpolateToPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::InterpolateToPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "InterpolateToPercent");

	Params::GbxGFxProgressBar_InterpolateToPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.InterpolateToPercentWithInterpolator
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxProgressBarInterpolator      Interpolator_0                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::InterpolateToPercentWithInterpolator(float InPercent, const struct FGbxProgressBarInterpolator& Interpolator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "InterpolateToPercentWithInterpolator");

	Params::GbxGFxProgressBar_InterpolateToPercentWithInterpolator Parms{};

	Parms.InPercent = InPercent;
	Parms.Interpolator_0 = std::move(Interpolator_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.SetCurrentValueText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::SetCurrentValueText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "SetCurrentValueText");

	Params::GbxGFxProgressBar_SetCurrentValueText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.SetFillColorAndOpacity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InColor                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::SetFillColorAndOpacity(const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "SetFillColorAndOpacity");

	Params::GbxGFxProgressBar_SetFillColorAndOpacity Parms{};

	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.SetMaxValueText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::SetMaxValueText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "SetMaxValueText");

	Params::GbxGFxProgressBar_SetMaxValueText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.SetPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxProgressBar::SetPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "SetPercent");

	Params::GbxGFxProgressBar_SetPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxProgressBar.GetPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxGFxProgressBar::GetPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxProgressBar", "GetPercent");

	Params::GbxGFxProgressBar_GetPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxGFxListItemNumber.OnSliderUpdated
// (Final, Native, Private)
// Parameters:
// float                                   SliderPct                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxListItemNumber::OnSliderUpdated(float SliderPct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxListItemNumber", "OnSliderUpdated");

	Params::GbxGFxListItemNumber_OnSliderUpdated Parms{};

	Parms.SliderPct = SliderPct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUDWidget.HandleActivate
// (Event, Public, BlueprintEvent)

void UGbxHUDWidget::HandleActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDWidget", "HandleActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHUDWidget.HandleDeactivate
// (Event, Public, BlueprintEvent)

void UGbxHUDWidget::HandleDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDWidget", "HandleDeactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHUDWidget.HandleDeinit
// (Event, Public, BlueprintEvent)

void UGbxHUDWidget::HandleDeinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDWidget", "HandleDeinit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHUDWidget.HandleInit
// (Event, Public, BlueprintEvent)

void UGbxHUDWidget::HandleInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUDWidget", "HandleInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxMenuSwitcher.NextPage
// (Final, Native, Public, BlueprintCallable)

void UGbxMenuSwitcher::NextPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuSwitcher", "NextPage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuSwitcher.PrevPage
// (Final, Native, Public, BlueprintCallable)

void UGbxMenuSwitcher::PrevPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuSwitcher", "PrevPage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuSwitcher.SwitchToPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SubMenuId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMenuSwitcher::SwitchToPage(class FName SubMenuId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuSwitcher", "SwitchToPage");

	Params::GbxMenuSwitcher_SwitchToPage Parms{};

	Parms.SubMenuId = SubMenuId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuSwitcher.GetCurrentSubmenuId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxMenuSwitcher::GetCurrentSubmenuId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuSwitcher", "GetCurrentSubmenuId");

	Params::GbxMenuSwitcher_GetCurrentSubmenuId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxDebugMenu.OnCategorySelected
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxUserWidget*                   Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxDebugMenu::OnCategorySelected(class UGbxUserWidget* Widget, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDebugMenu", "OnCategorySelected");

	Params::GbxDebugMenu_OnCategorySelected Parms{};

	Parms.Widget = Widget;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDebugMenu.OnCloseClicked
// (Final, Native, Public)

void UGbxDebugMenu::OnCloseClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDebugMenu", "OnCloseClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.ClearHUDStates
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::ClearHUDStates(class AGbxPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "ClearHUDStates");

	Params::GbxHUD_ClearHUDStates Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.ClearToDefaultHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::ClearToDefaultHUDState(class AGbxPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "ClearToDefaultHUDState");

	Params::GbxHUD_ClearToDefaultHUDState Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.GetCurrentHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxHUDStateData* AGbxHUD::GetCurrentHUDState(class AGbxPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "GetCurrentHUDState");

	Params::GbxHUD_GetCurrentHUDState Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxHUD.GotoHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::GotoHUDState(class AGbxPlayerController* PlayerController, class UGbxHUDStateData* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "GotoHUDState");

	Params::GbxHUD_GotoHUDState Parms{};

	Parms.PlayerController = PlayerController;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.GotoPreviousHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::GotoPreviousHUDState(class AGbxPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "GotoPreviousHUDState");

	Params::GbxHUD_GotoPreviousHUDState Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.PopHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::PopHUDState(class AGbxPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "PopHUDState");

	Params::GbxHUD_PopHUDState Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.PopSpecifiedHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::PopSpecifiedHUDState(class AGbxPlayerController* PlayerController, class UGbxHUDStateData* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "PopSpecifiedHUDState");

	Params::GbxHUD_PopSpecifiedHUDState Parms{};

	Parms.PlayerController = PlayerController;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.PopToHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::PopToHUDState(class AGbxPlayerController* PlayerController, class UGbxHUDStateData* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "PopToHUDState");

	Params::GbxHUD_PopToHUDState Parms{};

	Parms.PlayerController = PlayerController;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.PopToSwitchToHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 PopToState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 SwitchToState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::PopToSwitchToHUDState(class AGbxPlayerController* PlayerController, class UGbxHUDStateData* PopToState, class UGbxHUDStateData* SwitchToState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "PopToSwitchToHUDState");

	Params::GbxHUD_PopToSwitchToHUDState Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PopToState = PopToState;
	Parms.SwitchToState = SwitchToState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.PushHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowDuplicatePush                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::PushHUDState(class AGbxPlayerController* PlayerController, class UGbxHUDStateData* State, bool bAllowDuplicatePush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "PushHUDState");

	Params::GbxHUD_PushHUDState Parms{};

	Parms.PlayerController = PlayerController;
	Parms.State = State;
	Parms.bAllowDuplicatePush = bAllowDuplicatePush;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.SetHUDContainer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDData*                      ContainerDefinition                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::SetHUDContainer(class AGbxPlayerController* PlayerController, const class UGbxHUDData* ContainerDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "SetHUDContainer");

	Params::GbxHUD_SetHUDContainer Parms{};

	Parms.PlayerController = PlayerController;
	Parms.ContainerDefinition = ContainerDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.SwitchToHUDState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxHUDStateData*                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::SwitchToHUDState(class AGbxPlayerController* PlayerController, class UGbxHUDStateData* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxHUD", "SwitchToHUDState");

	Params::GbxHUD_SwitchToHUDState Parms{};

	Parms.PlayerController = PlayerController;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.OnPawnChanged
// (Native, Protected)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::OnPawnChanged(class APawn* Pawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUD", "OnPawnChanged");

	Params::GbxHUD_OnPawnChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHUD.OnPrimaryCharacterChanged
// (Final, Native, Protected)
// Parameters:
// class AGbxCharacter*                    Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxHUD::OnPrimaryCharacterChanged(class AGbxCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHUD", "OnPrimaryCharacterChanged");

	Params::GbxHUD_OnPrimaryCharacterChanged Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUILibrary.AbbreviateNumberText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ValueToFormat                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxUILibrary::AbbreviateNumberText(float ValueToFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "AbbreviateNumberText");

	Params::GbxUILibrary_AbbreviateNumberText Parms{};

	Parms.ValueToFormat = ValueToFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateBooleanListItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    InitialValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItemBoolean*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemBoolean* UGbxUILibrary::CreateBooleanListItem(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, bool InitialValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateBooleanListItem");

	Params::GbxUILibrary_CreateBooleanListItem Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.InitialValue = InitialValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateBooleanListItemWithDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    InitialValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxListItem* Item)>ChangedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemBoolean*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemBoolean* UGbxUILibrary::CreateBooleanListItemWithDelegates(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, bool InitialValue, TDelegate<void(class UGbxListItem* Item)> ChangedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateBooleanListItemWithDelegates");

	Params::GbxUILibrary_CreateBooleanListItemWithDelegates Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.InitialValue = InitialValue;
	Parms.ChangedDelegate = ChangedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateComboBoxListItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// TArray<class FText>                     Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InitialIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItemComboBox*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemComboBox* UGbxUILibrary::CreateComboBoxListItem(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, const TArray<class FText>& Items, int32 InitialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateComboBoxListItem");

	Params::GbxUILibrary_CreateComboBoxListItem Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.Items = std::move(Items);
	Parms.InitialIndex = InitialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateComboBoxListItemWithDelegates
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// TArray<class FText>                     Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InitialIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxListItem* Item)>ChangedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemComboBox*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemComboBox* UGbxUILibrary::CreateComboBoxListItemWithDelegates(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, const TArray<class FText>& Items, int32 InitialIndex, TDelegate<void(class UGbxListItem* Item)> ChangedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateComboBoxListItemWithDelegates");

	Params::GbxUILibrary_CreateComboBoxListItemWithDelegates Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.Items = std::move(Items);
	Parms.InitialIndex = InitialIndex;
	Parms.ChangedDelegate = ChangedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateDefaultListItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* UGbxUILibrary::CreateDefaultListItem(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateDefaultListItem");

	Params::GbxUILibrary_CreateDefaultListItem Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateDefaultListItemWithDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>ClickedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* UGbxUILibrary::CreateDefaultListItemWithDelegates(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateDefaultListItemWithDelegates");

	Params::GbxUILibrary_CreateDefaultListItemWithDelegates Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.ClickedDelegate = ClickedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateListItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxListItem>         ItemClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* UGbxUILibrary::CreateListItem(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, TSubclassOf<class UGbxListItem> ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateListItem");

	Params::GbxUILibrary_CreateListItem Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.ItemClass = ItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateListItemWithDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxListItem>         ItemClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>ClickedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* UGbxUILibrary::CreateListItemWithDelegates(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, TSubclassOf<class UGbxListItem> ItemClass, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateListItemWithDelegates");

	Params::GbxUILibrary_CreateListItemWithDelegates Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.ItemClass = ItemClass;
	Parms.ClickedDelegate = ClickedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateNumberListItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// float                                   InitialValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderMin                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderMax                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderStep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItemNumber*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemNumber* UGbxUILibrary::CreateNumberListItem(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, float InitialValue, float SliderMin, float SliderMax, float SliderStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateNumberListItem");

	Params::GbxUILibrary_CreateNumberListItem Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.InitialValue = InitialValue;
	Parms.SliderMin = SliderMin;
	Parms.SliderMax = SliderMax;
	Parms.SliderStep = SliderStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateNumberListItemWithDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// float                                   InitialValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderMin                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderMax                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderStep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxListItem* Item)>ChangedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemNumber*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemNumber* UGbxUILibrary::CreateNumberListItemWithDelegates(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, float InitialValue, float SliderMin, float SliderMax, float SliderStep, TDelegate<void(class UGbxListItem* Item)> ChangedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateNumberListItemWithDelegates");

	Params::GbxUILibrary_CreateNumberListItemWithDelegates Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.InitialValue = InitialValue;
	Parms.SliderMin = SliderMin;
	Parms.SliderMax = SliderMax;
	Parms.SliderStep = SliderStep;
	Parms.ChangedDelegate = ChangedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateTextListItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// class UGbxListItemText*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemText* UGbxUILibrary::CreateTextListItem(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateTextListItem");

	Params::GbxUILibrary_CreateTextListItem Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.CreateTextListItemWithDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IGbxList>        OwningList                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>ClickedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemText*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemText* UGbxUILibrary::CreateTextListItemWithDelegates(TScriptInterface<class IGbxList> OwningList, class APlayerController* OwningPlayer, const class FText& LabelText, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "CreateTextListItemWithDelegates");

	Params::GbxUILibrary_CreateTextListItemWithDelegates Parms{};

	Parms.OwningList = OwningList;
	Parms.OwningPlayer = OwningPlayer;
	Parms.LabelText = std::move(LabelText);
	Parms.ClickedDelegate = ClickedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.PlayFullScreenMovie
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGbxPlayerController*             GbxPC                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMediaSource*                     MediaSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayOnceAndDestroy                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxFullScreenMovie*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxFullScreenMovie* UGbxUILibrary::PlayFullScreenMovie(class AGbxPlayerController* GbxPC, class UMediaSource* MediaSource, bool bPlayOnceAndDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "PlayFullScreenMovie");

	Params::GbxUILibrary_PlayFullScreenMovie Parms{};

	Parms.GbxPC = GbxPC;
	Parms.MediaSource = MediaSource;
	Parms.bPlayOnceAndDestroy = bPlayOnceAndDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILibrary.SendTextToDebugHUD
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TextSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUILibrary::SendTextToDebugHUD(const class UObject* WorldContextObject, const class FText& Text, const struct FLinearColor& Color, int32 TextSize, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILibrary", "SendTextToDebugHUD");

	Params::GbxUILibrary_SendTextToDebugHUD Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Text = std::move(Text);
	Parms.Color = std::move(Color);
	Parms.TextSize = TextSize;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.Clear
// (Final, Native, Public, BlueprintCallable)

void UGbxCascadingList::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.OnItemClicked_Internal
// (Final, Native, Private)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCascadingList::OnItemClicked_Internal(class UGbxListItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "OnItemClicked_Internal");

	Params::GbxCascadingList_OnItemClicked_Internal Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.OnItemSelected_Internal
// (Final, Native, Private)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCascadingList::OnItemSelected_Internal(class UGbxListItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "OnItemSelected_Internal");

	Params::GbxCascadingList_OnItemSelected_Internal Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.OnShiftListsBack
// (Event, Public, BlueprintEvent)

void UGbxCascadingList::OnShiftListsBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "OnShiftListsBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxCascadingList.OnShiftListsForward
// (Event, Public, BlueprintEvent)

void UGbxCascadingList::OnShiftListsForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "OnShiftListsForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxCascadingList.Pop
// (Final, Native, Public, BlueprintCallable)

void UGbxCascadingList::Pop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "Pop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.PushItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxCascadingListItemData>Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxCascadingList::PushItems(const TArray<struct FGbxCascadingListItemData>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "PushItems");

	Params::GbxCascadingList_PushItems Parms{};

	Parms.Items = std::move(Items);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.SetActiveList
// (Final, Native, Private)
// Parameters:
// class UGbxGridListWidget*               List                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxCascadingList::SetActiveList(class UGbxGridListWidget* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "SetActiveList");

	Params::GbxCascadingList_SetActiveList Parms{};

	Parms.List = List;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxCascadingList.GetStackDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxCascadingList::GetStackDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "GetStackDepth");

	Params::GbxCascadingList_GetStackDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxCascadingList.HasItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxCascadingList::HasItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxCascadingList", "HasItems");

	Params::GbxCascadingList_HasItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxComboBoxDropdownMenu.DismissWithoutChanging
// (Final, Native, Public, BlueprintCallable)

void UGbxComboBoxDropdownMenu::DismissWithoutChanging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxComboBoxDropdownMenu", "DismissWithoutChanging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxComboBoxDropdownMenu.OnChoiceClicked
// (Final, Native, Public)
// Parameters:
// class UGbxListItem*                     ListItem                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxComboBoxDropdownMenu::OnChoiceClicked(class UGbxListItem* ListItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxComboBoxDropdownMenu", "OnChoiceClicked");

	Params::GbxComboBoxDropdownMenu_OnChoiceClicked Parms{};

	Parms.ListItem = ListItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxComboBox.OnComboBoxClicked
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxUserWidget*                   Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxComboBox::OnComboBoxClicked(class UGbxUserWidget* Widget, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxComboBox", "OnComboBoxClicked");

	Params::GbxComboBox_OnComboBoxClicked Parms{};

	Parms.Widget = Widget;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxComboBox.GetCurentChoiceReferenceIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxComboBox::GetCurentChoiceReferenceIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxComboBox", "GetCurentChoiceReferenceIndex");

	Params::GbxComboBox_GetCurentChoiceReferenceIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxDialogBox.Dismiss
// (Final, Native, Public, BlueprintCallable)

void UGbxDialogBox::Dismiss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "Dismiss");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDialogBox.OnChoiceClicked
// (Final, Native, Private)
// Parameters:
// class UGbxListItem*                     ClickedItem                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxDialogBox::OnChoiceClicked(class UGbxListItem* ClickedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "OnChoiceClicked");

	Params::GbxDialogBox_OnChoiceClicked Parms{};

	Parms.ClickedItem = ClickedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDialogBox.SetBodyText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bClearFormatArgs                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxDialogBox::SetBodyText(const class FText& NewText, bool bClearFormatArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "SetBodyText");

	Params::GbxDialogBox_SetBodyText Parms{};

	Parms.NewText = std::move(NewText);
	Parms.bClearFormatArgs = bClearFormatArgs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDialogBox.SetBodyTextFormatArg
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ArgName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReplacementText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxDialogBox::SetBodyTextFormatArg(const class FString& ArgName, const class FText& ReplacementText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "SetBodyTextFormatArg");

	Params::GbxDialogBox_SetBodyTextFormatArg Parms{};

	Parms.ArgName = std::move(ArgName);
	Parms.ReplacementText = std::move(ReplacementText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDialogBox.SetHeaderText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bClearFormatArgs                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxDialogBox::SetHeaderText(const class FText& NewText, bool bClearFormatArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "SetHeaderText");

	Params::GbxDialogBox_SetHeaderText Parms{};

	Parms.NewText = std::move(NewText);
	Parms.bClearFormatArgs = bClearFormatArgs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDialogBox.SetHeaderTextFormatArg
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ArgName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReplacementText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxDialogBox::SetHeaderTextFormatArg(const class FString& ArgName, const class FText& ReplacementText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "SetHeaderTextFormatArg");

	Params::GbxDialogBox_SetHeaderTextFormatArg Parms{};

	Parms.ArgName = std::move(ArgName);
	Parms.ReplacementText = std::move(ReplacementText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxDialogBox.SetupDialog
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGbxDialogBoxInfo                DialogBoxInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxDialogBox::SetupDialog(const struct FGbxDialogBoxInfo& DialogBoxInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "SetupDialog");

	Params::GbxDialogBox_SetupDialog Parms{};

	Parms.DialogBoxInfo = std::move(DialogBoxInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxDialogBox.UpdateText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NewHeaderText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             NewBodyText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxDialogBox::UpdateText(const class FText& NewHeaderText, const class FText& NewBodyText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDialogBox", "UpdateText");

	Params::GbxDialogBox_UpdateText Parms{};

	Parms.NewHeaderText = std::move(NewHeaderText);
	Parms.NewBodyText = std::move(NewBodyText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxGFxContextualMenu.OnContextualMenuItemClicked
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// class UGbxGFxButton*                    PressedButton                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxContextualMenu::OnContextualMenuItemClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxContextualMenu", "OnContextualMenuItemClicked");

	Params::GbxGFxContextualMenu_OnContextualMenuItemClicked Parms{};

	Parms.PressedButton = PressedButton;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxContextualMenu.OnSelectionChanged
// (Final, Native, Private, Const)
// Parameters:
// class UGbxGFxListCell*                  Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxContextualMenu::OnSelectionChanged(class UGbxGFxListCell* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxContextualMenu", "OnSelectionChanged");

	Params::GbxGFxContextualMenu_OnSelectionChanged Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxDragDropManager.OnDropButtonHovered
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    HoveredButton                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxDragDropManager::OnDropButtonHovered(class UGbxGFxButton* HoveredButton, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxDragDropManager", "OnDropButtonHovered");

	Params::GbxGFxDragDropManager_OnDropButtonHovered Parms{};

	Parms.HoveredButton = HoveredButton;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxDragDropManager.OnDropButtonUnhovered
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    UnhoveredButton                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxDragDropManager::OnDropButtonUnhovered(class UGbxGFxButton* UnhoveredButton, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxDragDropManager", "OnDropButtonUnhovered");

	Params::GbxGFxDragDropManager_OnDropButtonUnhovered Parms{};

	Parms.UnhoveredButton = UnhoveredButton;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxHintWidget.OnThisHintClicked
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxHintWidget::OnThisHintClicked(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxHintWidget", "OnThisHintClicked");

	Params::GbxGFxHintWidget_OnThisHintClicked Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxListItemComboBox.OnDropDownButtonClicked
// (Final, Native, Private)

void UGbxGFxListItemComboBox::OnDropDownButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxListItemComboBox", "OnDropDownButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxListItemComboBox.OnOwningListSelectionChanged
// (Final, Native, Private)
// Parameters:
// class UGbxGFxListCell*                  Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxListItemComboBox::OnOwningListSelectionChanged(class UGbxGFxListCell* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxListItemComboBox", "OnOwningListSelectionChanged");

	Params::GbxGFxListItemComboBox_OnOwningListSelectionChanged Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxListItemComboBox.OnSelectionUpdated
// (Final, Native, Private)
// Parameters:
// class UGbxGFxListCell*                  Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxListItemComboBox::OnSelectionUpdated(class UGbxGFxListCell* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxListItemComboBox", "OnSelectionUpdated");

	Params::GbxGFxListItemComboBox_OnSelectionUpdated Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxUI.GbxGFxMediaPlayer.GbxGFxMediaPlayerEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGbxGFxMediaPlayer::GbxGFxMediaPlayerEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "GbxGFxMediaPlayerEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxGFxMediaPlayer.OnMovieEndReached
// (Final, Native, Private)

void UGbxGFxMediaPlayer::OnMovieEndReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMovieEndReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMovieMediaClosed
// (Final, Native, Private)

void UGbxGFxMediaPlayer::OnMovieMediaClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMovieMediaClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMovieMediaOpened
// (Final, Native, Private)
// Parameters:
// class FString                           OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMediaPlayer::OnMovieMediaOpened(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMovieMediaOpened");

	Params::GbxGFxMediaPlayer_OnMovieMediaOpened Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMovieMediaOpenFailed
// (Final, Native, Private)
// Parameters:
// class FString                           FailedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxMediaPlayer::OnMovieMediaOpenFailed(const class FString& FailedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMovieMediaOpenFailed");

	Params::GbxGFxMediaPlayer_OnMovieMediaOpenFailed Parms{};

	Parms.FailedUrl = std::move(FailedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMoviePlaybackResumed
// (Final, Native, Private)

void UGbxGFxMediaPlayer::OnMoviePlaybackResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMoviePlaybackResumed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMoviePlaybackSuspended
// (Final, Native, Private)

void UGbxGFxMediaPlayer::OnMoviePlaybackSuspended()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMoviePlaybackSuspended");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMovieSeekCompleted
// (Final, Native, Private)

void UGbxGFxMediaPlayer::OnMovieSeekCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMovieSeekCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMediaPlayer.OnMovieTracksChanged
// (Final, Native, Private)

void UGbxGFxMediaPlayer::OnMovieTracksChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMediaPlayer", "OnMovieTracksChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxMenuSwitcherNavWidget.OnTabClicked
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxMenuSwitcherNavWidget::OnTabClicked(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxMenuSwitcherNavWidget", "OnTabClicked");

	Params::GbxGFxMenuSwitcherNavWidget_OnTabClicked Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxSlider.BeginLeftSlide
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxSlider::BeginLeftSlide(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxSlider", "BeginLeftSlide");

	Params::GbxGFxSlider_BeginLeftSlide Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxSlider.BeginRightSlide
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxSlider::BeginRightSlide(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxSlider", "BeginRightSlide");

	Params::GbxGFxSlider_BeginRightSlide Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxGFxSlider.EndSlide
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    BUTTON                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxGFxSlider::EndSlide(class UGbxGFxButton* BUTTON, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxSlider", "EndSlide");

	Params::GbxGFxSlider_EndSlide Parms{};

	Parms.BUTTON = BUTTON;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxUI.GbxGFxSlider.GbxGFxSliderUpdateEvent__DelegateSignature
// (Public, Delegate)
// Parameters:
// float                                   SliderPercent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGFxSlider::GbxGFxSliderUpdateEvent__DelegateSignature(float SliderPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGFxSlider", "GbxGFxSliderUpdateEvent__DelegateSignature");

	Params::GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature Parms{};

	Parms.SliderPercent = SliderPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxHintBarWidgetContainer.HintBarAppendHint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGbxHintInfo                     HintInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IGbxHintBarWidgetContainer::HintBarAppendHint(const struct FGbxHintInfo& HintInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintBarWidgetContainer", "HintBarAppendHint");

	Params::GbxHintBarWidgetContainer_HintBarAppendHint Parms{};

	Parms.HintInfo = std::move(HintInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxHintBarWidgetContainer.HintBarClearAllHints
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IGbxHintBarWidgetContainer::HintBarClearAllHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintBarWidgetContainer", "HintBarClearAllHints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxHintBarWidgetContainer.HintBarInitOwnerInfo
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGbxHintBar*                      HintBarOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             PlayerControllerContext                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxHintBarWidgetContainer::HintBarInitOwnerInfo(class UGbxHintBar* HintBarOwner, const class AGbxPlayerController* PlayerControllerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintBarWidgetContainer", "HintBarInitOwnerInfo");

	Params::GbxHintBarWidgetContainer_HintBarInitOwnerInfo Parms{};

	Parms.HintBarOwner = HintBarOwner;
	Parms.PlayerControllerContext = PlayerControllerContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxHintBarWidgetContainer.HintBarSetVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxHintBarWidgetContainer::HintBarSetVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintBarWidgetContainer", "HintBarSetVisible");

	Params::GbxHintBarWidgetContainer_HintBarSetVisible Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxHintBar.OnHintClicked
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InputAction                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHeld                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxHintBar::OnHintClicked(const class FName& InputAction, bool bHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintBar", "OnHintClicked");

	Params::GbxHintBar_OnHintClicked Parms{};

	Parms.InputAction = InputAction;
	Parms.bHeld = bHeld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxHintWidget.HintWidgetInitOwnerInfo
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGbxHintBar*                      HintBarOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             PlayerControllerContext                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxHintWidget::HintWidgetInitOwnerInfo(class UGbxHintBar* HintBarOwner, const class AGbxPlayerController* PlayerControllerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintWidget", "HintWidgetInitOwnerInfo");

	Params::GbxHintWidget_HintWidgetInitOwnerInfo Parms{};

	Parms.HintBarOwner = HintBarOwner;
	Parms.PlayerControllerContext = PlayerControllerContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxHintWidget.HintWidgetSetInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGbxHintInfo                     HintInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IGbxHintWidget::HintWidgetSetInfo(const struct FGbxHintInfo& HintInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintWidget", "HintWidgetSetInfo");

	Params::GbxHintWidget_HintWidgetSetInfo Parms{};

	Parms.HintInfo = std::move(HintInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxHintWidget.HintWidgetSetVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxHintWidget::HintWidgetSetVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxHintWidget", "HintWidgetSetVisible");

	Params::GbxHintWidget_HintWidgetSetVisible Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxList.InsertListItem
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxList::InsertListItem(class UGbxListItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "InsertListItem");

	Params::GbxList_InsertListItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.MoveSelectionDown
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxList::MoveSelectionDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "MoveSelectionDown");

	Params::GbxList_MoveSelectionDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.MoveSelectionLeft
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxList::MoveSelectionLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "MoveSelectionLeft");

	Params::GbxList_MoveSelectionLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.MoveSelectionRight
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxList::MoveSelectionRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "MoveSelectionRight");

	Params::GbxList_MoveSelectionRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.MoveSelectionUp
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxList::MoveSelectionUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "MoveSelectionUp");

	Params::GbxList_MoveSelectionUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.OnItemClicked
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxList::OnItemClicked(class UGbxListItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "OnItemClicked");

	Params::GbxList_OnItemClicked Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.RemoveAllListItems
// (Native, Public, BlueprintCallable)

void IGbxList::RemoveAllListItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "RemoveAllListItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.RemoveListItem
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxList::RemoveListItem(class UGbxListItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "RemoveListItem");

	Params::GbxList_RemoveListItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.SetItemClickedDelegate
// (Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(class UGbxListItem* ClickedItem)>InItemClickedDelegate                                  (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void IGbxList::SetItemClickedDelegate(TDelegate<void(class UGbxListItem* ClickedItem)> InItemClickedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "SetItemClickedDelegate");

	Params::GbxList_SetItemClickedDelegate Parms{};

	Parms.InItemClickedDelegate = InItemClickedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.SetSelectedIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSelection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bScrollIntoView                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnimateScroll                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxList::SetSelectedIndex(int32 NewSelection, bool bScrollIntoView, bool bAnimateScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "SetSelectedIndex");

	Params::GbxList_SetSelectedIndex Parms{};

	Parms.NewSelection = NewSelection;
	Parms.bScrollIntoView = bScrollIntoView;
	Parms.bAnimateScroll = bAnimateScroll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.SetSelectedItem
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGbxListItem*                     Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bScrollIntoView                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnimateScroll                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxList::SetSelectedItem(class UGbxListItem* Item, bool bScrollIntoView, bool bAnimateScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "SetSelectedItem");

	Params::GbxList_SetSelectedItem Parms{};

	Parms.Item = Item;
	Parms.bScrollIntoView = bScrollIntoView;
	Parms.bAnimateScroll = bAnimateScroll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.SetSelectionChangedDelegate
// (Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(class UGbxListItem* Item)>InSelectionChangedDelegate                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void IGbxList::SetSelectionChangedDelegate(TDelegate<void(class UGbxListItem* Item)> InSelectionChangedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "SetSelectionChangedDelegate");

	Params::GbxList_SetSelectionChangedDelegate Parms{};

	Parms.InSelectionChangedDelegate = InSelectionChangedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.TryToAcquireMenuFocus
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxList::TryToAcquireMenuFocus(bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "TryToAcquireMenuFocus");

	Params::GbxList_TryToAcquireMenuFocus Parms{};

	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxList.GetDefaultItemClass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxListItem>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxListItem> IGbxList::GetDefaultItemClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "GetDefaultItemClass");

	Params::GbxList_GetDefaultItemClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.GetItemAtIndex
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* IGbxList::GetItemAtIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "GetItemAtIndex");

	Params::GbxList_GetItemAtIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.GetListItemFactory
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxListItemFactory*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemFactory* IGbxList::GetListItemFactory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "GetListItemFactory");

	Params::GbxList_GetListItemFactory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.GetNumItemsInList
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IGbxList::GetNumItemsInList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "GetNumItemsInList");

	Params::GbxList_GetNumItemsInList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.GetSelectedIndex
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IGbxList::GetSelectedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "GetSelectedIndex");

	Params::GbxList_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.GetSelectedItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* IGbxList::GetSelectedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "GetSelectedItem");

	Params::GbxList_GetSelectedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.IsListEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxList::IsListEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "IsListEnabled");

	Params::GbxList_IsListEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxList.IsListFocused
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxList::IsListFocused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxList", "IsListFocused");

	Params::GbxList_IsListFocused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemBoolean.HandleFocusableWidgetPressed
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxListItemBoolean::HandleFocusableWidgetPressed(const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemBoolean", "HandleFocusableWidgetPressed");

	Params::GbxListItemBoolean_HandleFocusableWidgetPressed Parms{};

	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemBoolean.SetChecked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bChecked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxListItemBoolean::SetChecked(bool bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemBoolean", "SetChecked");

	Params::GbxListItemBoolean_SetChecked Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemBoolean.IsChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxListItemBoolean::IsChecked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemBoolean", "IsChecked");

	Params::GbxListItemBoolean_IsChecked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemComboBox.InitializeComboBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FText>                     Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InitialValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxListItemComboBox::InitializeComboBox(const TArray<class FText>& Items, const int32 InitialValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "InitializeComboBox");

	Params::GbxListItemComboBox_InitializeComboBox Parms{};

	Parms.Items = std::move(Items);
	Parms.InitialValue = InitialValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxUI.GbxListItemComboBox.ListItemComboBoxSelectionChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   NewSelectedIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxListItemComboBox::ListItemComboBoxSelectionChangedDelegate__DelegateSignature(int32 NewSelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "ListItemComboBoxSelectionChangedDelegate__DelegateSignature");

	Params::GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature Parms{};

	Parms.NewSelectedIndex = NewSelectedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxListItemComboBox.OnValueComboBoxChanged
// (Final, Native, Protected)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxListItemComboBox::OnValueComboBoxChanged(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "OnValueComboBoxChanged");

	Params::GbxListItemComboBox_OnValueComboBoxChanged Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemComboBox.SelectNextOption
// (Final, Native, Public, BlueprintCallable)

void UGbxListItemComboBox::SelectNextOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "SelectNextOption");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemComboBox.SelectPreviousOption
// (Final, Native, Public, BlueprintCallable)

void UGbxListItemComboBox::SelectPreviousOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "SelectPreviousOption");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemComboBox.SetSelectedOptionIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxListItemComboBox::SetSelectedOptionIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "SetSelectedOptionIndex");

	Params::GbxListItemComboBox_SetSelectedOptionIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemComboBox.GetSelectedOptionIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxListItemComboBox::GetSelectedOptionIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemComboBox", "GetSelectedOptionIndex");

	Params::GbxListItemComboBox_GetSelectedOptionIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemFactory.CreateItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IGbxList>        Parent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxListItem>         ItemClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* UGbxListItemFactory::CreateItem(class APlayerController* Owner, TScriptInterface<class IGbxList> Parent, TSubclassOf<class UGbxListItem> ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxListItemFactory", "CreateItem");

	Params::GbxListItemFactory_CreateItem Parms{};

	Parms.Owner = Owner;
	Parms.Parent = Parent;
	Parms.ItemClass = ItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemFactory.CreateItemWithDelegates
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IGbxList>        Parent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TSubclassOf<class UGbxListItem>         ItemClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>ClickedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItem*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItem* UGbxListItemFactory::CreateItemWithDelegates(class APlayerController* Owner, TScriptInterface<class IGbxList> Parent, TSubclassOf<class UGbxListItem> ItemClass, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxListItemFactory", "CreateItemWithDelegates");

	Params::GbxListItemFactory_CreateItemWithDelegates Parms{};

	Parms.Owner = Owner;
	Parms.Parent = Parent;
	Parms.ItemClass = ItemClass;
	Parms.ClickedDelegate = ClickedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemFactory.CreateBooleanItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IGbxList>        Parent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    InitialValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxListItem* Item)>ChangedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemBoolean*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemBoolean* UGbxListItemFactory::CreateBooleanItem(class APlayerController* Owner, TScriptInterface<class IGbxList> Parent, const class FText& LabelText, bool InitialValue, TDelegate<void(class UGbxListItem* Item)> ChangedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemFactory", "CreateBooleanItem");

	Params::GbxListItemFactory_CreateBooleanItem Parms{};

	Parms.Owner = Owner;
	Parms.Parent = Parent;
	Parms.LabelText = std::move(LabelText);
	Parms.InitialValue = InitialValue;
	Parms.ChangedDelegate = ChangedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemFactory.CreateComboBoxItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IGbxList>        Parent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// TArray<class FText>                     Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InitialIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxListItem* Item)>ChangedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemComboBox*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemComboBox* UGbxListItemFactory::CreateComboBoxItem(class APlayerController* Owner, TScriptInterface<class IGbxList> Parent, const class FText& LabelText, const TArray<class FText>& Items, int32 InitialIndex, TDelegate<void(class UGbxListItem* Item)> ChangedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemFactory", "CreateComboBoxItem");

	Params::GbxListItemFactory_CreateComboBoxItem Parms{};

	Parms.Owner = Owner;
	Parms.Parent = Parent;
	Parms.LabelText = std::move(LabelText);
	Parms.Items = std::move(Items);
	Parms.InitialIndex = InitialIndex;
	Parms.ChangedDelegate = ChangedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemFactory.CreateNumberItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IGbxList>        Parent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// float                                   InitialValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderMin                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderMax                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderStep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxListItem* Item)>ChangedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemNumber*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemNumber* UGbxListItemFactory::CreateNumberItem(class APlayerController* Owner, TScriptInterface<class IGbxList> Parent, const class FText& LabelText, float InitialValue, float SliderMin, float SliderMax, float SliderStep, TDelegate<void(class UGbxListItem* Item)> ChangedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemFactory", "CreateNumberItem");

	Params::GbxListItemFactory_CreateNumberItem Parms{};

	Parms.Owner = Owner;
	Parms.Parent = Parent;
	Parms.LabelText = std::move(LabelText);
	Parms.InitialValue = InitialValue;
	Parms.SliderMin = SliderMin;
	Parms.SliderMax = SliderMax;
	Parms.SliderStep = SliderStep;
	Parms.ChangedDelegate = ChangedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemFactory.CreateTextItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IGbxList>        Parent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class FText                             LabelText                                              (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>ClickedDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)>SelectedDelegate                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxListItemText*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxListItemText* UGbxListItemFactory::CreateTextItem(class APlayerController* Owner, TScriptInterface<class IGbxList> Parent, const class FText& LabelText, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate, TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemFactory", "CreateTextItem");

	Params::GbxListItemFactory_CreateTextItem Parms{};

	Parms.Owner = Owner;
	Parms.Parent = Parent;
	Parms.LabelText = std::move(LabelText);
	Parms.ClickedDelegate = ClickedDelegate;
	Parms.SelectedDelegate = SelectedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemNumber.DecrementSlider
// (Final, Native, Public, BlueprintCallable)

void UGbxListItemNumber::DecrementSlider()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemNumber", "DecrementSlider");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemNumber.GetCurrentValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxListItemNumber::GetCurrentValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemNumber", "GetCurrentValue");

	Params::GbxListItemNumber_GetCurrentValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxListItemNumber.IncrementSlider
// (Final, Native, Public, BlueprintCallable)

void UGbxListItemNumber::IncrementSlider()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemNumber", "IncrementSlider");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxListItemNumber.OnSliderValueChanged
// (Final, Native, Protected)
// Parameters:
// float                                   NewPosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxListItemNumber::OnSliderValueChanged(float NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxListItemNumber", "OnSliderValueChanged");

	Params::GbxListItemNumber_OnSliderValueChanged Parms{};

	Parms.NewPosition = NewPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.Clear
// (Final, Native, Public, BlueprintCallable)

void UGbxMenuStack::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.Draw
// (Final, Native, Public, BlueprintCallable)

void UGbxMenuStack::Draw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "Draw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.GetIndexOfMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Menu                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxMenuStack::GetIndexOfMenu(const class UObject* Menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "GetIndexOfMenu");

	Params::GbxMenuStack_GetIndexOfMenu Parms{};

	Parms.Menu = Menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.GetMenuAtIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxMenuStack::GetMenuAtIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "GetMenuAtIndex");

	Params::GbxMenuStack_GetMenuAtIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.GetTopMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxMenuStack::GetTopMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "GetTopMenu");

	Params::GbxMenuStack_GetTopMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.HandleRawInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             EVENTTYPE                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMenuStack::HandleRawInput(const struct FKey& Key, EInputEvent EVENTTYPE, int32 ControllerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "HandleRawInput");

	Params::GbxMenuStack_HandleRawInput Parms{};

	Parms.Key = std::move(Key);
	Parms.EVENTTYPE = EVENTTYPE;
	Parms.ControllerId = ControllerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.Pop
// (Final, Native, Public, BlueprintCallable)

void UGbxMenuStack::Pop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "Pop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.PopTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Menu                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMenuStack::PopTo(const class UObject* Menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "PopTo");

	Params::GbxMenuStack_PopTo Parms{};

	Parms.Menu = Menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.PopToSwitchTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Menu                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxMenuData*                     MenuData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxMenuStack::PopToSwitchTo(const class UObject* Menu, class UGbxMenuData* MenuData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "PopToSwitchTo");

	Params::GbxMenuStack_PopToSwitchTo Parms{};

	Parms.Menu = Menu;
	Parms.MenuData = MenuData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.Push
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxMenuData*                     MenuData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxMenuStack::Push(class UGbxMenuData* MenuData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "Push");

	Params::GbxMenuStack_Push Parms{};

	Parms.MenuData = MenuData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.SetBlockAllRawInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldBlock                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMenuStack::SetBlockAllRawInput(bool bShouldBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "SetBlockAllRawInput");

	Params::GbxMenuStack_SetBlockAllRawInput Parms{};

	Parms.bShouldBlock = bShouldBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.SetBlockingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldBlock                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMenuStack::SetBlockingMode(bool bShouldBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "SetBlockingMode");

	Params::GbxMenuStack_SetBlockingMode Parms{};

	Parms.bShouldBlock = bShouldBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.SwitchTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxMenuData*                     MenuData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxMenuStack::SwitchTo(class UGbxMenuData* MenuData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "SwitchTo");

	Params::GbxMenuStack_SwitchTo Parms{};

	Parms.MenuData = MenuData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.Tick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxMenuStack::Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "Tick");

	Params::GbxMenuStack_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxMenuStack.GetCurrentInputDevice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGbxMenuInputDevice                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxMenuInputDevice UGbxMenuStack::GetCurrentInputDevice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "GetCurrentInputDevice");

	Params::GbxMenuStack_GetCurrentInputDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxMenuStack.Num
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxMenuStack::Num() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxMenuStack", "Num");

	Params::GbxMenuStack_Num Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxProgressBar.EnteredPercentRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   RangeMin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RangeMax                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDecreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxProgressBar::EnteredPercentRange(float RangeMin, float RangeMax, float OldValue, float CurrentValue, bool bIncreasing, bool bDecreasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProgressBar", "EnteredPercentRange");

	Params::GbxProgressBar_EnteredPercentRange Parms{};

	Parms.RangeMin = RangeMin;
	Parms.RangeMax = RangeMax;
	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;
	Parms.bIncreasing = bIncreasing;
	Parms.bDecreasing = bDecreasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxProgressBar.PassedPercentThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDecreasing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxProgressBar::PassedPercentThreshold(float Threshold, float OldValue, float CurrentValue, bool bIncreasing, bool bDecreasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProgressBar", "PassedPercentThreshold");

	Params::GbxProgressBar_PassedPercentThreshold Parms{};

	Parms.Threshold = Threshold;
	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;
	Parms.bIncreasing = bIncreasing;
	Parms.bDecreasing = bDecreasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction GbxUI.GbxProgressBar.GbxProgressBarEvent__DelegateSignature
// (Public, Delegate)

void UGbxProgressBar::GbxProgressBarEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "GbxProgressBarEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction GbxUI.GbxProgressBar.GbxProgressBarRangeEvent__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// class FName                             RangeName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::GbxProgressBarRangeEvent__DelegateSignature(const class FName& RangeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "GbxProgressBarRangeEvent__DelegateSignature");

	Params::GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature Parms{};

	Parms.RangeName = RangeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxProgressBar.HandleEnterPercentRange
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             RangeName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::HandleEnterPercentRange(const class FName& RangeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "HandleEnterPercentRange");

	Params::GbxProgressBar_HandleEnterPercentRange Parms{};

	Parms.RangeName = RangeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxProgressBar.HandlePercentChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInterpolating                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxProgressBarInterpolator      ActiveInterpolator                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxProgressBar::HandlePercentChanged(float OldValue, float CurrentValue, bool bIsInterpolating, const struct FGbxProgressBarInterpolator& ActiveInterpolator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "HandlePercentChanged");

	Params::GbxProgressBar_HandlePercentChanged Parms{};

	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;
	Parms.bIsInterpolating = bIsInterpolating;
	Parms.ActiveInterpolator = std::move(ActiveInterpolator);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxProgressBar.HandleShowDeltaEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          Effect                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::HandleShowDeltaEffect(class UWidget* Effect, float OldValue, float CurrentValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "HandleShowDeltaEffect");

	Params::GbxProgressBar_HandleShowDeltaEffect Parms{};

	Parms.Effect = Effect;
	Parms.OldValue = OldValue;
	Parms.CurrentValue = CurrentValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUI.GbxProgressBar.InterpolateToPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::InterpolateToPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "InterpolateToPercent");

	Params::GbxProgressBar_InterpolateToPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.InterpolateToPercentWithInterpolator
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxProgressBarInterpolator      Interpolator                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxProgressBar::InterpolateToPercentWithInterpolator(float InPercent, const struct FGbxProgressBarInterpolator& Interpolator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "InterpolateToPercentWithInterpolator");

	Params::GbxProgressBar_InterpolateToPercentWithInterpolator Parms{};

	Parms.InPercent = InPercent;
	Parms.Interpolator = std::move(Interpolator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.SetCurrentValueText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxProgressBar::SetCurrentValueText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "SetCurrentValueText");

	Params::GbxProgressBar_SetCurrentValueText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.SetFillColorAndOpacity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InColor                                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::SetFillColorAndOpacity(const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "SetFillColorAndOpacity");

	Params::GbxProgressBar_SetFillColorAndOpacity Parms{};

	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.SetMaxValueText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxProgressBar::SetMaxValueText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "SetMaxValueText");

	Params::GbxProgressBar_SetMaxValueText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.SetPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::SetPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "SetPercent");

	Params::GbxProgressBar_SetPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.SetShear
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InShear                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProgressBar::SetShear(float InShear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "SetShear");

	Params::GbxProgressBar_SetShear Parms{};

	Parms.InShear = InShear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxProgressBar.GetPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxProgressBar::GetPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "GetPercent");

	Params::GbxProgressBar_GetPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxProgressBar.GetShear
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxProgressBar::GetShear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "GetShear");

	Params::GbxProgressBar_GetShear Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxProgressBar.IsInterpolating
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxProgressBar::IsInterpolating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxProgressBar", "IsInterpolating");

	Params::GbxProgressBar_IsInterpolating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxSpinner.SpinLeft
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    PressedButton                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxSpinner::SpinLeft(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSpinner", "SpinLeft");

	Params::GbxSpinner_SpinLeft Parms{};

	Parms.PressedButton = PressedButton;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction GbxUI.GbxSpinner.SpinnerValueUpdatedEvent__DelegateSignature
// (Public, Delegate)

void UGbxSpinner::SpinnerValueUpdatedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSpinner", "SpinnerValueUpdatedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUI.GbxSpinner.SpinRight
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UGbxGFxButton*                    PressedButton                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxMenuInputEvent               InputInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxSpinner::SpinRight(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxSpinner", "SpinRight");

	Params::GbxSpinner_SpinRight Parms{};

	Parms.PressedButton = PressedButton;
	Parms.InputInfo = std::move(InputInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxTextField.OnScrollBarPositionUpdated
// (Final, Native, Public)
// Parameters:
// float                                   SliderPercentage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxTextField::OnScrollBarPositionUpdated(float SliderPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxTextField", "OnScrollBarPositionUpdated");

	Params::GbxTextField_OnScrollBarPositionUpdated Parms{};

	Parms.SliderPercentage = SliderPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxUILocalization.FKeyToGFxHTMLText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionToTextType                    GlyphType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GlyphHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::FKeyToGFxHTMLText(const struct FKey& Key, class AGbxPlayerController* Pc, EGbxActionToTextType GlyphType, float GlyphHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "FKeyToGFxHTMLText");

	Params::GbxUILocalization_FKeyToGFxHTMLText Parms{};

	Parms.Key = std::move(Key);
	Parms.Pc = Pc;
	Parms.GlyphType = GlyphType;
	Parms.GlyphHeight = GlyphHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.InputActionToGFxHTMLText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionToTextType                    GlyphType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GlyphHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VSpace                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::InputActionToGFxHTMLText(const class FName ActionName, class AGbxPlayerController* Pc, EGbxActionToTextType GlyphType, float GlyphHeight, int32 VSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "InputActionToGFxHTMLText");

	Params::GbxUILocalization_InputActionToGFxHTMLText Parms{};

	Parms.ActionName = ActionName;
	Parms.Pc = Pc;
	Parms.GlyphType = GlyphType;
	Parms.GlyphHeight = GlyphHeight;
	Parms.VSpace = VSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.InputActionToGlyph
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionToTextType                    GlyphType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UGbxUILocalization::InputActionToGlyph(const class FName ActionName, class AGbxPlayerController* Pc, EGbxActionToTextType GlyphType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "InputActionToGlyph");

	Params::GbxUILocalization_InputActionToGlyph Parms{};

	Parms.ActionName = ActionName;
	Parms.Pc = Pc;
	Parms.GlyphType = GlyphType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.InputActionToRichText
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionToTextType                    GlyphType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        GlyphSize                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::InputActionToRichText(const class FName ActionName, class AGbxPlayerController* Pc, EGbxActionToTextType GlyphType, const struct FVector2D& GlyphSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "InputActionToRichText");

	Params::GbxUILocalization_InputActionToRichText Parms{};

	Parms.ActionName = ActionName;
	Parms.Pc = Pc;
	Parms.GlyphType = GlyphType;
	Parms.GlyphSize = std::move(GlyphSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.InputActionToText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionToTextType                    GlyphType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::InputActionToText(const class FName ActionName, class AGbxPlayerController* Pc, EGbxActionToTextType GlyphType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "InputActionToText");

	Params::GbxUILocalization_InputActionToText Parms{};

	Parms.ActionName = ActionName;
	Parms.Pc = Pc;
	Parms.GlyphType = GlyphType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.IsInputActionGlyphAvailable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxActionToTextType                    GlyphType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUILocalization::IsInputActionGlyphAvailable(const class FName ActionName, class AGbxPlayerController* Pc, EGbxActionToTextType GlyphType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "IsInputActionGlyphAvailable");

	Params::GbxUILocalization_IsInputActionGlyphAvailable Parms{};

	Parms.ActionName = ActionName;
	Parms.Pc = Pc;
	Parms.GlyphType = GlyphType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.IsPlatformGlyphAvailable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUILocalization::IsPlatformGlyphAvailable(const class FName Platform, class AGbxPlayerController* Pc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "IsPlatformGlyphAvailable");

	Params::GbxUILocalization_IsPlatformGlyphAvailable Parms{};

	Parms.Platform = Platform;
	Parms.Pc = Pc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.PlatformToGFxHTMLText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GlyphHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VSpace                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::PlatformToGFxHTMLText(const class FName Platform, class AGbxPlayerController* Pc, float GlyphHeight, int32 VSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "PlatformToGFxHTMLText");

	Params::GbxUILocalization_PlatformToGFxHTMLText Parms{};

	Parms.Platform = Platform;
	Parms.Pc = Pc;
	Parms.GlyphHeight = GlyphHeight;
	Parms.VSpace = VSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.PlatformToGlyph
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UGbxUILocalization::PlatformToGlyph(const class FName Platform, class AGbxPlayerController* Pc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "PlatformToGlyph");

	Params::GbxUILocalization_PlatformToGlyph Parms{};

	Parms.Platform = Platform;
	Parms.Pc = Pc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.PlatformToRichText
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        GlyphSize                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::PlatformToRichText(const class FName Platform, class AGbxPlayerController* Pc, const struct FVector2D& GlyphSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "PlatformToRichText");

	Params::GbxUILocalization_PlatformToRichText Parms{};

	Parms.Platform = Platform;
	Parms.Pc = Pc;
	Parms.GlyphSize = std::move(GlyphSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUILocalization.PlatformToText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Platform                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             Pc                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxUILocalization::PlatformToText(const class FName Platform, class AGbxPlayerController* Pc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUILocalization", "PlatformToText");

	Params::GbxUILocalization_PlatformToText Parms{};

	Parms.Platform = Platform;
	Parms.Pc = Pc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxUISpinnerWidget.MoveToNumber
// (Final, Native, Public)
// Parameters:
// uint8                                   NewNumber                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxSpinnerWidgetGoToMethod             GoToMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxUISpinnerWidget::MoveToNumber(uint8 NewNumber, EGbxSpinnerWidgetGoToMethod GoToMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUISpinnerWidget", "MoveToNumber");

	Params::GbxUISpinnerWidget_MoveToNumber Parms{};

	Parms.NewNumber = NewNumber;
	Parms.GoToMethod = GoToMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.GbxWidgetComponent.SetDistanceAlphaBorder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBorder*                          NewDistanceAlphaBorder                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWidgetComponent::SetDistanceAlphaBorder(class UBorder* NewDistanceAlphaBorder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWidgetComponent", "SetDistanceAlphaBorder");

	Params::GbxWidgetComponent_SetDistanceAlphaBorder Parms{};

	Parms.NewDistanceAlphaBorder = NewDistanceAlphaBorder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxWidgetComponent.SetDistanceAlphaCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      NewDistanceAlphaCurve                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWidgetComponent::SetDistanceAlphaCurve(class UCurveFloat* NewDistanceAlphaCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWidgetComponent", "SetDistanceAlphaCurve");

	Params::GbxWidgetComponent_SetDistanceAlphaCurve Parms{};

	Parms.NewDistanceAlphaCurve = NewDistanceAlphaCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxWidgetComponent.SetDistanceScaleCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      NewDistanceScaleCurve                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWidgetComponent::SetDistanceScaleCurve(class UCurveFloat* NewDistanceScaleCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWidgetComponent", "SetDistanceScaleCurve");

	Params::GbxWidgetComponent_SetDistanceScaleCurve Parms{};

	Parms.NewDistanceScaleCurve = NewDistanceScaleCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxWidgetComponent.Setup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          NewWidgetClass                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGbxPlayerController*             NewTrackedPlayer                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ParentComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetSpace                            WidgetSpace                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewLayerZOrder                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CollisionProfile                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWidgetComponent::Setup(const TSubclassOf<class UUserWidget>& NewWidgetClass, const class AGbxPlayerController* NewTrackedPlayer, class USceneComponent* ParentComponent, EWidgetSpace WidgetSpace, int32 NewLayerZOrder, class FName CollisionProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWidgetComponent", "Setup");

	Params::GbxWidgetComponent_Setup Parms{};

	Parms.NewWidgetClass = NewWidgetClass;
	Parms.NewTrackedPlayer = NewTrackedPlayer;
	Parms.ParentComponent = ParentComponent;
	Parms.WidgetSpace = WidgetSpace;
	Parms.NewLayerZOrder = NewLayerZOrder;
	Parms.CollisionProfile = CollisionProfile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.GbxWorldSpaceProxyWidget.GetWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxWorldSpaceProxyWidget::GetWorldLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWorldSpaceProxyWidget", "GetWorldLocation");

	Params::GbxWorldSpaceProxyWidget_GetWorldLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUI.InWorldDamageNumber.ImpulseAnimationCompleted
// (Final, Native, Protected)
// Parameters:
// class UUserWidget*                      AssociatedWidget                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInWorldDamageNumber::ImpulseAnimationCompleted(class UUserWidget* AssociatedWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InWorldDamageNumber", "ImpulseAnimationCompleted");

	Params::InWorldDamageNumber_ImpulseAnimationCompleted Parms{};

	Parms.AssociatedWidget = AssociatedWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUI.InWorldDamageNumber.OnWentOffscreen
// (Final, Native, Public)

void UInWorldDamageNumber::OnWentOffscreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InWorldDamageNumber", "OnWentOffscreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

