#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_NogBadass_DroneBomb

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_NogBadass_DroneBomb.Proj_NogBadass_DroneBomb_C
// 0x0118 (0x07F8 - 0x06E0)
class AProj_NogBadass_DroneBomb_C final : public AOakAIBalancedProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E0(0x0008)(Transient, DuplicateTransient)
	class UOakHitRegionComponent*                 OakHitRegion;                                      // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakDamageComponent*                    OakDamage;                                         // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   WwiseAudio;                                        // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxProjectileMovementComponent*        GbxProjectileMovement;                             // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Dronebomb;                                      // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MyTarget;                                          // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         BounceCount;                                       // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentHeight;                                     // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistThreshold;                                     // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLoc;                                       // 0x0734(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectionChangeDelay;                              // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOakElementalType                             CurrentElement;                                    // 0x0744(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_745[0x3];                                      // 0x0745(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EOakElementalType, class UParticleSystem*> ElementalExplosionFXLookup;                        // 0x0748(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<EOakElementalType, struct FVector>       ElementalColorationLookup;                         // 0x0798(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                 CurrentDamageType;                                 // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAngle;                                        // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Proj_NogBadass_DroneBomb(int32 EntryPoint);
	void InitializeElement(EOakElementalType ElementType);
	void NogBadass_Projectiles_BombLaunch(class AActor* MyTarget_0, float OptionalYOffset);
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_Proj_NogBadass_DroneBomb(class UDamageComponent* DamageReceiver, class UDamageCauserComponent* DamageCauser);
	void QueueDirectionChange(bool WithRethrow);
	void DirectionChange(float Multiplier);
	void ReceiveBeginPlay();
	void OnHitEnemy(const struct FHitResult& Hit);
	void OnBounce(const struct FHitResult& Hit, const struct FVector& ImpactVelocity);
	void OnExplode();
	void BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileStopDelegate__DelegateSignature_Proj_NogBadass_DroneBomb(const struct FHitResult& ImpactResult);
	void NogBadass_Projectiles_LaserWireSetChild(class AActor* MyChild);
	void UserConstructionScript();
	void GetDistanceBetweenVectors(const struct FVector& Vector1, const struct FVector& Vector2, float* Distance);
	void NogBadass_Projectiles_GetHomingTargetLocation(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_NogBadass_DroneBomb_C">();
	}
	static class AProj_NogBadass_DroneBomb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_NogBadass_DroneBomb_C>();
	}
};
static_assert(alignof(AProj_NogBadass_DroneBomb_C) == 0x000008, "Wrong alignment on AProj_NogBadass_DroneBomb_C");
static_assert(sizeof(AProj_NogBadass_DroneBomb_C) == 0x0007F8, "Wrong size on AProj_NogBadass_DroneBomb_C");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, UberGraphFrame) == 0x0006E0, "Member 'AProj_NogBadass_DroneBomb_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, OakHitRegion) == 0x0006E8, "Member 'AProj_NogBadass_DroneBomb_C::OakHitRegion' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, OakDamage) == 0x0006F0, "Member 'AProj_NogBadass_DroneBomb_C::OakDamage' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, WwiseAudio) == 0x0006F8, "Member 'AProj_NogBadass_DroneBomb_C::WwiseAudio' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, RotatingMovement) == 0x000700, "Member 'AProj_NogBadass_DroneBomb_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, GbxProjectileMovement) == 0x000708, "Member 'AProj_NogBadass_DroneBomb_C::GbxProjectileMovement' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, PS_Dronebomb) == 0x000710, "Member 'AProj_NogBadass_DroneBomb_C::PS_Dronebomb' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, Sphere) == 0x000718, "Member 'AProj_NogBadass_DroneBomb_C::Sphere' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, MyTarget) == 0x000720, "Member 'AProj_NogBadass_DroneBomb_C::MyTarget' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, BounceCount) == 0x000728, "Member 'AProj_NogBadass_DroneBomb_C::BounceCount' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, CurrentHeight) == 0x00072C, "Member 'AProj_NogBadass_DroneBomb_C::CurrentHeight' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, DistThreshold) == 0x000730, "Member 'AProj_NogBadass_DroneBomb_C::DistThreshold' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, PreviousLoc) == 0x000734, "Member 'AProj_NogBadass_DroneBomb_C::PreviousLoc' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, DirectionChangeDelay) == 0x000740, "Member 'AProj_NogBadass_DroneBomb_C::DirectionChangeDelay' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, CurrentElement) == 0x000744, "Member 'AProj_NogBadass_DroneBomb_C::CurrentElement' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, ElementalExplosionFXLookup) == 0x000748, "Member 'AProj_NogBadass_DroneBomb_C::ElementalExplosionFXLookup' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, ElementalColorationLookup) == 0x000798, "Member 'AProj_NogBadass_DroneBomb_C::ElementalColorationLookup' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, CurrentDamageType) == 0x0007E8, "Member 'AProj_NogBadass_DroneBomb_C::CurrentDamageType' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, ThrowSpeed) == 0x0007F0, "Member 'AProj_NogBadass_DroneBomb_C::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AProj_NogBadass_DroneBomb_C, ThrowAngle) == 0x0007F4, "Member 'AProj_NogBadass_DroneBomb_C::ThrowAngle' has a wrong offset!");

}

