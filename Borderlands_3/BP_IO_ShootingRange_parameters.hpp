#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IO_ShootingRange

#include "Basic.hpp"

#include "Struct_ShootingRangeRules_structs.hpp"
#include "Enum_ShootingRangeState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WwiseAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.TurnOffScoreboard
// 0x0020 (0x0020 - 0x0000)
struct BP_IO_ShootingRange_C_TurnOffScoreboard final
{
public:
	class AIO_MissionImageMonitor_C*              K2Node_DynamicCast_AsIO_Mission_Image_Monitor;     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIO_MissionImageMonitor_C*              K2Node_DynamicCast_AsIO_Mission_Image_Monitor1;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_TurnOffScoreboard) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_TurnOffScoreboard");
static_assert(sizeof(BP_IO_ShootingRange_C_TurnOffScoreboard) == 0x000020, "Wrong size on BP_IO_ShootingRange_C_TurnOffScoreboard");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOffScoreboard, K2Node_DynamicCast_AsIO_Mission_Image_Monitor) == 0x000000, "Member 'BP_IO_ShootingRange_C_TurnOffScoreboard::K2Node_DynamicCast_AsIO_Mission_Image_Monitor' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOffScoreboard, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_IO_ShootingRange_C_TurnOffScoreboard::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOffScoreboard, K2Node_DynamicCast_AsIO_Mission_Image_Monitor1) == 0x000010, "Member 'BP_IO_ShootingRange_C_TurnOffScoreboard::K2Node_DynamicCast_AsIO_Mission_Image_Monitor1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOffScoreboard, K2Node_DynamicCast_bSuccess1) == 0x000018, "Member 'BP_IO_ShootingRange_C_TurnOffScoreboard::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.TurnOnScoreboard
// 0x0050 (0x0050 - 0x0000)
struct BP_IO_ShootingRange_C_TurnOnScoreboard final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value;                           // 0x000C(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value1;                          // 0x0018(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AIO_MissionImageMonitor_C*              K2Node_DynamicCast_AsIO_Mission_Image_Monitor;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIO_MissionImageMonitor_C*              K2Node_DynamicCast_AsIO_Mission_Image_Monitor1;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select1_Default;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_TurnOnScoreboard) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_TurnOnScoreboard");
static_assert(sizeof(BP_IO_ShootingRange_C_TurnOnScoreboard) == 0x000050, "Wrong size on BP_IO_ShootingRange_C_TurnOnScoreboard");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, Temp_bool_Variable) == 0x000000, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, Temp_float_Variable) == 0x000004, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, Temp_int_Variable) == 0x000008, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, CallFunc_Map_Find_Value) == 0x00000C, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, CallFunc_Map_Find_ReturnValue) == 0x000014, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, CallFunc_Map_Find_Value1) == 0x000018, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::CallFunc_Map_Find_Value1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, CallFunc_Map_Find_ReturnValue1) == 0x000020, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::CallFunc_Map_Find_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, K2Node_Select_Default) == 0x000024, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, K2Node_DynamicCast_AsIO_Mission_Image_Monitor) == 0x000028, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::K2Node_DynamicCast_AsIO_Mission_Image_Monitor' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, K2Node_DynamicCast_AsIO_Mission_Image_Monitor1) == 0x000038, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::K2Node_DynamicCast_AsIO_Mission_Image_Monitor1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, Temp_bool_Variable1) == 0x000041, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, K2Node_Select1_Default) == 0x000044, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_TurnOnScoreboard, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000048, "Member 'BP_IO_ShootingRange_C_TurnOnScoreboard::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.ShootingRange_Stop
// 0x0018 (0x0018 - 0x0000)
struct BP_IO_ShootingRange_C_ShootingRange_Stop final
{
public:
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value;                           // 0x0000(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_ShootingRange_Stop) == 0x000004, "Wrong alignment on BP_IO_ShootingRange_C_ShootingRange_Stop");
static_assert(sizeof(BP_IO_ShootingRange_C_ShootingRange_Stop) == 0x000018, "Wrong size on BP_IO_ShootingRange_C_ShootingRange_Stop");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, CallFunc_Map_Find_Value) == 0x000000, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000009, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, Temp_bool_Variable) == 0x00000A, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, Temp_int_Variable) == 0x00000C, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, K2Node_Select_Default) == 0x000010, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Stop, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_IO_ShootingRange_C_ShootingRange_Stop::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.ShootingRange_Start
// 0x0002 (0x0002 - 0x0000)
struct BP_IO_ShootingRange_C_ShootingRange_Start final
{
public:
	Enum_ShootingRangeState                       Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_ShootingRange_Start) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C_ShootingRange_Start");
static_assert(sizeof(BP_IO_ShootingRange_C_ShootingRange_Start) == 0x000002, "Wrong size on BP_IO_ShootingRange_C_ShootingRange_Start");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Start, Difficulty) == 0x000000, "Member 'BP_IO_ShootingRange_C_ShootingRange_Start::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Start, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'BP_IO_ShootingRange_C_ShootingRange_Start::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Presentation_UpdateScore
// 0x0020 (0x0020 - 0x0000)
struct BP_IO_ShootingRange_C_Presentation_UpdateScore final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_Presentation_UpdateScore) == 0x000004, "Wrong alignment on BP_IO_ShootingRange_C_Presentation_UpdateScore");
static_assert(sizeof(BP_IO_ShootingRange_C_Presentation_UpdateScore) == 0x000020, "Wrong size on BP_IO_ShootingRange_C_Presentation_UpdateScore");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, Temp_int_Variable) == 0x000000, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, Temp_bool_Variable) == 0x000004, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, K2Node_Select_Default) == 0x000014, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateScore, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x00001C, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateScore::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Presentation_UpdateTimer
// 0x0010 (0x0010 - 0x0000)
struct BP_IO_ShootingRange_C_Presentation_UpdateTimer final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_Presentation_UpdateTimer) == 0x000004, "Wrong alignment on BP_IO_ShootingRange_C_Presentation_UpdateTimer");
static_assert(sizeof(BP_IO_ShootingRange_C_Presentation_UpdateTimer) == 0x000010, "Wrong size on BP_IO_ShootingRange_C_Presentation_UpdateTimer");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateTimer, TimeRemaining) == 0x000000, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateTimer::TimeRemaining' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateTimer, CallFunc_FTrunc_ReturnValue) == 0x000004, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateTimer::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateTimer, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateTimer::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_UpdateTimer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_IO_ShootingRange_C_Presentation_UpdateTimer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Target_Start
// 0x0050 (0x0050 - 0x0000)
struct BP_IO_ShootingRange_C_Target_Start final
{
public:
	class ABP_IO_Fidget_C*                        Fidget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_IO_Fidget_C*                        MyFidget;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_IO_Fidget_C* Fidget)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_IO_Fidget_C* Fidget)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_Target_Start) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_Target_Start");
static_assert(sizeof(BP_IO_ShootingRange_C_Target_Start) == 0x000050, "Wrong size on BP_IO_ShootingRange_C_Target_Start");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, Fidget) == 0x000000, "Member 'BP_IO_ShootingRange_C_Target_Start::Fidget' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, MyFidget) == 0x000008, "Member 'BP_IO_ShootingRange_C_Target_Start::MyFidget' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_IO_ShootingRange_C_Target_Start::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, CallFunc_Array_Add_ReturnValue) == 0x000014, "Member 'BP_IO_ShootingRange_C_Target_Start::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, CallFunc_Array_Contains_ReturnValue) == 0x000018, "Member 'BP_IO_ShootingRange_C_Target_Start::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_IO_ShootingRange_C_Target_Start::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_IO_ShootingRange_C_Target_Start::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, K2Node_CreateDelegate_OutputDelegate1) == 0x000038, "Member 'BP_IO_ShootingRange_C_Target_Start::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Start, CallFunc_Array_RemoveItem_ReturnValue) == 0x000048, "Member 'BP_IO_ShootingRange_C_Target_Start::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Target_Stop
// 0x0040 (0x0040 - 0x0000)
struct BP_IO_ShootingRange_C_Target_Stop final
{
public:
	class ABP_IO_Fidget_C*                        Fidget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_IO_Fidget_C*                        MyFidget;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_IO_Fidget_C* Fidget)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_IO_Fidget_C* Fidget)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_Target_Stop) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_Target_Stop");
static_assert(sizeof(BP_IO_ShootingRange_C_Target_Stop) == 0x000040, "Wrong size on BP_IO_ShootingRange_C_Target_Stop");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, Fidget) == 0x000000, "Member 'BP_IO_ShootingRange_C_Target_Stop::Fidget' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, MyFidget) == 0x000008, "Member 'BP_IO_ShootingRange_C_Target_Stop::MyFidget' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, CallFunc_Array_RemoveItem_ReturnValue) == 0x000010, "Member 'BP_IO_ShootingRange_C_Target_Stop::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, CallFunc_Array_Contains_ReturnValue) == 0x000011, "Member 'BP_IO_ShootingRange_C_Target_Stop::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_IO_ShootingRange_C_Target_Stop::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, CallFunc_Array_AddUnique_ReturnValue) == 0x000028, "Member 'BP_IO_ShootingRange_C_Target_Stop::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Target_Stop, K2Node_CreateDelegate_OutputDelegate1) == 0x000030, "Member 'BP_IO_ShootingRange_C_Target_Stop::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.UserConstructionScript
// 0x0030 (0x0030 - 0x0000)
struct BP_IO_ShootingRange_C_UserConstructionScript final
{
public:
	class AIO_MissionImageMonitor_C*              K2Node_DynamicCast_AsIO_Mission_Image_Monitor;     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIO_MissionImageMonitor_C*              K2Node_DynamicCast_AsIO_Mission_Image_Monitor1;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Switch_Parent_V1_C*              K2Node_DynamicCast_AsBP_IO_Switch_Parent_V1;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_UserConstructionScript");
static_assert(sizeof(BP_IO_ShootingRange_C_UserConstructionScript) == 0x000030, "Wrong size on BP_IO_ShootingRange_C_UserConstructionScript");
static_assert(offsetof(BP_IO_ShootingRange_C_UserConstructionScript, K2Node_DynamicCast_AsIO_Mission_Image_Monitor) == 0x000000, "Member 'BP_IO_ShootingRange_C_UserConstructionScript::K2Node_DynamicCast_AsIO_Mission_Image_Monitor' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_IO_ShootingRange_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_UserConstructionScript, K2Node_DynamicCast_AsIO_Mission_Image_Monitor1) == 0x000010, "Member 'BP_IO_ShootingRange_C_UserConstructionScript::K2Node_DynamicCast_AsIO_Mission_Image_Monitor1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_UserConstructionScript, K2Node_DynamicCast_bSuccess1) == 0x000018, "Member 'BP_IO_ShootingRange_C_UserConstructionScript::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_UserConstructionScript, K2Node_DynamicCast_AsBP_IO_Switch_Parent_V1) == 0x000020, "Member 'BP_IO_ShootingRange_C_UserConstructionScript::K2Node_DynamicCast_AsBP_IO_Switch_Parent_V1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_UserConstructionScript, K2Node_DynamicCast_bSuccess2) == 0x000028, "Member 'BP_IO_ShootingRange_C_UserConstructionScript::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.ShotTarget_Hit
// 0x0008 (0x0008 - 0x0000)
struct BP_IO_ShootingRange_C_ShotTarget_Hit final
{
public:
	class ABP_IO_Fidget_C*                        Fidget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_ShotTarget_Hit) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_ShotTarget_Hit");
static_assert(sizeof(BP_IO_ShootingRange_C_ShotTarget_Hit) == 0x000008, "Wrong size on BP_IO_ShootingRange_C_ShotTarget_Hit");
static_assert(offsetof(BP_IO_ShootingRange_C_ShotTarget_Hit, Fidget) == 0x000000, "Member 'BP_IO_ShootingRange_C_ShotTarget_Hit::Fidget' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.NextTarget
// 0x0004 (0x0004 - 0x0000)
struct BP_IO_ShootingRange_C_NextTarget final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_NextTarget) == 0x000004, "Wrong alignment on BP_IO_ShootingRange_C_NextTarget");
static_assert(sizeof(BP_IO_ShootingRange_C_NextTarget) == 0x000004, "Wrong size on BP_IO_ShootingRange_C_NextTarget");
static_assert(offsetof(BP_IO_ShootingRange_C_NextTarget, Delay) == 0x000000, "Member 'BP_IO_ShootingRange_C_NextTarget::Delay' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.TargetStopped
// 0x0008 (0x0008 - 0x0000)
struct BP_IO_ShootingRange_C_TargetStopped final
{
public:
	class ABP_IO_Fidget_C*                        Fidget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_TargetStopped) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_TargetStopped");
static_assert(sizeof(BP_IO_ShootingRange_C_TargetStopped) == 0x000008, "Wrong size on BP_IO_ShootingRange_C_TargetStopped");
static_assert(offsetof(BP_IO_ShootingRange_C_TargetStopped, Fidget) == 0x000000, "Member 'BP_IO_ShootingRange_C_TargetStopped::Fidget' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Button_StartNormal
// 0x0010 (0x0010 - 0x0000)
struct BP_IO_ShootingRange_C_Button_StartNormal final
{
public:
	class AController*                            UserController;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    UsedComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_Button_StartNormal) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_Button_StartNormal");
static_assert(sizeof(BP_IO_ShootingRange_C_Button_StartNormal) == 0x000010, "Wrong size on BP_IO_ShootingRange_C_Button_StartNormal");
static_assert(offsetof(BP_IO_ShootingRange_C_Button_StartNormal, UserController) == 0x000000, "Member 'BP_IO_ShootingRange_C_Button_StartNormal::UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Button_StartNormal, UsedComponent) == 0x000008, "Member 'BP_IO_ShootingRange_C_Button_StartNormal::UsedComponent' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Button_StartHard
// 0x0010 (0x0010 - 0x0000)
struct BP_IO_ShootingRange_C_Button_StartHard final
{
public:
	class AController*                            UserController;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    UsedComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_Button_StartHard) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_Button_StartHard");
static_assert(sizeof(BP_IO_ShootingRange_C_Button_StartHard) == 0x000010, "Wrong size on BP_IO_ShootingRange_C_Button_StartHard");
static_assert(offsetof(BP_IO_ShootingRange_C_Button_StartHard, UserController) == 0x000000, "Member 'BP_IO_ShootingRange_C_Button_StartHard::UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_Button_StartHard, UsedComponent) == 0x000008, "Member 'BP_IO_ShootingRange_C_Button_StartHard::UsedComponent' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.__UserState_ShootingRangeState_0
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_ShootingRange_C___UserState_ShootingRangeState_0 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_0) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C___UserState_ShootingRangeState_0");
static_assert(sizeof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_0) == 0x000001, "Wrong size on BP_IO_ShootingRange_C___UserState_ShootingRangeState_0");
static_assert(offsetof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_0, bFromLoad) == 0x000000, "Member 'BP_IO_ShootingRange_C___UserState_ShootingRangeState_0::bFromLoad' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.__UserState_ShootingRangeState_1
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_ShootingRange_C___UserState_ShootingRangeState_1 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_1) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C___UserState_ShootingRangeState_1");
static_assert(sizeof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_1) == 0x000001, "Wrong size on BP_IO_ShootingRange_C___UserState_ShootingRangeState_1");
static_assert(offsetof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_1, bFromLoad) == 0x000000, "Member 'BP_IO_ShootingRange_C___UserState_ShootingRangeState_1::bFromLoad' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.__UserState_ShootingRangeState_2
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_ShootingRange_C___UserState_ShootingRangeState_2 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_2) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C___UserState_ShootingRangeState_2");
static_assert(sizeof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_2) == 0x000001, "Wrong size on BP_IO_ShootingRange_C___UserState_ShootingRangeState_2");
static_assert(offsetof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_2, bFromLoad) == 0x000000, "Member 'BP_IO_ShootingRange_C___UserState_ShootingRangeState_2::bFromLoad' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.Presentation_Finished
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_ShootingRange_C_Presentation_Finished final
{
public:
	bool                                          Perfect;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C_Presentation_Finished) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C_Presentation_Finished");
static_assert(sizeof(BP_IO_ShootingRange_C_Presentation_Finished) == 0x000001, "Wrong size on BP_IO_ShootingRange_C_Presentation_Finished");
static_assert(offsetof(BP_IO_ShootingRange_C_Presentation_Finished, Perfect) == 0x000000, "Member 'BP_IO_ShootingRange_C_Presentation_Finished::Perfect' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange
// 0x0010 (0x0010 - 0x0000)
struct BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange final
{
public:
	class AController*                            UserController;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    UsedComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange");
static_assert(sizeof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange) == 0x000010, "Wrong size on BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange");
static_assert(offsetof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange, UserController) == 0x000000, "Member 'BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange::UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange, UsedComponent) == 0x000008, "Member 'BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange::UsedComponent' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange
// 0x0010 (0x0010 - 0x0000)
struct BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange final
{
public:
	class AController*                            UserController;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    UsedComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange");
static_assert(sizeof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange) == 0x000010, "Wrong size on BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange");
static_assert(offsetof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange, UserController) == 0x000000, "Member 'BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange::UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange, UsedComponent) == 0x000008, "Member 'BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange::UsedComponent' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange
// 0x0010 (0x0010 - 0x0000)
struct BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange final
{
public:
	class AController*                            UserController;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    UsedComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange");
static_assert(sizeof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange) == 0x000010, "Wrong size on BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange");
static_assert(offsetof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange, UserController) == 0x000000, "Member 'BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange::UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange, UsedComponent) == 0x000008, "Member 'BP_IO_ShootingRange_C_BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange::UsedComponent' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.__UserState_ShootingRangeState_MissionLocked_0
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0");
static_assert(sizeof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0) == 0x000001, "Wrong size on BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0");
static_assert(offsetof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0, bFromLoad) == 0x000000, "Member 'BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_0::bFromLoad' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.__UserState_ShootingRangeState_MissionLocked_1
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1) == 0x000001, "Wrong alignment on BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1");
static_assert(sizeof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1) == 0x000001, "Wrong size on BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1");
static_assert(offsetof(BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1, bFromLoad) == 0x000000, "Member 'BP_IO_ShootingRange_C___UserState_ShootingRangeState_MissionLocked_1::bFromLoad' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.ExecuteUbergraph_BP_IO_ShootingRange
// 0x0328 (0x0328 - 0x0000)
struct BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value1;                          // 0x001C(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue1;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue1;                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value2;                          // 0x0028(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value3;                          // 0x0040(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue3;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue1;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value4;                          // 0x0074(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue4;                    // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select1_Default;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        K2Node_CustomEvent_Fidget1;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Delay;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select2_Default;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue2;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        K2Node_CustomEvent_Fidget;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimelineLength_ReturnValue;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Switch_Parent_V1_C*              K2Node_DynamicCast_AsBP_IO_Switch_Parent_V1;       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_CustomEvent_UserController1;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_UsedComponent1;                 // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_UserController;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_UsedComponent;                  // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_UserStateEvent_bFromLoad4;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad3;                  // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad2;                  // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable1;                              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value5;                          // 0x00FC(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue5;                    // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0107(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select3_Default;                            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable2;                              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable2;                                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue;               // 0x0130(0x0018)()
	bool                                          K2Node_CustomEvent_Perfect;                        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select4_Default;                            // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        CallFunc_Array_Get_Item1;                          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue1;              // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue2;              // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16B[0x5];                                      // 0x016B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_ComponentBoundEvent_UserController2;        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_UsedComponent2;         // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_ComponentBoundEvent_UserController1;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_UsedComponent1;         // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19B[0x5];                                      // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        CallFunc_Array_Get_Item2;                          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue1;           // 0x01B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B6[0x2];                                      // 0x01B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable3;                              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        CallFunc_Array_Get_Item3;                          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue1;          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue2;             // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue2;           // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        CallFunc_Array_Get_Item4;                          // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AController* UserController, class UPrimitiveComponent* UsedComponent)> K2Node_CreateDelegate_OutputDelegate;              // 0x01F0(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select5_Default;                            // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Fidget_C*                        CallFunc_Array_Get_Item5;                          // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_ShootingRangeRules             CallFunc_Map_Find_Value6;                          // 0x0210(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue6;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select6_Default;                            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue3;             // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue1;                         // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_ComponentBoundEvent_UserController;         // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_UsedComponent;          // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0240(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_IO_Switch_C>      CallFunc_SetSwitchFeedbackState_self_CastInput;    // 0x0250(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad1;                  // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad;                   // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_IO_Switch_C>      CallFunc_SetSwitchFeedbackState_self1_CastInput;   // 0x0268(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class AController* UserController, class UPrimitiveComponent* UsedComponent)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0278(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue1;              // 0x0290(0x0018)()
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue2;              // 0x02A8(0x0018)()
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue3;              // 0x02C0(0x0018)()
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue4;              // 0x02D8(0x0018)()
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue5;              // 0x02F0(0x0018)()
	bool                                          CallFunc_HasAuthority_ReturnValue3;                // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue6;              // 0x0310(0x0018)()
};
static_assert(alignof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange) == 0x000008, "Wrong alignment on BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange");
static_assert(sizeof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange) == 0x000328, "Wrong size on BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, EntryPoint) == 0x000000, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Variable) == 0x000014, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable) == 0x000018, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value1) == 0x00001C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue1) == 0x000024, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_HasAuthority_ReturnValue1) == 0x000025, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_HasAuthority_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value2) == 0x000028, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue2) == 0x000030, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_float_Variable) == 0x000034, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable1) == 0x000038, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value3) == 0x000040, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue3) == 0x000048, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select_Default) == 0x000054, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Variable1) == 0x000060, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Loop_Counter_Variable1) == 0x000064, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000068, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_GreaterEqual_IntInt_ReturnValue1) == 0x00006C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_GreaterEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Array_Index_Variable1) == 0x000070, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value4) == 0x000074, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value4' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue4) == 0x00007C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select1_Default) == 0x000080, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_Fidget1) == 0x000088, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_Fidget1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Loop_Counter_Variable2) == 0x000090, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_Delay) == 0x000094, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_Delay' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable2) == 0x00009C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Add_IntInt_ReturnValue1) == 0x0000A0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select2_Default) == 0x0000A4, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_HasAuthority_ReturnValue2) == 0x0000A8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_HasAuthority_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_Fidget) == 0x0000B0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_Fidget' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_GetTimelineLength_ReturnValue) == 0x0000B8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_GetTimelineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_DynamicCast_AsBP_IO_Switch_Parent_V1) == 0x0000C0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_DynamicCast_AsBP_IO_Switch_Parent_V1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_UserController1) == 0x0000D0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_UserController1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_UsedComponent1) == 0x0000D8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_UsedComponent1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_UserController) == 0x0000E0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_UsedComponent) == 0x0000E8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_UsedComponent' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_UserStateEvent_bFromLoad4) == 0x0000F0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_UserStateEvent_bFromLoad4' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_UserStateEvent_bFromLoad3) == 0x0000F1, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_UserStateEvent_bFromLoad3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_UserStateEvent_bFromLoad2) == 0x0000F2, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_UserStateEvent_bFromLoad2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_float_Variable1) == 0x0000F4, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value5) == 0x0000FC, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value5' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue5) == 0x000104, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Less_IntInt_ReturnValue) == 0x000105, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable3) == 0x000106, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Less_IntInt_ReturnValue1) == 0x000107, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select3_Default) == 0x000108, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00010C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Get_Item) == 0x000110, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_float_Variable2) == 0x00011C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Contains_ReturnValue) == 0x000120, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Variable2) == 0x000124, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable4) == 0x000128, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue) == 0x000130, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CustomEvent_Perfect) == 0x000148, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CustomEvent_Perfect' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select4_Default) == 0x00014C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000150, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_int_Array_Index_Variable2) == 0x000154, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000158, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Get_Item1) == 0x000160, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Contains_ReturnValue1) == 0x000168, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Contains_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Contains_ReturnValue2) == 0x000169, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Contains_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable5) == 0x00016A, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_ComponentBoundEvent_UserController2) == 0x000170, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_ComponentBoundEvent_UserController2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_ComponentBoundEvent_UsedComponent2) == 0x000178, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_ComponentBoundEvent_UsedComponent2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_ComponentBoundEvent_UserController1) == 0x000180, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_ComponentBoundEvent_UserController1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_ComponentBoundEvent_UsedComponent1) == 0x000188, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_ComponentBoundEvent_UsedComponent1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000190, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Length_ReturnValue1) == 0x000194, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x000198, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_BooleanAND_ReturnValue) == 0x000199, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00019A, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Get_Item2) == 0x0001A0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_IsValid_ReturnValue1) == 0x0001A8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_RandomFloatInRange_ReturnValue) == 0x0001AC, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_RandomInteger_ReturnValue) == 0x0001B0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001B4, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_NotEqual_ByteByte_ReturnValue1) == 0x0001B5, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_NotEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_float_Variable3) == 0x0001B8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Get_Item3) == 0x0001C0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Length_ReturnValue2) == 0x0001C8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_RandomFloatInRange_ReturnValue1) == 0x0001CC, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_RandomFloatInRange_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Subtract_IntInt_ReturnValue2) == 0x0001D0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Subtract_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Max_ReturnValue) == 0x0001D4, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_NotEqual_ByteByte_ReturnValue2) == 0x0001D8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_NotEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Get_Item4) == 0x0001E0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_IsValid_ReturnValue2) == 0x0001E8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, Temp_bool_Variable6) == 0x0001E9, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CreateDelegate_OutputDelegate) == 0x0001F0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select5_Default) == 0x000200, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Get_Item5) == 0x000208, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Get_Item5' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_Value6) == 0x000210, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_Value6' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Map_Find_ReturnValue6) == 0x000218, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Map_Find_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Array_Length_ReturnValue3) == 0x00021C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_Select6_Default) == 0x000220, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_Select6_Default' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Subtract_IntInt_ReturnValue3) == 0x000224, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Subtract_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000228, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Max_ReturnValue1) == 0x00022C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Max_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_ComponentBoundEvent_UserController) == 0x000230, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_ComponentBoundEvent_UserController' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_ComponentBoundEvent_UsedComponent) == 0x000238, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_ComponentBoundEvent_UsedComponent' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000240, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_SetSwitchFeedbackState_self_CastInput) == 0x000250, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_SetSwitchFeedbackState_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_UserStateEvent_bFromLoad1) == 0x000260, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_UserStateEvent_bFromLoad1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_UserStateEvent_bFromLoad) == 0x000261, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_UserStateEvent_bFromLoad' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_SetSwitchFeedbackState_self1_CastInput) == 0x000268, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_SetSwitchFeedbackState_self1_CastInput' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, K2Node_CreateDelegate_OutputDelegate1) == 0x000278, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000288, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000289, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00028C, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue1) == 0x000290, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue2) == 0x0002A8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue3) == 0x0002C0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue4) == 0x0002D8, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue5) == 0x0002F0, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_HasAuthority_ReturnValue3) == 0x000308, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_HasAuthority_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange, CallFunc_PostWwiseEvent_ReturnValue6) == 0x000310, "Member 'BP_IO_ShootingRange_C_ExecuteUbergraph_BP_IO_ShootingRange::CallFunc_PostWwiseEvent_ReturnValue6' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.ShootingRange_Finished__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature final
{
public:
	int32                                         Score_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature) == 0x000004, "Wrong alignment on BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature");
static_assert(sizeof(BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature) == 0x000004, "Wrong size on BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature");
static_assert(offsetof(BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature, Score_0) == 0x000000, "Member 'BP_IO_ShootingRange_C_ShootingRange_Finished__DelegateSignature::Score_0' has a wrong offset!");

// Function BP_IO_ShootingRange.BP_IO_ShootingRange_C.ChallengeCompleted__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature final
{
public:
	int32                                         TargetsHit;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature) == 0x000004, "Wrong alignment on BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature");
static_assert(sizeof(BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature) == 0x000004, "Wrong size on BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature");
static_assert(offsetof(BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature, TargetsHit) == 0x000000, "Member 'BP_IO_ShootingRange_C_ChallengeCompleted__DelegateSignature::TargetsHit' has a wrong offset!");

}

