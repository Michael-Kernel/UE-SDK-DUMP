#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPTiesThatBindSphere

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPTiesThatBindSphere.BPTiesThatBindSphere_C
// 0x0048 (0x0658 - 0x0610)
class ABPTiesThatBindSphere_C final : public AOakPhaseWebSphere
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0610(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDataTableValueHandle                  Web_Sphere_Radius;                                 // 0x0620(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableValueHandle                  Web_Duration;                                      // 0x0638(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class AOakCharacter*                          InitialTarget;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPTiesThatBindSphere(int32 EntryPoint);
	void ApplySapRefund(float RawAccumulateDamage);
	void OnGraspedTargetDied(class AActor* DamageReceiver, class AActor* DamageCauser);
	void OnWebTargetAdded(class AOakCharacter* Target);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	bool GetSharedDamageData(class AOakCharacter* LinkedTarget, float Damage, TSubclassOf<class UDamageSource> DamageSourceClass, struct FOakPhaseWebSphere_SharedDamageData* SharedDamageData);

	float GetMaxTime() const;
	void GetBeamSystem(class UParticleSystem** Res) const;
	void GetBeamDataForLinkedTarget(class AOakCharacter* LinkedTarget, struct FOakPhaseWebSphereBeamData* OutBeamData) const;
	void GetBeamSourceSceneComponent(class USceneComponent** Res) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPTiesThatBindSphere_C">();
	}
	static class ABPTiesThatBindSphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPTiesThatBindSphere_C>();
	}
};
static_assert(alignof(ABPTiesThatBindSphere_C) == 0x000008, "Wrong alignment on ABPTiesThatBindSphere_C");
static_assert(sizeof(ABPTiesThatBindSphere_C) == 0x000658, "Wrong size on ABPTiesThatBindSphere_C");
static_assert(offsetof(ABPTiesThatBindSphere_C, UberGraphFrame) == 0x000610, "Member 'ABPTiesThatBindSphere_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPTiesThatBindSphere_C, Sphere) == 0x000618, "Member 'ABPTiesThatBindSphere_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABPTiesThatBindSphere_C, Web_Sphere_Radius) == 0x000620, "Member 'ABPTiesThatBindSphere_C::Web_Sphere_Radius' has a wrong offset!");
static_assert(offsetof(ABPTiesThatBindSphere_C, Web_Duration) == 0x000638, "Member 'ABPTiesThatBindSphere_C::Web_Duration' has a wrong offset!");
static_assert(offsetof(ABPTiesThatBindSphere_C, InitialTarget) == 0x000650, "Member 'ABPTiesThatBindSphere_C::InitialTarget' has a wrong offset!");

}

