#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ServiceBot

#include "Basic.hpp"

#include "BPI_ServiceBot_classes.hpp"
#include "BPI_ServiceBot_parameters.hpp"


namespace SDK
{

// Function BPI_ServiceBot.BPI_ServiceBot_C.ResetTeam
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ResetTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ResetTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.Activate
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "Activate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.Deactivate
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "Deactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.IsBotInjured
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInjured                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::IsBotInjured(bool* IsInjured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "IsBotInjured");

	Params::BPI_ServiceBot_C_IsBotInjured Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInjured != nullptr)
		*IsInjured = Parms.IsInjured;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.EMS_ManageBeam
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::EMS_ManageBeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "EMS_ManageBeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.IsEMSBot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEMS                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::IsEMSBot(bool* IsEMS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "IsEMSBot");

	Params::BPI_ServiceBot_C_IsEMSBot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEMS != nullptr)
		*IsEMS = Parms.IsEMS;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.GetBotType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_ServiceBot_Type                    BotType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ServiceBot_C::GetBotType(Enum_ServiceBot_Type* BotType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "GetBotType");

	Params::BPI_ServiceBot_C_GetBotType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BotType != nullptr)
		*BotType = Parms.BotType;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.WMS_SpawnTurret
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::WMS_SpawnTurret()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "WMS_SpawnTurret");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ThrowAttack
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ThrowAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ThrowAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.QueryAttachedPieces
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasHead                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasRightArm                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasLeftArm                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::QueryAttachedPieces(bool* HasHead, bool* HasRightArm, bool* HasLeftArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "QueryAttachedPieces");

	Params::BPI_ServiceBot_C_QueryAttachedPieces Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasHead != nullptr)
		*HasHead = Parms.HasHead;

	if (HasRightArm != nullptr)
		*HasRightArm = Parms.HasRightArm;

	if (HasLeftArm != nullptr)
		*HasLeftArm = Parms.HasLeftArm;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.RegrowAttachedPiece
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::RegrowAttachedPiece()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "RegrowAttachedPiece");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.EMS_Defibulate
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::EMS_Defibulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "EMS_Defibulate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.FIRE_SpawnAxe
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::FIRE_SpawnAxe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "FIRE_SpawnAxe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.QueryDominantPieces
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RightArmDominant                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LeftArmDominant                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HeadDominant                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::QueryDominantPieces(bool* RightArmDominant, bool* LeftArmDominant, bool* HeadDominant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "QueryDominantPieces");

	Params::BPI_ServiceBot_C_QueryDominantPieces Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RightArmDominant != nullptr)
		*RightArmDominant = Parms.RightArmDominant;

	if (LeftArmDominant != nullptr)
		*LeftArmDominant = Parms.LeftArmDominant;

	if (HeadDominant != nullptr)
		*HeadDominant = Parms.HeadDominant;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.SpawnGrenade
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::SpawnGrenade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "SpawnGrenade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.BackupAttack
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::BackupAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "BackupAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ManageAttachedPieces
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ManageAttachedPieces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ManageAttachedPieces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.IsLootWeaponEquipped
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EquippedRight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EquippedLeft                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::IsLootWeaponEquipped(bool* EquippedRight, bool* EquippedLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "IsLootWeaponEquipped");

	Params::BPI_ServiceBot_C_IsLootWeaponEquipped Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EquippedRight != nullptr)
		*EquippedRight = Parms.EquippedRight;

	if (EquippedLeft != nullptr)
		*EquippedLeft = Parms.EquippedLeft;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.WeaponEffects
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::WeaponEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "WeaponEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.WeaponFire
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::WeaponFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "WeaponFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.EMS_ManageReviveParts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasHead                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasRightArm                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasLeftArm                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::EMS_ManageReviveParts(bool HasHead, bool HasRightArm, bool HasLeftArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "EMS_ManageReviveParts");

	Params::BPI_ServiceBot_C_EMS_ManageReviveParts Parms{};

	Parms.HasHead = HasHead;
	Parms.HasRightArm = HasRightArm;
	Parms.HasLeftArm = HasLeftArm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.DesignateAttachedPieces
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasHead                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasRightArm                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasLeftArm                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::DesignateAttachedPieces(bool HasHead, bool HasRightArm, bool HasLeftArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "DesignateAttachedPieces");

	Params::BPI_ServiceBot_C_DesignateAttachedPieces Parms{};

	Parms.HasHead = HasHead;
	Parms.HasRightArm = HasRightArm;
	Parms.HasLeftArm = HasLeftArm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_ManageUIName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGbxUIName*                       UIName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ServiceBot_C::ServiceBot_ManageUIName(class UGbxUIName* UIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_ManageUIName");

	Params::BPI_ServiceBot_C_ServiceBot_ManageUIName Parms{};

	Parms.UIName = UIName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.MELEE_SpawnMelee
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SpawnRight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::MELEE_SpawnMelee(bool SpawnRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "MELEE_SpawnMelee");

	Params::BPI_ServiceBot_C_MELEE_SpawnMelee Parms{};

	Parms.SpawnRight = SpawnRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_Suicide
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ServiceBot_Suicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_Suicide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.AssignDominantPieces
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RightArmDominant                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LeftArmDominant                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HeadDominant                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::AssignDominantPieces(bool RightArmDominant, bool LeftArmDominant, bool HeadDominant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "AssignDominantPieces");

	Params::BPI_ServiceBot_C_AssignDominantPieces Parms{};

	Parms.RightArmDominant = RightArmDominant;
	Parms.LeftArmDominant = LeftArmDominant;
	Parms.HeadDominant = HeadDominant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ManageWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LeftWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::ManageWeapon(bool LeftWeapon, bool HideWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ManageWeapon");

	Params::BPI_ServiceBot_C_ManageWeapon Parms{};

	Parms.LeftWeapon = LeftWeapon;
	Parms.HideWeapon = HideWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_Equip_L
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ServiceBot_Equip_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_Equip_L");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_ShieldOn
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ServiceBot_ShieldOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_ShieldOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_TargetChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ServiceBot_C::ServiceBot_TargetChanged(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_TargetChanged");

	Params::BPI_ServiceBot_C_ServiceBot_TargetChanged Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_FireExtinguisher
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ExtinguishOn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::ServiceBot_FireExtinguisher(bool ExtinguishOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_FireExtinguisher");

	Params::BPI_ServiceBot_C_ServiceBot_FireExtinguisher Parms{};

	Parms.ExtinguishOn = ExtinguishOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_Drop
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ServiceBot_Drop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_Drop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_SuicideTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ServiceBot_C::ServiceBot_SuicideTimer(bool Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_SuicideTimer");

	Params::BPI_ServiceBot_C_ServiceBot_SuicideTimer Parms{};

	Parms.Start = Start;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_GetUIName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayThroughIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGbxUIName*                       UIName                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ServiceBot_C::ServiceBot_GetUIName(float PlayThroughIndex, class UGbxUIName** UIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBot_GetUIName");

	Params::BPI_ServiceBot_C_ServiceBot_GetUIName Parms{};

	Parms.PlayThroughIndex = PlayThroughIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (UIName != nullptr)
		*UIName = Parms.UIName;
}


// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBotLOOT_PrepareForEscape
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ServiceBot_C::ServiceBotLOOT_PrepareForEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ServiceBot_C", "ServiceBotLOOT_PrepareForEscape");

	UObject::ProcessEvent(Func, nullptr);
}

}

