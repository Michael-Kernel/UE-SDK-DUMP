#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_IO_Switch

#include "Basic.hpp"

#include "BPI_IO_Switch_classes.hpp"
#include "BPI_IO_Switch_parameters.hpp"


namespace SDK
{

// Function BPI_IO_Switch.BPI_IO_Switch_C.SetSwitchState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Switch_State                       SwitchState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_IO_Switch_C::SetSwitchState(Enum_Switch_State SwitchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "SetSwitchState");

	Params::BPI_IO_Switch_C_SetSwitchState Parms{};

	Parms.SwitchState = SwitchState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.SetSwitchLockedState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Locked                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_IO_Switch_C::SetSwitchLockedState(bool Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "SetSwitchLockedState");

	Params::BPI_IO_Switch_C_SetSwitchLockedState Parms{};

	Parms.Locked = Locked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.SetSwitchInteractiveState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactive                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_IO_Switch_C::SetSwitchInteractiveState(bool Interactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "SetSwitchInteractiveState");

	Params::BPI_IO_Switch_C_SetSwitchInteractiveState Parms{};

	Parms.Interactive = Interactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.GetSwitchState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Switch_State                       SwitchState                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_IO_Switch_C::GetSwitchState(Enum_Switch_State* SwitchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "GetSwitchState");

	Params::BPI_IO_Switch_C_GetSwitchState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SwitchState != nullptr)
		*SwitchState = Parms.SwitchState;
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.GetSwitchLockedState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Locked                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_IO_Switch_C::GetSwitchLockedState(bool* Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "GetSwitchLockedState");

	Params::BPI_IO_Switch_C_GetSwitchLockedState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Locked != nullptr)
		*Locked = Parms.Locked;
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.GetSwitchInteractiveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactive                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_IO_Switch_C::GetSwitchInteractiveState(bool* Interactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "GetSwitchInteractiveState");

	Params::BPI_IO_Switch_C_GetSwitchInteractiveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interactive != nullptr)
		*Interactive = Parms.Interactive;
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.SetSwitchFeedbackState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_States_SwitchFeedback              FeedbackState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_IO_Switch_C::SetSwitchFeedbackState(Enum_States_SwitchFeedback FeedbackState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "SetSwitchFeedbackState");

	Params::BPI_IO_Switch_C_SetSwitchFeedbackState Parms{};

	Parms.FeedbackState = FeedbackState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_IO_Switch.BPI_IO_Switch_C.GetSwitchFeedbackState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_States_SwitchFeedback              FeedbackState                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_IO_Switch_C::GetSwitchFeedbackState(Enum_States_SwitchFeedback* FeedbackState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_IO_Switch_C", "GetSwitchFeedbackState");

	Params::BPI_IO_Switch_C_GetSwitchFeedbackState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FeedbackState != nullptr)
		*FeedbackState = Parms.FeedbackState;
}

}

