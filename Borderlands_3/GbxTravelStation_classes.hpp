#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTravelStation

#include "Basic.hpp"

#include "GbxTravelStation_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "GbxUI_classes.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// Class GbxTravelStation.TravelLocationData
// 0x0000 (0x0030 - 0x0030)
class UTravelLocationData : public UGbxDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelLocationData">();
	}
	static class UTravelLocationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelLocationData>();
	}
};
static_assert(alignof(UTravelLocationData) == 0x000008, "Wrong alignment on UTravelLocationData");
static_assert(sizeof(UTravelLocationData) == 0x000030, "Wrong size on UTravelLocationData");

// Class GbxTravelStation.TeleportDestinationActor
// 0x0008 (0x0460 - 0x0458)
class ATeleportDestinationActor final : public AActor
{
public:
	class UTravelStationResurrectComponent*       ResurrectComponent;                                // 0x0458(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static void TeleportPlayersToDestination(class UObject* WorldContextObject, class ATeleportDestinationActor* Destination);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeleportDestinationActor">();
	}
	static class ATeleportDestinationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATeleportDestinationActor>();
	}
};
static_assert(alignof(ATeleportDestinationActor) == 0x000008, "Wrong alignment on ATeleportDestinationActor");
static_assert(sizeof(ATeleportDestinationActor) == 0x000460, "Wrong size on ATeleportDestinationActor");
static_assert(offsetof(ATeleportDestinationActor, ResurrectComponent) == 0x000458, "Member 'ATeleportDestinationActor::ResurrectComponent' has a wrong offset!");

// Class GbxTravelStation.TravelGraph
// 0x0068 (0x0090 - 0x0028)
class UTravelGraph : public UObject
{
public:
	class UTravelStationData*                     InitialStation;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTravelStationData>> ReferencedTravelStations;                          // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelData>>      ReferencedLevels;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelGroupData>> ReferencedLevelGroups;                             // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   GraphDisplayName;                                  // 0x0060(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UDownloadableContentData*               DLCExpansionData;                                  // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExternalGraphLevelLinks>       ExternalLinksToOtherLevel;                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelGraph">();
	}
	static class UTravelGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelGraph>();
	}
};
static_assert(alignof(UTravelGraph) == 0x000008, "Wrong alignment on UTravelGraph");
static_assert(sizeof(UTravelGraph) == 0x000090, "Wrong size on UTravelGraph");
static_assert(offsetof(UTravelGraph, InitialStation) == 0x000028, "Member 'UTravelGraph::InitialStation' has a wrong offset!");
static_assert(offsetof(UTravelGraph, ReferencedTravelStations) == 0x000030, "Member 'UTravelGraph::ReferencedTravelStations' has a wrong offset!");
static_assert(offsetof(UTravelGraph, ReferencedLevels) == 0x000040, "Member 'UTravelGraph::ReferencedLevels' has a wrong offset!");
static_assert(offsetof(UTravelGraph, ReferencedLevelGroups) == 0x000050, "Member 'UTravelGraph::ReferencedLevelGroups' has a wrong offset!");
static_assert(offsetof(UTravelGraph, GraphDisplayName) == 0x000060, "Member 'UTravelGraph::GraphDisplayName' has a wrong offset!");
static_assert(offsetof(UTravelGraph, DLCExpansionData) == 0x000078, "Member 'UTravelGraph::DLCExpansionData' has a wrong offset!");
static_assert(offsetof(UTravelGraph, ExternalLinksToOtherLevel) == 0x000080, "Member 'UTravelGraph::ExternalLinksToOtherLevel' has a wrong offset!");

// Class GbxTravelStation.GlobalTravelGraph
// 0x0010 (0x00A0 - 0x0090)
class UGlobalTravelGraph : public UTravelGraph
{
public:
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DebugFindClosestLevel(class UObject* WorldContextObject, class ULevelData* StartingLevel, class ULevelData* DestinationLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalTravelGraph">();
	}
	static class UGlobalTravelGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalTravelGraph>();
	}
};
static_assert(alignof(UGlobalTravelGraph) == 0x000008, "Wrong alignment on UGlobalTravelGraph");
static_assert(sizeof(UGlobalTravelGraph) == 0x0000A0, "Wrong size on UGlobalTravelGraph");

// Class GbxTravelStation.TravelStationData
// 0x00A8 (0x00D8 - 0x0030)
class UTravelStationData : public UTravelLocationData
{
public:
	class FName                                   StationMapName;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGbxCondition*>                  Dependencies;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTravelStationData>      PreviousStation;                                   // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelData>              OwningLevel;                                       // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UGbxUIName*                             DisplayUIName;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UGbxUIName*                             DescriptionUI;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class FName GetStationMapName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationData">();
	}
	static class UTravelStationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelStationData>();
	}
};
static_assert(alignof(UTravelStationData) == 0x000008, "Wrong alignment on UTravelStationData");
static_assert(sizeof(UTravelStationData) == 0x0000D8, "Wrong size on UTravelStationData");
static_assert(offsetof(UTravelStationData, StationMapName) == 0x000030, "Member 'UTravelStationData::StationMapName' has a wrong offset!");
static_assert(offsetof(UTravelStationData, Dependencies) == 0x000038, "Member 'UTravelStationData::Dependencies' has a wrong offset!");
static_assert(offsetof(UTravelStationData, PreviousStation) == 0x000048, "Member 'UTravelStationData::PreviousStation' has a wrong offset!");
static_assert(offsetof(UTravelStationData, OwningLevel) == 0x000070, "Member 'UTravelStationData::OwningLevel' has a wrong offset!");
static_assert(offsetof(UTravelStationData, DisplayName) == 0x000098, "Member 'UTravelStationData::DisplayName' has a wrong offset!");
static_assert(offsetof(UTravelStationData, DisplayUIName) == 0x0000B0, "Member 'UTravelStationData::DisplayUIName' has a wrong offset!");
static_assert(offsetof(UTravelStationData, Description) == 0x0000B8, "Member 'UTravelStationData::Description' has a wrong offset!");
static_assert(offsetof(UTravelStationData, DescriptionUI) == 0x0000D0, "Member 'UTravelStationData::DescriptionUI' has a wrong offset!");

// Class GbxTravelStation.TravelStationTracker
// 0x00F0 (0x0548 - 0x0458)
class ATravelStationTracker : public AActor
{
public:
	TArray<class UTravelStationResurrectComponent*> ResurrectTravelStations;                           // 0x0458(0x0010)(ExportObject, Net, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class ULevelTravelStationComponent*>   LevelTravelStations;                               // 0x0468(0x0010)(ExportObject, Net, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFastTravelStationComponent*>    FastTravelStations;                                // 0x0478(0x0010)(ExportObject, Net, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFastTravelStationData*>         AllFastTravelStations;                             // 0x0488(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FActiveFastTravelData>          ActiveFastTravelStations;                          // 0x0498(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UFastTravelStationData*>         HostFastTravelStations;                            // 0x04A8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LastActiveTravelToStation_Client;                  // 0x04B8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  LastTravelledThroughStation;                       // 0x04C0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  LastActiveTravelToStation_Server;                  // 0x04C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  LevelArrivalTravelStation;                         // 0x04D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LastDestinationTravelStationName;                  // 0x04D8(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTravelCountdownInfo                   TravelToStationCountdown;                          // 0x04E8(0x0010)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class UGlobalTravelGraph*                     GlobalTravelGraph;                                 // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_500[0x48];                                     // 0x0500(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFastTravelStationData* FindFastTravelStationForMap(const class FName MapName);
	TArray<struct FActiveFastTravelData> GetActiveFastTravelStationList();
	TArray<class UFastTravelStationData*> GetAllFastTravelStations();
	class UFastTravelStationData* GetFastTravelStationInfo(const class FString& FastTravelStationName);
	class AActor* GetLastActiveTravelToStation(class APlayerController* Pc);
	class AActor* GetLastTravelledThroughStation();
	class UTravelStationComponentBase* GetTravelStationComponent(class UTravelStationData* TravelStationData);
	void OnRep_HostFastTravelStations();
	void OnRep_LastActiveTravelToStation();
	void OnRep_TravelToStationCountdown();
	void PlayerJoinedTimer();
	void TravelToStationTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationTracker">();
	}
	static class ATravelStationTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATravelStationTracker>();
	}
};
static_assert(alignof(ATravelStationTracker) == 0x000008, "Wrong alignment on ATravelStationTracker");
static_assert(sizeof(ATravelStationTracker) == 0x000548, "Wrong size on ATravelStationTracker");
static_assert(offsetof(ATravelStationTracker, ResurrectTravelStations) == 0x000458, "Member 'ATravelStationTracker::ResurrectTravelStations' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, LevelTravelStations) == 0x000468, "Member 'ATravelStationTracker::LevelTravelStations' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, FastTravelStations) == 0x000478, "Member 'ATravelStationTracker::FastTravelStations' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, AllFastTravelStations) == 0x000488, "Member 'ATravelStationTracker::AllFastTravelStations' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, ActiveFastTravelStations) == 0x000498, "Member 'ATravelStationTracker::ActiveFastTravelStations' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, HostFastTravelStations) == 0x0004A8, "Member 'ATravelStationTracker::HostFastTravelStations' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, LastActiveTravelToStation_Client) == 0x0004B8, "Member 'ATravelStationTracker::LastActiveTravelToStation_Client' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, LastTravelledThroughStation) == 0x0004C0, "Member 'ATravelStationTracker::LastTravelledThroughStation' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, LastActiveTravelToStation_Server) == 0x0004C8, "Member 'ATravelStationTracker::LastActiveTravelToStation_Server' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, LevelArrivalTravelStation) == 0x0004D0, "Member 'ATravelStationTracker::LevelArrivalTravelStation' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, LastDestinationTravelStationName) == 0x0004D8, "Member 'ATravelStationTracker::LastDestinationTravelStationName' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, TravelToStationCountdown) == 0x0004E8, "Member 'ATravelStationTracker::TravelToStationCountdown' has a wrong offset!");
static_assert(offsetof(ATravelStationTracker, GlobalTravelGraph) == 0x0004F8, "Member 'ATravelStationTracker::GlobalTravelGraph' has a wrong offset!");

// Class GbxTravelStation.TravelStationComponentBase
// 0x0020 (0x0710 - 0x06F0)
class UTravelStationComponentBase : public UPrimitiveComponent
{
public:
	class FString                                 TravelDataSelection;                               // 0x06F0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_700[0x8];                                      // 0x0700(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TravelDataClassName;                               // 0x0708(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static void EnumerateValidTravelStation(class UObject* TravelStationObject, TArray<class FString>* OutItems);
	static bool TravelToStation(class UObject* WorldContextObject, class UTravelStationData* DestinationStationData, bool bImmediate, class APawn* ActivatingPawn, bool bDisallowLocalTravel);

	bool GetAvailableSpawnLocation(class AActor* ActorForSpawnLocation, struct FVector* SpawnLocation, struct FRotator* SpawnRotation, bool bTestOnly, bool bForVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationComponentBase">();
	}
	static class UTravelStationComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelStationComponentBase>();
	}
};
static_assert(alignof(UTravelStationComponentBase) == 0x000008, "Wrong alignment on UTravelStationComponentBase");
static_assert(sizeof(UTravelStationComponentBase) == 0x000710, "Wrong size on UTravelStationComponentBase");
static_assert(offsetof(UTravelStationComponentBase, TravelDataSelection) == 0x0006F0, "Member 'UTravelStationComponentBase::TravelDataSelection' has a wrong offset!");
static_assert(offsetof(UTravelStationComponentBase, TravelDataClassName) == 0x000708, "Member 'UTravelStationComponentBase::TravelDataClassName' has a wrong offset!");

// Class GbxTravelStation.FastTravelStationComponent
// 0x0030 (0x0740 - 0x0710)
class UFastTravelStationComponent final : public UTravelStationComponentBase
{
public:
	class UFastTravelStationData*                 FastTravelData;                                    // 0x0710(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFastTravelStationDiscovered;                     // 0x0718(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFastTravelStationUndiscovered;                   // 0x0728(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void FastTravelToStation(class UObject* WorldContextObject, class UFastTravelStationData* DestinationStationData, class APawn* ActivatingPawn);

	bool ActivateFastTravel();
	bool DeactivateFastTravel(class UFastTravelStationComponent* FallbackLocation);
	void OnTravelStationActivated(class AActor* PreviousStation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FastTravelStationComponent">();
	}
	static class UFastTravelStationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFastTravelStationComponent>();
	}
};
static_assert(alignof(UFastTravelStationComponent) == 0x000008, "Wrong alignment on UFastTravelStationComponent");
static_assert(sizeof(UFastTravelStationComponent) == 0x000740, "Wrong size on UFastTravelStationComponent");
static_assert(offsetof(UFastTravelStationComponent, FastTravelData) == 0x000710, "Member 'UFastTravelStationComponent::FastTravelData' has a wrong offset!");
static_assert(offsetof(UFastTravelStationComponent, OnFastTravelStationDiscovered) == 0x000718, "Member 'UFastTravelStationComponent::OnFastTravelStationDiscovered' has a wrong offset!");
static_assert(offsetof(UFastTravelStationComponent, OnFastTravelStationUndiscovered) == 0x000728, "Member 'UFastTravelStationComponent::OnFastTravelStationUndiscovered' has a wrong offset!");

// Class GbxTravelStation.FastTravelStationData
// 0x0048 (0x0120 - 0x00D8)
class UFastTravelStationData final : public UTravelStationData
{
public:
	EFastTravelDirection                          TravelDirection;                                   // 0x00D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlanetTransform;                                   // 0x00E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDiscoveredByDefault;                              // 0x0110(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FastTravelStationData">();
	}
	static class UFastTravelStationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFastTravelStationData>();
	}
};
static_assert(alignof(UFastTravelStationData) == 0x000010, "Wrong alignment on UFastTravelStationData");
static_assert(sizeof(UFastTravelStationData) == 0x000120, "Wrong size on UFastTravelStationData");
static_assert(offsetof(UFastTravelStationData, TravelDirection) == 0x0000D8, "Member 'UFastTravelStationData::TravelDirection' has a wrong offset!");
static_assert(offsetof(UFastTravelStationData, PlanetTransform) == 0x0000E0, "Member 'UFastTravelStationData::PlanetTransform' has a wrong offset!");
static_assert(offsetof(UFastTravelStationData, bDiscoveredByDefault) == 0x000110, "Member 'UFastTravelStationData::bDiscoveredByDefault' has a wrong offset!");

// Class GbxTravelStation.FastTravelStationDebugButton
// 0x0040 (0x02F8 - 0x02B8)
class UFastTravelStationDebugButton final : public UGbxUserWidget
{
public:
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UBUTTON*                                StationButton;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DescriptionText;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ButtonSelectedColor;                               // 0x02D8(0x0010)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ButtonUnSelectedColor;                             // 0x02E8(0x0010)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnStationClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FastTravelStationDebugButton">();
	}
	static class UFastTravelStationDebugButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFastTravelStationDebugButton>();
	}
};
static_assert(alignof(UFastTravelStationDebugButton) == 0x000008, "Wrong alignment on UFastTravelStationDebugButton");
static_assert(sizeof(UFastTravelStationDebugButton) == 0x0002F8, "Wrong size on UFastTravelStationDebugButton");
static_assert(offsetof(UFastTravelStationDebugButton, StationButton) == 0x0002C8, "Member 'UFastTravelStationDebugButton::StationButton' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugButton, DescriptionText) == 0x0002D0, "Member 'UFastTravelStationDebugButton::DescriptionText' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugButton, ButtonSelectedColor) == 0x0002D8, "Member 'UFastTravelStationDebugButton::ButtonSelectedColor' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugButton, ButtonUnSelectedColor) == 0x0002E8, "Member 'UFastTravelStationDebugButton::ButtonUnSelectedColor' has a wrong offset!");

// Class GbxTravelStation.FastTravelStationDebugMenu
// 0x0068 (0x0360 - 0x02F8)
class UFastTravelStationDebugMenu final : public UGbxDebugMenuSubmenu
{
public:
	class UBUTTON*                                TravelButton;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCheckBox*                              ActiveStationsButton;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCheckBox*                              ShowLevelStationsButton;                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             TravelStationList;                                 // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ErrorText;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFastTravelStationDebugButton> OptionButtonClass;                                 // 0x0320(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAvailableTravelStation>        AllFastTravelStations;                             // 0x0328(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAvailableTravelStation>        AvailableFastTravelStations;                       // 0x0338(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAvailableTravelStation>        AllLevelTravelStations;                            // 0x0348(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          ShowAllFastTravelStations;                         // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActiveStationsStateChanged(bool bIsChecked);
	void OnShowLevelStationsStateChanged(bool bIsChecked);
	void OnTravelButtonClicked();
	void OnTravelStationSelectedChanged(class UFastTravelStationDebugButton* TriggeredButton, bool bIsChecked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FastTravelStationDebugMenu">();
	}
	static class UFastTravelStationDebugMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFastTravelStationDebugMenu>();
	}
};
static_assert(alignof(UFastTravelStationDebugMenu) == 0x000008, "Wrong alignment on UFastTravelStationDebugMenu");
static_assert(sizeof(UFastTravelStationDebugMenu) == 0x000360, "Wrong size on UFastTravelStationDebugMenu");
static_assert(offsetof(UFastTravelStationDebugMenu, TravelButton) == 0x0002F8, "Member 'UFastTravelStationDebugMenu::TravelButton' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, ActiveStationsButton) == 0x000300, "Member 'UFastTravelStationDebugMenu::ActiveStationsButton' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, ShowLevelStationsButton) == 0x000308, "Member 'UFastTravelStationDebugMenu::ShowLevelStationsButton' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, TravelStationList) == 0x000310, "Member 'UFastTravelStationDebugMenu::TravelStationList' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, ErrorText) == 0x000318, "Member 'UFastTravelStationDebugMenu::ErrorText' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, OptionButtonClass) == 0x000320, "Member 'UFastTravelStationDebugMenu::OptionButtonClass' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, AllFastTravelStations) == 0x000328, "Member 'UFastTravelStationDebugMenu::AllFastTravelStations' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, AvailableFastTravelStations) == 0x000338, "Member 'UFastTravelStationDebugMenu::AvailableFastTravelStations' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, AllLevelTravelStations) == 0x000348, "Member 'UFastTravelStationDebugMenu::AllLevelTravelStations' has a wrong offset!");
static_assert(offsetof(UFastTravelStationDebugMenu, ShowAllFastTravelStations) == 0x000358, "Member 'UFastTravelStationDebugMenu::ShowAllFastTravelStations' has a wrong offset!");

// Class GbxTravelStation.LevelTravelStationComponent
// 0x0040 (0x0750 - 0x0710)
class ULevelTravelStationComponent final : public UTravelStationComponentBase
{
public:
	class ULevelTravelStationData*                LevelTravelData;                                   // 0x0710(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTravelDataConditional>         LevelTravelDataList;                               // 0x0718(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TextRenderEvalRate;                                // 0x0728(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72C[0x4];                                      // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDestinationForTextRenderChanged;                 // 0x0730(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_740[0x10];                                     // 0x0740(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ActivateLevelTravel(class AController* ActivatingController);

	class ULevelTravelStationData* GetLevelTravelStationData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelTravelStationComponent">();
	}
	static class ULevelTravelStationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelTravelStationComponent>();
	}
};
static_assert(alignof(ULevelTravelStationComponent) == 0x000008, "Wrong alignment on ULevelTravelStationComponent");
static_assert(sizeof(ULevelTravelStationComponent) == 0x000750, "Wrong size on ULevelTravelStationComponent");
static_assert(offsetof(ULevelTravelStationComponent, LevelTravelData) == 0x000710, "Member 'ULevelTravelStationComponent::LevelTravelData' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationComponent, LevelTravelDataList) == 0x000718, "Member 'ULevelTravelStationComponent::LevelTravelDataList' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationComponent, TextRenderEvalRate) == 0x000728, "Member 'ULevelTravelStationComponent::TextRenderEvalRate' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationComponent, OnDestinationForTextRenderChanged) == 0x000730, "Member 'ULevelTravelStationComponent::OnDestinationForTextRenderChanged' has a wrong offset!");

// Class GbxTravelStation.LevelTravelStationData
// 0x0048 (0x0120 - 0x00D8)
class ULevelTravelStationData final : public UTravelStationData
{
public:
	class FName                                   TravelToMapName;                                   // 0x00D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestinationStationString;                          // 0x00E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTravelStationData>      DestinationStation;                                // 0x00F0(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVehiclesAllowed;                                  // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualLevel;                                     // 0x0119(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoOutOfMapWaypoints;                              // 0x011A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelTravelStationData">();
	}
	static class ULevelTravelStationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelTravelStationData>();
	}
};
static_assert(alignof(ULevelTravelStationData) == 0x000008, "Wrong alignment on ULevelTravelStationData");
static_assert(sizeof(ULevelTravelStationData) == 0x000120, "Wrong size on ULevelTravelStationData");
static_assert(offsetof(ULevelTravelStationData, TravelToMapName) == 0x0000D8, "Member 'ULevelTravelStationData::TravelToMapName' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationData, DestinationStationString) == 0x0000E0, "Member 'ULevelTravelStationData::DestinationStationString' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationData, DestinationStation) == 0x0000F0, "Member 'ULevelTravelStationData::DestinationStation' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationData, bVehiclesAllowed) == 0x000118, "Member 'ULevelTravelStationData::bVehiclesAllowed' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationData, bVirtualLevel) == 0x000119, "Member 'ULevelTravelStationData::bVirtualLevel' has a wrong offset!");
static_assert(offsetof(ULevelTravelStationData, bNoOutOfMapWaypoints) == 0x00011A, "Member 'ULevelTravelStationData::bNoOutOfMapWaypoints' has a wrong offset!");

// Class GbxTravelStation.ResurrectTravelStationData
// 0x0000 (0x00D8 - 0x00D8)
class UResurrectTravelStationData final : public UTravelStationData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResurrectTravelStationData">();
	}
	static class UResurrectTravelStationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResurrectTravelStationData>();
	}
};
static_assert(alignof(UResurrectTravelStationData) == 0x000008, "Wrong alignment on UResurrectTravelStationData");
static_assert(sizeof(UResurrectTravelStationData) == 0x0000D8, "Wrong size on UResurrectTravelStationData");

// Class GbxTravelStation.TravelStationBase
// 0x0000 (0x0458 - 0x0458)
class ATravelStationBase final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationBase">();
	}
	static class ATravelStationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATravelStationBase>();
	}
};
static_assert(alignof(ATravelStationBase) == 0x000008, "Wrong alignment on ATravelStationBase");
static_assert(sizeof(ATravelStationBase) == 0x000458, "Wrong size on ATravelStationBase");

// Class GbxTravelStation.TravelStationModuleSettings
// 0x0018 (0x0040 - 0x0028)
class UTravelStationModuleSettings final : public UObject
{
public:
	float                                         PlayerHalfHeight;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerRadius;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TravelToStationCountdownTime;                      // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                VehicleExtents;                                    // 0x0034(0x000C)(Edit, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationModuleSettings">();
	}
	static class UTravelStationModuleSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelStationModuleSettings>();
	}
};
static_assert(alignof(UTravelStationModuleSettings) == 0x000008, "Wrong alignment on UTravelStationModuleSettings");
static_assert(sizeof(UTravelStationModuleSettings) == 0x000040, "Wrong size on UTravelStationModuleSettings");
static_assert(offsetof(UTravelStationModuleSettings, PlayerHalfHeight) == 0x000028, "Member 'UTravelStationModuleSettings::PlayerHalfHeight' has a wrong offset!");
static_assert(offsetof(UTravelStationModuleSettings, PlayerRadius) == 0x00002C, "Member 'UTravelStationModuleSettings::PlayerRadius' has a wrong offset!");
static_assert(offsetof(UTravelStationModuleSettings, TravelToStationCountdownTime) == 0x000030, "Member 'UTravelStationModuleSettings::TravelToStationCountdownTime' has a wrong offset!");
static_assert(offsetof(UTravelStationModuleSettings, VehicleExtents) == 0x000034, "Member 'UTravelStationModuleSettings::VehicleExtents' has a wrong offset!");

// Class GbxTravelStation.TravelStationResurrectComponent
// 0x0090 (0x07A0 - 0x0710)
class UTravelStationResurrectComponent : public UTravelStationComponentBase
{
public:
	bool                                          StationIsActive;                                   // 0x0710(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultStationToActive;                            // 0x0711(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateOnEnterArea;                              // 0x0712(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResurrectionActive;                               // 0x0713(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverResurectThere;                               // 0x0714(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_715[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UChallenge>                 TravelDiscoveredChallenge;                         // 0x0718(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivationCylinderTestDelay;                       // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseActivationCylinder;                             // 0x0724(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_725[0x3];                                      // 0x0725(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationCylinderRadius;                          // 0x0728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivationCylinderHalfHeight;                      // 0x072C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivationCylinderZOffset;                         // 0x0730(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnStationResurrectActivated;                       // 0x0738(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStationResurrectDeactivated;                     // 0x0748(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnResurrectedAtStation;                            // 0x0758(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UResurrectTravelStationData*            ResurrectTravelData;                               // 0x0768(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_770[0x30];                                     // 0x0770(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ActivateTravelStation(bool bForceActivation);
	void OnRep_StationIsActive();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationResurrectComponent">();
	}
	static class UTravelStationResurrectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelStationResurrectComponent>();
	}
};
static_assert(alignof(UTravelStationResurrectComponent) == 0x000008, "Wrong alignment on UTravelStationResurrectComponent");
static_assert(sizeof(UTravelStationResurrectComponent) == 0x0007A0, "Wrong size on UTravelStationResurrectComponent");
static_assert(offsetof(UTravelStationResurrectComponent, StationIsActive) == 0x000710, "Member 'UTravelStationResurrectComponent::StationIsActive' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, DefaultStationToActive) == 0x000711, "Member 'UTravelStationResurrectComponent::DefaultStationToActive' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, bActivateOnEnterArea) == 0x000712, "Member 'UTravelStationResurrectComponent::bActivateOnEnterArea' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, bResurrectionActive) == 0x000713, "Member 'UTravelStationResurrectComponent::bResurrectionActive' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, bNeverResurectThere) == 0x000714, "Member 'UTravelStationResurrectComponent::bNeverResurectThere' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, TravelDiscoveredChallenge) == 0x000718, "Member 'UTravelStationResurrectComponent::TravelDiscoveredChallenge' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, ActivationCylinderTestDelay) == 0x000720, "Member 'UTravelStationResurrectComponent::ActivationCylinderTestDelay' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, UseActivationCylinder) == 0x000724, "Member 'UTravelStationResurrectComponent::UseActivationCylinder' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, ActivationCylinderRadius) == 0x000728, "Member 'UTravelStationResurrectComponent::ActivationCylinderRadius' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, ActivationCylinderHalfHeight) == 0x00072C, "Member 'UTravelStationResurrectComponent::ActivationCylinderHalfHeight' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, ActivationCylinderZOffset) == 0x000730, "Member 'UTravelStationResurrectComponent::ActivationCylinderZOffset' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, OnStationResurrectActivated) == 0x000738, "Member 'UTravelStationResurrectComponent::OnStationResurrectActivated' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, OnStationResurrectDeactivated) == 0x000748, "Member 'UTravelStationResurrectComponent::OnStationResurrectDeactivated' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, OnResurrectedAtStation) == 0x000758, "Member 'UTravelStationResurrectComponent::OnResurrectedAtStation' has a wrong offset!");
static_assert(offsetof(UTravelStationResurrectComponent, ResurrectTravelData) == 0x000768, "Member 'UTravelStationResurrectComponent::ResurrectTravelData' has a wrong offset!");

// Class GbxTravelStation.TravelStationSpawnPointInterface
// 0x0000 (0x0028 - 0x0028)
class ITravelStationSpawnPointInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationSpawnPointInterface">();
	}
	static class ITravelStationSpawnPointInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITravelStationSpawnPointInterface>();
	}
};
static_assert(alignof(ITravelStationSpawnPointInterface) == 0x000008, "Wrong alignment on ITravelStationSpawnPointInterface");
static_assert(sizeof(ITravelStationSpawnPointInterface) == 0x000028, "Wrong size on ITravelStationSpawnPointInterface");

// Class GbxTravelStation.TravelStationSpawnPointComponent
// 0x0020 (0x0740 - 0x0720)
class UTravelStationSpawnPointComponent final : public UCapsuleComponent
{
public:
	uint8                                         Pad_720[0x8];                                      // 0x0720(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnStationActorSpawned;                             // 0x0728(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationSpawnPointComponent">();
	}
	static class UTravelStationSpawnPointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelStationSpawnPointComponent>();
	}
};
static_assert(alignof(UTravelStationSpawnPointComponent) == 0x000008, "Wrong alignment on UTravelStationSpawnPointComponent");
static_assert(sizeof(UTravelStationSpawnPointComponent) == 0x000740, "Wrong size on UTravelStationSpawnPointComponent");
static_assert(offsetof(UTravelStationSpawnPointComponent, OnStationActorSpawned) == 0x000728, "Member 'UTravelStationSpawnPointComponent::OnStationActorSpawned' has a wrong offset!");

// Class GbxTravelStation.TravelStationVehicleSpawnPointComponent
// 0x0020 (0x0740 - 0x0720)
class UTravelStationVehicleSpawnPointComponent final : public UBoxComponent
{
public:
	uint8                                         Pad_720[0x8];                                      // 0x0720(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnStationActorSpawned;                             // 0x0728(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TravelStationVehicleSpawnPointComponent">();
	}
	static class UTravelStationVehicleSpawnPointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTravelStationVehicleSpawnPointComponent>();
	}
};
static_assert(alignof(UTravelStationVehicleSpawnPointComponent) == 0x000008, "Wrong alignment on UTravelStationVehicleSpawnPointComponent");
static_assert(sizeof(UTravelStationVehicleSpawnPointComponent) == 0x000740, "Wrong size on UTravelStationVehicleSpawnPointComponent");
static_assert(offsetof(UTravelStationVehicleSpawnPointComponent, OnStationActorSpawned) == 0x000728, "Member 'UTravelStationVehicleSpawnPointComponent::OnStationActorSpawned' has a wrong offset!");

}

