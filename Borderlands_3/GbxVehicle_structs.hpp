#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxVehicle

#include "Basic.hpp"

#include "GbxGameSystemCore_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum GbxVehicle.EInAirBehavior
// NumValues: 0x0004
enum class EInAirBehavior : uint8
{
	Continue                                 = 0,
	Pause                                    = 1,
	Stop                                     = 2,
	EInAirBehavior_MAX                       = 3,
};

// Enum GbxVehicle.EVehicleCameraRelativeDrivingMode
// NumValues: 0x0007
enum class EVehicleCameraRelativeDrivingMode : uint8
{
	Standard                                 = 0,
	ForwardOnly                              = 1,
	ReverseOnly                              = 2,
	Mixed                                    = 3,
	ForceReverse                             = 4,
	ClassicBL2                               = 5,
	EVehicleCameraRelativeDrivingMode_MAX    = 6,
};

// Enum GbxVehicle.EVehicleDriveType
// NumValues: 0x0005
enum class EVehicleDriveType : uint8
{
	Wheel4                                   = 0,
	WheelN                                   = 1,
	WheelNNoDrive                            = 2,
	Tank                                     = 3,
	EVehicleDriveType_MAX                    = 4,
};

// ScriptStruct GbxVehicle.PushbackCharactersTickFunction
// 0x0008 (0x0058 - 0x0050)
struct FPushbackCharactersTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPushbackCharactersTickFunction) == 0x000008, "Wrong alignment on FPushbackCharactersTickFunction");
static_assert(sizeof(FPushbackCharactersTickFunction) == 0x000058, "Wrong size on FPushbackCharactersTickFunction");

// ScriptStruct GbxVehicle.BoostPhysicsParams
// 0x0150 (0x0150 - 0x0000)
struct FBoostPhysicsParams final
{
public:
	float                                         RefVelForPowerCurveKmH;                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefAccelForPowerCurve;                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     BoostPower;                                        // 0x0008(0x0078)(Edit, NativeAccessSpecifierPublic)
	float                                         PowerOverTimeCurveBaseRatio;                       // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefTimeForPowerOverTimeCurve;                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     BoostPowerOverTime;                                // 0x0088(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FRelativeDirectionData                 BoostDirection;                                    // 0x0100(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoostPhysicsParams) == 0x000008, "Wrong alignment on FBoostPhysicsParams");
static_assert(sizeof(FBoostPhysicsParams) == 0x000150, "Wrong size on FBoostPhysicsParams");
static_assert(offsetof(FBoostPhysicsParams, RefVelForPowerCurveKmH) == 0x000000, "Member 'FBoostPhysicsParams::RefVelForPowerCurveKmH' has a wrong offset!");
static_assert(offsetof(FBoostPhysicsParams, RefAccelForPowerCurve) == 0x000004, "Member 'FBoostPhysicsParams::RefAccelForPowerCurve' has a wrong offset!");
static_assert(offsetof(FBoostPhysicsParams, BoostPower) == 0x000008, "Member 'FBoostPhysicsParams::BoostPower' has a wrong offset!");
static_assert(offsetof(FBoostPhysicsParams, PowerOverTimeCurveBaseRatio) == 0x000080, "Member 'FBoostPhysicsParams::PowerOverTimeCurveBaseRatio' has a wrong offset!");
static_assert(offsetof(FBoostPhysicsParams, RefTimeForPowerOverTimeCurve) == 0x000084, "Member 'FBoostPhysicsParams::RefTimeForPowerOverTimeCurve' has a wrong offset!");
static_assert(offsetof(FBoostPhysicsParams, BoostPowerOverTime) == 0x000088, "Member 'FBoostPhysicsParams::BoostPowerOverTime' has a wrong offset!");
static_assert(offsetof(FBoostPhysicsParams, BoostDirection) == 0x000100, "Member 'FBoostPhysicsParams::BoostDirection' has a wrong offset!");

// ScriptStruct GbxVehicle.ReplicatedHoverComponentState
// 0x0018 (0x0018 - 0x0000)
struct FReplicatedHoverComponentState final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrafeInput;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardInput;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x000C(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedHoverComponentState) == 0x000004, "Wrong alignment on FReplicatedHoverComponentState");
static_assert(sizeof(FReplicatedHoverComponentState) == 0x000018, "Wrong size on FReplicatedHoverComponentState");
static_assert(offsetof(FReplicatedHoverComponentState, bIsEnabled) == 0x000000, "Member 'FReplicatedHoverComponentState::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FReplicatedHoverComponentState, StrafeInput) == 0x000004, "Member 'FReplicatedHoverComponentState::StrafeInput' has a wrong offset!");
static_assert(offsetof(FReplicatedHoverComponentState, ForwardInput) == 0x000008, "Member 'FReplicatedHoverComponentState::ForwardInput' has a wrong offset!");
static_assert(offsetof(FReplicatedHoverComponentState, TargetRotation) == 0x00000C, "Member 'FReplicatedHoverComponentState::TargetRotation' has a wrong offset!");

// ScriptStruct GbxVehicle.AntiRollBarData
// 0x000C (0x000C - 0x0000)
struct FAntiRollBarData final
{
public:
	int32                                         WheelIndex1;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex2;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntiRollBarData) == 0x000004, "Wrong alignment on FAntiRollBarData");
static_assert(sizeof(FAntiRollBarData) == 0x00000C, "Wrong size on FAntiRollBarData");
static_assert(offsetof(FAntiRollBarData, WheelIndex1) == 0x000000, "Member 'FAntiRollBarData::WheelIndex1' has a wrong offset!");
static_assert(offsetof(FAntiRollBarData, WheelIndex2) == 0x000004, "Member 'FAntiRollBarData::WheelIndex2' has a wrong offset!");
static_assert(offsetof(FAntiRollBarData, Stiffness) == 0x000008, "Member 'FAntiRollBarData::Stiffness' has a wrong offset!");

// ScriptStruct GbxVehicle.ComplexWheelMovement
// 0x0078 (0x0078 - 0x0000)
struct FComplexWheelMovement final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         WheelReference;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         WheelSteeringPivotReference;                       // 0x0020(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ControlArmReference;                               // 0x0038(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PhysicalWheelReference;                            // 0x0050(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SuspensionDropMaxSpeed;                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0xC];                                       // 0x006C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComplexWheelMovement) == 0x000008, "Wrong alignment on FComplexWheelMovement");
static_assert(sizeof(FComplexWheelMovement) == 0x000078, "Wrong size on FComplexWheelMovement");
static_assert(offsetof(FComplexWheelMovement, WheelReference) == 0x000008, "Member 'FComplexWheelMovement::WheelReference' has a wrong offset!");
static_assert(offsetof(FComplexWheelMovement, WheelSteeringPivotReference) == 0x000020, "Member 'FComplexWheelMovement::WheelSteeringPivotReference' has a wrong offset!");
static_assert(offsetof(FComplexWheelMovement, ControlArmReference) == 0x000038, "Member 'FComplexWheelMovement::ControlArmReference' has a wrong offset!");
static_assert(offsetof(FComplexWheelMovement, PhysicalWheelReference) == 0x000050, "Member 'FComplexWheelMovement::PhysicalWheelReference' has a wrong offset!");
static_assert(offsetof(FComplexWheelMovement, SuspensionDropMaxSpeed) == 0x000068, "Member 'FComplexWheelMovement::SuspensionDropMaxSpeed' has a wrong offset!");

// ScriptStruct GbxVehicle.AnimNode_ComplexWheelHandler
// 0x0018 (0x0158 - 0x0140)
struct FAnimNode_ComplexWheelHandler final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FComplexWheelMovement>          WheelMovementSystems;                              // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ComplexWheelHandler) == 0x000008, "Wrong alignment on FAnimNode_ComplexWheelHandler");
static_assert(sizeof(FAnimNode_ComplexWheelHandler) == 0x000158, "Wrong size on FAnimNode_ComplexWheelHandler");
static_assert(offsetof(FAnimNode_ComplexWheelHandler, WheelMovementSystems) == 0x000140, "Member 'FAnimNode_ComplexWheelHandler::WheelMovementSystems' has a wrong offset!");

// ScriptStruct GbxVehicle.BoostRegenerateEvent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBoostRegenerateEvent final
{
public:
	float                                         BoostTarget;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             VehicleBoostValueReachedEvent;                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoostRegenerateEvent) == 0x000008, "Wrong alignment on FBoostRegenerateEvent");
static_assert(sizeof(FBoostRegenerateEvent) == 0x000018, "Wrong size on FBoostRegenerateEvent");
static_assert(offsetof(FBoostRegenerateEvent, BoostTarget) == 0x000000, "Member 'FBoostRegenerateEvent::BoostTarget' has a wrong offset!");
static_assert(offsetof(FBoostRegenerateEvent, VehicleBoostValueReachedEvent) == 0x000008, "Member 'FBoostRegenerateEvent::VehicleBoostValueReachedEvent' has a wrong offset!");

// ScriptStruct GbxVehicle.VehiclePartList
// 0x0010 (0x0010 - 0x0000)
struct FVehiclePartList final
{
public:
	TArray<class UVehiclePartData*>               Parts;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePartList) == 0x000008, "Wrong alignment on FVehiclePartList");
static_assert(sizeof(FVehiclePartList) == 0x000010, "Wrong size on FVehiclePartList");
static_assert(offsetof(FVehiclePartList, Parts) == 0x000000, "Member 'FVehiclePartList::Parts' has a wrong offset!");

}

