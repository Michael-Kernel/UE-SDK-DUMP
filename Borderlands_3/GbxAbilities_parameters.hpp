#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAbilities

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"


namespace SDK::Params
{

// Function GbxAbilities.GbxAbility.CalculateAbilityState
// 0x0001 (0x0001 - 0x0000)
struct GbxAbility_CalculateAbilityState final
{
public:
	EGbxAbilityState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbility_CalculateAbilityState) == 0x000001, "Wrong alignment on GbxAbility_CalculateAbilityState");
static_assert(sizeof(GbxAbility_CalculateAbilityState) == 0x000001, "Wrong size on GbxAbility_CalculateAbilityState");
static_assert(offsetof(GbxAbility_CalculateAbilityState, ReturnValue) == 0x000000, "Member 'GbxAbility_CalculateAbilityState::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbility.GetAbilityOwner
// 0x0008 (0x0008 - 0x0000)
struct GbxAbility_GetAbilityOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbility_GetAbilityOwner) == 0x000008, "Wrong alignment on GbxAbility_GetAbilityOwner");
static_assert(sizeof(GbxAbility_GetAbilityOwner) == 0x000008, "Wrong size on GbxAbility_GetAbilityOwner");
static_assert(offsetof(GbxAbility_GetAbilityOwner, ReturnValue) == 0x000000, "Member 'GbxAbility_GetAbilityOwner::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbility.IsReplicated
// 0x0001 (0x0001 - 0x0000)
struct GbxAbility_IsReplicated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbility_IsReplicated) == 0x000001, "Wrong alignment on GbxAbility_IsReplicated");
static_assert(sizeof(GbxAbility_IsReplicated) == 0x000001, "Wrong size on GbxAbility_IsReplicated");
static_assert(offsetof(GbxAbility_IsReplicated, ReturnValue) == 0x000000, "Member 'GbxAbility_IsReplicated::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbilityManagerComponent.AddAbility
// 0x0018 (0x0018 - 0x0000)
struct GbxAbilityManagerComponent_AddAbility final
{
public:
	struct FGbxAbilitySpec                        Spec;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxAbility*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityManagerComponent_AddAbility) == 0x000008, "Wrong alignment on GbxAbilityManagerComponent_AddAbility");
static_assert(sizeof(GbxAbilityManagerComponent_AddAbility) == 0x000018, "Wrong size on GbxAbilityManagerComponent_AddAbility");
static_assert(offsetof(GbxAbilityManagerComponent_AddAbility, Spec) == 0x000000, "Member 'GbxAbilityManagerComponent_AddAbility::Spec' has a wrong offset!");
static_assert(offsetof(GbxAbilityManagerComponent_AddAbility, ReturnValue) == 0x000010, "Member 'GbxAbilityManagerComponent_AddAbility::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbilityManagerComponent.RemoveAbility
// 0x0010 (0x0010 - 0x0000)
struct GbxAbilityManagerComponent_RemoveAbility final
{
public:
	TSubclassOf<class UGbxAbility>                AbilityClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxAbilityManagerComponent_RemoveAbility) == 0x000008, "Wrong alignment on GbxAbilityManagerComponent_RemoveAbility");
static_assert(sizeof(GbxAbilityManagerComponent_RemoveAbility) == 0x000010, "Wrong size on GbxAbilityManagerComponent_RemoveAbility");
static_assert(offsetof(GbxAbilityManagerComponent_RemoveAbility, AbilityClass) == 0x000000, "Member 'GbxAbilityManagerComponent_RemoveAbility::AbilityClass' has a wrong offset!");
static_assert(offsetof(GbxAbilityManagerComponent_RemoveAbility, ReturnValue) == 0x000008, "Member 'GbxAbilityManagerComponent_RemoveAbility::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbilityManagerComponent.FindAbility
// 0x0010 (0x0010 - 0x0000)
struct GbxAbilityManagerComponent_FindAbility final
{
public:
	TSubclassOf<class UGbxAbility>                AbilityClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxAbility*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityManagerComponent_FindAbility) == 0x000008, "Wrong alignment on GbxAbilityManagerComponent_FindAbility");
static_assert(sizeof(GbxAbilityManagerComponent_FindAbility) == 0x000010, "Wrong size on GbxAbilityManagerComponent_FindAbility");
static_assert(offsetof(GbxAbilityManagerComponent_FindAbility, AbilityClass) == 0x000000, "Member 'GbxAbilityManagerComponent_FindAbility::AbilityClass' has a wrong offset!");
static_assert(offsetof(GbxAbilityManagerComponent_FindAbility, ReturnValue) == 0x000008, "Member 'GbxAbilityManagerComponent_FindAbility::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbilityManagerComponent.HasAbility
// 0x0010 (0x0010 - 0x0000)
struct GbxAbilityManagerComponent_HasAbility final
{
public:
	TSubclassOf<class UGbxAbility>                AbilityClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxAbilityManagerComponent_HasAbility) == 0x000008, "Wrong alignment on GbxAbilityManagerComponent_HasAbility");
static_assert(sizeof(GbxAbilityManagerComponent_HasAbility) == 0x000010, "Wrong size on GbxAbilityManagerComponent_HasAbility");
static_assert(offsetof(GbxAbilityManagerComponent_HasAbility, AbilityClass) == 0x000000, "Member 'GbxAbilityManagerComponent_HasAbility::AbilityClass' has a wrong offset!");
static_assert(offsetof(GbxAbilityManagerComponent_HasAbility, ReturnValue) == 0x000008, "Member 'GbxAbilityManagerComponent_HasAbility::ReturnValue' has a wrong offset!");

// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.RegisterAbilityDelegate
// 0x0050 (0x0050 - 0x0000)
struct GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate final
{
public:
	struct FGbxAbilityResourceController_ScriptDelegate Controller;                                        // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGbxAbilityResourceSpec_ScriptDelegate Spec;                                              // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate) == 0x000008, "Wrong alignment on GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate");
static_assert(sizeof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate) == 0x000050, "Wrong size on GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate, Controller) == 0x000000, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate::Controller' has a wrong offset!");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate, Spec) == 0x000028, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate::Spec' has a wrong offset!");

// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.RegisterConditionalDamageModifier
// 0x0050 (0x0050 - 0x0000)
struct GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier final
{
public:
	struct FGbxAbilityResourceController_ConditionalDamageModifier Controller;                                        // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGbxAbilityResourceSpec_ConditionalDamageModifier Spec;                                              // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier) == 0x000008, "Wrong alignment on GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier");
static_assert(sizeof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier) == 0x000050, "Wrong size on GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier, Controller) == 0x000000, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier::Controller' has a wrong offset!");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier, Spec) == 0x000028, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier::Spec' has a wrong offset!");

// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.RegisterResourcePoolDelegate
// 0x0058 (0x0058 - 0x0000)
struct GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate final
{
public:
	struct FGbxAbilityResourceController_ResourcePoolDelegate Controller;                                        // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGbxAbilityResourceSpec_ResourcePoolDelegate Spec;                                              // 0x0028(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate) == 0x000008, "Wrong alignment on GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate");
static_assert(sizeof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate) == 0x000058, "Wrong size on GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate, Controller) == 0x000000, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate::Controller' has a wrong offset!");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate, Spec) == 0x000028, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate::Spec' has a wrong offset!");

// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.UnregisterAbilityDelegate
// 0x0050 (0x0050 - 0x0000)
struct GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate final
{
public:
	struct FGbxAbilityResourceController_ScriptDelegate Controller;                                        // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGbxAbilityResourceSpec_ScriptDelegate Spec;                                              // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate) == 0x000008, "Wrong alignment on GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate");
static_assert(sizeof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate) == 0x000050, "Wrong size on GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate, Controller) == 0x000000, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate::Controller' has a wrong offset!");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate, Spec) == 0x000028, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate::Spec' has a wrong offset!");

// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.UnregisterConditionalDamageModifier
// 0x0050 (0x0050 - 0x0000)
struct GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier final
{
public:
	struct FGbxAbilityResourceController_ConditionalDamageModifier Controller;                                        // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGbxAbilityResourceSpec_ConditionalDamageModifier Spec;                                              // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier) == 0x000008, "Wrong alignment on GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier");
static_assert(sizeof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier) == 0x000050, "Wrong size on GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier, Controller) == 0x000000, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier::Controller' has a wrong offset!");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier, Spec) == 0x000028, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier::Spec' has a wrong offset!");

// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.UnregisterResourcePoolDelegate
// 0x0058 (0x0058 - 0x0000)
struct GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate final
{
public:
	struct FGbxAbilityResourceController_ResourcePoolDelegate Controller;                                        // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGbxAbilityResourceSpec_ResourcePoolDelegate Spec;                                              // 0x0028(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate) == 0x000008, "Wrong alignment on GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate");
static_assert(sizeof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate) == 0x000058, "Wrong size on GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate, Controller) == 0x000000, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate::Controller' has a wrong offset!");
static_assert(offsetof(GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate, Spec) == 0x000028, "Member 'GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate::Spec' has a wrong offset!");

}

