#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_DLC2_Hunt_Stat

#include "Basic.hpp"

#include "Challenge_DLC2_Hunt_Stat_classes.hpp"
#include "Challenge_DLC2_Hunt_Stat_parameters.hpp"


namespace SDK
{

// Function Challenge_DLC2_Hunt_Stat.Challenge_DLC2_Hunt_Stat_C.ExecuteUbergraph_Challenge_DLC2_Hunt_Stat
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_DLC2_Hunt_Stat_C::ExecuteUbergraph_Challenge_DLC2_Hunt_Stat(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_DLC2_Hunt_Stat_C", "ExecuteUbergraph_Challenge_DLC2_Hunt_Stat");

	Params::Challenge_DLC2_Hunt_Stat_C_ExecuteUbergraph_Challenge_DLC2_Hunt_Stat Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_DLC2_Hunt_Stat.Challenge_DLC2_Hunt_Stat_C.OnInitChallengeInstance
// (Event, Public, BlueprintEvent)
// Parameters:
// class UChallengesComponent*             OwningChallenges                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AGbxCharacter*                    AssociatedCharacter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_DLC2_Hunt_Stat_C::OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_DLC2_Hunt_Stat_C", "OnInitChallengeInstance");

	Params::Challenge_DLC2_Hunt_Stat_C_OnInitChallengeInstance Parms{};

	Parms.OwningChallenges = OwningChallenges;
	Parms.AssociatedCharacter = AssociatedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_DLC2_Hunt_Stat.Challenge_DLC2_Hunt_Stat_C.CompletedChallenge
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGbxPlayerController*             CompletedPlayer                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_DLC2_Hunt_Stat_C::CompletedChallenge(const class AGbxPlayerController* CompletedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_DLC2_Hunt_Stat_C", "CompletedChallenge");

	Params::Challenge_DLC2_Hunt_Stat_C_CompletedChallenge Parms{};

	Parms.CompletedPlayer = CompletedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_DLC2_Hunt_Stat.Challenge_DLC2_Hunt_Stat_C.PlayCompletionVO
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGbxPlayerController*             PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDialogTimeSlotReference         TimeSlot                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Played_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallenge_DLC2_Hunt_Stat_C::PlayCompletionVO(class AGbxPlayerController* PlayerController, const struct FDialogTimeSlotReference& TimeSlot, bool* Played_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_DLC2_Hunt_Stat_C", "PlayCompletionVO");

	Params::Challenge_DLC2_Hunt_Stat_C_PlayCompletionVO Parms{};

	Parms.PlayerController = PlayerController;
	Parms.TimeSlot = std::move(TimeSlot);

	UObject::ProcessEvent(Func, &Parms);

	if (Played_ != nullptr)
		*Played_ = Parms.Played_;
}

}

