#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ExplodingObject

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "Enum_ExplodingObjectState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WwiseAudio_structs.hpp"
#include "Enum_ExplodingObjectDamage_structs.hpp"
#include "Enum_IO_Combat_Barrel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ExplodingObject.BP_ExplodingObject_C
// 0x0108 (0x0658 - 0x0550)
class ABP_ExplodingObject_C : public AInteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(Transient, DuplicateTransient)
	class USocketComponent*                       Socket_Loot;                                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxActionComponent*                    GbxAction;                                         // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocketComponent*                       Socket_Damage;                                     // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakDamageComponent*                    OakDamage;                                         // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URigidBodyComponent*                    SM_ExplodingObject;                                // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetableComponent*                   Targetable;                                        // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URegionBalanceStateComponent*           RegionBalanceState;                                // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxNavMeshPainterComponent*            GbxNavMeshPainter;                                 // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          NavPaintCollision;                                 // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_PostExplosion;                                  // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_Fuse;                                           // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          PhysicsSim_;                                       // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          PhysicsDetonation_;                                // 0x05B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BA[0x2];                                      // 0x05BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicsDetonation_ImpulseToStartFuse;              // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   Exploded;                                          // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         PhysicsDetonation_ImpulseToExplode;                // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Attacker;                                          // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 FuseAudioInstance;                                 // 0x05E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DamageTypes;                                       // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_ExplodingObjectDamage                    DamageType;                                        // 0x05FC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	Enum_ExplodingObjectState                     ExplodingObjectState;                              // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE[0x2];                                      // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDA_ExplodingObject_C*                  ExplodingObject;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDA_ExplodingObjectPresentation_C*      Presentation;                                      // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyOnCleanup;                                  // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_611[0x3];                                      // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplodeDelay_Explosion;                            // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeDelay_Puddle;                               // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeDelay_Cloud;                                // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeDelay_Loot;                                 // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImpulseOnExplode_;                                 // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseOnExplode_Force;                            // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseOnExplode_ForceExtra;                       // 0x062C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeDelay_MeshSwap;                             // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          Cond_ExplodingObjectState_NewEnumerator1;          // 0x0640(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_ExplodingObjectState_NewEnumerator2;          // 0x0648(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_ExplodingObjectState_NewEnumerator3;          // 0x0650(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Exploded__DelegateSignature();
	void ExecuteUbergraph_BP_ExplodingObject(int32 EntryPoint);
	void BPI_SetNavPainterEnabled(bool Enabled);
	void BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_3_ComponentSleepSignature__DelegateSignature_BP_ExplodingObject(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_0_ComponentWakeSignature__DelegateSignature_BP_ExplodingObject(class UPrimitiveComponent* WakingComponent, class FName BoneName);
	void Explode();
	void Explode_Loot();
	void Explode_Cloud();
	void Explode_Puddle();
	void Explode_Damage();
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_1_TakeAnyPipelineDamageDelegate__DelegateSignature_BP_ExplodingObject(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType_0, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details);
	void __UserState_ExplodingObjectState_3(bool bFromLoad);
	void __UserState_ExplodingObjectState_2(bool bFromLoad);
	void __UserState_ExplodingObjectState_1(bool bFromLoad);
	void __UserState_ExplodingObjectState_0(bool bFromLoad);
	void ReceiveBeginPlay();
	void BPI_StartFuse();
	void BPI_SetSimulatePhysics(bool PhysicsOn_);
	void BPI_ImpulseThrow(const struct FVector& ThrowVector, float Force, const struct FRotator& RotatorForSpin, float FuseSpeedScale, const struct FVector& AdditiveVector);
	void BPI_Explode();
	void BndEvt__SM_Barrel_K2Node_ComponentBoundEvent_9_ComponentHitSignature__DelegateSignature_IO_Combat_Barrel_Universal(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BPI_ResetHealth();
	void UserConstructionScript();
	void Setup_RandomizeDamageType();
	void Setup_ExplodingObject(class UDA_ExplodingObjectPresentation_C* NewPresentation, class UMaterialInstanceDynamic** DynamicMI);
	void ThrowExplodingObject(const struct FVector& ThrowVector, float Force, const struct FRotator& RotatorForSpin, const struct FVector& OptionalAdditiveVector);
	void OnRep_DamageType();
	void VisualState_FuseStart();
	void VisualState_FuseStop();
	void Get_DamageType(Enum_ExplodingObjectDamage* DamageType_0);
	void VisualState_ExplodedStart();
	void VisualState_ExplodedStop();
	void Damaged(const class UGbxDamageType* DamageType_0, const class UDamageSource* DamageSource);
	void SetSimulatePhysics(bool bNewSimulate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ExplodingObject_C">();
	}
	static class ABP_ExplodingObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ExplodingObject_C>();
	}
};
static_assert(alignof(ABP_ExplodingObject_C) == 0x000008, "Wrong alignment on ABP_ExplodingObject_C");
static_assert(sizeof(ABP_ExplodingObject_C) == 0x000658, "Wrong size on ABP_ExplodingObject_C");
static_assert(offsetof(ABP_ExplodingObject_C, UberGraphFrame) == 0x000550, "Member 'ABP_ExplodingObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Socket_Loot) == 0x000558, "Member 'ABP_ExplodingObject_C::Socket_Loot' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, GbxAction) == 0x000560, "Member 'ABP_ExplodingObject_C::GbxAction' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Socket_Damage) == 0x000568, "Member 'ABP_ExplodingObject_C::Socket_Damage' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, OakDamage) == 0x000570, "Member 'ABP_ExplodingObject_C::OakDamage' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, SM_ExplodingObject) == 0x000578, "Member 'ABP_ExplodingObject_C::SM_ExplodingObject' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, AIPerceptionStimuliSource) == 0x000580, "Member 'ABP_ExplodingObject_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Targetable) == 0x000588, "Member 'ABP_ExplodingObject_C::Targetable' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, RegionBalanceState) == 0x000590, "Member 'ABP_ExplodingObject_C::RegionBalanceState' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, GbxNavMeshPainter) == 0x000598, "Member 'ABP_ExplodingObject_C::GbxNavMeshPainter' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, NavPaintCollision) == 0x0005A0, "Member 'ABP_ExplodingObject_C::NavPaintCollision' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, FX_PostExplosion) == 0x0005A8, "Member 'ABP_ExplodingObject_C::FX_PostExplosion' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, FX_Fuse) == 0x0005B0, "Member 'ABP_ExplodingObject_C::FX_Fuse' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, PhysicsSim_) == 0x0005B8, "Member 'ABP_ExplodingObject_C::PhysicsSim_' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, PhysicsDetonation_) == 0x0005B9, "Member 'ABP_ExplodingObject_C::PhysicsDetonation_' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, PhysicsDetonation_ImpulseToStartFuse) == 0x0005BC, "Member 'ABP_ExplodingObject_C::PhysicsDetonation_ImpulseToStartFuse' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Exploded) == 0x0005C0, "Member 'ABP_ExplodingObject_C::Exploded' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, PhysicsDetonation_ImpulseToExplode) == 0x0005D0, "Member 'ABP_ExplodingObject_C::PhysicsDetonation_ImpulseToExplode' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Attacker) == 0x0005D8, "Member 'ABP_ExplodingObject_C::Attacker' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, FuseAudioInstance) == 0x0005E0, "Member 'ABP_ExplodingObject_C::FuseAudioInstance' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, DamageTypes) == 0x0005F8, "Member 'ABP_ExplodingObject_C::DamageTypes' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, DamageType) == 0x0005FC, "Member 'ABP_ExplodingObject_C::DamageType' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodingObjectState) == 0x0005FD, "Member 'ABP_ExplodingObject_C::ExplodingObjectState' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodingObject) == 0x000600, "Member 'ABP_ExplodingObject_C::ExplodingObject' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Presentation) == 0x000608, "Member 'ABP_ExplodingObject_C::Presentation' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, DestroyOnCleanup) == 0x000610, "Member 'ABP_ExplodingObject_C::DestroyOnCleanup' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodeDelay_Explosion) == 0x000614, "Member 'ABP_ExplodingObject_C::ExplodeDelay_Explosion' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodeDelay_Puddle) == 0x000618, "Member 'ABP_ExplodingObject_C::ExplodeDelay_Puddle' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodeDelay_Cloud) == 0x00061C, "Member 'ABP_ExplodingObject_C::ExplodeDelay_Cloud' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodeDelay_Loot) == 0x000620, "Member 'ABP_ExplodingObject_C::ExplodeDelay_Loot' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ImpulseOnExplode_) == 0x000624, "Member 'ABP_ExplodingObject_C::ImpulseOnExplode_' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ImpulseOnExplode_Force) == 0x000628, "Member 'ABP_ExplodingObject_C::ImpulseOnExplode_Force' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ImpulseOnExplode_ForceExtra) == 0x00062C, "Member 'ABP_ExplodingObject_C::ImpulseOnExplode_ForceExtra' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, ExplodeDelay_MeshSwap) == 0x000638, "Member 'ABP_ExplodingObject_C::ExplodeDelay_MeshSwap' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Cond_ExplodingObjectState_NewEnumerator1) == 0x000640, "Member 'ABP_ExplodingObject_C::Cond_ExplodingObjectState_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Cond_ExplodingObjectState_NewEnumerator2) == 0x000648, "Member 'ABP_ExplodingObject_C::Cond_ExplodingObjectState_NewEnumerator2' has a wrong offset!");
static_assert(offsetof(ABP_ExplodingObject_C, Cond_ExplodingObjectState_NewEnumerator3) == 0x000650, "Member 'ABP_ExplodingObject_C::Cond_ExplodingObjectState_NewEnumerator3' has a wrong offset!");

}

