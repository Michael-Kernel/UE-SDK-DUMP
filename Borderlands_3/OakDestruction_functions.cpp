#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OakDestruction

#include "Basic.hpp"

#include "OakDestruction_classes.hpp"
#include "OakDestruction_parameters.hpp"


namespace SDK
{

// Function OakDestruction.OakDestructibleFXManager.ClientApplyDamage
// (Net, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// uint32                                  SyncID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpulseDir                                             (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AOakDestructibleFXManager::ClientApplyDamage(uint32 SyncID, float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OakDestructibleFXManager", "ClientApplyDamage");

	Params::OakDestructibleFXManager_ClientApplyDamage Parms{};

	Parms.SyncID = SyncID;
	Parms.DamageAmount = DamageAmount;
	Parms.HitLocation = std::move(HitLocation);
	Parms.ImpulseDir = std::move(ImpulseDir);
	Parms.ImpulseStrength = ImpulseStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OakDestruction.OakDestructibleFXManager.ClientApplyRadiusDamage
// (Net, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// uint32                                  SyncID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HurtOrigin                                             (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFullDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AOakDestructibleFXManager::ClientApplyRadiusDamage(uint32 SyncID, float DamageAmount, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OakDestructibleFXManager", "ClientApplyRadiusDamage");

	Params::OakDestructibleFXManager_ClientApplyRadiusDamage Parms{};

	Parms.SyncID = SyncID;
	Parms.DamageAmount = DamageAmount;
	Parms.HurtOrigin = std::move(HurtOrigin);
	Parms.DamageRadius = DamageRadius;
	Parms.ImpulseStrength = ImpulseStrength;
	Parms.bFullDamage = bFullDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OakDestruction.OakDestructibleFXManager.DestroyAllDestructibles
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AOakDestructibleFXManager::DestroyAllDestructibles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OakDestructibleFXManager", "DestroyAllDestructibles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OakDestruction.OakDestructibleFXManager.OnDestructibleDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AOakDestructibleFXManager::OnDestructibleDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OakDestructibleFXManager", "OnDestructibleDestroyed");

	Params::OakDestructibleFXManager_OnDestructibleDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

