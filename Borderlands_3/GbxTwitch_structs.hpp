#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTwitch

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct GbxTwitch.TwitchStreamInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FTwitchStreamInfo final
{
public:
	class FString                                 StreamID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserDisplayName;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserLogin;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameID;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameName;                                          // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLive;                                           // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewerCount;                                       // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartedAt;                                         // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwitchStreamInfo) == 0x000008, "Wrong alignment on FTwitchStreamInfo");
static_assert(sizeof(FTwitchStreamInfo) == 0x0000A0, "Wrong size on FTwitchStreamInfo");
static_assert(offsetof(FTwitchStreamInfo, StreamID) == 0x000000, "Member 'FTwitchStreamInfo::StreamID' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, UserID) == 0x000010, "Member 'FTwitchStreamInfo::UserID' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, UserDisplayName) == 0x000020, "Member 'FTwitchStreamInfo::UserDisplayName' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, UserLogin) == 0x000030, "Member 'FTwitchStreamInfo::UserLogin' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, GameID) == 0x000040, "Member 'FTwitchStreamInfo::GameID' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, GameName) == 0x000050, "Member 'FTwitchStreamInfo::GameName' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, bIsLive) == 0x000060, "Member 'FTwitchStreamInfo::bIsLive' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, Title) == 0x000068, "Member 'FTwitchStreamInfo::Title' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, ViewerCount) == 0x000078, "Member 'FTwitchStreamInfo::ViewerCount' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, StartedAt) == 0x000080, "Member 'FTwitchStreamInfo::StartedAt' has a wrong offset!");
static_assert(offsetof(FTwitchStreamInfo, Language) == 0x000090, "Member 'FTwitchStreamInfo::Language' has a wrong offset!");

// ScriptStruct GbxTwitch.TwitchExtensionInfo
// 0x0050 (0x0050 - 0x0000)
struct FTwitchExtensionInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanActivate;                                      // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Type;                                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTwitchExtensionInfo) == 0x000008, "Wrong alignment on FTwitchExtensionInfo");
static_assert(sizeof(FTwitchExtensionInfo) == 0x000050, "Wrong size on FTwitchExtensionInfo");
static_assert(offsetof(FTwitchExtensionInfo, ID) == 0x000000, "Member 'FTwitchExtensionInfo::ID' has a wrong offset!");
static_assert(offsetof(FTwitchExtensionInfo, Version) == 0x000010, "Member 'FTwitchExtensionInfo::Version' has a wrong offset!");
static_assert(offsetof(FTwitchExtensionInfo, Name) == 0x000020, "Member 'FTwitchExtensionInfo::Name' has a wrong offset!");
static_assert(offsetof(FTwitchExtensionInfo, bCanActivate) == 0x000030, "Member 'FTwitchExtensionInfo::bCanActivate' has a wrong offset!");
static_assert(offsetof(FTwitchExtensionInfo, Type) == 0x000038, "Member 'FTwitchExtensionInfo::Type' has a wrong offset!");
static_assert(offsetof(FTwitchExtensionInfo, bActive) == 0x000048, "Member 'FTwitchExtensionInfo::bActive' has a wrong offset!");

// ScriptStruct GbxTwitch.TwitchActiveExtensionsInfo
// 0x0030 (0x0030 - 0x0000)
struct FTwitchActiveExtensionsInfo final
{
public:
	TArray<struct FTwitchExtensionInfo>           PanelExtensions;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTwitchExtensionInfo>           OverlayExtensions;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTwitchExtensionInfo>           ComponentExtensions;                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwitchActiveExtensionsInfo) == 0x000008, "Wrong alignment on FTwitchActiveExtensionsInfo");
static_assert(sizeof(FTwitchActiveExtensionsInfo) == 0x000030, "Wrong size on FTwitchActiveExtensionsInfo");
static_assert(offsetof(FTwitchActiveExtensionsInfo, PanelExtensions) == 0x000000, "Member 'FTwitchActiveExtensionsInfo::PanelExtensions' has a wrong offset!");
static_assert(offsetof(FTwitchActiveExtensionsInfo, OverlayExtensions) == 0x000010, "Member 'FTwitchActiveExtensionsInfo::OverlayExtensions' has a wrong offset!");
static_assert(offsetof(FTwitchActiveExtensionsInfo, ComponentExtensions) == 0x000020, "Member 'FTwitchActiveExtensionsInfo::ComponentExtensions' has a wrong offset!");

// ScriptStruct GbxTwitch.TwitchChannelMessage
// 0x0030 (0x0030 - 0x0000)
struct FTwitchChannelMessage final
{
public:
	class FString                                 Channel;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserMessage;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwitchChannelMessage) == 0x000008, "Wrong alignment on FTwitchChannelMessage");
static_assert(sizeof(FTwitchChannelMessage) == 0x000030, "Wrong size on FTwitchChannelMessage");
static_assert(offsetof(FTwitchChannelMessage, Channel) == 0x000000, "Member 'FTwitchChannelMessage::Channel' has a wrong offset!");
static_assert(offsetof(FTwitchChannelMessage, UserName) == 0x000010, "Member 'FTwitchChannelMessage::UserName' has a wrong offset!");
static_assert(offsetof(FTwitchChannelMessage, UserMessage) == 0x000020, "Member 'FTwitchChannelMessage::UserMessage' has a wrong offset!");

// ScriptStruct GbxTwitch.TwitchStreamsRequest
// 0x0068 (0x0068 - 0x0000)
struct FTwitchStreamsRequest final
{
public:
	struct FGuid                                  RequestGuid;                                       // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTwitchStreamInfo>              StreamsFound;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<struct FTwitchStreamInfo>& Streams)> OnStreamInfoReceived;                              // 0x0020(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bResponseReceived;                                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGameNameResolved;                                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserNameResolved;                                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNbStreams;                                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameName;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserLogin;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwitchStreamsRequest) == 0x000008, "Wrong alignment on FTwitchStreamsRequest");
static_assert(sizeof(FTwitchStreamsRequest) == 0x000068, "Wrong size on FTwitchStreamsRequest");
static_assert(offsetof(FTwitchStreamsRequest, RequestGuid) == 0x000000, "Member 'FTwitchStreamsRequest::RequestGuid' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, StreamsFound) == 0x000010, "Member 'FTwitchStreamsRequest::StreamsFound' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, OnStreamInfoReceived) == 0x000020, "Member 'FTwitchStreamsRequest::OnStreamInfoReceived' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, bResponseReceived) == 0x000030, "Member 'FTwitchStreamsRequest::bResponseReceived' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, bGameNameResolved) == 0x000031, "Member 'FTwitchStreamsRequest::bGameNameResolved' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, bUserNameResolved) == 0x000032, "Member 'FTwitchStreamsRequest::bUserNameResolved' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, MaxNbStreams) == 0x000034, "Member 'FTwitchStreamsRequest::MaxNbStreams' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, GameName) == 0x000038, "Member 'FTwitchStreamsRequest::GameName' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, UserLogin) == 0x000048, "Member 'FTwitchStreamsRequest::UserLogin' has a wrong offset!");
static_assert(offsetof(FTwitchStreamsRequest, Language) == 0x000058, "Member 'FTwitchStreamsRequest::Language' has a wrong offset!");

// ScriptStruct GbxTwitch.TwitchUserInfo
// 0x0058 (0x0058 - 0x0000)
struct FTwitchUserInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Login;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewCount;                                         // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTwitchUserInfo) == 0x000008, "Wrong alignment on FTwitchUserInfo");
static_assert(sizeof(FTwitchUserInfo) == 0x000058, "Wrong size on FTwitchUserInfo");
static_assert(offsetof(FTwitchUserInfo, ID) == 0x000000, "Member 'FTwitchUserInfo::ID' has a wrong offset!");
static_assert(offsetof(FTwitchUserInfo, Login) == 0x000010, "Member 'FTwitchUserInfo::Login' has a wrong offset!");
static_assert(offsetof(FTwitchUserInfo, DisplayName) == 0x000020, "Member 'FTwitchUserInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FTwitchUserInfo, Type) == 0x000030, "Member 'FTwitchUserInfo::Type' has a wrong offset!");
static_assert(offsetof(FTwitchUserInfo, Description) == 0x000040, "Member 'FTwitchUserInfo::Description' has a wrong offset!");
static_assert(offsetof(FTwitchUserInfo, ViewCount) == 0x000050, "Member 'FTwitchUserInfo::ViewCount' has a wrong offset!");

// ScriptStruct GbxTwitch.TwitchChannel
// 0x0058 (0x0058 - 0x0000)
struct FTwitchChannel final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChannelName;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelDescription;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ChannelActiveUsers;                                // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTwitchChannelMessage>          IncomingChannelMessage;                            // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FTwitchChannelMessage& ChannelUserMessage)> OnMessageReceived;                                 // 0x0048(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwitchChannel) == 0x000008, "Wrong alignment on FTwitchChannel");
static_assert(sizeof(FTwitchChannel) == 0x000058, "Wrong size on FTwitchChannel");
static_assert(offsetof(FTwitchChannel, ChannelName) == 0x000008, "Member 'FTwitchChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(FTwitchChannel, ChannelDescription) == 0x000018, "Member 'FTwitchChannel::ChannelDescription' has a wrong offset!");
static_assert(offsetof(FTwitchChannel, ChannelActiveUsers) == 0x000028, "Member 'FTwitchChannel::ChannelActiveUsers' has a wrong offset!");
static_assert(offsetof(FTwitchChannel, IncomingChannelMessage) == 0x000038, "Member 'FTwitchChannel::IncomingChannelMessage' has a wrong offset!");
static_assert(offsetof(FTwitchChannel, OnMessageReceived) == 0x000048, "Member 'FTwitchChannel::OnMessageReceived' has a wrong offset!");

}

