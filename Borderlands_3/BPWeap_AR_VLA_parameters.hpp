#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_AR_VLA

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.ExecuteUbergraph_BPWeap_AR_VLA
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AWeapon* EventWeapon)>   K2Node_CreateDelegate_OutputDelegate1;             // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA) == 0x000008, "Wrong alignment on BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA");
static_assert(sizeof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA) == 0x000038, "Wrong size on BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA");
static_assert(offsetof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA, EntryPoint) == 0x000000, "Member 'BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA, K2Node_Event_EndPlayReason) == 0x000004, "Member 'BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA, K2Node_CreateDelegate_OutputDelegate1) == 0x000018, "Member 'BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA, K2Node_CreateDelegate_OutputDelegate2) == 0x000028, "Member 'BPWeap_AR_VLA_C_ExecuteUbergraph_BPWeap_AR_VLA::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BPWeap_AR_VLA_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_AR_VLA_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BPWeap_AR_VLA_C_ReceiveEndPlay");
static_assert(sizeof(BPWeap_AR_VLA_C_ReceiveEndPlay) == 0x000001, "Wrong size on BPWeap_AR_VLA_C_ReceiveEndPlay");
static_assert(offsetof(BPWeap_AR_VLA_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BPWeap_AR_VLA_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.OnEquipped
// 0x0005 (0x0005 - 0x0000)
struct BPWeap_AR_VLA_C_OnEquipped final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_AR_VLA_C_OnEquipped) == 0x000001, "Wrong alignment on BPWeap_AR_VLA_C_OnEquipped");
static_assert(sizeof(BPWeap_AR_VLA_C_OnEquipped) == 0x000005, "Wrong size on BPWeap_AR_VLA_C_OnEquipped");
static_assert(offsetof(BPWeap_AR_VLA_C_OnEquipped, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BPWeap_AR_VLA_C_OnEquipped::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_OnEquipped, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000001, "Member 'BPWeap_AR_VLA_C_OnEquipped::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_OnEquipped, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000002, "Member 'BPWeap_AR_VLA_C_OnEquipped::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_OnEquipped, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BPWeap_AR_VLA_C_OnEquipped::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_OnEquipped, CallFunc_BooleanAND_ReturnValue1) == 0x000004, "Member 'BPWeap_AR_VLA_C_OnEquipped::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.OnPutDown
// 0x0008 (0x0008 - 0x0000)
struct BPWeap_AR_VLA_C_OnPutDown final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_AR_VLA_C_OnPutDown) == 0x000008, "Wrong alignment on BPWeap_AR_VLA_C_OnPutDown");
static_assert(sizeof(BPWeap_AR_VLA_C_OnPutDown) == 0x000008, "Wrong size on BPWeap_AR_VLA_C_OnPutDown");
static_assert(offsetof(BPWeap_AR_VLA_C_OnPutDown, Weapon) == 0x000000, "Member 'BPWeap_AR_VLA_C_OnPutDown::Weapon' has a wrong offset!");

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.Update_Bipod_FX
// 0x0001 (0x0001 - 0x0000)
struct BPWeap_AR_VLA_C_Update_Bipod_FX final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_AR_VLA_C_Update_Bipod_FX) == 0x000001, "Wrong alignment on BPWeap_AR_VLA_C_Update_Bipod_FX");
static_assert(sizeof(BPWeap_AR_VLA_C_Update_Bipod_FX) == 0x000001, "Wrong size on BPWeap_AR_VLA_C_Update_Bipod_FX");
static_assert(offsetof(BPWeap_AR_VLA_C_Update_Bipod_FX, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BPWeap_AR_VLA_C_Update_Bipod_FX::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.OnSwitchedMode
// 0x0003 (0x0003 - 0x0000)
struct BPWeap_AR_VLA_C_OnSwitchedMode final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_AR_VLA_C_OnSwitchedMode) == 0x000001, "Wrong alignment on BPWeap_AR_VLA_C_OnSwitchedMode");
static_assert(sizeof(BPWeap_AR_VLA_C_OnSwitchedMode) == 0x000003, "Wrong size on BPWeap_AR_VLA_C_OnSwitchedMode");
static_assert(offsetof(BPWeap_AR_VLA_C_OnSwitchedMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BPWeap_AR_VLA_C_OnSwitchedMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_OnSwitchedMode, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000001, "Member 'BPWeap_AR_VLA_C_OnSwitchedMode::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_OnSwitchedMode, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BPWeap_AR_VLA_C_OnSwitchedMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BPWeap_AR_VLA.BPWeap_AR_VLA_C.UpdateResourceLocks
// 0x0030 (0x0030 - 0x0000)
struct BPWeap_AR_VLA_C_UpdateResourceLocks final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ResourceLockReason;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue1;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue2;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_AR_VLA_C_UpdateResourceLocks) == 0x000008, "Wrong alignment on BPWeap_AR_VLA_C_UpdateResourceLocks");
static_assert(sizeof(BPWeap_AR_VLA_C_UpdateResourceLocks) == 0x000030, "Wrong size on BPWeap_AR_VLA_C_UpdateResourceLocks");
static_assert(offsetof(BPWeap_AR_VLA_C_UpdateResourceLocks, Enable) == 0x000000, "Member 'BPWeap_AR_VLA_C_UpdateResourceLocks::Enable' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_UpdateResourceLocks, ResourceLockReason) == 0x000008, "Member 'BPWeap_AR_VLA_C_UpdateResourceLocks::ResourceLockReason' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_UpdateResourceLocks, CallFunc_GetInstigator_ReturnValue) == 0x000010, "Member 'BPWeap_AR_VLA_C_UpdateResourceLocks::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_UpdateResourceLocks, CallFunc_GetInstigator_ReturnValue1) == 0x000018, "Member 'BPWeap_AR_VLA_C_UpdateResourceLocks::CallFunc_GetInstigator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_UpdateResourceLocks, CallFunc_GetInstigator_ReturnValue2) == 0x000020, "Member 'BPWeap_AR_VLA_C_UpdateResourceLocks::CallFunc_GetInstigator_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWeap_AR_VLA_C_UpdateResourceLocks, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BPWeap_AR_VLA_C_UpdateResourceLocks::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

