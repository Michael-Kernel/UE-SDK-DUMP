#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WwiseAudio

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum WwiseAudio.EWwiseTrackDirectionality
// NumValues: 0x0004
enum class EWwiseTrackDirectionality : uint32
{
	ForwardsAndBackwards                     = 0,
	OnlyForwards                             = 1,
	OnlyBackwards                            = 2,
	EWwiseTrackDirectionality_MAX            = 3,
};

// Enum WwiseAudio.EWwiseAudioComponentPoolMode
// NumValues: 0x0003
enum class EWwiseAudioComponentPoolMode : uint8
{
	Fixed                                    = 0,
	Steal                                    = 1,
	EWwiseAudioComponentPoolMode_MAX         = 2,
};

// Enum WwiseAudio.EWwisePlaybackConfiguration
// NumValues: 0x0007
enum class EWwisePlaybackConfiguration : uint32
{
	Hifi                                     = 0,
	Small                                    = 1,
	Headphones                               = 2,
	NightTime                                = 3,
	Mono                                     = 4,
	Spatial                                  = 5,
	EWwisePlaybackConfiguration_MAX          = 6,
};

// Enum WwiseAudio.EBankLoadState
// NumValues: 0x0004
enum class EBankLoadState : uint8
{
	Unloaded                                 = 0,
	AsyncLoading                             = 1,
	Loaded                                   = 2,
	EBankLoadState_MAX                       = 3,
};

// Enum WwiseAudio.EAcousticsMode
// NumValues: 0x0006
enum class EAcousticsMode : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	EnabledUnconditionalSampleMode           = 2,
	EnabledOmnidirectional                   = 3,
	UsePlayerLocationForAcoustics            = 4,
	EAcousticsMode_MAX                       = 5,
};

// Enum WwiseAudio.EWwiseMultiPositionType
// NumValues: 0x0003
enum class EWwiseMultiPositionType : uint8
{
	MultiSources                             = 1,
	MultiDirections                          = 2,
	EWwiseMultiPositionType_MAX              = 3,
};

// Enum WwiseAudio.EWwiseCurveInterpolation
// NumValues: 0x000A
enum class EWwiseCurveInterpolation : uint8
{
	Log3                                     = 0,
	Sine                                     = 1,
	Log1                                     = 2,
	InvSCurve                                = 3,
	Linear                                   = 4,
	SCurve                                   = 5,
	Exp1                                     = 6,
	SineRecip                                = 7,
	Exp3                                     = 8,
	EWwiseCurveInterpolation_MAX             = 9,
};

// Enum WwiseAudio.EWwiseEventAction
// NumValues: 0x0006
enum class EWwiseEventAction : uint8
{
	Stop                                     = 0,
	Pause                                    = 1,
	Resume                                   = 2,
	Break                                    = 3,
	ReleaseEnvelope                          = 4,
	EWwiseEventAction_MAX                    = 5,
};

// Enum WwiseAudio.EWwisePostEventFlags
// NumValues: 0x0005
enum class EWwisePostEventFlags : uint8
{
	MarkerCallbacks                          = 0,
	SupportDuration                          = 1,
	SupportPlaybackPosition                  = 2,
	MusicSyncCallbacks                       = 3,
	EWwisePostEventFlags_MAX                 = 4,
};

// Enum WwiseAudio.EWwiseAudioComponentMixBehavior
// NumValues: 0x0004
enum class EWwiseAudioComponentMixBehavior : uint8
{
	Standard                                 = 0,
	DirectToMasterMix                        = 1,
	MixGroup                                 = 2,
	EWwiseAudioComponentMixBehavior_MAX      = 3,
};

// Enum WwiseAudio.EWwiseAudioComponentType
// NumValues: 0x0005
enum class EWwiseAudioComponentType : uint8
{
	Standard                                 = 0,
	ActorDefault                             = 1,
	Temporary                                = 2,
	Pooled                                   = 3,
	EWwiseAudioComponentType_MAX             = 4,
};

// Enum WwiseAudio.EWwiseEffectType
// NumValues: 0x0002
enum class EWwiseEffectType : uint8
{
	ListenerEnvironmentalEffect              = 0,
	EWwiseEffectType_MAX                     = 1,
};

// Enum WwiseAudio.EWwiseDebugFlags
// NumValues: 0x0008
enum class EWwiseDebugFlags : uint8
{
	ShowOwner                                = 0,
	ShowComponentType                        = 1,
	ShowEventNames                           = 2,
	ShowDistanceToListener                   = 3,
	HideActiveComponents                     = 4,
	ShowHibernatingComponents                = 5,
	ShowDetailedLocations                    = 6,
	EWwiseDebugFlags_MAX                     = 7,
};

// Enum WwiseAudio.EWwiseAudioComponentSpriteSize
// NumValues: 0x0004
enum class EWwiseAudioComponentSpriteSize : uint8
{
	Large                                    = 0,
	Small                                    = 1,
	None                                     = 2,
	EWwiseAudioComponentSpriteSize_MAX       = 3,
};

// ScriptStruct WwiseAudio.WwisePlaybackInstance
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FWwisePlaybackInstance final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWwisePlaybackInstance) == 0x000008, "Wrong alignment on FWwisePlaybackInstance");
static_assert(sizeof(FWwisePlaybackInstance) == 0x000018, "Wrong size on FWwisePlaybackInstance");

// ScriptStruct WwiseAudio.MovieSceneWwiseSectionTemplateData
// 0x0038 (0x0038 - 0x0000)
struct FMovieSceneWwiseSectionTemplateData final
{
public:
	EWwiseTrackDirectionality                     PlaybackDirection;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            WwiseEventStart;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseEventStop;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterRadius;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlaythrough;                                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoopingEvent;                                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RowIdx;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0028(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             CachedFrameRate;                                   // 0x002C(0x0008)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneWwiseSectionTemplateData) == 0x000008, "Wrong alignment on FMovieSceneWwiseSectionTemplateData");
static_assert(sizeof(FMovieSceneWwiseSectionTemplateData) == 0x000038, "Wrong size on FMovieSceneWwiseSectionTemplateData");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, PlaybackDirection) == 0x000000, "Member 'FMovieSceneWwiseSectionTemplateData::PlaybackDirection' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, WwiseEventStart) == 0x000008, "Member 'FMovieSceneWwiseSectionTemplateData::WwiseEventStart' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, WwiseEventStop) == 0x000010, "Member 'FMovieSceneWwiseSectionTemplateData::WwiseEventStop' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, EmitterRadius) == 0x000018, "Member 'FMovieSceneWwiseSectionTemplateData::EmitterRadius' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, bAllowPlaythrough) == 0x00001C, "Member 'FMovieSceneWwiseSectionTemplateData::bAllowPlaythrough' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, bIsLoopingEvent) == 0x00001D, "Member 'FMovieSceneWwiseSectionTemplateData::bIsLoopingEvent' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, RowIdx) == 0x000020, "Member 'FMovieSceneWwiseSectionTemplateData::RowIdx' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, SectionStartFrame) == 0x000024, "Member 'FMovieSceneWwiseSectionTemplateData::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, SectionEndFrame) == 0x000028, "Member 'FMovieSceneWwiseSectionTemplateData::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FMovieSceneWwiseSectionTemplateData, CachedFrameRate) == 0x00002C, "Member 'FMovieSceneWwiseSectionTemplateData::CachedFrameRate' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseMusicTiming
// 0x0014 (0x0014 - 0x0000)
struct FWwiseMusicTiming final
{
public:
	float                                         CurrentPositionInBeats;                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeatDurationInSeconds;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarLengthInBeats;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegementLengthInBeats;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridLengthInBeats;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseMusicTiming) == 0x000004, "Wrong alignment on FWwiseMusicTiming");
static_assert(sizeof(FWwiseMusicTiming) == 0x000014, "Wrong size on FWwiseMusicTiming");
static_assert(offsetof(FWwiseMusicTiming, CurrentPositionInBeats) == 0x000000, "Member 'FWwiseMusicTiming::CurrentPositionInBeats' has a wrong offset!");
static_assert(offsetof(FWwiseMusicTiming, BeatDurationInSeconds) == 0x000004, "Member 'FWwiseMusicTiming::BeatDurationInSeconds' has a wrong offset!");
static_assert(offsetof(FWwiseMusicTiming, BarLengthInBeats) == 0x000008, "Member 'FWwiseMusicTiming::BarLengthInBeats' has a wrong offset!");
static_assert(offsetof(FWwiseMusicTiming, SegementLengthInBeats) == 0x00000C, "Member 'FWwiseMusicTiming::SegementLengthInBeats' has a wrong offset!");
static_assert(offsetof(FWwiseMusicTiming, GridLengthInBeats) == 0x000010, "Member 'FWwiseMusicTiming::GridLengthInBeats' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseAudioEventTrackKey
// 0x0020 (0x0020 - 0x0000)
struct FWwiseAudioEventTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            AkAudioEvent;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseAudioEventTrackKey) == 0x000008, "Wrong alignment on FWwiseAudioEventTrackKey");
static_assert(sizeof(FWwiseAudioEventTrackKey) == 0x000020, "Wrong size on FWwiseAudioEventTrackKey");
static_assert(offsetof(FWwiseAudioEventTrackKey, Time) == 0x000000, "Member 'FWwiseAudioEventTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FWwiseAudioEventTrackKey, AkAudioEvent) == 0x000008, "Member 'FWwiseAudioEventTrackKey::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(FWwiseAudioEventTrackKey, EventName) == 0x000010, "Member 'FWwiseAudioEventTrackKey::EventName' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseLocationOverride
// 0x0020 (0x0020 - 0x0000)
struct FWwiseLocationOverride final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseLocationOverride) == 0x000004, "Wrong alignment on FWwiseLocationOverride");
static_assert(sizeof(FWwiseLocationOverride) == 0x000020, "Wrong size on FWwiseLocationOverride");
static_assert(offsetof(FWwiseLocationOverride, Location) == 0x000000, "Member 'FWwiseLocationOverride::Location' has a wrong offset!");
static_assert(offsetof(FWwiseLocationOverride, Rotation) == 0x00000C, "Member 'FWwiseLocationOverride::Rotation' has a wrong offset!");
static_assert(offsetof(FWwiseLocationOverride, Radius) == 0x000018, "Member 'FWwiseLocationOverride::Radius' has a wrong offset!");
static_assert(offsetof(FWwiseLocationOverride, Gain) == 0x00001C, "Member 'FWwiseLocationOverride::Gain' has a wrong offset!");

// ScriptStruct WwiseAudio.MovieSceneWwiseSectionTemplate
// 0x0038 (0x0058 - 0x0020)
struct FMovieSceneWwiseSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneWwiseSectionTemplateData    TemplateData;                                      // 0x0020(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneWwiseSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneWwiseSectionTemplate");
static_assert(sizeof(FMovieSceneWwiseSectionTemplate) == 0x000058, "Wrong size on FMovieSceneWwiseSectionTemplate");
static_assert(offsetof(FMovieSceneWwiseSectionTemplate, TemplateData) == 0x000020, "Member 'FMovieSceneWwiseSectionTemplate::TemplateData' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseAmbSoundCheckpointRecord
// 0x0001 (0x0001 - 0x0000)
struct FWwiseAmbSoundCheckpointRecord final
{
public:
	bool                                          bCurrentlyPlaying;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseAmbSoundCheckpointRecord) == 0x000001, "Wrong alignment on FWwiseAmbSoundCheckpointRecord");
static_assert(sizeof(FWwiseAmbSoundCheckpointRecord) == 0x000001, "Wrong size on FWwiseAmbSoundCheckpointRecord");
static_assert(offsetof(FWwiseAmbSoundCheckpointRecord, bCurrentlyPlaying) == 0x000000, "Member 'FWwiseAmbSoundCheckpointRecord::bCurrentlyPlaying' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseExternalSourceMediaInfo
// 0x000C (0x000C - 0x0000)
struct FWwiseExternalSourceMediaInfo final
{
public:
	uint32                                        ExternalSourceCookie;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FileID;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalize;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWwiseExternalSourceMediaInfo) == 0x000004, "Wrong alignment on FWwiseExternalSourceMediaInfo");
static_assert(sizeof(FWwiseExternalSourceMediaInfo) == 0x00000C, "Wrong size on FWwiseExternalSourceMediaInfo");
static_assert(offsetof(FWwiseExternalSourceMediaInfo, ExternalSourceCookie) == 0x000000, "Member 'FWwiseExternalSourceMediaInfo::ExternalSourceCookie' has a wrong offset!");
static_assert(offsetof(FWwiseExternalSourceMediaInfo, FileID) == 0x000004, "Member 'FWwiseExternalSourceMediaInfo::FileID' has a wrong offset!");
static_assert(offsetof(FWwiseExternalSourceMediaInfo, bLocalize) == 0x000008, "Member 'FWwiseExternalSourceMediaInfo::bLocalize' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseEventConfiguration
// 0x0018 (0x0018 - 0x0000)
struct FWwiseEventConfiguration final
{
public:
	class UWwiseEvent*                            Event;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWwiseExternalSourceMediaInfo>  ExternalSourceMedia;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseEventConfiguration) == 0x000008, "Wrong alignment on FWwiseEventConfiguration");
static_assert(sizeof(FWwiseEventConfiguration) == 0x000018, "Wrong size on FWwiseEventConfiguration");
static_assert(offsetof(FWwiseEventConfiguration, Event) == 0x000000, "Member 'FWwiseEventConfiguration::Event' has a wrong offset!");
static_assert(offsetof(FWwiseEventConfiguration, ExternalSourceMedia) == 0x000008, "Member 'FWwiseEventConfiguration::ExternalSourceMedia' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseEmitterAcousticData
// 0x001C (0x001C - 0x0000)
struct FWwiseEmitterAcousticData final
{
public:
	float                                         DryVolume;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ERVolume;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LRVolume;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LRDuration;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionAmbiX;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionAmbiY;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWwiseEmitterAcousticData) == 0x000004, "Wrong alignment on FWwiseEmitterAcousticData");
static_assert(sizeof(FWwiseEmitterAcousticData) == 0x00001C, "Wrong size on FWwiseEmitterAcousticData");
static_assert(offsetof(FWwiseEmitterAcousticData, DryVolume) == 0x000000, "Member 'FWwiseEmitterAcousticData::DryVolume' has a wrong offset!");
static_assert(offsetof(FWwiseEmitterAcousticData, ERVolume) == 0x000004, "Member 'FWwiseEmitterAcousticData::ERVolume' has a wrong offset!");
static_assert(offsetof(FWwiseEmitterAcousticData, LRVolume) == 0x000008, "Member 'FWwiseEmitterAcousticData::LRVolume' has a wrong offset!");
static_assert(offsetof(FWwiseEmitterAcousticData, LRDuration) == 0x00000C, "Member 'FWwiseEmitterAcousticData::LRDuration' has a wrong offset!");
static_assert(offsetof(FWwiseEmitterAcousticData, DirectionAmbiX) == 0x000010, "Member 'FWwiseEmitterAcousticData::DirectionAmbiX' has a wrong offset!");
static_assert(offsetof(FWwiseEmitterAcousticData, DirectionAmbiY) == 0x000014, "Member 'FWwiseEmitterAcousticData::DirectionAmbiY' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseEffectInfo
// 0x000C (0x000C - 0x0000)
struct FWwiseEffectInfo final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetVolume;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryVolume;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseEffectInfo) == 0x000004, "Wrong alignment on FWwiseEffectInfo");
static_assert(sizeof(FWwiseEffectInfo) == 0x00000C, "Wrong size on FWwiseEffectInfo");
static_assert(offsetof(FWwiseEffectInfo, EffectID) == 0x000000, "Member 'FWwiseEffectInfo::EffectID' has a wrong offset!");
static_assert(offsetof(FWwiseEffectInfo, WetVolume) == 0x000004, "Member 'FWwiseEffectInfo::WetVolume' has a wrong offset!");
static_assert(offsetof(FWwiseEffectInfo, DryVolume) == 0x000008, "Member 'FWwiseEffectInfo::DryVolume' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseEmitter
// 0x02F0 (0x02F0 - 0x0000)
struct alignas(0x10) FWwiseEmitter final
{
public:
	uint8                                         Pad_0[0x2D8];                                      // 0x0000(0x02D8)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioComponent*                   OwnerComponent;                                    // 0x02D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x10];                                     // 0x02E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWwiseEmitter) == 0x000010, "Wrong alignment on FWwiseEmitter");
static_assert(sizeof(FWwiseEmitter) == 0x0002F0, "Wrong size on FWwiseEmitter");
static_assert(offsetof(FWwiseEmitter, OwnerComponent) == 0x0002D8, "Member 'FWwiseEmitter::OwnerComponent' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseEmitterSource
// 0x0040 (0x0040 - 0x0000)
struct FWwiseEmitterSource final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWwiseEmitterSource) == 0x000010, "Wrong alignment on FWwiseEmitterSource");
static_assert(sizeof(FWwiseEmitterSource) == 0x000040, "Wrong size on FWwiseEmitterSource");
static_assert(offsetof(FWwiseEmitterSource, Transform) == 0x000000, "Member 'FWwiseEmitterSource::Transform' has a wrong offset!");
static_assert(offsetof(FWwiseEmitterSource, Gain) == 0x000030, "Member 'FWwiseEmitterSource::Gain' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseExternalAssetData
// 0x0030 (0x0030 - 0x0000)
struct FWwiseExternalAssetData final
{
public:
	TSoftObjectPtr<class UWwiseEvent>             WwiseEventPtr;                                     // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedDuration;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWwiseExternalAssetData) == 0x000008, "Wrong alignment on FWwiseExternalAssetData");
static_assert(sizeof(FWwiseExternalAssetData) == 0x000030, "Wrong size on FWwiseExternalAssetData");
static_assert(offsetof(FWwiseExternalAssetData, WwiseEventPtr) == 0x000000, "Member 'FWwiseExternalAssetData::WwiseEventPtr' has a wrong offset!");
static_assert(offsetof(FWwiseExternalAssetData, EstimatedDuration) == 0x000028, "Member 'FWwiseExternalAssetData::EstimatedDuration' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseBankEfficiencyReportDatum
// 0x0068 (0x0068 - 0x0000)
struct FWwiseBankEfficiencyReportDatum final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalEvents;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UWwiseEvent*>                      LoadedEvents;                                      // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseBankEfficiencyReportDatum) == 0x000008, "Wrong alignment on FWwiseBankEfficiencyReportDatum");
static_assert(sizeof(FWwiseBankEfficiencyReportDatum) == 0x000068, "Wrong size on FWwiseBankEfficiencyReportDatum");
static_assert(offsetof(FWwiseBankEfficiencyReportDatum, BankName) == 0x000000, "Member 'FWwiseBankEfficiencyReportDatum::BankName' has a wrong offset!");
static_assert(offsetof(FWwiseBankEfficiencyReportDatum, TotalEvents) == 0x000010, "Member 'FWwiseBankEfficiencyReportDatum::TotalEvents' has a wrong offset!");
static_assert(offsetof(FWwiseBankEfficiencyReportDatum, LoadedEvents) == 0x000018, "Member 'FWwiseBankEfficiencyReportDatum::LoadedEvents' has a wrong offset!");

// ScriptStruct WwiseAudio.WwiseAcousticEmulationParameters
// 0x0018 (0x0018 - 0x0000)
struct FWwiseAcousticEmulationParameters final
{
public:
	int32                                         EarlyReflectionsOffsetTimeMs;                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalWetnessScaleDB;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayDistance;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarlyReflectionDecay;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateReflectionDecay;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryVolumeCorrectionDistance;                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseAcousticEmulationParameters) == 0x000004, "Wrong alignment on FWwiseAcousticEmulationParameters");
static_assert(sizeof(FWwiseAcousticEmulationParameters) == 0x000018, "Wrong size on FWwiseAcousticEmulationParameters");
static_assert(offsetof(FWwiseAcousticEmulationParameters, EarlyReflectionsOffsetTimeMs) == 0x000000, "Member 'FWwiseAcousticEmulationParameters::EarlyReflectionsOffsetTimeMs' has a wrong offset!");
static_assert(offsetof(FWwiseAcousticEmulationParameters, GlobalWetnessScaleDB) == 0x000004, "Member 'FWwiseAcousticEmulationParameters::GlobalWetnessScaleDB' has a wrong offset!");
static_assert(offsetof(FWwiseAcousticEmulationParameters, DecayDistance) == 0x000008, "Member 'FWwiseAcousticEmulationParameters::DecayDistance' has a wrong offset!");
static_assert(offsetof(FWwiseAcousticEmulationParameters, EarlyReflectionDecay) == 0x00000C, "Member 'FWwiseAcousticEmulationParameters::EarlyReflectionDecay' has a wrong offset!");
static_assert(offsetof(FWwiseAcousticEmulationParameters, LateReflectionDecay) == 0x000010, "Member 'FWwiseAcousticEmulationParameters::LateReflectionDecay' has a wrong offset!");
static_assert(offsetof(FWwiseAcousticEmulationParameters, DryVolumeCorrectionDistance) == 0x000014, "Member 'FWwiseAcousticEmulationParameters::DryVolumeCorrectionDistance' has a wrong offset!");

}

