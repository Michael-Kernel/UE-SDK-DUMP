#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IO_ShootingRange

#include "Basic.hpp"

#include "Enum_ShootingRangeState_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "Struct_ShootingRangeRules_structs.hpp"
#include "Enum_ShootingRangeState_MissionLocked_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IO_ShootingRange.BP_IO_ShootingRange_C
// 0x0228 (0x0778 - 0x0550)
class ABP_IO_ShootingRange_C final : public AInteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(Transient, DuplicateTransient)
	class UWwiseAudioComponent*                   Wwise_Machinery;                                   // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   Wwise_Speaker_Origin;                              // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Scoreboard_Display_Timer;                       // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxChildActorComponent*                IO_MissionImageMonitor_Timer;                      // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Slash;                                             // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Score_Max;                                         // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Score_Current;                                     // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Console_250_V3;                                 // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow2;                                            // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxChildActorComponent*                IO_MissionImageMonitor_Scoreboard;                 // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocketComponent*                       CelebrationFX;                                     // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_ShootingRange_PerfectScore;                     // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUsableComponent*                       Usable;                                            // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   Wwise_Console_Origin;                              // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMissionIconComponent*               OakMissionIcon;                                    // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_Score;                                        // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text_Title;                                        // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxChildActorComponent*                ChildActor_Button;                                 // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timer_Percent_9D1FCF934EDA897EE484B8B3603F177F;    // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timer__Direction_9D1FCF934EDA897EE484B8B3603F177F; // 0x060C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60D[0x3];                                      // 0x060D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timer;                                             // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShootingRange_StartDelay;                          // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_IO_Fidget_C*>                Targets_Active;                                    // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_IO_Fidget_C*>                Targets_Inactive;                                  // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_IO_Switch_Parent_V1_C*              BUTTON;                                            // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0648(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   ChallengeCompleted;                                // 0x0650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   ChallengeStarted;                                  // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   ShootingRange_Finished;                            // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_IO_Fidget_C*>                TargetList_Normal;                                 // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, ExposeOnSpawn)
	TArray<class ABP_IO_Fidget_C*>                TargetList_Jack;                                   // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class ABP_IO_Fidget_C*>                TargetList_Claptrap;                               // 0x06A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         TargetCount;                                       // 0x06B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         JackSpawnPercentage;                               // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ClaptrapSpawnPercentage;                           // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BC[0x4];                                      // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_IO_Fidget_C*>                ShootingRange_AllTargets;                          // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	Enum_ShootingRangeState                       ShootingRangeState;                                // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   ShootingRange_Started;                             // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<Enum_ShootingRangeState, struct FStruct_ShootingRangeRules> ShootingRangeRules;                                // 0x06E8(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	Enum_ShootingRangeState_MissionLocked         ShootingRangeState_MissionLocked;                  // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIO_MissionImageMonitor_C*              Monitor_Timer;                                     // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AIO_MissionImageMonitor_C*              Monitor_Score;                                     // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            ShootingRangeUser;                                 // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0758(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          Cond_ShootingRangeState_NewEnumerator1;            // 0x0760(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_ShootingRangeState_NewEnumerator2;            // 0x0768(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_ShootingRangeState_MissionLocked_NewEnumerator1; // 0x0770(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void TurnOffScoreboard();
	void TurnOnScoreboard();
	void ShootingRange_Stop();
	void ShootingRange_Start(Enum_ShootingRangeState Difficulty);
	void Presentation_UpdateScore();
	void Presentation_UpdateTimer(float TimeRemaining);
	void OnRep_Score();
	void Target_Start(class ABP_IO_Fidget_C* Fidget);
	void Target_Stop(class ABP_IO_Fidget_C* Fidget);
	void UserConstructionScript();
	void Timer__FinishedFunc();
	void Timer__UpdateFunc();
	void ReceiveBeginPlay();
	void ShotTarget_Hit(class ABP_IO_Fidget_C* Fidget);
	void NextTarget(float Delay);
	void TargetStopped(class ABP_IO_Fidget_C* Fidget);
	void ShotTarget_HandsomeJack();
	void ShotTarget_Claptrap();
	void Init_HandsomeJackTargets();
	void SpawnClaptrap();
	void Timer_Start();
	void Timer_Stop();
	void Button_StartNormal(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void Button_StartHard(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void __UserState_ShootingRangeState_0(bool bFromLoad);
	void __UserState_ShootingRangeState_1(bool bFromLoad);
	void __UserState_ShootingRangeState_2(bool bFromLoad);
	void Presentation_Start();
	void Presentation_Finished(bool Perfect);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void SpawnHandsomeJack();
	void Init_ClaptrapTargets();
	void BndEvt__Usable_K2Node_ComponentBoundEvent_2_UsableUsedOnChannelSignature__DelegateSignature_BP_IO_ShootingRange(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void PlayPerfectCelebration();
	void __UserState_ShootingRangeState_MissionLocked_0(bool bFromLoad);
	void __UserState_ShootingRangeState_MissionLocked_1(bool bFromLoad);
	void ExecuteUbergraph_BP_IO_ShootingRange(int32 EntryPoint);
	void ShootingRange_Started__DelegateSignature();
	void ShootingRange_Finished__DelegateSignature(int32 Score_0);
	void ChallengeStarted__DelegateSignature();
	void ChallengeCompleted__DelegateSignature(int32 TargetsHit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IO_ShootingRange_C">();
	}
	static class ABP_IO_ShootingRange_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IO_ShootingRange_C>();
	}
};
static_assert(alignof(ABP_IO_ShootingRange_C) == 0x000008, "Wrong alignment on ABP_IO_ShootingRange_C");
static_assert(sizeof(ABP_IO_ShootingRange_C) == 0x000778, "Wrong size on ABP_IO_ShootingRange_C");
static_assert(offsetof(ABP_IO_ShootingRange_C, UberGraphFrame) == 0x000550, "Member 'ABP_IO_ShootingRange_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Wwise_Machinery) == 0x000558, "Member 'ABP_IO_ShootingRange_C::Wwise_Machinery' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Wwise_Speaker_Origin) == 0x000560, "Member 'ABP_IO_ShootingRange_C::Wwise_Speaker_Origin' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, PS_Scoreboard_Display_Timer) == 0x000568, "Member 'ABP_IO_ShootingRange_C::PS_Scoreboard_Display_Timer' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, IO_MissionImageMonitor_Timer) == 0x000570, "Member 'ABP_IO_ShootingRange_C::IO_MissionImageMonitor_Timer' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Slash) == 0x000578, "Member 'ABP_IO_ShootingRange_C::Slash' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Score_Max) == 0x000580, "Member 'ABP_IO_ShootingRange_C::Score_Max' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Score_Current) == 0x000588, "Member 'ABP_IO_ShootingRange_C::Score_Current' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, SM_Console_250_V3) == 0x000590, "Member 'ABP_IO_ShootingRange_C::SM_Console_250_V3' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Arrow2) == 0x000598, "Member 'ABP_IO_ShootingRange_C::Arrow2' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Arrow1) == 0x0005A0, "Member 'ABP_IO_ShootingRange_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Arrow) == 0x0005A8, "Member 'ABP_IO_ShootingRange_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Box) == 0x0005B0, "Member 'ABP_IO_ShootingRange_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, IO_MissionImageMonitor_Scoreboard) == 0x0005B8, "Member 'ABP_IO_ShootingRange_C::IO_MissionImageMonitor_Scoreboard' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, CelebrationFX) == 0x0005C0, "Member 'ABP_IO_ShootingRange_C::CelebrationFX' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, PS_ShootingRange_PerfectScore) == 0x0005C8, "Member 'ABP_IO_ShootingRange_C::PS_ShootingRange_PerfectScore' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Usable) == 0x0005D0, "Member 'ABP_IO_ShootingRange_C::Usable' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Wwise_Console_Origin) == 0x0005D8, "Member 'ABP_IO_ShootingRange_C::Wwise_Console_Origin' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, OakMissionIcon) == 0x0005E0, "Member 'ABP_IO_ShootingRange_C::OakMissionIcon' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Text_Score) == 0x0005E8, "Member 'ABP_IO_ShootingRange_C::Text_Score' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Text_Title) == 0x0005F0, "Member 'ABP_IO_ShootingRange_C::Text_Title' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ChildActor_Button) == 0x0005F8, "Member 'ABP_IO_ShootingRange_C::ChildActor_Button' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, DefaultSceneRoot) == 0x000600, "Member 'ABP_IO_ShootingRange_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Timer_Percent_9D1FCF934EDA897EE484B8B3603F177F) == 0x000608, "Member 'ABP_IO_ShootingRange_C::Timer_Percent_9D1FCF934EDA897EE484B8B3603F177F' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Timer__Direction_9D1FCF934EDA897EE484B8B3603F177F) == 0x00060C, "Member 'ABP_IO_ShootingRange_C::Timer__Direction_9D1FCF934EDA897EE484B8B3603F177F' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Timer) == 0x000610, "Member 'ABP_IO_ShootingRange_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRange_StartDelay) == 0x000618, "Member 'ABP_IO_ShootingRange_C::ShootingRange_StartDelay' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Targets_Active) == 0x000620, "Member 'ABP_IO_ShootingRange_C::Targets_Active' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Targets_Inactive) == 0x000630, "Member 'ABP_IO_ShootingRange_C::Targets_Inactive' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, BUTTON) == 0x000640, "Member 'ABP_IO_ShootingRange_C::BUTTON' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Score) == 0x000648, "Member 'ABP_IO_ShootingRange_C::Score' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ChallengeCompleted) == 0x000650, "Member 'ABP_IO_ShootingRange_C::ChallengeCompleted' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ChallengeStarted) == 0x000660, "Member 'ABP_IO_ShootingRange_C::ChallengeStarted' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRange_Finished) == 0x000670, "Member 'ABP_IO_ShootingRange_C::ShootingRange_Finished' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, TargetList_Normal) == 0x000680, "Member 'ABP_IO_ShootingRange_C::TargetList_Normal' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, TargetList_Jack) == 0x000690, "Member 'ABP_IO_ShootingRange_C::TargetList_Jack' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, TargetList_Claptrap) == 0x0006A0, "Member 'ABP_IO_ShootingRange_C::TargetList_Claptrap' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, TargetCount) == 0x0006B0, "Member 'ABP_IO_ShootingRange_C::TargetCount' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, JackSpawnPercentage) == 0x0006B4, "Member 'ABP_IO_ShootingRange_C::JackSpawnPercentage' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ClaptrapSpawnPercentage) == 0x0006B8, "Member 'ABP_IO_ShootingRange_C::ClaptrapSpawnPercentage' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRange_AllTargets) == 0x0006C0, "Member 'ABP_IO_ShootingRange_C::ShootingRange_AllTargets' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRangeState) == 0x0006D0, "Member 'ABP_IO_ShootingRange_C::ShootingRangeState' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRange_Started) == 0x0006D8, "Member 'ABP_IO_ShootingRange_C::ShootingRange_Started' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRangeRules) == 0x0006E8, "Member 'ABP_IO_ShootingRange_C::ShootingRangeRules' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRangeState_MissionLocked) == 0x000738, "Member 'ABP_IO_ShootingRange_C::ShootingRangeState_MissionLocked' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Monitor_Timer) == 0x000740, "Member 'ABP_IO_ShootingRange_C::Monitor_Timer' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Monitor_Score) == 0x000748, "Member 'ABP_IO_ShootingRange_C::Monitor_Score' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, ShootingRangeUser) == 0x000750, "Member 'ABP_IO_ShootingRange_C::ShootingRangeUser' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Time) == 0x000758, "Member 'ABP_IO_ShootingRange_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Cond_ShootingRangeState_NewEnumerator1) == 0x000760, "Member 'ABP_IO_ShootingRange_C::Cond_ShootingRangeState_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Cond_ShootingRangeState_NewEnumerator2) == 0x000768, "Member 'ABP_IO_ShootingRange_C::Cond_ShootingRangeState_NewEnumerator2' has a wrong offset!");
static_assert(offsetof(ABP_IO_ShootingRange_C, Cond_ShootingRangeState_MissionLocked_NewEnumerator1) == 0x000770, "Member 'ABP_IO_ShootingRange_C::Cond_ShootingRangeState_MissionLocked_NewEnumerator1' has a wrong offset!");

}

