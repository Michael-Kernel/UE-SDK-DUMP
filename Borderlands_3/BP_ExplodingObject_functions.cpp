#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ExplodingObject

#include "Basic.hpp"

#include "BP_ExplodingObject_classes.hpp"
#include "BP_ExplodingObject_parameters.hpp"


namespace SDK
{

// Function BP_ExplodingObject.BP_ExplodingObject_C.Exploded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Exploded__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Exploded__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.ExecuteUbergraph_BP_ExplodingObject
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::ExecuteUbergraph_BP_ExplodingObject(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "ExecuteUbergraph_BP_ExplodingObject");

	Params::BP_ExplodingObject_C_ExecuteUbergraph_BP_ExplodingObject Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BPI_SetNavPainterEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::BPI_SetNavPainterEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BPI_SetNavPainterEnabled");

	Params::BP_ExplodingObject_C_BPI_SetNavPainterEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_3_ComponentSleepSignature__DelegateSignature_BP_ExplodingObject
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SleepingComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_3_ComponentSleepSignature__DelegateSignature_BP_ExplodingObject(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_3_ComponentSleepSignature__DelegateSignature_BP_ExplodingObject");

	Params::BP_ExplodingObject_C_BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_3_ComponentSleepSignature__DelegateSignature_BP_ExplodingObject Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_0_ComponentWakeSignature__DelegateSignature_BP_ExplodingObject
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              WakingComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_0_ComponentWakeSignature__DelegateSignature_BP_ExplodingObject(class UPrimitiveComponent* WakingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_0_ComponentWakeSignature__DelegateSignature_BP_ExplodingObject");

	Params::BP_ExplodingObject_C_BndEvt__SM_ExplodingObject_K2Node_ComponentBoundEvent_0_ComponentWakeSignature__DelegateSignature_BP_ExplodingObject Parms{};

	Parms.WakingComponent = WakingComponent;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Explode
// (BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Explode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Explode_Loot
// (BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Explode_Loot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Explode_Loot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Explode_Cloud
// (BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Explode_Cloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Explode_Cloud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Explode_Puddle
// (BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Explode_Puddle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Explode_Puddle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Explode_Damage
// (BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Explode_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Explode_Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BndEvt__OakDamage_K2Node_ComponentBoundEvent_1_TakeAnyPipelineDamageDelegate__DelegateSignature_BP_ExplodingObject
// (BlueprintEvent)
// Parameters:
// class UDamageComponent*                 DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGbxDamageType*                   DamageType_0                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageSource*                    DamageSource                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageCauserComponent*           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FReceivedDamageDetails           Details                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ABP_ExplodingObject_C::BndEvt__OakDamage_K2Node_ComponentBoundEvent_1_TakeAnyPipelineDamageDelegate__DelegateSignature_BP_ExplodingObject(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType_0, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BndEvt__OakDamage_K2Node_ComponentBoundEvent_1_TakeAnyPipelineDamageDelegate__DelegateSignature_BP_ExplodingObject");

	Params::BP_ExplodingObject_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_1_TakeAnyPipelineDamageDelegate__DelegateSignature_BP_ExplodingObject Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.Damage = Damage;
	Parms.DamageType_0 = DamageType_0;
	Parms.DamageSource = DamageSource;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.__UserState_ExplodingObjectState_3
// (BlueprintEvent)
// Parameters:
// bool                                    bFromLoad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::__UserState_ExplodingObjectState_3(bool bFromLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "__UserState_ExplodingObjectState_3");

	Params::BP_ExplodingObject_C___UserState_ExplodingObjectState_3 Parms{};

	Parms.bFromLoad = bFromLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.__UserState_ExplodingObjectState_2
// (BlueprintEvent)
// Parameters:
// bool                                    bFromLoad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::__UserState_ExplodingObjectState_2(bool bFromLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "__UserState_ExplodingObjectState_2");

	Params::BP_ExplodingObject_C___UserState_ExplodingObjectState_2 Parms{};

	Parms.bFromLoad = bFromLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.__UserState_ExplodingObjectState_1
// (BlueprintEvent)
// Parameters:
// bool                                    bFromLoad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::__UserState_ExplodingObjectState_1(bool bFromLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "__UserState_ExplodingObjectState_1");

	Params::BP_ExplodingObject_C___UserState_ExplodingObjectState_1 Parms{};

	Parms.bFromLoad = bFromLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.__UserState_ExplodingObjectState_0
// (BlueprintEvent)
// Parameters:
// bool                                    bFromLoad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::__UserState_ExplodingObjectState_0(bool bFromLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "__UserState_ExplodingObjectState_0");

	Params::BP_ExplodingObject_C___UserState_ExplodingObjectState_0 Parms{};

	Parms.bFromLoad = bFromLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ExplodingObject_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BPI_StartFuse
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::BPI_StartFuse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BPI_StartFuse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BPI_SetSimulatePhysics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PhysicsOn_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::BPI_SetSimulatePhysics(bool PhysicsOn_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BPI_SetSimulatePhysics");

	Params::BP_ExplodingObject_C_BPI_SetSimulatePhysics Parms{};

	Parms.PhysicsOn_ = PhysicsOn_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BPI_ImpulseThrow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ThrowVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RotatorForSpin                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   FuseSpeedScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AdditiveVector                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::BPI_ImpulseThrow(const struct FVector& ThrowVector, float Force, const struct FRotator& RotatorForSpin, float FuseSpeedScale, const struct FVector& AdditiveVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BPI_ImpulseThrow");

	Params::BP_ExplodingObject_C_BPI_ImpulseThrow Parms{};

	Parms.ThrowVector = std::move(ThrowVector);
	Parms.Force = Force;
	Parms.RotatorForSpin = std::move(RotatorForSpin);
	Parms.FuseSpeedScale = FuseSpeedScale;
	Parms.AdditiveVector = std::move(AdditiveVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BPI_Explode
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::BPI_Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BPI_Explode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BndEvt__SM_Barrel_K2Node_ComponentBoundEvent_9_ComponentHitSignature__DelegateSignature_IO_Combat_Barrel_Universal
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_ExplodingObject_C::BndEvt__SM_Barrel_K2Node_ComponentBoundEvent_9_ComponentHitSignature__DelegateSignature_IO_Combat_Barrel_Universal(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BndEvt__SM_Barrel_K2Node_ComponentBoundEvent_9_ComponentHitSignature__DelegateSignature_IO_Combat_Barrel_Universal");

	Params::BP_ExplodingObject_C_BndEvt__SM_Barrel_K2Node_ComponentBoundEvent_9_ComponentHitSignature__DelegateSignature_IO_Combat_Barrel_Universal Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.BPI_ResetHealth
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::BPI_ResetHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "BPI_ResetHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Setup_RandomizeDamageType
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::Setup_RandomizeDamageType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Setup_RandomizeDamageType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Setup_ExplodingObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDA_ExplodingObjectPresentation_C*NewPresentation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         DynamicMI                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::Setup_ExplodingObject(class UDA_ExplodingObjectPresentation_C* NewPresentation, class UMaterialInstanceDynamic** DynamicMI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Setup_ExplodingObject");

	Params::BP_ExplodingObject_C_Setup_ExplodingObject Parms{};

	Parms.NewPresentation = NewPresentation;

	UObject::ProcessEvent(Func, &Parms);

	if (DynamicMI != nullptr)
		*DynamicMI = Parms.DynamicMI;
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.ThrowExplodingObject
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ThrowVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RotatorForSpin                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          OptionalAdditiveVector                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::ThrowExplodingObject(const struct FVector& ThrowVector, float Force, const struct FRotator& RotatorForSpin, const struct FVector& OptionalAdditiveVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "ThrowExplodingObject");

	Params::BP_ExplodingObject_C_ThrowExplodingObject Parms{};

	Parms.ThrowVector = std::move(ThrowVector);
	Parms.Force = Force;
	Parms.RotatorForSpin = std::move(RotatorForSpin);
	Parms.OptionalAdditiveVector = std::move(OptionalAdditiveVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.OnRep_DamageType
// (BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::OnRep_DamageType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "OnRep_DamageType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.VisualState_FuseStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::VisualState_FuseStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "VisualState_FuseStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.VisualState_FuseStop
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::VisualState_FuseStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "VisualState_FuseStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Get_DamageType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// Enum_ExplodingObjectDamage              DamageType_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::Get_DamageType(Enum_ExplodingObjectDamage* DamageType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Get_DamageType");

	Params::BP_ExplodingObject_C_Get_DamageType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageType_0 != nullptr)
		*DamageType_0 = Parms.DamageType_0;
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.VisualState_ExplodedStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::VisualState_ExplodedStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "VisualState_ExplodedStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.VisualState_ExplodedStop
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ExplodingObject_C::VisualState_ExplodedStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "VisualState_ExplodedStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.Damaged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGbxDamageType*                   DamageType_0                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageSource*                    DamageSource                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ExplodingObject_C::Damaged(const class UGbxDamageType* DamageType_0, const class UDamageSource* DamageSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "Damaged");

	Params::BP_ExplodingObject_C_Damaged Parms{};

	Parms.DamageType_0 = DamageType_0;
	Parms.DamageSource = DamageSource;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ExplodingObject.BP_ExplodingObject_C.SetSimulatePhysics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewSimulate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ExplodingObject_C::SetSimulatePhysics(bool bNewSimulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ExplodingObject_C", "SetSimulatePhysics");

	Params::BP_ExplodingObject_C_SetSimulatePhysics Parms{};

	Parms.bNewSimulate = bNewSimulate;

	UObject::ProcessEvent(Func, &Parms);
}

}

