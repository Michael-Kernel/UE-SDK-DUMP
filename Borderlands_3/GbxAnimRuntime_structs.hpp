#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAnimRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum GbxAnimRuntime.EGbxCustomEventContext
// NumValues: 0x0003
enum class EGbxCustomEventContext : uint8
{
	Owner                                    = 0,
	Instigator                               = 1,
	EGbxCustomEventContext_MAX               = 2,
};

// Enum GbxAnimRuntime.EFloatComparisonType
// NumValues: 0x0007
enum class EFloatComparisonType : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	GreaterThan                              = 2,
	GreaterThanOrEqual                       = 3,
	LessThan                                 = 4,
	LessThanOrEqual                          = 5,
	EFloatComparisonType_MAX                 = 6,
};

// Enum GbxAnimRuntime.EWeightTypeToUse
// NumValues: 0x0005
enum class EWeightTypeToUse : uint8
{
	Zero                                     = 0,
	One                                      = 1,
	Cached                                   = 2,
	Dynamic                                  = 3,
	EWeightTypeToUse_MAX                     = 4,
};

// ScriptStruct GbxAnimRuntime.GbxAnimNode_AnimTable
// 0x0020 (0x0088 - 0x0068)
struct FGbxAnimNode_AnimTable final : public FAnimNode_AssetPlayerBase
{
public:
	class UGbxAnimTable*                          AnimTable;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxAnimInstance*                       GbxAnimInstance;                                   // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleRateByMeshScale;                             // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_AnimTable) == 0x000008, "Wrong alignment on FGbxAnimNode_AnimTable");
static_assert(sizeof(FGbxAnimNode_AnimTable) == 0x000088, "Wrong size on FGbxAnimNode_AnimTable");
static_assert(offsetof(FGbxAnimNode_AnimTable, AnimTable) == 0x000068, "Member 'FGbxAnimNode_AnimTable::AnimTable' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_AnimTable, Sequence) == 0x000070, "Member 'FGbxAnimNode_AnimTable::Sequence' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_AnimTable, GbxAnimInstance) == 0x000078, "Member 'FGbxAnimNode_AnimTable::GbxAnimInstance' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_AnimTable, bScaleRateByMeshScale) == 0x000080, "Member 'FGbxAnimNode_AnimTable::bScaleRateByMeshScale' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_BlendListByFloatComparison
// 0x0010 (0x00D8 - 0x00C8)
struct FGbxAnimNode_BlendListByFloatComparison final : public FAnimNode_BlendListBase
{
public:
	float                                         ValueA;                                            // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFloatComparisonType                          Comparison;                                        // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_BlendListByFloatComparison) == 0x000008, "Wrong alignment on FGbxAnimNode_BlendListByFloatComparison");
static_assert(sizeof(FGbxAnimNode_BlendListByFloatComparison) == 0x0000D8, "Wrong size on FGbxAnimNode_BlendListByFloatComparison");
static_assert(offsetof(FGbxAnimNode_BlendListByFloatComparison, ValueA) == 0x0000C8, "Member 'FGbxAnimNode_BlendListByFloatComparison::ValueA' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendListByFloatComparison, ValueB) == 0x0000CC, "Member 'FGbxAnimNode_BlendListByFloatComparison::ValueB' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendListByFloatComparison, Comparison) == 0x0000D0, "Member 'FGbxAnimNode_BlendListByFloatComparison::Comparison' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.BoneWeightCurveOverride
// 0x0038 (0x0038 - 0x0000)
struct FBoneWeightCurveOverride final
{
public:
	ECurveOverrideType                            CurveOverrideType;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNormalizeCurvesOverride               NormalizeCurveOverrideData;                        // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	class FName                                   SingleOverrideCurveName;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 CacheWeightIndicesToUpdate;                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneWeightCurveOverride) == 0x000008, "Wrong alignment on FBoneWeightCurveOverride");
static_assert(sizeof(FBoneWeightCurveOverride) == 0x000038, "Wrong size on FBoneWeightCurveOverride");
static_assert(offsetof(FBoneWeightCurveOverride, CurveOverrideType) == 0x000000, "Member 'FBoneWeightCurveOverride::CurveOverrideType' has a wrong offset!");
static_assert(offsetof(FBoneWeightCurveOverride, NormalizeCurveOverrideData) == 0x000008, "Member 'FBoneWeightCurveOverride::NormalizeCurveOverrideData' has a wrong offset!");
static_assert(offsetof(FBoneWeightCurveOverride, SingleOverrideCurveName) == 0x000020, "Member 'FBoneWeightCurveOverride::SingleOverrideCurveName' has a wrong offset!");
static_assert(offsetof(FBoneWeightCurveOverride, CacheWeightIndicesToUpdate) == 0x000028, "Member 'FBoneWeightCurveOverride::CacheWeightIndicesToUpdate' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_BlendTwoPosesPerBone
// 0x00C0 (0x00F0 - 0x0030)
struct FGbxAnimNode_BlendTwoPosesPerBone final : public FAnimNode_Base
{
public:
	struct FPoseLink                              PoseA;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              PoseB;                                             // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CachedBlendWeights;                                // 0x0060(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 DynamicCachedBlendWeights;                         // 0x0070(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBoneWeightCurveOverride>       BoneWeightCurveOverrides;                          // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UGbxAnimInstance*                       GbxAnimInstance;                                   // 0x0090(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  SkeletonGuid;                                      // 0x0098(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  VirtualBoneGuid;                                   // 0x00A8(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGbxBoneSet*                            BoneSet;                                           // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  BoneSetGuid;                                       // 0x00C0(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ActionSlotName;                                    // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_BlendTwoPosesPerBone) == 0x000008, "Wrong alignment on FGbxAnimNode_BlendTwoPosesPerBone");
static_assert(sizeof(FGbxAnimNode_BlendTwoPosesPerBone) == 0x0000F0, "Wrong size on FGbxAnimNode_BlendTwoPosesPerBone");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, PoseA) == 0x000030, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::PoseA' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, PoseB) == 0x000048, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::PoseB' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, CachedBlendWeights) == 0x000060, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::CachedBlendWeights' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, DynamicCachedBlendWeights) == 0x000070, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::DynamicCachedBlendWeights' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, BoneWeightCurveOverrides) == 0x000080, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::BoneWeightCurveOverrides' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, GbxAnimInstance) == 0x000090, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::GbxAnimInstance' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, SkeletonGuid) == 0x000098, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::SkeletonGuid' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, VirtualBoneGuid) == 0x0000A8, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::VirtualBoneGuid' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, BoneSet) == 0x0000B8, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::BoneSet' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, BoneSetGuid) == 0x0000C0, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::BoneSetGuid' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendTwoPosesPerBone, ActionSlotName) == 0x0000D0, "Member 'FGbxAnimNode_BlendTwoPosesPerBone::ActionSlotName' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.IntMinMaxRange
// 0x0008 (0x0008 - 0x0000)
struct FIntMinMaxRange final
{
public:
	int32                                         MinValue;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntMinMaxRange) == 0x000004, "Wrong alignment on FIntMinMaxRange");
static_assert(sizeof(FIntMinMaxRange) == 0x000008, "Wrong size on FIntMinMaxRange");
static_assert(offsetof(FIntMinMaxRange, MinValue) == 0x000000, "Member 'FIntMinMaxRange::MinValue' has a wrong offset!");
static_assert(offsetof(FIntMinMaxRange, MaxValue) == 0x000004, "Member 'FIntMinMaxRange::MaxValue' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_BlendListByIntInRange
// 0x0020 (0x00E8 - 0x00C8)
struct FGbxAnimNode_BlendListByIntInRange final : public FAnimNode_BlendListBase
{
public:
	int32                                         BlendValue;                                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntMinMaxRange>                MinMaxRanges;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentRangeIndex;                                 // 0x00E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_BlendListByIntInRange) == 0x000008, "Wrong alignment on FGbxAnimNode_BlendListByIntInRange");
static_assert(sizeof(FGbxAnimNode_BlendListByIntInRange) == 0x0000E8, "Wrong size on FGbxAnimNode_BlendListByIntInRange");
static_assert(offsetof(FGbxAnimNode_BlendListByIntInRange, BlendValue) == 0x0000C8, "Member 'FGbxAnimNode_BlendListByIntInRange::BlendValue' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendListByIntInRange, MinMaxRanges) == 0x0000D0, "Member 'FGbxAnimNode_BlendListByIntInRange::MinMaxRanges' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendListByIntInRange, CurrentRangeIndex) == 0x0000E0, "Member 'FGbxAnimNode_BlendListByIntInRange::CurrentRangeIndex' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.FloatMinMaxRange
// 0x0008 (0x0008 - 0x0000)
struct FFloatMinMaxRange final
{
public:
	float                                         MinValue;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatMinMaxRange) == 0x000004, "Wrong alignment on FFloatMinMaxRange");
static_assert(sizeof(FFloatMinMaxRange) == 0x000008, "Wrong size on FFloatMinMaxRange");
static_assert(offsetof(FFloatMinMaxRange, MinValue) == 0x000000, "Member 'FFloatMinMaxRange::MinValue' has a wrong offset!");
static_assert(offsetof(FFloatMinMaxRange, MaxValue) == 0x000004, "Member 'FFloatMinMaxRange::MaxValue' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_BlendListByFloatInRange
// 0x0020 (0x00E8 - 0x00C8)
struct FGbxAnimNode_BlendListByFloatInRange final : public FAnimNode_BlendListBase
{
public:
	float                                         BlendValue;                                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFloatMinMaxRange>              MinMaxRanges;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentRangeIndex;                                 // 0x00E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_BlendListByFloatInRange) == 0x000008, "Wrong alignment on FGbxAnimNode_BlendListByFloatInRange");
static_assert(sizeof(FGbxAnimNode_BlendListByFloatInRange) == 0x0000E8, "Wrong size on FGbxAnimNode_BlendListByFloatInRange");
static_assert(offsetof(FGbxAnimNode_BlendListByFloatInRange, BlendValue) == 0x0000C8, "Member 'FGbxAnimNode_BlendListByFloatInRange::BlendValue' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendListByFloatInRange, MinMaxRanges) == 0x0000D0, "Member 'FGbxAnimNode_BlendListByFloatInRange::MinMaxRanges' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_BlendListByFloatInRange, CurrentRangeIndex) == 0x0000E0, "Member 'FGbxAnimNode_BlendListByFloatInRange::CurrentRangeIndex' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_CopyParentTransforms
// 0x0010 (0x0040 - 0x0030)
struct FGbxAnimNode_CopyParentTransforms final : public FAnimNode_Base
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_CopyParentTransforms) == 0x000008, "Wrong alignment on FGbxAnimNode_CopyParentTransforms");
static_assert(sizeof(FGbxAnimNode_CopyParentTransforms) == 0x000040, "Wrong size on FGbxAnimNode_CopyParentTransforms");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_HandIK
// 0x00E0 (0x0370 - 0x0290)
struct FGbxAnimNode_HandIK final : public FAnimNode_TwoBoneIK
{
public:
	struct FBoneReference                         ObjectBone;                                        // 0x0290(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ObjectOffset;                                      // 0x02B0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             WorldOffset;                                       // 0x02E0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             HandOffsetToIkWorld;                               // 0x0310(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWorldIkOverride;                                  // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         EffectorAlignmentBone;                             // 0x0348(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AlignToObjectAlpha;                                // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0xC];                                      // 0x0364(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_HandIK) == 0x000010, "Wrong alignment on FGbxAnimNode_HandIK");
static_assert(sizeof(FGbxAnimNode_HandIK) == 0x000370, "Wrong size on FGbxAnimNode_HandIK");
static_assert(offsetof(FGbxAnimNode_HandIK, ObjectBone) == 0x000290, "Member 'FGbxAnimNode_HandIK::ObjectBone' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_HandIK, ObjectOffset) == 0x0002B0, "Member 'FGbxAnimNode_HandIK::ObjectOffset' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_HandIK, WorldOffset) == 0x0002E0, "Member 'FGbxAnimNode_HandIK::WorldOffset' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_HandIK, HandOffsetToIkWorld) == 0x000310, "Member 'FGbxAnimNode_HandIK::HandOffsetToIkWorld' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_HandIK, bWorldIkOverride) == 0x000340, "Member 'FGbxAnimNode_HandIK::bWorldIkOverride' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_HandIK, EffectorAlignmentBone) == 0x000348, "Member 'FGbxAnimNode_HandIK::EffectorAlignmentBone' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_HandIK, AlignToObjectAlpha) == 0x000360, "Member 'FGbxAnimNode_HandIK::AlignToObjectAlpha' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.InputTransforms
// 0x0010 (0x0010 - 0x0000)
struct FInputTransforms final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputTransforms) == 0x000008, "Wrong alignment on FInputTransforms");
static_assert(sizeof(FInputTransforms) == 0x000010, "Wrong size on FInputTransforms");
static_assert(offsetof(FInputTransforms, Transforms) == 0x000000, "Member 'FInputTransforms::Transforms' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_ModifyBoneList
// 0x0038 (0x0178 - 0x0140)
struct FGbxAnimNode_ModifyBoneList final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FBoneReference>                 BonesToModify;                                     // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0151(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x0152(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x0153(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0154(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x0155(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputTransforms                       InputTransforms;                                   // 0x0158(0x0010)(Edit, EditFixedSize, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_ModifyBoneList) == 0x000008, "Wrong alignment on FGbxAnimNode_ModifyBoneList");
static_assert(sizeof(FGbxAnimNode_ModifyBoneList) == 0x000178, "Wrong size on FGbxAnimNode_ModifyBoneList");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, BonesToModify) == 0x000140, "Member 'FGbxAnimNode_ModifyBoneList::BonesToModify' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, TranslationMode) == 0x000150, "Member 'FGbxAnimNode_ModifyBoneList::TranslationMode' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, RotationMode) == 0x000151, "Member 'FGbxAnimNode_ModifyBoneList::RotationMode' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, ScaleMode) == 0x000152, "Member 'FGbxAnimNode_ModifyBoneList::ScaleMode' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, TranslationSpace) == 0x000153, "Member 'FGbxAnimNode_ModifyBoneList::TranslationSpace' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, RotationSpace) == 0x000154, "Member 'FGbxAnimNode_ModifyBoneList::RotationSpace' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, ScaleSpace) == 0x000155, "Member 'FGbxAnimNode_ModifyBoneList::ScaleSpace' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_ModifyBoneList, InputTransforms) == 0x000158, "Member 'FGbxAnimNode_ModifyBoneList::InputTransforms' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_Print
// 0x0040 (0x0070 - 0x0030)
struct FGbxAnimNode_Print final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintToLog;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintToScreen;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x005C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxAnimNode_Print) == 0x000008, "Wrong alignment on FGbxAnimNode_Print");
static_assert(sizeof(FGbxAnimNode_Print) == 0x000070, "Wrong size on FGbxAnimNode_Print");
static_assert(offsetof(FGbxAnimNode_Print, Source) == 0x000030, "Member 'FGbxAnimNode_Print::Source' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Print, InString) == 0x000048, "Member 'FGbxAnimNode_Print::InString' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Print, bPrintToLog) == 0x000058, "Member 'FGbxAnimNode_Print::bPrintToLog' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Print, bPrintToScreen) == 0x000059, "Member 'FGbxAnimNode_Print::bPrintToScreen' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Print, TextColor) == 0x00005C, "Member 'FGbxAnimNode_Print::TextColor' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Print, Duration) == 0x00006C, "Member 'FGbxAnimNode_Print::Duration' has a wrong offset!");

// ScriptStruct GbxAnimRuntime.GbxAnimNode_Spin
// 0x0038 (0x0178 - 0x0140)
struct FGbxAnimNode_Spin final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0140(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationAmount;                                    // 0x0158(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0xC];                                      // 0x0164(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EBoneControlSpace                             RotationSpace;                                     // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_Spin) == 0x000008, "Wrong alignment on FGbxAnimNode_Spin");
static_assert(sizeof(FGbxAnimNode_Spin) == 0x000178, "Wrong size on FGbxAnimNode_Spin");
static_assert(offsetof(FGbxAnimNode_Spin, BoneToModify) == 0x000140, "Member 'FGbxAnimNode_Spin::BoneToModify' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Spin, RotationAmount) == 0x000158, "Member 'FGbxAnimNode_Spin::RotationAmount' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_Spin, RotationSpace) == 0x000170, "Member 'FGbxAnimNode_Spin::RotationSpace' has a wrong offset!");

}

