#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Projectile_MAL_SR_ASMD_Orb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Proj_Weapon_BaseProjectile_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Projectile_MAL_SR_ASMD_Orb.Projectile_MAL_SR_ASMD_Orb_C
// 0x0018 (0x07A8 - 0x0790)
class AProjectile_MAL_SR_ASMD_Orb_C final : public AProj_Weapon_BaseProjectile_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Projectile_MAL_SR_ASMD_Orb_C;       // 0x0790(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       ProjOverlap;                                       // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Projectile_MAL_SR_ASMD_Orb(int32 EntryPoint);
	void BndEvt__ProjOverlap_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature_Projectile_MAL_SR_ASMD_Orb(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Projectile_MAL_SR_ASMD_Orb_C">();
	}
	static class AProjectile_MAL_SR_ASMD_Orb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_MAL_SR_ASMD_Orb_C>();
	}
};
static_assert(alignof(AProjectile_MAL_SR_ASMD_Orb_C) == 0x000008, "Wrong alignment on AProjectile_MAL_SR_ASMD_Orb_C");
static_assert(sizeof(AProjectile_MAL_SR_ASMD_Orb_C) == 0x0007A8, "Wrong size on AProjectile_MAL_SR_ASMD_Orb_C");
static_assert(offsetof(AProjectile_MAL_SR_ASMD_Orb_C, UberGraphFrame_Projectile_MAL_SR_ASMD_Orb_C) == 0x000790, "Member 'AProjectile_MAL_SR_ASMD_Orb_C::UberGraphFrame_Projectile_MAL_SR_ASMD_Orb_C' has a wrong offset!");
static_assert(offsetof(AProjectile_MAL_SR_ASMD_Orb_C, ProjOverlap) == 0x000798, "Member 'AProjectile_MAL_SR_ASMD_Orb_C::ProjOverlap' has a wrong offset!");
static_assert(offsetof(AProjectile_MAL_SR_ASMD_Orb_C, ParticleSystem) == 0x0007A0, "Member 'AProjectile_MAL_SR_ASMD_Orb_C::ParticleSystem' has a wrong offset!");

}

