#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DatasmithContent

#include "Basic.hpp"

#include "DatasmithContent_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DatasmithContent.DatasmithSceneImportData
// 0x0000 (0x0028 - 0x0028)
class UDatasmithSceneImportData : public UAssetImportData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithSceneImportData">();
	}
	static class UDatasmithSceneImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithSceneImportData>();
	}
};
static_assert(alignof(UDatasmithSceneImportData) == 0x000008, "Wrong alignment on UDatasmithSceneImportData");
static_assert(sizeof(UDatasmithSceneImportData) == 0x000028, "Wrong size on UDatasmithSceneImportData");

// Class DatasmithContent.DatasmithCADImportSceneData
// 0x0000 (0x0028 - 0x0028)
class UDatasmithCADImportSceneData final : public UDatasmithSceneImportData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithCADImportSceneData">();
	}
	static class UDatasmithCADImportSceneData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithCADImportSceneData>();
	}
};
static_assert(alignof(UDatasmithCADImportSceneData) == 0x000008, "Wrong alignment on UDatasmithCADImportSceneData");
static_assert(sizeof(UDatasmithCADImportSceneData) == 0x000028, "Wrong size on UDatasmithCADImportSceneData");

// Class DatasmithContent.DatasmithAreaLightActor
// 0x0020 (0x0478 - 0x0458)
class ADatasmithAreaLightActor final : public AActor
{
public:
	EDatasmithAreaLightActorShape                 LightShape;                                        // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Dimensions;                                        // 0x045C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0464(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithAreaLightActor">();
	}
	static class ADatasmithAreaLightActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADatasmithAreaLightActor>();
	}
};
static_assert(alignof(ADatasmithAreaLightActor) == 0x000008, "Wrong alignment on ADatasmithAreaLightActor");
static_assert(sizeof(ADatasmithAreaLightActor) == 0x000478, "Wrong size on ADatasmithAreaLightActor");
static_assert(offsetof(ADatasmithAreaLightActor, LightShape) == 0x000458, "Member 'ADatasmithAreaLightActor::LightShape' has a wrong offset!");
static_assert(offsetof(ADatasmithAreaLightActor, Dimensions) == 0x00045C, "Member 'ADatasmithAreaLightActor::Dimensions' has a wrong offset!");
static_assert(offsetof(ADatasmithAreaLightActor, Color) == 0x000464, "Member 'ADatasmithAreaLightActor::Color' has a wrong offset!");
static_assert(offsetof(ADatasmithAreaLightActor, Intensity) == 0x000474, "Member 'ADatasmithAreaLightActor::Intensity' has a wrong offset!");

// Class DatasmithContent.DatasmithObjectTemplate
// 0x0000 (0x0028 - 0x0028)
class UDatasmithObjectTemplate : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithObjectTemplate">();
	}
	static class UDatasmithObjectTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithObjectTemplate>();
	}
};
static_assert(alignof(UDatasmithObjectTemplate) == 0x000008, "Wrong alignment on UDatasmithObjectTemplate");
static_assert(sizeof(UDatasmithObjectTemplate) == 0x000028, "Wrong size on UDatasmithObjectTemplate");

// Class DatasmithContent.DatasmithAreaLightActorTemplate
// 0x0028 (0x0050 - 0x0028)
class UDatasmithAreaLightActorTemplate final : public UDatasmithObjectTemplate
{
public:
	EDatasmithAreaLightActorShape                 LightShape;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Dimensions;                                        // 0x002C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0034(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHidden : 1;                                       // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithAreaLightActorTemplate">();
	}
	static class UDatasmithAreaLightActorTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithAreaLightActorTemplate>();
	}
};
static_assert(alignof(UDatasmithAreaLightActorTemplate) == 0x000008, "Wrong alignment on UDatasmithAreaLightActorTemplate");
static_assert(sizeof(UDatasmithAreaLightActorTemplate) == 0x000050, "Wrong size on UDatasmithAreaLightActorTemplate");
static_assert(offsetof(UDatasmithAreaLightActorTemplate, LightShape) == 0x000028, "Member 'UDatasmithAreaLightActorTemplate::LightShape' has a wrong offset!");
static_assert(offsetof(UDatasmithAreaLightActorTemplate, Dimensions) == 0x00002C, "Member 'UDatasmithAreaLightActorTemplate::Dimensions' has a wrong offset!");
static_assert(offsetof(UDatasmithAreaLightActorTemplate, Color) == 0x000034, "Member 'UDatasmithAreaLightActorTemplate::Color' has a wrong offset!");
static_assert(offsetof(UDatasmithAreaLightActorTemplate, Intensity) == 0x000044, "Member 'UDatasmithAreaLightActorTemplate::Intensity' has a wrong offset!");

// Class DatasmithContent.DatasmithAssetImportData
// 0x0000 (0x0028 - 0x0028)
class UDatasmithAssetImportData : public UAssetImportData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithAssetImportData">();
	}
	static class UDatasmithAssetImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithAssetImportData>();
	}
};
static_assert(alignof(UDatasmithAssetImportData) == 0x000008, "Wrong alignment on UDatasmithAssetImportData");
static_assert(sizeof(UDatasmithAssetImportData) == 0x000028, "Wrong size on UDatasmithAssetImportData");

// Class DatasmithContent.DatasmithStaticMeshImportData
// 0x0000 (0x0028 - 0x0028)
class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithStaticMeshImportData">();
	}
	static class UDatasmithStaticMeshImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithStaticMeshImportData>();
	}
};
static_assert(alignof(UDatasmithStaticMeshImportData) == 0x000008, "Wrong alignment on UDatasmithStaticMeshImportData");
static_assert(sizeof(UDatasmithStaticMeshImportData) == 0x000028, "Wrong size on UDatasmithStaticMeshImportData");

// Class DatasmithContent.DatasmithStaticMeshCADImportData
// 0x0000 (0x0028 - 0x0028)
class UDatasmithStaticMeshCADImportData final : public UDatasmithStaticMeshImportData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithStaticMeshCADImportData">();
	}
	static class UDatasmithStaticMeshCADImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithStaticMeshCADImportData>();
	}
};
static_assert(alignof(UDatasmithStaticMeshCADImportData) == 0x000008, "Wrong alignment on UDatasmithStaticMeshCADImportData");
static_assert(sizeof(UDatasmithStaticMeshCADImportData) == 0x000028, "Wrong size on UDatasmithStaticMeshCADImportData");

// Class DatasmithContent.DatasmithAssetUserData
// 0x0050 (0x0078 - 0x0028)
class UDatasmithAssetUserData final : public UAssetUserData
{
public:
	TMap<class FName, class FString>              MetaData;                                          // 0x0028(0x0050)(Edit, BlueprintVisible, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithAssetUserData">();
	}
	static class UDatasmithAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithAssetUserData>();
	}
};
static_assert(alignof(UDatasmithAssetUserData) == 0x000008, "Wrong alignment on UDatasmithAssetUserData");
static_assert(sizeof(UDatasmithAssetUserData) == 0x000078, "Wrong size on UDatasmithAssetUserData");
static_assert(offsetof(UDatasmithAssetUserData, MetaData) == 0x000028, "Member 'UDatasmithAssetUserData::MetaData' has a wrong offset!");

// Class DatasmithContent.DatasmithCineCameraComponentTemplate
// 0x0058 (0x0080 - 0x0028)
class UDatasmithCineCameraComponentTemplate final : public UDatasmithObjectTemplate
{
public:
	struct FDatasmithCameraFilmbackSettingsTemplate FilmbackSettings;                                  // 0x0028(0x0008)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatasmithCameraLensSettingsTemplate   LensSettings;                                      // 0x0030(0x0004)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatasmithCameraFocusSettingsTemplate  FocusSettings;                                     // 0x0034(0x0004)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatasmithPostProcessSettingsTemplate  PostProcessSettings;                               // 0x0040(0x0040)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithCineCameraComponentTemplate">();
	}
	static class UDatasmithCineCameraComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithCineCameraComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithCineCameraComponentTemplate) == 0x000010, "Wrong alignment on UDatasmithCineCameraComponentTemplate");
static_assert(sizeof(UDatasmithCineCameraComponentTemplate) == 0x000080, "Wrong size on UDatasmithCineCameraComponentTemplate");
static_assert(offsetof(UDatasmithCineCameraComponentTemplate, FilmbackSettings) == 0x000028, "Member 'UDatasmithCineCameraComponentTemplate::FilmbackSettings' has a wrong offset!");
static_assert(offsetof(UDatasmithCineCameraComponentTemplate, LensSettings) == 0x000030, "Member 'UDatasmithCineCameraComponentTemplate::LensSettings' has a wrong offset!");
static_assert(offsetof(UDatasmithCineCameraComponentTemplate, FocusSettings) == 0x000034, "Member 'UDatasmithCineCameraComponentTemplate::FocusSettings' has a wrong offset!");
static_assert(offsetof(UDatasmithCineCameraComponentTemplate, CurrentFocalLength) == 0x000038, "Member 'UDatasmithCineCameraComponentTemplate::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(UDatasmithCineCameraComponentTemplate, CurrentAperture) == 0x00003C, "Member 'UDatasmithCineCameraComponentTemplate::CurrentAperture' has a wrong offset!");
static_assert(offsetof(UDatasmithCineCameraComponentTemplate, PostProcessSettings) == 0x000040, "Member 'UDatasmithCineCameraComponentTemplate::PostProcessSettings' has a wrong offset!");

// Class DatasmithContent.DatasmithContentBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UDatasmithContentBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UDatasmithAssetUserData* GetDatasmithUserData(class UObject* Object);
	static void GetDatasmithUserDataKeysAndValuesForValue(class UObject* Object, const class FString& StringToMatch, TArray<class FName>* OutKeys, TArray<class FString>* OutValues);
	static class FString GetDatasmithUserDataValueForKey(class UObject* Object, class FName Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithContentBlueprintLibrary">();
	}
	static class UDatasmithContentBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithContentBlueprintLibrary>();
	}
};
static_assert(alignof(UDatasmithContentBlueprintLibrary) == 0x000008, "Wrong alignment on UDatasmithContentBlueprintLibrary");
static_assert(sizeof(UDatasmithContentBlueprintLibrary) == 0x000028, "Wrong size on UDatasmithContentBlueprintLibrary");

// Class DatasmithContent.DatasmithImportOptions
// 0x0060 (0x0088 - 0x0028)
class UDatasmithImportOptions final : public UObject
{
public:
	EDatasmithImportSearchPackagePolicy           SearchPackagePolicy;                               // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportAssetConflictPolicy           MaterialConflictPolicy;                            // 0x0029(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportAssetConflictPolicy           TextureConflictPolicy;                             // 0x002A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportActorPolicy                   StaticMeshActorImportPolicy;                       // 0x002B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportActorPolicy                   LightImportPolicy;                                 // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportActorPolicy                   CameraImportPolicy;                                // 0x002D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportActorPolicy                   OtherActorImportPolicy;                            // 0x002E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDatasmithImportMaterialQuality               MaterialQuality;                                   // 0x002F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDatasmithImportBaseOptions            BaseOptions;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatasmithTessellationOptions          TessellationOptions;                               // 0x0050(0x000C)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatasmithReimportOptions              ReimportOptions;                                   // 0x005C(0x0002)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2A];                                      // 0x005E(0x002A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithImportOptions">();
	}
	static class UDatasmithImportOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithImportOptions>();
	}
};
static_assert(alignof(UDatasmithImportOptions) == 0x000008, "Wrong alignment on UDatasmithImportOptions");
static_assert(sizeof(UDatasmithImportOptions) == 0x000088, "Wrong size on UDatasmithImportOptions");
static_assert(offsetof(UDatasmithImportOptions, SearchPackagePolicy) == 0x000028, "Member 'UDatasmithImportOptions::SearchPackagePolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, MaterialConflictPolicy) == 0x000029, "Member 'UDatasmithImportOptions::MaterialConflictPolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, TextureConflictPolicy) == 0x00002A, "Member 'UDatasmithImportOptions::TextureConflictPolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, StaticMeshActorImportPolicy) == 0x00002B, "Member 'UDatasmithImportOptions::StaticMeshActorImportPolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, LightImportPolicy) == 0x00002C, "Member 'UDatasmithImportOptions::LightImportPolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, CameraImportPolicy) == 0x00002D, "Member 'UDatasmithImportOptions::CameraImportPolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, OtherActorImportPolicy) == 0x00002E, "Member 'UDatasmithImportOptions::OtherActorImportPolicy' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, MaterialQuality) == 0x00002F, "Member 'UDatasmithImportOptions::MaterialQuality' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, BaseOptions) == 0x000038, "Member 'UDatasmithImportOptions::BaseOptions' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, TessellationOptions) == 0x000050, "Member 'UDatasmithImportOptions::TessellationOptions' has a wrong offset!");
static_assert(offsetof(UDatasmithImportOptions, ReimportOptions) == 0x00005C, "Member 'UDatasmithImportOptions::ReimportOptions' has a wrong offset!");

// Class DatasmithContent.DatasmithLightComponentTemplate
// 0x0038 (0x0060 - 0x0028)
class UDatasmithLightComponentTemplate final : public UDatasmithObjectTemplate
{
public:
	uint8                                         bVisible : 1;                                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_28_1 : 7;                                   // 0x0028(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         CastShadows : 1;                                   // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseTemperature : 1;                               // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseIESBrightness : 1;                             // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IESBrightnessScale;                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x003C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureLightProfile*                   IESTexture;                                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithLightComponentTemplate">();
	}
	static class UDatasmithLightComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithLightComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithLightComponentTemplate) == 0x000008, "Wrong alignment on UDatasmithLightComponentTemplate");
static_assert(sizeof(UDatasmithLightComponentTemplate) == 0x000060, "Wrong size on UDatasmithLightComponentTemplate");
static_assert(offsetof(UDatasmithLightComponentTemplate, Intensity) == 0x000030, "Member 'UDatasmithLightComponentTemplate::Intensity' has a wrong offset!");
static_assert(offsetof(UDatasmithLightComponentTemplate, Temperature) == 0x000034, "Member 'UDatasmithLightComponentTemplate::Temperature' has a wrong offset!");
static_assert(offsetof(UDatasmithLightComponentTemplate, IESBrightnessScale) == 0x000038, "Member 'UDatasmithLightComponentTemplate::IESBrightnessScale' has a wrong offset!");
static_assert(offsetof(UDatasmithLightComponentTemplate, LightColor) == 0x00003C, "Member 'UDatasmithLightComponentTemplate::LightColor' has a wrong offset!");
static_assert(offsetof(UDatasmithLightComponentTemplate, LightFunctionMaterial) == 0x000050, "Member 'UDatasmithLightComponentTemplate::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(UDatasmithLightComponentTemplate, IESTexture) == 0x000058, "Member 'UDatasmithLightComponentTemplate::IESTexture' has a wrong offset!");

// Class DatasmithContent.DatasmithPointLightComponentTemplate
// 0x0010 (0x0038 - 0x0028)
class UDatasmithPointLightComponentTemplate final : public UDatasmithObjectTemplate
{
public:
	ELightUnits                                   IntensityUnits;                                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceRadius;                                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithPointLightComponentTemplate">();
	}
	static class UDatasmithPointLightComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithPointLightComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithPointLightComponentTemplate) == 0x000008, "Wrong alignment on UDatasmithPointLightComponentTemplate");
static_assert(sizeof(UDatasmithPointLightComponentTemplate) == 0x000038, "Wrong size on UDatasmithPointLightComponentTemplate");
static_assert(offsetof(UDatasmithPointLightComponentTemplate, IntensityUnits) == 0x000028, "Member 'UDatasmithPointLightComponentTemplate::IntensityUnits' has a wrong offset!");
static_assert(offsetof(UDatasmithPointLightComponentTemplate, SourceRadius) == 0x00002C, "Member 'UDatasmithPointLightComponentTemplate::SourceRadius' has a wrong offset!");
static_assert(offsetof(UDatasmithPointLightComponentTemplate, SourceLength) == 0x000030, "Member 'UDatasmithPointLightComponentTemplate::SourceLength' has a wrong offset!");
static_assert(offsetof(UDatasmithPointLightComponentTemplate, AttenuationRadius) == 0x000034, "Member 'UDatasmithPointLightComponentTemplate::AttenuationRadius' has a wrong offset!");

// Class DatasmithContent.DatasmithScene
// 0x0000 (0x0028 - 0x0028)
class UDatasmithScene final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithScene">();
	}
	static class UDatasmithScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithScene>();
	}
};
static_assert(alignof(UDatasmithScene) == 0x000008, "Wrong alignment on UDatasmithScene");
static_assert(sizeof(UDatasmithScene) == 0x000028, "Wrong size on UDatasmithScene");

// Class DatasmithContent.DatasmithSceneActor
// 0x0058 (0x04B0 - 0x0458)
class ADatasmithSceneActor final : public AActor
{
public:
	class UDatasmithScene*                        Scene;                                             // 0x0458(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class AActor>> RelatedActors;                                     // 0x0460(0x0050)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithSceneActor">();
	}
	static class ADatasmithSceneActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADatasmithSceneActor>();
	}
};
static_assert(alignof(ADatasmithSceneActor) == 0x000008, "Wrong alignment on ADatasmithSceneActor");
static_assert(sizeof(ADatasmithSceneActor) == 0x0004B0, "Wrong size on ADatasmithSceneActor");
static_assert(offsetof(ADatasmithSceneActor, Scene) == 0x000458, "Member 'ADatasmithSceneActor::Scene' has a wrong offset!");
static_assert(offsetof(ADatasmithSceneActor, RelatedActors) == 0x000460, "Member 'ADatasmithSceneActor::RelatedActors' has a wrong offset!");

// Class DatasmithContent.DatasmithSceneComponentTemplate
// 0x0048 (0x0070 - 0x0028)
class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0030(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EComponentMobility                            Mobility;                                          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachParent;                                      // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithSceneComponentTemplate">();
	}
	static class UDatasmithSceneComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithSceneComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithSceneComponentTemplate) == 0x000010, "Wrong alignment on UDatasmithSceneComponentTemplate");
static_assert(sizeof(UDatasmithSceneComponentTemplate) == 0x000070, "Wrong size on UDatasmithSceneComponentTemplate");
static_assert(offsetof(UDatasmithSceneComponentTemplate, RelativeTransform) == 0x000030, "Member 'UDatasmithSceneComponentTemplate::RelativeTransform' has a wrong offset!");
static_assert(offsetof(UDatasmithSceneComponentTemplate, Mobility) == 0x000060, "Member 'UDatasmithSceneComponentTemplate::Mobility' has a wrong offset!");
static_assert(offsetof(UDatasmithSceneComponentTemplate, AttachParent) == 0x000068, "Member 'UDatasmithSceneComponentTemplate::AttachParent' has a wrong offset!");

// Class DatasmithContent.DatasmithSkyLightComponentTemplate
// 0x0010 (0x0038 - 0x0028)
class UDatasmithSkyLightComponentTemplate final : public UDatasmithObjectTemplate
{
public:
	ESkyLightSourceType                           SourceType;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CubemapResolution;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           Cubemap;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithSkyLightComponentTemplate">();
	}
	static class UDatasmithSkyLightComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithSkyLightComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithSkyLightComponentTemplate) == 0x000008, "Wrong alignment on UDatasmithSkyLightComponentTemplate");
static_assert(sizeof(UDatasmithSkyLightComponentTemplate) == 0x000038, "Wrong size on UDatasmithSkyLightComponentTemplate");
static_assert(offsetof(UDatasmithSkyLightComponentTemplate, SourceType) == 0x000028, "Member 'UDatasmithSkyLightComponentTemplate::SourceType' has a wrong offset!");
static_assert(offsetof(UDatasmithSkyLightComponentTemplate, CubemapResolution) == 0x00002C, "Member 'UDatasmithSkyLightComponentTemplate::CubemapResolution' has a wrong offset!");
static_assert(offsetof(UDatasmithSkyLightComponentTemplate, Cubemap) == 0x000030, "Member 'UDatasmithSkyLightComponentTemplate::Cubemap' has a wrong offset!");

// Class DatasmithContent.DatasmithSpotLightComponentTemplate
// 0x0008 (0x0030 - 0x0028)
class UDatasmithSpotLightComponentTemplate final : public UDatasmithObjectTemplate
{
public:
	float                                         InnerConeAngle;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithSpotLightComponentTemplate">();
	}
	static class UDatasmithSpotLightComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithSpotLightComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithSpotLightComponentTemplate) == 0x000008, "Wrong alignment on UDatasmithSpotLightComponentTemplate");
static_assert(sizeof(UDatasmithSpotLightComponentTemplate) == 0x000030, "Wrong size on UDatasmithSpotLightComponentTemplate");
static_assert(offsetof(UDatasmithSpotLightComponentTemplate, InnerConeAngle) == 0x000028, "Member 'UDatasmithSpotLightComponentTemplate::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(UDatasmithSpotLightComponentTemplate, OuterConeAngle) == 0x00002C, "Member 'UDatasmithSpotLightComponentTemplate::OuterConeAngle' has a wrong offset!");

// Class DatasmithContent.DatasmithStaticMeshComponentTemplate
// 0x0020 (0x0090 - 0x0070)
class UDatasmithStaticMeshComponentTemplate final : public UDatasmithSceneComponentTemplate
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithStaticMeshComponentTemplate">();
	}
	static class UDatasmithStaticMeshComponentTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithStaticMeshComponentTemplate>();
	}
};
static_assert(alignof(UDatasmithStaticMeshComponentTemplate) == 0x000010, "Wrong alignment on UDatasmithStaticMeshComponentTemplate");
static_assert(sizeof(UDatasmithStaticMeshComponentTemplate) == 0x000090, "Wrong size on UDatasmithStaticMeshComponentTemplate");
static_assert(offsetof(UDatasmithStaticMeshComponentTemplate, StaticMesh) == 0x000070, "Member 'UDatasmithStaticMeshComponentTemplate::StaticMesh' has a wrong offset!");
static_assert(offsetof(UDatasmithStaticMeshComponentTemplate, OverrideMaterials) == 0x000078, "Member 'UDatasmithStaticMeshComponentTemplate::OverrideMaterials' has a wrong offset!");

// Class DatasmithContent.DatasmithStaticMeshTemplate
// 0x0078 (0x00A0 - 0x0028)
class UDatasmithStaticMeshTemplate final : public UDatasmithObjectTemplate
{
public:
	struct FDatasmithMeshSectionInfoMapTemplate   SectionInfoMap;                                    // 0x0028(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	int32                                         LightMapCoordinateIndex;                           // 0x0078(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightMapResolution;                                // 0x007C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDatasmithMeshBuildSettingsTemplate> BuildSettings;                                     // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FDatasmithStaticMaterialTemplate> StaticMaterials;                                   // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatasmithStaticMeshTemplate">();
	}
	static class UDatasmithStaticMeshTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatasmithStaticMeshTemplate>();
	}
};
static_assert(alignof(UDatasmithStaticMeshTemplate) == 0x000008, "Wrong alignment on UDatasmithStaticMeshTemplate");
static_assert(sizeof(UDatasmithStaticMeshTemplate) == 0x0000A0, "Wrong size on UDatasmithStaticMeshTemplate");
static_assert(offsetof(UDatasmithStaticMeshTemplate, SectionInfoMap) == 0x000028, "Member 'UDatasmithStaticMeshTemplate::SectionInfoMap' has a wrong offset!");
static_assert(offsetof(UDatasmithStaticMeshTemplate, LightMapCoordinateIndex) == 0x000078, "Member 'UDatasmithStaticMeshTemplate::LightMapCoordinateIndex' has a wrong offset!");
static_assert(offsetof(UDatasmithStaticMeshTemplate, LightMapResolution) == 0x00007C, "Member 'UDatasmithStaticMeshTemplate::LightMapResolution' has a wrong offset!");
static_assert(offsetof(UDatasmithStaticMeshTemplate, BuildSettings) == 0x000080, "Member 'UDatasmithStaticMeshTemplate::BuildSettings' has a wrong offset!");
static_assert(offsetof(UDatasmithStaticMeshTemplate, StaticMaterials) == 0x000090, "Member 'UDatasmithStaticMeshTemplate::StaticMaterials' has a wrong offset!");

}

