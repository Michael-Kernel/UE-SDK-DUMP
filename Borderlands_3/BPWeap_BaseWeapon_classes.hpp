#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_BaseWeapon

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWeap_BaseWeapon.BPWeap_BaseWeapon_C
// 0x0070 (0x09D0 - 0x0960)
#pragma pack(push, 0x1)
class alignas(0x08) ABPWeap_BaseWeapon_C : public AOakWeapon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0960(0x0008)(Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Mesh3P;                                            // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          OakCharacter;                                      // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UManufacturerData*                      Manufacturer;                                      // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitialized;                                      // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x3];                                      // 0x0981(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Joke_Reload_Delta;                                 // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Joke_Reload_Current;                               // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_Accuracy;                                     // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_Handling;                                     // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_Damage;                                       // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_FireRate;                                     // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_ReloadSpeed;                                  // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_CritDamage;                                   // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_ChargeTime;                                   // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_ProjectileSpeed;                              // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_AreaDamage;                                   // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Name_HeatImpulse;                                  // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GenericActorContainer;                             // 0x09B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                         OverrideManufacturerDescription;                   // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPWeap_BaseWeapon(int32 EntryPoint);
	void Notify_ReloadEnded(bool bCompleted);
	void Notify_ReloadStarted(bool bAutoReload);
	void WeaponAttached();
	void ReInitialize();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void BoneRotator_Incremental(float Current, float Target, float DeltaTime, float BoneRotationSpeed, float TotalRotation, float* CurrentRotation, float* NewRotation, struct FRotator* CurrentRotator);
	void Get_IK_Offset_Data(bool DebugSockets, bool First_Person, class FName WeaponSocket_Left, class FName WeaponSocket_Right, struct FTransform* L_IK_Offset, struct FTransform* R_IK_Offset);
	void JokeReload();
	void GetChargePercent(float* ChargePercent);
	void BPAnim_Data(float* FiregripType, float* GripType, float* ScopeType, float* ModeType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWeap_BaseWeapon_C">();
	}
	static class ABPWeap_BaseWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPWeap_BaseWeapon_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABPWeap_BaseWeapon_C) == 0x000008, "Wrong alignment on ABPWeap_BaseWeapon_C");
static_assert(sizeof(ABPWeap_BaseWeapon_C) == 0x0009D0, "Wrong size on ABPWeap_BaseWeapon_C");
static_assert(offsetof(ABPWeap_BaseWeapon_C, UberGraphFrame) == 0x000960, "Member 'ABPWeap_BaseWeapon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Mesh3P) == 0x000968, "Member 'ABPWeap_BaseWeapon_C::Mesh3P' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, OakCharacter) == 0x000970, "Member 'ABPWeap_BaseWeapon_C::OakCharacter' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Manufacturer) == 0x000978, "Member 'ABPWeap_BaseWeapon_C::Manufacturer' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, bInitialized) == 0x000980, "Member 'ABPWeap_BaseWeapon_C::bInitialized' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Joke_Reload_Delta) == 0x000984, "Member 'ABPWeap_BaseWeapon_C::Joke_Reload_Delta' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Joke_Reload_Current) == 0x000988, "Member 'ABPWeap_BaseWeapon_C::Joke_Reload_Current' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_Accuracy) == 0x00098C, "Member 'ABPWeap_BaseWeapon_C::Name_Accuracy' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_Handling) == 0x000990, "Member 'ABPWeap_BaseWeapon_C::Name_Handling' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_Damage) == 0x000994, "Member 'ABPWeap_BaseWeapon_C::Name_Damage' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_FireRate) == 0x000998, "Member 'ABPWeap_BaseWeapon_C::Name_FireRate' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_ReloadSpeed) == 0x00099C, "Member 'ABPWeap_BaseWeapon_C::Name_ReloadSpeed' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_CritDamage) == 0x0009A0, "Member 'ABPWeap_BaseWeapon_C::Name_CritDamage' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_ChargeTime) == 0x0009A4, "Member 'ABPWeap_BaseWeapon_C::Name_ChargeTime' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_ProjectileSpeed) == 0x0009A8, "Member 'ABPWeap_BaseWeapon_C::Name_ProjectileSpeed' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_AreaDamage) == 0x0009AC, "Member 'ABPWeap_BaseWeapon_C::Name_AreaDamage' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, Name_HeatImpulse) == 0x0009B0, "Member 'ABPWeap_BaseWeapon_C::Name_HeatImpulse' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, GenericActorContainer) == 0x0009B8, "Member 'ABPWeap_BaseWeapon_C::GenericActorContainer' has a wrong offset!");
static_assert(offsetof(ABPWeap_BaseWeapon_C, OverrideManufacturerDescription) == 0x0009C8, "Member 'ABPWeap_BaseWeapon_C::OverrideManufacturerDescription' has a wrong offset!");

}

