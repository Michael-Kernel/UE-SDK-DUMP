#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_AnointParent

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "Enum_BeastmasterActionSkill_structs.hpp"
#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "EOperativeGadgets_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ability_AnointParent.Ability_AnointParent_C
// 0x00D0 (0x01C8 - 0x00F8)
class UAbility_AnointParent_C : public UOakAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F8(0x0008)(Transient, DuplicateTransient)
	class UOakPlayerAbilityManagerComponent*      OakPlayerAbilityManager;                           // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakPlayerAbilityEventHub*              PlayerAbilityEventHub;                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_AnointParent; // 0x0110(0x0028)()
	class UStatusEffectData*                      AnointmentEffect;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttributeInitializationData           AnointmentDuration;                                // 0x0140(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          AnointBeastmaster;                                 // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointGunner;                                      // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointOperative;                                   // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointSiren;                                       // 0x017B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointBeastmasterHulkOutSuccessful;                // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointOnSkillUse;                                  // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointOnSkillEnded;                                // 0x017E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AnointOnSkillReadied;                              // 0x017F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGbxAbilityResourceController_ConditionalDamageModifier RsrcCntrlr_GbxAbilityResourceController_ConditionalDamageModifier_Ability_AnointParent; // 0x0180(0x0028)()
	class UConditionalDamageModifier*             AnointConditionalDamageMod;                        // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnointCDMOakDamageCauser;                          // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllowFakeGrasp;                                    // 0x01B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RemoveAnointEffectTimer;                           // 0x01B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          PhasegrapsSuccess;                                 // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Ability_AnointParent(int32 EntryPoint);
	void BindGunnerEvents();
	void BindSirenEvents();
	void BindOperativeEvents();
	void BindBeastmasterEvents();
	void OnActivated();
	void OnDeactivated();
	void AnointParent_HulkedOutEnded();
	void AnointParent_HulkedOutStarted(bool Res);
	void AnointParent_PhaseGraspEnded(bool Killed);
	void AnointParent_SirenPhaseGraspedEnemy(class AActor* Enemy, EPhaseTranceElementalType Element);
	void AnointParent_OperativeActionSkillActivated(EOperativeGadgets ActionSkill);
	void AnointParent_BeastmasterActionSkillActivated(Enum_BeastmasterActionSkill ActionSkill);
	void AnointParent_OnActionSkillReadied(class UOakActionAbility* ActionAbility);
	void AnointParent_OnActionSkillActivated(class UOakActionAbility* ActionAbility);
	void AnointParent_OnActionSkillCoolingDown(class UOakActionAbility* ActionAbility);
	void AnointParent_SetBinds();
	void AnointParent_OnPlayerAbilitySlotChanged(class UOakPlayerAbilitySlotData* SlotData);
	void AnointOnActionSkillCoolingDown(class UOakActionAbility* ActionAbility, bool* Res);
	void AnointOnActionSkillActivated(class UOakActionAbility* ActionAbility, bool* Res);
	void AnointOnActionSkillReadied(class UOakActionAbility* ActionAbility, bool* Res);
	void AnointTriggerEffect(bool TriggerEffect, bool* Res);
	void AnointRemoveEffect();
	void AnointRegisterCDM(bool Register, bool* Res);
	void AnointRemoveCDM();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ability_AnointParent_C">();
	}
	static class UAbility_AnointParent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_AnointParent_C>();
	}
};
static_assert(alignof(UAbility_AnointParent_C) == 0x000008, "Wrong alignment on UAbility_AnointParent_C");
static_assert(sizeof(UAbility_AnointParent_C) == 0x0001C8, "Wrong size on UAbility_AnointParent_C");
static_assert(offsetof(UAbility_AnointParent_C, UberGraphFrame) == 0x0000F8, "Member 'UAbility_AnointParent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, OakPlayerAbilityManager) == 0x000100, "Member 'UAbility_AnointParent_C::OakPlayerAbilityManager' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, PlayerAbilityEventHub) == 0x000108, "Member 'UAbility_AnointParent_C::PlayerAbilityEventHub' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_AnointParent) == 0x000110, "Member 'UAbility_AnointParent_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_AnointParent' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointmentEffect) == 0x000138, "Member 'UAbility_AnointParent_C::AnointmentEffect' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointmentDuration) == 0x000140, "Member 'UAbility_AnointParent_C::AnointmentDuration' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointBeastmaster) == 0x000178, "Member 'UAbility_AnointParent_C::AnointBeastmaster' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointGunner) == 0x000179, "Member 'UAbility_AnointParent_C::AnointGunner' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointOperative) == 0x00017A, "Member 'UAbility_AnointParent_C::AnointOperative' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointSiren) == 0x00017B, "Member 'UAbility_AnointParent_C::AnointSiren' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointBeastmasterHulkOutSuccessful) == 0x00017C, "Member 'UAbility_AnointParent_C::AnointBeastmasterHulkOutSuccessful' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointOnSkillUse) == 0x00017D, "Member 'UAbility_AnointParent_C::AnointOnSkillUse' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointOnSkillEnded) == 0x00017E, "Member 'UAbility_AnointParent_C::AnointOnSkillEnded' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointOnSkillReadied) == 0x00017F, "Member 'UAbility_AnointParent_C::AnointOnSkillReadied' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, RsrcCntrlr_GbxAbilityResourceController_ConditionalDamageModifier_Ability_AnointParent) == 0x000180, "Member 'UAbility_AnointParent_C::RsrcCntrlr_GbxAbilityResourceController_ConditionalDamageModifier_Ability_AnointParent' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointConditionalDamageMod) == 0x0001A8, "Member 'UAbility_AnointParent_C::AnointConditionalDamageMod' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AnointCDMOakDamageCauser) == 0x0001B0, "Member 'UAbility_AnointParent_C::AnointCDMOakDamageCauser' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, AllowFakeGrasp) == 0x0001B1, "Member 'UAbility_AnointParent_C::AllowFakeGrasp' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, RemoveAnointEffectTimer) == 0x0001B8, "Member 'UAbility_AnointParent_C::RemoveAnointEffectTimer' has a wrong offset!");
static_assert(offsetof(UAbility_AnointParent_C, PhasegrapsSuccess) == 0x0001C0, "Member 'UAbility_AnointParent_C::PhasegrapsSuccess' has a wrong offset!");

}

