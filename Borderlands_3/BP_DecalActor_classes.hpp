#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DecalActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GbxGameSystemCore_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DecalActor.BP_DecalActor_C
// 0x0088 (0x04E0 - 0x0458)
class ABP_DecalActor_C : public ADecorator
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0458(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   TranslateArrowHandle;                              // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Decal_Material;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Default_material;                                  // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Decal_Sort_Order;                                  // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverRideDecalProperties;                           // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Heightmap_Blend_Opacity;                           // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Heightmap_Blend_Contrast;                          // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeMask_Strength;                                 // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Normals_Strength;                                  // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorBase;                                     // 0x04A4(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorHighlight;                                // 0x04B4(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HueShift;                                          // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Desaturation;                                      // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoughnessMax;                                      // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoughnessMin;                                      // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UVs_Tilling_U;                                     // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UVs_Tilling_V;                                     // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UVs_Horizontal_TileWithScale;                      // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UVs_Vertical_TileWithScale;                        // 0x04DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          GlobalWaterline_On;                                // 0x04DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void SetDefaultMaterialParameters();
	void SetDecalScale();
	void CreateDynamicMaterial();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_DecalActor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DecalActor_C">();
	}
	static class ABP_DecalActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DecalActor_C>();
	}
};
static_assert(alignof(ABP_DecalActor_C) == 0x000008, "Wrong alignment on ABP_DecalActor_C");
static_assert(sizeof(ABP_DecalActor_C) == 0x0004E0, "Wrong size on ABP_DecalActor_C");
static_assert(offsetof(ABP_DecalActor_C, UberGraphFrame) == 0x000458, "Member 'ABP_DecalActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, TranslateArrowHandle) == 0x000460, "Member 'ABP_DecalActor_C::TranslateArrowHandle' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Decal) == 0x000468, "Member 'ABP_DecalActor_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, DefaultSceneRoot) == 0x000470, "Member 'ABP_DecalActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Decal_Material) == 0x000478, "Member 'ABP_DecalActor_C::Decal_Material' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Default_material) == 0x000480, "Member 'ABP_DecalActor_C::Default_material' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Decal_Sort_Order) == 0x000488, "Member 'ABP_DecalActor_C::Decal_Sort_Order' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, OverRideDecalProperties) == 0x00048C, "Member 'ABP_DecalActor_C::OverRideDecalProperties' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Opacity) == 0x000490, "Member 'ABP_DecalActor_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Heightmap_Blend_Opacity) == 0x000494, "Member 'ABP_DecalActor_C::Heightmap_Blend_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Heightmap_Blend_Contrast) == 0x000498, "Member 'ABP_DecalActor_C::Heightmap_Blend_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, EdgeMask_Strength) == 0x00049C, "Member 'ABP_DecalActor_C::EdgeMask_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Normals_Strength) == 0x0004A0, "Member 'ABP_DecalActor_C::Normals_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, BaseColorBase) == 0x0004A4, "Member 'ABP_DecalActor_C::BaseColorBase' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, BaseColorHighlight) == 0x0004B4, "Member 'ABP_DecalActor_C::BaseColorHighlight' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, HueShift) == 0x0004C4, "Member 'ABP_DecalActor_C::HueShift' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, Desaturation) == 0x0004C8, "Member 'ABP_DecalActor_C::Desaturation' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, RoughnessMax) == 0x0004CC, "Member 'ABP_DecalActor_C::RoughnessMax' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, RoughnessMin) == 0x0004D0, "Member 'ABP_DecalActor_C::RoughnessMin' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, UVs_Tilling_U) == 0x0004D4, "Member 'ABP_DecalActor_C::UVs_Tilling_U' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, UVs_Tilling_V) == 0x0004D8, "Member 'ABP_DecalActor_C::UVs_Tilling_V' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, UVs_Horizontal_TileWithScale) == 0x0004DC, "Member 'ABP_DecalActor_C::UVs_Horizontal_TileWithScale' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, UVs_Vertical_TileWithScale) == 0x0004DD, "Member 'ABP_DecalActor_C::UVs_Vertical_TileWithScale' has a wrong offset!");
static_assert(offsetof(ABP_DecalActor_C, GlobalWaterline_On) == 0x0004DE, "Member 'ABP_DecalActor_C::GlobalWaterline_On' has a wrong offset!");

}

