#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Spiderant

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_Spiderant.BPI_Spiderant_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_Spiderant_C final : public IInterface
{
public:
	void Spiderant_SetEnrangedState();
	void Spiderant_ThrowWebBall();
	void Spiderant_RollChargeStart();
	void Spiderant_RollChargeMiss();
	void Spiderant_RollChargeStrike();
	void Spiderant_ThrowWebBallBounce(bool bIsDirectThrow);
	void Spiderant_SpawnWebBallLarge();
	void Spiderant_ThrowWebBallLarge();
	void Spiderant_QueenStompSummon(const struct FVector& SummonLocation);
	void Spiderant_MeleeAttack_Simple();
	void Spiderant_ReleaseSurroundWeb();
	void Spiderant_AbodomenDeath();
	void Spiderant_StartEnrage();
	void Spiderant_MeleeAttack_JumpStrike();
	void Spiderant_LeapAttack();
	void Spiderant_Reinforce();
	void Spiderant_Burrowing();
	void Spiderant_ClearLeapTicket();
	void Spiderant_LeapAttackBig();
	void Spiderant_MeleeAttack_OverTimeOneHit();
	void Spiderant_QueenStompSummonLeft(const struct FVector& SummonLocation);
	void Spiderant_QueenStompSummonRight(const struct FVector& SummonLocation);
	void Spiderant_SummonAiExplosive();
	void Spiderant_ThrowAiExplosive();
	void Spiderant_ThrowSmallWebBallSpread();
	void Spiderant_KingDeathThrow(bool AbdomenGone);
	void Spiderant_KingDeathThrowStart(bool AbdomenGone);
	void Spiderant_KingDeathThrowStop();
	void Spiderant_WebBeamYank(class AActor* WhoToYank);
	void Spiderant_WebBeamDetach();
	void Spiderant_WebBeamThrow();
	void Spiderant_BurrowStartDistanceCheck();
	void Spiderant_BurrowExit();
	void Spiderant_WebBeamYankReset();
	void Spiderant_ThrowBallTiny();
	void Spiderant_ThrowWebBallSmallStraight();
	void Spiderant_QueenStompSummon4(const struct FVector& SummonLocation);
	void Spiderant_QueenDeathSpawn();
	void Spiderant_BurrowExit_Burst();
	void Spiderant_StartBurrowDig();
	void Spiderant_ThrowWebCocoon();
	void Spiderant_KingDeathYellStart();
	void Spiderant_EnrageTransformEnd();
	void Spiderant_KingDeathYellStop();
	void Spiderant_RollChargeCleanUp();
	void Spiderant_PhaseLockImmune();
	void Spiderant_PhaseLockVulnerable();
	void Spiderant_SetCocoonProj();
	void Spiderant_LeapTrailOn();
	void Spiderant_LeapTrailOff();
	void Spiderant_TargetChanged(class AActor* TargetActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_Spiderant_C">();
	}
	static class IBPI_Spiderant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_Spiderant_C>();
	}
};
static_assert(alignof(IBPI_Spiderant_C) == 0x000008, "Wrong alignment on IBPI_Spiderant_C");
static_assert(sizeof(IBPI_Spiderant_C) == 0x000028, "Wrong size on IBPI_Spiderant_C");

}

