#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxDialog

#include "Basic.hpp"

#include "GbxDialog_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_classes.hpp"
#include "GbxRuntime_structs.hpp"
#include "GbxRuntime_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GbxDialog.AnimNotify_DialogEvent
// 0x0058 (0x0090 - 0x0038)
class UAnimNotify_DialogEvent final : public UAnimNotify
{
public:
	class UDialogEvent*                           DialogEvent;                                       // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UDialogParameter*, struct FDialogParameterValue> ParameterValues;                                   // 0x0040(0x0050)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_DialogEvent">();
	}
	static class UAnimNotify_DialogEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_DialogEvent>();
	}
};
static_assert(alignof(UAnimNotify_DialogEvent) == 0x000008, "Wrong alignment on UAnimNotify_DialogEvent");
static_assert(sizeof(UAnimNotify_DialogEvent) == 0x000090, "Wrong size on UAnimNotify_DialogEvent");
static_assert(offsetof(UAnimNotify_DialogEvent, DialogEvent) == 0x000038, "Member 'UAnimNotify_DialogEvent::DialogEvent' has a wrong offset!");
static_assert(offsetof(UAnimNotify_DialogEvent, ParameterValues) == 0x000040, "Member 'UAnimNotify_DialogEvent::ParameterValues' has a wrong offset!");

// Class GbxDialog.CharacterEchoDataBase
// 0x0010 (0x0040 - 0x0030)
class UCharacterEchoDataBase : public UGbxDataAsset
{
public:
	TArray<class FString>                         AvailableVoGMoodKeyframes;                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterEchoDataBase">();
	}
	static class UCharacterEchoDataBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterEchoDataBase>();
	}
};
static_assert(alignof(UCharacterEchoDataBase) == 0x000008, "Wrong alignment on UCharacterEchoDataBase");
static_assert(sizeof(UCharacterEchoDataBase) == 0x000040, "Wrong size on UCharacterEchoDataBase");
static_assert(offsetof(UCharacterEchoDataBase, AvailableVoGMoodKeyframes) == 0x000030, "Member 'UCharacterEchoDataBase::AvailableVoGMoodKeyframes' has a wrong offset!");

// Class GbxDialog.DialogActionBlueprintImplementation
// 0x0000 (0x0030 - 0x0030)
class UDialogActionBlueprintImplementation final : public UGbxDataAsset
{
public:
	void Execute(const struct FDialogContext& Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogActionBlueprintImplementation">();
	}
	static class UDialogActionBlueprintImplementation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogActionBlueprintImplementation>();
	}
};
static_assert(alignof(UDialogActionBlueprintImplementation) == 0x000008, "Wrong alignment on UDialogActionBlueprintImplementation");
static_assert(sizeof(UDialogActionBlueprintImplementation) == 0x000030, "Wrong size on UDialogActionBlueprintImplementation");

// Class GbxDialog.GbxDialogDataAsset
// 0x0010 (0x0040 - 0x0030)
class UGbxDialogDataAsset : public UGbxDataAsset
{
public:
	struct FGuid                                  Guid;                                              // 0x0030(0x0010)(Edit, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxDialogDataAsset">();
	}
	static class UGbxDialogDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDialogDataAsset>();
	}
};
static_assert(alignof(UGbxDialogDataAsset) == 0x000008, "Wrong alignment on UGbxDialogDataAsset");
static_assert(sizeof(UGbxDialogDataAsset) == 0x000040, "Wrong size on UGbxDialogDataAsset");
static_assert(offsetof(UGbxDialogDataAsset, Guid) == 0x000030, "Member 'UGbxDialogDataAsset::Guid' has a wrong offset!");

// Class GbxDialog.DialogActionFunction
// 0x0018 (0x0058 - 0x0040)
class UDialogActionFunction final : public UGbxDialogDataAsset
{
public:
	TArray<class UDialogParameter*>               Parameters;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UDialogActionBlueprintImplementation> BlueprintImplementation;                           // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogActionFunction">();
	}
	static class UDialogActionFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogActionFunction>();
	}
};
static_assert(alignof(UDialogActionFunction) == 0x000008, "Wrong alignment on UDialogActionFunction");
static_assert(sizeof(UDialogActionFunction) == 0x000058, "Wrong size on UDialogActionFunction");
static_assert(offsetof(UDialogActionFunction, Parameters) == 0x000040, "Member 'UDialogActionFunction::Parameters' has a wrong offset!");
static_assert(offsetof(UDialogActionFunction, BlueprintImplementation) == 0x000050, "Member 'UDialogActionFunction::BlueprintImplementation' has a wrong offset!");

// Class GbxDialog.DialogAudioComponentProvider
// 0x0000 (0x0028 - 0x0028)
class UDialogAudioComponentProvider : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogAudioComponentProvider">();
	}
	static class UDialogAudioComponentProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogAudioComponentProvider>();
	}
};
static_assert(alignof(UDialogAudioComponentProvider) == 0x000008, "Wrong alignment on UDialogAudioComponentProvider");
static_assert(sizeof(UDialogAudioComponentProvider) == 0x000028, "Wrong size on UDialogAudioComponentProvider");

// Class GbxDialog.DialogAudioComponentProvider_OcclusionResistant
// 0x0010 (0x0038 - 0x0028)
class UDialogAudioComponentProvider_OcclusionResistant final : public UDialogAudioComponentProvider
{
public:
	float                                         OcclusionWeight;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentTag;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogAudioComponentProvider_OcclusionResistant">();
	}
	static class UDialogAudioComponentProvider_OcclusionResistant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogAudioComponentProvider_OcclusionResistant>();
	}
};
static_assert(alignof(UDialogAudioComponentProvider_OcclusionResistant) == 0x000008, "Wrong alignment on UDialogAudioComponentProvider_OcclusionResistant");
static_assert(sizeof(UDialogAudioComponentProvider_OcclusionResistant) == 0x000038, "Wrong size on UDialogAudioComponentProvider_OcclusionResistant");
static_assert(offsetof(UDialogAudioComponentProvider_OcclusionResistant, OcclusionWeight) == 0x000028, "Member 'UDialogAudioComponentProvider_OcclusionResistant::OcclusionWeight' has a wrong offset!");
static_assert(offsetof(UDialogAudioComponentProvider_OcclusionResistant, ComponentTag) == 0x000030, "Member 'UDialogAudioComponentProvider_OcclusionResistant::ComponentTag' has a wrong offset!");

// Class GbxDialog.DialogBehaviorPreset
// 0x0000 (0x0030 - 0x0030)
class UDialogBehaviorPreset final : public UGbxDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogBehaviorPreset">();
	}
	static class UDialogBehaviorPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogBehaviorPreset>();
	}
};
static_assert(alignof(UDialogBehaviorPreset) == 0x000008, "Wrong alignment on UDialogBehaviorPreset");
static_assert(sizeof(UDialogBehaviorPreset) == 0x000030, "Wrong size on UDialogBehaviorPreset");

// Class GbxDialog.DialogBlackboard
// 0x29D0 (0x29F8 - 0x0028)
class UDialogBlackboard : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UDialogNameTag*, struct FDistributedSpeakerInfo> DistributedSpeakers;                               // 0x0030(0x0050)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, struct FDialogSequenceDelegates>  PlayingSequenceDelegates;                          // 0x0080(0x0050)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UDialogLookupSystem*                    LookupSystem;                                      // 0x00D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogControlSystem*                   ControlSystem;                                     // 0x00D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGbxDialogComponent*>            RegisteredSpeakers;                                // 0x00E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UDialogScriptData*>              ActiveScripts;                                     // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class UDialogNameTag*>                   ActivePureEchoNameTags;                            // 0x0100(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UDialogScriptData*, int32>         PinnedScriptRefCounts;                             // 0x0150(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UObject*, struct FDialogBlackboardCounterValueMap> CounterValues;                                     // 0x01A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0xA0];                                     // 0x01F0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PureEchoSpeakerHost;                               // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x2690];                                   // 0x0298(0x2690)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDialogConversation                    ConversationForDialogLookup;                       // 0x2928(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2934[0x4];                                     // 0x2934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class APlayerController>       SuggestedPlayerForNextConversation;                // 0x2938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  SuggestedKeyActorForNextConversation;              // 0x2940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SuggestedKeyLocationForNextConversation;           // 0x2948(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2954[0x4];                                     // 0x2954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FRecentConversationInfo>   RecentConversationInfo;                            // 0x2958(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<int32, struct FRecentDialogPerformanceInfo> RecentPerformances;                                // 0x29A8(0x0050)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogBlackboard">();
	}
	static class UDialogBlackboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogBlackboard>();
	}
};
static_assert(alignof(UDialogBlackboard) == 0x000008, "Wrong alignment on UDialogBlackboard");
static_assert(sizeof(UDialogBlackboard) == 0x0029F8, "Wrong size on UDialogBlackboard");
static_assert(offsetof(UDialogBlackboard, DistributedSpeakers) == 0x000030, "Member 'UDialogBlackboard::DistributedSpeakers' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, PlayingSequenceDelegates) == 0x000080, "Member 'UDialogBlackboard::PlayingSequenceDelegates' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, LookupSystem) == 0x0000D0, "Member 'UDialogBlackboard::LookupSystem' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, ControlSystem) == 0x0000D8, "Member 'UDialogBlackboard::ControlSystem' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, RegisteredSpeakers) == 0x0000E0, "Member 'UDialogBlackboard::RegisteredSpeakers' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, ActiveScripts) == 0x0000F0, "Member 'UDialogBlackboard::ActiveScripts' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, ActivePureEchoNameTags) == 0x000100, "Member 'UDialogBlackboard::ActivePureEchoNameTags' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, PinnedScriptRefCounts) == 0x000150, "Member 'UDialogBlackboard::PinnedScriptRefCounts' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, CounterValues) == 0x0001A0, "Member 'UDialogBlackboard::CounterValues' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, PureEchoSpeakerHost) == 0x000290, "Member 'UDialogBlackboard::PureEchoSpeakerHost' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, ConversationForDialogLookup) == 0x002928, "Member 'UDialogBlackboard::ConversationForDialogLookup' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, SuggestedPlayerForNextConversation) == 0x002938, "Member 'UDialogBlackboard::SuggestedPlayerForNextConversation' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, SuggestedKeyActorForNextConversation) == 0x002940, "Member 'UDialogBlackboard::SuggestedKeyActorForNextConversation' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, SuggestedKeyLocationForNextConversation) == 0x002948, "Member 'UDialogBlackboard::SuggestedKeyLocationForNextConversation' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, RecentConversationInfo) == 0x002958, "Member 'UDialogBlackboard::RecentConversationInfo' has a wrong offset!");
static_assert(offsetof(UDialogBlackboard, RecentPerformances) == 0x0029A8, "Member 'UDialogBlackboard::RecentPerformances' has a wrong offset!");

// Class GbxDialog.QuietTimePredicate
// 0x0000 (0x0028 - 0x0028)
class UQuietTimePredicate : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuietTimePredicate">();
	}
	static class UQuietTimePredicate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuietTimePredicate>();
	}
};
static_assert(alignof(UQuietTimePredicate) == 0x000008, "Wrong alignment on UQuietTimePredicate");
static_assert(sizeof(UQuietTimePredicate) == 0x000028, "Wrong size on UQuietTimePredicate");

// Class GbxDialog.QuietTimePredicate_BlockStuff
// 0x0038 (0x0060 - 0x0028)
class UQuietTimePredicate_BlockStuff final : public UQuietTimePredicate
{
public:
	TArray<class UObject*>                        BlockDialogScopeObjects;                           // 0x0028(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BlockKinds;                                        // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDialogStyle*>                   BlockStyles;                                       // 0x0048(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDialogNameTag*                         OnlyForCharacter;                                  // 0x0058(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuietTimePredicate_BlockStuff">();
	}
	static class UQuietTimePredicate_BlockStuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuietTimePredicate_BlockStuff>();
	}
};
static_assert(alignof(UQuietTimePredicate_BlockStuff) == 0x000008, "Wrong alignment on UQuietTimePredicate_BlockStuff");
static_assert(sizeof(UQuietTimePredicate_BlockStuff) == 0x000060, "Wrong size on UQuietTimePredicate_BlockStuff");
static_assert(offsetof(UQuietTimePredicate_BlockStuff, BlockDialogScopeObjects) == 0x000028, "Member 'UQuietTimePredicate_BlockStuff::BlockDialogScopeObjects' has a wrong offset!");
static_assert(offsetof(UQuietTimePredicate_BlockStuff, BlockKinds) == 0x000038, "Member 'UQuietTimePredicate_BlockStuff::BlockKinds' has a wrong offset!");
static_assert(offsetof(UQuietTimePredicate_BlockStuff, BlockStyles) == 0x000048, "Member 'UQuietTimePredicate_BlockStuff::BlockStyles' has a wrong offset!");
static_assert(offsetof(UQuietTimePredicate_BlockStuff, OnlyForCharacter) == 0x000058, "Member 'UQuietTimePredicate_BlockStuff::OnlyForCharacter' has a wrong offset!");

// Class GbxDialog.DialogControlSystem
// 0x0068 (0x0090 - 0x0028)
class UDialogControlSystem final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDialogThread>                  DialogThreads;                                     // 0x0030(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FQuietTimeTracker>              ActiveQuietTimes;                                  // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogLookupSystem*                    LookupSystem;                                      // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogBlackboard*                      Blackboard;                                        // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxDialogSettings*                     Settings;                                          // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFakePauseMode;                                    // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCinematicMode;                                  // 0x0081(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PauseModeLastFrameTime;                            // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogControlSystem">();
	}
	static class UDialogControlSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogControlSystem>();
	}
};
static_assert(alignof(UDialogControlSystem) == 0x000008, "Wrong alignment on UDialogControlSystem");
static_assert(sizeof(UDialogControlSystem) == 0x000090, "Wrong size on UDialogControlSystem");
static_assert(offsetof(UDialogControlSystem, DialogThreads) == 0x000030, "Member 'UDialogControlSystem::DialogThreads' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, ActiveQuietTimes) == 0x000040, "Member 'UDialogControlSystem::ActiveQuietTimes' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, LookupSystem) == 0x000060, "Member 'UDialogControlSystem::LookupSystem' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, Blackboard) == 0x000068, "Member 'UDialogControlSystem::Blackboard' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, Settings) == 0x000070, "Member 'UDialogControlSystem::Settings' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, World) == 0x000078, "Member 'UDialogControlSystem::World' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, bFakePauseMode) == 0x000080, "Member 'UDialogControlSystem::bFakePauseMode' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, bInCinematicMode) == 0x000081, "Member 'UDialogControlSystem::bInCinematicMode' has a wrong offset!");
static_assert(offsetof(UDialogControlSystem, PauseModeLastFrameTime) == 0x000088, "Member 'UDialogControlSystem::PauseModeLastFrameTime' has a wrong offset!");

// Class GbxDialog.DialogEnumType
// 0x0000 (0x0040 - 0x0040)
class UDialogEnumType final : public UGbxDialogDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogEnumType">();
	}
	static class UDialogEnumType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogEnumType>();
	}
};
static_assert(alignof(UDialogEnumType) == 0x000008, "Wrong alignment on UDialogEnumType");
static_assert(sizeof(UDialogEnumType) == 0x000040, "Wrong size on UDialogEnumType");

// Class GbxDialog.DialogEnumValue
// 0x0020 (0x0060 - 0x0040)
class UDialogEnumValue final : public UGbxDialogDataAsset
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogEnumType*                        EnumType;                                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxUIName*                             UIName;                                            // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictedQualifier;                              // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogEnumValue">();
	}
	static class UDialogEnumValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogEnumValue>();
	}
};
static_assert(alignof(UDialogEnumValue) == 0x000008, "Wrong alignment on UDialogEnumValue");
static_assert(sizeof(UDialogEnumValue) == 0x000060, "Wrong size on UDialogEnumValue");
static_assert(offsetof(UDialogEnumValue, EnumType) == 0x000048, "Member 'UDialogEnumValue::EnumType' has a wrong offset!");
static_assert(offsetof(UDialogEnumValue, UIName) == 0x000050, "Member 'UDialogEnumValue::UIName' has a wrong offset!");
static_assert(offsetof(UDialogEnumValue, bRestrictedQualifier) == 0x000058, "Member 'UDialogEnumValue::bRestrictedQualifier' has a wrong offset!");

// Class GbxDialog.DialogEnumValueInterface
// 0x0000 (0x0028 - 0x0028)
class IDialogEnumValueInterface final : public IInterface
{
public:
	class UDialogEnumValue* GetEnumValue(const class UDialogEnumType* EnumType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogEnumValueInterface">();
	}
	static class IDialogEnumValueInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDialogEnumValueInterface>();
	}
};
static_assert(alignof(IDialogEnumValueInterface) == 0x000008, "Wrong alignment on IDialogEnumValueInterface");
static_assert(sizeof(IDialogEnumValueInterface) == 0x000028, "Wrong size on IDialogEnumValueInterface");

// Class GbxDialog.DialogEvent
// 0x0020 (0x0060 - 0x0040)
class UDialogEvent final : public UGbxDialogDataAsset
{
public:
	TArray<class UDialogParameter*>               Parameters;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PerformanceNotifyNames;                            // 0x0050(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogEvent">();
	}
	static class UDialogEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogEvent>();
	}
};
static_assert(alignof(UDialogEvent) == 0x000008, "Wrong alignment on UDialogEvent");
static_assert(sizeof(UDialogEvent) == 0x000060, "Wrong size on UDialogEvent");
static_assert(offsetof(UDialogEvent, Parameters) == 0x000040, "Member 'UDialogEvent::Parameters' has a wrong offset!");
static_assert(offsetof(UDialogEvent, PerformanceNotifyNames) == 0x000050, "Member 'UDialogEvent::PerformanceNotifyNames' has a wrong offset!");

// Class GbxDialog.DialogEventList
// 0x0000 (0x0040 - 0x0040)
class UDialogEventList final : public UGbxDialogDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogEventList">();
	}
	static class UDialogEventList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogEventList>();
	}
};
static_assert(alignof(UDialogEventList) == 0x000008, "Wrong alignment on UDialogEventList");
static_assert(sizeof(UDialogEventList) == 0x000040, "Wrong size on UDialogEventList");

// Class GbxDialog.DialogLineData
// 0x00A8 (0x00E8 - 0x0040)
class UDialogLineData final : public UGbxDialogDataAsset
{
public:
	ELineScorePriorityMode                        ScorePriorityMode;                                 // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogSelectionCondition>      SelectionConditions;                               // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UDialogEnumValue*                       SpeakingCharacter;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogEnumValue*                       CharacterQualifier;                                // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDialogPerformanceData*>         Performances;                                      // 0x0068(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FString                                 VoGMoodKey;                                        // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogTimeSlotReference               FollowupTimeSlot;                                  // 0x0088(0x0040)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UDialogEvent*                           FollowupEvent;                                     // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogParameterMapping>        FollowupParameterMappings;                         // 0x00D0(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bSequential;                                       // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogLineData">();
	}
	static class UDialogLineData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogLineData>();
	}
};
static_assert(alignof(UDialogLineData) == 0x000008, "Wrong alignment on UDialogLineData");
static_assert(sizeof(UDialogLineData) == 0x0000E8, "Wrong size on UDialogLineData");
static_assert(offsetof(UDialogLineData, ScorePriorityMode) == 0x000040, "Member 'UDialogLineData::ScorePriorityMode' has a wrong offset!");
static_assert(offsetof(UDialogLineData, Weight) == 0x000044, "Member 'UDialogLineData::Weight' has a wrong offset!");
static_assert(offsetof(UDialogLineData, SelectionConditions) == 0x000048, "Member 'UDialogLineData::SelectionConditions' has a wrong offset!");
static_assert(offsetof(UDialogLineData, SpeakingCharacter) == 0x000058, "Member 'UDialogLineData::SpeakingCharacter' has a wrong offset!");
static_assert(offsetof(UDialogLineData, CharacterQualifier) == 0x000060, "Member 'UDialogLineData::CharacterQualifier' has a wrong offset!");
static_assert(offsetof(UDialogLineData, Performances) == 0x000068, "Member 'UDialogLineData::Performances' has a wrong offset!");
static_assert(offsetof(UDialogLineData, VoGMoodKey) == 0x000078, "Member 'UDialogLineData::VoGMoodKey' has a wrong offset!");
static_assert(offsetof(UDialogLineData, FollowupTimeSlot) == 0x000088, "Member 'UDialogLineData::FollowupTimeSlot' has a wrong offset!");
static_assert(offsetof(UDialogLineData, FollowupEvent) == 0x0000C8, "Member 'UDialogLineData::FollowupEvent' has a wrong offset!");
static_assert(offsetof(UDialogLineData, FollowupParameterMappings) == 0x0000D0, "Member 'UDialogLineData::FollowupParameterMappings' has a wrong offset!");
static_assert(offsetof(UDialogLineData, bSequential) == 0x0000E0, "Member 'UDialogLineData::bSequential' has a wrong offset!");

// Class GbxDialog.DialogLookupSystem
// 0x00E0 (0x0108 - 0x0028)
class UDialogLookupSystem final : public UObject
{
public:
	class UDialogControlSystem*                   ControlSystem;                                     // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDialogBlackboard*                      Blackboard;                                        // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UDialogEvent*, struct FDialogDecisionTree> EventTriggeringDecisionTrees;                      // 0x0038(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FDialogDecisionTree                    ConditionTriggeringDecisionTree;                   // 0x0088(0x0030)(Transient, NativeAccessSpecifierPrivate)
	TMap<class UDialogScriptData*, int32>         ActiveScriptRegistrationIDs;                       // 0x00B8(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogLookupSystem">();
	}
	static class UDialogLookupSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogLookupSystem>();
	}
};
static_assert(alignof(UDialogLookupSystem) == 0x000008, "Wrong alignment on UDialogLookupSystem");
static_assert(sizeof(UDialogLookupSystem) == 0x000108, "Wrong size on UDialogLookupSystem");
static_assert(offsetof(UDialogLookupSystem, ControlSystem) == 0x000028, "Member 'UDialogLookupSystem::ControlSystem' has a wrong offset!");
static_assert(offsetof(UDialogLookupSystem, Blackboard) == 0x000030, "Member 'UDialogLookupSystem::Blackboard' has a wrong offset!");
static_assert(offsetof(UDialogLookupSystem, EventTriggeringDecisionTrees) == 0x000038, "Member 'UDialogLookupSystem::EventTriggeringDecisionTrees' has a wrong offset!");
static_assert(offsetof(UDialogLookupSystem, ConditionTriggeringDecisionTree) == 0x000088, "Member 'UDialogLookupSystem::ConditionTriggeringDecisionTree' has a wrong offset!");
static_assert(offsetof(UDialogLookupSystem, ActiveScriptRegistrationIDs) == 0x0000B8, "Member 'UDialogLookupSystem::ActiveScriptRegistrationIDs' has a wrong offset!");

// Class GbxDialog.DialogNameTagMoodData
// 0x0050 (0x0080 - 0x0030)
class UDialogNameTagMoodData final : public UGbxDataAsset
{
public:
	TMap<class FName, struct FDialogMoodInfo>     MoodData;                                          // 0x0030(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogNameTagMoodData">();
	}
	static class UDialogNameTagMoodData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogNameTagMoodData>();
	}
};
static_assert(alignof(UDialogNameTagMoodData) == 0x000008, "Wrong alignment on UDialogNameTagMoodData");
static_assert(sizeof(UDialogNameTagMoodData) == 0x000080, "Wrong size on UDialogNameTagMoodData");
static_assert(offsetof(UDialogNameTagMoodData, MoodData) == 0x000030, "Member 'UDialogNameTagMoodData::MoodData' has a wrong offset!");

// Class GbxDialog.DialogNameTag
// 0x00B8 (0x00E8 - 0x0030)
class UDialogNameTag final : public UGbxDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogEnumValue*                       NameTagEnumValue;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDialogEnumValue*>               SupportedQualifiers;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDialogNameTag*                         ParentNameTag;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceOfGodSpeaker                            VoGSpeaker;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterEchoDataBase*                 EchoData;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConditionalEchoData>           ConditionalAlternateEchoData;                      // 0x0068(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bUsableForPureEchoes;                              // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistributedSpeaker;                               // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoicePitchOffset;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             CustomizationRTPC;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomizationRTPCValue;                            // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogNameTagMoodData*                 MoodDataAsset;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDialogMoodInfo>     MoodData;                                          // 0x0098(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogNameTag">();
	}
	static class UDialogNameTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogNameTag>();
	}
};
static_assert(alignof(UDialogNameTag) == 0x000008, "Wrong alignment on UDialogNameTag");
static_assert(sizeof(UDialogNameTag) == 0x0000E8, "Wrong size on UDialogNameTag");
static_assert(offsetof(UDialogNameTag, NameTagEnumValue) == 0x000038, "Member 'UDialogNameTag::NameTagEnumValue' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, SupportedQualifiers) == 0x000040, "Member 'UDialogNameTag::SupportedQualifiers' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, ParentNameTag) == 0x000050, "Member 'UDialogNameTag::ParentNameTag' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, VoGSpeaker) == 0x000058, "Member 'UDialogNameTag::VoGSpeaker' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, EchoData) == 0x000060, "Member 'UDialogNameTag::EchoData' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, ConditionalAlternateEchoData) == 0x000068, "Member 'UDialogNameTag::ConditionalAlternateEchoData' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, bUsableForPureEchoes) == 0x000078, "Member 'UDialogNameTag::bUsableForPureEchoes' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, bDistributedSpeaker) == 0x000079, "Member 'UDialogNameTag::bDistributedSpeaker' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, VoicePitchOffset) == 0x00007C, "Member 'UDialogNameTag::VoicePitchOffset' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, CustomizationRTPC) == 0x000080, "Member 'UDialogNameTag::CustomizationRTPC' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, CustomizationRTPCValue) == 0x000088, "Member 'UDialogNameTag::CustomizationRTPCValue' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, MoodDataAsset) == 0x000090, "Member 'UDialogNameTag::MoodDataAsset' has a wrong offset!");
static_assert(offsetof(UDialogNameTag, MoodData) == 0x000098, "Member 'UDialogNameTag::MoodData' has a wrong offset!");

// Class GbxDialog.DialogParameter
// 0x0020 (0x0060 - 0x0040)
class UDialogParameter final : public UGbxDialogDataAsset
{
public:
	class UDialogParameter*                       DefaultInputParameter;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogParameterType                   Type;                                              // 0x0048(0x0010)(Edit, NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	bool                                          bForceDecisionsToAlwaysRetest;                     // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogParameter">();
	}
	static class UDialogParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogParameter>();
	}
};
static_assert(alignof(UDialogParameter) == 0x000008, "Wrong alignment on UDialogParameter");
static_assert(sizeof(UDialogParameter) == 0x000060, "Wrong size on UDialogParameter");
static_assert(offsetof(UDialogParameter, DefaultInputParameter) == 0x000040, "Member 'UDialogParameter::DefaultInputParameter' has a wrong offset!");
static_assert(offsetof(UDialogParameter, Type) == 0x000048, "Member 'UDialogParameter::Type' has a wrong offset!");
static_assert(offsetof(UDialogParameter, bForceDecisionsToAlwaysRetest) == 0x000058, "Member 'UDialogParameter::bForceDecisionsToAlwaysRetest' has a wrong offset!");

// Class GbxDialog.DialogPerformanceData
// 0x00A0 (0x00E0 - 0x0040)
class UDialogPerformanceData final : public UGbxDialogDataAsset
{
public:
	class FText                                   Text;                                              // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGbxTriggerProperty                    TriggerPlayWwiseEventPreview;                      // 0x0058(0x0001)(Edit, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseExternalMediaTemplate;                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedDuration;                                 // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WwiseEventShortID;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGbxAction>                 Action;                                            // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionWeight;                                      // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MoodName;                                          // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoodWeight;                                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableEarlyFinish;                                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EarlyFinishTimeFraction;                           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDialogPerformanceNotify>       Notifies;                                          // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDialogStyle*                           Style;                                             // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputDelay;                                       // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         QuietTime;                                         // 0x00C0(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxDialogQuietTimeScope                      QuietTimeScope;                                    // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         DialogKindCooldownTime;                            // 0x00CC(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerformanceEchoDataBase*               EchoData;                                          // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void PlayWwiseEventPreview();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogPerformanceData">();
	}
	static class UDialogPerformanceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogPerformanceData>();
	}
};
static_assert(alignof(UDialogPerformanceData) == 0x000008, "Wrong alignment on UDialogPerformanceData");
static_assert(sizeof(UDialogPerformanceData) == 0x0000E0, "Wrong size on UDialogPerformanceData");
static_assert(offsetof(UDialogPerformanceData, Text) == 0x000040, "Member 'UDialogPerformanceData::Text' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, TriggerPlayWwiseEventPreview) == 0x000058, "Member 'UDialogPerformanceData::TriggerPlayWwiseEventPreview' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, WwiseEvent) == 0x000060, "Member 'UDialogPerformanceData::WwiseEvent' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, WwiseExternalMediaTemplate) == 0x000068, "Member 'UDialogPerformanceData::WwiseExternalMediaTemplate' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, EstimatedDuration) == 0x000070, "Member 'UDialogPerformanceData::EstimatedDuration' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, WwiseEventShortID) == 0x000074, "Member 'UDialogPerformanceData::WwiseEventShortID' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, Action) == 0x000078, "Member 'UDialogPerformanceData::Action' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, ActionWeight) == 0x000080, "Member 'UDialogPerformanceData::ActionWeight' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, MoodName) == 0x000088, "Member 'UDialogPerformanceData::MoodName' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, MoodWeight) == 0x000090, "Member 'UDialogPerformanceData::MoodWeight' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, bEnableEarlyFinish) == 0x000094, "Member 'UDialogPerformanceData::bEnableEarlyFinish' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, EarlyFinishTimeFraction) == 0x000098, "Member 'UDialogPerformanceData::EarlyFinishTimeFraction' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, Notifies) == 0x0000A0, "Member 'UDialogPerformanceData::Notifies' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, Style) == 0x0000B0, "Member 'UDialogPerformanceData::Style' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, OutputDelay) == 0x0000B8, "Member 'UDialogPerformanceData::OutputDelay' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, ChanceToPlay) == 0x0000BC, "Member 'UDialogPerformanceData::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, QuietTime) == 0x0000C0, "Member 'UDialogPerformanceData::QuietTime' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, QuietTimeScope) == 0x0000C8, "Member 'UDialogPerformanceData::QuietTimeScope' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, DialogKindCooldownTime) == 0x0000CC, "Member 'UDialogPerformanceData::DialogKindCooldownTime' has a wrong offset!");
static_assert(offsetof(UDialogPerformanceData, EchoData) == 0x0000D8, "Member 'UDialogPerformanceData::EchoData' has a wrong offset!");

// Class GbxDialog.DialogScriptData
// 0x00A8 (0x00E8 - 0x0040)
class UDialogScriptData final : public UGbxDialogDataAsset
{
public:
	TArray<class UDialogTimeSlotData*>            TimeSlots;                                         // 0x0040(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UDialogNameTag*>                 PureEchoNameTags;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<class UDialogEvent*, struct FDialogDecisionTree> EventTriggeredDecisionTrees;                       // 0x0060(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDialogDecisionTree                    OtherConditionTriggeredDecisionTree;               // 0x00B0(0x0030)(Edit, NativeAccessSpecifierPublic)
	class UObject*                                FaceFXAnimSet;                                     // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogScriptData">();
	}
	static class UDialogScriptData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogScriptData>();
	}
};
static_assert(alignof(UDialogScriptData) == 0x000008, "Wrong alignment on UDialogScriptData");
static_assert(sizeof(UDialogScriptData) == 0x0000E8, "Wrong size on UDialogScriptData");
static_assert(offsetof(UDialogScriptData, TimeSlots) == 0x000040, "Member 'UDialogScriptData::TimeSlots' has a wrong offset!");
static_assert(offsetof(UDialogScriptData, PureEchoNameTags) == 0x000050, "Member 'UDialogScriptData::PureEchoNameTags' has a wrong offset!");
static_assert(offsetof(UDialogScriptData, EventTriggeredDecisionTrees) == 0x000060, "Member 'UDialogScriptData::EventTriggeredDecisionTrees' has a wrong offset!");
static_assert(offsetof(UDialogScriptData, OtherConditionTriggeredDecisionTree) == 0x0000B0, "Member 'UDialogScriptData::OtherConditionTriggeredDecisionTree' has a wrong offset!");
static_assert(offsetof(UDialogScriptData, FaceFXAnimSet) == 0x0000E0, "Member 'UDialogScriptData::FaceFXAnimSet' has a wrong offset!");

// Class GbxDialog.DialogSelectorFunction
// 0x0020 (0x0060 - 0x0040)
class UDialogSelectorFunction final : public UGbxDialogDataAsset
{
public:
	TArray<class UDialogParameter*>               Parameters;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bTriggeringCondition;                              // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECachedResultLifetime                         CachedResultLifetime;                              // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogSelectorImplementation*          Implementation;                                    // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSelectorFunction">();
	}
	static class UDialogSelectorFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSelectorFunction>();
	}
};
static_assert(alignof(UDialogSelectorFunction) == 0x000008, "Wrong alignment on UDialogSelectorFunction");
static_assert(sizeof(UDialogSelectorFunction) == 0x000060, "Wrong size on UDialogSelectorFunction");
static_assert(offsetof(UDialogSelectorFunction, Parameters) == 0x000040, "Member 'UDialogSelectorFunction::Parameters' has a wrong offset!");
static_assert(offsetof(UDialogSelectorFunction, bTriggeringCondition) == 0x000050, "Member 'UDialogSelectorFunction::bTriggeringCondition' has a wrong offset!");
static_assert(offsetof(UDialogSelectorFunction, CachedResultLifetime) == 0x000051, "Member 'UDialogSelectorFunction::CachedResultLifetime' has a wrong offset!");
static_assert(offsetof(UDialogSelectorFunction, Implementation) == 0x000058, "Member 'UDialogSelectorFunction::Implementation' has a wrong offset!");

// Class GbxDialog.DialogSelectorImplementation
// 0x0008 (0x0030 - 0x0028)
class UDialogSelectorImplementation : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PerformTest(const struct FDialogContext& Context, EDialogDecisionTestResult* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSelectorImplementation">();
	}
	static class UDialogSelectorImplementation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSelectorImplementation>();
	}
};
static_assert(alignof(UDialogSelectorImplementation) == 0x000008, "Wrong alignment on UDialogSelectorImplementation");
static_assert(sizeof(UDialogSelectorImplementation) == 0x000030, "Wrong size on UDialogSelectorImplementation");

// Class GbxDialog.DialogSelectorImplementation_CheckDistance
// 0x0020 (0x0050 - 0x0030)
class UDialogSelectorImplementation_CheckDistance final : public UDialogSelectorImplementation
{
public:
	class UDialogParameter*                       FromActorParam;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       ToActorParam;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDistance;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomDistance;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrueIfCloser;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSelectorImplementation_CheckDistance">();
	}
	static class UDialogSelectorImplementation_CheckDistance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSelectorImplementation_CheckDistance>();
	}
};
static_assert(alignof(UDialogSelectorImplementation_CheckDistance) == 0x000008, "Wrong alignment on UDialogSelectorImplementation_CheckDistance");
static_assert(sizeof(UDialogSelectorImplementation_CheckDistance) == 0x000050, "Wrong size on UDialogSelectorImplementation_CheckDistance");
static_assert(offsetof(UDialogSelectorImplementation_CheckDistance, FromActorParam) == 0x000030, "Member 'UDialogSelectorImplementation_CheckDistance::FromActorParam' has a wrong offset!");
static_assert(offsetof(UDialogSelectorImplementation_CheckDistance, ToActorParam) == 0x000038, "Member 'UDialogSelectorImplementation_CheckDistance::ToActorParam' has a wrong offset!");
static_assert(offsetof(UDialogSelectorImplementation_CheckDistance, bUseCustomDistance) == 0x000040, "Member 'UDialogSelectorImplementation_CheckDistance::bUseCustomDistance' has a wrong offset!");
static_assert(offsetof(UDialogSelectorImplementation_CheckDistance, CustomDistance) == 0x000044, "Member 'UDialogSelectorImplementation_CheckDistance::CustomDistance' has a wrong offset!");
static_assert(offsetof(UDialogSelectorImplementation_CheckDistance, bTrueIfCloser) == 0x000048, "Member 'UDialogSelectorImplementation_CheckDistance::bTrueIfCloser' has a wrong offset!");

// Class GbxDialog.DialogSelectorImplementation_CheckNameTag
// 0x0010 (0x0040 - 0x0030)
class UDialogSelectorImplementation_CheckNameTag final : public UDialogSelectorImplementation
{
public:
	class UDialogParameter*                       WhoParam;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       NameTagParam;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSelectorImplementation_CheckNameTag">();
	}
	static class UDialogSelectorImplementation_CheckNameTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSelectorImplementation_CheckNameTag>();
	}
};
static_assert(alignof(UDialogSelectorImplementation_CheckNameTag) == 0x000008, "Wrong alignment on UDialogSelectorImplementation_CheckNameTag");
static_assert(sizeof(UDialogSelectorImplementation_CheckNameTag) == 0x000040, "Wrong size on UDialogSelectorImplementation_CheckNameTag");
static_assert(offsetof(UDialogSelectorImplementation_CheckNameTag, WhoParam) == 0x000030, "Member 'UDialogSelectorImplementation_CheckNameTag::WhoParam' has a wrong offset!");
static_assert(offsetof(UDialogSelectorImplementation_CheckNameTag, NameTagParam) == 0x000038, "Member 'UDialogSelectorImplementation_CheckNameTag::NameTagParam' has a wrong offset!");

// Class GbxDialog.DialogSelectorImplementation_Equality
// 0x0010 (0x0040 - 0x0030)
class UDialogSelectorImplementation_Equality final : public UDialogSelectorImplementation
{
public:
	class UDialogParameter*                       ParamA;                                            // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       ParamB;                                            // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSelectorImplementation_Equality">();
	}
	static class UDialogSelectorImplementation_Equality* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSelectorImplementation_Equality>();
	}
};
static_assert(alignof(UDialogSelectorImplementation_Equality) == 0x000008, "Wrong alignment on UDialogSelectorImplementation_Equality");
static_assert(sizeof(UDialogSelectorImplementation_Equality) == 0x000040, "Wrong size on UDialogSelectorImplementation_Equality");
static_assert(offsetof(UDialogSelectorImplementation_Equality, ParamA) == 0x000030, "Member 'UDialogSelectorImplementation_Equality::ParamA' has a wrong offset!");
static_assert(offsetof(UDialogSelectorImplementation_Equality, ParamB) == 0x000038, "Member 'UDialogSelectorImplementation_Equality::ParamB' has a wrong offset!");

// Class GbxDialog.DialogSelectorImplementation_IsPreferredPlayer
// 0x0008 (0x0038 - 0x0030)
class UDialogSelectorImplementation_IsPreferredPlayer final : public UDialogSelectorImplementation
{
public:
	class UDialogParameter*                       WhoParam;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSelectorImplementation_IsPreferredPlayer">();
	}
	static class UDialogSelectorImplementation_IsPreferredPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSelectorImplementation_IsPreferredPlayer>();
	}
};
static_assert(alignof(UDialogSelectorImplementation_IsPreferredPlayer) == 0x000008, "Wrong alignment on UDialogSelectorImplementation_IsPreferredPlayer");
static_assert(sizeof(UDialogSelectorImplementation_IsPreferredPlayer) == 0x000038, "Wrong size on UDialogSelectorImplementation_IsPreferredPlayer");
static_assert(offsetof(UDialogSelectorImplementation_IsPreferredPlayer, WhoParam) == 0x000030, "Member 'UDialogSelectorImplementation_IsPreferredPlayer::WhoParam' has a wrong offset!");

// Class GbxDialog.DialogSpeakerInterface
// 0x0000 (0x0028 - 0x0028)
class IDialogSpeakerInterface final : public IInterface
{
public:
	bool CanPerformThisDialog(class UDialogPerformanceData* Performance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSpeakerInterface">();
	}
	static class IDialogSpeakerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDialogSpeakerInterface>();
	}
};
static_assert(alignof(IDialogSpeakerInterface) == 0x000008, "Wrong alignment on IDialogSpeakerInterface");
static_assert(sizeof(IDialogSpeakerInterface) == 0x000028, "Wrong size on IDialogSpeakerInterface");

// Class GbxDialog.DialogStyle
// 0x0038 (0x0068 - 0x0030)
class UDialogStyle final : public UGbxDataAsset
{
public:
	EGbxDialogSocialStrategy                      SocialStrategy;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptSamePriority;                            // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxDialogInterruptStrategy                   InterruptStrategy;                                 // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SubtitlePriority;                                  // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PatientWaitTime;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaitTime;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpeakableWhenDead;                                // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptableByHighPriorityVox;                   // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayableWhenPaused;                               // 0x0046(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayableDuringCinematic;                          // 0x0047(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Kind;                                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallout;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogAudioComponentProvider*          AudioComponentProvider;                            // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalOnly;                                        // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogStyle">();
	}
	static class UDialogStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogStyle>();
	}
};
static_assert(alignof(UDialogStyle) == 0x000008, "Wrong alignment on UDialogStyle");
static_assert(sizeof(UDialogStyle) == 0x000068, "Wrong size on UDialogStyle");
static_assert(offsetof(UDialogStyle, SocialStrategy) == 0x000030, "Member 'UDialogStyle::SocialStrategy' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bInterruptSamePriority) == 0x000031, "Member 'UDialogStyle::bInterruptSamePriority' has a wrong offset!");
static_assert(offsetof(UDialogStyle, InterruptStrategy) == 0x000032, "Member 'UDialogStyle::InterruptStrategy' has a wrong offset!");
static_assert(offsetof(UDialogStyle, Priority) == 0x000034, "Member 'UDialogStyle::Priority' has a wrong offset!");
static_assert(offsetof(UDialogStyle, SubtitlePriority) == 0x000038, "Member 'UDialogStyle::SubtitlePriority' has a wrong offset!");
static_assert(offsetof(UDialogStyle, PatientWaitTime) == 0x00003C, "Member 'UDialogStyle::PatientWaitTime' has a wrong offset!");
static_assert(offsetof(UDialogStyle, MaxWaitTime) == 0x000040, "Member 'UDialogStyle::MaxWaitTime' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bSpeakableWhenDead) == 0x000044, "Member 'UDialogStyle::bSpeakableWhenDead' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bInterruptableByHighPriorityVox) == 0x000045, "Member 'UDialogStyle::bInterruptableByHighPriorityVox' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bPlayableWhenPaused) == 0x000046, "Member 'UDialogStyle::bPlayableWhenPaused' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bPlayableDuringCinematic) == 0x000047, "Member 'UDialogStyle::bPlayableDuringCinematic' has a wrong offset!");
static_assert(offsetof(UDialogStyle, Kind) == 0x000048, "Member 'UDialogStyle::Kind' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bCallout) == 0x000050, "Member 'UDialogStyle::bCallout' has a wrong offset!");
static_assert(offsetof(UDialogStyle, AudioComponentProvider) == 0x000058, "Member 'UDialogStyle::AudioComponentProvider' has a wrong offset!");
static_assert(offsetof(UDialogStyle, bLocalOnly) == 0x000060, "Member 'UDialogStyle::bLocalOnly' has a wrong offset!");

// Class GbxDialog.DialogSystemEchoManagerInterface
// 0x0000 (0x0028 - 0x0028)
class IDialogSystemEchoManagerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSystemEchoManagerInterface">();
	}
	static class IDialogSystemEchoManagerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDialogSystemEchoManagerInterface>();
	}
};
static_assert(alignof(IDialogSystemEchoManagerInterface) == 0x000008, "Wrong alignment on IDialogSystemEchoManagerInterface");
static_assert(sizeof(IDialogSystemEchoManagerInterface) == 0x000028, "Wrong size on IDialogSystemEchoManagerInterface");

// Class GbxDialog.DialogTimeSlotData
// 0x0070 (0x00B0 - 0x0040)
class UDialogTimeSlotData final : public UGbxDialogDataAsset
{
public:
	struct FGbxTriggerProperty                    TriggerPreviewAudio;                               // 0x0040(0x0001)(Edit, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDialogTimeSlotReference>       CompositeAudioAdditionalTimeSlots;                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ETimeSlotEchoPreference                       EchoPreference;                                    // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDialogParameter*>               Parameters;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class UDialogLineData*>                Lines;                                             // 0x0070(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FDialogDecisionTree                    DecisionTree;                                      // 0x0080(0x0030)(Edit, NativeAccessSpecifierPublic)

public:
	void PreviewAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogTimeSlotData">();
	}
	static class UDialogTimeSlotData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogTimeSlotData>();
	}
};
static_assert(alignof(UDialogTimeSlotData) == 0x000008, "Wrong alignment on UDialogTimeSlotData");
static_assert(sizeof(UDialogTimeSlotData) == 0x0000B0, "Wrong size on UDialogTimeSlotData");
static_assert(offsetof(UDialogTimeSlotData, TriggerPreviewAudio) == 0x000040, "Member 'UDialogTimeSlotData::TriggerPreviewAudio' has a wrong offset!");
static_assert(offsetof(UDialogTimeSlotData, CompositeAudioAdditionalTimeSlots) == 0x000048, "Member 'UDialogTimeSlotData::CompositeAudioAdditionalTimeSlots' has a wrong offset!");
static_assert(offsetof(UDialogTimeSlotData, EchoPreference) == 0x000058, "Member 'UDialogTimeSlotData::EchoPreference' has a wrong offset!");
static_assert(offsetof(UDialogTimeSlotData, Parameters) == 0x000060, "Member 'UDialogTimeSlotData::Parameters' has a wrong offset!");
static_assert(offsetof(UDialogTimeSlotData, Lines) == 0x000070, "Member 'UDialogTimeSlotData::Lines' has a wrong offset!");
static_assert(offsetof(UDialogTimeSlotData, DecisionTree) == 0x000080, "Member 'UDialogTimeSlotData::DecisionTree' has a wrong offset!");

// Class GbxDialog.GameDialogSystemCustomizationInterface
// 0x0000 (0x0028 - 0x0028)
class IGameDialogSystemCustomizationInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameDialogSystemCustomizationInterface">();
	}
	static class IGameDialogSystemCustomizationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameDialogSystemCustomizationInterface>();
	}
};
static_assert(alignof(IGameDialogSystemCustomizationInterface) == 0x000008, "Wrong alignment on IGameDialogSystemCustomizationInterface");
static_assert(sizeof(IGameDialogSystemCustomizationInterface) == 0x000028, "Wrong size on IGameDialogSystemCustomizationInterface");

// Class GbxDialog.GbxDialogBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxDialogBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ActivateDialogScript(class UObject* WorldContextObject, TSoftObjectPtr<class UDialogScriptData> SoftScript, class UDialogScriptData* Script);
	static void BindToDialogNotify(class UObject* WorldContextObject, int32 PlayingSequenceID, class FName NotifyName, TDelegate<void()> Delegate);
	static void BindToDialogSequenceFinished(class UObject* WorldContextObject, int32 PlayingSequenceID, TDelegate<void()> Delegate);
	static void CancelDialogBlockingHold(class UObject* WorldContextObject, class FName HoldName);
	static EDialogDecisionTestResult ConvertBoolToDialogTestResult(bool bValue);
	static void DeactivateDialogScript(class UObject* WorldContextObject, TSoftObjectPtr<class UDialogScriptData> SoftScript, class UDialogScriptData* Script);
	static bool EnqueueDialogPerformance(class UObject* WorldContextObject, class UGbxDialogComponent* Speaker, class UDialogPerformanceData* Performance, float StartDelay, const struct FDialogConversation& ContinueConversation, struct FDialogConversation* Conversation, int32* DialogPlaybackSequence);
	static bool FindOrCreateNamedSpeaker(class UDialogNameTag* NameTag, bool bIncludePureEchoSpeakers, bool bCreateIfNotFound, class UGbxDialogComponent** Speaker);
	static bool FinishSpeak(class UObject* WorldContextObject, const struct FDialogTimeSlotReference& TimeSlotRef, class UGbxDialogComponent* OptionalSpeaker, struct FDialogContext& Context, const struct FDialogConversation& ContinueConversation, struct FDialogConversation* Conversation, float StartDelay, int32* SequenceID, float OverrideMaxWait);
	static bool FinishTriggerDialog(class UObject* WorldContextObject, class UDialogEvent* Event, struct FDialogContext& Context, const struct FDialogConversation& ContinueConversation, struct FDialogConversation* Conversation, float StartDelay, int32* SequenceID);
	static EGbxDialogConversationStatus GetConversationStatus(const struct FDialogConversation& Conversation);
	static void GetDialogContextParameter(const struct FDialogContext& Context, class UDialogParameter* Parameter, class UObject** ObjectValue, float* FloatValue, bool* bBoolValue);
	static TArray<class FString> GetDialogContextParameterSummary(const struct FDialogContext& Context);
	static bool GetDialogFlag(class UObject* WorldContextObject, class UDialogEnumValue* DialogEnumValue);
	static void InterruptConversation(const struct FDialogConversation& Conversation);
	static void InterruptDialogInRadius(class UObject* WorldContextObject, const struct FVector& Origin, float Radius);
	static struct FDialogContext NewDialogContext();
	static struct FDialogConversation NewDialogConversation(class UObject* WorldContextObject, class AActor* KeyActor, class UDialogNameTag* KeySpeakerName, const struct FVector& KeyLocation);
	static void PlaceGlobalDialogHold(class UObject* WorldContextObject, class FName HoldName, class UQuietTimePredicate* Rules, float Duration);
	static void PlaceRegionalDialogHold(class UObject* WorldContextObject, class FName HoldName, const struct FVector& Location, float Radius, class UQuietTimePredicate* Rules, float Duration);
	static void ResolveDialogTimeSlotReference(const struct FDialogTimeSlotReference& Reference, class UDialogTimeSlotData** TimeSlot, class UDialogScriptData** Script);
	static void SetConversationPlayerHints(const struct FDialogConversation& Conversation, class AActor* Actor, class UDialogNameTag* NameTag, const struct FVector& Location);
	static void SetDialogContextParameter(struct FDialogContext& Context, class UDialogParameter* Parameter, class UObject* ObjectValue, float FloatValue, bool bBoolValue);
	static void SetDialogFlag(class UObject* WorldContextObject, class UDialogEnumValue* DialogEnumValue, bool Value, float Duration);
	static void SetDialogGameCustomizationMetadata(class UObject* WorldContextObject, int32 SequenceID, class UObject* Object, int32 Cookie);
	static void SetNextDialogPlayerHints(class UObject* WorldContextObject, class AActor* Actor, class UDialogNameTag* NameTag, const struct FVector& Location);
	static void StopActiveDialog(class UObject* Target, bool bIncludeDeathDialog);
	static bool TestDialogSelector(class UObject* WorldContextObject, class UDialogSelectorFunction* Selector, const struct FDialogContext& InputParameters);
	static void WaitForDialog(const struct FDialogConversation& Conversation, const struct FLatentActionInfo& LatentInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxDialogBlueprintLibrary">();
	}
	static class UGbxDialogBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDialogBlueprintLibrary>();
	}
};
static_assert(alignof(UGbxDialogBlueprintLibrary) == 0x000008, "Wrong alignment on UGbxDialogBlueprintLibrary");
static_assert(sizeof(UGbxDialogBlueprintLibrary) == 0x000028, "Wrong size on UGbxDialogBlueprintLibrary");

// Class GbxDialog.GbxDialogComponent
// 0x0150 (0x02C8 - 0x0178)
class UGbxDialogComponent : public UActorComponent
{
public:
	TArray<class UDialogNameTag*>                 RandomNameTags;                                    // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDialogScriptData*>              DialogScripts;                                     // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStartedPerformance;                              // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDialogNameTag*                         NameTag;                                           // 0x01A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrentDialogPerformanceInfo          CurrentPerformance;                                // 0x01B0(0x0060)(Transient, NativeAccessSpecifierPublic)
	struct FCurrentDialogPerformanceInfo          PendingPerformance;                                // 0x0210(0x0060)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FDialogScriptPinnedRef>         PinnedScripts;                                     // 0x0270(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bPureEchoSpeaker;                                  // 0x0280(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioComponent*                   DistributedAudioComponent;                         // 0x0288(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransientEchoSpeaker;                             // 0x0290(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransientEchoSpeakerIdleTime;                      // 0x0294(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpeakDirectlyToPlayer;                            // 0x0298(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      DirectSpeakerTarget;                               // 0x02A0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositional;                                       // 0x02A8(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDistributedSpeaker;                               // 0x02A9(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInitialDialogInProgress               InitialDialogInProgress;                           // 0x02B0(0x0018)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_InitialDialogInProgress();
	void StartPerformance(int32 DialogThreadID, int32 DialogSequenceID, class UDialogPerformanceData* Performance);
	void StopPerformance(int32 DialogThreadID, bool bIncludeDeathDialog);

	bool IsSpeakerActive(bool bIncludePendingVO) const;
	bool IsSpeakerClearToPlayDialog(class UDialogStyle* ProposedStyle, bool bProposingEcho, const struct FDialogConversation& ProposedConversation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxDialogComponent">();
	}
	static class UGbxDialogComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDialogComponent>();
	}
};
static_assert(alignof(UGbxDialogComponent) == 0x000008, "Wrong alignment on UGbxDialogComponent");
static_assert(sizeof(UGbxDialogComponent) == 0x0002C8, "Wrong size on UGbxDialogComponent");
static_assert(offsetof(UGbxDialogComponent, RandomNameTags) == 0x000178, "Member 'UGbxDialogComponent::RandomNameTags' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, DialogScripts) == 0x000188, "Member 'UGbxDialogComponent::DialogScripts' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, OnStartedPerformance) == 0x000198, "Member 'UGbxDialogComponent::OnStartedPerformance' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, NameTag) == 0x0001A8, "Member 'UGbxDialogComponent::NameTag' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, CurrentPerformance) == 0x0001B0, "Member 'UGbxDialogComponent::CurrentPerformance' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, PendingPerformance) == 0x000210, "Member 'UGbxDialogComponent::PendingPerformance' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, PinnedScripts) == 0x000270, "Member 'UGbxDialogComponent::PinnedScripts' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, bPureEchoSpeaker) == 0x000280, "Member 'UGbxDialogComponent::bPureEchoSpeaker' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, DistributedAudioComponent) == 0x000288, "Member 'UGbxDialogComponent::DistributedAudioComponent' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, bTransientEchoSpeaker) == 0x000290, "Member 'UGbxDialogComponent::bTransientEchoSpeaker' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, TransientEchoSpeakerIdleTime) == 0x000294, "Member 'UGbxDialogComponent::TransientEchoSpeakerIdleTime' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, bSpeakDirectlyToPlayer) == 0x000298, "Member 'UGbxDialogComponent::bSpeakDirectlyToPlayer' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, DirectSpeakerTarget) == 0x0002A0, "Member 'UGbxDialogComponent::DirectSpeakerTarget' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, bPositional) == 0x0002A8, "Member 'UGbxDialogComponent::bPositional' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, bDistributedSpeaker) == 0x0002A9, "Member 'UGbxDialogComponent::bDistributedSpeaker' has a wrong offset!");
static_assert(offsetof(UGbxDialogComponent, InitialDialogInProgress) == 0x0002B0, "Member 'UGbxDialogComponent::InitialDialogInProgress' has a wrong offset!");

// Class GbxDialog.GbxDialogSettings
// 0x00D0 (0x0100 - 0x0030)
class UGbxDialogSettings : public UGbxDataAsset
{
public:
	TSubclassOf<class AActor>                     PureEchoSpeakerActorClass;                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 GameGlobalParametersProviderClass;                 // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDialogBlackboard>          BlackboardClass;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            ConfigurePureEchoTalkerEvent;                      // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             EchoControlWwiseParameter;                         // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             PureEchoSpeakerWwiseParameter;                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             VoicePitchParameter;                               // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDialogEnumValue*>               EnforcedRestrictionQualifiers;                     // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ConversationExpirationDuration;                    // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecentPerformancesExpirationDuration;              // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmoteWeightBlendDuration;                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallCooldownRadius;                               // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearRadius;                                        // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuietTimeMergeRadius;                              // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegionRadius;                                      // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableEchoBelowVolume;                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableEchoAboveVolume;                            // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EchoTransitionReqiredVolumeChange;                 // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterConversationDelay;                            // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ConfigurationErrorSound;                           // 0x00A8(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       EventParameter;                                    // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       SelfParameter;                                     // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       GlobalContextParameter;                            // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       ScriptContextParameter;                            // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       ConversationContextParameter;                      // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogParameter*                       LineContextParameter;                              // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogEnumType*                        CountersEnum;                                      // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogEnumType*                        FlagsEnum;                                         // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxDialogSettings">();
	}
	static class UGbxDialogSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDialogSettings>();
	}
};
static_assert(alignof(UGbxDialogSettings) == 0x000008, "Wrong alignment on UGbxDialogSettings");
static_assert(sizeof(UGbxDialogSettings) == 0x000100, "Wrong size on UGbxDialogSettings");
static_assert(offsetof(UGbxDialogSettings, PureEchoSpeakerActorClass) == 0x000030, "Member 'UGbxDialogSettings::PureEchoSpeakerActorClass' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, GameGlobalParametersProviderClass) == 0x000038, "Member 'UGbxDialogSettings::GameGlobalParametersProviderClass' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, BlackboardClass) == 0x000040, "Member 'UGbxDialogSettings::BlackboardClass' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, ConfigurePureEchoTalkerEvent) == 0x000048, "Member 'UGbxDialogSettings::ConfigurePureEchoTalkerEvent' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, EchoControlWwiseParameter) == 0x000050, "Member 'UGbxDialogSettings::EchoControlWwiseParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, PureEchoSpeakerWwiseParameter) == 0x000058, "Member 'UGbxDialogSettings::PureEchoSpeakerWwiseParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, VoicePitchParameter) == 0x000060, "Member 'UGbxDialogSettings::VoicePitchParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, EnforcedRestrictionQualifiers) == 0x000068, "Member 'UGbxDialogSettings::EnforcedRestrictionQualifiers' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, ConversationExpirationDuration) == 0x000078, "Member 'UGbxDialogSettings::ConversationExpirationDuration' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, RecentPerformancesExpirationDuration) == 0x00007C, "Member 'UGbxDialogSettings::RecentPerformancesExpirationDuration' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, EmoteWeightBlendDuration) == 0x000080, "Member 'UGbxDialogSettings::EmoteWeightBlendDuration' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, SmallCooldownRadius) == 0x000084, "Member 'UGbxDialogSettings::SmallCooldownRadius' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, NearRadius) == 0x000088, "Member 'UGbxDialogSettings::NearRadius' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, QuietTimeMergeRadius) == 0x00008C, "Member 'UGbxDialogSettings::QuietTimeMergeRadius' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, RegionRadius) == 0x000090, "Member 'UGbxDialogSettings::RegionRadius' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, EnableEchoBelowVolume) == 0x000094, "Member 'UGbxDialogSettings::EnableEchoBelowVolume' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, DisableEchoAboveVolume) == 0x000098, "Member 'UGbxDialogSettings::DisableEchoAboveVolume' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, EchoTransitionReqiredVolumeChange) == 0x00009C, "Member 'UGbxDialogSettings::EchoTransitionReqiredVolumeChange' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, InterConversationDelay) == 0x0000A0, "Member 'UGbxDialogSettings::InterConversationDelay' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, ConfigurationErrorSound) == 0x0000A8, "Member 'UGbxDialogSettings::ConfigurationErrorSound' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, EventParameter) == 0x0000C0, "Member 'UGbxDialogSettings::EventParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, SelfParameter) == 0x0000C8, "Member 'UGbxDialogSettings::SelfParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, GlobalContextParameter) == 0x0000D0, "Member 'UGbxDialogSettings::GlobalContextParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, ScriptContextParameter) == 0x0000D8, "Member 'UGbxDialogSettings::ScriptContextParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, ConversationContextParameter) == 0x0000E0, "Member 'UGbxDialogSettings::ConversationContextParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, LineContextParameter) == 0x0000E8, "Member 'UGbxDialogSettings::LineContextParameter' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, CountersEnum) == 0x0000F0, "Member 'UGbxDialogSettings::CountersEnum' has a wrong offset!");
static_assert(offsetof(UGbxDialogSettings, FlagsEnum) == 0x0000F8, "Member 'UGbxDialogSettings::FlagsEnum' has a wrong offset!");

// Class GbxDialog.GlobalDialogParametersProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IGlobalDialogParametersProviderInterface final : public IInterface
{
public:
	void InitDialogContext(struct FDialogContext& Parameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalDialogParametersProviderInterface">();
	}
	static class IGlobalDialogParametersProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGlobalDialogParametersProviderInterface>();
	}
};
static_assert(alignof(IGlobalDialogParametersProviderInterface) == 0x000008, "Wrong alignment on IGlobalDialogParametersProviderInterface");
static_assert(sizeof(IGlobalDialogParametersProviderInterface) == 0x000028, "Wrong size on IGlobalDialogParametersProviderInterface");

// Class GbxDialog.MovieSceneDialogTrack
// 0x0018 (0x0070 - 0x0058)
class UMovieSceneDialogTrack final : public UMovieSceneNameableTrack
{
public:
	bool                                          bAllowRename;                                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0060(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogTrack">();
	}
	static class UMovieSceneDialogTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogTrack>();
	}
};
static_assert(alignof(UMovieSceneDialogTrack) == 0x000008, "Wrong alignment on UMovieSceneDialogTrack");
static_assert(sizeof(UMovieSceneDialogTrack) == 0x000070, "Wrong size on UMovieSceneDialogTrack");
static_assert(offsetof(UMovieSceneDialogTrack, bAllowRename) == 0x000058, "Member 'UMovieSceneDialogTrack::bAllowRename' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogTrack, Sections) == 0x000060, "Member 'UMovieSceneDialogTrack::Sections' has a wrong offset!");

// Class GbxDialog.MovieSceneDialogSection
// 0x0070 (0x0150 - 0x00E0)
class UMovieSceneDialogSection final : public UMovieSceneSection
{
public:
	struct FDialogTimeSlotReference               Dialog;                                            // 0x00E0(0x0040)(Edit, NativeAccessSpecifierPublic)
	bool                                          bPlayThroughDialogSystem;                          // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtitleOnly;                                     // 0x0121(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ManualSubtitleText;                                // 0x0128(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         ManualSubtitleDuration;                            // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogNameTag*                         SubtitleNameTag;                                   // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogSection">();
	}
	static class UMovieSceneDialogSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogSection>();
	}
};
static_assert(alignof(UMovieSceneDialogSection) == 0x000008, "Wrong alignment on UMovieSceneDialogSection");
static_assert(sizeof(UMovieSceneDialogSection) == 0x000150, "Wrong size on UMovieSceneDialogSection");
static_assert(offsetof(UMovieSceneDialogSection, Dialog) == 0x0000E0, "Member 'UMovieSceneDialogSection::Dialog' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogSection, bPlayThroughDialogSystem) == 0x000120, "Member 'UMovieSceneDialogSection::bPlayThroughDialogSystem' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogSection, bSubtitleOnly) == 0x000121, "Member 'UMovieSceneDialogSection::bSubtitleOnly' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogSection, ManualSubtitleText) == 0x000128, "Member 'UMovieSceneDialogSection::ManualSubtitleText' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogSection, ManualSubtitleDuration) == 0x000140, "Member 'UMovieSceneDialogSection::ManualSubtitleDuration' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogSection, SubtitleNameTag) == 0x000148, "Member 'UMovieSceneDialogSection::SubtitleNameTag' has a wrong offset!");

// Class GbxDialog.PerformanceEchoDataBase
// 0x0000 (0x0030 - 0x0030)
class UPerformanceEchoDataBase : public UGbxDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerformanceEchoDataBase">();
	}
	static class UPerformanceEchoDataBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerformanceEchoDataBase>();
	}
};
static_assert(alignof(UPerformanceEchoDataBase) == 0x000008, "Wrong alignment on UPerformanceEchoDataBase");
static_assert(sizeof(UPerformanceEchoDataBase) == 0x000030, "Wrong size on UPerformanceEchoDataBase");

// Class GbxDialog.PureEchoSpeakerHost
// 0x0000 (0x0458 - 0x0458)
class APureEchoSpeakerHost final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PureEchoSpeakerHost">();
	}
	static class APureEchoSpeakerHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<APureEchoSpeakerHost>();
	}
};
static_assert(alignof(APureEchoSpeakerHost) == 0x000008, "Wrong alignment on APureEchoSpeakerHost");
static_assert(sizeof(APureEchoSpeakerHost) == 0x000458, "Wrong size on APureEchoSpeakerHost");

}

