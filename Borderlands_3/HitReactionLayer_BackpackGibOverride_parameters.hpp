#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HitReactionLayer_BackpackGibOverride

#include "Basic.hpp"

#include "OakGame_structs.hpp"


namespace SDK::Params
{

// Function HitReactionLayer_BackpackGibOverride.HitReactionLayer_BackpackGibOverride_C.CalcHealthPercent
// 0x0010 (0x0010 - 0x0000)
struct HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent final
{
public:
	class UOakDamageComponent*                    Receiver;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Amount;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Percent;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent) == 0x000008, "Wrong alignment on HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent");
static_assert(sizeof(HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent) == 0x000010, "Wrong size on HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent, Receiver) == 0x000000, "Member 'HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent::Receiver' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent, Damage_Amount) == 0x000008, "Member 'HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent::Damage_Amount' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent, Damage_Percent) == 0x00000C, "Member 'HitReactionLayer_BackpackGibOverride_C_CalcHealthPercent::Damage_Percent' has a wrong offset!");

// Function HitReactionLayer_BackpackGibOverride.HitReactionLayer_BackpackGibOverride_C.EvaluateTag
// 0x0070 (0x0070 - 0x0000)
struct HitReactionLayer_BackpackGibOverride_C_EvaluateTag final
{
public:
	class UDamageComponent*                       Receiver;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageCauserComponent*                 Causer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageAmount;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGbxDamageType*                   DamageType;                                        // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageSource*                    DamageSource;                                      // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHitRegionData*                         HitRegion;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Force;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitReactionTag*                        PreviousTag;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHitReactionTag*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchDeathThreshold;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamageComponent*                       HitReceiver;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOakElementalType                             DeathElementalType;                                // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageValue;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ratio;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetMass;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitForce;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag) == 0x000008, "Wrong alignment on HitReactionLayer_BackpackGibOverride_C_EvaluateTag");
static_assert(sizeof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag) == 0x000070, "Wrong size on HitReactionLayer_BackpackGibOverride_C_EvaluateTag");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, Receiver) == 0x000000, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::Receiver' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, Causer) == 0x000008, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::Causer' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, DamageAmount) == 0x000010, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::DamageAmount' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, DamageType) == 0x000018, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::DamageType' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, DamageSource) == 0x000020, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::DamageSource' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, HitRegion) == 0x000028, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::HitRegion' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, Force) == 0x000030, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::Force' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, PreviousTag) == 0x000038, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::PreviousTag' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, ReturnValue) == 0x000040, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::ReturnValue' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, LaunchDeathThreshold) == 0x000048, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::LaunchDeathThreshold' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, HitReceiver) == 0x000050, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::HitReceiver' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, DeathElementalType) == 0x000058, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::DeathElementalType' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, DamageValue) == 0x00005C, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::DamageValue' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, Ratio) == 0x000060, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::Ratio' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, TargetMass) == 0x000064, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::TargetMass' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, HitForce) == 0x000068, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::HitForce' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00006C, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x00006D, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(HitReactionLayer_BackpackGibOverride_C_EvaluateTag, CallFunc_BooleanAND_ReturnValue) == 0x00006E, "Member 'HitReactionLayer_BackpackGibOverride_C_EvaluateTag::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

