#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OakCS

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GbxUI_structs.hpp"
#include "GbxUI_classes.hpp"
#include "GbxRuntime_classes.hpp"
#include "Engine_classes.hpp"
#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "OakCS_structs.hpp"


namespace SDK
{

// Class OakCS.CSAction
// 0x0020 (0x0048 - 0x0028)
class UCSAction : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSAction">();
	}
	static class UCSAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSAction>();
	}
};
static_assert(alignof(UCSAction) == 0x000008, "Wrong alignment on UCSAction");
static_assert(sizeof(UCSAction) == 0x000048, "Wrong size on UCSAction");

// Class OakCS.CSActionInsertToken
// 0x0000 (0x0048 - 0x0048)
class UCSActionInsertToken final : public UCSAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSActionInsertToken">();
	}
	static class UCSActionInsertToken* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSActionInsertToken>();
	}
};
static_assert(alignof(UCSActionInsertToken) == 0x000008, "Wrong alignment on UCSActionInsertToken");
static_assert(sizeof(UCSActionInsertToken) == 0x000048, "Wrong size on UCSActionInsertToken");

// Class OakCS.CSActionRemoveToken
// 0x0000 (0x0048 - 0x0048)
class UCSActionRemoveToken final : public UCSAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSActionRemoveToken">();
	}
	static class UCSActionRemoveToken* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSActionRemoveToken>();
	}
};
static_assert(alignof(UCSActionRemoveToken) == 0x000008, "Wrong alignment on UCSActionRemoveToken");
static_assert(sizeof(UCSActionRemoveToken) == 0x000048, "Wrong size on UCSActionRemoveToken");

// Class OakCS.CSActionSwapTileAndToken
// 0x0010 (0x0058 - 0x0048)
class UCSActionSwapTileAndToken final : public UCSAction
{
public:
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSActionSwapTileAndToken">();
	}
	static class UCSActionSwapTileAndToken* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSActionSwapTileAndToken>();
	}
};
static_assert(alignof(UCSActionSwapTileAndToken) == 0x000008, "Wrong alignment on UCSActionSwapTileAndToken");
static_assert(sizeof(UCSActionSwapTileAndToken) == 0x000058, "Wrong size on UCSActionSwapTileAndToken");

// Class OakCS.CSCheatManager
// 0x0000 (0x0028 - 0x0028)
class UCSCheatManager final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSCheatManager">();
	}
	static class UCSCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSCheatManager>();
	}
};
static_assert(alignof(UCSCheatManager) == 0x000008, "Wrong alignment on UCSCheatManager");
static_assert(sizeof(UCSCheatManager) == 0x000028, "Wrong size on UCSCheatManager");

// Class OakCS.CSCondition
// 0x0000 (0x0088 - 0x0088)
class UCSCondition final : public UGbxCondition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSCondition">();
	}
	static class UCSCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSCondition>();
	}
};
static_assert(alignof(UCSCondition) == 0x000008, "Wrong alignment on UCSCondition");
static_assert(sizeof(UCSCondition) == 0x000088, "Wrong size on UCSCondition");

// Class OakCS.CSConsole
// 0x0008 (0x0668 - 0x0660)
class ACSConsole : public AAdvancedInteractiveObject
{
public:
	class UGbxMenuData*                           CSMenuData;                                        // 0x0660(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSConsole">();
	}
	static class ACSConsole* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACSConsole>();
	}
};
static_assert(alignof(ACSConsole) == 0x000008, "Wrong alignment on ACSConsole");
static_assert(sizeof(ACSConsole) == 0x000668, "Wrong size on ACSConsole");
static_assert(offsetof(ACSConsole, CSMenuData) == 0x000660, "Member 'ACSConsole::CSMenuData' has a wrong offset!");

// Class OakCS.CSConsoleProxy
// 0x0038 (0x0520 - 0x04E8)
class ACSConsoleProxy : public AAdvancedInteractiveObjectProxy
{
public:
	class FName                                   CurrentOpponent;                                   // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UGbxMenuData>            CSMenuData;                                        // 0x04F0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDifficultyLevelCompleted();
	void OnEnterPuzzle();
	void OnFirstPuzzleOfCurrentDifficulty();
	void OnOptimalScoreReached();
	void OnParScoreReached();
	void OnQuitCitizenScienceArcade();
	void OnSumbitPuzzleSolution(bool bIsOptimal);
	void OnUnderParScoreReached();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSConsoleProxy">();
	}
	static class ACSConsoleProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACSConsoleProxy>();
	}
};
static_assert(alignof(ACSConsoleProxy) == 0x000008, "Wrong alignment on ACSConsoleProxy");
static_assert(sizeof(ACSConsoleProxy) == 0x000520, "Wrong size on ACSConsoleProxy");
static_assert(offsetof(ACSConsoleProxy, CurrentOpponent) == 0x0004E8, "Member 'ACSConsoleProxy::CurrentOpponent' has a wrong offset!");
static_assert(offsetof(ACSConsoleProxy, CSMenuData) == 0x0004F0, "Member 'ACSConsoleProxy::CSMenuData' has a wrong offset!");

// Class OakCS.CSLevelData
// 0x0010 (0x0040 - 0x0030)
class UCSLevelData final : public UGbxDataAsset
{
public:
	TArray<struct FCSLevelInfo>                   LevelInfos;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSLevelData">();
	}
	static class UCSLevelData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSLevelData>();
	}
};
static_assert(alignof(UCSLevelData) == 0x000008, "Wrong alignment on UCSLevelData");
static_assert(sizeof(UCSLevelData) == 0x000040, "Wrong size on UCSLevelData");
static_assert(offsetof(UCSLevelData, LevelInfos) == 0x000030, "Member 'UCSLevelData::LevelInfos' has a wrong offset!");

// Class OakCS.CSPuzzleFeedbackManager
// 0x0138 (0x0160 - 0x0028)
class UCSPuzzleFeedbackManager final : public UObject
{
public:
	uint8                                         Pad_28[0x14];                                      // 0x0028(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCSPuzzleFeedbackSettings              Settings;                                          // 0x003C(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGFxCSPuzzle>            Puzzle;                                            // 0x005C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGFxCSTokenPool>         TokenPool;                                         // 0x0064(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGFxCSProgressBar>       ProgressBar;                                       // 0x006C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           ProgressBarContainer;                              // 0x0074(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UCSPuzzleSession>        PuzzleSession;                                     // 0x007C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           ParScoreTextFeedback;                              // 0x0084(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           ParScoreContainer;                                 // 0x008C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           ParScoreText;                                      // 0x0094(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           CurrentScoreContainer;                             // 0x009C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           CurrentScoreText;                                  // 0x00A4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           HighScoreContainer;                                // 0x00AC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           HighScoreText;                                     // 0x00B4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           ProgressBarBonusScoreContainer;                    // 0x00BC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           ProgressBarBonusScoreText;                         // 0x00C4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           BonusScoreContainer;                               // 0x00CC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           BonusScoreText;                                    // 0x00D4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxGFxObject>           NumTokensContainer;                                // 0x00DC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           NumTokensText;                                     // 0x00E4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGFxCSPuzzleMenu>        OwningMenu;                                        // 0x00EC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGFxCSPuzzleTile*>               TweeningTiles;                                     // 0x00F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x58];                                     // 0x0108(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSPuzzleFeedbackManager">();
	}
	static class UCSPuzzleFeedbackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSPuzzleFeedbackManager>();
	}
};
static_assert(alignof(UCSPuzzleFeedbackManager) == 0x000008, "Wrong alignment on UCSPuzzleFeedbackManager");
static_assert(sizeof(UCSPuzzleFeedbackManager) == 0x000160, "Wrong size on UCSPuzzleFeedbackManager");
static_assert(offsetof(UCSPuzzleFeedbackManager, Settings) == 0x00003C, "Member 'UCSPuzzleFeedbackManager::Settings' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, Puzzle) == 0x00005C, "Member 'UCSPuzzleFeedbackManager::Puzzle' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, TokenPool) == 0x000064, "Member 'UCSPuzzleFeedbackManager::TokenPool' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ProgressBar) == 0x00006C, "Member 'UCSPuzzleFeedbackManager::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ProgressBarContainer) == 0x000074, "Member 'UCSPuzzleFeedbackManager::ProgressBarContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, PuzzleSession) == 0x00007C, "Member 'UCSPuzzleFeedbackManager::PuzzleSession' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ParScoreTextFeedback) == 0x000084, "Member 'UCSPuzzleFeedbackManager::ParScoreTextFeedback' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ParScoreContainer) == 0x00008C, "Member 'UCSPuzzleFeedbackManager::ParScoreContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ParScoreText) == 0x000094, "Member 'UCSPuzzleFeedbackManager::ParScoreText' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, CurrentScoreContainer) == 0x00009C, "Member 'UCSPuzzleFeedbackManager::CurrentScoreContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, CurrentScoreText) == 0x0000A4, "Member 'UCSPuzzleFeedbackManager::CurrentScoreText' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, HighScoreContainer) == 0x0000AC, "Member 'UCSPuzzleFeedbackManager::HighScoreContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, HighScoreText) == 0x0000B4, "Member 'UCSPuzzleFeedbackManager::HighScoreText' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ProgressBarBonusScoreContainer) == 0x0000BC, "Member 'UCSPuzzleFeedbackManager::ProgressBarBonusScoreContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, ProgressBarBonusScoreText) == 0x0000C4, "Member 'UCSPuzzleFeedbackManager::ProgressBarBonusScoreText' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, BonusScoreContainer) == 0x0000CC, "Member 'UCSPuzzleFeedbackManager::BonusScoreContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, BonusScoreText) == 0x0000D4, "Member 'UCSPuzzleFeedbackManager::BonusScoreText' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, NumTokensContainer) == 0x0000DC, "Member 'UCSPuzzleFeedbackManager::NumTokensContainer' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, NumTokensText) == 0x0000E4, "Member 'UCSPuzzleFeedbackManager::NumTokensText' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, OwningMenu) == 0x0000EC, "Member 'UCSPuzzleFeedbackManager::OwningMenu' has a wrong offset!");
static_assert(offsetof(UCSPuzzleFeedbackManager, TweeningTiles) == 0x0000F8, "Member 'UCSPuzzleFeedbackManager::TweeningTiles' has a wrong offset!");

// Class OakCS.CSPuzzleIntroManager
// 0x0040 (0x0068 - 0x0028)
class UCSPuzzleIntroManager final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCSPuzzleIntroSettings                 Settings;                                          // 0x0038(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x1C];                                      // 0x004C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSPuzzleIntroManager">();
	}
	static class UCSPuzzleIntroManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSPuzzleIntroManager>();
	}
};
static_assert(alignof(UCSPuzzleIntroManager) == 0x000008, "Wrong alignment on UCSPuzzleIntroManager");
static_assert(sizeof(UCSPuzzleIntroManager) == 0x000068, "Wrong size on UCSPuzzleIntroManager");
static_assert(offsetof(UCSPuzzleIntroManager, Settings) == 0x000038, "Member 'UCSPuzzleIntroManager::Settings' has a wrong offset!");

// Class OakCS.CSPuzzleSession
// 0x00D0 (0x00F8 - 0x0028)
class UCSPuzzleSession final : public UObject
{
public:
	TArray<class UCSAction*>                      PuzzleActions;                                     // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UTutorialPuzzle*                        TutorialPuzzle;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0xB8];                                      // 0x0040(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSPuzzleSession">();
	}
	static class UCSPuzzleSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSPuzzleSession>();
	}
};
static_assert(alignof(UCSPuzzleSession) == 0x000008, "Wrong alignment on UCSPuzzleSession");
static_assert(sizeof(UCSPuzzleSession) == 0x0000F8, "Wrong size on UCSPuzzleSession");
static_assert(offsetof(UCSPuzzleSession, PuzzleActions) == 0x000028, "Member 'UCSPuzzleSession::PuzzleActions' has a wrong offset!");
static_assert(offsetof(UCSPuzzleSession, TutorialPuzzle) == 0x000038, "Member 'UCSPuzzleSession::TutorialPuzzle' has a wrong offset!");

// Class OakCS.CSTutorialBPLib
// 0x0000 (0x0028 - 0x0028)
class UCSTutorialBPLib final : public UBlueprintFunctionLibrary
{
public:
	static void BlockCSPuzzleInputs();
	static void BlockCSPuzzleIntro();
	static void CSWaitForScore(class UWorld* World, ECSScoreCondition ScoreCondition, const struct FLatentActionInfo& LatentInfo);
	static void HideCSTutorialElement(ECSTutorialElement TutorialElement);
	static void HideCSTutorialTooltip(const class FString& Tooltip);
	static void HighlightCSTutorialElement(ECSTutorialElement TutorialElement);
	static void ShowCSTutorialElement(ECSTutorialElement TutorialElement);
	static void ShowCSTutorialTooltip(const class FString& Tooltip);
	static void StopHighlightCSTutorialElement(ECSTutorialElement TutorialElement);
	static void UnblockCSPuzzleInputs();
	static void UnblockCSPuzzleIntro();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSTutorialBPLib">();
	}
	static class UCSTutorialBPLib* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSTutorialBPLib>();
	}
};
static_assert(alignof(UCSTutorialBPLib) == 0x000008, "Wrong alignment on UCSTutorialBPLib");
static_assert(sizeof(UCSTutorialBPLib) == 0x000028, "Wrong size on UCSTutorialBPLib");

// Class OakCS.GFxCSButton
// 0x0010 (0x0318 - 0x0308)
#pragma pack(push, 0x1)
class alignas(0x08) UGFxCSButton : public UGbxGFxListCell
{
public:
	class UGbxTextField*                          HintText;                                          // 0x0308(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputDeviceChanged(const EGbxMenuInputDevice NewInputDevice);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSButton">();
	}
	static class UGFxCSButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSButton>();
	}
};
#pragma pack(pop)
static_assert(alignof(UGFxCSButton) == 0x000008, "Wrong alignment on UGFxCSButton");
static_assert(sizeof(UGFxCSButton) == 0x000318, "Wrong size on UGFxCSButton");
static_assert(offsetof(UGFxCSButton, HintText) == 0x000308, "Member 'UGFxCSButton::HintText' has a wrong offset!");

// Class OakCS.GFxCSBoosterItem
// 0x0078 (0x0390 - 0x0318)
class UGFxCSBoosterItem final : public UGFxCSButton
{
public:
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxTextField*                          DisplayName;                                       // 0x0320(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          Description;                                       // 0x0328(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          UnlockDescription;                                 // 0x0330(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          Price;                                             // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          Picture;                                           // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          BoosterTimer;                                      // 0x0348(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x40];                                     // 0x0350(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSBoosterItem">();
	}
	static class UGFxCSBoosterItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSBoosterItem>();
	}
};
static_assert(alignof(UGFxCSBoosterItem) == 0x000008, "Wrong alignment on UGFxCSBoosterItem");
static_assert(sizeof(UGFxCSBoosterItem) == 0x000390, "Wrong size on UGFxCSBoosterItem");
static_assert(offsetof(UGFxCSBoosterItem, DisplayName) == 0x000320, "Member 'UGFxCSBoosterItem::DisplayName' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterItem, Description) == 0x000328, "Member 'UGFxCSBoosterItem::Description' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterItem, UnlockDescription) == 0x000330, "Member 'UGFxCSBoosterItem::UnlockDescription' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterItem, Price) == 0x000338, "Member 'UGFxCSBoosterItem::Price' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterItem, Picture) == 0x000340, "Member 'UGFxCSBoosterItem::Picture' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterItem, BoosterTimer) == 0x000348, "Member 'UGFxCSBoosterItem::BoosterTimer' has a wrong offset!");

// Class OakCS.GFxCSSubMenu
// 0x0018 (0x06A0 - 0x0688)
class UGFxCSSubMenu : public UGbxGFxMenuSwitcherSubmenu
{
public:
	TArray<class UGFxCSButton*>                   Buttons;                                           // 0x0688(0x0010)(BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSSubMenu">();
	}
	static class UGFxCSSubMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSSubMenu>();
	}
};
static_assert(alignof(UGFxCSSubMenu) == 0x000008, "Wrong alignment on UGFxCSSubMenu");
static_assert(sizeof(UGFxCSSubMenu) == 0x0006A0, "Wrong size on UGFxCSSubMenu");
static_assert(offsetof(UGFxCSSubMenu, Buttons) == 0x000688, "Member 'UGFxCSSubMenu::Buttons' has a wrong offset!");

// Class OakCS.GFxCSBoosterShopMenu
// 0x0070 (0x0710 - 0x06A0)
class UGFxCSBoosterShopMenu final : public UGFxCSSubMenu
{
public:
	class FText                                   BuyBoosterMessageHeader;                           // 0x06A0(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   BuyBoosterMessage;                                 // 0x06B8(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         NumBoosterItemByRow;                               // 0x06D0(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoosterData*                           BoosterData;                                       // 0x06D8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxGridScrollingList*               BoosterList;                                       // 0x06E0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSBoosterItem*                      ClickedBoosterItem;                                // 0x06E8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F0[0x20];                                     // 0x06F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBoosterItemClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnConfirmPurchase(const class UGbxGFxDialogBox* SourceDialog, const class FName ChoiceNameId, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnCSBucksAmountChanged(int32 NewAmount) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSBoosterShopMenu">();
	}
	static class UGFxCSBoosterShopMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSBoosterShopMenu>();
	}
};
static_assert(alignof(UGFxCSBoosterShopMenu) == 0x000008, "Wrong alignment on UGFxCSBoosterShopMenu");
static_assert(sizeof(UGFxCSBoosterShopMenu) == 0x000710, "Wrong size on UGFxCSBoosterShopMenu");
static_assert(offsetof(UGFxCSBoosterShopMenu, BuyBoosterMessageHeader) == 0x0006A0, "Member 'UGFxCSBoosterShopMenu::BuyBoosterMessageHeader' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterShopMenu, BuyBoosterMessage) == 0x0006B8, "Member 'UGFxCSBoosterShopMenu::BuyBoosterMessage' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterShopMenu, NumBoosterItemByRow) == 0x0006D0, "Member 'UGFxCSBoosterShopMenu::NumBoosterItemByRow' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterShopMenu, BoosterData) == 0x0006D8, "Member 'UGFxCSBoosterShopMenu::BoosterData' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterShopMenu, BoosterList) == 0x0006E0, "Member 'UGFxCSBoosterShopMenu::BoosterList' has a wrong offset!");
static_assert(offsetof(UGFxCSBoosterShopMenu, ClickedBoosterItem) == 0x0006E8, "Member 'UGFxCSBoosterShopMenu::ClickedBoosterItem' has a wrong offset!");

// Class OakCS.GFxCSHelpMenu
// 0x0130 (0x07B0 - 0x0680)
class UGFxCSHelpMenu final : public UGbxGFxMenu
{
public:
	class UGFxCSButton*                           RulesTab;                                          // 0x0680(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           ControllerTab;                                     // 0x0688(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          RulesContainer;                                    // 0x0690(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          HelpContainer;                                     // 0x0698(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          ControlsContainer;                                 // 0x06A0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           CloseButton;                                       // 0x06A8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6B0[0x100];                                    // 0x06B0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCloseClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSHelpMenu">();
	}
	static class UGFxCSHelpMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSHelpMenu>();
	}
};
static_assert(alignof(UGFxCSHelpMenu) == 0x000008, "Wrong alignment on UGFxCSHelpMenu");
static_assert(sizeof(UGFxCSHelpMenu) == 0x0007B0, "Wrong size on UGFxCSHelpMenu");
static_assert(offsetof(UGFxCSHelpMenu, RulesTab) == 0x000680, "Member 'UGFxCSHelpMenu::RulesTab' has a wrong offset!");
static_assert(offsetof(UGFxCSHelpMenu, ControllerTab) == 0x000688, "Member 'UGFxCSHelpMenu::ControllerTab' has a wrong offset!");
static_assert(offsetof(UGFxCSHelpMenu, RulesContainer) == 0x000690, "Member 'UGFxCSHelpMenu::RulesContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSHelpMenu, HelpContainer) == 0x000698, "Member 'UGFxCSHelpMenu::HelpContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSHelpMenu, ControlsContainer) == 0x0006A0, "Member 'UGFxCSHelpMenu::ControlsContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSHelpMenu, CloseButton) == 0x0006A8, "Member 'UGFxCSHelpMenu::CloseButton' has a wrong offset!");

// Class OakCS.GFxCSHUD
// 0x0080 (0x0720 - 0x06A0)
class UGFxCSHUD final : public UGbxGFxMenuSwitcher
{
public:
	uint8                                         Pad_6A0[0x10];                                     // 0x06A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCSGlobals*                             CitizenScienceGlobals;                             // 0x06B0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxEchologWidgetBase*                  EchoWidget;                                        // 0x06B8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSSubtitles*                        SubtitlesWidget;                                   // 0x06C0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          CSBucksAmountTextField;                            // 0x06C8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          MenuTitle;                                         // 0x06D0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           BackButton;                                        // 0x06D8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           HelpButton;                                        // 0x06E0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          CSBucksObject;                                     // 0x06E8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          PlayerIdPanel;                                     // 0x06F0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          PlayerIdText;                                      // 0x06F8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_700[0x20];                                     // 0x0700(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnCSBucksAmountChanged(int32 NewAmount) const;
	void OnHelpClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSHUD">();
	}
	static class UGFxCSHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSHUD>();
	}
};
static_assert(alignof(UGFxCSHUD) == 0x000008, "Wrong alignment on UGFxCSHUD");
static_assert(sizeof(UGFxCSHUD) == 0x000720, "Wrong size on UGFxCSHUD");
static_assert(offsetof(UGFxCSHUD, CitizenScienceGlobals) == 0x0006B0, "Member 'UGFxCSHUD::CitizenScienceGlobals' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, EchoWidget) == 0x0006B8, "Member 'UGFxCSHUD::EchoWidget' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, SubtitlesWidget) == 0x0006C0, "Member 'UGFxCSHUD::SubtitlesWidget' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, CSBucksAmountTextField) == 0x0006C8, "Member 'UGFxCSHUD::CSBucksAmountTextField' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, MenuTitle) == 0x0006D0, "Member 'UGFxCSHUD::MenuTitle' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, BackButton) == 0x0006D8, "Member 'UGFxCSHUD::BackButton' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, HelpButton) == 0x0006E0, "Member 'UGFxCSHUD::HelpButton' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, CSBucksObject) == 0x0006E8, "Member 'UGFxCSHUD::CSBucksObject' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, PlayerIdPanel) == 0x0006F0, "Member 'UGFxCSHUD::PlayerIdPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSHUD, PlayerIdText) == 0x0006F8, "Member 'UGFxCSHUD::PlayerIdText' has a wrong offset!");

// Class OakCS.GFxCSLevelButton
// 0x00B8 (0x03D0 - 0x0318)
class UGFxCSLevelButton final : public UGFxCSButton
{
public:
	class UGbxTextField*                          NumLevel;                                          // 0x0318(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          CharacterName;                                     // 0x0320(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          LevelDifficulty;                                   // 0x0328(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          PuzzleCompletedNum;                                // 0x0330(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          CharacterPicture;                                  // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSProgressBar*                      ProgressBar;                                       // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          RewardPanel;                                       // 0x0348(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          RewardText;                                        // 0x0350(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          RewardPicture;                                     // 0x0358(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x70];                                     // 0x0360(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSLevelButton">();
	}
	static class UGFxCSLevelButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSLevelButton>();
	}
};
static_assert(alignof(UGFxCSLevelButton) == 0x000008, "Wrong alignment on UGFxCSLevelButton");
static_assert(sizeof(UGFxCSLevelButton) == 0x0003D0, "Wrong size on UGFxCSLevelButton");
static_assert(offsetof(UGFxCSLevelButton, NumLevel) == 0x000318, "Member 'UGFxCSLevelButton::NumLevel' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, CharacterName) == 0x000320, "Member 'UGFxCSLevelButton::CharacterName' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, LevelDifficulty) == 0x000328, "Member 'UGFxCSLevelButton::LevelDifficulty' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, PuzzleCompletedNum) == 0x000330, "Member 'UGFxCSLevelButton::PuzzleCompletedNum' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, CharacterPicture) == 0x000338, "Member 'UGFxCSLevelButton::CharacterPicture' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, ProgressBar) == 0x000340, "Member 'UGFxCSLevelButton::ProgressBar' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, RewardPanel) == 0x000348, "Member 'UGFxCSLevelButton::RewardPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, RewardText) == 0x000350, "Member 'UGFxCSLevelButton::RewardText' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelButton, RewardPicture) == 0x000358, "Member 'UGFxCSLevelButton::RewardPicture' has a wrong offset!");

// Class OakCS.GFxCSLevelList
// 0x0000 (0x0320 - 0x0320)
class UGFxCSLevelList final : public UGbxGFxGridScrollingList
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSLevelList">();
	}
	static class UGFxCSLevelList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSLevelList>();
	}
};
static_assert(alignof(UGFxCSLevelList) == 0x000008, "Wrong alignment on UGFxCSLevelList");
static_assert(sizeof(UGFxCSLevelList) == 0x000320, "Wrong size on UGFxCSLevelList");

// Class OakCS.GFxCSLevelSelectorMenu
// 0x0020 (0x06C0 - 0x06A0)
class UGFxCSLevelSelectorMenu final : public UGFxCSSubMenu
{
public:
	class UCSLevelData*                           LevelData;                                         // 0x06A0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DelayBeforeLoadingPuzzleMenu;                      // 0x06A8(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGFxCSLevelList*                        LevelList;                                         // 0x06B0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6B8[0x8];                                      // 0x06B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLevelItemClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSLevelSelectorMenu">();
	}
	static class UGFxCSLevelSelectorMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSLevelSelectorMenu>();
	}
};
static_assert(alignof(UGFxCSLevelSelectorMenu) == 0x000008, "Wrong alignment on UGFxCSLevelSelectorMenu");
static_assert(sizeof(UGFxCSLevelSelectorMenu) == 0x0006C0, "Wrong size on UGFxCSLevelSelectorMenu");
static_assert(offsetof(UGFxCSLevelSelectorMenu, LevelData) == 0x0006A0, "Member 'UGFxCSLevelSelectorMenu::LevelData' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelSelectorMenu, DelayBeforeLoadingPuzzleMenu) == 0x0006A8, "Member 'UGFxCSLevelSelectorMenu::DelayBeforeLoadingPuzzleMenu' has a wrong offset!");
static_assert(offsetof(UGFxCSLevelSelectorMenu, LevelList) == 0x0006B0, "Member 'UGFxCSLevelSelectorMenu::LevelList' has a wrong offset!");

// Class OakCS.GFxCSMainMenu
// 0x0050 (0x06F0 - 0x06A0)
class UGFxCSMainMenu final : public UGFxCSSubMenu
{
public:
	class UGFxCSButton*                           PlayButton;                                        // 0x06A0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           BuyBoosterButton;                                  // 0x06A8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           WhatsThisButton;                                   // 0x06B0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSButton*                           QuitButton;                                        // 0x06B8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxButton*                          HelpButton;                                        // 0x06C0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DidYouKnowTitle;                                   // 0x06C8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DidYouKnowText;                                    // 0x06D0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxDialogBox*                       SparkAuthenticatingDialog;                         // 0x06D8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E0[0x10];                                     // 0x06E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBuyBoosterClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnErrorDialogClicked(const class UGbxGFxDialogBox* SourceDialog, const class FName ChoiceNameId, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnPlayClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnWhatsThisClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSMainMenu">();
	}
	static class UGFxCSMainMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSMainMenu>();
	}
};
static_assert(alignof(UGFxCSMainMenu) == 0x000008, "Wrong alignment on UGFxCSMainMenu");
static_assert(sizeof(UGFxCSMainMenu) == 0x0006F0, "Wrong size on UGFxCSMainMenu");
static_assert(offsetof(UGFxCSMainMenu, PlayButton) == 0x0006A0, "Member 'UGFxCSMainMenu::PlayButton' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, BuyBoosterButton) == 0x0006A8, "Member 'UGFxCSMainMenu::BuyBoosterButton' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, WhatsThisButton) == 0x0006B0, "Member 'UGFxCSMainMenu::WhatsThisButton' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, QuitButton) == 0x0006B8, "Member 'UGFxCSMainMenu::QuitButton' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, HelpButton) == 0x0006C0, "Member 'UGFxCSMainMenu::HelpButton' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, DidYouKnowTitle) == 0x0006C8, "Member 'UGFxCSMainMenu::DidYouKnowTitle' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, DidYouKnowText) == 0x0006D0, "Member 'UGFxCSMainMenu::DidYouKnowText' has a wrong offset!");
static_assert(offsetof(UGFxCSMainMenu, SparkAuthenticatingDialog) == 0x0006D8, "Member 'UGFxCSMainMenu::SparkAuthenticatingDialog' has a wrong offset!");

// Class OakCS.OakCitizenScienceManager
// 0x00D0 (0x00F8 - 0x0028)
class UOakCitizenScienceManager final : public UObject
{
public:
	uint8                                         Pad_28[0x80];                                      // 0x0028(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UCSPuzzleSession*                       CurrentPuzzleSession;                              // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCSGlobals*                             CSGlobals;                                         // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x40];                                      // 0x00B8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOakCitizenScienceManager* GetCitizenScienceManager();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OakCitizenScienceManager">();
	}
	static class UOakCitizenScienceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOakCitizenScienceManager>();
	}
};
static_assert(alignof(UOakCitizenScienceManager) == 0x000008, "Wrong alignment on UOakCitizenScienceManager");
static_assert(sizeof(UOakCitizenScienceManager) == 0x0000F8, "Wrong size on UOakCitizenScienceManager");
static_assert(offsetof(UOakCitizenScienceManager, CurrentPuzzleSession) == 0x0000A8, "Member 'UOakCitizenScienceManager::CurrentPuzzleSession' has a wrong offset!");
static_assert(offsetof(UOakCitizenScienceManager, CSGlobals) == 0x0000B0, "Member 'UOakCitizenScienceManager::CSGlobals' has a wrong offset!");

// Class OakCS.GFxCSProgressBar
// 0x0020 (0x0190 - 0x0170)
class UGFxCSProgressBar final : public UGbxGFxObject
{
public:
	class UGbxGFxObject*                          MaskObj;                                           // 0x0170(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          Marker;                                            // 0x0178(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSProgressBar">();
	}
	static class UGFxCSProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSProgressBar>();
	}
};
static_assert(alignof(UGFxCSProgressBar) == 0x000008, "Wrong alignment on UGFxCSProgressBar");
static_assert(sizeof(UGFxCSProgressBar) == 0x000190, "Wrong size on UGFxCSProgressBar");
static_assert(offsetof(UGFxCSProgressBar, MaskObj) == 0x000170, "Member 'UGFxCSProgressBar::MaskObj' has a wrong offset!");
static_assert(offsetof(UGFxCSProgressBar, Marker) == 0x000178, "Member 'UGFxCSProgressBar::Marker' has a wrong offset!");

// Class OakCS.GFxCSPuzzle
// 0x0030 (0x01A0 - 0x0170)
class UGFxCSPuzzle final : public UGbxGFxObject
{
public:
	uint8                                         Pad_170[0x10];                                     // 0x0170(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGFxCSPuzzleGrid*                       PuzzleGrid;                                        // 0x0180(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSPuzzleGuide*                      PuzzleGuide;                                       // 0x0188(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSTokenPool*                        TokenPool;                                         // 0x0190(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSPuzzle">();
	}
	static class UGFxCSPuzzle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSPuzzle>();
	}
};
static_assert(alignof(UGFxCSPuzzle) == 0x000008, "Wrong alignment on UGFxCSPuzzle");
static_assert(sizeof(UGFxCSPuzzle) == 0x0001A0, "Wrong size on UGFxCSPuzzle");
static_assert(offsetof(UGFxCSPuzzle, PuzzleGrid) == 0x000180, "Member 'UGFxCSPuzzle::PuzzleGrid' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzle, PuzzleGuide) == 0x000188, "Member 'UGFxCSPuzzle::PuzzleGuide' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzle, TokenPool) == 0x000190, "Member 'UGFxCSPuzzle::TokenPool' has a wrong offset!");

// Class OakCS.GFxCSRewardScreenItem
// 0x0020 (0x0190 - 0x0170)
class UGFxCSRewardScreenItem final : public UGbxGFxObject
{
public:
	class UGbxTextField*                          ItemLabel;                                         // 0x0170(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          ItemValue;                                         // 0x0178(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSRewardScreenItem">();
	}
	static class UGFxCSRewardScreenItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSRewardScreenItem>();
	}
};
static_assert(alignof(UGFxCSRewardScreenItem) == 0x000008, "Wrong alignment on UGFxCSRewardScreenItem");
static_assert(sizeof(UGFxCSRewardScreenItem) == 0x000190, "Wrong size on UGFxCSRewardScreenItem");
static_assert(offsetof(UGFxCSRewardScreenItem, ItemLabel) == 0x000170, "Member 'UGFxCSRewardScreenItem::ItemLabel' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenItem, ItemValue) == 0x000178, "Member 'UGFxCSRewardScreenItem::ItemValue' has a wrong offset!");

// Class OakCS.GFxCSPuzzleGrid
// 0x0080 (0x01F0 - 0x0170)
class UGFxCSPuzzleGrid final : public UGbxGFxObject
{
public:
	uint8                                         Pad_170[0x18];                                     // 0x0170(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGFxCSTileArray>                PuzzleTiles;                                       // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGFxCSTileArray>                GridTiles;                                         // 0x0198(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          GridMask;                                          // 0x01A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSTokenTile*                        LooseToken;                                        // 0x01B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x38];                                     // 0x01B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSPuzzleGrid">();
	}
	static class UGFxCSPuzzleGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSPuzzleGrid>();
	}
};
static_assert(alignof(UGFxCSPuzzleGrid) == 0x000008, "Wrong alignment on UGFxCSPuzzleGrid");
static_assert(sizeof(UGFxCSPuzzleGrid) == 0x0001F0, "Wrong size on UGFxCSPuzzleGrid");
static_assert(offsetof(UGFxCSPuzzleGrid, PuzzleTiles) == 0x000188, "Member 'UGFxCSPuzzleGrid::PuzzleTiles' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleGrid, GridTiles) == 0x000198, "Member 'UGFxCSPuzzleGrid::GridTiles' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleGrid, GridMask) == 0x0001A8, "Member 'UGFxCSPuzzleGrid::GridMask' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleGrid, LooseToken) == 0x0001B0, "Member 'UGFxCSPuzzleGrid::LooseToken' has a wrong offset!");

// Class OakCS.GFxCSPuzzleGuide
// 0x0020 (0x0190 - 0x0170)
class UGFxCSPuzzleGuide final : public UGbxGFxObject
{
public:
	TArray<struct FGFxCSTileArray>                GuideTiles;                                        // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSPuzzleGuide">();
	}
	static class UGFxCSPuzzleGuide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSPuzzleGuide>();
	}
};
static_assert(alignof(UGFxCSPuzzleGuide) == 0x000008, "Wrong alignment on UGFxCSPuzzleGuide");
static_assert(sizeof(UGFxCSPuzzleGuide) == 0x000190, "Wrong size on UGFxCSPuzzleGuide");
static_assert(offsetof(UGFxCSPuzzleGuide, GuideTiles) == 0x000170, "Member 'UGFxCSPuzzleGuide::GuideTiles' has a wrong offset!");

// Class OakCS.GFxCSPuzzleMenu
// 0x0190 (0x0830 - 0x06A0)
class UGFxCSPuzzleMenu final : public UGFxCSSubMenu
{
public:
	uint8                                         Pad_6A0[0x10];                                     // 0x06A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnQuit;                                            // 0x06B0(0x0010)(BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C0[0x8];                                      // 0x06C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxGFxDialogBox*                       RequestingPuzzleDialog;                            // 0x06C8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCSPuzzleFeedbackManager*               PuzzleFeedbackManager;                             // 0x06D0(0x0008)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCSPuzzleIntroManager*                  PuzzleIntroManager;                                // 0x06D8(0x0008)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSPuzzle*                           Puzzle;                                            // 0x06E0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          ParScoreContainer;                                 // 0x06E8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          ParScoreText;                                      // 0x06F0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          CurrentScoreContainer;                             // 0x06F8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          CurrentScoreText;                                  // 0x0700(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          HighScoreContainer;                                // 0x0708(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          HighScoreText;                                     // 0x0710(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          DebugContainer;                                    // 0x0718(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugCurrentScoreText;                             // 0x0720(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugRealCurrentScoreText;                         // 0x0728(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugParScoreText;                                 // 0x0730(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugRealParScoreText;                             // 0x0738(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugHighestScoreText;                             // 0x0740(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugRealHighestScoreText;                         // 0x0748(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugNbTokenLeftText;                              // 0x0750(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugMatchingTileValueText;                        // 0x0758(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugPerfectAlignmentModifierText;                 // 0x0760(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugPuzzleId;                                     // 0x0768(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          DebugTokenPos;                                     // 0x0770(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          ParScoreTextFeedback;                              // 0x0778(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSProgressBar*                      ProgressBar;                                       // 0x0780(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          ProgressBarBonusScoreContainer;                    // 0x0788(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          ProgressBarBonusScoreText;                         // 0x0790(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxButton*                          QuitButton;                                        // 0x0798(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxButton*                          QuickPassButton;                                   // 0x07A0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          QuickPassButtonTxt;                                // 0x07A8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxButton*                          SubmitButton;                                      // 0x07B0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          SubmitButtonContainer;                             // 0x07B8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          ProgressBarContainer;                              // 0x07C0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          NotificationContainer;                             // 0x07C8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          NotificationText;                                  // 0x07D0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          BonusScoreContainer;                               // 0x07D8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          BonusScoreText;                                    // 0x07E0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          NumTokensPanel;                                    // 0x07E8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          NumTokensContainer;                                // 0x07F0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          NumTokensText;                                     // 0x07F8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          NumTotalTokensText;                                // 0x0800(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_808[0x28];                                     // 0x0808(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExtTokenTileTurnedOff() const;
	void ExtTokenTileTurnedOn() const;
	void GoToMainMenu() const;
	void GoToRewardScreenMenu() const;
	void OnConfirmQuickPass(const class UGbxGFxDialogBox* SourceDialog, const class FName ChoiceNameId, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnErrorDialogClicked(const class UGbxGFxDialogBox* SourceDialog, const class FName ChoiceNameId, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnQuickPassClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnQuitConfirmed(const class UGbxGFxDialogBox* SourceDialog, const class FName ChoiceNameId, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnSubmitClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSPuzzleMenu">();
	}
	static class UGFxCSPuzzleMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSPuzzleMenu>();
	}
};
static_assert(alignof(UGFxCSPuzzleMenu) == 0x000008, "Wrong alignment on UGFxCSPuzzleMenu");
static_assert(sizeof(UGFxCSPuzzleMenu) == 0x000830, "Wrong size on UGFxCSPuzzleMenu");
static_assert(offsetof(UGFxCSPuzzleMenu, OnQuit) == 0x0006B0, "Member 'UGFxCSPuzzleMenu::OnQuit' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, RequestingPuzzleDialog) == 0x0006C8, "Member 'UGFxCSPuzzleMenu::RequestingPuzzleDialog' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, PuzzleFeedbackManager) == 0x0006D0, "Member 'UGFxCSPuzzleMenu::PuzzleFeedbackManager' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, PuzzleIntroManager) == 0x0006D8, "Member 'UGFxCSPuzzleMenu::PuzzleIntroManager' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, Puzzle) == 0x0006E0, "Member 'UGFxCSPuzzleMenu::Puzzle' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ParScoreContainer) == 0x0006E8, "Member 'UGFxCSPuzzleMenu::ParScoreContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ParScoreText) == 0x0006F0, "Member 'UGFxCSPuzzleMenu::ParScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, CurrentScoreContainer) == 0x0006F8, "Member 'UGFxCSPuzzleMenu::CurrentScoreContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, CurrentScoreText) == 0x000700, "Member 'UGFxCSPuzzleMenu::CurrentScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, HighScoreContainer) == 0x000708, "Member 'UGFxCSPuzzleMenu::HighScoreContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, HighScoreText) == 0x000710, "Member 'UGFxCSPuzzleMenu::HighScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugContainer) == 0x000718, "Member 'UGFxCSPuzzleMenu::DebugContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugCurrentScoreText) == 0x000720, "Member 'UGFxCSPuzzleMenu::DebugCurrentScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugRealCurrentScoreText) == 0x000728, "Member 'UGFxCSPuzzleMenu::DebugRealCurrentScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugParScoreText) == 0x000730, "Member 'UGFxCSPuzzleMenu::DebugParScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugRealParScoreText) == 0x000738, "Member 'UGFxCSPuzzleMenu::DebugRealParScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugHighestScoreText) == 0x000740, "Member 'UGFxCSPuzzleMenu::DebugHighestScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugRealHighestScoreText) == 0x000748, "Member 'UGFxCSPuzzleMenu::DebugRealHighestScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugNbTokenLeftText) == 0x000750, "Member 'UGFxCSPuzzleMenu::DebugNbTokenLeftText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugMatchingTileValueText) == 0x000758, "Member 'UGFxCSPuzzleMenu::DebugMatchingTileValueText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugPerfectAlignmentModifierText) == 0x000760, "Member 'UGFxCSPuzzleMenu::DebugPerfectAlignmentModifierText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugPuzzleId) == 0x000768, "Member 'UGFxCSPuzzleMenu::DebugPuzzleId' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, DebugTokenPos) == 0x000770, "Member 'UGFxCSPuzzleMenu::DebugTokenPos' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ParScoreTextFeedback) == 0x000778, "Member 'UGFxCSPuzzleMenu::ParScoreTextFeedback' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ProgressBar) == 0x000780, "Member 'UGFxCSPuzzleMenu::ProgressBar' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ProgressBarBonusScoreContainer) == 0x000788, "Member 'UGFxCSPuzzleMenu::ProgressBarBonusScoreContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ProgressBarBonusScoreText) == 0x000790, "Member 'UGFxCSPuzzleMenu::ProgressBarBonusScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, QuitButton) == 0x000798, "Member 'UGFxCSPuzzleMenu::QuitButton' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, QuickPassButton) == 0x0007A0, "Member 'UGFxCSPuzzleMenu::QuickPassButton' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, QuickPassButtonTxt) == 0x0007A8, "Member 'UGFxCSPuzzleMenu::QuickPassButtonTxt' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, SubmitButton) == 0x0007B0, "Member 'UGFxCSPuzzleMenu::SubmitButton' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, SubmitButtonContainer) == 0x0007B8, "Member 'UGFxCSPuzzleMenu::SubmitButtonContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, ProgressBarContainer) == 0x0007C0, "Member 'UGFxCSPuzzleMenu::ProgressBarContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, NotificationContainer) == 0x0007C8, "Member 'UGFxCSPuzzleMenu::NotificationContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, NotificationText) == 0x0007D0, "Member 'UGFxCSPuzzleMenu::NotificationText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, BonusScoreContainer) == 0x0007D8, "Member 'UGFxCSPuzzleMenu::BonusScoreContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, BonusScoreText) == 0x0007E0, "Member 'UGFxCSPuzzleMenu::BonusScoreText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, NumTokensPanel) == 0x0007E8, "Member 'UGFxCSPuzzleMenu::NumTokensPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, NumTokensContainer) == 0x0007F0, "Member 'UGFxCSPuzzleMenu::NumTokensContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, NumTokensText) == 0x0007F8, "Member 'UGFxCSPuzzleMenu::NumTokensText' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleMenu, NumTotalTokensText) == 0x000800, "Member 'UGFxCSPuzzleMenu::NumTotalTokensText' has a wrong offset!");

// Class OakCS.GFxCSPuzzleTile
// 0x00C0 (0x0230 - 0x0170)
class UGFxCSPuzzleTile : public UGbxGFxObject
{
public:
	uint8                                         Pad_170[0x40];                                     // 0x0170(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxGFxObject*                          AnimObject;                                        // 0x01B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x20];                                     // 0x01B8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxGFxObject*                          FocusedFeedback;                                   // 0x01D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGbxTextField*>                  PlayerIds;                                         // 0x01E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x40];                                     // 0x01F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSPuzzleTile">();
	}
	static class UGFxCSPuzzleTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSPuzzleTile>();
	}
};
static_assert(alignof(UGFxCSPuzzleTile) == 0x000008, "Wrong alignment on UGFxCSPuzzleTile");
static_assert(sizeof(UGFxCSPuzzleTile) == 0x000230, "Wrong size on UGFxCSPuzzleTile");
static_assert(offsetof(UGFxCSPuzzleTile, AnimObject) == 0x0001B0, "Member 'UGFxCSPuzzleTile::AnimObject' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleTile, FocusedFeedback) == 0x0001D8, "Member 'UGFxCSPuzzleTile::FocusedFeedback' has a wrong offset!");
static_assert(offsetof(UGFxCSPuzzleTile, PlayerIds) == 0x0001E0, "Member 'UGFxCSPuzzleTile::PlayerIds' has a wrong offset!");

// Class OakCS.GFxCSTokenPool
// 0x0030 (0x01A0 - 0x0170)
class UGFxCSTokenPool final : public UGbxGFxObject
{
public:
	class UGbxGFxObject*                          TokenPoolMask;                                     // 0x0170(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGFxCSTokenTile*>                TokenTiles;                                        // 0x0178(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UGFxCSGridTile*>                 GridTiles;                                         // 0x0188(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSTokenPool">();
	}
	static class UGFxCSTokenPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSTokenPool>();
	}
};
static_assert(alignof(UGFxCSTokenPool) == 0x000008, "Wrong alignment on UGFxCSTokenPool");
static_assert(sizeof(UGFxCSTokenPool) == 0x0001A0, "Wrong size on UGFxCSTokenPool");
static_assert(offsetof(UGFxCSTokenPool, TokenPoolMask) == 0x000170, "Member 'UGFxCSTokenPool::TokenPoolMask' has a wrong offset!");
static_assert(offsetof(UGFxCSTokenPool, TokenTiles) == 0x000178, "Member 'UGFxCSTokenPool::TokenTiles' has a wrong offset!");
static_assert(offsetof(UGFxCSTokenPool, GridTiles) == 0x000188, "Member 'UGFxCSTokenPool::GridTiles' has a wrong offset!");

// Class OakCS.GFxCSGridTile
// 0x0000 (0x0230 - 0x0230)
class UGFxCSGridTile final : public UGFxCSPuzzleTile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSGridTile">();
	}
	static class UGFxCSGridTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSGridTile>();
	}
};
static_assert(alignof(UGFxCSGridTile) == 0x000008, "Wrong alignment on UGFxCSGridTile");
static_assert(sizeof(UGFxCSGridTile) == 0x000230, "Wrong size on UGFxCSGridTile");

// Class OakCS.GFxCSGuideTile
// 0x0000 (0x0230 - 0x0230)
class UGFxCSGuideTile final : public UGFxCSPuzzleTile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSGuideTile">();
	}
	static class UGFxCSGuideTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSGuideTile>();
	}
};
static_assert(alignof(UGFxCSGuideTile) == 0x000008, "Wrong alignment on UGFxCSGuideTile");
static_assert(sizeof(UGFxCSGuideTile) == 0x000230, "Wrong size on UGFxCSGuideTile");

// Class OakCS.GFxCSTokenTile
// 0x0000 (0x0230 - 0x0230)
class UGFxCSTokenTile final : public UGFxCSPuzzleTile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSTokenTile">();
	}
	static class UGFxCSTokenTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSTokenTile>();
	}
};
static_assert(alignof(UGFxCSTokenTile) == 0x000008, "Wrong alignment on UGFxCSTokenTile");
static_assert(sizeof(UGFxCSTokenTile) == 0x000230, "Wrong size on UGFxCSTokenTile");

// Class OakCS.GFxCSRewardScreenMenu
// 0x01F0 (0x0890 - 0x06A0)
class UGFxCSRewardScreenMenu final : public UGFxCSSubMenu
{
public:
	uint8                                         Pad_6A0[0x4];                                      // 0x06A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressBarAnimSpeed;                              // 0x06A4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DelayBetweenBonuses;                               // 0x06A8(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TextAnimationTime;                                 // 0x06AC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   BaseRewardText;                                    // 0x06B0(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   ExtraPointText;                                    // 0x06C8(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   HighScoreMatchedText;                              // 0x06E0(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   HighScoreBeatText;                                 // 0x06F8(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   PioneerText;                                       // 0x0710(0x0018)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCSLevelData*                           LevelData;                                         // 0x0728(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGbxTextField>           PlayerCSBucksAmountText;                           // 0x0730(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          PuzzleCompletedTextPanel;                          // 0x0738(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          MainContentPanel;                                  // 0x0740(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          ProgressTextPanel;                                 // 0x0748(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          NumCompletedPuzzleTextPanel;                       // 0x0750(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          NumCompletedPuzzleText;                            // 0x0758(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxTextField*                          NumTargetPuzzleText;                               // 0x0760(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSProgressBar*                      ProgressBar;                                       // 0x0768(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          NewCustomizationAnimText;                          // 0x0770(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          AnimRewardPanel;                                   // 0x0778(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          CharacterPicture;                                  // 0x0780(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          CustomizationPicture;                              // 0x0788(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSRewardScreenItem*                 PuzzleRewardItem;                                  // 0x0790(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGFxCSRewardScreenItem*                 TotalPuzzleRewardItem;                             // 0x0798(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGFxCSRewardScreenItem*>         BonusItems;                                        // 0x07A0(0x0010)(BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UGbxGFxGridScrollingList*               ButtonList;                                        // 0x07B0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7B8[0xD8];                                     // 0x07B8(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExtNumCompletedPuzzleAnimDone() const;
	void ExtOnShowBonusDone() const;
	void ExtOnShowPuzzleRewardDone() const;
	void ExtPuzzleCompletedTextAnimDone() const;
	void ExtRefreshNumCompletedPuzzle() const;
	void GoToMainMenu() const;
	void GoToPuzzleMenu() const;
	void OnMainMenuButtonClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnPlayAgainClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;
	void OnPlayNextCharacterClicked(class UGbxGFxButton* PressedButton, const struct FGbxMenuInputEvent& InputInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSRewardScreenMenu">();
	}
	static class UGFxCSRewardScreenMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSRewardScreenMenu>();
	}
};
static_assert(alignof(UGFxCSRewardScreenMenu) == 0x000008, "Wrong alignment on UGFxCSRewardScreenMenu");
static_assert(sizeof(UGFxCSRewardScreenMenu) == 0x000890, "Wrong size on UGFxCSRewardScreenMenu");
static_assert(offsetof(UGFxCSRewardScreenMenu, ProgressBarAnimSpeed) == 0x0006A4, "Member 'UGFxCSRewardScreenMenu::ProgressBarAnimSpeed' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, DelayBetweenBonuses) == 0x0006A8, "Member 'UGFxCSRewardScreenMenu::DelayBetweenBonuses' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, TextAnimationTime) == 0x0006AC, "Member 'UGFxCSRewardScreenMenu::TextAnimationTime' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, BaseRewardText) == 0x0006B0, "Member 'UGFxCSRewardScreenMenu::BaseRewardText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, ExtraPointText) == 0x0006C8, "Member 'UGFxCSRewardScreenMenu::ExtraPointText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, HighScoreMatchedText) == 0x0006E0, "Member 'UGFxCSRewardScreenMenu::HighScoreMatchedText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, HighScoreBeatText) == 0x0006F8, "Member 'UGFxCSRewardScreenMenu::HighScoreBeatText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, PioneerText) == 0x000710, "Member 'UGFxCSRewardScreenMenu::PioneerText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, LevelData) == 0x000728, "Member 'UGFxCSRewardScreenMenu::LevelData' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, PlayerCSBucksAmountText) == 0x000730, "Member 'UGFxCSRewardScreenMenu::PlayerCSBucksAmountText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, PuzzleCompletedTextPanel) == 0x000738, "Member 'UGFxCSRewardScreenMenu::PuzzleCompletedTextPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, MainContentPanel) == 0x000740, "Member 'UGFxCSRewardScreenMenu::MainContentPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, ProgressTextPanel) == 0x000748, "Member 'UGFxCSRewardScreenMenu::ProgressTextPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, NumCompletedPuzzleTextPanel) == 0x000750, "Member 'UGFxCSRewardScreenMenu::NumCompletedPuzzleTextPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, NumCompletedPuzzleText) == 0x000758, "Member 'UGFxCSRewardScreenMenu::NumCompletedPuzzleText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, NumTargetPuzzleText) == 0x000760, "Member 'UGFxCSRewardScreenMenu::NumTargetPuzzleText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, ProgressBar) == 0x000768, "Member 'UGFxCSRewardScreenMenu::ProgressBar' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, NewCustomizationAnimText) == 0x000770, "Member 'UGFxCSRewardScreenMenu::NewCustomizationAnimText' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, AnimRewardPanel) == 0x000778, "Member 'UGFxCSRewardScreenMenu::AnimRewardPanel' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, CharacterPicture) == 0x000780, "Member 'UGFxCSRewardScreenMenu::CharacterPicture' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, CustomizationPicture) == 0x000788, "Member 'UGFxCSRewardScreenMenu::CustomizationPicture' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, PuzzleRewardItem) == 0x000790, "Member 'UGFxCSRewardScreenMenu::PuzzleRewardItem' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, TotalPuzzleRewardItem) == 0x000798, "Member 'UGFxCSRewardScreenMenu::TotalPuzzleRewardItem' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, BonusItems) == 0x0007A0, "Member 'UGFxCSRewardScreenMenu::BonusItems' has a wrong offset!");
static_assert(offsetof(UGFxCSRewardScreenMenu, ButtonList) == 0x0007B0, "Member 'UGFxCSRewardScreenMenu::ButtonList' has a wrong offset!");

// Class OakCS.GFxCSStartScreen
// 0x0000 (0x0680 - 0x0680)
class UGFxCSStartScreen final : public UGbxGFxMenu
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSStartScreen">();
	}
	static class UGFxCSStartScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSStartScreen>();
	}
};
static_assert(alignof(UGFxCSStartScreen) == 0x000008, "Wrong alignment on UGFxCSStartScreen");
static_assert(sizeof(UGFxCSStartScreen) == 0x000680, "Wrong size on UGFxCSStartScreen");

// Class OakCS.GFxCSSubtitles
// 0x00B0 (0x0220 - 0x0170)
class UGFxCSSubtitles final : public UGbxGFxObject
{
public:
	float                                         ClosedCaptionLifetime;                             // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxTextScalingForLargestBackground;                // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 SubtitleBackgroundSizeMapping;                     // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x18];                                     // 0x0188(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxTextField*                          SubtitleField;                                     // 0x01A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGbxGFxObject*                          SubtitleBackground;                                // 0x01A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESubtitleLayoutType                           CurrentSubtitleLayoutType;                         // 0x01B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxGFxObject*                          ClosedCaptioningContainer;                         // 0x01B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FClosedCaptionEntry>            ClosedCaptioningLines;                             // 0x01C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FSubtitleLine>                  SubtitleLines;                                     // 0x01D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x8];                                      // 0x01E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CurrentSubtitleID;                                 // 0x01E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStopAfterCurrentSubtitle;                         // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSubtitleChangePending;                            // 0x01F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F2[0x2];                                      // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubtitleLifetime;                                  // 0x01F4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CachedSubtitle;                                    // 0x0200(0x0018)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x8];                                      // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSSubtitles">();
	}
	static class UGFxCSSubtitles* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSSubtitles>();
	}
};
static_assert(alignof(UGFxCSSubtitles) == 0x000008, "Wrong alignment on UGFxCSSubtitles");
static_assert(sizeof(UGFxCSSubtitles) == 0x000220, "Wrong size on UGFxCSSubtitles");
static_assert(offsetof(UGFxCSSubtitles, ClosedCaptionLifetime) == 0x000170, "Member 'UGFxCSSubtitles::ClosedCaptionLifetime' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, MaxTextScalingForLargestBackground) == 0x000174, "Member 'UGFxCSSubtitles::MaxTextScalingForLargestBackground' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, SubtitleBackgroundSizeMapping) == 0x000178, "Member 'UGFxCSSubtitles::SubtitleBackgroundSizeMapping' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, SubtitleField) == 0x0001A0, "Member 'UGFxCSSubtitles::SubtitleField' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, SubtitleBackground) == 0x0001A8, "Member 'UGFxCSSubtitles::SubtitleBackground' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, CurrentSubtitleLayoutType) == 0x0001B0, "Member 'UGFxCSSubtitles::CurrentSubtitleLayoutType' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, ClosedCaptioningContainer) == 0x0001B8, "Member 'UGFxCSSubtitles::ClosedCaptioningContainer' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, ClosedCaptioningLines) == 0x0001C0, "Member 'UGFxCSSubtitles::ClosedCaptioningLines' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, SubtitleLines) == 0x0001D0, "Member 'UGFxCSSubtitles::SubtitleLines' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, CurrentSubtitleID) == 0x0001E8, "Member 'UGFxCSSubtitles::CurrentSubtitleID' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, bStopAfterCurrentSubtitle) == 0x0001F0, "Member 'UGFxCSSubtitles::bStopAfterCurrentSubtitle' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, bSubtitleChangePending) == 0x0001F1, "Member 'UGFxCSSubtitles::bSubtitleChangePending' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, SubtitleLifetime) == 0x0001F4, "Member 'UGFxCSSubtitles::SubtitleLifetime' has a wrong offset!");
static_assert(offsetof(UGFxCSSubtitles, CachedSubtitle) == 0x000200, "Member 'UGFxCSSubtitles::CachedSubtitle' has a wrong offset!");

// Class OakCS.GFxCSWhatsThisMenu
// 0x0080 (0x0720 - 0x06A0)
class UGFxCSWhatsThisMenu final : public UGFxCSSubMenu
{
public:
	class UGbxLevelSequence*                      MovieSequencer;                                    // 0x06A0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MediaMaterial;                                     // 0x06A8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialName;                                      // 0x06B0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FadeName;                                          // 0x06B8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParticleSystemName;                                // 0x06C0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ScreenParticle;                                    // 0x06C8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleDepth;                                     // 0x06D0(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x06D4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StartAudioSetupForMovieEvent;                      // 0x06D8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StopAudioSetupForMovieEvent;                       // 0x06E0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScreenParticleManagerComponent*        ScreenParticleManagerComponent;                    // 0x06E8(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequencePlayer*                   MovieSequencePlayer;                               // 0x06F0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    MovieSequenceActor;                                // 0x06F8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_700[0x20];                                     // 0x0700(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMovieEndReached() const;
	void OnMovieMediaOpened() const;
	void OnMovieMediaOpenFailed(const class FString& FailedUrl) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFxCSWhatsThisMenu">();
	}
	static class UGFxCSWhatsThisMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFxCSWhatsThisMenu>();
	}
};
static_assert(alignof(UGFxCSWhatsThisMenu) == 0x000008, "Wrong alignment on UGFxCSWhatsThisMenu");
static_assert(sizeof(UGFxCSWhatsThisMenu) == 0x000720, "Wrong size on UGFxCSWhatsThisMenu");
static_assert(offsetof(UGFxCSWhatsThisMenu, MovieSequencer) == 0x0006A0, "Member 'UGFxCSWhatsThisMenu::MovieSequencer' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, MediaMaterial) == 0x0006A8, "Member 'UGFxCSWhatsThisMenu::MediaMaterial' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, MaterialName) == 0x0006B0, "Member 'UGFxCSWhatsThisMenu::MaterialName' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, FadeName) == 0x0006B8, "Member 'UGFxCSWhatsThisMenu::FadeName' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, ParticleSystemName) == 0x0006C0, "Member 'UGFxCSWhatsThisMenu::ParticleSystemName' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, ScreenParticle) == 0x0006C8, "Member 'UGFxCSWhatsThisMenu::ScreenParticle' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, ParticleDepth) == 0x0006D0, "Member 'UGFxCSWhatsThisMenu::ParticleDepth' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, FadeTime) == 0x0006D4, "Member 'UGFxCSWhatsThisMenu::FadeTime' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, StartAudioSetupForMovieEvent) == 0x0006D8, "Member 'UGFxCSWhatsThisMenu::StartAudioSetupForMovieEvent' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, StopAudioSetupForMovieEvent) == 0x0006E0, "Member 'UGFxCSWhatsThisMenu::StopAudioSetupForMovieEvent' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, ScreenParticleManagerComponent) == 0x0006E8, "Member 'UGFxCSWhatsThisMenu::ScreenParticleManagerComponent' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, MovieSequencePlayer) == 0x0006F0, "Member 'UGFxCSWhatsThisMenu::MovieSequencePlayer' has a wrong offset!");
static_assert(offsetof(UGFxCSWhatsThisMenu, MovieSequenceActor) == 0x0006F8, "Member 'UGFxCSWhatsThisMenu::MovieSequenceActor' has a wrong offset!");

// Class OakCS.TutorialPuzzle
// 0x0040 (0x0068 - 0x0028)
class UTutorialPuzzle final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PuzzleLines;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PuzzleGuides;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTokens;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringMatchingTile;                               // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoringPerfectAlignment;                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringParScore;                                   // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringBestScore;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWorld* GetTutorialWorld();
	void OnTutorialEnd();
	void OnTutorialStart();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TutorialPuzzle">();
	}
	static class UTutorialPuzzle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialPuzzle>();
	}
};
static_assert(alignof(UTutorialPuzzle) == 0x000008, "Wrong alignment on UTutorialPuzzle");
static_assert(sizeof(UTutorialPuzzle) == 0x000068, "Wrong size on UTutorialPuzzle");
static_assert(offsetof(UTutorialPuzzle, PuzzleLines) == 0x000030, "Member 'UTutorialPuzzle::PuzzleLines' has a wrong offset!");
static_assert(offsetof(UTutorialPuzzle, PuzzleGuides) == 0x000040, "Member 'UTutorialPuzzle::PuzzleGuides' has a wrong offset!");
static_assert(offsetof(UTutorialPuzzle, NumberOfTokens) == 0x000050, "Member 'UTutorialPuzzle::NumberOfTokens' has a wrong offset!");
static_assert(offsetof(UTutorialPuzzle, ScoringMatchingTile) == 0x000054, "Member 'UTutorialPuzzle::ScoringMatchingTile' has a wrong offset!");
static_assert(offsetof(UTutorialPuzzle, ScoringPerfectAlignment) == 0x000058, "Member 'UTutorialPuzzle::ScoringPerfectAlignment' has a wrong offset!");
static_assert(offsetof(UTutorialPuzzle, ScoringParScore) == 0x00005C, "Member 'UTutorialPuzzle::ScoringParScore' has a wrong offset!");
static_assert(offsetof(UTutorialPuzzle, ScoringBestScore) == 0x000060, "Member 'UTutorialPuzzle::ScoringBestScore' has a wrong offset!");

// Class OakCS.CSGlobals
// 0x01C0 (0x01F0 - 0x0030)
class UCSGlobals final : public UGbxDataAsset
{
public:
	class UInventoryCategoryData*                 CSBucksInventoryType;                              // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UOakCustomizationData*>          SkinRewards;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UOakCustomizationData*>          HeadRewards;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         HighScoreMatchedModifier;                          // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighScoreBeatenModifier;                           // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugPuzzle>                   DebugPuzzles;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UTutorialPuzzle>>    TutorialPuzzle;                                    // 0x0070(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCSLevelData*                           LevelData;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoosterData*                           BoosterData;                                       // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ShiftAccountRequiredTitle;                         // 0x0090(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ShiftAccountRequiredText;                          // 0x00A8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SubmitPuzzleErrorTitle;                            // 0x00C0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SubmitPuzzleErrorText;                             // 0x00D8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GetPuzzleErrorTitle;                               // 0x00F0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GetPuzzleErrorText;                                // 0x0108(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   BuyBoosterMessageTitle;                            // 0x0120(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   BuyBoosterMessageText;                             // 0x0138(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   OverrideBoosterMessageTitle;                       // 0x0150(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   OverrideBoosterMessageText;                        // 0x0168(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   QuitPuzzleMessageTitle;                            // 0x0180(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   QuitPuzzleMessageBody;                             // 0x0198(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   QuickPassMessageTitle;                             // 0x01B0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   QuickPassMessageText;                              // 0x01C8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           DidYouKnowMessages;                                // 0x01E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSGlobals">();
	}
	static class UCSGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCSGlobals>();
	}
};
static_assert(alignof(UCSGlobals) == 0x000008, "Wrong alignment on UCSGlobals");
static_assert(sizeof(UCSGlobals) == 0x0001F0, "Wrong size on UCSGlobals");
static_assert(offsetof(UCSGlobals, CSBucksInventoryType) == 0x000030, "Member 'UCSGlobals::CSBucksInventoryType' has a wrong offset!");
static_assert(offsetof(UCSGlobals, SkinRewards) == 0x000038, "Member 'UCSGlobals::SkinRewards' has a wrong offset!");
static_assert(offsetof(UCSGlobals, HeadRewards) == 0x000048, "Member 'UCSGlobals::HeadRewards' has a wrong offset!");
static_assert(offsetof(UCSGlobals, HighScoreMatchedModifier) == 0x000058, "Member 'UCSGlobals::HighScoreMatchedModifier' has a wrong offset!");
static_assert(offsetof(UCSGlobals, HighScoreBeatenModifier) == 0x00005C, "Member 'UCSGlobals::HighScoreBeatenModifier' has a wrong offset!");
static_assert(offsetof(UCSGlobals, DebugPuzzles) == 0x000060, "Member 'UCSGlobals::DebugPuzzles' has a wrong offset!");
static_assert(offsetof(UCSGlobals, TutorialPuzzle) == 0x000070, "Member 'UCSGlobals::TutorialPuzzle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, LevelData) == 0x000080, "Member 'UCSGlobals::LevelData' has a wrong offset!");
static_assert(offsetof(UCSGlobals, BoosterData) == 0x000088, "Member 'UCSGlobals::BoosterData' has a wrong offset!");
static_assert(offsetof(UCSGlobals, ShiftAccountRequiredTitle) == 0x000090, "Member 'UCSGlobals::ShiftAccountRequiredTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, ShiftAccountRequiredText) == 0x0000A8, "Member 'UCSGlobals::ShiftAccountRequiredText' has a wrong offset!");
static_assert(offsetof(UCSGlobals, SubmitPuzzleErrorTitle) == 0x0000C0, "Member 'UCSGlobals::SubmitPuzzleErrorTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, SubmitPuzzleErrorText) == 0x0000D8, "Member 'UCSGlobals::SubmitPuzzleErrorText' has a wrong offset!");
static_assert(offsetof(UCSGlobals, GetPuzzleErrorTitle) == 0x0000F0, "Member 'UCSGlobals::GetPuzzleErrorTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, GetPuzzleErrorText) == 0x000108, "Member 'UCSGlobals::GetPuzzleErrorText' has a wrong offset!");
static_assert(offsetof(UCSGlobals, BuyBoosterMessageTitle) == 0x000120, "Member 'UCSGlobals::BuyBoosterMessageTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, BuyBoosterMessageText) == 0x000138, "Member 'UCSGlobals::BuyBoosterMessageText' has a wrong offset!");
static_assert(offsetof(UCSGlobals, OverrideBoosterMessageTitle) == 0x000150, "Member 'UCSGlobals::OverrideBoosterMessageTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, OverrideBoosterMessageText) == 0x000168, "Member 'UCSGlobals::OverrideBoosterMessageText' has a wrong offset!");
static_assert(offsetof(UCSGlobals, QuitPuzzleMessageTitle) == 0x000180, "Member 'UCSGlobals::QuitPuzzleMessageTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, QuitPuzzleMessageBody) == 0x000198, "Member 'UCSGlobals::QuitPuzzleMessageBody' has a wrong offset!");
static_assert(offsetof(UCSGlobals, QuickPassMessageTitle) == 0x0001B0, "Member 'UCSGlobals::QuickPassMessageTitle' has a wrong offset!");
static_assert(offsetof(UCSGlobals, QuickPassMessageText) == 0x0001C8, "Member 'UCSGlobals::QuickPassMessageText' has a wrong offset!");
static_assert(offsetof(UCSGlobals, DidYouKnowMessages) == 0x0001E0, "Member 'UCSGlobals::DidYouKnowMessages' has a wrong offset!");

}

