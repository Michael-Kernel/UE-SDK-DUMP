#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_Trooper

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_Trooper_BackpackState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Enum_Trooper_FlashState_structs.hpp"
#include "BPChar_Enemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPChar_Trooper.BPChar_Trooper_C
// 0x00D0 (0x2460 - 0x2390)
#pragma pack(push, 0x1)
class alignas(0x10) ABPChar_Trooper_C : public ABPChar_Enemy_C
{
public:
	uint8                                         Pad_2381[0x7];                                     // 0x2381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BPChar_Trooper_C;                   // 0x2388(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               PS_Trooper_Backpack_Damaged;                       // 0x2390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              BackpackDamageFX;                                  // 0x2398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   BackpackAudio;                                     // 0x23A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIShieldSpawningComponent_C*           AIShieldSpawningComponent;                         // 0x23A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              ShieldSpawnerSwitch;                               // 0x23B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFoleyMainComponent*                    FoleyMain;                                         // 0x23B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   DefaultAudioComponent;                             // 0x23C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIMeleeSpawningComponent_C*            AIMeleeSpawningComponent;                          // 0x23C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIExplosiveSpawningComponent_C*        AIExplosiveSpawningComponent;                      // 0x23D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCoverUserComponent*                    CoverUser;                                         // 0x23D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelOfMinShieldChance;                            // 0x23E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelOfMaxShieldChance;                            // 0x23E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxShieldChance;                                   // 0x23E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastHitDirection;                                  // 0x23EC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BackpackKiller;                                    // 0x23F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FlashDeathType;                                    // 0x2400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FlashDeathLocalHitDirection;                       // 0x2404(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BackpackMalfunctionAction;                         // 0x2410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCopyElementalTypeFromGun;                         // 0x2418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bRandomizeElementalType;                           // 0x2419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	EOakElementalType                             ElementalType;                                     // 0x241A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_241B[0x5];                                     // 0x241B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AIGroup;                                           // 0x2420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class UParticleSystem*                        BackpackExplodeFX;                                 // 0x2430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          DownedPlayer;                                      // 0x2438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPhaselocked;                                     // 0x2440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_Trooper_FlashState                       DashCE;                                            // 0x2441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2442[0x6];                                     // 0x2442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   BackpackDeathImmunityTags;                         // 0x2448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BPChar_Trooper(int32 EntryPoint);
	void Enemy_OnPhaseLockStop();
	void Enemy_OnPhaseLockStart();
	void Died();
	void Revived(const struct FGameResourcePoolReference& ResourcePool);
	void Player_HealthDepleted(class AOakCharacter* Character);
	void Trooper_SetLaserSightEnabled(bool Enabled);
	void Trooper_SetFlashTrailActive(bool Enable, bool UseAudio);
	void BackpackDamaged(const struct FDamageReactionEventSummary& Summary);
	void BndEvt__DamageComponent_K2Node_ComponentBoundEvent_4_DamageCompDiedDelegate__DelegateSignature_BPChar_Trooper(class AActor* DamageReceiver, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void HT_InformIntentToHeal(class AActor* HealingSource);
	void HT_EndReceiveHealing(class AActor* HealingSource);
	void HT_BeginReceiveHealing(class AActor* HealingSource);
	void Trooper_TriggerDetonateBackpack(bool BigExplosion);
	void Trooper_TriggerMeleeDeath();
	void Trooper_TriggerMedicDeath();
	void Trooper_TriggerJetpackDeath();
	void Trooper_TriggerFlashDeath(int32 SpeedAtImpact, const struct FVector& LocalHitDirection);
	void BackpackDestroyed(const struct FDamageReactionEventSummary& Summary);
	void Trooper_CalloutJetpackDeath();
	void Trooper_CalloutFlashDeath();
	void Trooper_ReactToJetpackDeath(class AActor* DyingActor);
	void Trooper_ReactToFlashDeath(class AActor* DyingActor);
	void DisableShieldSpawner();
	void AIShield_Drop(bool RequestNewShield);
	void Trooper_JetpackLand();
	void Trooper_JetpackLaunch();
	void Trooper_Callout_NeedShield();
	void Trooper_RequestCoverFire(class AActor* OtherActor);
	void Trooper_SetHealBeamActive(class AActor* TargetAlly, bool Enable);
	void Trooper_SetBackpackState(Enum_Trooper_BackpackState State);
	void Trooper_SetMeleeTrailActive(bool Enabled);
	void Trooper_Callout_MovingInOpen();
	void Nog_BuffDrone_SpecialBuff_Ended();
	void Nog_BuffDrone_SpecialBuff_Began();
	void Nog_BuffDrone_Detached(class AActor* BuffDrone);
	void Nog_BuffDrone_Attached(class AActor* BuffDrone);
	void UserConstructionScript();
	void MaybeRemoveShields();
	void SetRunTrailActive(bool Enable, bool UseAudio);
	void SetVisualsByElement(EOakElementalType ElementalType_0, bool Disable);
	void DetonateBackpack(bool BigExplosion);
	void Nog_BuffDrone_GetAttachSocket(class FName* Socket, struct FTransform* SocketTransform, class USceneComponent** SocketComponent);
	void Trooper_GetTeleportDirection(struct FVector* Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_Trooper_C">();
	}
	static class ABPChar_Trooper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_Trooper_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABPChar_Trooper_C) == 0x000010, "Wrong alignment on ABPChar_Trooper_C");
static_assert(sizeof(ABPChar_Trooper_C) == 0x002460, "Wrong size on ABPChar_Trooper_C");
static_assert(offsetof(ABPChar_Trooper_C, UberGraphFrame_BPChar_Trooper_C) == 0x002388, "Member 'ABPChar_Trooper_C::UberGraphFrame_BPChar_Trooper_C' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, PS_Trooper_Backpack_Damaged) == 0x002390, "Member 'ABPChar_Trooper_C::PS_Trooper_Backpack_Damaged' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, BackpackDamageFX) == 0x002398, "Member 'ABPChar_Trooper_C::BackpackDamageFX' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, BackpackAudio) == 0x0023A0, "Member 'ABPChar_Trooper_C::BackpackAudio' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, AIShieldSpawningComponent) == 0x0023A8, "Member 'ABPChar_Trooper_C::AIShieldSpawningComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, ShieldSpawnerSwitch) == 0x0023B0, "Member 'ABPChar_Trooper_C::ShieldSpawnerSwitch' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, FoleyMain) == 0x0023B8, "Member 'ABPChar_Trooper_C::FoleyMain' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, DefaultAudioComponent) == 0x0023C0, "Member 'ABPChar_Trooper_C::DefaultAudioComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, AIMeleeSpawningComponent) == 0x0023C8, "Member 'ABPChar_Trooper_C::AIMeleeSpawningComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, AIExplosiveSpawningComponent) == 0x0023D0, "Member 'ABPChar_Trooper_C::AIExplosiveSpawningComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, CoverUser) == 0x0023D8, "Member 'ABPChar_Trooper_C::CoverUser' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, LevelOfMinShieldChance) == 0x0023E0, "Member 'ABPChar_Trooper_C::LevelOfMinShieldChance' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, LevelOfMaxShieldChance) == 0x0023E4, "Member 'ABPChar_Trooper_C::LevelOfMaxShieldChance' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, MaxShieldChance) == 0x0023E8, "Member 'ABPChar_Trooper_C::MaxShieldChance' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, LastHitDirection) == 0x0023EC, "Member 'ABPChar_Trooper_C::LastHitDirection' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, BackpackKiller) == 0x0023F8, "Member 'ABPChar_Trooper_C::BackpackKiller' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, FlashDeathType) == 0x002400, "Member 'ABPChar_Trooper_C::FlashDeathType' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, FlashDeathLocalHitDirection) == 0x002404, "Member 'ABPChar_Trooper_C::FlashDeathLocalHitDirection' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, BackpackMalfunctionAction) == 0x002410, "Member 'ABPChar_Trooper_C::BackpackMalfunctionAction' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, bCopyElementalTypeFromGun) == 0x002418, "Member 'ABPChar_Trooper_C::bCopyElementalTypeFromGun' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, bRandomizeElementalType) == 0x002419, "Member 'ABPChar_Trooper_C::bRandomizeElementalType' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, ElementalType) == 0x00241A, "Member 'ABPChar_Trooper_C::ElementalType' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, AIGroup) == 0x002420, "Member 'ABPChar_Trooper_C::AIGroup' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, BackpackExplodeFX) == 0x002430, "Member 'ABPChar_Trooper_C::BackpackExplodeFX' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, DownedPlayer) == 0x002438, "Member 'ABPChar_Trooper_C::DownedPlayer' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, IsPhaselocked) == 0x002440, "Member 'ABPChar_Trooper_C::IsPhaselocked' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, DashCE) == 0x002441, "Member 'ABPChar_Trooper_C::DashCE' has a wrong offset!");
static_assert(offsetof(ABPChar_Trooper_C, BackpackDeathImmunityTags) == 0x002448, "Member 'ABPChar_Trooper_C::BackpackDeathImmunityTags' has a wrong offset!");

}

