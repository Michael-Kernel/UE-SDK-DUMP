#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IO_Door_Parent

#include "Basic.hpp"

#include "WwiseAudio_structs.hpp"
#include "Enum_IO_DoorControlType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_States_DoorLocked_structs.hpp"
#include "GbxMission_structs.hpp"
#include "Enum_IO_DoorSpeed_structs.hpp"
#include "Enum_Door_State_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_States_DoorPositions_structs.hpp"
#include "Enum_Door_ReasonForTimeline_structs.hpp"
#include "Enum_Door_UseFeedback_structs.hpp"
#include "OakGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass IO_Door_Parent.IO_Door_Parent_C
// 0x0248 (0x0798 - 0x0550)
class AIO_Door_Parent_C : public AInteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(Transient, DuplicateTransient)
	class UUsableComponent*                       Usable;                                            // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxNavMeshPainterComponent*            GbxNavMeshPainter_Frame_;                          // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TouchCollision;                                    // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxNavMeshPainterComponent*            GbxNavMeshPainter_Door_;                           // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          StartOpen;                                         // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartLocked;                                       // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartNonInteractive;                               // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_583[0x5];                                      // 0x0583(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   On_DoorLocked;                                     // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_DoorUnlocked;                                   // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_DoorOpened;                                     // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_DoorClosed;                                     // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 LastPlayerToUseTheDoor;                            // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   On_DoorOpening;                                    // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_DoorClosing;                                    // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_DoorUsed;                                       // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsLocked;                                          // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_Door_State                               Enum_GetDoorState;                                 // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleActivation;                                  // 0x0602(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ListenForTouchEvents;                              // 0x0603(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_IO_DoorSpeed                             MovementSpeed;                                     // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_IO_DoorControlType                       ControlType;                                       // 0x0605(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggeredOnlyByPlayers;                            // 0x0606(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_607[0x1];                                      // 0x0607(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 MeshComponentArray;                                // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                   NewVar_0;                                          // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DynamicMaterialArray;                              // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Playrate_Slow;                                     // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Playrate_Medium;                                   // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Playrate_Fast;                                     // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRateMultiplier;                                // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWwiseAudioComponent*>           AudioComponentArray;                               // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UWwiseEvent*                            Event_OpeningStart;                                // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_OpeningStop;                                 // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_ClosingStart;                                // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_ClosingStop;                                 // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_Opened;                                      // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_Closed;                                      // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_Lock;                                        // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_Unlock;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_LockedUse;                                   // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_Interactive;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Event_NonInteractive;                              // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 OpeningPlayback;                                   // 0x06A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWwisePlaybackInstance                 ClosingPlayback;                                   // 0x06C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFeedbackData*                          Feedback_ControllerAndCamera;                      // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   On_DoorLockedUsed;                                 // 0x06E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	Enum_States_DoorPositions                     PreviewDoorPosition;                               // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_States_DoorLocked                        PreviewDoorFeedback;                               // 0x06F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_States_DoorPositions                     DoorPositionState;                                 // 0x06F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_States_DoorLocked                        DoorFeedbackState;                                 // 0x06F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionEventReference                 MissionEventToSendOnUse;                           // 0x06F8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          MissionDriven;                                     // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_709[0x3];                                      // 0x0709(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color_Feedback_Locked;                             // 0x070C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Feedback_Unlocked;                           // 0x071C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Feedback_NoFeedback;                         // 0x072C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_GoalColor;                                   // 0x073C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Door_ReasonForTimeline                   CurrentReasonForDoorMovement;                      // 0x074C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Door_UseFeedback                         UseFeedback;                                       // 0x074D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74E[0x2];                                      // 0x074E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionEventReference                 MissionEventToSendOnOpened;                        // 0x0750(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FMissionEventReference                 MissionEventToSendOnClosed;                        // 0x0760(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          AllowDoorScaling;                                  // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           OverlapCheckTimer;                                 // 0x0778(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UGbxCondition*                          Cond_DoorPositionState_NewEnumerator2;             // 0x0780(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_DoorFeedbackState_NewEnumerator0;             // 0x0788(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_DoorFeedbackState_NewEnumerator2;             // 0x0790(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void GetDoorFeedbackState(Enum_States_DoorLocked* FeedbackState);
	void GetDoorInteractiveState(bool* Interactive);
	void GetDoorLockedState(bool* Locked);
	void GetDoorState(Enum_Door_State* DoorState);
	void Audio_Play_LockedUse();
	void Audio_Stop_Closing();
	void Audio_Play_Closing();
	void Audio_Stop_Opening();
	void Audio_Play_Opening();
	void EvaluateDoorTrigger();
	void StopControllerAndCameraFeedback();
	void StartControllerAndCameraFeedback();
	void UserConstructionScript();
	void PlayLockedClosedTimeline();
	void FinishedPlayingLockedTimeline();
	void PlayLockedOpenTimeline();
	void BndEvt__TouchCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature_BP_IO_Door_Parent_2(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__TouchCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature_BP_IO_Door_Parent_2(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void PlayDoorMovement(Enum_Door_ReasonForTimeline Reason);
	void DoorMovementFinished();
	void ReceiveBeginPlay();
	void SetDoorState(Enum_Door_State DoorState);
	void SetDoorLockedState(bool Locked_);
	void SetDoorInteractiveState(bool Interactive_);
	void SetLightColor(const struct FLinearColor& Color);
	void Preview_Unlocked();
	void Preview_Locked();
	void Preview_NoFeedback();
	void SetDoorTriggerable(bool Triggerable);
	void __UserState_DoorFeedbackState_1(bool bFromLoad);
	void __UserState_DoorFeedbackState_0(bool bFromLoad);
	void __UserState_DoorFeedbackState_2(bool bFromLoad);
	void Door_Feedback_JustOpened();
	void Door_Feedback_JustClosed();
	void Door_Feedback_ClosedFromLoad();
	void Door_Feedback_OpenedFromLoad();
	void PrepPlayDoorMovement(Enum_Door_ReasonForTimeline Reason);
	void Door_Feedback_LockedUseOpen();
	void Door_Feedback_LockedUseClosed();
	void PlayLockedUse();
	void Preview_Closed();
	void Preview_Open();
	void __UserState_DoorPositionState_1(bool bFromLoad);
	void __UserState_DoorPositionState_0(bool bFromLoad);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_5_UsableUsedSignature__DelegateSignature_IO_Door_Parent(const struct FUseEvent& UseEvent);
	void SetDoorFeedbackState(Enum_States_DoorLocked FeedbackState);
	void Test();
	void ExecuteUbergraph_IO_Door_Parent(int32 EntryPoint);
	void On_DoorLockedUsed__DelegateSignature(class AController* UserController);
	void On_DoorUsed__DelegateSignature(class AController* UserController);
	void On_DoorClosing__DelegateSignature();
	void On_DoorOpening__DelegateSignature();
	void On_DoorClosed__DelegateSignature();
	void On_DoorOpened__DelegateSignature();
	void On_DoorUnlocked__DelegateSignature();
	void On_DoorLocked__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IO_Door_Parent_C">();
	}
	static class AIO_Door_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIO_Door_Parent_C>();
	}
};
static_assert(alignof(AIO_Door_Parent_C) == 0x000008, "Wrong alignment on AIO_Door_Parent_C");
static_assert(sizeof(AIO_Door_Parent_C) == 0x000798, "Wrong size on AIO_Door_Parent_C");
static_assert(offsetof(AIO_Door_Parent_C, UberGraphFrame) == 0x000550, "Member 'AIO_Door_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Usable) == 0x000558, "Member 'AIO_Door_Parent_C::Usable' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, GbxNavMeshPainter_Frame_) == 0x000560, "Member 'AIO_Door_Parent_C::GbxNavMeshPainter_Frame_' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, TouchCollision) == 0x000568, "Member 'AIO_Door_Parent_C::TouchCollision' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, GbxNavMeshPainter_Door_) == 0x000570, "Member 'AIO_Door_Parent_C::GbxNavMeshPainter_Door_' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, DefaultSceneRoot) == 0x000578, "Member 'AIO_Door_Parent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, StartOpen) == 0x000580, "Member 'AIO_Door_Parent_C::StartOpen' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, StartLocked) == 0x000581, "Member 'AIO_Door_Parent_C::StartLocked' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, StartNonInteractive) == 0x000582, "Member 'AIO_Door_Parent_C::StartNonInteractive' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorLocked) == 0x000588, "Member 'AIO_Door_Parent_C::On_DoorLocked' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorUnlocked) == 0x000598, "Member 'AIO_Door_Parent_C::On_DoorUnlocked' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorOpened) == 0x0005A8, "Member 'AIO_Door_Parent_C::On_DoorOpened' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorClosed) == 0x0005B8, "Member 'AIO_Door_Parent_C::On_DoorClosed' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, LastPlayerToUseTheDoor) == 0x0005C8, "Member 'AIO_Door_Parent_C::LastPlayerToUseTheDoor' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorOpening) == 0x0005D0, "Member 'AIO_Door_Parent_C::On_DoorOpening' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorClosing) == 0x0005E0, "Member 'AIO_Door_Parent_C::On_DoorClosing' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorUsed) == 0x0005F0, "Member 'AIO_Door_Parent_C::On_DoorUsed' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, IsLocked) == 0x000600, "Member 'AIO_Door_Parent_C::IsLocked' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Enum_GetDoorState) == 0x000601, "Member 'AIO_Door_Parent_C::Enum_GetDoorState' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, SingleActivation) == 0x000602, "Member 'AIO_Door_Parent_C::SingleActivation' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, ListenForTouchEvents) == 0x000603, "Member 'AIO_Door_Parent_C::ListenForTouchEvents' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, MovementSpeed) == 0x000604, "Member 'AIO_Door_Parent_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, ControlType) == 0x000605, "Member 'AIO_Door_Parent_C::ControlType' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, TriggeredOnlyByPlayers) == 0x000606, "Member 'AIO_Door_Parent_C::TriggeredOnlyByPlayers' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, MeshComponentArray) == 0x000608, "Member 'AIO_Door_Parent_C::MeshComponentArray' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, NewVar_0) == 0x000618, "Member 'AIO_Door_Parent_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, DynamicMaterialArray) == 0x000620, "Member 'AIO_Door_Parent_C::DynamicMaterialArray' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Playrate_Slow) == 0x000630, "Member 'AIO_Door_Parent_C::Playrate_Slow' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Playrate_Medium) == 0x000634, "Member 'AIO_Door_Parent_C::Playrate_Medium' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Playrate_Fast) == 0x000638, "Member 'AIO_Door_Parent_C::Playrate_Fast' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, PlayRateMultiplier) == 0x00063C, "Member 'AIO_Door_Parent_C::PlayRateMultiplier' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, AudioComponentArray) == 0x000640, "Member 'AIO_Door_Parent_C::AudioComponentArray' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_OpeningStart) == 0x000650, "Member 'AIO_Door_Parent_C::Event_OpeningStart' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_OpeningStop) == 0x000658, "Member 'AIO_Door_Parent_C::Event_OpeningStop' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_ClosingStart) == 0x000660, "Member 'AIO_Door_Parent_C::Event_ClosingStart' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_ClosingStop) == 0x000668, "Member 'AIO_Door_Parent_C::Event_ClosingStop' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_Opened) == 0x000670, "Member 'AIO_Door_Parent_C::Event_Opened' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_Closed) == 0x000678, "Member 'AIO_Door_Parent_C::Event_Closed' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_Lock) == 0x000680, "Member 'AIO_Door_Parent_C::Event_Lock' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_Unlock) == 0x000688, "Member 'AIO_Door_Parent_C::Event_Unlock' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_LockedUse) == 0x000690, "Member 'AIO_Door_Parent_C::Event_LockedUse' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_Interactive) == 0x000698, "Member 'AIO_Door_Parent_C::Event_Interactive' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Event_NonInteractive) == 0x0006A0, "Member 'AIO_Door_Parent_C::Event_NonInteractive' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, OpeningPlayback) == 0x0006A8, "Member 'AIO_Door_Parent_C::OpeningPlayback' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, ClosingPlayback) == 0x0006C0, "Member 'AIO_Door_Parent_C::ClosingPlayback' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Feedback_ControllerAndCamera) == 0x0006D8, "Member 'AIO_Door_Parent_C::Feedback_ControllerAndCamera' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, On_DoorLockedUsed) == 0x0006E0, "Member 'AIO_Door_Parent_C::On_DoorLockedUsed' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, PreviewDoorPosition) == 0x0006F0, "Member 'AIO_Door_Parent_C::PreviewDoorPosition' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, PreviewDoorFeedback) == 0x0006F1, "Member 'AIO_Door_Parent_C::PreviewDoorFeedback' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, DoorPositionState) == 0x0006F2, "Member 'AIO_Door_Parent_C::DoorPositionState' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, DoorFeedbackState) == 0x0006F3, "Member 'AIO_Door_Parent_C::DoorFeedbackState' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, MissionEventToSendOnUse) == 0x0006F8, "Member 'AIO_Door_Parent_C::MissionEventToSendOnUse' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, MissionDriven) == 0x000708, "Member 'AIO_Door_Parent_C::MissionDriven' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Color_Feedback_Locked) == 0x00070C, "Member 'AIO_Door_Parent_C::Color_Feedback_Locked' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Color_Feedback_Unlocked) == 0x00071C, "Member 'AIO_Door_Parent_C::Color_Feedback_Unlocked' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Color_Feedback_NoFeedback) == 0x00072C, "Member 'AIO_Door_Parent_C::Color_Feedback_NoFeedback' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Color_GoalColor) == 0x00073C, "Member 'AIO_Door_Parent_C::Color_GoalColor' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, CurrentReasonForDoorMovement) == 0x00074C, "Member 'AIO_Door_Parent_C::CurrentReasonForDoorMovement' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, UseFeedback) == 0x00074D, "Member 'AIO_Door_Parent_C::UseFeedback' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, MissionEventToSendOnOpened) == 0x000750, "Member 'AIO_Door_Parent_C::MissionEventToSendOnOpened' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, MissionEventToSendOnClosed) == 0x000760, "Member 'AIO_Door_Parent_C::MissionEventToSendOnClosed' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, AllowDoorScaling) == 0x000770, "Member 'AIO_Door_Parent_C::AllowDoorScaling' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, OverlapCheckTimer) == 0x000778, "Member 'AIO_Door_Parent_C::OverlapCheckTimer' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Cond_DoorPositionState_NewEnumerator2) == 0x000780, "Member 'AIO_Door_Parent_C::Cond_DoorPositionState_NewEnumerator2' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Cond_DoorFeedbackState_NewEnumerator0) == 0x000788, "Member 'AIO_Door_Parent_C::Cond_DoorFeedbackState_NewEnumerator0' has a wrong offset!");
static_assert(offsetof(AIO_Door_Parent_C, Cond_DoorFeedbackState_NewEnumerator2) == 0x000790, "Member 'AIO_Door_Parent_C::Cond_DoorFeedbackState_NewEnumerator2' has a wrong offset!");

}

