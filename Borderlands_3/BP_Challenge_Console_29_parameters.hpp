#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Challenge_Console_29

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.ExecuteUbergraph_BP_Challenge_Console_29
// 0x0040 (0x0040 - 0x0000)
struct BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChallengesComponent*                   K2Node_Event_OwningChallenges;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          K2Node_Event_AssociatedCharacter;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* EquippedActor, class UInventorySlotData* SlotData)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29) == 0x000008, "Wrong alignment on BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29");
static_assert(sizeof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29) == 0x000040, "Wrong size on BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, EntryPoint) == 0x000000, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, K2Node_Event_OwningChallenges) == 0x000008, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::K2Node_Event_OwningChallenges' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, K2Node_Event_AssociatedCharacter) == 0x000010, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::K2Node_Event_AssociatedCharacter' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000030, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_Challenge_Console_29_C_ExecuteUbergraph_BP_Challenge_Console_29::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.OnInitChallengeInstance
// 0x0010 (0x0010 - 0x0000)
struct BP_Challenge_Console_29_C_OnInitChallengeInstance final
{
public:
	class UChallengesComponent*                   OwningChallenges;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          AssociatedCharacter;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Challenge_Console_29_C_OnInitChallengeInstance) == 0x000008, "Wrong alignment on BP_Challenge_Console_29_C_OnInitChallengeInstance");
static_assert(sizeof(BP_Challenge_Console_29_C_OnInitChallengeInstance) == 0x000010, "Wrong size on BP_Challenge_Console_29_C_OnInitChallengeInstance");
static_assert(offsetof(BP_Challenge_Console_29_C_OnInitChallengeInstance, OwningChallenges) == 0x000000, "Member 'BP_Challenge_Console_29_C_OnInitChallengeInstance::OwningChallenges' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_OnInitChallengeInstance, AssociatedCharacter) == 0x000008, "Member 'BP_Challenge_Console_29_C_OnInitChallengeInstance::AssociatedCharacter' has a wrong offset!");

// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.CheckInvSlotRarity
// 0x0038 (0x0038 - 0x0000)
struct BP_Challenge_Console_29_C_CheckInvSlotRarity final
{
public:
	class UInventorySlotData*                     InvSlot;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRare;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetEquippedInventoryForSlot_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBalanceStateComponent*        CallFunc_GetInventoryBalanceState_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryRarityData*                   CallFunc_GetInventoryRarityData_ReturnValue;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Challenge_Console_29_C_CheckInvSlotRarity) == 0x000008, "Wrong alignment on BP_Challenge_Console_29_C_CheckInvSlotRarity");
static_assert(sizeof(BP_Challenge_Console_29_C_CheckInvSlotRarity) == 0x000038, "Wrong size on BP_Challenge_Console_29_C_CheckInvSlotRarity");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, InvSlot) == 0x000000, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::InvSlot' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, IsRare) == 0x000008, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::IsRare' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_GetEquippedInventoryForSlot_ReturnValue) == 0x000010, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_GetEquippedInventoryForSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_GetInventoryBalanceState_ReturnValue) == 0x000020, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_GetInventoryBalanceState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_GetInventoryRarityData_ReturnValue) == 0x000028, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_GetInventoryRarityData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000030, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x000031, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckInvSlotRarity, CallFunc_BooleanOR_ReturnValue) == 0x000032, "Member 'BP_Challenge_Console_29_C_CheckInvSlotRarity::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Challenge_Console_29.BP_Challenge_Console_29_C.CheckAllSlots
// 0x0030 (0x0030 - 0x0000)
struct BP_Challenge_Console_29_C_CheckAllSlots final
{
public:
	class AActor*                                 EquippedActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventorySlotData*                     SlotData;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventorySlotData*                     CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckInvSlotRarity_isRare;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Challenge_Console_29_C_CheckAllSlots) == 0x000008, "Wrong alignment on BP_Challenge_Console_29_C_CheckAllSlots");
static_assert(sizeof(BP_Challenge_Console_29_C_CheckAllSlots) == 0x000030, "Wrong size on BP_Challenge_Console_29_C_CheckAllSlots");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, EquippedActor) == 0x000000, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::EquippedActor' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, SlotData) == 0x000008, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::SlotData' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, CallFunc_CheckInvSlotRarity_isRare) == 0x000029, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::CallFunc_CheckInvSlotRarity_isRare' has a wrong offset!");
static_assert(offsetof(BP_Challenge_Console_29_C_CheckAllSlots, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'BP_Challenge_Console_29_C_CheckAllSlots::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

