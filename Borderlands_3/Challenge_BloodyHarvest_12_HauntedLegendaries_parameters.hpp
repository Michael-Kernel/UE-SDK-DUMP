#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_BloodyHarvest_12_HauntedLegendaries

#include "Basic.hpp"


namespace SDK::Params
{

// Function Challenge_BloodyHarvest_12_HauntedLegendaries.Challenge_BloodyHarvest_12_HauntedLegendaries_C.ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries
// 0x0048 (0x0048 - 0x0000)
struct Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChallengesComponent*                   K2Node_Event_OwningChallenges;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          K2Node_Event_AssociatedCharacter;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* EquippedActor, class UInventorySlotData* SlotData)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class AGbxPlayerController*             K2Node_Event_CompletedPlayer;                      // 0x0040(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries) == 0x000008, "Wrong alignment on Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries");
static_assert(sizeof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries) == 0x000048, "Wrong size on Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, EntryPoint) == 0x000000, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, K2Node_Event_OwningChallenges) == 0x000008, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::K2Node_Event_OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, K2Node_Event_AssociatedCharacter) == 0x000010, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::K2Node_Event_AssociatedCharacter' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000030, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries, K2Node_Event_CompletedPlayer) == 0x000040, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_ExecuteUbergraph_Challenge_BloodyHarvest_12_HauntedLegendaries::K2Node_Event_CompletedPlayer' has a wrong offset!");

// Function Challenge_BloodyHarvest_12_HauntedLegendaries.Challenge_BloodyHarvest_12_HauntedLegendaries_C.CompletedChallenge
// 0x0008 (0x0008 - 0x0000)
struct Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge final
{
public:
	const class AGbxPlayerController*             CompletedPlayer;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge) == 0x000008, "Wrong alignment on Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge");
static_assert(sizeof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge) == 0x000008, "Wrong size on Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge, CompletedPlayer) == 0x000000, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CompletedChallenge::CompletedPlayer' has a wrong offset!");

// Function Challenge_BloodyHarvest_12_HauntedLegendaries.Challenge_BloodyHarvest_12_HauntedLegendaries_C.OnInitChallengeInstance
// 0x0010 (0x0010 - 0x0000)
struct Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance final
{
public:
	class UChallengesComponent*                   OwningChallenges;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          AssociatedCharacter;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance) == 0x000008, "Wrong alignment on Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance");
static_assert(sizeof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance) == 0x000010, "Wrong size on Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance, OwningChallenges) == 0x000000, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance::OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance, AssociatedCharacter) == 0x000008, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_OnInitChallengeInstance::AssociatedCharacter' has a wrong offset!");

// Function Challenge_BloodyHarvest_12_HauntedLegendaries.Challenge_BloodyHarvest_12_HauntedLegendaries_C.CheckAllSlots
// 0x0048 (0x0048 - 0x0000)
struct Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots final
{
public:
	class AActor*                                 Equipped_Actor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventorySlotData*                     Slot_Data;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BloodyHarvestGear;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventorySlotData*                     CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInvSlotFromLeague_IsBHAnointedGear;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots) == 0x000008, "Wrong alignment on Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots");
static_assert(sizeof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots) == 0x000048, "Wrong size on Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, Equipped_Actor) == 0x000000, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::Equipped_Actor' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, Slot_Data) == 0x000008, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::Slot_Data' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, BloodyHarvestGear) == 0x000010, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::BloodyHarvestGear' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, Temp_int_Variable) == 0x000020, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_Add_IntInt_ReturnValue1) == 0x000028, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_Array_Contains_ReturnValue) == 0x00002C, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_Array_Get_Item) == 0x000030, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_CheckInvSlotFromLeague_IsBHAnointedGear) == 0x000038, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_CheckInvSlotFromLeague_IsBHAnointedGear' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckAllSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Challenge_BloodyHarvest_12_HauntedLegendaries.Challenge_BloodyHarvest_12_HauntedLegendaries_C.CheckInvSlotFromLeague
// 0x0030 (0x0030 - 0x0000)
struct Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague final
{
public:
	class UInventorySlotData*                     InventorySlot;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBHAnointedGear;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetEquippedInventoryForSlot_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBalanceStateComponent*        CallFunc_GetInventoryBalanceState_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventoryFromLeague_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague) == 0x000008, "Wrong alignment on Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague");
static_assert(sizeof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague) == 0x000030, "Wrong size on Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague, InventorySlot) == 0x000000, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague::InventorySlot' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague, IsBHAnointedGear) == 0x000008, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague::IsBHAnointedGear' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague, CallFunc_GetEquippedInventoryForSlot_ReturnValue) == 0x000010, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague::CallFunc_GetEquippedInventoryForSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague, CallFunc_GetInventoryBalanceState_ReturnValue) == 0x000020, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague::CallFunc_GetInventoryBalanceState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague, CallFunc_IsInventoryFromLeague_ReturnValue) == 0x000028, "Member 'Challenge_BloodyHarvest_12_HauntedLegendaries_C_CheckInvSlotFromLeague::CallFunc_IsInventoryFromLeague_ReturnValue' has a wrong offset!");

}

