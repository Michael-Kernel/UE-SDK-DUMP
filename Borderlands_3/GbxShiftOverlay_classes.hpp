#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxShiftOverlay

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GbxShiftOverlay.GbxShiftOverlay
// 0x0140 (0x0168 - 0x0028)
class UGbxShiftOverlay final : public UObject
{
public:
	uint8                                         Pad_28[0x140];                                     // 0x0028(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxShiftOverlay">();
	}
	static class UGbxShiftOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxShiftOverlay>();
	}
};
static_assert(alignof(UGbxShiftOverlay) == 0x000008, "Wrong alignment on UGbxShiftOverlay");
static_assert(sizeof(UGbxShiftOverlay) == 0x000168, "Wrong size on UGbxShiftOverlay");

// Class GbxShiftOverlay.GbxShiftSaveGameInterface
// 0x0000 (0x0028 - 0x0028)
class IGbxShiftSaveGameInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxShiftSaveGameInterface">();
	}
	static class IGbxShiftSaveGameInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxShiftSaveGameInterface>();
	}
};
static_assert(alignof(IGbxShiftSaveGameInterface) == 0x000008, "Wrong alignment on IGbxShiftSaveGameInterface");
static_assert(sizeof(IGbxShiftSaveGameInterface) == 0x000028, "Wrong size on IGbxShiftSaveGameInterface");

// Class GbxShiftOverlay.GbxShiftOverlaySettings
// 0x0028 (0x0050 - 0x0028)
class UGbxShiftOverlaySettings final : public UObject
{
public:
	int32                                         ZOrder;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBlockOnMapLoad;                               // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBlockOnMovie;                                 // 0x002D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBlockOnCinematic;                             // 0x002E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBlockOnAppFocus;                              // 0x002F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotificationPadding;                               // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotificationSizeX;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotificationSizeY;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlayVirtualResX;                                // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlayVirtualResY;                                // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputModeThreshold_Cursor;                         // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputModeThreshold_Analog;                         // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxShiftOverlaySettings">();
	}
	static class UGbxShiftOverlaySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxShiftOverlaySettings>();
	}
};
static_assert(alignof(UGbxShiftOverlaySettings) == 0x000008, "Wrong alignment on UGbxShiftOverlaySettings");
static_assert(sizeof(UGbxShiftOverlaySettings) == 0x000050, "Wrong size on UGbxShiftOverlaySettings");
static_assert(offsetof(UGbxShiftOverlaySettings, ZOrder) == 0x000028, "Member 'UGbxShiftOverlaySettings::ZOrder' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, bAutoBlockOnMapLoad) == 0x00002C, "Member 'UGbxShiftOverlaySettings::bAutoBlockOnMapLoad' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, bAutoBlockOnMovie) == 0x00002D, "Member 'UGbxShiftOverlaySettings::bAutoBlockOnMovie' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, bAutoBlockOnCinematic) == 0x00002E, "Member 'UGbxShiftOverlaySettings::bAutoBlockOnCinematic' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, bAutoBlockOnAppFocus) == 0x00002F, "Member 'UGbxShiftOverlaySettings::bAutoBlockOnAppFocus' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, NotificationPadding) == 0x000030, "Member 'UGbxShiftOverlaySettings::NotificationPadding' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, NotificationSizeX) == 0x000034, "Member 'UGbxShiftOverlaySettings::NotificationSizeX' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, NotificationSizeY) == 0x000038, "Member 'UGbxShiftOverlaySettings::NotificationSizeY' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, OverlayVirtualResX) == 0x00003C, "Member 'UGbxShiftOverlaySettings::OverlayVirtualResX' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, OverlayVirtualResY) == 0x000040, "Member 'UGbxShiftOverlaySettings::OverlayVirtualResY' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, InputModeThreshold_Cursor) == 0x000044, "Member 'UGbxShiftOverlaySettings::InputModeThreshold_Cursor' has a wrong offset!");
static_assert(offsetof(UGbxShiftOverlaySettings, InputModeThreshold_Analog) == 0x000048, "Member 'UGbxShiftOverlaySettings::InputModeThreshold_Analog' has a wrong offset!");

}

