#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TritonRuntime

#include "Basic.hpp"

#include "TritonRuntime_classes.hpp"
#include "TritonRuntime_parameters.hpp"


namespace SDK
{

// Function TritonRuntime.TritonAcousticDataComponent.AuditProbeLocations
// (Final, Native, Public)

void UTritonAcousticDataComponent::AuditProbeLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TritonAcousticDataComponent", "AuditProbeLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TritonRuntime.TritonAcousticDataComponent.BuildFallbackAcousticData
// (Final, Native, Public)

void UTritonAcousticDataComponent::BuildFallbackAcousticData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TritonAcousticDataComponent", "BuildFallbackAcousticData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TritonRuntime.TritonAcousticDataComponent.RefreshCachedVoxelData
// (Final, Native, Public)

void UTritonAcousticDataComponent::RefreshCachedVoxelData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TritonAcousticDataComponent", "RefreshCachedVoxelData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TritonRuntime.TritonAcousticDataComponent.UpdateProbeLocations
// (Final, Native, Public)

void UTritonAcousticDataComponent::UpdateProbeLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TritonAcousticDataComponent", "UpdateProbeLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TritonRuntime.TritonAcousticDataComponent.VisualizeMaterials
// (Final, Native, Public)

void UTritonAcousticDataComponent::VisualizeMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TritonAcousticDataComponent", "VisualizeMaterials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TritonRuntime.TritonProbeLocationProvider.FindProbeLocations
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FBoxSphereBounds                 WorldBoxSphere                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UAudioOcclusionVoxelDataProvider* GeoVoxels                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioOcclusionVoxelDataProvider* NavVoxels                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Out_ResultProbeLocations                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ATritonProbeLocationProvider::FindProbeLocations(const struct FBoxSphereBounds& WorldBoxSphere, const class UAudioOcclusionVoxelDataProvider* GeoVoxels, const class UAudioOcclusionVoxelDataProvider* NavVoxels, TArray<struct FVector>* Out_ResultProbeLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TritonProbeLocationProvider", "FindProbeLocations");

	Params::TritonProbeLocationProvider_FindProbeLocations Parms{};

	Parms.WorldBoxSphere = std::move(WorldBoxSphere);
	Parms.GeoVoxels = GeoVoxels;
	Parms.NavVoxels = NavVoxels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Out_ResultProbeLocations != nullptr)
		*Out_ResultProbeLocations = std::move(Parms.Out_ResultProbeLocations);
}

}

