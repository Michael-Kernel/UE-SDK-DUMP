#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxBlueprintFunctionLibraries

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GbxBlueprintFunctionLibraries_structs.hpp"


namespace SDK::Params
{

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.BroadcastRemoteEvent
// 0x0010 (0x0010 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent) == 0x000008, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent) == 0x000010, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent, WorldContextObject) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent, EventName) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_BroadcastRemoteEvent::EventName' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.EditorLoadAsset
// 0x0030 (0x0030 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset) == 0x000008, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset) == 0x000030, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset, Asset) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset::Asset' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset, ReturnValue) == 0x000028, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_EditorLoadAsset::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.FindClosestActor
// 0x0020 (0x0020 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor final
{
public:
	TArray<int32>                                 ActorArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                RefLocation;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosestActor;                                      // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor) == 0x000008, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor) == 0x000020, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor, ActorArray) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor::ActorArray' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor, RefLocation) == 0x000010, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor::RefLocation' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor, ClosestActor) == 0x00001C, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FindClosestActor::ClosestActor' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.FindClosestPlayerCharacter
// 0x0020 (0x0020 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RefLocation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter) == 0x000008, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter) == 0x000020, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter, WorldContextObject) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter, RefLocation) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter::RefLocation' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter, ReturnValue) == 0x000018, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FindClosestPlayerCharacter::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.FloatDamp
// 0x001C (0x001C - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVelocity;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothDuration;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp) == 0x00001C, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, Current) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::Current' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, Target) == 0x000004, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::Target' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, CurrentVelocity) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, SmoothDuration) == 0x00000C, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::SmoothDuration' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, MaxSpeed) == 0x000010, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::MaxSpeed' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, DeltaTime) == 0x000014, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::DeltaTime' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp, ReturnValue) == 0x000018, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_FloatDamp::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.GbxBlueprintFunctionLibrariesSampleFunction
// 0x0008 (0x0008 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction) == 0x000008, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction, Param) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction::Param' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction, ReturnValue) == 0x000004, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_GbxBlueprintFunctionLibrariesSampleFunction::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.IsInEditorMode
// 0x0001 (0x0001 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode) == 0x000001, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode) == 0x000001, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode, ReturnValue) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_IsInEditorMode::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.IsWithinRangeAndAngle
// 0x0050 (0x0050 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle final
{
public:
	struct FTransform                             Source;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle) == 0x000010, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle) == 0x000050, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle, Source) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle::Source' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle, Target) == 0x000030, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle::Target' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle, Range) == 0x000038, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle::Range' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle, Angle) == 0x00003C, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle::Angle' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle, ReturnValue) == 0x000040, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_IsWithinRangeAndAngle::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.PerlinNoise1D
// 0x0014 (0x0014 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Octaves;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Persistence;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D) == 0x000014, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D, X) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D::X' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D, Octaves) == 0x000004, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D::Octaves' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D, Persistence) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D::Persistence' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D, Amplitude) == 0x00000C, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D::Amplitude' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D, ReturnValue) == 0x000010, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise1D::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.PerlinNoise2D
// 0x0018 (0x0018 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Octaves;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Persistence;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D) == 0x000018, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D, Location) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D::Location' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D, Octaves) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D::Octaves' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D, Persistence) == 0x00000C, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D::Persistence' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D, Amplitude) == 0x000010, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D::Amplitude' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D, ReturnValue) == 0x000014, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_PerlinNoise2D::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.SetForceMipLevelsToBeResidentForMaterialArray
// 0x0020 (0x0020 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray final
{
public:
	TArray<class UMaterialInterface*>             MaterialArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OverrideForceMiplevelsToBeResident;                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMiplevelsToBeResidentValue;                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceDuration;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinematicTextureGroups;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray) == 0x000008, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray) == 0x000020, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray, MaterialArray) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray::MaterialArray' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray, OverrideForceMiplevelsToBeResident) == 0x000010, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray::OverrideForceMiplevelsToBeResident' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray, bForceMiplevelsToBeResidentValue) == 0x000011, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray::bForceMiplevelsToBeResidentValue' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray, ForceDuration) == 0x000014, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray::ForceDuration' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray, CinematicTextureGroups) == 0x000018, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SetForceMipLevelsToBeResidentForMaterialArray::CinematicTextureGroups' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.SimplexNoise1D
// 0x0008 (0x0008 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D final
{
public:
	float                                         Location;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D) == 0x000008, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D, Location) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D::Location' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D, ReturnValue) == 0x000004, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise1D::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.SimplexNoise2D
// 0x000C (0x000C - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D) == 0x00000C, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D, Location) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D::Location' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D, ReturnValue) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise2D::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.SimplexNoise3D
// 0x0010 (0x0010 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D) == 0x000004, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D) == 0x000010, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D, Location) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D::Location' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D, ReturnValue) == 0x00000C, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise3D::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.SimplexNoise4D
// 0x0020 (0x0020 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D final
{
public:
	struct FVector4                               Location;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D) == 0x000010, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D) == 0x000020, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D, Location) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D::Location' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D, ReturnValue) == 0x000010, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SimplexNoise4D::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.GbxBlueprintFunctionLibrariesBPLibrary.SortActorListByDistance
// 0x0018 (0x0018 - 0x0000)
struct GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorList;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance) == 0x000008, "Wrong alignment on GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance");
static_assert(sizeof(GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance) == 0x000018, "Wrong size on GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance, TargetActor) == 0x000000, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance::TargetActor' has a wrong offset!");
static_assert(offsetof(GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance, ActorList) == 0x000008, "Member 'GbxBlueprintFunctionLibrariesBPLibrary_SortActorListByDistance::ActorList' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetBoneName
// 0x0098 (0x0098 - 0x0000)
struct HitResultFunctionLibrary_GetBoneName final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitResultFunctionLibrary_GetBoneName) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetBoneName");
static_assert(sizeof(HitResultFunctionLibrary_GetBoneName) == 0x000098, "Wrong size on HitResultFunctionLibrary_GetBoneName");
static_assert(offsetof(HitResultFunctionLibrary_GetBoneName, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetBoneName::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetBoneName, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetBoneName::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetHitActor
// 0x0098 (0x0098 - 0x0000)
struct HitResultFunctionLibrary_GetHitActor final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitResultFunctionLibrary_GetHitActor) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetHitActor");
static_assert(sizeof(HitResultFunctionLibrary_GetHitActor) == 0x000098, "Wrong size on HitResultFunctionLibrary_GetHitActor");
static_assert(offsetof(HitResultFunctionLibrary_GetHitActor, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetHitActor::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetHitActor, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetHitActor::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetHitComponent
// 0x0098 (0x0098 - 0x0000)
struct HitResultFunctionLibrary_GetHitComponent final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0090(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitResultFunctionLibrary_GetHitComponent) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetHitComponent");
static_assert(sizeof(HitResultFunctionLibrary_GetHitComponent) == 0x000098, "Wrong size on HitResultFunctionLibrary_GetHitComponent");
static_assert(offsetof(HitResultFunctionLibrary_GetHitComponent, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetHitComponent::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetHitComponent, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetHitComponent::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetHitDistance
// 0x0098 (0x0098 - 0x0000)
struct HitResultFunctionLibrary_GetHitDistance final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HitResultFunctionLibrary_GetHitDistance) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetHitDistance");
static_assert(sizeof(HitResultFunctionLibrary_GetHitDistance) == 0x000098, "Wrong size on HitResultFunctionLibrary_GetHitDistance");
static_assert(offsetof(HitResultFunctionLibrary_GetHitDistance, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetHitDistance::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetHitDistance, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetHitDistance::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetHitLocation
// 0x00A0 (0x00A0 - 0x0000)
struct HitResultFunctionLibrary_GetHitLocation final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0090(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HitResultFunctionLibrary_GetHitLocation) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetHitLocation");
static_assert(sizeof(HitResultFunctionLibrary_GetHitLocation) == 0x0000A0, "Wrong size on HitResultFunctionLibrary_GetHitLocation");
static_assert(offsetof(HitResultFunctionLibrary_GetHitLocation, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetHitLocation::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetHitLocation, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetHitLocation::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetHitNormal
// 0x00A0 (0x00A0 - 0x0000)
struct HitResultFunctionLibrary_GetHitNormal final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0090(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HitResultFunctionLibrary_GetHitNormal) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetHitNormal");
static_assert(sizeof(HitResultFunctionLibrary_GetHitNormal) == 0x0000A0, "Wrong size on HitResultFunctionLibrary_GetHitNormal");
static_assert(offsetof(HitResultFunctionLibrary_GetHitNormal, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetHitNormal::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetHitNormal, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetHitNormal::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.GetPhysMaterial
// 0x0098 (0x0098 - 0x0000)
struct HitResultFunctionLibrary_GetPhysMaterial final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitResultFunctionLibrary_GetPhysMaterial) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetPhysMaterial");
static_assert(sizeof(HitResultFunctionLibrary_GetPhysMaterial) == 0x000098, "Wrong size on HitResultFunctionLibrary_GetPhysMaterial");
static_assert(offsetof(HitResultFunctionLibrary_GetPhysMaterial, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_GetPhysMaterial::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetPhysMaterial, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_GetPhysMaterial::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.HitResultFunctionLibrary.IsBlockingHit
// 0x0098 (0x0098 - 0x0000)
struct HitResultFunctionLibrary_IsBlockingHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HitResultFunctionLibrary_IsBlockingHit) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_IsBlockingHit");
static_assert(sizeof(HitResultFunctionLibrary_IsBlockingHit) == 0x000098, "Wrong size on HitResultFunctionLibrary_IsBlockingHit");
static_assert(offsetof(HitResultFunctionLibrary_IsBlockingHit, HitResult) == 0x000000, "Member 'HitResultFunctionLibrary_IsBlockingHit::HitResult' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_IsBlockingHit, ReturnValue) == 0x000090, "Member 'HitResultFunctionLibrary_IsBlockingHit::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.ActorContainsTag
// 0x0018 (0x0018 - 0x0000)
struct TagsFunctionLibrary_ActorContainsTag final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TagsFunctionLibrary_ActorContainsTag) == 0x000008, "Wrong alignment on TagsFunctionLibrary_ActorContainsTag");
static_assert(sizeof(TagsFunctionLibrary_ActorContainsTag) == 0x000018, "Wrong size on TagsFunctionLibrary_ActorContainsTag");
static_assert(offsetof(TagsFunctionLibrary_ActorContainsTag, Target) == 0x000000, "Member 'TagsFunctionLibrary_ActorContainsTag::Target' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_ActorContainsTag, Tag) == 0x000008, "Member 'TagsFunctionLibrary_ActorContainsTag::Tag' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_ActorContainsTag, ReturnValue) == 0x000010, "Member 'TagsFunctionLibrary_ActorContainsTag::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.AddTagToActor
// 0x0010 (0x0010 - 0x0000)
struct TagsFunctionLibrary_AddTagToActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_AddTagToActor) == 0x000008, "Wrong alignment on TagsFunctionLibrary_AddTagToActor");
static_assert(sizeof(TagsFunctionLibrary_AddTagToActor) == 0x000010, "Wrong size on TagsFunctionLibrary_AddTagToActor");
static_assert(offsetof(TagsFunctionLibrary_AddTagToActor, Target) == 0x000000, "Member 'TagsFunctionLibrary_AddTagToActor::Target' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_AddTagToActor, Tag) == 0x000008, "Member 'TagsFunctionLibrary_AddTagToActor::Tag' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.AddTagToComponent
// 0x0010 (0x0010 - 0x0000)
struct TagsFunctionLibrary_AddTagToComponent final
{
public:
	class UActorComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_AddTagToComponent) == 0x000008, "Wrong alignment on TagsFunctionLibrary_AddTagToComponent");
static_assert(sizeof(TagsFunctionLibrary_AddTagToComponent) == 0x000010, "Wrong size on TagsFunctionLibrary_AddTagToComponent");
static_assert(offsetof(TagsFunctionLibrary_AddTagToComponent, Target) == 0x000000, "Member 'TagsFunctionLibrary_AddTagToComponent::Target' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_AddTagToComponent, Tag) == 0x000008, "Member 'TagsFunctionLibrary_AddTagToComponent::Tag' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.CompareActorTags
// 0x0028 (0x0028 - 0x0000)
struct TagsFunctionLibrary_CompareActorTags final
{
public:
	const class AActor*                           FirstActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           SecondActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompareTag                                   Branches;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_CompareActorTags) == 0x000008, "Wrong alignment on TagsFunctionLibrary_CompareActorTags");
static_assert(sizeof(TagsFunctionLibrary_CompareActorTags) == 0x000028, "Wrong size on TagsFunctionLibrary_CompareActorTags");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTags, FirstActor) == 0x000000, "Member 'TagsFunctionLibrary_CompareActorTags::FirstActor' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTags, SecondActor) == 0x000008, "Member 'TagsFunctionLibrary_CompareActorTags::SecondActor' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTags, Branches) == 0x000010, "Member 'TagsFunctionLibrary_CompareActorTags::Branches' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTags, ReturnValue) == 0x000018, "Member 'TagsFunctionLibrary_CompareActorTags::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.CompareActorTagsWithComponent
// 0x0028 (0x0028 - 0x0000)
struct TagsFunctionLibrary_CompareActorTagsWithComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UActorComponent*                  Component;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompareTag                                   Branches;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_CompareActorTagsWithComponent) == 0x000008, "Wrong alignment on TagsFunctionLibrary_CompareActorTagsWithComponent");
static_assert(sizeof(TagsFunctionLibrary_CompareActorTagsWithComponent) == 0x000028, "Wrong size on TagsFunctionLibrary_CompareActorTagsWithComponent");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTagsWithComponent, Actor) == 0x000000, "Member 'TagsFunctionLibrary_CompareActorTagsWithComponent::Actor' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTagsWithComponent, Component) == 0x000008, "Member 'TagsFunctionLibrary_CompareActorTagsWithComponent::Component' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTagsWithComponent, Branches) == 0x000010, "Member 'TagsFunctionLibrary_CompareActorTagsWithComponent::Branches' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareActorTagsWithComponent, ReturnValue) == 0x000018, "Member 'TagsFunctionLibrary_CompareActorTagsWithComponent::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.CompareComponentTags
// 0x0028 (0x0028 - 0x0000)
struct TagsFunctionLibrary_CompareComponentTags final
{
public:
	const class UActorComponent*                  FirstComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UActorComponent*                  SecondComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompareTag                                   Branches;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_CompareComponentTags) == 0x000008, "Wrong alignment on TagsFunctionLibrary_CompareComponentTags");
static_assert(sizeof(TagsFunctionLibrary_CompareComponentTags) == 0x000028, "Wrong size on TagsFunctionLibrary_CompareComponentTags");
static_assert(offsetof(TagsFunctionLibrary_CompareComponentTags, FirstComponent) == 0x000000, "Member 'TagsFunctionLibrary_CompareComponentTags::FirstComponent' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareComponentTags, SecondComponent) == 0x000008, "Member 'TagsFunctionLibrary_CompareComponentTags::SecondComponent' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareComponentTags, Branches) == 0x000010, "Member 'TagsFunctionLibrary_CompareComponentTags::Branches' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_CompareComponentTags, ReturnValue) == 0x000018, "Member 'TagsFunctionLibrary_CompareComponentTags::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.ComponentContainsTag
// 0x0018 (0x0018 - 0x0000)
struct TagsFunctionLibrary_ComponentContainsTag final
{
public:
	const class UActorComponent*                  Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TagsFunctionLibrary_ComponentContainsTag) == 0x000008, "Wrong alignment on TagsFunctionLibrary_ComponentContainsTag");
static_assert(sizeof(TagsFunctionLibrary_ComponentContainsTag) == 0x000018, "Wrong size on TagsFunctionLibrary_ComponentContainsTag");
static_assert(offsetof(TagsFunctionLibrary_ComponentContainsTag, Target) == 0x000000, "Member 'TagsFunctionLibrary_ComponentContainsTag::Target' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_ComponentContainsTag, Tag) == 0x000008, "Member 'TagsFunctionLibrary_ComponentContainsTag::Tag' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_ComponentContainsTag, ReturnValue) == 0x000010, "Member 'TagsFunctionLibrary_ComponentContainsTag::ReturnValue' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.RemoveTagFromActor
// 0x0010 (0x0010 - 0x0000)
struct TagsFunctionLibrary_RemoveTagFromActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_RemoveTagFromActor) == 0x000008, "Wrong alignment on TagsFunctionLibrary_RemoveTagFromActor");
static_assert(sizeof(TagsFunctionLibrary_RemoveTagFromActor) == 0x000010, "Wrong size on TagsFunctionLibrary_RemoveTagFromActor");
static_assert(offsetof(TagsFunctionLibrary_RemoveTagFromActor, Target) == 0x000000, "Member 'TagsFunctionLibrary_RemoveTagFromActor::Target' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_RemoveTagFromActor, Tag) == 0x000008, "Member 'TagsFunctionLibrary_RemoveTagFromActor::Tag' has a wrong offset!");

// Function GbxBlueprintFunctionLibraries.TagsFunctionLibrary.RemoveTagFromComponent
// 0x0010 (0x0010 - 0x0000)
struct TagsFunctionLibrary_RemoveTagFromComponent final
{
public:
	class UActorComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagsFunctionLibrary_RemoveTagFromComponent) == 0x000008, "Wrong alignment on TagsFunctionLibrary_RemoveTagFromComponent");
static_assert(sizeof(TagsFunctionLibrary_RemoveTagFromComponent) == 0x000010, "Wrong size on TagsFunctionLibrary_RemoveTagFromComponent");
static_assert(offsetof(TagsFunctionLibrary_RemoveTagFromComponent, Target) == 0x000000, "Member 'TagsFunctionLibrary_RemoveTagFromComponent::Target' has a wrong offset!");
static_assert(offsetof(TagsFunctionLibrary_RemoveTagFromComponent, Tag) == 0x000008, "Member 'TagsFunctionLibrary_RemoveTagFromComponent::Tag' has a wrong offset!");

}

