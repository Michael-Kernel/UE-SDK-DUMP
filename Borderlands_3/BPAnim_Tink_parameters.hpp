#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPAnim_Tink

#include "Basic.hpp"

#include "TinkVariations_structs.hpp"


namespace SDK::Params
{

// Function BPAnim_Tink.BPAnim_Tink_C.ExecuteUbergraph_BPAnim_Tink
// 0x0088 (0x0088 - 0x0000)
struct BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimSeqBaseFromAnimSet_bIsValid;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetAnimSeqBaseFromAnimSet_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable1;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable3;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable4;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable5;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable6;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable7;                               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETinkVariations                               Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                K2Node_Event_NewWeapon;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                K2Node_Event_PrevWeapon;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue1;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue2;         // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue3;         // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue4;         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink) == 0x000008, "Wrong alignment on BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink");
static_assert(sizeof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink) == 0x000088, "Wrong size on BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, EntryPoint) == 0x000000, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_GetAnimSeqBaseFromAnimSet_bIsValid) == 0x000004, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_GetAnimSeqBaseFromAnimSet_bIsValid' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_GetAnimSeqBaseFromAnimSet_ReturnValue) == 0x000008, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_GetAnimSeqBaseFromAnimSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_Not_PreBool_ReturnValue1) == 0x000011, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_Not_PreBool_ReturnValue2) == 0x000012, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable) == 0x000018, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000020, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_Not_PreBool_ReturnValue3) == 0x000024, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable1) == 0x000028, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable1' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable2) == 0x000030, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable3) == 0x000038, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable4) == 0x000040, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable4' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable5) == 0x000048, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable5' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable6) == 0x000050, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable6' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_name_Variable7) == 0x000058, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_name_Variable7' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, Temp_byte_Variable) == 0x000060, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, K2Node_Select_Default) == 0x000068, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, K2Node_Event_NewWeapon) == 0x000070, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::K2Node_Event_NewWeapon' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, K2Node_Event_PrevWeapon) == 0x000078, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::K2Node_Event_PrevWeapon' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000080, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_EqualEqual_NameName_ReturnValue1) == 0x000081, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_EqualEqual_NameName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_EqualEqual_NameName_ReturnValue2) == 0x000082, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_EqualEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_EqualEqual_NameName_ReturnValue3) == 0x000083, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_EqualEqual_NameName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_EqualEqual_NameName_ReturnValue4) == 0x000084, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_EqualEqual_NameName_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink, CallFunc_GetValidValue_ReturnValue) == 0x000085, "Member 'BPAnim_Tink_C_ExecuteUbergraph_BPAnim_Tink::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function BPAnim_Tink.BPAnim_Tink_C.OnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct BPAnim_Tink_C_OnWeaponChanged final
{
public:
	class AWeapon*                                NewWeapon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                PrevWeapon;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPAnim_Tink_C_OnWeaponChanged) == 0x000008, "Wrong alignment on BPAnim_Tink_C_OnWeaponChanged");
static_assert(sizeof(BPAnim_Tink_C_OnWeaponChanged) == 0x000010, "Wrong size on BPAnim_Tink_C_OnWeaponChanged");
static_assert(offsetof(BPAnim_Tink_C_OnWeaponChanged, NewWeapon) == 0x000000, "Member 'BPAnim_Tink_C_OnWeaponChanged::NewWeapon' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_OnWeaponChanged, PrevWeapon) == 0x000008, "Member 'BPAnim_Tink_C_OnWeaponChanged::PrevWeapon' has a wrong offset!");

// Function BPAnim_Tink.BPAnim_Tink_C.CalculateWeaponHoldData
// 0x0078 (0x0078 - 0x0000)
struct BPAnim_Tink_C_CalculateWeaponHoldData final
{
public:
	class AWeapon*                                NewWeapon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                PrevWeapon;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UManufacturerData*                      Manufacturer;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForeGripType;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GripType;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakWeapon*                             K2Node_DynamicCast_AsOak_Weapon;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue2;     // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue3;     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue4;     // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue5;     // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue1;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakInventoryBalanceStateComponent*     CallFunc_GetComponentByClass_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UManufacturerData*                      CallFunc_GetManufacturer_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue6;     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue7;     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue8;     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue9;     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue10;    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue11;    // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue12;    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue13;    // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue14;    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item2;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPAnim_Tink_C_CalculateWeaponHoldData) == 0x000008, "Wrong alignment on BPAnim_Tink_C_CalculateWeaponHoldData");
static_assert(sizeof(BPAnim_Tink_C_CalculateWeaponHoldData) == 0x000078, "Wrong size on BPAnim_Tink_C_CalculateWeaponHoldData");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, NewWeapon) == 0x000000, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::NewWeapon' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, PrevWeapon) == 0x000008, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::PrevWeapon' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, Manufacturer) == 0x000010, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::Manufacturer' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, ForeGripType) == 0x000018, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::ForeGripType' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, GripType) == 0x00001C, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::GripType' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, K2Node_DynamicCast_AsOak_Weapon) == 0x000020, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::K2Node_DynamicCast_AsOak_Weapon' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000029, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x00002A, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue2) == 0x00002B, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue3) == 0x00002C, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue4) == 0x00002D, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue5) == 0x00002E, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000030, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_Conv_ByteToInt_ReturnValue1) == 0x000034, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_Conv_ByteToInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_GetComponentByClass_ReturnValue) == 0x000040, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_GetManufacturer_ReturnValue) == 0x000048, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_GetManufacturer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue6) == 0x000050, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue7) == 0x000051, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue8) == 0x000052, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue9) == 0x000053, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue10) == 0x000054, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue11) == 0x000055, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue12) == 0x000056, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue13) == 0x000057, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_EqualEqual_ObjectObject_ReturnValue14) == 0x000058, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_EqualEqual_ObjectObject_ReturnValue14' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_Array_Get_Item) == 0x000060, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_Array_Get_Item1) == 0x000068, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BPAnim_Tink_C_CalculateWeaponHoldData, CallFunc_Array_Get_Item2) == 0x000070, "Member 'BPAnim_Tink_C_CalculateWeaponHoldData::CallFunc_Array_Get_Item2' has a wrong offset!");

}

