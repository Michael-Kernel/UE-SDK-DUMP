#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxMission

#include "Basic.hpp"

#include "GbxMission_structs.hpp"
#include "GbxUI_structs.hpp"


namespace SDK::Params
{

// Function GbxMission.MissionDirectorComponent.AddMission
// 0x0008 (0x0008 - 0x0000)
struct MissionDirectorComponent_AddMission final
{
public:
	TSubclassOf<class UMission>                   InMission;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDirectorComponent_AddMission) == 0x000008, "Wrong alignment on MissionDirectorComponent_AddMission");
static_assert(sizeof(MissionDirectorComponent_AddMission) == 0x000008, "Wrong size on MissionDirectorComponent_AddMission");
static_assert(offsetof(MissionDirectorComponent_AddMission, InMission) == 0x000000, "Member 'MissionDirectorComponent_AddMission::InMission' has a wrong offset!");

// Function GbxMission.MissionDirectorComponent.GetAllMissions
// 0x0010 (0x0010 - 0x0000)
struct MissionDirectorComponent_GetAllMissions final
{
public:
	TArray<TSubclassOf<class UMission>>           AllMissions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDirectorComponent_GetAllMissions) == 0x000008, "Wrong alignment on MissionDirectorComponent_GetAllMissions");
static_assert(sizeof(MissionDirectorComponent_GetAllMissions) == 0x000010, "Wrong size on MissionDirectorComponent_GetAllMissions");
static_assert(offsetof(MissionDirectorComponent_GetAllMissions, AllMissions) == 0x000000, "Member 'MissionDirectorComponent_GetAllMissions::AllMissions' has a wrong offset!");

// Function GbxMission.MissionDirectorComponent.IsAnyMissionActive
// 0x0001 (0x0001 - 0x0000)
struct MissionDirectorComponent_IsAnyMissionActive final
{
public:
	EMissionActiveResult                          OutResult;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDirectorComponent_IsAnyMissionActive) == 0x000001, "Wrong alignment on MissionDirectorComponent_IsAnyMissionActive");
static_assert(sizeof(MissionDirectorComponent_IsAnyMissionActive) == 0x000001, "Wrong size on MissionDirectorComponent_IsAnyMissionActive");
static_assert(offsetof(MissionDirectorComponent_IsAnyMissionActive, OutResult) == 0x000000, "Member 'MissionDirectorComponent_IsAnyMissionActive::OutResult' has a wrong offset!");

// Function GbxMission.MissionDirectorComponent.IsAnyMissionAvailable
// 0x0001 (0x0001 - 0x0000)
struct MissionDirectorComponent_IsAnyMissionAvailable final
{
public:
	EMissionAvailableResult                       OutResult;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDirectorComponent_IsAnyMissionAvailable) == 0x000001, "Wrong alignment on MissionDirectorComponent_IsAnyMissionAvailable");
static_assert(sizeof(MissionDirectorComponent_IsAnyMissionAvailable) == 0x000001, "Wrong size on MissionDirectorComponent_IsAnyMissionAvailable");
static_assert(offsetof(MissionDirectorComponent_IsAnyMissionAvailable, OutResult) == 0x000000, "Member 'MissionDirectorComponent_IsAnyMissionAvailable::OutResult' has a wrong offset!");

// Function GbxMission.Mission.ActivateMission
// 0x0010 (0x0010 - 0x0000)
struct Mission_ActivateMission final
{
public:
	class UMissionObjectiveSet*                   InitialObjectiveSet;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAsTrackedMission;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_ActivateMission) == 0x000008, "Wrong alignment on Mission_ActivateMission");
static_assert(sizeof(Mission_ActivateMission) == 0x000010, "Wrong size on Mission_ActivateMission");
static_assert(offsetof(Mission_ActivateMission, InitialObjectiveSet) == 0x000000, "Member 'Mission_ActivateMission::InitialObjectiveSet' has a wrong offset!");
static_assert(offsetof(Mission_ActivateMission, bSetAsTrackedMission) == 0x000008, "Member 'Mission_ActivateMission::bSetAsTrackedMission' has a wrong offset!");

// Function GbxMission.Mission.AddTimeToMission
// 0x0004 (0x0004 - 0x0000)
struct Mission_AddTimeToMission final
{
public:
	int32                                         SecondsToAdd;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_AddTimeToMission) == 0x000004, "Wrong alignment on Mission_AddTimeToMission");
static_assert(sizeof(Mission_AddTimeToMission) == 0x000004, "Wrong size on Mission_AddTimeToMission");
static_assert(offsetof(Mission_AddTimeToMission, SecondsToAdd) == 0x000000, "Member 'Mission_AddTimeToMission::SecondsToAdd' has a wrong offset!");

// Function GbxMission.Mission.AdvanceObjectiveSet
// 0x0008 (0x0008 - 0x0000)
struct Mission_AdvanceObjectiveSet final
{
public:
	class UMissionObjectiveSet*                   ObjectiveSet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_AdvanceObjectiveSet) == 0x000008, "Wrong alignment on Mission_AdvanceObjectiveSet");
static_assert(sizeof(Mission_AdvanceObjectiveSet) == 0x000008, "Wrong size on Mission_AdvanceObjectiveSet");
static_assert(offsetof(Mission_AdvanceObjectiveSet, ObjectiveSet) == 0x000000, "Member 'Mission_AdvanceObjectiveSet::ObjectiveSet' has a wrong offset!");

// Function GbxMission.Mission.ClearObjective
// 0x0008 (0x0008 - 0x0000)
struct Mission_ClearObjective final
{
public:
	class UMissionObjective*                      Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_ClearObjective) == 0x000008, "Wrong alignment on Mission_ClearObjective");
static_assert(sizeof(Mission_ClearObjective) == 0x000008, "Wrong size on Mission_ClearObjective");
static_assert(offsetof(Mission_ClearObjective, Objective) == 0x000000, "Member 'Mission_ClearObjective::Objective' has a wrong offset!");

// Function GbxMission.Mission.GetMissionRemainingSeconds
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetMissionRemainingSeconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetMissionRemainingSeconds) == 0x000004, "Wrong alignment on Mission_GetMissionRemainingSeconds");
static_assert(sizeof(Mission_GetMissionRemainingSeconds) == 0x000004, "Wrong size on Mission_GetMissionRemainingSeconds");
static_assert(offsetof(Mission_GetMissionRemainingSeconds, ReturnValue) == 0x000000, "Member 'Mission_GetMissionRemainingSeconds::ReturnValue' has a wrong offset!");

// Function GbxMission.Mission.JumpToObjectiveSet
// 0x0010 (0x0010 - 0x0000)
struct Mission_JumpToObjectiveSet final
{
public:
	class UMissionObjectiveSet*                   ObjectiveSet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBranchingMission;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_JumpToObjectiveSet) == 0x000008, "Wrong alignment on Mission_JumpToObjectiveSet");
static_assert(sizeof(Mission_JumpToObjectiveSet) == 0x000010, "Wrong size on Mission_JumpToObjectiveSet");
static_assert(offsetof(Mission_JumpToObjectiveSet, ObjectiveSet) == 0x000000, "Member 'Mission_JumpToObjectiveSet::ObjectiveSet' has a wrong offset!");
static_assert(offsetof(Mission_JumpToObjectiveSet, bIsBranchingMission) == 0x000008, "Member 'Mission_JumpToObjectiveSet::bIsBranchingMission' has a wrong offset!");

// Function GbxMission.Mission.MissionGameModeEvent
// 0x0010 (0x0010 - 0x0000)
struct Mission_MissionGameModeEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_MissionGameModeEvent) == 0x000004, "Wrong alignment on Mission_MissionGameModeEvent");
static_assert(sizeof(Mission_MissionGameModeEvent) == 0x000010, "Wrong size on Mission_MissionGameModeEvent");
static_assert(offsetof(Mission_MissionGameModeEvent, EventName) == 0x000000, "Member 'Mission_MissionGameModeEvent::EventName' has a wrong offset!");
static_assert(offsetof(Mission_MissionGameModeEvent, ReturnValue) == 0x000008, "Member 'Mission_MissionGameModeEvent::ReturnValue' has a wrong offset!");

// Function GbxMission.Mission.MissionRemoteEvent
// 0x0010 (0x0010 - 0x0000)
struct Mission_MissionRemoteEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_MissionRemoteEvent) == 0x000004, "Wrong alignment on Mission_MissionRemoteEvent");
static_assert(sizeof(Mission_MissionRemoteEvent) == 0x000010, "Wrong size on Mission_MissionRemoteEvent");
static_assert(offsetof(Mission_MissionRemoteEvent, EventName) == 0x000000, "Member 'Mission_MissionRemoteEvent::EventName' has a wrong offset!");
static_assert(offsetof(Mission_MissionRemoteEvent, ReturnValue) == 0x000008, "Member 'Mission_MissionRemoteEvent::ReturnValue' has a wrong offset!");

// Function GbxMission.Mission.ThwartObjectiveAndAdvanceObjectiveSet
// 0x0018 (0x0018 - 0x0000)
struct Mission_ThwartObjectiveAndAdvanceObjectiveSet final
{
public:
	class UMissionObjective*                      ObjectiveToThwart;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjectiveSet*                   ObjectiveSet;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpToSet;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_ThwartObjectiveAndAdvanceObjectiveSet) == 0x000008, "Wrong alignment on Mission_ThwartObjectiveAndAdvanceObjectiveSet");
static_assert(sizeof(Mission_ThwartObjectiveAndAdvanceObjectiveSet) == 0x000018, "Wrong size on Mission_ThwartObjectiveAndAdvanceObjectiveSet");
static_assert(offsetof(Mission_ThwartObjectiveAndAdvanceObjectiveSet, ObjectiveToThwart) == 0x000000, "Member 'Mission_ThwartObjectiveAndAdvanceObjectiveSet::ObjectiveToThwart' has a wrong offset!");
static_assert(offsetof(Mission_ThwartObjectiveAndAdvanceObjectiveSet, ObjectiveSet) == 0x000008, "Member 'Mission_ThwartObjectiveAndAdvanceObjectiveSet::ObjectiveSet' has a wrong offset!");
static_assert(offsetof(Mission_ThwartObjectiveAndAdvanceObjectiveSet, bJumpToSet) == 0x000010, "Member 'Mission_ThwartObjectiveAndAdvanceObjectiveSet::bJumpToSet' has a wrong offset!");

// Function GbxMission.Mission.UnpauseObjectiveChain
// 0x0008 (0x0008 - 0x0000)
struct Mission_UnpauseObjectiveChain final
{
public:
	class UMissionObjective*                      Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_UnpauseObjectiveChain) == 0x000008, "Wrong alignment on Mission_UnpauseObjectiveChain");
static_assert(sizeof(Mission_UnpauseObjectiveChain) == 0x000008, "Wrong size on Mission_UnpauseObjectiveChain");
static_assert(offsetof(Mission_UnpauseObjectiveChain, Objective) == 0x000000, "Member 'Mission_UnpauseObjectiveChain::Objective' has a wrong offset!");

// Function GbxMission.Mission.UpdateObjective
// 0x0018 (0x0018 - 0x0000)
struct Mission_UpdateObjective final
{
public:
	class UMissionObjective*                      Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amount;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mission_UpdateObjective) == 0x000008, "Wrong alignment on Mission_UpdateObjective");
static_assert(sizeof(Mission_UpdateObjective) == 0x000018, "Wrong size on Mission_UpdateObjective");
static_assert(offsetof(Mission_UpdateObjective, Objective) == 0x000000, "Member 'Mission_UpdateObjective::Objective' has a wrong offset!");
static_assert(offsetof(Mission_UpdateObjective, Context) == 0x000008, "Member 'Mission_UpdateObjective::Context' has a wrong offset!");
static_assert(offsetof(Mission_UpdateObjective, Amount) == 0x000010, "Member 'Mission_UpdateObjective::Amount' has a wrong offset!");

// Function GbxMission.Mission.GetObjectiveSetsList
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetObjectiveSetsList final
{
public:
	TArray<class UMissionObjectiveSet*>           ObjectiveSetsList;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetObjectiveSetsList) == 0x000008, "Wrong alignment on Mission_GetObjectiveSetsList");
static_assert(sizeof(Mission_GetObjectiveSetsList) == 0x000010, "Wrong size on Mission_GetObjectiveSetsList");
static_assert(offsetof(Mission_GetObjectiveSetsList, ObjectiveSetsList) == 0x000000, "Member 'Mission_GetObjectiveSetsList::ObjectiveSetsList' has a wrong offset!");

// Function GbxMission.Mission.GetObjectivesList
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetObjectivesList final
{
public:
	TArray<class UMissionObjective*>              ObjectivesList;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetObjectivesList) == 0x000008, "Wrong alignment on Mission_GetObjectivesList");
static_assert(sizeof(Mission_GetObjectivesList) == 0x000010, "Wrong size on Mission_GetObjectivesList");
static_assert(offsetof(Mission_GetObjectivesList, ObjectivesList) == 0x000000, "Member 'Mission_GetObjectivesList::ObjectivesList' has a wrong offset!");

// Function GbxMission.Mission.GetPausableChainedObjectivesList
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetPausableChainedObjectivesList final
{
public:
	TArray<class UMissionObjective*>              ObjectivesList;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetPausableChainedObjectivesList) == 0x000008, "Wrong alignment on Mission_GetPausableChainedObjectivesList");
static_assert(sizeof(Mission_GetPausableChainedObjectivesList) == 0x000010, "Wrong size on Mission_GetPausableChainedObjectivesList");
static_assert(offsetof(Mission_GetPausableChainedObjectivesList, ObjectivesList) == 0x000000, "Member 'Mission_GetPausableChainedObjectivesList::ObjectivesList' has a wrong offset!");

// Function GbxMission.MissionReferenceInterface.CheckForMissionReferenceErrors
// 0x0001 (0x0001 - 0x0000)
struct MissionReferenceInterface_CheckForMissionReferenceErrors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionReferenceInterface_CheckForMissionReferenceErrors) == 0x000001, "Wrong alignment on MissionReferenceInterface_CheckForMissionReferenceErrors");
static_assert(sizeof(MissionReferenceInterface_CheckForMissionReferenceErrors) == 0x000001, "Wrong size on MissionReferenceInterface_CheckForMissionReferenceErrors");
static_assert(offsetof(MissionReferenceInterface_CheckForMissionReferenceErrors, ReturnValue) == 0x000000, "Member 'MissionReferenceInterface_CheckForMissionReferenceErrors::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionReferenceInterface.GetMissionClassReferences
// 0x0010 (0x0010 - 0x0000)
struct MissionReferenceInterface_GetMissionClassReferences final
{
public:
	TArray<TSubclassOf<class UMission>>           OutMissions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionReferenceInterface_GetMissionClassReferences) == 0x000008, "Wrong alignment on MissionReferenceInterface_GetMissionClassReferences");
static_assert(sizeof(MissionReferenceInterface_GetMissionClassReferences) == 0x000010, "Wrong size on MissionReferenceInterface_GetMissionClassReferences");
static_assert(offsetof(MissionReferenceInterface_GetMissionClassReferences, OutMissions) == 0x000000, "Member 'MissionReferenceInterface_GetMissionClassReferences::OutMissions' has a wrong offset!");

// Function GbxMission.MissionIconComponent.EnabledConditionRequiresNativeClass
// 0x0001 (0x0001 - 0x0000)
struct MissionIconComponent_EnabledConditionRequiresNativeClass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionIconComponent_EnabledConditionRequiresNativeClass) == 0x000001, "Wrong alignment on MissionIconComponent_EnabledConditionRequiresNativeClass");
static_assert(sizeof(MissionIconComponent_EnabledConditionRequiresNativeClass) == 0x000001, "Wrong size on MissionIconComponent_EnabledConditionRequiresNativeClass");
static_assert(offsetof(MissionIconComponent_EnabledConditionRequiresNativeClass, ReturnValue) == 0x000000, "Member 'MissionIconComponent_EnabledConditionRequiresNativeClass::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionIconComponent.GetRequiredInterface
// 0x0008 (0x0008 - 0x0000)
struct MissionIconComponent_GetRequiredInterface final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionIconComponent_GetRequiredInterface) == 0x000008, "Wrong alignment on MissionIconComponent_GetRequiredInterface");
static_assert(sizeof(MissionIconComponent_GetRequiredInterface) == 0x000008, "Wrong size on MissionIconComponent_GetRequiredInterface");
static_assert(offsetof(MissionIconComponent_GetRequiredInterface, ReturnValue) == 0x000000, "Member 'MissionIconComponent_GetRequiredInterface::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionIconComponent.IsIconEnabled
// 0x0001 (0x0001 - 0x0000)
struct MissionIconComponent_IsIconEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionIconComponent_IsIconEnabled) == 0x000001, "Wrong alignment on MissionIconComponent_IsIconEnabled");
static_assert(sizeof(MissionIconComponent_IsIconEnabled) == 0x000001, "Wrong size on MissionIconComponent_IsIconEnabled");
static_assert(offsetof(MissionIconComponent_IsIconEnabled, ReturnValue) == 0x000000, "Member 'MissionIconComponent_IsIconEnabled::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionIconComponent.OnRep_Enabled
// 0x0001 (0x0001 - 0x0000)
struct MissionIconComponent_OnRep_Enabled final
{
public:
	bool                                          bPreviouslyEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionIconComponent_OnRep_Enabled) == 0x000001, "Wrong alignment on MissionIconComponent_OnRep_Enabled");
static_assert(sizeof(MissionIconComponent_OnRep_Enabled) == 0x000001, "Wrong size on MissionIconComponent_OnRep_Enabled");
static_assert(offsetof(MissionIconComponent_OnRep_Enabled, bPreviouslyEnabled) == 0x000000, "Member 'MissionIconComponent_OnRep_Enabled::bPreviouslyEnabled' has a wrong offset!");

// Function GbxMission.MissionIconComponent.SetDisabledState
// 0x0001 (0x0001 - 0x0000)
struct MissionIconComponent_SetDisabledState final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionIconComponent_SetDisabledState) == 0x000001, "Wrong alignment on MissionIconComponent_SetDisabledState");
static_assert(sizeof(MissionIconComponent_SetDisabledState) == 0x000001, "Wrong size on MissionIconComponent_SetDisabledState");
static_assert(offsetof(MissionIconComponent_SetDisabledState, bDisabled) == 0x000000, "Member 'MissionIconComponent_SetDisabledState::bDisabled' has a wrong offset!");

// Function GbxMission.MissionIconComponent.SetIconEnabledCondition
// 0x0010 (0x0010 - 0x0000)
struct MissionIconComponent_SetIconEnabledCondition final
{
public:
	class UGbxCondition*                          EnabledCondition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionIconComponent_SetIconEnabledCondition) == 0x000008, "Wrong alignment on MissionIconComponent_SetIconEnabledCondition");
static_assert(sizeof(MissionIconComponent_SetIconEnabledCondition) == 0x000010, "Wrong size on MissionIconComponent_SetIconEnabledCondition");
static_assert(offsetof(MissionIconComponent_SetIconEnabledCondition, EnabledCondition) == 0x000000, "Member 'MissionIconComponent_SetIconEnabledCondition::EnabledCondition' has a wrong offset!");
static_assert(offsetof(MissionIconComponent_SetIconEnabledCondition, ReturnValue) == 0x000008, "Member 'MissionIconComponent_SetIconEnabledCondition::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionIconComponent.SetIconState
// 0x0001 (0x0001 - 0x0000)
struct MissionIconComponent_SetIconState final
{
public:
	EMissionIconState                             InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionIconComponent_SetIconState) == 0x000001, "Wrong alignment on MissionIconComponent_SetIconState");
static_assert(sizeof(MissionIconComponent_SetIconState) == 0x000001, "Wrong size on MissionIconComponent_SetIconState");
static_assert(offsetof(MissionIconComponent_SetIconState, InState) == 0x000000, "Member 'MissionIconComponent_SetIconState::InState' has a wrong offset!");

// Function GbxMission.MissionObserverPlayerInterface.ClientReceiveMissionData
// 0x0028 (0x0028 - 0x0000)
struct MissionObserverPlayerInterface_ClientReceiveMissionData final
{
public:
	struct FReplicatedMissionData                 MissionData;                                       // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObserverPlayerInterface_ClientReceiveMissionData) == 0x000008, "Wrong alignment on MissionObserverPlayerInterface_ClientReceiveMissionData");
static_assert(sizeof(MissionObserverPlayerInterface_ClientReceiveMissionData) == 0x000028, "Wrong size on MissionObserverPlayerInterface_ClientReceiveMissionData");
static_assert(offsetof(MissionObserverPlayerInterface_ClientReceiveMissionData, MissionData) == 0x000000, "Member 'MissionObserverPlayerInterface_ClientReceiveMissionData::MissionData' has a wrong offset!");

// Function GbxMission.MissionTracker.OnStatIncrement
// 0x0018 (0x0018 - 0x0000)
struct MissionTracker_OnStatIncrement final
{
public:
	class AActor*                                 StatContext;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStatData*                          StatId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionTracker_OnStatIncrement) == 0x000008, "Wrong alignment on MissionTracker_OnStatIncrement");
static_assert(sizeof(MissionTracker_OnStatIncrement) == 0x000018, "Wrong size on MissionTracker_OnStatIncrement");
static_assert(offsetof(MissionTracker_OnStatIncrement, StatContext) == 0x000000, "Member 'MissionTracker_OnStatIncrement::StatContext' has a wrong offset!");
static_assert(offsetof(MissionTracker_OnStatIncrement, StatId) == 0x000008, "Member 'MissionTracker_OnStatIncrement::StatId' has a wrong offset!");
static_assert(offsetof(MissionTracker_OnStatIncrement, Amount) == 0x000010, "Member 'MissionTracker_OnStatIncrement::Amount' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientDormantObjectiveAdded
// 0x0010 (0x0010 - 0x0000)
struct PlayerMissionComponent_ClientDormantObjectiveAdded final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjective*                      Objective;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientDormantObjectiveAdded) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientDormantObjectiveAdded");
static_assert(sizeof(PlayerMissionComponent_ClientDormantObjectiveAdded) == 0x000010, "Wrong size on PlayerMissionComponent_ClientDormantObjectiveAdded");
static_assert(offsetof(PlayerMissionComponent_ClientDormantObjectiveAdded, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientDormantObjectiveAdded::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientDormantObjectiveAdded, Objective) == 0x000008, "Member 'PlayerMissionComponent_ClientDormantObjectiveAdded::Objective' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientDormantObjectiveRemoved
// 0x0018 (0x0018 - 0x0000)
struct PlayerMissionComponent_ClientDormantObjectiveRemoved final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjective*                      Objective;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIssueActiveEvent;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerMissionComponent_ClientDormantObjectiveRemoved) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientDormantObjectiveRemoved");
static_assert(sizeof(PlayerMissionComponent_ClientDormantObjectiveRemoved) == 0x000018, "Wrong size on PlayerMissionComponent_ClientDormantObjectiveRemoved");
static_assert(offsetof(PlayerMissionComponent_ClientDormantObjectiveRemoved, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientDormantObjectiveRemoved::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientDormantObjectiveRemoved, Objective) == 0x000008, "Member 'PlayerMissionComponent_ClientDormantObjectiveRemoved::Objective' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientDormantObjectiveRemoved, bIssueActiveEvent) == 0x000010, "Member 'PlayerMissionComponent_ClientDormantObjectiveRemoved::bIssueActiveEvent' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientMissionRegistered
// 0x0008 (0x0008 - 0x0000)
struct PlayerMissionComponent_ClientMissionRegistered final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientMissionRegistered) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientMissionRegistered");
static_assert(sizeof(PlayerMissionComponent_ClientMissionRegistered) == 0x000008, "Wrong size on PlayerMissionComponent_ClientMissionRegistered");
static_assert(offsetof(PlayerMissionComponent_ClientMissionRegistered, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientMissionRegistered::MissionClass' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientMissionTimerChanged
// 0x0010 (0x0010 - 0x0000)
struct PlayerMissionComponent_ClientMissionTimerChanged final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsToAdd;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerMissionComponent_ClientMissionTimerChanged) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientMissionTimerChanged");
static_assert(sizeof(PlayerMissionComponent_ClientMissionTimerChanged) == 0x000010, "Wrong size on PlayerMissionComponent_ClientMissionTimerChanged");
static_assert(offsetof(PlayerMissionComponent_ClientMissionTimerChanged, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientMissionTimerChanged::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientMissionTimerChanged, SecondsToAdd) == 0x000008, "Member 'PlayerMissionComponent_ClientMissionTimerChanged::SecondsToAdd' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientMissionTimerStarted
// 0x0008 (0x0008 - 0x0000)
struct PlayerMissionComponent_ClientMissionTimerStarted final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientMissionTimerStarted) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientMissionTimerStarted");
static_assert(sizeof(PlayerMissionComponent_ClientMissionTimerStarted) == 0x000008, "Wrong size on PlayerMissionComponent_ClientMissionTimerStarted");
static_assert(offsetof(PlayerMissionComponent_ClientMissionTimerStarted, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientMissionTimerStarted::MissionClass' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientMissionTimerStopped
// 0x0008 (0x0008 - 0x0000)
struct PlayerMissionComponent_ClientMissionTimerStopped final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientMissionTimerStopped) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientMissionTimerStopped");
static_assert(sizeof(PlayerMissionComponent_ClientMissionTimerStopped) == 0x000008, "Wrong size on PlayerMissionComponent_ClientMissionTimerStopped");
static_assert(offsetof(PlayerMissionComponent_ClientMissionTimerStopped, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientMissionTimerStopped::MissionClass' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientObjectiveChainUnpaused
// 0x0010 (0x0010 - 0x0000)
struct PlayerMissionComponent_ClientObjectiveChainUnpaused final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjective*                      Objective;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientObjectiveChainUnpaused) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientObjectiveChainUnpaused");
static_assert(sizeof(PlayerMissionComponent_ClientObjectiveChainUnpaused) == 0x000010, "Wrong size on PlayerMissionComponent_ClientObjectiveChainUnpaused");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveChainUnpaused, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientObjectiveChainUnpaused::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveChainUnpaused, Objective) == 0x000008, "Member 'PlayerMissionComponent_ClientObjectiveChainUnpaused::Objective' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientObjectiveCleared
// 0x0010 (0x0010 - 0x0000)
struct PlayerMissionComponent_ClientObjectiveCleared final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjective*                      ClearedObjective;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientObjectiveCleared) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientObjectiveCleared");
static_assert(sizeof(PlayerMissionComponent_ClientObjectiveCleared) == 0x000010, "Wrong size on PlayerMissionComponent_ClientObjectiveCleared");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveCleared, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientObjectiveCleared::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveCleared, ClearedObjective) == 0x000008, "Member 'PlayerMissionComponent_ClientObjectiveCleared::ClearedObjective' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientObjectiveSetCompleted
// 0x0010 (0x0010 - 0x0000)
struct PlayerMissionComponent_ClientObjectiveSetCompleted final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjectiveSet*                   CompletedObjectiveSet;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientObjectiveSetCompleted) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientObjectiveSetCompleted");
static_assert(sizeof(PlayerMissionComponent_ClientObjectiveSetCompleted) == 0x000010, "Wrong size on PlayerMissionComponent_ClientObjectiveSetCompleted");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveSetCompleted, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientObjectiveSetCompleted::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveSetCompleted, CompletedObjectiveSet) == 0x000008, "Member 'PlayerMissionComponent_ClientObjectiveSetCompleted::CompletedObjectiveSet' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientObjectiveUpdated
// 0x0018 (0x0018 - 0x0000)
struct PlayerMissionComponent_ClientObjectiveUpdated final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjective*                      UpdatedObjective;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ObjectiveBit;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amount;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerMissionComponent_ClientObjectiveUpdated) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientObjectiveUpdated");
static_assert(sizeof(PlayerMissionComponent_ClientObjectiveUpdated) == 0x000018, "Wrong size on PlayerMissionComponent_ClientObjectiveUpdated");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveUpdated, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientObjectiveUpdated::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveUpdated, UpdatedObjective) == 0x000008, "Member 'PlayerMissionComponent_ClientObjectiveUpdated::UpdatedObjective' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveUpdated, ObjectiveBit) == 0x000010, "Member 'PlayerMissionComponent_ClientObjectiveUpdated::ObjectiveBit' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientObjectiveUpdated, Amount) == 0x000014, "Member 'PlayerMissionComponent_ClientObjectiveUpdated::Amount' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientTrackedMissionChanged
// 0x0008 (0x0008 - 0x0000)
struct PlayerMissionComponent_ClientTrackedMissionChanged final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientTrackedMissionChanged) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientTrackedMissionChanged");
static_assert(sizeof(PlayerMissionComponent_ClientTrackedMissionChanged) == 0x000008, "Wrong size on PlayerMissionComponent_ClientTrackedMissionChanged");
static_assert(offsetof(PlayerMissionComponent_ClientTrackedMissionChanged, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientTrackedMissionChanged::MissionClass' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientUpdateActiveObjectiveSet
// 0x0020 (0x0020 - 0x0000)
struct PlayerMissionComponent_ClientUpdateActiveObjectiveSet final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMissionObjectiveSet*                   ActiveObjectiveSet;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMissionObjective*>              DormantObjectives;                                 // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ClientUpdateActiveObjectiveSet) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientUpdateActiveObjectiveSet");
static_assert(sizeof(PlayerMissionComponent_ClientUpdateActiveObjectiveSet) == 0x000020, "Wrong size on PlayerMissionComponent_ClientUpdateActiveObjectiveSet");
static_assert(offsetof(PlayerMissionComponent_ClientUpdateActiveObjectiveSet, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientUpdateActiveObjectiveSet::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientUpdateActiveObjectiveSet, ActiveObjectiveSet) == 0x000008, "Member 'PlayerMissionComponent_ClientUpdateActiveObjectiveSet::ActiveObjectiveSet' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientUpdateActiveObjectiveSet, DormantObjectives) == 0x000010, "Member 'PlayerMissionComponent_ClientUpdateActiveObjectiveSet::DormantObjectives' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ClientUpdateMissionStatus
// 0x0010 (0x0010 - 0x0000)
struct PlayerMissionComponent_ClientUpdateMissionStatus final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionStatus                                Status;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerMissionComponent_ClientUpdateMissionStatus) == 0x000008, "Wrong alignment on PlayerMissionComponent_ClientUpdateMissionStatus");
static_assert(sizeof(PlayerMissionComponent_ClientUpdateMissionStatus) == 0x000010, "Wrong size on PlayerMissionComponent_ClientUpdateMissionStatus");
static_assert(offsetof(PlayerMissionComponent_ClientUpdateMissionStatus, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ClientUpdateMissionStatus::MissionClass' has a wrong offset!");
static_assert(offsetof(PlayerMissionComponent_ClientUpdateMissionStatus, Status) == 0x000008, "Member 'PlayerMissionComponent_ClientUpdateMissionStatus::Status' has a wrong offset!");

// Function GbxMission.PlayerMissionComponent.ServerSetTrackedMission
// 0x0008 (0x0008 - 0x0000)
struct PlayerMissionComponent_ServerSetTrackedMission final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMissionComponent_ServerSetTrackedMission) == 0x000008, "Wrong alignment on PlayerMissionComponent_ServerSetTrackedMission");
static_assert(sizeof(PlayerMissionComponent_ServerSetTrackedMission) == 0x000008, "Wrong size on PlayerMissionComponent_ServerSetTrackedMission");
static_assert(offsetof(PlayerMissionComponent_ServerSetTrackedMission, MissionClass) == 0x000000, "Member 'PlayerMissionComponent_ServerSetTrackedMission::MissionClass' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.AdvanceMission
// 0x0008 (0x0008 - 0x0000)
struct MissionDebugMenu_AdvanceMission final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_AdvanceMission) == 0x000004, "Wrong alignment on MissionDebugMenu_AdvanceMission");
static_assert(sizeof(MissionDebugMenu_AdvanceMission) == 0x000008, "Wrong size on MissionDebugMenu_AdvanceMission");
static_assert(offsetof(MissionDebugMenu_AdvanceMission, MissionId) == 0x000000, "Member 'MissionDebugMenu_AdvanceMission::MissionId' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.AdvanceToObjectiveSet
// 0x0010 (0x0010 - 0x0000)
struct MissionDebugMenu_AdvanceToObjectiveSet final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveSetId;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_AdvanceToObjectiveSet) == 0x000004, "Wrong alignment on MissionDebugMenu_AdvanceToObjectiveSet");
static_assert(sizeof(MissionDebugMenu_AdvanceToObjectiveSet) == 0x000010, "Wrong size on MissionDebugMenu_AdvanceToObjectiveSet");
static_assert(offsetof(MissionDebugMenu_AdvanceToObjectiveSet, MissionId) == 0x000000, "Member 'MissionDebugMenu_AdvanceToObjectiveSet::MissionId' has a wrong offset!");
static_assert(offsetof(MissionDebugMenu_AdvanceToObjectiveSet, ObjectiveSetId) == 0x000008, "Member 'MissionDebugMenu_AdvanceToObjectiveSet::ObjectiveSetId' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.CompleteMission
// 0x0008 (0x0008 - 0x0000)
struct MissionDebugMenu_CompleteMission final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_CompleteMission) == 0x000004, "Wrong alignment on MissionDebugMenu_CompleteMission");
static_assert(sizeof(MissionDebugMenu_CompleteMission) == 0x000008, "Wrong size on MissionDebugMenu_CompleteMission");
static_assert(offsetof(MissionDebugMenu_CompleteMission, MissionId) == 0x000000, "Member 'MissionDebugMenu_CompleteMission::MissionId' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.GetItemsForMissionGraph
// 0x0010 (0x0010 - 0x0000)
struct MissionDebugMenu_GetItemsForMissionGraph final
{
public:
	TArray<struct FGbxCascadingListItemData>      OutItems;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_GetItemsForMissionGraph) == 0x000008, "Wrong alignment on MissionDebugMenu_GetItemsForMissionGraph");
static_assert(sizeof(MissionDebugMenu_GetItemsForMissionGraph) == 0x000010, "Wrong size on MissionDebugMenu_GetItemsForMissionGraph");
static_assert(offsetof(MissionDebugMenu_GetItemsForMissionGraph, OutItems) == 0x000000, "Member 'MissionDebugMenu_GetItemsForMissionGraph::OutItems' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.GetItemsForMissionStatus
// 0x0018 (0x0018 - 0x0000)
struct MissionDebugMenu_GetItemsForMissionStatus final
{
public:
	EMissionDebugStatus                           Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGbxCascadingListItemData>      OutItems;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_GetItemsForMissionStatus) == 0x000008, "Wrong alignment on MissionDebugMenu_GetItemsForMissionStatus");
static_assert(sizeof(MissionDebugMenu_GetItemsForMissionStatus) == 0x000018, "Wrong size on MissionDebugMenu_GetItemsForMissionStatus");
static_assert(offsetof(MissionDebugMenu_GetItemsForMissionStatus, Status) == 0x000000, "Member 'MissionDebugMenu_GetItemsForMissionStatus::Status' has a wrong offset!");
static_assert(offsetof(MissionDebugMenu_GetItemsForMissionStatus, OutItems) == 0x000008, "Member 'MissionDebugMenu_GetItemsForMissionStatus::OutItems' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.SelectMissionGraph
// 0x0008 (0x0008 - 0x0000)
struct MissionDebugMenu_SelectMissionGraph final
{
public:
	class FName                                   MissionGraphId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_SelectMissionGraph) == 0x000004, "Wrong alignment on MissionDebugMenu_SelectMissionGraph");
static_assert(sizeof(MissionDebugMenu_SelectMissionGraph) == 0x000008, "Wrong size on MissionDebugMenu_SelectMissionGraph");
static_assert(offsetof(MissionDebugMenu_SelectMissionGraph, MissionGraphId) == 0x000000, "Member 'MissionDebugMenu_SelectMissionGraph::MissionGraphId' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.GetMissionStatus
// 0x0010 (0x0010 - 0x0000)
struct MissionDebugMenu_GetMissionStatus final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionStatus                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionDebugMenu_GetMissionStatus) == 0x000004, "Wrong alignment on MissionDebugMenu_GetMissionStatus");
static_assert(sizeof(MissionDebugMenu_GetMissionStatus) == 0x000010, "Wrong size on MissionDebugMenu_GetMissionStatus");
static_assert(offsetof(MissionDebugMenu_GetMissionStatus, MissionId) == 0x000000, "Member 'MissionDebugMenu_GetMissionStatus::MissionId' has a wrong offset!");
static_assert(offsetof(MissionDebugMenu_GetMissionStatus, ReturnValue) == 0x000008, "Member 'MissionDebugMenu_GetMissionStatus::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.GetMissionWithId
// 0x0010 (0x0010 - 0x0000)
struct MissionDebugMenu_GetMissionWithId final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMission*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_GetMissionWithId) == 0x000008, "Wrong alignment on MissionDebugMenu_GetMissionWithId");
static_assert(sizeof(MissionDebugMenu_GetMissionWithId) == 0x000010, "Wrong size on MissionDebugMenu_GetMissionWithId");
static_assert(offsetof(MissionDebugMenu_GetMissionWithId, MissionId) == 0x000000, "Member 'MissionDebugMenu_GetMissionWithId::MissionId' has a wrong offset!");
static_assert(offsetof(MissionDebugMenu_GetMissionWithId, ReturnValue) == 0x000008, "Member 'MissionDebugMenu_GetMissionWithId::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionDebugMenu.GetObjectiveSetItemsForMission
// 0x0018 (0x0018 - 0x0000)
struct MissionDebugMenu_GetObjectiveSetItemsForMission final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGbxCascadingListItemData>      OutItems;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionDebugMenu_GetObjectiveSetItemsForMission) == 0x000008, "Wrong alignment on MissionDebugMenu_GetObjectiveSetItemsForMission");
static_assert(sizeof(MissionDebugMenu_GetObjectiveSetItemsForMission) == 0x000018, "Wrong size on MissionDebugMenu_GetObjectiveSetItemsForMission");
static_assert(offsetof(MissionDebugMenu_GetObjectiveSetItemsForMission, MissionId) == 0x000000, "Member 'MissionDebugMenu_GetObjectiveSetItemsForMission::MissionId' has a wrong offset!");
static_assert(offsetof(MissionDebugMenu_GetObjectiveSetItemsForMission, OutItems) == 0x000008, "Member 'MissionDebugMenu_GetObjectiveSetItemsForMission::OutItems' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.ActivateMission
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_ActivateMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_ActivateMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_ActivateMission");
static_assert(sizeof(MissionFunctionLibrary_ActivateMission) == 0x000010, "Wrong size on MissionFunctionLibrary_ActivateMission");
static_assert(offsetof(MissionFunctionLibrary_ActivateMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_ActivateMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_ActivateMission, MissionClass) == 0x000008, "Member 'MissionFunctionLibrary_ActivateMission::MissionClass' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.ActivateMissionAtObjectiveSet
// 0x0050 (0x0050 - 0x0000)
struct MissionFunctionLibrary_ActivateMissionAtObjectiveSet final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveSetReference          ObjectiveSetRef;                                   // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_ActivateMissionAtObjectiveSet) == 0x000008, "Wrong alignment on MissionFunctionLibrary_ActivateMissionAtObjectiveSet");
static_assert(sizeof(MissionFunctionLibrary_ActivateMissionAtObjectiveSet) == 0x000050, "Wrong size on MissionFunctionLibrary_ActivateMissionAtObjectiveSet");
static_assert(offsetof(MissionFunctionLibrary_ActivateMissionAtObjectiveSet, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_ActivateMissionAtObjectiveSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_ActivateMissionAtObjectiveSet, ObjectiveSetRef) == 0x000008, "Member 'MissionFunctionLibrary_ActivateMissionAtObjectiveSet::ObjectiveSetRef' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.AdvanceMissionObjectiveSetRef
// 0x0050 (0x0050 - 0x0000)
struct MissionFunctionLibrary_AdvanceMissionObjectiveSetRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveSetReference          ObjectiveSetRef;                                   // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_AdvanceMissionObjectiveSetRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_AdvanceMissionObjectiveSetRef");
static_assert(sizeof(MissionFunctionLibrary_AdvanceMissionObjectiveSetRef) == 0x000050, "Wrong size on MissionFunctionLibrary_AdvanceMissionObjectiveSetRef");
static_assert(offsetof(MissionFunctionLibrary_AdvanceMissionObjectiveSetRef, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_AdvanceMissionObjectiveSetRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_AdvanceMissionObjectiveSetRef, ObjectiveSetRef) == 0x000008, "Member 'MissionFunctionLibrary_AdvanceMissionObjectiveSetRef::ObjectiveSetRef' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.AdvanceToBreadcrumbObjective
// 0x0038 (0x0038 - 0x0000)
struct MissionFunctionLibrary_AdvanceToBreadcrumbObjective final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveReference             BreadcrumbObjectiveRef;                            // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_AdvanceToBreadcrumbObjective) == 0x000008, "Wrong alignment on MissionFunctionLibrary_AdvanceToBreadcrumbObjective");
static_assert(sizeof(MissionFunctionLibrary_AdvanceToBreadcrumbObjective) == 0x000038, "Wrong size on MissionFunctionLibrary_AdvanceToBreadcrumbObjective");
static_assert(offsetof(MissionFunctionLibrary_AdvanceToBreadcrumbObjective, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_AdvanceToBreadcrumbObjective::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_AdvanceToBreadcrumbObjective, BreadcrumbObjectiveRef) == 0x000008, "Member 'MissionFunctionLibrary_AdvanceToBreadcrumbObjective::BreadcrumbObjectiveRef' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.CompleteMission
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_CompleteMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_CompleteMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_CompleteMission");
static_assert(sizeof(MissionFunctionLibrary_CompleteMission) == 0x000010, "Wrong size on MissionFunctionLibrary_CompleteMission");
static_assert(offsetof(MissionFunctionLibrary_CompleteMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_CompleteMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_CompleteMission, MissionClass) == 0x000008, "Member 'MissionFunctionLibrary_CompleteMission::MissionClass' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.CreateMission
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_CreateMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMission*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_CreateMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_CreateMission");
static_assert(sizeof(MissionFunctionLibrary_CreateMission) == 0x000018, "Wrong size on MissionFunctionLibrary_CreateMission");
static_assert(offsetof(MissionFunctionLibrary_CreateMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_CreateMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_CreateMission, MissionClass) == 0x000008, "Member 'MissionFunctionLibrary_CreateMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_CreateMission, ReturnValue) == 0x000010, "Member 'MissionFunctionLibrary_CreateMission::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.DebugJumpToMissionObjectiveSetRef
// 0x0058 (0x0058 - 0x0000)
struct MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveSetReference          ObjectiveSetRef;                                   // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsBranchingMission;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef");
static_assert(sizeof(MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef) == 0x000058, "Wrong size on MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef");
static_assert(offsetof(MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef, ObjectiveSetRef) == 0x000008, "Member 'MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef::ObjectiveSetRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef, bIsBranchingMission) == 0x000050, "Member 'MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef::bIsBranchingMission' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.EqualEqual_MissionObjectiveReference
// 0x0068 (0x0068 - 0x0000)
struct MissionFunctionLibrary_EqualEqual_MissionObjectiveReference final
{
public:
	struct FMissionObjectiveReference             A;                                                 // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	struct FMissionObjectiveReference             B;                                                 // 0x0030(0x0030)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_EqualEqual_MissionObjectiveReference) == 0x000008, "Wrong alignment on MissionFunctionLibrary_EqualEqual_MissionObjectiveReference");
static_assert(sizeof(MissionFunctionLibrary_EqualEqual_MissionObjectiveReference) == 0x000068, "Wrong size on MissionFunctionLibrary_EqualEqual_MissionObjectiveReference");
static_assert(offsetof(MissionFunctionLibrary_EqualEqual_MissionObjectiveReference, A) == 0x000000, "Member 'MissionFunctionLibrary_EqualEqual_MissionObjectiveReference::A' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_EqualEqual_MissionObjectiveReference, B) == 0x000030, "Member 'MissionFunctionLibrary_EqualEqual_MissionObjectiveReference::B' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_EqualEqual_MissionObjectiveReference, ReturnValue) == 0x000060, "Member 'MissionFunctionLibrary_EqualEqual_MissionObjectiveReference::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.EqualEqual_MissionObjectiveSetReference
// 0x0098 (0x0098 - 0x0000)
struct MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference final
{
public:
	struct FMissionObjectiveSetReference          A;                                                 // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FMissionObjectiveSetReference          B;                                                 // 0x0048(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference) == 0x000008, "Wrong alignment on MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference");
static_assert(sizeof(MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference) == 0x000098, "Wrong size on MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference");
static_assert(offsetof(MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference, A) == 0x000000, "Member 'MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference::A' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference, B) == 0x000048, "Member 'MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference::B' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference, ReturnValue) == 0x000090, "Member 'MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.FillMissionEventRef
// 0x0020 (0x0020 - 0x0000)
struct MissionFunctionLibrary_FillMissionEventRef final
{
public:
	struct FMissionEventReference                 MissionEventRef;                                   // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_FillMissionEventRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_FillMissionEventRef");
static_assert(sizeof(MissionFunctionLibrary_FillMissionEventRef) == 0x000020, "Wrong size on MissionFunctionLibrary_FillMissionEventRef");
static_assert(offsetof(MissionFunctionLibrary_FillMissionEventRef, MissionEventRef) == 0x000000, "Member 'MissionFunctionLibrary_FillMissionEventRef::MissionEventRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionEventRef, MissionClass) == 0x000010, "Member 'MissionFunctionLibrary_FillMissionEventRef::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionEventRef, EventName) == 0x000018, "Member 'MissionFunctionLibrary_FillMissionEventRef::EventName' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.FillMissionObjectiveRef
// 0x0040 (0x0040 - 0x0000)
struct MissionFunctionLibrary_FillMissionObjectiveRef final
{
public:
	struct FMissionObjectiveReference             MissionObjectiveRef;                               // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Objective;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_FillMissionObjectiveRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_FillMissionObjectiveRef");
static_assert(sizeof(MissionFunctionLibrary_FillMissionObjectiveRef) == 0x000040, "Wrong size on MissionFunctionLibrary_FillMissionObjectiveRef");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveRef, MissionObjectiveRef) == 0x000000, "Member 'MissionFunctionLibrary_FillMissionObjectiveRef::MissionObjectiveRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveRef, MissionClass) == 0x000030, "Member 'MissionFunctionLibrary_FillMissionObjectiveRef::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveRef, Objective) == 0x000038, "Member 'MissionFunctionLibrary_FillMissionObjectiveRef::Objective' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.FillMissionObjectiveRefWeak
// 0x0060 (0x0060 - 0x0000)
struct MissionFunctionLibrary_FillMissionObjectiveRefWeak final
{
public:
	struct FMissionObjectiveReferenceWeak         MissionObjectiveRef;                               // 0x0000(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Objective;                                         // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_FillMissionObjectiveRefWeak) == 0x000008, "Wrong alignment on MissionFunctionLibrary_FillMissionObjectiveRefWeak");
static_assert(sizeof(MissionFunctionLibrary_FillMissionObjectiveRefWeak) == 0x000060, "Wrong size on MissionFunctionLibrary_FillMissionObjectiveRefWeak");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveRefWeak, MissionObjectiveRef) == 0x000000, "Member 'MissionFunctionLibrary_FillMissionObjectiveRefWeak::MissionObjectiveRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveRefWeak, MissionClass) == 0x000050, "Member 'MissionFunctionLibrary_FillMissionObjectiveRefWeak::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveRefWeak, Objective) == 0x000058, "Member 'MissionFunctionLibrary_FillMissionObjectiveRefWeak::Objective' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.FillMissionObjectiveSetRef
// 0x0058 (0x0058 - 0x0000)
struct MissionFunctionLibrary_FillMissionObjectiveSetRef final
{
public:
	struct FMissionObjectiveSetReference          MissionObjectiveSetRef;                            // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveSet;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_FillMissionObjectiveSetRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_FillMissionObjectiveSetRef");
static_assert(sizeof(MissionFunctionLibrary_FillMissionObjectiveSetRef) == 0x000058, "Wrong size on MissionFunctionLibrary_FillMissionObjectiveSetRef");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveSetRef, MissionObjectiveSetRef) == 0x000000, "Member 'MissionFunctionLibrary_FillMissionObjectiveSetRef::MissionObjectiveSetRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveSetRef, MissionClass) == 0x000048, "Member 'MissionFunctionLibrary_FillMissionObjectiveSetRef::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_FillMissionObjectiveSetRef, ObjectiveSet) == 0x000050, "Member 'MissionFunctionLibrary_FillMissionObjectiveSetRef::ObjectiveSet' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetActiveMissions
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetActiveMissions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMission*>                       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetActiveMissions) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetActiveMissions");
static_assert(sizeof(MissionFunctionLibrary_GetActiveMissions) == 0x000018, "Wrong size on MissionFunctionLibrary_GetActiveMissions");
static_assert(offsetof(MissionFunctionLibrary_GetActiveMissions, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetActiveMissions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetActiveMissions, ReturnValue) == 0x000008, "Member 'MissionFunctionLibrary_GetActiveMissions::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetActivePlotMission
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_GetActivePlotMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetActivePlotMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetActivePlotMission");
static_assert(sizeof(MissionFunctionLibrary_GetActivePlotMission) == 0x000010, "Wrong size on MissionFunctionLibrary_GetActivePlotMission");
static_assert(offsetof(MissionFunctionLibrary_GetActivePlotMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetActivePlotMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetActivePlotMission, ReturnValue) == 0x000008, "Member 'MissionFunctionLibrary_GetActivePlotMission::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetCurrentlyTrackedMission
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_GetCurrentlyTrackedMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetCurrentlyTrackedMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetCurrentlyTrackedMission");
static_assert(sizeof(MissionFunctionLibrary_GetCurrentlyTrackedMission) == 0x000010, "Wrong size on MissionFunctionLibrary_GetCurrentlyTrackedMission");
static_assert(offsetof(MissionFunctionLibrary_GetCurrentlyTrackedMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetCurrentlyTrackedMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetCurrentlyTrackedMission, ReturnValue) == 0x000008, "Member 'MissionFunctionLibrary_GetCurrentlyTrackedMission::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetEventNameListForMission
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetEventNameListForMission final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamesList;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetEventNameListForMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetEventNameListForMission");
static_assert(sizeof(MissionFunctionLibrary_GetEventNameListForMission) == 0x000018, "Wrong size on MissionFunctionLibrary_GetEventNameListForMission");
static_assert(offsetof(MissionFunctionLibrary_GetEventNameListForMission, MissionClass) == 0x000000, "Member 'MissionFunctionLibrary_GetEventNameListForMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetEventNameListForMission, NamesList) == 0x000008, "Member 'MissionFunctionLibrary_GetEventNameListForMission::NamesList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMission
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMission*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMission");
static_assert(sizeof(MissionFunctionLibrary_GetMission) == 0x000018, "Wrong size on MissionFunctionLibrary_GetMission");
static_assert(offsetof(MissionFunctionLibrary_GetMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMission, MissionClass) == 0x000008, "Member 'MissionFunctionLibrary_GetMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMission, ReturnValue) == 0x000010, "Member 'MissionFunctionLibrary_GetMission::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionClassFromObjectiveReference
// 0x0038 (0x0038 - 0x0000)
struct MissionFunctionLibrary_GetMissionClassFromObjectiveReference final
{
public:
	struct FMissionObjectiveReference             ObjectiveReference;                                // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetMissionClassFromObjectiveReference) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionClassFromObjectiveReference");
static_assert(sizeof(MissionFunctionLibrary_GetMissionClassFromObjectiveReference) == 0x000038, "Wrong size on MissionFunctionLibrary_GetMissionClassFromObjectiveReference");
static_assert(offsetof(MissionFunctionLibrary_GetMissionClassFromObjectiveReference, ObjectiveReference) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionClassFromObjectiveReference::ObjectiveReference' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionClassFromObjectiveReference, ReturnValue) == 0x000030, "Member 'MissionFunctionLibrary_GetMissionClassFromObjectiveReference::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionClassFromObjectiveReferenceWeak
// 0x0058 (0x0058 - 0x0000)
struct MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak final
{
public:
	struct FMissionObjectiveReferenceWeak         ObjectiveReference;                                // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak");
static_assert(sizeof(MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak) == 0x000058, "Wrong size on MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak");
static_assert(offsetof(MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak, ObjectiveReference) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak::ObjectiveReference' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak, ReturnValue) == 0x000050, "Member 'MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionLevel
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_GetMissionLevel final
{
public:
	class UMission*                               MissionObj;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_GetMissionLevel) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionLevel");
static_assert(sizeof(MissionFunctionLibrary_GetMissionLevel) == 0x000010, "Wrong size on MissionFunctionLibrary_GetMissionLevel");
static_assert(offsetof(MissionFunctionLibrary_GetMissionLevel, MissionObj) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionLevel::MissionObj' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionLevel, ReturnValue) == 0x000008, "Member 'MissionFunctionLibrary_GetMissionLevel::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionObjectiveCount
// 0x0040 (0x0040 - 0x0000)
struct MissionFunctionLibrary_GetMissionObjectiveCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveReference             ObjectiveRef;                                      // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         CurrentObjectiveCount;                             // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalObjectiveCount;                               // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetMissionObjectiveCount) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionObjectiveCount");
static_assert(sizeof(MissionFunctionLibrary_GetMissionObjectiveCount) == 0x000040, "Wrong size on MissionFunctionLibrary_GetMissionObjectiveCount");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveCount, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionObjectiveCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveCount, ObjectiveRef) == 0x000008, "Member 'MissionFunctionLibrary_GetMissionObjectiveCount::ObjectiveRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveCount, CurrentObjectiveCount) == 0x000038, "Member 'MissionFunctionLibrary_GetMissionObjectiveCount::CurrentObjectiveCount' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveCount, TotalObjectiveCount) == 0x00003C, "Member 'MissionFunctionLibrary_GetMissionObjectiveCount::TotalObjectiveCount' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionObjectiveSetStatusRef
// 0x0058 (0x0058 - 0x0000)
struct MissionFunctionLibrary_GetMissionObjectiveSetStatusRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveSetReference          ObjectiveSetRef;                                   // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	EMissionObjectiveSetStatus                    ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_GetMissionObjectiveSetStatusRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionObjectiveSetStatusRef");
static_assert(sizeof(MissionFunctionLibrary_GetMissionObjectiveSetStatusRef) == 0x000058, "Wrong size on MissionFunctionLibrary_GetMissionObjectiveSetStatusRef");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveSetStatusRef, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionObjectiveSetStatusRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveSetStatusRef, ObjectiveSetRef) == 0x000008, "Member 'MissionFunctionLibrary_GetMissionObjectiveSetStatusRef::ObjectiveSetRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveSetStatusRef, ReturnValue) == 0x000050, "Member 'MissionFunctionLibrary_GetMissionObjectiveSetStatusRef::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionObjectiveStatusRef
// 0x0048 (0x0048 - 0x0000)
struct MissionFunctionLibrary_GetMissionObjectiveStatusRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveReference             ObjectiveRef;                                      // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                OptionalContext;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionObjectiveStatus                       ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_GetMissionObjectiveStatusRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionObjectiveStatusRef");
static_assert(sizeof(MissionFunctionLibrary_GetMissionObjectiveStatusRef) == 0x000048, "Wrong size on MissionFunctionLibrary_GetMissionObjectiveStatusRef");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveStatusRef, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionObjectiveStatusRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveStatusRef, ObjectiveRef) == 0x000008, "Member 'MissionFunctionLibrary_GetMissionObjectiveStatusRef::ObjectiveRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveStatusRef, OptionalContext) == 0x000038, "Member 'MissionFunctionLibrary_GetMissionObjectiveStatusRef::OptionalContext' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionObjectiveStatusRef, ReturnValue) == 0x000040, "Member 'MissionFunctionLibrary_GetMissionObjectiveStatusRef::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetMissionStatus
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetMissionStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionStatus                                ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_GetMissionStatus) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetMissionStatus");
static_assert(sizeof(MissionFunctionLibrary_GetMissionStatus) == 0x000018, "Wrong size on MissionFunctionLibrary_GetMissionStatus");
static_assert(offsetof(MissionFunctionLibrary_GetMissionStatus, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_GetMissionStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionStatus, MissionClass) == 0x000008, "Member 'MissionFunctionLibrary_GetMissionStatus::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetMissionStatus, ReturnValue) == 0x000010, "Member 'MissionFunctionLibrary_GetMissionStatus::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetObjectiveNameListForMission
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetObjectiveNameListForMission final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamesList;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetObjectiveNameListForMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetObjectiveNameListForMission");
static_assert(sizeof(MissionFunctionLibrary_GetObjectiveNameListForMission) == 0x000018, "Wrong size on MissionFunctionLibrary_GetObjectiveNameListForMission");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveNameListForMission, MissionClass) == 0x000000, "Member 'MissionFunctionLibrary_GetObjectiveNameListForMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveNameListForMission, NamesList) == 0x000008, "Member 'MissionFunctionLibrary_GetObjectiveNameListForMission::NamesList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetObjectiveNameListForMissionFromAssetSubclass
// 0x0038 (0x0038 - 0x0000)
struct MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass final
{
public:
	TSoftClassPtr<class UClass>                   Mission;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamesList;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass");
static_assert(sizeof(MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass) == 0x000038, "Wrong size on MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass, Mission) == 0x000000, "Member 'MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass::Mission' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass, NamesList) == 0x000028, "Member 'MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass::NamesList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetObjectiveSetListForMission
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetObjectiveSetListForMission final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMissionObjectiveSet*>           ObjectiveSetList;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetObjectiveSetListForMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetObjectiveSetListForMission");
static_assert(sizeof(MissionFunctionLibrary_GetObjectiveSetListForMission) == 0x000018, "Wrong size on MissionFunctionLibrary_GetObjectiveSetListForMission");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveSetListForMission, MissionClass) == 0x000000, "Member 'MissionFunctionLibrary_GetObjectiveSetListForMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveSetListForMission, ObjectiveSetList) == 0x000008, "Member 'MissionFunctionLibrary_GetObjectiveSetListForMission::ObjectiveSetList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetObjectiveSetNameListForMission
// 0x0018 (0x0018 - 0x0000)
struct MissionFunctionLibrary_GetObjectiveSetNameListForMission final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamesList;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetObjectiveSetNameListForMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetObjectiveSetNameListForMission");
static_assert(sizeof(MissionFunctionLibrary_GetObjectiveSetNameListForMission) == 0x000018, "Wrong size on MissionFunctionLibrary_GetObjectiveSetNameListForMission");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveSetNameListForMission, MissionClass) == 0x000000, "Member 'MissionFunctionLibrary_GetObjectiveSetNameListForMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveSetNameListForMission, NamesList) == 0x000008, "Member 'MissionFunctionLibrary_GetObjectiveSetNameListForMission::NamesList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetObjectiveSetNameListForMissionFromAssetSubclass
// 0x0038 (0x0038 - 0x0000)
struct MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass final
{
public:
	TSoftClassPtr<class UClass>                   MissionClass;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamesList;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass");
static_assert(sizeof(MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass) == 0x000038, "Wrong size on MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass, MissionClass) == 0x000000, "Member 'MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass, NamesList) == 0x000028, "Member 'MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass::NamesList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetPlotMissionIndex
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_GetPlotMissionIndex final
{
public:
	class UMission*                               MissionObj;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_GetPlotMissionIndex) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetPlotMissionIndex");
static_assert(sizeof(MissionFunctionLibrary_GetPlotMissionIndex) == 0x000010, "Wrong size on MissionFunctionLibrary_GetPlotMissionIndex");
static_assert(offsetof(MissionFunctionLibrary_GetPlotMissionIndex, MissionObj) == 0x000000, "Member 'MissionFunctionLibrary_GetPlotMissionIndex::MissionObj' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetPlotMissionIndex, ReturnValue) == 0x000008, "Member 'MissionFunctionLibrary_GetPlotMissionIndex::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.GetSoftObjectiveSetListForMission
// 0x0038 (0x0038 - 0x0000)
struct MissionFunctionLibrary_GetSoftObjectiveSetListForMission final
{
public:
	TSoftClassPtr<class UClass>                   MissionClass;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMissionObjectiveSet>> SoftObjectiveSetList;                              // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_GetSoftObjectiveSetListForMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_GetSoftObjectiveSetListForMission");
static_assert(sizeof(MissionFunctionLibrary_GetSoftObjectiveSetListForMission) == 0x000038, "Wrong size on MissionFunctionLibrary_GetSoftObjectiveSetListForMission");
static_assert(offsetof(MissionFunctionLibrary_GetSoftObjectiveSetListForMission, MissionClass) == 0x000000, "Member 'MissionFunctionLibrary_GetSoftObjectiveSetListForMission::MissionClass' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_GetSoftObjectiveSetListForMission, SoftObjectiveSetList) == 0x000028, "Member 'MissionFunctionLibrary_GetSoftObjectiveSetListForMission::SoftObjectiveSetList' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.JumpToMissionObjectiveSetRef
// 0x0058 (0x0058 - 0x0000)
struct MissionFunctionLibrary_JumpToMissionObjectiveSetRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveSetReference          ObjectiveSetRef;                                   // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsBranchingMission;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionFunctionLibrary_JumpToMissionObjectiveSetRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_JumpToMissionObjectiveSetRef");
static_assert(sizeof(MissionFunctionLibrary_JumpToMissionObjectiveSetRef) == 0x000058, "Wrong size on MissionFunctionLibrary_JumpToMissionObjectiveSetRef");
static_assert(offsetof(MissionFunctionLibrary_JumpToMissionObjectiveSetRef, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_JumpToMissionObjectiveSetRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_JumpToMissionObjectiveSetRef, ObjectiveSetRef) == 0x000008, "Member 'MissionFunctionLibrary_JumpToMissionObjectiveSetRef::ObjectiveSetRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_JumpToMissionObjectiveSetRef, bIsBranchingMission) == 0x000050, "Member 'MissionFunctionLibrary_JumpToMissionObjectiveSetRef::bIsBranchingMission' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.ResolveMissionSoftClassReference
// 0x0030 (0x0030 - 0x0000)
struct MissionFunctionLibrary_ResolveMissionSoftClassReference final
{
public:
	TSoftClassPtr<class UClass>                   Mission;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_ResolveMissionSoftClassReference) == 0x000008, "Wrong alignment on MissionFunctionLibrary_ResolveMissionSoftClassReference");
static_assert(sizeof(MissionFunctionLibrary_ResolveMissionSoftClassReference) == 0x000030, "Wrong size on MissionFunctionLibrary_ResolveMissionSoftClassReference");
static_assert(offsetof(MissionFunctionLibrary_ResolveMissionSoftClassReference, Mission) == 0x000000, "Member 'MissionFunctionLibrary_ResolveMissionSoftClassReference::Mission' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_ResolveMissionSoftClassReference, ReturnValue) == 0x000028, "Member 'MissionFunctionLibrary_ResolveMissionSoftClassReference::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.SendMissionEvent
// 0x0020 (0x0020 - 0x0000)
struct MissionFunctionLibrary_SendMissionEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionEventReference                 EventRef;                                          // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                OptionalContext;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_SendMissionEvent) == 0x000008, "Wrong alignment on MissionFunctionLibrary_SendMissionEvent");
static_assert(sizeof(MissionFunctionLibrary_SendMissionEvent) == 0x000020, "Wrong size on MissionFunctionLibrary_SendMissionEvent");
static_assert(offsetof(MissionFunctionLibrary_SendMissionEvent, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_SendMissionEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_SendMissionEvent, EventRef) == 0x000008, "Member 'MissionFunctionLibrary_SendMissionEvent::EventRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_SendMissionEvent, OptionalContext) == 0x000018, "Member 'MissionFunctionLibrary_SendMissionEvent::OptionalContext' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.SendMissionEventWithContext
// 0x0020 (0x0020 - 0x0000)
struct MissionFunctionLibrary_SendMissionEventWithContext final
{
public:
	struct FMissionEventReference                 EventRef;                                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalContext;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_SendMissionEventWithContext) == 0x000008, "Wrong alignment on MissionFunctionLibrary_SendMissionEventWithContext");
static_assert(sizeof(MissionFunctionLibrary_SendMissionEventWithContext) == 0x000020, "Wrong size on MissionFunctionLibrary_SendMissionEventWithContext");
static_assert(offsetof(MissionFunctionLibrary_SendMissionEventWithContext, EventRef) == 0x000000, "Member 'MissionFunctionLibrary_SendMissionEventWithContext::EventRef' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_SendMissionEventWithContext, WorldContextObject) == 0x000010, "Member 'MissionFunctionLibrary_SendMissionEventWithContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_SendMissionEventWithContext, OptionalContext) == 0x000018, "Member 'MissionFunctionLibrary_SendMissionEventWithContext::OptionalContext' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.TrackActiveMission
// 0x0010 (0x0010 - 0x0000)
struct MissionFunctionLibrary_TrackActiveMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_TrackActiveMission) == 0x000008, "Wrong alignment on MissionFunctionLibrary_TrackActiveMission");
static_assert(sizeof(MissionFunctionLibrary_TrackActiveMission) == 0x000010, "Wrong size on MissionFunctionLibrary_TrackActiveMission");
static_assert(offsetof(MissionFunctionLibrary_TrackActiveMission, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_TrackActiveMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_TrackActiveMission, MissionClass) == 0x000008, "Member 'MissionFunctionLibrary_TrackActiveMission::MissionClass' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.TrackNextActiveMissionInList
// 0x0008 (0x0008 - 0x0000)
struct MissionFunctionLibrary_TrackNextActiveMissionInList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_TrackNextActiveMissionInList) == 0x000008, "Wrong alignment on MissionFunctionLibrary_TrackNextActiveMissionInList");
static_assert(sizeof(MissionFunctionLibrary_TrackNextActiveMissionInList) == 0x000008, "Wrong size on MissionFunctionLibrary_TrackNextActiveMissionInList");
static_assert(offsetof(MissionFunctionLibrary_TrackNextActiveMissionInList, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_TrackNextActiveMissionInList::WorldContextObject' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.TrackPreviousActiveMissionInList
// 0x0008 (0x0008 - 0x0000)
struct MissionFunctionLibrary_TrackPreviousActiveMissionInList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_TrackPreviousActiveMissionInList) == 0x000008, "Wrong alignment on MissionFunctionLibrary_TrackPreviousActiveMissionInList");
static_assert(sizeof(MissionFunctionLibrary_TrackPreviousActiveMissionInList) == 0x000008, "Wrong size on MissionFunctionLibrary_TrackPreviousActiveMissionInList");
static_assert(offsetof(MissionFunctionLibrary_TrackPreviousActiveMissionInList, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_TrackPreviousActiveMissionInList::WorldContextObject' has a wrong offset!");

// Function GbxMission.MissionFunctionLibrary.UpdateMissionObjectiveRef
// 0x0038 (0x0038 - 0x0000)
struct MissionFunctionLibrary_UpdateMissionObjectiveRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionObjectiveReference             ObjectiveRef;                                      // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionFunctionLibrary_UpdateMissionObjectiveRef) == 0x000008, "Wrong alignment on MissionFunctionLibrary_UpdateMissionObjectiveRef");
static_assert(sizeof(MissionFunctionLibrary_UpdateMissionObjectiveRef) == 0x000038, "Wrong size on MissionFunctionLibrary_UpdateMissionObjectiveRef");
static_assert(offsetof(MissionFunctionLibrary_UpdateMissionObjectiveRef, WorldContextObject) == 0x000000, "Member 'MissionFunctionLibrary_UpdateMissionObjectiveRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MissionFunctionLibrary_UpdateMissionObjectiveRef, ObjectiveRef) == 0x000008, "Member 'MissionFunctionLibrary_UpdateMissionObjectiveRef::ObjectiveRef' has a wrong offset!");

// Function GbxMission.MissionLocationData.EnabledConditionRequiresNativeClass
// 0x0001 (0x0001 - 0x0000)
struct MissionLocationData_EnabledConditionRequiresNativeClass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionLocationData_EnabledConditionRequiresNativeClass) == 0x000001, "Wrong alignment on MissionLocationData_EnabledConditionRequiresNativeClass");
static_assert(sizeof(MissionLocationData_EnabledConditionRequiresNativeClass) == 0x000001, "Wrong size on MissionLocationData_EnabledConditionRequiresNativeClass");
static_assert(offsetof(MissionLocationData_EnabledConditionRequiresNativeClass, ReturnValue) == 0x000000, "Member 'MissionLocationData_EnabledConditionRequiresNativeClass::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionLocationData.GetRequiredInterface
// 0x0008 (0x0008 - 0x0000)
struct MissionLocationData_GetRequiredInterface final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionLocationData_GetRequiredInterface) == 0x000008, "Wrong alignment on MissionLocationData_GetRequiredInterface");
static_assert(sizeof(MissionLocationData_GetRequiredInterface) == 0x000008, "Wrong size on MissionLocationData_GetRequiredInterface");
static_assert(offsetof(MissionLocationData_GetRequiredInterface, ReturnValue) == 0x000000, "Member 'MissionLocationData_GetRequiredInterface::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionObjectiveReferenceInterface.GetMissionObjectiveReferences
// 0x0010 (0x0010 - 0x0000)
struct MissionObjectiveReferenceInterface_GetMissionObjectiveReferences final
{
public:
	TArray<struct FMissionObjectiveReference>     OutMissionObjectives;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjectiveReferenceInterface_GetMissionObjectiveReferences) == 0x000008, "Wrong alignment on MissionObjectiveReferenceInterface_GetMissionObjectiveReferences");
static_assert(sizeof(MissionObjectiveReferenceInterface_GetMissionObjectiveReferences) == 0x000010, "Wrong size on MissionObjectiveReferenceInterface_GetMissionObjectiveReferences");
static_assert(offsetof(MissionObjectiveReferenceInterface_GetMissionObjectiveReferences, OutMissionObjectives) == 0x000000, "Member 'MissionObjectiveReferenceInterface_GetMissionObjectiveReferences::OutMissionObjectives' has a wrong offset!");

// Function GbxMission.MissionObjectiveSetReferenceInterface.GetMissionObjectiveSetReferences
// 0x0010 (0x0010 - 0x0000)
struct MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences final
{
public:
	TArray<struct FMissionObjectiveSetReference>  OutMissionObjectiveSets;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences) == 0x000008, "Wrong alignment on MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences");
static_assert(sizeof(MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences) == 0x000010, "Wrong size on MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences");
static_assert(offsetof(MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences, OutMissionObjectiveSets) == 0x000000, "Member 'MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences::OutMissionObjectiveSets' has a wrong offset!");

// Function GbxMission.MissionObserverComponent.GetUpdateEventObject
// 0x0048 (0x0048 - 0x0000)
struct MissionObserverComponent_GetUpdateEventObject final
{
public:
	TArray<class UObject*>                        OutMissionInitialized;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutMissionUpdate;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutMissionObjectiveUpdate;                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutMissionObjectiveSetUpdate;                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionObserverComponent_GetUpdateEventObject) == 0x000008, "Wrong alignment on MissionObserverComponent_GetUpdateEventObject");
static_assert(sizeof(MissionObserverComponent_GetUpdateEventObject) == 0x000048, "Wrong size on MissionObserverComponent_GetUpdateEventObject");
static_assert(offsetof(MissionObserverComponent_GetUpdateEventObject, OutMissionInitialized) == 0x000000, "Member 'MissionObserverComponent_GetUpdateEventObject::OutMissionInitialized' has a wrong offset!");
static_assert(offsetof(MissionObserverComponent_GetUpdateEventObject, OutMissionUpdate) == 0x000010, "Member 'MissionObserverComponent_GetUpdateEventObject::OutMissionUpdate' has a wrong offset!");
static_assert(offsetof(MissionObserverComponent_GetUpdateEventObject, OutMissionObjectiveUpdate) == 0x000020, "Member 'MissionObserverComponent_GetUpdateEventObject::OutMissionObjectiveUpdate' has a wrong offset!");
static_assert(offsetof(MissionObserverComponent_GetUpdateEventObject, OutMissionObjectiveSetUpdate) == 0x000030, "Member 'MissionObserverComponent_GetUpdateEventObject::OutMissionObjectiveSetUpdate' has a wrong offset!");
static_assert(offsetof(MissionObserverComponent_GetUpdateEventObject, ReturnValue) == 0x000040, "Member 'MissionObserverComponent_GetUpdateEventObject::ReturnValue' has a wrong offset!");

// Function GbxMission.MissionObserverComponent.ObserverMission
// 0x0008 (0x0008 - 0x0000)
struct MissionObserverComponent_ObserverMission final
{
public:
	TSubclassOf<class UMission>                   MissionClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionObserverComponent_ObserverMission) == 0x000008, "Wrong alignment on MissionObserverComponent_ObserverMission");
static_assert(sizeof(MissionObserverComponent_ObserverMission) == 0x000008, "Wrong size on MissionObserverComponent_ObserverMission");
static_assert(offsetof(MissionObserverComponent_ObserverMission, MissionClass) == 0x000000, "Member 'MissionObserverComponent_ObserverMission::MissionClass' has a wrong offset!");

}

