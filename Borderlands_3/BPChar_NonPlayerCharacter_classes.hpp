#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_NonPlayerCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GbxInventory_structs.hpp"
#include "BPChar_AI_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPChar_NonPlayerCharacter.BPChar_NonPlayerCharacter_C
// 0x0240 (0x2590 - 0x2350)
class ABPChar_NonPlayerCharacter_C : public ABPChar_AI_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BPChar_NonPlayerCharacter_C;        // 0x2348(0x0008)(Transient, DuplicateTransient)
	class UNPCInteractionComponent*               NPCInteraction;                                    // 0x2350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocketComponent*                       Waypoint;                                          // 0x2358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTerritoryComponent*                    Territory;                                         // 0x2360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCoverUserComponent*                    CoverUser;                                         // 0x2368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMinimapIconComponent*               OakMinimapIcon;                                    // 0x2370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SocketThingHeld;                                   // 0x2378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TempMissionTextActor;                              // 0x2380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TempMissionTextBackground;                         // 0x2388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMissionIconComponent*               OakMissionIcon;                                    // 0x2390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUsableComponent*                       Usable;                                            // 0x2398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMissionObserverComponent*              MissionObserver;                                   // 0x23A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMissionDirectorComponent*           OakMissionDirector;                                // 0x23A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x23B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           TextColor;                                         // 0x23C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   TextColorText;                                     // 0x23D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TextSize;                                          // 0x23F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextDuration;                                      // 0x23F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FacePlayer;                                        // 0x23F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23F9[0x7];                                     // 0x23F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnUsed;                                            // 0x2400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UDialogScriptData*                      GenericDialogScript;                               // 0x2410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UDialogTimeSlotData*>            GenericDialogTimeSlots;                            // 0x2418(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          CanUseSmartObjects;                                // 0x2428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Patrol;                                            // 0x2429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          CanLookAtPlayer;                                   // 0x242A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_242B[0x5];                                     // 0x242B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ThingToHold_0;                                     // 0x2430(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OriginalThingMaterial;                             // 0x2438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanEngageInCombat;                                 // 0x2440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2441[0x7];                                     // 0x2441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   NPCSawThePlayer;                                   // 0x2448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HandHeldOut;                                       // 0x2458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HandHeldOutToGive;                                 // 0x2459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245A[0x6];                                     // 0x245A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADroppedInventoryItemPickup*>    LootAttachment;                                    // 0x2460(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate)
	struct FItemPoolInfo                          ItemPoolInfo;                                      // 0x2470(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	UMulticastDelegateProperty_                   ItemTakenByPlayer;                                 // 0x24F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TimerLoop;                                         // 0x2508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2509[0x3];                                     // 0x2509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextTimer;                                         // 0x250C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            User;                                              // 0x2510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GiveTakeSocket;                                    // 0x2518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ThingHeldOffset;                                   // 0x2520(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PutAwayDelay;                                      // 0x2550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TakeOutDelay;                                      // 0x2554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldIgnoreEnemyTargets;                          // 0x2558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2559[0x7];                                     // 0x2559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               GiveTakeAttractParticle;                           // 0x2560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   SpawnedLootToGive;                                 // 0x2568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TerritoryEverywhere;                               // 0x2578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          MissionBrainEnabled;                               // 0x2579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HandHeldOutForTakeThenGive;                        // 0x257A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_257B[0x5];                                     // 0x257B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ADroppedInventoryItemPickup*            SpawnedLoot;                                       // 0x2580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanReviveOthers;                                   // 0x2588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          ShouldNeverHideWeapon;                             // 0x2589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          AlternativeGiveTake;                               // 0x258A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_258B[0x1];                                     // 0x258B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EngagePlayerDistanceVar;                           // 0x258C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void NPCEngageRange(float UnitIn);
	void OnRep_ItemPoolInfo();
	void NPCIgnoreEnemies(bool BoolValue);
	void NPCUseSmartObjects(bool UseSmartObjects);
	void NPCCanPatrol(bool CanPatrol);
	void NPCEngagePlayerWhenIdle(bool LookAtPlayer);
	void NPCEngageInCombat(bool EngageInCombat);
	void ChangeBehaviorTree_LookAt(class AAIController* NPC_AIController, bool Enable);
	void PlayerUsedMe(const struct FUseEvent& UseEvent);
	void ClearText();
	void SetText(const class FText& Text_0, float TextSize_0, float Duration, const struct FLinearColor& TextColor_0, bool FacePlayer_0);
	void UserConstructionScript();
	void GbxAsyncRequest_PickupSpawned_57F45FEF4D675ABCF62E0A81821A5187(class ADroppedInventoryItemPickup* Pickup);
	void NPCUnhideSword();
	void NPCHideSword();
	void NPCConstrainUsable();
	void NPCResetUsable();
	void ForceDefaultCombatNPCDownstate();
	void ForceNPCRevive();
	void HoldHandOutToTakeSomething();
	void GiveSomethingToThePlayer();
	void BeingUsed(const struct FUseEvent& UseEvent);
	void LootableTaken(class AActor* DestroyedActor);
	void HoldHandTakeAll();
	void HoldHandGiveAll();
	void TakingThingAll();
	void PlayerTakingAll();
	void LockNPCAI();
	void UnlockNPCAI();
	void TakeThingThenGiveBack();
	void ExamineAll();
	void EngageInCombat(bool EngageInCombat_0);
	void CanPatrol(bool CanPatrol_0);
	void UseSmartObjects(bool UseSmartObjects_0);
	void ThingToHold(class UStaticMesh* TheThingToHold, const struct FItemPoolInfo& ThePickupToHold, const struct FTransform& OffsetTransform, float PutAwayOffset, float TakeOutOffset, bool UseAltAnimation);
	void NPCHideWeapon();
	void NPCUnhideWeapon();
	void IgnoreEnemies(bool IgnoreEnemies_0);
	void NPCCanReviveOthers(bool CanReviveOthers_0);
	void BndEvt__Stance_K2Node_ComponentBoundEvent_0_StanceChangedEvent__DelegateSignature_BPChar_NonPlayerCharacter(const struct FStanceChangedEventArgs& Args);
	void EngagePlayerWhenIdle(bool LookAtPlayer);
	void SetNPCEngagePlayerRange(float Units);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_24_UsableUsedOnChannelSignature__DelegateSignature_BPChar_Typhon_UNIX1509007700(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void DisableMissionBrain();
	void BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedSignature__DelegateSignature_BPChar_NonPlayerCharacter(const struct FUseEvent& UseEvent);
	void InitializeGenericDialog();
	void OpenGate();
	void TextClear(float Time);
	void CloseGate();
	void TempMissionTextTck();
	void SetMissionDebugText(const class FText& Text_0, float TextSize_0, float Duration, const struct FLinearColor& TextColor_0, bool FacePlayer_0);
	void TextUpdating();
	void SawThePlayer();
	void DespawnActivate();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BPChar_NonPlayerCharacter(int32 EntryPoint);
	void SpawnedLootToGive__DelegateSignature(class ADroppedInventoryItemPickup* Loot);
	void ItemTakenByPlayer__DelegateSignature(class AOakCharacter_Player* Player);
	void NPCSawThePlayer__DelegateSignature();
	void OnUsed__DelegateSignature(const struct FUseEvent& UseEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_NonPlayerCharacter_C">();
	}
	static class ABPChar_NonPlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_NonPlayerCharacter_C>();
	}
};
static_assert(alignof(ABPChar_NonPlayerCharacter_C) == 0x000010, "Wrong alignment on ABPChar_NonPlayerCharacter_C");
static_assert(sizeof(ABPChar_NonPlayerCharacter_C) == 0x002590, "Wrong size on ABPChar_NonPlayerCharacter_C");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, UberGraphFrame_BPChar_NonPlayerCharacter_C) == 0x002348, "Member 'ABPChar_NonPlayerCharacter_C::UberGraphFrame_BPChar_NonPlayerCharacter_C' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, NPCInteraction) == 0x002350, "Member 'ABPChar_NonPlayerCharacter_C::NPCInteraction' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, Waypoint) == 0x002358, "Member 'ABPChar_NonPlayerCharacter_C::Waypoint' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, Territory) == 0x002360, "Member 'ABPChar_NonPlayerCharacter_C::Territory' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, CoverUser) == 0x002368, "Member 'ABPChar_NonPlayerCharacter_C::CoverUser' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, OakMinimapIcon) == 0x002370, "Member 'ABPChar_NonPlayerCharacter_C::OakMinimapIcon' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, SocketThingHeld) == 0x002378, "Member 'ABPChar_NonPlayerCharacter_C::SocketThingHeld' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TempMissionTextActor) == 0x002380, "Member 'ABPChar_NonPlayerCharacter_C::TempMissionTextActor' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TempMissionTextBackground) == 0x002388, "Member 'ABPChar_NonPlayerCharacter_C::TempMissionTextBackground' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, OakMissionIcon) == 0x002390, "Member 'ABPChar_NonPlayerCharacter_C::OakMissionIcon' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, Usable) == 0x002398, "Member 'ABPChar_NonPlayerCharacter_C::Usable' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, MissionObserver) == 0x0023A0, "Member 'ABPChar_NonPlayerCharacter_C::MissionObserver' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, OakMissionDirector) == 0x0023A8, "Member 'ABPChar_NonPlayerCharacter_C::OakMissionDirector' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, Text) == 0x0023B0, "Member 'ABPChar_NonPlayerCharacter_C::Text' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TextColor) == 0x0023C8, "Member 'ABPChar_NonPlayerCharacter_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TextColorText) == 0x0023D8, "Member 'ABPChar_NonPlayerCharacter_C::TextColorText' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TextSize) == 0x0023F0, "Member 'ABPChar_NonPlayerCharacter_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TextDuration) == 0x0023F4, "Member 'ABPChar_NonPlayerCharacter_C::TextDuration' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, FacePlayer) == 0x0023F8, "Member 'ABPChar_NonPlayerCharacter_C::FacePlayer' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, OnUsed) == 0x002400, "Member 'ABPChar_NonPlayerCharacter_C::OnUsed' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, GenericDialogScript) == 0x002410, "Member 'ABPChar_NonPlayerCharacter_C::GenericDialogScript' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, GenericDialogTimeSlots) == 0x002418, "Member 'ABPChar_NonPlayerCharacter_C::GenericDialogTimeSlots' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, CanUseSmartObjects) == 0x002428, "Member 'ABPChar_NonPlayerCharacter_C::CanUseSmartObjects' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, Patrol) == 0x002429, "Member 'ABPChar_NonPlayerCharacter_C::Patrol' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, CanLookAtPlayer) == 0x00242A, "Member 'ABPChar_NonPlayerCharacter_C::CanLookAtPlayer' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, ThingToHold_0) == 0x002430, "Member 'ABPChar_NonPlayerCharacter_C::ThingToHold_0' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, OriginalThingMaterial) == 0x002438, "Member 'ABPChar_NonPlayerCharacter_C::OriginalThingMaterial' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, CanEngageInCombat) == 0x002440, "Member 'ABPChar_NonPlayerCharacter_C::CanEngageInCombat' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, NPCSawThePlayer) == 0x002448, "Member 'ABPChar_NonPlayerCharacter_C::NPCSawThePlayer' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, HandHeldOut) == 0x002458, "Member 'ABPChar_NonPlayerCharacter_C::HandHeldOut' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, HandHeldOutToGive) == 0x002459, "Member 'ABPChar_NonPlayerCharacter_C::HandHeldOutToGive' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, LootAttachment) == 0x002460, "Member 'ABPChar_NonPlayerCharacter_C::LootAttachment' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, ItemPoolInfo) == 0x002470, "Member 'ABPChar_NonPlayerCharacter_C::ItemPoolInfo' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, ItemTakenByPlayer) == 0x0024F8, "Member 'ABPChar_NonPlayerCharacter_C::ItemTakenByPlayer' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TimerLoop) == 0x002508, "Member 'ABPChar_NonPlayerCharacter_C::TimerLoop' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TextTimer) == 0x00250C, "Member 'ABPChar_NonPlayerCharacter_C::TextTimer' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, User) == 0x002510, "Member 'ABPChar_NonPlayerCharacter_C::User' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, GiveTakeSocket) == 0x002518, "Member 'ABPChar_NonPlayerCharacter_C::GiveTakeSocket' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, ThingHeldOffset) == 0x002520, "Member 'ABPChar_NonPlayerCharacter_C::ThingHeldOffset' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, PutAwayDelay) == 0x002550, "Member 'ABPChar_NonPlayerCharacter_C::PutAwayDelay' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TakeOutDelay) == 0x002554, "Member 'ABPChar_NonPlayerCharacter_C::TakeOutDelay' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, ShouldIgnoreEnemyTargets) == 0x002558, "Member 'ABPChar_NonPlayerCharacter_C::ShouldIgnoreEnemyTargets' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, GiveTakeAttractParticle) == 0x002560, "Member 'ABPChar_NonPlayerCharacter_C::GiveTakeAttractParticle' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, SpawnedLootToGive) == 0x002568, "Member 'ABPChar_NonPlayerCharacter_C::SpawnedLootToGive' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, TerritoryEverywhere) == 0x002578, "Member 'ABPChar_NonPlayerCharacter_C::TerritoryEverywhere' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, MissionBrainEnabled) == 0x002579, "Member 'ABPChar_NonPlayerCharacter_C::MissionBrainEnabled' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, HandHeldOutForTakeThenGive) == 0x00257A, "Member 'ABPChar_NonPlayerCharacter_C::HandHeldOutForTakeThenGive' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, SpawnedLoot) == 0x002580, "Member 'ABPChar_NonPlayerCharacter_C::SpawnedLoot' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, CanReviveOthers) == 0x002588, "Member 'ABPChar_NonPlayerCharacter_C::CanReviveOthers' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, ShouldNeverHideWeapon) == 0x002589, "Member 'ABPChar_NonPlayerCharacter_C::ShouldNeverHideWeapon' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, AlternativeGiveTake) == 0x00258A, "Member 'ABPChar_NonPlayerCharacter_C::AlternativeGiveTake' has a wrong offset!");
static_assert(offsetof(ABPChar_NonPlayerCharacter_C, EngagePlayerDistanceVar) == 0x00258C, "Member 'ABPChar_NonPlayerCharacter_C::EngagePlayerDistanceVar' has a wrong offset!");

}

