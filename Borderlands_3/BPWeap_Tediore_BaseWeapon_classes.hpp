#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_Tediore_BaseWeapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPWeap_BaseWeapon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWeap_Tediore_BaseWeapon.BPWeap_Tediore_BaseWeapon_C
// 0x0088 (0x0A58 - 0x09D0)
class ABPWeap_Tediore_BaseWeapon_C : public ABPWeap_BaseWeapon_C
{
public:
	uint8                                         Pad_9CC[0x4];                                      // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BPWeap_Tediore_BaseWeapon_C;        // 0x09D0(0x0008)(Transient, DuplicateTransient)
	class UGbxActionComponent*                    GbxAction;                                         // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         ModMIRV;                                           // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModHoming;                                         // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModBouncy;                                         // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModSticky;                                         // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModShooting;                                       // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModTargetCombo;                                    // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModStabilizer;                                     // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModProximity;                                      // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NumMirvProjectiles;                                // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A04[0x4];                                      // 0x0A04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Projectile_ThrownWeapon;                           // 0x0A08(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideLegs;                                          // 0x0A10(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A11[0x7];                                      // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CachedMaterial;                                    // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModETech;                                          // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TED_DamageRadius;                                  // 0x0A24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedLoadedAmmo;                                  // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2C[0x4];                                      // 0x0A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LegBone;                                           // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TEMP_SludgeHitActor;                               // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TEMP_SludgeHitLocation;                            // 0x0A40(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TedioreThrowType;                                  // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TED_DamageScale;                                   // 0x0A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TED_CanTalk;                                       // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPWeap_Tediore_BaseWeapon(int32 EntryPoint);
	void ThrowTypeSideLR();
	void ThrowTypeUnderhand();
	void ThrowTypeSideRL();
	void ThrowTypeOverhand();
	void WeaponAttached();
	void Notify_ReloadStarted(bool bAutoReload);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void TedioreThrowWeapon(class AActor** ThrownProjectile);
	void TedioreHideWeapon();
	void TedioreShowWeapon();
	void OnRep_HideLegs();
	void Tediore_WeaponData(float* DamageRadius, class UClass** DamageTypeClass, int32* NumMirvProjectiles_0, float* FireRate, float* LoadedAmmo, int32* ThrowType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWeap_Tediore_BaseWeapon_C">();
	}
	static class ABPWeap_Tediore_BaseWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPWeap_Tediore_BaseWeapon_C>();
	}
};
static_assert(alignof(ABPWeap_Tediore_BaseWeapon_C) == 0x000008, "Wrong alignment on ABPWeap_Tediore_BaseWeapon_C");
static_assert(sizeof(ABPWeap_Tediore_BaseWeapon_C) == 0x000A58, "Wrong size on ABPWeap_Tediore_BaseWeapon_C");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, UberGraphFrame_BPWeap_Tediore_BaseWeapon_C) == 0x0009D0, "Member 'ABPWeap_Tediore_BaseWeapon_C::UberGraphFrame_BPWeap_Tediore_BaseWeapon_C' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, GbxAction) == 0x0009D8, "Member 'ABPWeap_Tediore_BaseWeapon_C::GbxAction' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModMIRV) == 0x0009E0, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModMIRV' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModHoming) == 0x0009E4, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModHoming' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModBouncy) == 0x0009E8, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModBouncy' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModSticky) == 0x0009EC, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModSticky' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModShooting) == 0x0009F0, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModShooting' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModTargetCombo) == 0x0009F4, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModTargetCombo' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModStabilizer) == 0x0009F8, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModStabilizer' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModProximity) == 0x0009FC, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModProximity' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, NumMirvProjectiles) == 0x000A00, "Member 'ABPWeap_Tediore_BaseWeapon_C::NumMirvProjectiles' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, Projectile_ThrownWeapon) == 0x000A08, "Member 'ABPWeap_Tediore_BaseWeapon_C::Projectile_ThrownWeapon' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, HideLegs) == 0x000A10, "Member 'ABPWeap_Tediore_BaseWeapon_C::HideLegs' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, CachedMaterial) == 0x000A18, "Member 'ABPWeap_Tediore_BaseWeapon_C::CachedMaterial' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, ModETech) == 0x000A20, "Member 'ABPWeap_Tediore_BaseWeapon_C::ModETech' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, TED_DamageRadius) == 0x000A24, "Member 'ABPWeap_Tediore_BaseWeapon_C::TED_DamageRadius' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, CachedLoadedAmmo) == 0x000A28, "Member 'ABPWeap_Tediore_BaseWeapon_C::CachedLoadedAmmo' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, LegBone) == 0x000A30, "Member 'ABPWeap_Tediore_BaseWeapon_C::LegBone' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, TEMP_SludgeHitActor) == 0x000A38, "Member 'ABPWeap_Tediore_BaseWeapon_C::TEMP_SludgeHitActor' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, TEMP_SludgeHitLocation) == 0x000A40, "Member 'ABPWeap_Tediore_BaseWeapon_C::TEMP_SludgeHitLocation' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, TedioreThrowType) == 0x000A4C, "Member 'ABPWeap_Tediore_BaseWeapon_C::TedioreThrowType' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, TED_DamageScale) == 0x000A50, "Member 'ABPWeap_Tediore_BaseWeapon_C::TED_DamageScale' has a wrong offset!");
static_assert(offsetof(ABPWeap_Tediore_BaseWeapon_C, TED_CanTalk) == 0x000A54, "Member 'ABPWeap_Tediore_BaseWeapon_C::TED_CanTalk' has a wrong offset!");

}

