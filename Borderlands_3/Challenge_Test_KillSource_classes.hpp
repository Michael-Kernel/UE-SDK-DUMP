#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_Test_KillSource

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Challenge_Test_KillSource.Challenge_Test_KillSource_C
// 0x0020 (0x0280 - 0x0260)
class UChallenge_Test_KillSource_C final : public UOakChallenge
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(Transient, DuplicateTransient)
	struct FStatusEffectQuery                     StatusToFind;                                      // 0x0268(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_Challenge_Test_KillSource(int32 EntryPoint);
	void CheckKillCondition(class UDamageComponent* DamageReceiver, struct FCausedDeathDetails& DeathDetails);
	void CheckDamageTaken(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details);
	void CheckPickUpItem(class AActor* PickedUpActor, int32 Quantity);
	void CheckDamageDone(class AActor* DamageInstigator, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details);
	void CheckModifiedShot(class AWeapon* Weapon, const struct FWeaponShotModifierData& Data);

	void OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter) const;
	void SetBinds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Challenge_Test_KillSource_C">();
	}
	static class UChallenge_Test_KillSource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallenge_Test_KillSource_C>();
	}
};
static_assert(alignof(UChallenge_Test_KillSource_C) == 0x000008, "Wrong alignment on UChallenge_Test_KillSource_C");
static_assert(sizeof(UChallenge_Test_KillSource_C) == 0x000280, "Wrong size on UChallenge_Test_KillSource_C");
static_assert(offsetof(UChallenge_Test_KillSource_C, UberGraphFrame) == 0x000260, "Member 'UChallenge_Test_KillSource_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallenge_Test_KillSource_C, StatusToFind) == 0x000268, "Member 'UChallenge_Test_KillSource_C::StatusToFind' has a wrong offset!");

}

