#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Nog

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPI_Nog.BPI_Nog_C.Nog_DeployLaserWire
// 0x0010 (0x0010 - 0x0000)
struct BPI_Nog_C_Nog_DeployLaserWire final
{
public:
	int32                                         WhichWave;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MyTarget;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Nog_C_Nog_DeployLaserWire) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_DeployLaserWire");
static_assert(sizeof(BPI_Nog_C_Nog_DeployLaserWire) == 0x000010, "Wrong size on BPI_Nog_C_Nog_DeployLaserWire");
static_assert(offsetof(BPI_Nog_C_Nog_DeployLaserWire, WhichWave) == 0x000000, "Member 'BPI_Nog_C_Nog_DeployLaserWire::WhichWave' has a wrong offset!");
static_assert(offsetof(BPI_Nog_C_Nog_DeployLaserWire, MyTarget) == 0x000008, "Member 'BPI_Nog_C_Nog_DeployLaserWire::MyTarget' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_MultiTargetAttack_GetTarget
// 0x0018 (0x0018 - 0x0000)
struct BPI_Nog_C_Nog_MultiTargetAttack_GetTarget final
{
public:
	int32                                         TargetIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalDefaultTarget;                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MyTarget;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Nog_C_Nog_MultiTargetAttack_GetTarget) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_MultiTargetAttack_GetTarget");
static_assert(sizeof(BPI_Nog_C_Nog_MultiTargetAttack_GetTarget) == 0x000018, "Wrong size on BPI_Nog_C_Nog_MultiTargetAttack_GetTarget");
static_assert(offsetof(BPI_Nog_C_Nog_MultiTargetAttack_GetTarget, TargetIndex) == 0x000000, "Member 'BPI_Nog_C_Nog_MultiTargetAttack_GetTarget::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_Nog_C_Nog_MultiTargetAttack_GetTarget, OptionalDefaultTarget) == 0x000008, "Member 'BPI_Nog_C_Nog_MultiTargetAttack_GetTarget::OptionalDefaultTarget' has a wrong offset!");
static_assert(offsetof(BPI_Nog_C_Nog_MultiTargetAttack_GetTarget, MyTarget) == 0x000010, "Member 'BPI_Nog_C_Nog_MultiTargetAttack_GetTarget::MyTarget' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_GetDroneContainer
// 0x0008 (0x0008 - 0x0000)
struct BPI_Nog_C_Nog_GetDroneContainer final
{
public:
	class UOakNogDroneContainerComponent*         DroneContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Nog_C_Nog_GetDroneContainer) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_GetDroneContainer");
static_assert(sizeof(BPI_Nog_C_Nog_GetDroneContainer) == 0x000008, "Wrong size on BPI_Nog_C_Nog_GetDroneContainer");
static_assert(offsetof(BPI_Nog_C_Nog_GetDroneContainer, DroneContainer) == 0x000000, "Member 'BPI_Nog_C_Nog_GetDroneContainer::DroneContainer' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_GetDroneHealthPctOfNog
// 0x0004 (0x0004 - 0x0000)
struct BPI_Nog_C_Nog_GetDroneHealthPctOfNog final
{
public:
	float                                         HealthPctOfNog;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Nog_C_Nog_GetDroneHealthPctOfNog) == 0x000004, "Wrong alignment on BPI_Nog_C_Nog_GetDroneHealthPctOfNog");
static_assert(sizeof(BPI_Nog_C_Nog_GetDroneHealthPctOfNog) == 0x000004, "Wrong size on BPI_Nog_C_Nog_GetDroneHealthPctOfNog");
static_assert(offsetof(BPI_Nog_C_Nog_GetDroneHealthPctOfNog, HealthPctOfNog) == 0x000000, "Member 'BPI_Nog_C_Nog_GetDroneHealthPctOfNog::HealthPctOfNog' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_GetDroneMaterial
// 0x0008 (0x0008 - 0x0000)
struct BPI_Nog_C_Nog_GetDroneMaterial final
{
public:
	class UMaterialInterface*                     DroneMaterial;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Nog_C_Nog_GetDroneMaterial) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_GetDroneMaterial");
static_assert(sizeof(BPI_Nog_C_Nog_GetDroneMaterial) == 0x000008, "Wrong size on BPI_Nog_C_Nog_GetDroneMaterial");
static_assert(offsetof(BPI_Nog_C_Nog_GetDroneMaterial, DroneMaterial) == 0x000000, "Member 'BPI_Nog_C_Nog_GetDroneMaterial::DroneMaterial' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_GetMultiTargetAttackList
// 0x0010 (0x0010 - 0x0000)
struct BPI_Nog_C_Nog_GetMultiTargetAttackList final
{
public:
	TArray<class AActor*>                         TargetList;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
};
static_assert(alignof(BPI_Nog_C_Nog_GetMultiTargetAttackList) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_GetMultiTargetAttackList");
static_assert(sizeof(BPI_Nog_C_Nog_GetMultiTargetAttackList) == 0x000010, "Wrong size on BPI_Nog_C_Nog_GetMultiTargetAttackList");
static_assert(offsetof(BPI_Nog_C_Nog_GetMultiTargetAttackList, TargetList) == 0x000000, "Member 'BPI_Nog_C_Nog_GetMultiTargetAttackList::TargetList' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_MindControlled
// 0x0004 (0x0004 - 0x0000)
struct BPI_Nog_C_Nog_MindControlled final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Nog_C_Nog_MindControlled) == 0x000004, "Wrong alignment on BPI_Nog_C_Nog_MindControlled");
static_assert(sizeof(BPI_Nog_C_Nog_MindControlled) == 0x000004, "Wrong size on BPI_Nog_C_Nog_MindControlled");
static_assert(offsetof(BPI_Nog_C_Nog_MindControlled, Duration) == 0x000000, "Member 'BPI_Nog_C_Nog_MindControlled::Duration' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_SetImmuneToVehicleImpact
// 0x0001 (0x0001 - 0x0000)
struct BPI_Nog_C_Nog_SetImmuneToVehicleImpact final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_SetImmuneToVehicleImpact) == 0x000001, "Wrong alignment on BPI_Nog_C_Nog_SetImmuneToVehicleImpact");
static_assert(sizeof(BPI_Nog_C_Nog_SetImmuneToVehicleImpact) == 0x000001, "Wrong size on BPI_Nog_C_Nog_SetImmuneToVehicleImpact");
static_assert(offsetof(BPI_Nog_C_Nog_SetImmuneToVehicleImpact, Enable) == 0x000000, "Member 'BPI_Nog_C_Nog_SetImmuneToVehicleImpact::Enable' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_ToggleStaticDroneBoard
// 0x0001 (0x0001 - 0x0000)
struct BPI_Nog_C_Nog_ToggleStaticDroneBoard final
{
public:
	bool                                          EnableStaticBoard;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_ToggleStaticDroneBoard) == 0x000001, "Wrong alignment on BPI_Nog_C_Nog_ToggleStaticDroneBoard");
static_assert(sizeof(BPI_Nog_C_Nog_ToggleStaticDroneBoard) == 0x000001, "Wrong size on BPI_Nog_C_Nog_ToggleStaticDroneBoard");
static_assert(offsetof(BPI_Nog_C_Nog_ToggleStaticDroneBoard, EnableStaticBoard) == 0x000000, "Member 'BPI_Nog_C_Nog_ToggleStaticDroneBoard::EnableStaticBoard' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_DroneThrow_InHand
// 0x0001 (0x0001 - 0x0000)
struct BPI_Nog_C_Nog_DroneThrow_InHand final
{
public:
	bool                                          IsHandL;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_DroneThrow_InHand) == 0x000001, "Wrong alignment on BPI_Nog_C_Nog_DroneThrow_InHand");
static_assert(sizeof(BPI_Nog_C_Nog_DroneThrow_InHand) == 0x000001, "Wrong size on BPI_Nog_C_Nog_DroneThrow_InHand");
static_assert(offsetof(BPI_Nog_C_Nog_DroneThrow_InHand, IsHandL) == 0x000000, "Member 'BPI_Nog_C_Nog_DroneThrow_InHand::IsHandL' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_DroneThrow_Launch
// 0x0010 (0x0010 - 0x0000)
struct BPI_Nog_C_Nog_DroneThrow_Launch final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHandL;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_DroneThrow_Launch) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_DroneThrow_Launch");
static_assert(sizeof(BPI_Nog_C_Nog_DroneThrow_Launch) == 0x000010, "Wrong size on BPI_Nog_C_Nog_DroneThrow_Launch");
static_assert(offsetof(BPI_Nog_C_Nog_DroneThrow_Launch, MyTarget) == 0x000000, "Member 'BPI_Nog_C_Nog_DroneThrow_Launch::MyTarget' has a wrong offset!");
static_assert(offsetof(BPI_Nog_C_Nog_DroneThrow_Launch, IsHandL) == 0x000008, "Member 'BPI_Nog_C_Nog_DroneThrow_Launch::IsHandL' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_DroneThrow_Interrupt
// 0x0001 (0x0001 - 0x0000)
struct BPI_Nog_C_Nog_DroneThrow_Interrupt final
{
public:
	bool                                          IsHandL;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_DroneThrow_Interrupt) == 0x000001, "Wrong alignment on BPI_Nog_C_Nog_DroneThrow_Interrupt");
static_assert(sizeof(BPI_Nog_C_Nog_DroneThrow_Interrupt) == 0x000001, "Wrong size on BPI_Nog_C_Nog_DroneThrow_Interrupt");
static_assert(offsetof(BPI_Nog_C_Nog_DroneThrow_Interrupt, IsHandL) == 0x000000, "Member 'BPI_Nog_C_Nog_DroneThrow_Interrupt::IsHandL' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_SpawnBuffDrone
// 0x0018 (0x0018 - 0x0000)
struct BPI_Nog_C_Nog_SpawnBuffDrone final
{
public:
	struct FDataTableRowHandle                    NogBuff;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          FromDroneMesh;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_SpawnBuffDrone) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_SpawnBuffDrone");
static_assert(sizeof(BPI_Nog_C_Nog_SpawnBuffDrone) == 0x000018, "Wrong size on BPI_Nog_C_Nog_SpawnBuffDrone");
static_assert(offsetof(BPI_Nog_C_Nog_SpawnBuffDrone, NogBuff) == 0x000000, "Member 'BPI_Nog_C_Nog_SpawnBuffDrone::NogBuff' has a wrong offset!");
static_assert(offsetof(BPI_Nog_C_Nog_SpawnBuffDrone, FromDroneMesh) == 0x000010, "Member 'BPI_Nog_C_Nog_SpawnBuffDrone::FromDroneMesh' has a wrong offset!");

// Function BPI_Nog.BPI_Nog_C.Nog_BuffDrone_NotifyDestroyed
// 0x0010 (0x0010 - 0x0000)
struct BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed final
{
public:
	struct FDataTableRowHandle                    NogBuff;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed) == 0x000008, "Wrong alignment on BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed");
static_assert(sizeof(BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed) == 0x000010, "Wrong size on BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed");
static_assert(offsetof(BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed, NogBuff) == 0x000000, "Member 'BPI_Nog_C_Nog_BuffDrone_NotifyDestroyed::NogBuff' has a wrong offset!");

}

