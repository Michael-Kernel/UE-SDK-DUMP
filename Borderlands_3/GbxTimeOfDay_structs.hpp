#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTimeOfDay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GbxTimeOfDay.ETimeOfDayState
// NumValues: 0x0006
enum class ETimeOfDayState : uint8
{
	None                                     = 0,
	Morning                                  = 1,
	Day                                      = 2,
	Evening                                  = 3,
	Night                                    = 4,
	ETimeOfDayState_MAX                      = 5,
};

// Enum GbxTimeOfDay.ETimeOfDayKeyType
// NumValues: 0x0005
enum class ETimeOfDayKeyType : uint8
{
	None                                     = 0,
	PropertyKey                              = 1,
	EventKey                                 = 2,
	StateKey                                 = 3,
	ETimeOfDayKeyType_MAX                    = 4,
};

// ScriptStruct GbxTimeOfDay.ControlledLight
// 0x0038 (0x0038 - 0x0000)
struct FControlledLight final
{
public:
	float                                         IntensityMultiplier;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALight*                                 LightActor;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x28];                                      // 0x0010(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlledLight) == 0x000008, "Wrong alignment on FControlledLight");
static_assert(sizeof(FControlledLight) == 0x000038, "Wrong size on FControlledLight");
static_assert(offsetof(FControlledLight, IntensityMultiplier) == 0x000000, "Member 'FControlledLight::IntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FControlledLight, LightActor) == 0x000008, "Member 'FControlledLight::LightActor' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.FloatParamLayerCurve
// 0x0080 (0x0080 - 0x0000)
struct FFloatParamLayerCurve final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRichCurve                             ValueCurve;                                        // 0x0008(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatParamLayerCurve) == 0x000008, "Wrong alignment on FFloatParamLayerCurve");
static_assert(sizeof(FFloatParamLayerCurve) == 0x000080, "Wrong size on FFloatParamLayerCurve");
static_assert(offsetof(FFloatParamLayerCurve, ParamName) == 0x000000, "Member 'FFloatParamLayerCurve::ParamName' has a wrong offset!");
static_assert(offsetof(FFloatParamLayerCurve, ValueCurve) == 0x000008, "Member 'FFloatParamLayerCurve::ValueCurve' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.VectorParamLayerCurve
// 0x01D8 (0x01D8 - 0x0000)
struct FVectorParamLayerCurve final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRichCurve                             ValueCurve[0x4];                                   // 0x0008(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x10];                                     // 0x01C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVectorParamLayerCurve) == 0x000008, "Wrong alignment on FVectorParamLayerCurve");
static_assert(sizeof(FVectorParamLayerCurve) == 0x0001D8, "Wrong size on FVectorParamLayerCurve");
static_assert(offsetof(FVectorParamLayerCurve, ParamName) == 0x000000, "Member 'FVectorParamLayerCurve::ParamName' has a wrong offset!");
static_assert(offsetof(FVectorParamLayerCurve, ValueCurve) == 0x000008, "Member 'FVectorParamLayerCurve::ValueCurve' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.LayerParameterCurves
// 0x0020 (0x0020 - 0x0000)
struct FLayerParameterCurves final
{
public:
	TArray<struct FFloatParamLayerCurve>          FloatParams;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParamLayerCurve>         VectorParams;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayerParameterCurves) == 0x000008, "Wrong alignment on FLayerParameterCurves");
static_assert(sizeof(FLayerParameterCurves) == 0x000020, "Wrong size on FLayerParameterCurves");
static_assert(offsetof(FLayerParameterCurves, FloatParams) == 0x000000, "Member 'FLayerParameterCurves::FloatParams' has a wrong offset!");
static_assert(offsetof(FLayerParameterCurves, VectorParams) == 0x000010, "Member 'FLayerParameterCurves::VectorParams' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.PropertyLayerCurveBase
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPropertyLayerCurveBase
{
public:
	class FName                                   ClassName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyLayerCurveBase) == 0x000008, "Wrong alignment on FPropertyLayerCurveBase");
static_assert(sizeof(FPropertyLayerCurveBase) == 0x000018, "Wrong size on FPropertyLayerCurveBase");
static_assert(offsetof(FPropertyLayerCurveBase, ClassName) == 0x000000, "Member 'FPropertyLayerCurveBase::ClassName' has a wrong offset!");
static_assert(offsetof(FPropertyLayerCurveBase, PropertyName) == 0x000008, "Member 'FPropertyLayerCurveBase::PropertyName' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.FloatPropertyLayerCurve
// 0x0080 (0x0098 - 0x0018)
struct FFloatPropertyLayerCurve final : public FPropertyLayerCurveBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             ValueCurve;                                        // 0x0020(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatPropertyLayerCurve) == 0x000008, "Wrong alignment on FFloatPropertyLayerCurve");
static_assert(sizeof(FFloatPropertyLayerCurve) == 0x000098, "Wrong size on FFloatPropertyLayerCurve");
static_assert(offsetof(FFloatPropertyLayerCurve, ValueCurve) == 0x000020, "Member 'FFloatPropertyLayerCurve::ValueCurve' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.ColorPropertyLayerCurve
// 0x01D0 (0x01E8 - 0x0018)
struct FColorPropertyLayerCurve final : public FPropertyLayerCurveBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             ValueCurve[0x4];                                   // 0x0020(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x8];                                      // 0x01E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorPropertyLayerCurve) == 0x000008, "Wrong alignment on FColorPropertyLayerCurve");
static_assert(sizeof(FColorPropertyLayerCurve) == 0x0001E8, "Wrong size on FColorPropertyLayerCurve");
static_assert(offsetof(FColorPropertyLayerCurve, ValueCurve) == 0x000020, "Member 'FColorPropertyLayerCurve::ValueCurve' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.VectorPropertyLayerCurve
// 0x01D8 (0x01F0 - 0x0018)
struct FVectorPropertyLayerCurve final : public FPropertyLayerCurveBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             ValueCurve[0x4];                                   // 0x0020(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x10];                                     // 0x01E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVectorPropertyLayerCurve) == 0x000008, "Wrong alignment on FVectorPropertyLayerCurve");
static_assert(sizeof(FVectorPropertyLayerCurve) == 0x0001F0, "Wrong size on FVectorPropertyLayerCurve");
static_assert(offsetof(FVectorPropertyLayerCurve, ValueCurve) == 0x000020, "Member 'FVectorPropertyLayerCurve::ValueCurve' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.Vector4PropertyLayerCurve
// 0x01D8 (0x01F0 - 0x0018)
struct alignas(0x10) FVector4PropertyLayerCurve final : public FPropertyLayerCurveBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             ValueCurve[0x4];                                   // 0x0020(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x10];                                     // 0x01E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVector4PropertyLayerCurve) == 0x000010, "Wrong alignment on FVector4PropertyLayerCurve");
static_assert(sizeof(FVector4PropertyLayerCurve) == 0x0001F0, "Wrong size on FVector4PropertyLayerCurve");
static_assert(offsetof(FVector4PropertyLayerCurve, ValueCurve) == 0x000020, "Member 'FVector4PropertyLayerCurve::ValueCurve' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.LayerPropertyCurves
// 0x0040 (0x0040 - 0x0000)
struct FLayerPropertyCurves final
{
public:
	TArray<struct FFloatPropertyLayerCurve>       FloatProps;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorPropertyLayerCurve>      VectorProps;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FColorPropertyLayerCurve>       ColorProps;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector4PropertyLayerCurve>     Vector4Props;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayerPropertyCurves) == 0x000008, "Wrong alignment on FLayerPropertyCurves");
static_assert(sizeof(FLayerPropertyCurves) == 0x000040, "Wrong size on FLayerPropertyCurves");
static_assert(offsetof(FLayerPropertyCurves, FloatProps) == 0x000000, "Member 'FLayerPropertyCurves::FloatProps' has a wrong offset!");
static_assert(offsetof(FLayerPropertyCurves, VectorProps) == 0x000010, "Member 'FLayerPropertyCurves::VectorProps' has a wrong offset!");
static_assert(offsetof(FLayerPropertyCurves, ColorProps) == 0x000020, "Member 'FLayerPropertyCurves::ColorProps' has a wrong offset!");
static_assert(offsetof(FLayerPropertyCurves, Vector4Props) == 0x000030, "Member 'FLayerPropertyCurves::Vector4Props' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.TimeOfDayEvent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FTimeOfDayEvent final
{
public:
	float                                         EventTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeOfDayState                               State;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x17];                                      // 0x0011(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayEvent) == 0x000008, "Wrong alignment on FTimeOfDayEvent");
static_assert(sizeof(FTimeOfDayEvent) == 0x000028, "Wrong size on FTimeOfDayEvent");
static_assert(offsetof(FTimeOfDayEvent, EventTime) == 0x000000, "Member 'FTimeOfDayEvent::EventTime' has a wrong offset!");
static_assert(offsetof(FTimeOfDayEvent, EventName) == 0x000008, "Member 'FTimeOfDayEvent::EventName' has a wrong offset!");
static_assert(offsetof(FTimeOfDayEvent, State) == 0x000010, "Member 'FTimeOfDayEvent::State' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.LayerCurveData
// 0x0078 (0x0078 - 0x0000)
struct FLayerCurveData final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLayerParameterCurves                  ParameterLayerCurves;                              // 0x0008(0x0020)(NativeAccessSpecifierPublic)
	struct FLayerPropertyCurves                   PropertyLayerCurves;                               // 0x0028(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FTimeOfDayEvent>                LayerEvents;                                       // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayerCurveData) == 0x000008, "Wrong alignment on FLayerCurveData");
static_assert(sizeof(FLayerCurveData) == 0x000078, "Wrong size on FLayerCurveData");
static_assert(offsetof(FLayerCurveData, LayerName) == 0x000000, "Member 'FLayerCurveData::LayerName' has a wrong offset!");
static_assert(offsetof(FLayerCurveData, ParameterLayerCurves) == 0x000008, "Member 'FLayerCurveData::ParameterLayerCurves' has a wrong offset!");
static_assert(offsetof(FLayerCurveData, PropertyLayerCurves) == 0x000028, "Member 'FLayerCurveData::PropertyLayerCurves' has a wrong offset!");
static_assert(offsetof(FLayerCurveData, LayerEvents) == 0x000068, "Member 'FLayerCurveData::LayerEvents' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.TimeOfDayCycleInstanceData
// 0x00A0 (0x00A0 - 0x0000)
struct FTimeOfDayCycleInstanceData final
{
public:
	class UTimeOfDayCycle*                        ParentCycle;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCycleLength;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideCycleLength;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLayerCurveData>                LayerCurveData;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x80];                                      // 0x0020(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayCycleInstanceData) == 0x000008, "Wrong alignment on FTimeOfDayCycleInstanceData");
static_assert(sizeof(FTimeOfDayCycleInstanceData) == 0x0000A0, "Wrong size on FTimeOfDayCycleInstanceData");
static_assert(offsetof(FTimeOfDayCycleInstanceData, ParentCycle) == 0x000000, "Member 'FTimeOfDayCycleInstanceData::ParentCycle' has a wrong offset!");
static_assert(offsetof(FTimeOfDayCycleInstanceData, bOverrideCycleLength) == 0x000008, "Member 'FTimeOfDayCycleInstanceData::bOverrideCycleLength' has a wrong offset!");
static_assert(offsetof(FTimeOfDayCycleInstanceData, OverrideCycleLength) == 0x00000C, "Member 'FTimeOfDayCycleInstanceData::OverrideCycleLength' has a wrong offset!");
static_assert(offsetof(FTimeOfDayCycleInstanceData, LayerCurveData) == 0x000010, "Member 'FTimeOfDayCycleInstanceData::LayerCurveData' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.TODCollectionParam
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTODCollectionParam
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0008(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTODCollectionParam) == 0x000008, "Wrong alignment on FTODCollectionParam");
static_assert(sizeof(FTODCollectionParam) == 0x000018, "Wrong size on FTODCollectionParam");
static_assert(offsetof(FTODCollectionParam, ParameterName) == 0x000000, "Member 'FTODCollectionParam::ParameterName' has a wrong offset!");
static_assert(offsetof(FTODCollectionParam, ID) == 0x000008, "Member 'FTODCollectionParam::ID' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.TODVectorCollectionParam
// 0x0000 (0x0018 - 0x0018)
struct FTODVectorCollectionParam final : public FTODCollectionParam
{
};
static_assert(alignof(FTODVectorCollectionParam) == 0x000008, "Wrong alignment on FTODVectorCollectionParam");
static_assert(sizeof(FTODVectorCollectionParam) == 0x000018, "Wrong size on FTODVectorCollectionParam");

// ScriptStruct GbxTimeOfDay.TODScalarCollectionParam
// 0x0000 (0x0018 - 0x0018)
struct FTODScalarCollectionParam final : public FTODCollectionParam
{
};
static_assert(alignof(FTODScalarCollectionParam) == 0x000008, "Wrong alignment on FTODScalarCollectionParam");
static_assert(sizeof(FTODScalarCollectionParam) == 0x000018, "Wrong size on FTODScalarCollectionParam");

// ScriptStruct GbxTimeOfDay.TODCollectionVector4Parameter
// 0x0018 (0x0030 - 0x0018)
struct FTODCollectionVector4Parameter final : public FCollectionParameterBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               DefaultValue;                                      // 0x0020(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTODCollectionVector4Parameter) == 0x000010, "Wrong alignment on FTODCollectionVector4Parameter");
static_assert(sizeof(FTODCollectionVector4Parameter) == 0x000030, "Wrong size on FTODCollectionVector4Parameter");
static_assert(offsetof(FTODCollectionVector4Parameter, DefaultValue) == 0x000020, "Member 'FTODCollectionVector4Parameter::DefaultValue' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.PlanetCycleInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPlanetCycleInfo final
{
public:
	class FName                                   PlanetName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CycleLength;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCachedTime;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlanetCycleInfo) == 0x000008, "Wrong alignment on FPlanetCycleInfo");
static_assert(sizeof(FPlanetCycleInfo) == 0x000010, "Wrong size on FPlanetCycleInfo");
static_assert(offsetof(FPlanetCycleInfo, PlanetName) == 0x000000, "Member 'FPlanetCycleInfo::PlanetName' has a wrong offset!");
static_assert(offsetof(FPlanetCycleInfo, CycleLength) == 0x000008, "Member 'FPlanetCycleInfo::CycleLength' has a wrong offset!");
static_assert(offsetof(FPlanetCycleInfo, LastCachedTime) == 0x00000C, "Member 'FPlanetCycleInfo::LastCachedTime' has a wrong offset!");

// ScriptStruct GbxTimeOfDay.TimeOfDaySaveGameData
// 0x0018 (0x0018 - 0x0000)
struct FTimeOfDaySaveGameData final
{
public:
	TArray<struct FPlanetCycleInfo>               PlanetCycleInfo;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PlanetCycle;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDaySaveGameData) == 0x000008, "Wrong alignment on FTimeOfDaySaveGameData");
static_assert(sizeof(FTimeOfDaySaveGameData) == 0x000018, "Wrong size on FTimeOfDaySaveGameData");
static_assert(offsetof(FTimeOfDaySaveGameData, PlanetCycleInfo) == 0x000000, "Member 'FTimeOfDaySaveGameData::PlanetCycleInfo' has a wrong offset!");
static_assert(offsetof(FTimeOfDaySaveGameData, PlanetCycle) == 0x000010, "Member 'FTimeOfDaySaveGameData::PlanetCycle' has a wrong offset!");

}

