#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Projectile_Siren_PhaseTrance_Transfer

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Projectile_Siren_PhaseTrance_Transfer.Projectile_Siren_PhaseTrance_Transfer_C
// 0x0028 (0x0760 - 0x0738)
class AProjectile_Siren_PhaseTrance_Transfer_C final : public AOakProjectile_PhaseTrance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0738(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               TransferParticle;                                  // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileHomingComponent*             ProjectileHoming;                                  // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxProjectileMovementComponent*        GbxProjectileMovement;                             // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Projectile_Siren_PhaseTrance_Transfer(int32 EntryPoint);
	void OnShutdownGracefully();
	void BndEvt__ProjectileHoming_K2Node_ComponentBoundEvent_0_ProjectileHomingComponentEvent__DelegateSignature_Projectile_Siren_PhaseTrance_Transfer();
	void OnExplode();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void PlayExplosionEffect();
	void SetTransferParticle();
	void GetGraspDuration(float* Res);
	void SetNewHomingTarget(class AActor* NewTarget);
	void DetachFromOldHomingTarget();
	void AttachToNewHomingTarget();
	void OnHomingTargetDied(class AActor* Receiver, class AActor* Causer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Projectile_Siren_PhaseTrance_Transfer_C">();
	}
	static class AProjectile_Siren_PhaseTrance_Transfer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_Siren_PhaseTrance_Transfer_C>();
	}
};
static_assert(alignof(AProjectile_Siren_PhaseTrance_Transfer_C) == 0x000008, "Wrong alignment on AProjectile_Siren_PhaseTrance_Transfer_C");
static_assert(sizeof(AProjectile_Siren_PhaseTrance_Transfer_C) == 0x000760, "Wrong size on AProjectile_Siren_PhaseTrance_Transfer_C");
static_assert(offsetof(AProjectile_Siren_PhaseTrance_Transfer_C, UberGraphFrame) == 0x000738, "Member 'AProjectile_Siren_PhaseTrance_Transfer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProjectile_Siren_PhaseTrance_Transfer_C, TransferParticle) == 0x000740, "Member 'AProjectile_Siren_PhaseTrance_Transfer_C::TransferParticle' has a wrong offset!");
static_assert(offsetof(AProjectile_Siren_PhaseTrance_Transfer_C, Sphere) == 0x000748, "Member 'AProjectile_Siren_PhaseTrance_Transfer_C::Sphere' has a wrong offset!");
static_assert(offsetof(AProjectile_Siren_PhaseTrance_Transfer_C, ProjectileHoming) == 0x000750, "Member 'AProjectile_Siren_PhaseTrance_Transfer_C::ProjectileHoming' has a wrong offset!");
static_assert(offsetof(AProjectile_Siren_PhaseTrance_Transfer_C, GbxProjectileMovement) == 0x000758, "Member 'AProjectile_Siren_PhaseTrance_Transfer_C::GbxProjectileMovement' has a wrong offset!");

}

