#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Passive_Beastmaster_HitAndRun8

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"


namespace SDK::Params
{

// Function Passive_Beastmaster_HitAndRun8.Passive_Beastmaster_HitAndRun8_C.ExecuteUbergraph_Passive_Beastmaster_HitAndRun8
// 0x0050 (0x0050 - 0x0000)
struct Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AWeapon* EventWeapon, bool bCompleted)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class AWeapon*                                K2Node_CustomEvent_EventWeapon;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bCompleted;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxAbilityResourceSpec_ScriptDelegate K2Node_MakeStruct_GbxAbilityResourceSpec_ScriptDelegate; // 0x0028(0x0028)(NoDestructor)
};
static_assert(alignof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8) == 0x000008, "Wrong alignment on Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8");
static_assert(sizeof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8) == 0x000050, "Wrong size on Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8, EntryPoint) == 0x000000, "Member 'Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8::EntryPoint' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8, K2Node_CustomEvent_EventWeapon) == 0x000018, "Member 'Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8::K2Node_CustomEvent_EventWeapon' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8, K2Node_CustomEvent_bCompleted) == 0x000020, "Member 'Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8::K2Node_CustomEvent_bCompleted' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8, K2Node_MakeStruct_GbxAbilityResourceSpec_ScriptDelegate) == 0x000028, "Member 'Passive_Beastmaster_HitAndRun8_C_ExecuteUbergraph_Passive_Beastmaster_HitAndRun8::K2Node_MakeStruct_GbxAbilityResourceSpec_ScriptDelegate' has a wrong offset!");

// Function Passive_Beastmaster_HitAndRun8.Passive_Beastmaster_HitAndRun8_C.OnReloaded_HitAndRun8
// 0x0010 (0x0010 - 0x0000)
struct Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8 final
{
public:
	class AWeapon*                                EventWeapon;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompleted;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8) == 0x000008, "Wrong alignment on Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8");
static_assert(sizeof(Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8) == 0x000010, "Wrong size on Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8, EventWeapon) == 0x000000, "Member 'Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8::EventWeapon' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8, bCompleted) == 0x000008, "Member 'Passive_Beastmaster_HitAndRun8_C_OnReloaded_HitAndRun8::bCompleted' has a wrong offset!");

}

