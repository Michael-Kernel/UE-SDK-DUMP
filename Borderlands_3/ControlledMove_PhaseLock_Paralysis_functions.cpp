#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlledMove_PhaseLock_Paralysis

#include "Basic.hpp"

#include "ControlledMove_PhaseLock_Paralysis_classes.hpp"
#include "ControlledMove_PhaseLock_Paralysis_parameters.hpp"


namespace SDK
{

// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.ExecuteUbergraph_ControlledMove_PhaseLock_Paralysis
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UControlledMove_PhaseLock_Paralysis_C::ExecuteUbergraph_ControlledMove_PhaseLock_Paralysis(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "ExecuteUbergraph_ControlledMove_PhaseLock_Paralysis");

	Params::ControlledMove_PhaseLock_Paralysis_C_ExecuteUbergraph_ControlledMove_PhaseLock_Paralysis Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.OnDeath
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UControlledMove_PhaseLock_Paralysis_C::OnDeath(class AActor* DamageReceiver, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "OnDeath");

	Params::ControlledMove_PhaseLock_Paralysis_C_OnDeath Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.UnbindFromAll
// (BlueprintCallable, BlueprintEvent)

void UControlledMove_PhaseLock_Paralysis_C::UnbindFromAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "UnbindFromAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.EndParalysisEarly
// (BlueprintCallable, BlueprintEvent)

void UControlledMove_PhaseLock_Paralysis_C::EndParalysisEarly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "EndParalysisEarly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.OnServerStop
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UControlledMove_PhaseLock_Paralysis_C::OnServerStop(bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "OnServerStop");

	Params::ControlledMove_PhaseLock_Paralysis_C_OnServerStop Parms{};

	Parms.bInterrupted = bInterrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.OnTakeDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDamageComponent*                 DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGbxDamageType*                   DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageSource*                    DamageSource                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageCauserComponent*           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FReceivedDamageDetails           Details                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UControlledMove_PhaseLock_Paralysis_C::OnTakeDamage(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "OnTakeDamage");

	Params::ControlledMove_PhaseLock_Paralysis_C_OnTakeDamage Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.CanStayInParalysis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bRes                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UControlledMove_PhaseLock_Paralysis_C::CanStayInParalysis(bool* bRes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "CanStayInParalysis");

	Params::ControlledMove_PhaseLock_Paralysis_C_CanStayInParalysis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bRes != nullptr)
		*bRes = Parms.bRes;
}


// Function ControlledMove_PhaseLock_Paralysis.ControlledMove_PhaseLock_Paralysis_C.OnServerStart
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   MoveDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UControlledMove_PhaseLock_Paralysis_C::OnServerStart(float MoveDuration, class AActor* TargetActor, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlledMove_PhaseLock_Paralysis_C", "OnServerStart");

	Params::ControlledMove_PhaseLock_Paralysis_C_OnServerStart Parms{};

	Parms.MoveDuration = MoveDuration;
	Parms.TargetActor = TargetActor;
	Parms.Instigator = Instigator;

	UObject::ProcessEvent(Func, &Parms);
}

}

