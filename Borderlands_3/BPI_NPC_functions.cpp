#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NPC

#include "Basic.hpp"

#include "BPI_NPC_classes.hpp"
#include "BPI_NPC_parameters.hpp"


namespace SDK
{

// Function BPI_NPC.BPI_NPC_C.SetNPCEngagePlayerRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Units                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::SetNPCEngagePlayerRange(float Units)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "SetNPCEngagePlayerRange");

	Params::BPI_NPC_C_SetNPCEngagePlayerRange Parms{};

	Parms.Units = Units;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.ForceNPCRevive
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::ForceNPCRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "ForceNPCRevive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.NPCCanReviveOthers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanReviveOthers                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::NPCCanReviveOthers(bool CanReviveOthers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCCanReviveOthers");

	Params::BPI_NPC_C_NPCCanReviveOthers Parms{};

	Parms.CanReviveOthers = CanReviveOthers;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.ForceDefaultCombatNPCDownstate
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::ForceDefaultCombatNPCDownstate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "ForceDefaultCombatNPCDownstate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.TakeThingThenGiveBack
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::TakeThingThenGiveBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "TakeThingThenGiveBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.NPCResetUsable
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::NPCResetUsable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCResetUsable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.NPCConstrainUsable
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::NPCConstrainUsable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCConstrainUsable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.IgnoreEnemies
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IgnoreEnemies_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::IgnoreEnemies(bool IgnoreEnemies_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "IgnoreEnemies");

	Params::BPI_NPC_C_IgnoreEnemies Parms{};

	Parms.IgnoreEnemies_0 = IgnoreEnemies_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.NPCHideSword
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::NPCHideSword()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCHideSword");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.NPCUnhideSword
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::NPCUnhideSword()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCUnhideSword");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.NPCUnhideWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::NPCUnhideWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCUnhideWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.NPCHideWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::NPCHideWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "NPCHideWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.HoldHandOutToTakeSomething
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::HoldHandOutToTakeSomething()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "HoldHandOutToTakeSomething");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.GiveSomethingToThePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::GiveSomethingToThePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "GiveSomethingToThePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.ThingToHold
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      TheThingToHold                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FItemPoolInfo                    ThePickupToHold                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FTransform                       OffsetTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   PutAwayOffset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TakeOutOffset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseAltAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::ThingToHold(class UStaticMesh* TheThingToHold, const struct FItemPoolInfo& ThePickupToHold, const struct FTransform& OffsetTransform, float PutAwayOffset, float TakeOutOffset, bool UseAltAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "ThingToHold");

	Params::BPI_NPC_C_ThingToHold Parms{};

	Parms.TheThingToHold = TheThingToHold;
	Parms.ThePickupToHold = std::move(ThePickupToHold);
	Parms.OffsetTransform = std::move(OffsetTransform);
	Parms.PutAwayOffset = PutAwayOffset;
	Parms.TakeOutOffset = TakeOutOffset;
	Parms.UseAltAnimation = UseAltAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.CanPatrol
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanPatrol_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::CanPatrol(bool CanPatrol_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "CanPatrol");

	Params::BPI_NPC_C_CanPatrol Parms{};

	Parms.CanPatrol_0 = CanPatrol_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.EngagePlayerWhenIdle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LookAtPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::EngagePlayerWhenIdle(bool LookAtPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "EngagePlayerWhenIdle");

	Params::BPI_NPC_C_EngagePlayerWhenIdle Parms{};

	Parms.LookAtPlayer = LookAtPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.UseSmartObjects
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseSmartObjects_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::UseSmartObjects(bool UseSmartObjects_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "UseSmartObjects");

	Params::BPI_NPC_C_UseSmartObjects Parms{};

	Parms.UseSmartObjects_0 = UseSmartObjects_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.EngageInCombat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EngageInCombat_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_NPC_C::EngageInCombat(bool EngageInCombat_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NPC_C", "EngageInCombat");

	Params::BPI_NPC_C_EngageInCombat Parms{};

	Parms.EngageInCombat_0 = EngageInCombat_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

