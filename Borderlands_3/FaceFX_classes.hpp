#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FaceFX

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "FaceFX_structs.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class FaceFX.FaceFXAsset
// 0x0000 (0x0028 - 0x0028)
class UFaceFXAsset : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAsset">();
	}
	static class UFaceFXAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAsset>();
	}
};
static_assert(alignof(UFaceFXAsset) == 0x000008, "Wrong alignment on UFaceFXAsset");
static_assert(sizeof(UFaceFXAsset) == 0x000028, "Wrong size on UFaceFXAsset");

// Class FaceFX.FaceFXActor
// 0x0028 (0x0050 - 0x0028)
class UFaceFXActor final : public UFaceFXAsset
{
public:
	TArray<struct FFaceFXActorData>               PlatformData;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	TArray<class UFaceFXAnim*>                    Animations;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	bool                                          bHasBonesFromMultipleSkeletons;                    // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXActor">();
	}
	static class UFaceFXActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXActor>();
	}
};
static_assert(alignof(UFaceFXActor) == 0x000008, "Wrong alignment on UFaceFXActor");
static_assert(sizeof(UFaceFXActor) == 0x000050, "Wrong size on UFaceFXActor");
static_assert(offsetof(UFaceFXActor, PlatformData) == 0x000028, "Member 'UFaceFXActor::PlatformData' has a wrong offset!");
static_assert(offsetof(UFaceFXActor, Animations) == 0x000038, "Member 'UFaceFXActor::Animations' has a wrong offset!");
static_assert(offsetof(UFaceFXActor, bHasBonesFromMultipleSkeletons) == 0x000048, "Member 'UFaceFXActor::bHasBonesFromMultipleSkeletons' has a wrong offset!");

// Class FaceFX.FaceFXAnim
// 0x0038 (0x0060 - 0x0028)
class UFaceFXAnim final : public UFaceFXAsset
{
public:
	TArray<struct FFaceFXAnimData>                PlatformData;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	struct FFaceFXAnimId                          ID;                                                // 0x0038(0x0010)(Edit, DisableEditOnTemplate, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFaceFXAudioAsset                      Audio;                                             // 0x0048(0x0018)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnim">();
	}
	static class UFaceFXAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnim>();
	}
};
static_assert(alignof(UFaceFXAnim) == 0x000008, "Wrong alignment on UFaceFXAnim");
static_assert(sizeof(UFaceFXAnim) == 0x000060, "Wrong size on UFaceFXAnim");
static_assert(offsetof(UFaceFXAnim, PlatformData) == 0x000028, "Member 'UFaceFXAnim::PlatformData' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, ID) == 0x000038, "Member 'UFaceFXAnim::ID' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, Audio) == 0x000048, "Member 'UFaceFXAnim::Audio' has a wrong offset!");

// Class FaceFX.FaceFXAnimationSection
// 0x0058 (0x0138 - 0x00E0)
class UFaceFXAnimationSection final : public UMovieSceneSection
{
public:
	struct FFaceFXSkelMeshComponentId             SkelMeshComponentId;                               // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFaceFXAnimId                          AnimationId;                                       // 0x00F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UFaceFXAnim>             Animation;                                         // 0x0100(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndOffset;                                         // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsAnimationDurationLoaded : 1;                    // 0x0130(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationDuration;                                 // 0x0134(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnimationSection">();
	}
	static class UFaceFXAnimationSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnimationSection>();
	}
};
static_assert(alignof(UFaceFXAnimationSection) == 0x000008, "Wrong alignment on UFaceFXAnimationSection");
static_assert(sizeof(UFaceFXAnimationSection) == 0x000138, "Wrong size on UFaceFXAnimationSection");
static_assert(offsetof(UFaceFXAnimationSection, SkelMeshComponentId) == 0x0000E0, "Member 'UFaceFXAnimationSection::SkelMeshComponentId' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, AnimationId) == 0x0000F0, "Member 'UFaceFXAnimationSection::AnimationId' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, Animation) == 0x000100, "Member 'UFaceFXAnimationSection::Animation' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, StartOffset) == 0x000128, "Member 'UFaceFXAnimationSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, EndOffset) == 0x00012C, "Member 'UFaceFXAnimationSection::EndOffset' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, AnimationDuration) == 0x000134, "Member 'UFaceFXAnimationSection::AnimationDuration' has a wrong offset!");

// Class FaceFX.FaceFXAnimationTrack
// 0x0010 (0x0068 - 0x0058)
class UFaceFXAnimationTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AnimationSections;                                 // 0x0058(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnimationTrack">();
	}
	static class UFaceFXAnimationTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnimationTrack>();
	}
};
static_assert(alignof(UFaceFXAnimationTrack) == 0x000008, "Wrong alignment on UFaceFXAnimationTrack");
static_assert(sizeof(UFaceFXAnimationTrack) == 0x000068, "Wrong size on UFaceFXAnimationTrack");
static_assert(offsetof(UFaceFXAnimationTrack, AnimationSections) == 0x000058, "Member 'UFaceFXAnimationTrack::AnimationSections' has a wrong offset!");

// Class FaceFX.FaceFXAnimSet
// 0x0010 (0x0040 - 0x0030)
class UFaceFXAnimSet final : public UDataAsset
{
public:
	struct FGbxFaceFXAnimSetData                  FaceFXAnimSetData;                                 // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnimSet">();
	}
	static class UFaceFXAnimSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnimSet>();
	}
};
static_assert(alignof(UFaceFXAnimSet) == 0x000008, "Wrong alignment on UFaceFXAnimSet");
static_assert(sizeof(UFaceFXAnimSet) == 0x000040, "Wrong size on UFaceFXAnimSet");
static_assert(offsetof(UFaceFXAnimSet, FaceFXAnimSetData) == 0x000030, "Member 'UFaceFXAnimSet::FaceFXAnimSetData' has a wrong offset!");

// Class FaceFX.FaceFXAudioComponent
// 0x0028 (0x01A0 - 0x0178)
class UFaceFXAudioComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class UWwiseAudioComponent>    WwiseAudioComponent;                               // 0x0178(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x20];                                     // 0x0180(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAudioComponent">();
	}
	static class UFaceFXAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAudioComponent>();
	}
};
static_assert(alignof(UFaceFXAudioComponent) == 0x000008, "Wrong alignment on UFaceFXAudioComponent");
static_assert(sizeof(UFaceFXAudioComponent) == 0x0001A0, "Wrong size on UFaceFXAudioComponent");
static_assert(offsetof(UFaceFXAudioComponent, WwiseAudioComponent) == 0x000178, "Member 'UFaceFXAudioComponent::WwiseAudioComponent' has a wrong offset!");

// Class FaceFX.FaceFXCharacter
// 0x0158 (0x0180 - 0x0028)
class UFaceFXCharacter final : public UObject
{
public:
	uint8                                         Pad_28[0x68];                                      // 0x0028(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UFaceFXActor*                           FaceFXActor;                                       // 0x0090(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFaceFXAudioComponent*                  AudioComponent;                                    // 0x0098(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x98];                                      // 0x00A0(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	class UFaceFXAnim*                            CurrentAnim;                                       // 0x0138(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x30];                                     // 0x0140(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UFaceFXAnimSet*                         CurrentAnimSet;                                    // 0x0170(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXCharacter">();
	}
	static class UFaceFXCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXCharacter>();
	}
};
static_assert(alignof(UFaceFXCharacter) == 0x000008, "Wrong alignment on UFaceFXCharacter");
static_assert(sizeof(UFaceFXCharacter) == 0x000180, "Wrong size on UFaceFXCharacter");
static_assert(offsetof(UFaceFXCharacter, FaceFXActor) == 0x000090, "Member 'UFaceFXCharacter::FaceFXActor' has a wrong offset!");
static_assert(offsetof(UFaceFXCharacter, AudioComponent) == 0x000098, "Member 'UFaceFXCharacter::AudioComponent' has a wrong offset!");
static_assert(offsetof(UFaceFXCharacter, CurrentAnim) == 0x000138, "Member 'UFaceFXCharacter::CurrentAnim' has a wrong offset!");
static_assert(offsetof(UFaceFXCharacter, CurrentAnimSet) == 0x000170, "Member 'UFaceFXCharacter::CurrentAnimSet' has a wrong offset!");

// Class FaceFX.FaceFXComponent
// 0x0040 (0x01B8 - 0x0178)
class UFaceFXComponent final : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   OnPlaybackAudioStart;                              // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlaybackStopped;                                 // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FFaceFXEntry>                   Entries;                                           // 0x0198(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetFaceFXBlendWeight(class USkeletalMeshComponent* SkeletalMeshComponent, float DeltaTime, float BlendTime);
	bool JumpTo(float Position, bool Pause_0, class UFaceFXAnim* Animation, bool LoopAnimation, class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	bool JumpToById(float Position, bool Pause_0, class FName Group, class FName AnimName, bool LoopAnimation, class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	void OnCharacterAudioStart(class UFaceFXCharacter* Character, const struct FFaceFXAnimId& AnimId, bool IsAudioStarted, class UFaceFXAudioComponent* AudioComponentStartedOn);
	void OnCharacterPlaybackStopped(class UFaceFXCharacter* Character, const struct FFaceFXAnimId& AnimId);
	bool Pause(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	bool Play(class UFaceFXAnim* Animation, class USkeletalMeshComponent* SkelMeshComp, bool Loop, const class UObject* Caller);
	bool PlayById(class FName Group, class FName AnimName, class USkeletalMeshComponent* SkelMeshComp, bool Loop, const class UObject* Caller);
	bool Resume(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	bool Setup(class USkeletalMeshComponent* SkelMeshComp, class UFaceFXAudioComponent* AudioComponent, const class UFaceFXActor* Asset, bool IsAutoPlaySound, bool IsDisableMorphTargets, const class UObject* Caller);
	bool Stop(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	void StopAll();

	bool IsPaused(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller) const;
	bool IsPlaying(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller) const;
	bool IsPlayingAnimation(const struct FFaceFXAnimId& AnimId, class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXComponent">();
	}
	static class UFaceFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXComponent>();
	}
};
static_assert(alignof(UFaceFXComponent) == 0x000008, "Wrong alignment on UFaceFXComponent");
static_assert(sizeof(UFaceFXComponent) == 0x0001B8, "Wrong size on UFaceFXComponent");
static_assert(offsetof(UFaceFXComponent, OnPlaybackAudioStart) == 0x000178, "Member 'UFaceFXComponent::OnPlaybackAudioStart' has a wrong offset!");
static_assert(offsetof(UFaceFXComponent, OnPlaybackStopped) == 0x000188, "Member 'UFaceFXComponent::OnPlaybackStopped' has a wrong offset!");
static_assert(offsetof(UFaceFXComponent, Entries) == 0x000198, "Member 'UFaceFXComponent::Entries' has a wrong offset!");

// Class FaceFX.FaceFXMatineeControl
// 0x0010 (0x0080 - 0x0070)
class UFaceFXMatineeControl final : public UInterpTrack
{
public:
	TArray<struct FFaceFXTrackKey>                Keys;                                              // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXMatineeControl">();
	}
	static class UFaceFXMatineeControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXMatineeControl>();
	}
};
static_assert(alignof(UFaceFXMatineeControl) == 0x000008, "Wrong alignment on UFaceFXMatineeControl");
static_assert(sizeof(UFaceFXMatineeControl) == 0x000080, "Wrong size on UFaceFXMatineeControl");
static_assert(offsetof(UFaceFXMatineeControl, Keys) == 0x000070, "Member 'UFaceFXMatineeControl::Keys' has a wrong offset!");

// Class FaceFX.FaceFXMatineeControlInst
// 0x0058 (0x0080 - 0x0028)
class UFaceFXMatineeControlInst final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x54];                                      // 0x002C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXMatineeControlInst">();
	}
	static class UFaceFXMatineeControlInst* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXMatineeControlInst>();
	}
};
static_assert(alignof(UFaceFXMatineeControlInst) == 0x000008, "Wrong alignment on UFaceFXMatineeControlInst");
static_assert(sizeof(UFaceFXMatineeControlInst) == 0x000080, "Wrong size on UFaceFXMatineeControlInst");
static_assert(offsetof(UFaceFXMatineeControlInst, LastUpdatePosition) == 0x000028, "Member 'UFaceFXMatineeControlInst::LastUpdatePosition' has a wrong offset!");

// Class FaceFX.FaceFXSettings
// 0x0050 (0x0078 - 0x0028)
class UFaceFXSettings final : public UObject
{
public:
	TMap<class FString, struct FFaceFXLocalizationData> FaceFXLocalizationEquivalents;                     // 0x0028(0x0050)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXSettings">();
	}
	static class UFaceFXSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXSettings>();
	}
};
static_assert(alignof(UFaceFXSettings) == 0x000008, "Wrong alignment on UFaceFXSettings");
static_assert(sizeof(UFaceFXSettings) == 0x000078, "Wrong size on UFaceFXSettings");
static_assert(offsetof(UFaceFXSettings, FaceFXLocalizationEquivalents) == 0x000028, "Member 'UFaceFXSettings::FaceFXLocalizationEquivalents' has a wrong offset!");

// Class FaceFX.FaceFXEditorSettings
// 0x0050 (0x0078 - 0x0028)
class UFaceFXEditorSettings final : public UObject
{
public:
	TMap<class FString, struct FFaceFXDLCPathSettings> FaceFXDLCSettings;                                 // 0x0028(0x0050)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXEditorSettings">();
	}
	static class UFaceFXEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXEditorSettings>();
	}
};
static_assert(alignof(UFaceFXEditorSettings) == 0x000008, "Wrong alignment on UFaceFXEditorSettings");
static_assert(sizeof(UFaceFXEditorSettings) == 0x000078, "Wrong size on UFaceFXEditorSettings");
static_assert(offsetof(UFaceFXEditorSettings, FaceFXDLCSettings) == 0x000028, "Member 'UFaceFXEditorSettings::FaceFXDLCSettings' has a wrong offset!");

}

