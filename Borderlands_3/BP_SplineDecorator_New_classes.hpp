#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineDecorator_New

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GbxGameSystemCore_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_SplineDecoratorParams_structs.hpp"
#include "Struct_SplineDecoratorPointOverride_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineDecorator_New.BP_SplineDecorator_New_C
// 0x00E8 (0x0540 - 0x0458)
class ABP_SplineDecorator_New_C final : public ADecorator
{
public:
	class USplineComponent*                       ResampledSpline;                                   // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       BuilderSpline;                                     // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Spline_Mesh;                                // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Spline_Mesh;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Spline_Material_Override;                          // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Collision_Type;                                    // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spline_Mesh_Segment_Length;                        // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Spline_Cap_Mesh;                               // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Spline_Mesh_Cap;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Global_Offset;                                     // 0x04A0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_SplineDecoratorParams>  Spline_Decorations;                                // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         Spline_Mesh_Cap_Length;                            // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Scale;                                             // 0x04C4(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               Forward_Axis;                                      // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Up_Vector;                                         // 0x04D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Trace_Resample_Points;                             // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Resample_Radius;                                   // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Draw_Debug_Type;                                   // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Initial_Roll;                                      // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Draw_Spline_Point_Indexes;                         // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Index_Text_Offset;                                 // 0x04F0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_SplineDecoratorPointOverride> Point__Overrides;                                  // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FRandomStream                          Random_Stream;                                     // 0x0510(0x0008)(Edit, BlueprintVisible, NoDestructor)
	struct FVector                                Builder_Spline_Offset;                             // 0x0518(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Trace_Actors_To_Ignore;                            // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	bool                                          SetRollRotation;                                   // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void GetResampledSpline(class USplineComponent** NewParam);
	void Check_Overrides(int32 Index_0, class UStaticMesh** Static_Mesh, struct FVector* Point_Offset);
	void Show_Spline_Point_Index();
	void Place_Decoration(const struct FStruct_SplineDecoratorParams& Spline_Decoration_Params);
	void Genereate_Spline_Mesh_Segments();
	void Resample_Builder_Spline();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineDecorator_New_C">();
	}
	static class ABP_SplineDecorator_New_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineDecorator_New_C>();
	}
};
static_assert(alignof(ABP_SplineDecorator_New_C) == 0x000008, "Wrong alignment on ABP_SplineDecorator_New_C");
static_assert(sizeof(ABP_SplineDecorator_New_C) == 0x000540, "Wrong size on ABP_SplineDecorator_New_C");
static_assert(offsetof(ABP_SplineDecorator_New_C, ResampledSpline) == 0x000458, "Member 'ABP_SplineDecorator_New_C::ResampledSpline' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Scene) == 0x000460, "Member 'ABP_SplineDecorator_New_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, BuilderSpline) == 0x000468, "Member 'ABP_SplineDecorator_New_C::BuilderSpline' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Enable_Spline_Mesh) == 0x000470, "Member 'ABP_SplineDecorator_New_C::Enable_Spline_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Spline_Mesh) == 0x000478, "Member 'ABP_SplineDecorator_New_C::Spline_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Spline_Material_Override) == 0x000480, "Member 'ABP_SplineDecorator_New_C::Spline_Material_Override' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Collision_Type) == 0x000488, "Member 'ABP_SplineDecorator_New_C::Collision_Type' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Spline_Mesh_Segment_Length) == 0x00048C, "Member 'ABP_SplineDecorator_New_C::Spline_Mesh_Segment_Length' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Use_Spline_Cap_Mesh) == 0x000490, "Member 'ABP_SplineDecorator_New_C::Use_Spline_Cap_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Spline_Mesh_Cap) == 0x000498, "Member 'ABP_SplineDecorator_New_C::Spline_Mesh_Cap' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Global_Offset) == 0x0004A0, "Member 'ABP_SplineDecorator_New_C::Global_Offset' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Spline_Decorations) == 0x0004B0, "Member 'ABP_SplineDecorator_New_C::Spline_Decorations' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Spline_Mesh_Cap_Length) == 0x0004C0, "Member 'ABP_SplineDecorator_New_C::Spline_Mesh_Cap_Length' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Scale) == 0x0004C4, "Member 'ABP_SplineDecorator_New_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Forward_Axis) == 0x0004CC, "Member 'ABP_SplineDecorator_New_C::Forward_Axis' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Up_Vector) == 0x0004D0, "Member 'ABP_SplineDecorator_New_C::Up_Vector' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Trace_Resample_Points) == 0x0004DC, "Member 'ABP_SplineDecorator_New_C::Trace_Resample_Points' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Resample_Radius) == 0x0004E0, "Member 'ABP_SplineDecorator_New_C::Resample_Radius' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Draw_Debug_Type) == 0x0004E4, "Member 'ABP_SplineDecorator_New_C::Draw_Debug_Type' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Initial_Roll) == 0x0004E8, "Member 'ABP_SplineDecorator_New_C::Initial_Roll' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Draw_Spline_Point_Indexes) == 0x0004EC, "Member 'ABP_SplineDecorator_New_C::Draw_Spline_Point_Indexes' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Index_Text_Offset) == 0x0004F0, "Member 'ABP_SplineDecorator_New_C::Index_Text_Offset' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Point__Overrides) == 0x000500, "Member 'ABP_SplineDecorator_New_C::Point__Overrides' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Random_Stream) == 0x000510, "Member 'ABP_SplineDecorator_New_C::Random_Stream' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Builder_Spline_Offset) == 0x000518, "Member 'ABP_SplineDecorator_New_C::Builder_Spline_Offset' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, Trace_Actors_To_Ignore) == 0x000528, "Member 'ABP_SplineDecorator_New_C::Trace_Actors_To_Ignore' has a wrong offset!");
static_assert(offsetof(ABP_SplineDecorator_New_C, SetRollRotation) == 0x000538, "Member 'ABP_SplineDecorator_New_C::SetRollRotation' has a wrong offset!");

}

