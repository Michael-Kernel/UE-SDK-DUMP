#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_Kickcharger

#include "Basic.hpp"

#include "Ability_Kickcharger_classes.hpp"
#include "Ability_Kickcharger_parameters.hpp"


namespace SDK
{

// Function Ability_Kickcharger.Ability_Kickcharger_C.ExecuteUbergraph_Ability_Kickcharger
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_Kickcharger_C::ExecuteUbergraph_Ability_Kickcharger(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "ExecuteUbergraph_Ability_Kickcharger");

	Params::Ability_Kickcharger_C_ExecuteUbergraph_Ability_Kickcharger Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.ChargeTicker
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UAbility_Kickcharger_C::ChargeTicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "ChargeTicker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.FullyChargedAudio
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UAbility_Kickcharger_C::FullyChargedAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "FullyChargedAudio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.InstantChargeExpired
// (BlueprintCallable, BlueprintEvent)

void UAbility_Kickcharger_C::InstantChargeExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "InstantChargeExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.OnActivated
// (Event, Protected, BlueprintEvent)

void UAbility_Kickcharger_C::OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "OnActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.OnDeactivated
// (Event, Protected, BlueprintEvent)

void UAbility_Kickcharger_C::OnDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "OnDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.StopSliding
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlideEndedDetails               Details                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UAbility_Kickcharger_C::StopSliding(const struct FSlideEndedDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "StopSliding");

	Params::Ability_Kickcharger_C_StopSliding Parms{};

	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_Kickcharger.Ability_Kickcharger_C.WeaponFired
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeapon*                          EventWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_Kickcharger_C::WeaponFired(class AWeapon* EventWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Kickcharger_C", "WeaponFired");

	Params::Ability_Kickcharger_C_WeaponFired Parms{};

	Parms.EventWeapon = EventWeapon;

	UObject::ProcessEvent(Func, &Parms);
}

}

