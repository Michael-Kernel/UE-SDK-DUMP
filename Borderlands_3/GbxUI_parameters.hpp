#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxUI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "GbxUI_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function GbxUI.GbxUserWidget.IsFocusableWidgetStateFocused
// 0x0002 (0x0002 - 0x0000)
struct GbxUserWidget_IsFocusableWidgetStateFocused final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_IsFocusableWidgetStateFocused) == 0x000001, "Wrong alignment on GbxUserWidget_IsFocusableWidgetStateFocused");
static_assert(sizeof(GbxUserWidget_IsFocusableWidgetStateFocused) == 0x000002, "Wrong size on GbxUserWidget_IsFocusableWidgetStateFocused");
static_assert(offsetof(GbxUserWidget_IsFocusableWidgetStateFocused, State) == 0x000000, "Member 'GbxUserWidget_IsFocusableWidgetStateFocused::State' has a wrong offset!");
static_assert(offsetof(GbxUserWidget_IsFocusableWidgetStateFocused, ReturnValue) == 0x000001, "Member 'GbxUserWidget_IsFocusableWidgetStateFocused::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUserWidget.IsFocusableWidgetStateHovered
// 0x0002 (0x0002 - 0x0000)
struct GbxUserWidget_IsFocusableWidgetStateHovered final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_IsFocusableWidgetStateHovered) == 0x000001, "Wrong alignment on GbxUserWidget_IsFocusableWidgetStateHovered");
static_assert(sizeof(GbxUserWidget_IsFocusableWidgetStateHovered) == 0x000002, "Wrong size on GbxUserWidget_IsFocusableWidgetStateHovered");
static_assert(offsetof(GbxUserWidget_IsFocusableWidgetStateHovered, State) == 0x000000, "Member 'GbxUserWidget_IsFocusableWidgetStateHovered::State' has a wrong offset!");
static_assert(offsetof(GbxUserWidget_IsFocusableWidgetStateHovered, ReturnValue) == 0x000001, "Member 'GbxUserWidget_IsFocusableWidgetStateHovered::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUserWidget.GetAllChildWidgetsOfClass
// 0x0018 (0x0018 - 0x0000)
struct GbxUserWidget_GetAllChildWidgetsOfClass final
{
public:
	TSubclassOf<class UWidget>                    TargetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        OutputArray;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_GetAllChildWidgetsOfClass) == 0x000008, "Wrong alignment on GbxUserWidget_GetAllChildWidgetsOfClass");
static_assert(sizeof(GbxUserWidget_GetAllChildWidgetsOfClass) == 0x000018, "Wrong size on GbxUserWidget_GetAllChildWidgetsOfClass");
static_assert(offsetof(GbxUserWidget_GetAllChildWidgetsOfClass, TargetClass) == 0x000000, "Member 'GbxUserWidget_GetAllChildWidgetsOfClass::TargetClass' has a wrong offset!");
static_assert(offsetof(GbxUserWidget_GetAllChildWidgetsOfClass, OutputArray) == 0x000008, "Member 'GbxUserWidget_GetAllChildWidgetsOfClass::OutputArray' has a wrong offset!");

// Function GbxUI.GbxUserWidget.GotoAndStop
// 0x0010 (0x0010 - 0x0000)
struct GbxUserWidget_GotoAndStop final
{
public:
	struct FFrameTime                             StopTime;                                          // 0x0000(0x0008)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_GotoAndStop) == 0x000008, "Wrong alignment on GbxUserWidget_GotoAndStop");
static_assert(sizeof(GbxUserWidget_GotoAndStop) == 0x000010, "Wrong size on GbxUserWidget_GotoAndStop");
static_assert(offsetof(GbxUserWidget_GotoAndStop, StopTime) == 0x000000, "Member 'GbxUserWidget_GotoAndStop::StopTime' has a wrong offset!");
static_assert(offsetof(GbxUserWidget_GotoAndStop, InAnimation) == 0x000008, "Member 'GbxUserWidget_GotoAndStop::InAnimation' has a wrong offset!");

// Function GbxUI.GbxUserWidget.HandleFocusableWidgetStateChanged
// 0x0003 (0x0003 - 0x0000)
struct GbxUserWidget_HandleFocusableWidgetStateChanged final
{
public:
	EGbxFocusableWidgetState                      NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBecameFocused;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLostFocus;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_HandleFocusableWidgetStateChanged) == 0x000001, "Wrong alignment on GbxUserWidget_HandleFocusableWidgetStateChanged");
static_assert(sizeof(GbxUserWidget_HandleFocusableWidgetStateChanged) == 0x000003, "Wrong size on GbxUserWidget_HandleFocusableWidgetStateChanged");
static_assert(offsetof(GbxUserWidget_HandleFocusableWidgetStateChanged, NewState) == 0x000000, "Member 'GbxUserWidget_HandleFocusableWidgetStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(GbxUserWidget_HandleFocusableWidgetStateChanged, bBecameFocused) == 0x000001, "Member 'GbxUserWidget_HandleFocusableWidgetStateChanged::bBecameFocused' has a wrong offset!");
static_assert(offsetof(GbxUserWidget_HandleFocusableWidgetStateChanged, bLostFocus) == 0x000002, "Member 'GbxUserWidget_HandleFocusableWidgetStateChanged::bLostFocus' has a wrong offset!");

// Function GbxUI.GbxUserWidget.SetLabelText
// 0x0018 (0x0018 - 0x0000)
struct GbxUserWidget_SetLabelText final
{
public:
	class FText                                   LabelText;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_SetLabelText) == 0x000008, "Wrong alignment on GbxUserWidget_SetLabelText");
static_assert(sizeof(GbxUserWidget_SetLabelText) == 0x000018, "Wrong size on GbxUserWidget_SetLabelText");
static_assert(offsetof(GbxUserWidget_SetLabelText, LabelText) == 0x000000, "Member 'GbxUserWidget_SetLabelText::LabelText' has a wrong offset!");

// Function GbxUI.GbxUserWidget.IsRegisteredAsFocusableWidget
// 0x0001 (0x0001 - 0x0000)
struct GbxUserWidget_IsRegisteredAsFocusableWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUserWidget_IsRegisteredAsFocusableWidget) == 0x000001, "Wrong alignment on GbxUserWidget_IsRegisteredAsFocusableWidget");
static_assert(sizeof(GbxUserWidget_IsRegisteredAsFocusableWidget) == 0x000001, "Wrong size on GbxUserWidget_IsRegisteredAsFocusableWidget");
static_assert(offsetof(GbxUserWidget_IsRegisteredAsFocusableWidget, ReturnValue) == 0x000000, "Member 'GbxUserWidget_IsRegisteredAsFocusableWidget::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.HandleMenuAspectRatioChanged
// 0x0004 (0x0004 - 0x0000)
struct GbxUmgMenu_HandleMenuAspectRatioChanged final
{
public:
	float                                         NewAspectRatio;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_HandleMenuAspectRatioChanged) == 0x000004, "Wrong alignment on GbxUmgMenu_HandleMenuAspectRatioChanged");
static_assert(sizeof(GbxUmgMenu_HandleMenuAspectRatioChanged) == 0x000004, "Wrong size on GbxUmgMenu_HandleMenuAspectRatioChanged");
static_assert(offsetof(GbxUmgMenu_HandleMenuAspectRatioChanged, NewAspectRatio) == 0x000000, "Member 'GbxUmgMenu_HandleMenuAspectRatioChanged::NewAspectRatio' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.HandleMenuInputAction
// 0x0010 (0x0010 - 0x0000)
struct GbxUmgMenu_HandleMenuInputAction final
{
public:
	class FName                                   InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxUmgMenu_HandleMenuInputAction) == 0x000004, "Wrong alignment on GbxUmgMenu_HandleMenuInputAction");
static_assert(sizeof(GbxUmgMenu_HandleMenuInputAction) == 0x000010, "Wrong size on GbxUmgMenu_HandleMenuInputAction");
static_assert(offsetof(GbxUmgMenu_HandleMenuInputAction, InputAction) == 0x000000, "Member 'GbxUmgMenu_HandleMenuInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_HandleMenuInputAction, ControllerId) == 0x000008, "Member 'GbxUmgMenu_HandleMenuInputAction::ControllerId' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.HandleMenuInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct GbxUmgMenu_HandleMenuInputDeviceChanged final
{
public:
	EGbxMenuInputDevice                           NewInputDevice;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_HandleMenuInputDeviceChanged) == 0x000001, "Wrong alignment on GbxUmgMenu_HandleMenuInputDeviceChanged");
static_assert(sizeof(GbxUmgMenu_HandleMenuInputDeviceChanged) == 0x000001, "Wrong size on GbxUmgMenu_HandleMenuInputDeviceChanged");
static_assert(offsetof(GbxUmgMenu_HandleMenuInputDeviceChanged, NewInputDevice) == 0x000000, "Member 'GbxUmgMenu_HandleMenuInputDeviceChanged::NewInputDevice' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.MenuStack_PopTo
// 0x0008 (0x0008 - 0x0000)
struct GbxUmgMenu_MenuStack_PopTo final
{
public:
	const class UObject*                          Menu;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_MenuStack_PopTo) == 0x000008, "Wrong alignment on GbxUmgMenu_MenuStack_PopTo");
static_assert(sizeof(GbxUmgMenu_MenuStack_PopTo) == 0x000008, "Wrong size on GbxUmgMenu_MenuStack_PopTo");
static_assert(offsetof(GbxUmgMenu_MenuStack_PopTo, Menu) == 0x000000, "Member 'GbxUmgMenu_MenuStack_PopTo::Menu' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.MenuStack_PopToSwitchTo
// 0x0018 (0x0018 - 0x0000)
struct GbxUmgMenu_MenuStack_PopToSwitchTo final
{
public:
	const class UObject*                          Menu;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxMenuData*                           MenuDataIn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_MenuStack_PopToSwitchTo) == 0x000008, "Wrong alignment on GbxUmgMenu_MenuStack_PopToSwitchTo");
static_assert(sizeof(GbxUmgMenu_MenuStack_PopToSwitchTo) == 0x000018, "Wrong size on GbxUmgMenu_MenuStack_PopToSwitchTo");
static_assert(offsetof(GbxUmgMenu_MenuStack_PopToSwitchTo, Menu) == 0x000000, "Member 'GbxUmgMenu_MenuStack_PopToSwitchTo::Menu' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_MenuStack_PopToSwitchTo, MenuDataIn) == 0x000008, "Member 'GbxUmgMenu_MenuStack_PopToSwitchTo::MenuDataIn' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_MenuStack_PopToSwitchTo, ReturnValue) == 0x000010, "Member 'GbxUmgMenu_MenuStack_PopToSwitchTo::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.MenuStack_Push
// 0x0010 (0x0010 - 0x0000)
struct GbxUmgMenu_MenuStack_Push final
{
public:
	class UGbxMenuData*                           MenuDataIn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_MenuStack_Push) == 0x000008, "Wrong alignment on GbxUmgMenu_MenuStack_Push");
static_assert(sizeof(GbxUmgMenu_MenuStack_Push) == 0x000010, "Wrong size on GbxUmgMenu_MenuStack_Push");
static_assert(offsetof(GbxUmgMenu_MenuStack_Push, MenuDataIn) == 0x000000, "Member 'GbxUmgMenu_MenuStack_Push::MenuDataIn' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_MenuStack_Push, ReturnValue) == 0x000008, "Member 'GbxUmgMenu_MenuStack_Push::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.MenuStack_SwitchTo
// 0x0010 (0x0010 - 0x0000)
struct GbxUmgMenu_MenuStack_SwitchTo final
{
public:
	class UGbxMenuData*                           MenuDataIn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_MenuStack_SwitchTo) == 0x000008, "Wrong alignment on GbxUmgMenu_MenuStack_SwitchTo");
static_assert(sizeof(GbxUmgMenu_MenuStack_SwitchTo) == 0x000010, "Wrong size on GbxUmgMenu_MenuStack_SwitchTo");
static_assert(offsetof(GbxUmgMenu_MenuStack_SwitchTo, MenuDataIn) == 0x000000, "Member 'GbxUmgMenu_MenuStack_SwitchTo::MenuDataIn' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_MenuStack_SwitchTo, ReturnValue) == 0x000008, "Member 'GbxUmgMenu_MenuStack_SwitchTo::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.RegisterFocusableWidget
// 0x0028 (0x0028 - 0x0000)
struct GbxUmgMenu_RegisterFocusableWidget final
{
public:
	class UObject*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxFocusableWidgetAdjacencyInfo       AdjacencyInfo;                                     // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_RegisterFocusableWidget) == 0x000008, "Wrong alignment on GbxUmgMenu_RegisterFocusableWidget");
static_assert(sizeof(GbxUmgMenu_RegisterFocusableWidget) == 0x000028, "Wrong size on GbxUmgMenu_RegisterFocusableWidget");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidget, Widget) == 0x000000, "Member 'GbxUmgMenu_RegisterFocusableWidget::Widget' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidget, AdjacencyInfo) == 0x000008, "Member 'GbxUmgMenu_RegisterFocusableWidget::AdjacencyInfo' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.RegisterFocusableWidgetWithAdjacency
// 0x0028 (0x0028 - 0x0000)
struct GbxUmgMenu_RegisterFocusableWidgetWithAdjacency final
{
public:
	class UObject*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentUp;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentDown;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentLeft;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentRight;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency) == 0x000008, "Wrong alignment on GbxUmgMenu_RegisterFocusableWidgetWithAdjacency");
static_assert(sizeof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency) == 0x000028, "Wrong size on GbxUmgMenu_RegisterFocusableWidgetWithAdjacency");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency, Widget) == 0x000000, "Member 'GbxUmgMenu_RegisterFocusableWidgetWithAdjacency::Widget' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency, AdjacentUp) == 0x000008, "Member 'GbxUmgMenu_RegisterFocusableWidgetWithAdjacency::AdjacentUp' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency, AdjacentDown) == 0x000010, "Member 'GbxUmgMenu_RegisterFocusableWidgetWithAdjacency::AdjacentDown' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency, AdjacentLeft) == 0x000018, "Member 'GbxUmgMenu_RegisterFocusableWidgetWithAdjacency::AdjacentLeft' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_RegisterFocusableWidgetWithAdjacency, AdjacentRight) == 0x000020, "Member 'GbxUmgMenu_RegisterFocusableWidgetWithAdjacency::AdjacentRight' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.RegisterStagePlacedHint
// 0x0018 (0x0018 - 0x0000)
struct GbxUmgMenu_RegisterStagePlacedHint final
{
public:
	TScriptInterface<class IGbxHintWidget>        InHintWidget;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   InInputAction;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_RegisterStagePlacedHint) == 0x000008, "Wrong alignment on GbxUmgMenu_RegisterStagePlacedHint");
static_assert(sizeof(GbxUmgMenu_RegisterStagePlacedHint) == 0x000018, "Wrong size on GbxUmgMenu_RegisterStagePlacedHint");
static_assert(offsetof(GbxUmgMenu_RegisterStagePlacedHint, InHintWidget) == 0x000000, "Member 'GbxUmgMenu_RegisterStagePlacedHint::InHintWidget' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_RegisterStagePlacedHint, InInputAction) == 0x000010, "Member 'GbxUmgMenu_RegisterStagePlacedHint::InInputAction' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.SetFocusableWidgetAdjancency
// 0x0028 (0x0028 - 0x0000)
struct GbxUmgMenu_SetFocusableWidgetAdjancency final
{
public:
	class UObject*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentUp;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentDown;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentLeft;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentRight;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_SetFocusableWidgetAdjancency) == 0x000008, "Wrong alignment on GbxUmgMenu_SetFocusableWidgetAdjancency");
static_assert(sizeof(GbxUmgMenu_SetFocusableWidgetAdjancency) == 0x000028, "Wrong size on GbxUmgMenu_SetFocusableWidgetAdjancency");
static_assert(offsetof(GbxUmgMenu_SetFocusableWidgetAdjancency, Widget) == 0x000000, "Member 'GbxUmgMenu_SetFocusableWidgetAdjancency::Widget' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_SetFocusableWidgetAdjancency, AdjacentUp) == 0x000008, "Member 'GbxUmgMenu_SetFocusableWidgetAdjancency::AdjacentUp' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_SetFocusableWidgetAdjancency, AdjacentDown) == 0x000010, "Member 'GbxUmgMenu_SetFocusableWidgetAdjancency::AdjacentDown' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_SetFocusableWidgetAdjancency, AdjacentLeft) == 0x000018, "Member 'GbxUmgMenu_SetFocusableWidgetAdjancency::AdjacentLeft' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_SetFocusableWidgetAdjancency, AdjacentRight) == 0x000020, "Member 'GbxUmgMenu_SetFocusableWidgetAdjancency::AdjacentRight' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.SetFocusedWidget
// 0x0010 (0x0010 - 0x0000)
struct GbxUmgMenu_SetFocusedWidget final
{
public:
	class UObject*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxUmgMenu_SetFocusedWidget) == 0x000008, "Wrong alignment on GbxUmgMenu_SetFocusedWidget");
static_assert(sizeof(GbxUmgMenu_SetFocusedWidget) == 0x000010, "Wrong size on GbxUmgMenu_SetFocusedWidget");
static_assert(offsetof(GbxUmgMenu_SetFocusedWidget, Widget) == 0x000000, "Member 'GbxUmgMenu_SetFocusedWidget::Widget' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_SetFocusedWidget, bFromMouse) == 0x000008, "Member 'GbxUmgMenu_SetFocusedWidget::bFromMouse' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.SetHintBarContainer
// 0x0010 (0x0010 - 0x0000)
struct GbxUmgMenu_SetHintBarContainer final
{
public:
	TScriptInterface<class IGbxHintBarWidgetContainer> InContainer;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_SetHintBarContainer) == 0x000008, "Wrong alignment on GbxUmgMenu_SetHintBarContainer");
static_assert(sizeof(GbxUmgMenu_SetHintBarContainer) == 0x000010, "Wrong size on GbxUmgMenu_SetHintBarContainer");
static_assert(offsetof(GbxUmgMenu_SetHintBarContainer, InContainer) == 0x000000, "Member 'GbxUmgMenu_SetHintBarContainer::InContainer' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.SetSlateFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct GbxUmgMenu_SetSlateFocusedWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_SetSlateFocusedWidget) == 0x000008, "Wrong alignment on GbxUmgMenu_SetSlateFocusedWidget");
static_assert(sizeof(GbxUmgMenu_SetSlateFocusedWidget) == 0x000008, "Wrong size on GbxUmgMenu_SetSlateFocusedWidget");
static_assert(offsetof(GbxUmgMenu_SetSlateFocusedWidget, Widget) == 0x000000, "Member 'GbxUmgMenu_SetSlateFocusedWidget::Widget' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.SetWidgetAdjacency
// 0x0028 (0x0028 - 0x0000)
struct GbxUmgMenu_SetWidgetAdjacency final
{
public:
	class UObject*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxFocusableWidgetAdjacencyInfo       AdjacencyInfo;                                     // 0x0008(0x0020)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_SetWidgetAdjacency) == 0x000008, "Wrong alignment on GbxUmgMenu_SetWidgetAdjacency");
static_assert(sizeof(GbxUmgMenu_SetWidgetAdjacency) == 0x000028, "Wrong size on GbxUmgMenu_SetWidgetAdjacency");
static_assert(offsetof(GbxUmgMenu_SetWidgetAdjacency, Widget) == 0x000000, "Member 'GbxUmgMenu_SetWidgetAdjacency::Widget' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_SetWidgetAdjacency, AdjacencyInfo) == 0x000008, "Member 'GbxUmgMenu_SetWidgetAdjacency::AdjacencyInfo' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.GetCurrentInputDevice
// 0x0001 (0x0001 - 0x0000)
struct GbxUmgMenu_GetCurrentInputDevice final
{
public:
	EGbxMenuInputDevice                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_GetCurrentInputDevice) == 0x000001, "Wrong alignment on GbxUmgMenu_GetCurrentInputDevice");
static_assert(sizeof(GbxUmgMenu_GetCurrentInputDevice) == 0x000001, "Wrong size on GbxUmgMenu_GetCurrentInputDevice");
static_assert(offsetof(GbxUmgMenu_GetCurrentInputDevice, ReturnValue) == 0x000000, "Member 'GbxUmgMenu_GetCurrentInputDevice::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.GetFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct GbxUmgMenu_GetFocusedWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_GetFocusedWidget) == 0x000008, "Wrong alignment on GbxUmgMenu_GetFocusedWidget");
static_assert(sizeof(GbxUmgMenu_GetFocusedWidget) == 0x000008, "Wrong size on GbxUmgMenu_GetFocusedWidget");
static_assert(offsetof(GbxUmgMenu_GetFocusedWidget, ReturnValue) == 0x000000, "Member 'GbxUmgMenu_GetFocusedWidget::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.GetListItemFactory
// 0x0008 (0x0008 - 0x0000)
struct GbxUmgMenu_GetListItemFactory final
{
public:
	class UGbxListItemFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_GetListItemFactory) == 0x000008, "Wrong alignment on GbxUmgMenu_GetListItemFactory");
static_assert(sizeof(GbxUmgMenu_GetListItemFactory) == 0x000008, "Wrong size on GbxUmgMenu_GetListItemFactory");
static_assert(offsetof(GbxUmgMenu_GetListItemFactory, ReturnValue) == 0x000000, "Member 'GbxUmgMenu_GetListItemFactory::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.IsActiveMenuOnStack
// 0x0001 (0x0001 - 0x0000)
struct GbxUmgMenu_IsActiveMenuOnStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUmgMenu_IsActiveMenuOnStack) == 0x000001, "Wrong alignment on GbxUmgMenu_IsActiveMenuOnStack");
static_assert(sizeof(GbxUmgMenu_IsActiveMenuOnStack) == 0x000001, "Wrong size on GbxUmgMenu_IsActiveMenuOnStack");
static_assert(offsetof(GbxUmgMenu_IsActiveMenuOnStack, ReturnValue) == 0x000000, "Member 'GbxUmgMenu_IsActiveMenuOnStack::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUmgMenu.IsWidgetFocused
// 0x0010 (0x0010 - 0x0000)
struct GbxUmgMenu_IsWidgetFocused final
{
public:
	const class UObject*                          WidgetInQuestion;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxUmgMenu_IsWidgetFocused) == 0x000008, "Wrong alignment on GbxUmgMenu_IsWidgetFocused");
static_assert(sizeof(GbxUmgMenu_IsWidgetFocused) == 0x000010, "Wrong size on GbxUmgMenu_IsWidgetFocused");
static_assert(offsetof(GbxUmgMenu_IsWidgetFocused, WidgetInQuestion) == 0x000000, "Member 'GbxUmgMenu_IsWidgetFocused::WidgetInQuestion' has a wrong offset!");
static_assert(offsetof(GbxUmgMenu_IsWidgetFocused, ReturnValue) == 0x000008, "Member 'GbxUmgMenu_IsWidgetFocused::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxObject.RotateAboutPoint
// 0x000C (0x000C - 0x0000)
struct GbxGFxObject_RotateAboutPoint final
{
public:
	float                                         Degrees;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Point;                                             // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxObject_RotateAboutPoint) == 0x000004, "Wrong alignment on GbxGFxObject_RotateAboutPoint");
static_assert(sizeof(GbxGFxObject_RotateAboutPoint) == 0x00000C, "Wrong size on GbxGFxObject_RotateAboutPoint");
static_assert(offsetof(GbxGFxObject_RotateAboutPoint, Degrees) == 0x000000, "Member 'GbxGFxObject_RotateAboutPoint::Degrees' has a wrong offset!");
static_assert(offsetof(GbxGFxObject_RotateAboutPoint, Point) == 0x000004, "Member 'GbxGFxObject_RotateAboutPoint::Point' has a wrong offset!");

// Function GbxUI.GbxGFxObject.SetBaseDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxObject_SetBaseDisplayTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxObject_SetBaseDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxObject_SetBaseDisplayTransform");
static_assert(sizeof(GbxGFxObject_SetBaseDisplayTransform) == 0x000030, "Wrong size on GbxGFxObject_SetBaseDisplayTransform");
static_assert(offsetof(GbxGFxObject_SetBaseDisplayTransform, Transform) == 0x000000, "Member 'GbxGFxObject_SetBaseDisplayTransform::Transform' has a wrong offset!");

// Function GbxUI.GbxGFxObject.SetOffsetDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxObject_SetOffsetDisplayTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxObject_SetOffsetDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxObject_SetOffsetDisplayTransform");
static_assert(sizeof(GbxGFxObject_SetOffsetDisplayTransform) == 0x000030, "Wrong size on GbxGFxObject_SetOffsetDisplayTransform");
static_assert(offsetof(GbxGFxObject_SetOffsetDisplayTransform, Transform) == 0x000000, "Member 'GbxGFxObject_SetOffsetDisplayTransform::Transform' has a wrong offset!");

// Function GbxUI.GbxGFxObject.GetBaseDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxObject_GetBaseDisplayTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxObject_GetBaseDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxObject_GetBaseDisplayTransform");
static_assert(sizeof(GbxGFxObject_GetBaseDisplayTransform) == 0x000030, "Wrong size on GbxGFxObject_GetBaseDisplayTransform");
static_assert(offsetof(GbxGFxObject_GetBaseDisplayTransform, ReturnValue) == 0x000000, "Member 'GbxGFxObject_GetBaseDisplayTransform::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxObject.GetOffsetDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxObject_GetOffsetDisplayTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxObject_GetOffsetDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxObject_GetOffsetDisplayTransform");
static_assert(sizeof(GbxGFxObject_GetOffsetDisplayTransform) == 0x000030, "Wrong size on GbxGFxObject_GetOffsetDisplayTransform");
static_assert(offsetof(GbxGFxObject_GetOffsetDisplayTransform, ReturnValue) == 0x000000, "Member 'GbxGFxObject_GetOffsetDisplayTransform::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxGridScrollingList.OnScrollBarPositionUpdated
// 0x0004 (0x0004 - 0x0000)
struct GbxGFxGridScrollingList_OnScrollBarPositionUpdated final
{
public:
	float                                         SliderPercentage;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxGridScrollingList_OnScrollBarPositionUpdated) == 0x000004, "Wrong alignment on GbxGFxGridScrollingList_OnScrollBarPositionUpdated");
static_assert(sizeof(GbxGFxGridScrollingList_OnScrollBarPositionUpdated) == 0x000004, "Wrong size on GbxGFxGridScrollingList_OnScrollBarPositionUpdated");
static_assert(offsetof(GbxGFxGridScrollingList_OnScrollBarPositionUpdated, SliderPercentage) == 0x000000, "Member 'GbxGFxGridScrollingList_OnScrollBarPositionUpdated::SliderPercentage' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SpawnGbxGFxMovie
// 0x0018 (0x0018 - 0x0000)
struct GbxGFxMovie_SpawnGbxGFxMovie final
{
public:
	class AGbxPlayerController*                   GbxPlayerController;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGbxGFxMovie>               MovieClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGbxGFxMovie*                     ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SpawnGbxGFxMovie) == 0x000008, "Wrong alignment on GbxGFxMovie_SpawnGbxGFxMovie");
static_assert(sizeof(GbxGFxMovie_SpawnGbxGFxMovie) == 0x000018, "Wrong size on GbxGFxMovie_SpawnGbxGFxMovie");
static_assert(offsetof(GbxGFxMovie_SpawnGbxGFxMovie, GbxPlayerController) == 0x000000, "Member 'GbxGFxMovie_SpawnGbxGFxMovie::GbxPlayerController' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_SpawnGbxGFxMovie, MovieClass) == 0x000008, "Member 'GbxGFxMovie_SpawnGbxGFxMovie::MovieClass' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_SpawnGbxGFxMovie, ReturnValue) == 0x000010, "Member 'GbxGFxMovie_SpawnGbxGFxMovie::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.ApplyNewAudioSettings
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMovie_ApplyNewAudioSettings final
{
public:
	class UDataTable*                             NewDataTable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIAudioSettingOperation                      MergeOperation;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxMovie_ApplyNewAudioSettings) == 0x000008, "Wrong alignment on GbxGFxMovie_ApplyNewAudioSettings");
static_assert(sizeof(GbxGFxMovie_ApplyNewAudioSettings) == 0x000010, "Wrong size on GbxGFxMovie_ApplyNewAudioSettings");
static_assert(offsetof(GbxGFxMovie_ApplyNewAudioSettings, NewDataTable) == 0x000000, "Member 'GbxGFxMovie_ApplyNewAudioSettings::NewDataTable' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_ApplyNewAudioSettings, MergeOperation) == 0x000008, "Member 'GbxGFxMovie_ApplyNewAudioSettings::MergeOperation' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.extAnimationFinished
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMovie_ExtAnimationFinished final
{
public:
	class FString                                 TargetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_ExtAnimationFinished) == 0x000008, "Wrong alignment on GbxGFxMovie_ExtAnimationFinished");
static_assert(sizeof(GbxGFxMovie_ExtAnimationFinished) == 0x000010, "Wrong size on GbxGFxMovie_ExtAnimationFinished");
static_assert(offsetof(GbxGFxMovie_ExtAnimationFinished, TargetName) == 0x000000, "Member 'GbxGFxMovie_ExtAnimationFinished::TargetName' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetBaseDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMovie_GetBaseDisplayTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetBaseDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxMovie_GetBaseDisplayTransform");
static_assert(sizeof(GbxGFxMovie_GetBaseDisplayTransform) == 0x000030, "Wrong size on GbxGFxMovie_GetBaseDisplayTransform");
static_assert(offsetof(GbxGFxMovie_GetBaseDisplayTransform, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetBaseDisplayTransform::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetMovieDimensions
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_GetMovieDimensions final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetMovieDimensions) == 0x000004, "Wrong alignment on GbxGFxMovie_GetMovieDimensions");
static_assert(sizeof(GbxGFxMovie_GetMovieDimensions) == 0x000008, "Wrong size on GbxGFxMovie_GetMovieDimensions");
static_assert(offsetof(GbxGFxMovie_GetMovieDimensions, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetMovieDimensions::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetOffsetDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMovie_GetOffsetDisplayTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetOffsetDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxMovie_GetOffsetDisplayTransform");
static_assert(sizeof(GbxGFxMovie_GetOffsetDisplayTransform) == 0x000030, "Wrong size on GbxGFxMovie_GetOffsetDisplayTransform");
static_assert(offsetof(GbxGFxMovie_GetOffsetDisplayTransform, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetOffsetDisplayTransform::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetOwningPlayerController
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_GetOwningPlayerController final
{
public:
	class AGbxPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetOwningPlayerController) == 0x000008, "Wrong alignment on GbxGFxMovie_GetOwningPlayerController");
static_assert(sizeof(GbxGFxMovie_GetOwningPlayerController) == 0x000008, "Wrong size on GbxGFxMovie_GetOwningPlayerController");
static_assert(offsetof(GbxGFxMovie_GetOwningPlayerController, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetOwningPlayerController::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetOwningPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_GetOwningPlayerPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetOwningPlayerPawn) == 0x000008, "Wrong alignment on GbxGFxMovie_GetOwningPlayerPawn");
static_assert(sizeof(GbxGFxMovie_GetOwningPlayerPawn) == 0x000008, "Wrong size on GbxGFxMovie_GetOwningPlayerPawn");
static_assert(offsetof(GbxGFxMovie_GetOwningPlayerPawn, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetOwningPlayerPawn::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetStageDimensions
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_GetStageDimensions final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetStageDimensions) == 0x000004, "Wrong alignment on GbxGFxMovie_GetStageDimensions");
static_assert(sizeof(GbxGFxMovie_GetStageDimensions) == 0x000008, "Wrong size on GbxGFxMovie_GetStageDimensions");
static_assert(offsetof(GbxGFxMovie_GetStageDimensions, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetStageDimensions::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetViewportDimensions
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_GetViewportDimensions final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetViewportDimensions) == 0x000004, "Wrong alignment on GbxGFxMovie_GetViewportDimensions");
static_assert(sizeof(GbxGFxMovie_GetViewportDimensions) == 0x000008, "Wrong size on GbxGFxMovie_GetViewportDimensions");
static_assert(offsetof(GbxGFxMovie_GetViewportDimensions, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetViewportDimensions::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.GetViewportOffset
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_GetViewportOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_GetViewportOffset) == 0x000004, "Wrong alignment on GbxGFxMovie_GetViewportOffset");
static_assert(sizeof(GbxGFxMovie_GetViewportOffset) == 0x000008, "Wrong size on GbxGFxMovie_GetViewportOffset");
static_assert(offsetof(GbxGFxMovie_GetViewportOffset, ReturnValue) == 0x000000, "Member 'GbxGFxMovie_GetViewportOffset::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.RunUIEventAudio
// 0x0020 (0x0020 - 0x0000)
struct GbxGFxMovie_RunUIEventAudio final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderHistory;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxMovie_RunUIEventAudio) == 0x000008, "Wrong alignment on GbxGFxMovie_RunUIEventAudio");
static_assert(sizeof(GbxGFxMovie_RunUIEventAudio) == 0x000020, "Wrong size on GbxGFxMovie_RunUIEventAudio");
static_assert(offsetof(GbxGFxMovie_RunUIEventAudio, EventName) == 0x000000, "Member 'GbxGFxMovie_RunUIEventAudio::EventName' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_RunUIEventAudio, ProviderHistory) == 0x000008, "Member 'GbxGFxMovie_RunUIEventAudio::ProviderHistory' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_RunUIEventAudio, ReturnValue) == 0x000018, "Member 'GbxGFxMovie_RunUIEventAudio::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SetAnchor
// 0x0018 (0x0018 - 0x0000)
struct GbxGFxMovie_SetAnchor final
{
public:
	struct FGbxGFxAnchor                          Anchor;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SetAnchor) == 0x000004, "Wrong alignment on GbxGFxMovie_SetAnchor");
static_assert(sizeof(GbxGFxMovie_SetAnchor) == 0x000018, "Wrong size on GbxGFxMovie_SetAnchor");
static_assert(offsetof(GbxGFxMovie_SetAnchor, Anchor) == 0x000000, "Member 'GbxGFxMovie_SetAnchor::Anchor' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SetAudioEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxMovie_SetAudioEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SetAudioEnabled) == 0x000001, "Wrong alignment on GbxGFxMovie_SetAudioEnabled");
static_assert(sizeof(GbxGFxMovie_SetAudioEnabled) == 0x000001, "Wrong size on GbxGFxMovie_SetAudioEnabled");
static_assert(offsetof(GbxGFxMovie_SetAudioEnabled, bEnabled) == 0x000000, "Member 'GbxGFxMovie_SetAudioEnabled::bEnabled' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SetBaseDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMovie_SetBaseDisplayTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SetBaseDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxMovie_SetBaseDisplayTransform");
static_assert(sizeof(GbxGFxMovie_SetBaseDisplayTransform) == 0x000030, "Wrong size on GbxGFxMovie_SetBaseDisplayTransform");
static_assert(offsetof(GbxGFxMovie_SetBaseDisplayTransform, Transform) == 0x000000, "Member 'GbxGFxMovie_SetBaseDisplayTransform::Transform' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SetOffsetDisplayTransform
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMovie_SetOffsetDisplayTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SetOffsetDisplayTransform) == 0x000010, "Wrong alignment on GbxGFxMovie_SetOffsetDisplayTransform");
static_assert(sizeof(GbxGFxMovie_SetOffsetDisplayTransform) == 0x000030, "Wrong size on GbxGFxMovie_SetOffsetDisplayTransform");
static_assert(offsetof(GbxGFxMovie_SetOffsetDisplayTransform, Transform) == 0x000000, "Member 'GbxGFxMovie_SetOffsetDisplayTransform::Transform' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SetViewportToPlayerScreen
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMovie_SetViewportToPlayerScreen final
{
public:
	class AGbxPlayerController*                   Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SetViewportToPlayerScreen) == 0x000008, "Wrong alignment on GbxGFxMovie_SetViewportToPlayerScreen");
static_assert(sizeof(GbxGFxMovie_SetViewportToPlayerScreen) == 0x000008, "Wrong size on GbxGFxMovie_SetViewportToPlayerScreen");
static_assert(offsetof(GbxGFxMovie_SetViewportToPlayerScreen, Pc) == 0x000000, "Member 'GbxGFxMovie_SetViewportToPlayerScreen::Pc' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.SpawnMovie
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMovie_SpawnMovie final
{
public:
	class AGbxPlayerController*                   NewGPCOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_SpawnMovie) == 0x000008, "Wrong alignment on GbxGFxMovie_SpawnMovie");
static_assert(sizeof(GbxGFxMovie_SpawnMovie) == 0x000010, "Wrong size on GbxGFxMovie_SpawnMovie");
static_assert(offsetof(GbxGFxMovie_SpawnMovie, NewGPCOwner) == 0x000000, "Member 'GbxGFxMovie_SpawnMovie::NewGPCOwner' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_SpawnMovie, RenderTarget) == 0x000008, "Member 'GbxGFxMovie_SpawnMovie::RenderTarget' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.TranslateRectToScreen
// 0x0028 (0x0028 - 0x0000)
struct GbxGFxMovie_TranslateRectToScreen final
{
public:
	struct FBox2D                                 Rect;                                              // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_TranslateRectToScreen) == 0x000004, "Wrong alignment on GbxGFxMovie_TranslateRectToScreen");
static_assert(sizeof(GbxGFxMovie_TranslateRectToScreen) == 0x000028, "Wrong size on GbxGFxMovie_TranslateRectToScreen");
static_assert(offsetof(GbxGFxMovie_TranslateRectToScreen, Rect) == 0x000000, "Member 'GbxGFxMovie_TranslateRectToScreen::Rect' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateRectToScreen, ReturnValue) == 0x000014, "Member 'GbxGFxMovie_TranslateRectToScreen::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.TranslateScreenToLocal
// 0x0014 (0x0014 - 0x0000)
struct GbxGFxMovie_TranslateScreenToLocal final
{
public:
	struct FVector2D                              Point;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMovieDimensions;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_TranslateScreenToLocal) == 0x000004, "Wrong alignment on GbxGFxMovie_TranslateScreenToLocal");
static_assert(sizeof(GbxGFxMovie_TranslateScreenToLocal) == 0x000014, "Wrong size on GbxGFxMovie_TranslateScreenToLocal");
static_assert(offsetof(GbxGFxMovie_TranslateScreenToLocal, Point) == 0x000000, "Member 'GbxGFxMovie_TranslateScreenToLocal::Point' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateScreenToLocal, bUseMovieDimensions) == 0x000008, "Member 'GbxGFxMovie_TranslateScreenToLocal::bUseMovieDimensions' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateScreenToLocal, ReturnValue) == 0x00000C, "Member 'GbxGFxMovie_TranslateScreenToLocal::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.TranslateToScreen
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMovie_TranslateToScreen final
{
public:
	struct FVector2D                              Point;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMovie_TranslateToScreen) == 0x000004, "Wrong alignment on GbxGFxMovie_TranslateToScreen");
static_assert(sizeof(GbxGFxMovie_TranslateToScreen) == 0x000010, "Wrong size on GbxGFxMovie_TranslateToScreen");
static_assert(offsetof(GbxGFxMovie_TranslateToScreen, Point) == 0x000000, "Member 'GbxGFxMovie_TranslateToScreen::Point' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateToScreen, ReturnValue) == 0x000008, "Member 'GbxGFxMovie_TranslateToScreen::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMovie.TranslateWorldToLocal
// 0x0018 (0x0018 - 0x0000)
struct GbxGFxMovie_TranslateWorldToLocal final
{
public:
	struct FVector                                LocationWorldSpace;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPositionLocal;                                  // 0x000C(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerViewportRelative;                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMovieDimensions;                               // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxMovie_TranslateWorldToLocal) == 0x000004, "Wrong alignment on GbxGFxMovie_TranslateWorldToLocal");
static_assert(sizeof(GbxGFxMovie_TranslateWorldToLocal) == 0x000018, "Wrong size on GbxGFxMovie_TranslateWorldToLocal");
static_assert(offsetof(GbxGFxMovie_TranslateWorldToLocal, LocationWorldSpace) == 0x000000, "Member 'GbxGFxMovie_TranslateWorldToLocal::LocationWorldSpace' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateWorldToLocal, OutPositionLocal) == 0x00000C, "Member 'GbxGFxMovie_TranslateWorldToLocal::OutPositionLocal' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateWorldToLocal, bPlayerViewportRelative) == 0x000014, "Member 'GbxGFxMovie_TranslateWorldToLocal::bPlayerViewportRelative' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateWorldToLocal, bUseMovieDimensions) == 0x000015, "Member 'GbxGFxMovie_TranslateWorldToLocal::bUseMovieDimensions' has a wrong offset!");
static_assert(offsetof(GbxGFxMovie_TranslateWorldToLocal, ReturnValue) == 0x000016, "Member 'GbxGFxMovie_TranslateWorldToLocal::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.GetFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxMenu_GetFocusedWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMenu_GetFocusedWidget) == 0x000008, "Wrong alignment on GbxGFxMenu_GetFocusedWidget");
static_assert(sizeof(GbxGFxMenu_GetFocusedWidget) == 0x000008, "Wrong size on GbxGFxMenu_GetFocusedWidget");
static_assert(offsetof(GbxGFxMenu_GetFocusedWidget, ReturnValue) == 0x000000, "Member 'GbxGFxMenu_GetFocusedWidget::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.IsWidgetFocused
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMenu_IsWidgetFocused final
{
public:
	const class UObject*                          WidgetInQuestion;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxMenu_IsWidgetFocused) == 0x000008, "Wrong alignment on GbxGFxMenu_IsWidgetFocused");
static_assert(sizeof(GbxGFxMenu_IsWidgetFocused) == 0x000010, "Wrong size on GbxGFxMenu_IsWidgetFocused");
static_assert(offsetof(GbxGFxMenu_IsWidgetFocused, WidgetInQuestion) == 0x000000, "Member 'GbxGFxMenu_IsWidgetFocused::WidgetInQuestion' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_IsWidgetFocused, ReturnValue) == 0x000008, "Member 'GbxGFxMenu_IsWidgetFocused::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.RegisterFocusableWidget
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMenu_RegisterFocusableWidget final
{
public:
	TScriptInterface<class IGbxFocusableWidget>   Widget;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGbxFocusableWidgetAdjacencyInfo       AdjacencyInfo;                                     // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMenu_RegisterFocusableWidget) == 0x000008, "Wrong alignment on GbxGFxMenu_RegisterFocusableWidget");
static_assert(sizeof(GbxGFxMenu_RegisterFocusableWidget) == 0x000030, "Wrong size on GbxGFxMenu_RegisterFocusableWidget");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidget, Widget) == 0x000000, "Member 'GbxGFxMenu_RegisterFocusableWidget::Widget' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidget, AdjacencyInfo) == 0x000010, "Member 'GbxGFxMenu_RegisterFocusableWidget::AdjacencyInfo' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.RegisterFocusableWidgetWithAdjacency
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMenu_RegisterFocusableWidgetWithAdjacency final
{
public:
	TScriptInterface<class IGbxFocusableWidget>   Widget;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentUp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentDown;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentLeft;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentRight;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency) == 0x000008, "Wrong alignment on GbxGFxMenu_RegisterFocusableWidgetWithAdjacency");
static_assert(sizeof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency) == 0x000030, "Wrong size on GbxGFxMenu_RegisterFocusableWidgetWithAdjacency");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency, Widget) == 0x000000, "Member 'GbxGFxMenu_RegisterFocusableWidgetWithAdjacency::Widget' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency, AdjacentUp) == 0x000010, "Member 'GbxGFxMenu_RegisterFocusableWidgetWithAdjacency::AdjacentUp' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency, AdjacentDown) == 0x000018, "Member 'GbxGFxMenu_RegisterFocusableWidgetWithAdjacency::AdjacentDown' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency, AdjacentLeft) == 0x000020, "Member 'GbxGFxMenu_RegisterFocusableWidgetWithAdjacency::AdjacentLeft' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_RegisterFocusableWidgetWithAdjacency, AdjacentRight) == 0x000028, "Member 'GbxGFxMenu_RegisterFocusableWidgetWithAdjacency::AdjacentRight' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.SetFocusableWidgetAdjancency
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMenu_SetFocusableWidgetAdjancency final
{
public:
	TScriptInterface<class IGbxFocusableWidget>   Widget;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentUp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentDown;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentLeft;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdjacentRight;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMenu_SetFocusableWidgetAdjancency) == 0x000008, "Wrong alignment on GbxGFxMenu_SetFocusableWidgetAdjancency");
static_assert(sizeof(GbxGFxMenu_SetFocusableWidgetAdjancency) == 0x000030, "Wrong size on GbxGFxMenu_SetFocusableWidgetAdjancency");
static_assert(offsetof(GbxGFxMenu_SetFocusableWidgetAdjancency, Widget) == 0x000000, "Member 'GbxGFxMenu_SetFocusableWidgetAdjancency::Widget' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_SetFocusableWidgetAdjancency, AdjacentUp) == 0x000010, "Member 'GbxGFxMenu_SetFocusableWidgetAdjancency::AdjacentUp' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_SetFocusableWidgetAdjancency, AdjacentDown) == 0x000018, "Member 'GbxGFxMenu_SetFocusableWidgetAdjancency::AdjacentDown' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_SetFocusableWidgetAdjancency, AdjacentLeft) == 0x000020, "Member 'GbxGFxMenu_SetFocusableWidgetAdjancency::AdjacentLeft' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_SetFocusableWidgetAdjancency, AdjacentRight) == 0x000028, "Member 'GbxGFxMenu_SetFocusableWidgetAdjancency::AdjacentRight' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.SetFocusedWidget
// 0x0018 (0x0018 - 0x0000)
struct GbxGFxMenu_SetFocusedWidget final
{
public:
	TScriptInterface<class IGbxFocusableWidget>   WidgetToFocus;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxMenu_SetFocusedWidget) == 0x000008, "Wrong alignment on GbxGFxMenu_SetFocusedWidget");
static_assert(sizeof(GbxGFxMenu_SetFocusedWidget) == 0x000018, "Wrong size on GbxGFxMenu_SetFocusedWidget");
static_assert(offsetof(GbxGFxMenu_SetFocusedWidget, WidgetToFocus) == 0x000000, "Member 'GbxGFxMenu_SetFocusedWidget::WidgetToFocus' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_SetFocusedWidget, bFromMouse) == 0x000010, "Member 'GbxGFxMenu_SetFocusedWidget::bFromMouse' has a wrong offset!");

// Function GbxUI.GbxGFxMenu.SetWidgetAdjacency
// 0x0030 (0x0030 - 0x0000)
struct GbxGFxMenu_SetWidgetAdjacency final
{
public:
	TScriptInterface<class IGbxFocusableWidget>   Widget;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGbxFocusableWidgetAdjacencyInfo       AdjacencyInfo;                                     // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMenu_SetWidgetAdjacency) == 0x000008, "Wrong alignment on GbxGFxMenu_SetWidgetAdjacency");
static_assert(sizeof(GbxGFxMenu_SetWidgetAdjacency) == 0x000030, "Wrong size on GbxGFxMenu_SetWidgetAdjacency");
static_assert(offsetof(GbxGFxMenu_SetWidgetAdjacency, Widget) == 0x000000, "Member 'GbxGFxMenu_SetWidgetAdjacency::Widget' has a wrong offset!");
static_assert(offsetof(GbxGFxMenu_SetWidgetAdjacency, AdjacencyInfo) == 0x000010, "Member 'GbxGFxMenu_SetWidgetAdjacency::AdjacencyInfo' has a wrong offset!");

// Function GbxUI.GbxCoreDialogBoxHelpers.ShowBlockingDialog
// 0x0048 (0x0048 - 0x0000)
struct GbxCoreDialogBoxHelpers_ShowBlockingDialog final
{
public:
	class AGbxPlayerController*                   Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HeaderText;                                        // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0020(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bBlocksAllUsers;                                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxDialogBox*                          ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCoreDialogBoxHelpers_ShowBlockingDialog) == 0x000008, "Wrong alignment on GbxCoreDialogBoxHelpers_ShowBlockingDialog");
static_assert(sizeof(GbxCoreDialogBoxHelpers_ShowBlockingDialog) == 0x000048, "Wrong size on GbxCoreDialogBoxHelpers_ShowBlockingDialog");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowBlockingDialog, Pc) == 0x000000, "Member 'GbxCoreDialogBoxHelpers_ShowBlockingDialog::Pc' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowBlockingDialog, HeaderText) == 0x000008, "Member 'GbxCoreDialogBoxHelpers_ShowBlockingDialog::HeaderText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowBlockingDialog, MessageText) == 0x000020, "Member 'GbxCoreDialogBoxHelpers_ShowBlockingDialog::MessageText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowBlockingDialog, bBlocksAllUsers) == 0x000038, "Member 'GbxCoreDialogBoxHelpers_ShowBlockingDialog::bBlocksAllUsers' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowBlockingDialog, ReturnValue) == 0x000040, "Member 'GbxCoreDialogBoxHelpers_ShowBlockingDialog::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxCoreDialogBoxHelpers.ShowConfirmCancelDialog
// 0x0048 (0x0048 - 0x0000)
struct GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog final
{
public:
	class AGbxPlayerController*                   Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HeaderText;                                        // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0020(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bAnyUserCanInteract;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxDialogBox*                          ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog) == 0x000008, "Wrong alignment on GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog");
static_assert(sizeof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog) == 0x000048, "Wrong size on GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog, Pc) == 0x000000, "Member 'GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog::Pc' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog, HeaderText) == 0x000008, "Member 'GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog::HeaderText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog, MessageText) == 0x000020, "Member 'GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog::MessageText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog, bAnyUserCanInteract) == 0x000038, "Member 'GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog::bAnyUserCanInteract' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog, ReturnValue) == 0x000040, "Member 'GbxCoreDialogBoxHelpers_ShowConfirmCancelDialog::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxCoreDialogBoxHelpers.ShowDialog
// 0x0070 (0x0070 - 0x0000)
struct GbxCoreDialogBoxHelpers_ShowDialog final
{
public:
	class AGbxPlayerController*                   Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxDialogBoxInfo                      DialogBoxInfo;                                     // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UGbxDialogBox*                          ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCoreDialogBoxHelpers_ShowDialog) == 0x000008, "Wrong alignment on GbxCoreDialogBoxHelpers_ShowDialog");
static_assert(sizeof(GbxCoreDialogBoxHelpers_ShowDialog) == 0x000070, "Wrong size on GbxCoreDialogBoxHelpers_ShowDialog");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowDialog, Pc) == 0x000000, "Member 'GbxCoreDialogBoxHelpers_ShowDialog::Pc' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowDialog, DialogBoxInfo) == 0x000008, "Member 'GbxCoreDialogBoxHelpers_ShowDialog::DialogBoxInfo' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowDialog, ReturnValue) == 0x000068, "Member 'GbxCoreDialogBoxHelpers_ShowDialog::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxCoreDialogBoxHelpers.ShowOkayDialog
// 0x0048 (0x0048 - 0x0000)
struct GbxCoreDialogBoxHelpers_ShowOkayDialog final
{
public:
	class AGbxPlayerController*                   Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HeaderText;                                        // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0020(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bAnyUserCanInteract;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxDialogBoxHelpersDialogTemplate            Template;                                          // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxDialogBox*                          ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCoreDialogBoxHelpers_ShowOkayDialog) == 0x000008, "Wrong alignment on GbxCoreDialogBoxHelpers_ShowOkayDialog");
static_assert(sizeof(GbxCoreDialogBoxHelpers_ShowOkayDialog) == 0x000048, "Wrong size on GbxCoreDialogBoxHelpers_ShowOkayDialog");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowOkayDialog, Pc) == 0x000000, "Member 'GbxCoreDialogBoxHelpers_ShowOkayDialog::Pc' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowOkayDialog, HeaderText) == 0x000008, "Member 'GbxCoreDialogBoxHelpers_ShowOkayDialog::HeaderText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowOkayDialog, MessageText) == 0x000020, "Member 'GbxCoreDialogBoxHelpers_ShowOkayDialog::MessageText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowOkayDialog, bAnyUserCanInteract) == 0x000038, "Member 'GbxCoreDialogBoxHelpers_ShowOkayDialog::bAnyUserCanInteract' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowOkayDialog, Template) == 0x000039, "Member 'GbxCoreDialogBoxHelpers_ShowOkayDialog::Template' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowOkayDialog, ReturnValue) == 0x000040, "Member 'GbxCoreDialogBoxHelpers_ShowOkayDialog::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxCoreDialogBoxHelpers.ShowYesNoDialog
// 0x0048 (0x0048 - 0x0000)
struct GbxCoreDialogBoxHelpers_ShowYesNoDialog final
{
public:
	class AGbxPlayerController*                   Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HeaderText;                                        // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0020(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bAnyUserCanInteract;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxDialogBox*                          ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCoreDialogBoxHelpers_ShowYesNoDialog) == 0x000008, "Wrong alignment on GbxCoreDialogBoxHelpers_ShowYesNoDialog");
static_assert(sizeof(GbxCoreDialogBoxHelpers_ShowYesNoDialog) == 0x000048, "Wrong size on GbxCoreDialogBoxHelpers_ShowYesNoDialog");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowYesNoDialog, Pc) == 0x000000, "Member 'GbxCoreDialogBoxHelpers_ShowYesNoDialog::Pc' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowYesNoDialog, HeaderText) == 0x000008, "Member 'GbxCoreDialogBoxHelpers_ShowYesNoDialog::HeaderText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowYesNoDialog, MessageText) == 0x000020, "Member 'GbxCoreDialogBoxHelpers_ShowYesNoDialog::MessageText' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowYesNoDialog, bAnyUserCanInteract) == 0x000038, "Member 'GbxCoreDialogBoxHelpers_ShowYesNoDialog::bAnyUserCanInteract' has a wrong offset!");
static_assert(offsetof(GbxCoreDialogBoxHelpers_ShowYesNoDialog, ReturnValue) == 0x000040, "Member 'GbxCoreDialogBoxHelpers_ShowYesNoDialog::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItem.GetItemIndex
// 0x0004 (0x0004 - 0x0000)
struct GbxListItem_GetItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItem_GetItemIndex) == 0x000004, "Wrong alignment on GbxListItem_GetItemIndex");
static_assert(sizeof(GbxListItem_GetItemIndex) == 0x000004, "Wrong size on GbxListItem_GetItemIndex");
static_assert(offsetof(GbxListItem_GetItemIndex, ReturnValue) == 0x000000, "Member 'GbxListItem_GetItemIndex::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxDebugRumbleMenu.OnSliderValueChanged
// 0x0008 (0x0008 - 0x0000)
struct GbxDebugRumbleMenu_OnSliderValueChanged final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDebugRumbleMenu_OnSliderValueChanged) == 0x000008, "Wrong alignment on GbxDebugRumbleMenu_OnSliderValueChanged");
static_assert(sizeof(GbxDebugRumbleMenu_OnSliderValueChanged) == 0x000008, "Wrong size on GbxDebugRumbleMenu_OnSliderValueChanged");
static_assert(offsetof(GbxDebugRumbleMenu_OnSliderValueChanged, Item) == 0x000000, "Member 'GbxDebugRumbleMenu_OnSliderValueChanged::Item' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateDisabled
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_IsFocusableWidgetStateDisabled final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsFocusableWidgetStateDisabled) == 0x000001, "Wrong alignment on GbxGFxButton_IsFocusableWidgetStateDisabled");
static_assert(sizeof(GbxGFxButton_IsFocusableWidgetStateDisabled) == 0x000002, "Wrong size on GbxGFxButton_IsFocusableWidgetStateDisabled");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateDisabled, State) == 0x000000, "Member 'GbxGFxButton_IsFocusableWidgetStateDisabled::State' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateDisabled, ReturnValue) == 0x000001, "Member 'GbxGFxButton_IsFocusableWidgetStateDisabled::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateDown
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_IsFocusableWidgetStateDown final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsFocusableWidgetStateDown) == 0x000001, "Wrong alignment on GbxGFxButton_IsFocusableWidgetStateDown");
static_assert(sizeof(GbxGFxButton_IsFocusableWidgetStateDown) == 0x000002, "Wrong size on GbxGFxButton_IsFocusableWidgetStateDown");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateDown, State) == 0x000000, "Member 'GbxGFxButton_IsFocusableWidgetStateDown::State' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateDown, ReturnValue) == 0x000001, "Member 'GbxGFxButton_IsFocusableWidgetStateDown::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateFocused
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_IsFocusableWidgetStateFocused final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsFocusableWidgetStateFocused) == 0x000001, "Wrong alignment on GbxGFxButton_IsFocusableWidgetStateFocused");
static_assert(sizeof(GbxGFxButton_IsFocusableWidgetStateFocused) == 0x000002, "Wrong size on GbxGFxButton_IsFocusableWidgetStateFocused");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateFocused, State) == 0x000000, "Member 'GbxGFxButton_IsFocusableWidgetStateFocused::State' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateFocused, ReturnValue) == 0x000001, "Member 'GbxGFxButton_IsFocusableWidgetStateFocused::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateHovered
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_IsFocusableWidgetStateHovered final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsFocusableWidgetStateHovered) == 0x000001, "Wrong alignment on GbxGFxButton_IsFocusableWidgetStateHovered");
static_assert(sizeof(GbxGFxButton_IsFocusableWidgetStateHovered) == 0x000002, "Wrong size on GbxGFxButton_IsFocusableWidgetStateHovered");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateHovered, State) == 0x000000, "Member 'GbxGFxButton_IsFocusableWidgetStateHovered::State' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateHovered, ReturnValue) == 0x000001, "Member 'GbxGFxButton_IsFocusableWidgetStateHovered::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsFocusableWidgetStateUp
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_IsFocusableWidgetStateUp final
{
public:
	EGbxFocusableWidgetState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsFocusableWidgetStateUp) == 0x000001, "Wrong alignment on GbxGFxButton_IsFocusableWidgetStateUp");
static_assert(sizeof(GbxGFxButton_IsFocusableWidgetStateUp) == 0x000002, "Wrong size on GbxGFxButton_IsFocusableWidgetStateUp");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateUp, State) == 0x000000, "Member 'GbxGFxButton_IsFocusableWidgetStateUp::State' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_IsFocusableWidgetStateUp, ReturnValue) == 0x000001, "Member 'GbxGFxButton_IsFocusableWidgetStateUp::ReturnValue' has a wrong offset!");

// DelegateFunction GbxUI.GbxGFxButton.GbxGFxButtonEvent__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxButton_GbxGFxButtonEvent__DelegateSignature final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_GbxGFxButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on GbxGFxButton_GbxGFxButtonEvent__DelegateSignature");
static_assert(sizeof(GbxGFxButton_GbxGFxButtonEvent__DelegateSignature) == 0x000038, "Wrong size on GbxGFxButton_GbxGFxButtonEvent__DelegateSignature");
static_assert(offsetof(GbxGFxButton_GbxGFxButtonEvent__DelegateSignature, BUTTON) == 0x000000, "Member 'GbxGFxButton_GbxGFxButtonEvent__DelegateSignature::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_GbxGFxButtonEvent__DelegateSignature, InputInfo) == 0x000008, "Member 'GbxGFxButton_GbxGFxButtonEvent__DelegateSignature::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxButton.K2_HandleFocusableWidgetStateChanged
// 0x0003 (0x0003 - 0x0000)
struct GbxGFxButton_K2_HandleFocusableWidgetStateChanged final
{
public:
	EGbxFocusableWidgetState                      NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBecameFocused;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLostFocus;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_K2_HandleFocusableWidgetStateChanged) == 0x000001, "Wrong alignment on GbxGFxButton_K2_HandleFocusableWidgetStateChanged");
static_assert(sizeof(GbxGFxButton_K2_HandleFocusableWidgetStateChanged) == 0x000003, "Wrong size on GbxGFxButton_K2_HandleFocusableWidgetStateChanged");
static_assert(offsetof(GbxGFxButton_K2_HandleFocusableWidgetStateChanged, NewState) == 0x000000, "Member 'GbxGFxButton_K2_HandleFocusableWidgetStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_K2_HandleFocusableWidgetStateChanged, bBecameFocused) == 0x000001, "Member 'GbxGFxButton_K2_HandleFocusableWidgetStateChanged::bBecameFocused' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_K2_HandleFocusableWidgetStateChanged, bLostFocus) == 0x000002, "Member 'GbxGFxButton_K2_HandleFocusableWidgetStateChanged::bLostFocus' has a wrong offset!");

// Function GbxUI.GbxGFxButton.RefreshView
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_RefreshView final
{
public:
	EGbxFocusableWidgetState                      PrevState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_RefreshView) == 0x000001, "Wrong alignment on GbxGFxButton_RefreshView");
static_assert(sizeof(GbxGFxButton_RefreshView) == 0x000001, "Wrong size on GbxGFxButton_RefreshView");
static_assert(offsetof(GbxGFxButton_RefreshView, PrevState) == 0x000000, "Member 'GbxGFxButton_RefreshView::PrevState' has a wrong offset!");

// Function GbxUI.GbxGFxButton.SetButtonType
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_SetButtonType final
{
public:
	EGbxGFxButtonType                             InButtonType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_SetButtonType) == 0x000001, "Wrong alignment on GbxGFxButton_SetButtonType");
static_assert(sizeof(GbxGFxButton_SetButtonType) == 0x000001, "Wrong size on GbxGFxButton_SetButtonType");
static_assert(offsetof(GbxGFxButton_SetButtonType, InButtonType) == 0x000000, "Member 'GbxGFxButton_SetButtonType::InButtonType' has a wrong offset!");

// Function GbxUI.GbxGFxButton.SetCheckedState
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_SetCheckedState final
{
public:
	EGbxGFxButtonCheckedState                     InCheckedState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefresh;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_SetCheckedState) == 0x000001, "Wrong alignment on GbxGFxButton_SetCheckedState");
static_assert(sizeof(GbxGFxButton_SetCheckedState) == 0x000002, "Wrong size on GbxGFxButton_SetCheckedState");
static_assert(offsetof(GbxGFxButton_SetCheckedState, InCheckedState) == 0x000000, "Member 'GbxGFxButton_SetCheckedState::InCheckedState' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_SetCheckedState, bShouldRefresh) == 0x000001, "Member 'GbxGFxButton_SetCheckedState::bShouldRefresh' has a wrong offset!");

// Function GbxUI.GbxGFxButton.SetLabelText
// 0x0020 (0x0020 - 0x0000)
struct GbxGFxButton_SetLabelText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxButton_SetLabelText) == 0x000008, "Wrong alignment on GbxGFxButton_SetLabelText");
static_assert(sizeof(GbxGFxButton_SetLabelText) == 0x000020, "Wrong size on GbxGFxButton_SetLabelText");
static_assert(offsetof(GbxGFxButton_SetLabelText, Text) == 0x000000, "Member 'GbxGFxButton_SetLabelText::Text' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_SetLabelText, bForceUpdate) == 0x000018, "Member 'GbxGFxButton_SetLabelText::bForceUpdate' has a wrong offset!");

// Function GbxUI.GbxGFxButton.SetLockedState
// 0x0002 (0x0002 - 0x0000)
struct GbxGFxButton_SetLockedState final
{
public:
	EGbxGFxButtonLockedState                      InLockedState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefresh;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_SetLockedState) == 0x000001, "Wrong alignment on GbxGFxButton_SetLockedState");
static_assert(sizeof(GbxGFxButton_SetLockedState) == 0x000002, "Wrong size on GbxGFxButton_SetLockedState");
static_assert(offsetof(GbxGFxButton_SetLockedState, InLockedState) == 0x000000, "Member 'GbxGFxButton_SetLockedState::InLockedState' has a wrong offset!");
static_assert(offsetof(GbxGFxButton_SetLockedState, bShouldRefresh) == 0x000001, "Member 'GbxGFxButton_SetLockedState::bShouldRefresh' has a wrong offset!");

// Function GbxUI.GbxGFxButton.GetButtonType
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_GetButtonType final
{
public:
	EGbxGFxButtonType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_GetButtonType) == 0x000001, "Wrong alignment on GbxGFxButton_GetButtonType");
static_assert(sizeof(GbxGFxButton_GetButtonType) == 0x000001, "Wrong size on GbxGFxButton_GetButtonType");
static_assert(offsetof(GbxGFxButton_GetButtonType, ReturnValue) == 0x000000, "Member 'GbxGFxButton_GetButtonType::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.GetCheckedState
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_GetCheckedState final
{
public:
	EGbxGFxButtonCheckedState                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_GetCheckedState) == 0x000001, "Wrong alignment on GbxGFxButton_GetCheckedState");
static_assert(sizeof(GbxGFxButton_GetCheckedState) == 0x000001, "Wrong size on GbxGFxButton_GetCheckedState");
static_assert(offsetof(GbxGFxButton_GetCheckedState, ReturnValue) == 0x000000, "Member 'GbxGFxButton_GetCheckedState::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.GetLockedState
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_GetLockedState final
{
public:
	EGbxGFxButtonLockedState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_GetLockedState) == 0x000001, "Wrong alignment on GbxGFxButton_GetLockedState");
static_assert(sizeof(GbxGFxButton_GetLockedState) == 0x000001, "Wrong size on GbxGFxButton_GetLockedState");
static_assert(offsetof(GbxGFxButton_GetLockedState, ReturnValue) == 0x000000, "Member 'GbxGFxButton_GetLockedState::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsChecked
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_IsChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsChecked) == 0x000001, "Wrong alignment on GbxGFxButton_IsChecked");
static_assert(sizeof(GbxGFxButton_IsChecked) == 0x000001, "Wrong size on GbxGFxButton_IsChecked");
static_assert(offsetof(GbxGFxButton_IsChecked, ReturnValue) == 0x000000, "Member 'GbxGFxButton_IsChecked::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsLocked) == 0x000001, "Wrong alignment on GbxGFxButton_IsLocked");
static_assert(sizeof(GbxGFxButton_IsLocked) == 0x000001, "Wrong size on GbxGFxButton_IsLocked");
static_assert(offsetof(GbxGFxButton_IsLocked, ReturnValue) == 0x000000, "Member 'GbxGFxButton_IsLocked::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxButton.IsRegisteredAsFocusableWidget
// 0x0001 (0x0001 - 0x0000)
struct GbxGFxButton_IsRegisteredAsFocusableWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxButton_IsRegisteredAsFocusableWidget) == 0x000001, "Wrong alignment on GbxGFxButton_IsRegisteredAsFocusableWidget");
static_assert(sizeof(GbxGFxButton_IsRegisteredAsFocusableWidget) == 0x000001, "Wrong size on GbxGFxButton_IsRegisteredAsFocusableWidget");
static_assert(offsetof(GbxGFxButton_IsRegisteredAsFocusableWidget, ReturnValue) == 0x000000, "Member 'GbxGFxButton_IsRegisteredAsFocusableWidget::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxFocusableWidget.SetFocusableWidgetEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxFocusableWidget_SetFocusableWidgetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxFocusableWidget_SetFocusableWidgetEnabled) == 0x000001, "Wrong alignment on GbxFocusableWidget_SetFocusableWidgetEnabled");
static_assert(sizeof(GbxFocusableWidget_SetFocusableWidgetEnabled) == 0x000001, "Wrong size on GbxFocusableWidget_SetFocusableWidgetEnabled");
static_assert(offsetof(GbxFocusableWidget_SetFocusableWidgetEnabled, bEnabled) == 0x000000, "Member 'GbxFocusableWidget_SetFocusableWidgetEnabled::bEnabled' has a wrong offset!");

// Function GbxUI.GbxFocusableWidget.GetFocusableWidgetState
// 0x0001 (0x0001 - 0x0000)
struct GbxFocusableWidget_GetFocusableWidgetState final
{
public:
	EGbxFocusableWidgetState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxFocusableWidget_GetFocusableWidgetState) == 0x000001, "Wrong alignment on GbxFocusableWidget_GetFocusableWidgetState");
static_assert(sizeof(GbxFocusableWidget_GetFocusableWidgetState) == 0x000001, "Wrong size on GbxFocusableWidget_GetFocusableWidgetState");
static_assert(offsetof(GbxFocusableWidget_GetFocusableWidgetState, ReturnValue) == 0x000000, "Member 'GbxFocusableWidget_GetFocusableWidgetState::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxFocusableWidget.IsFocusableWidgetEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxFocusableWidget_IsFocusableWidgetEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxFocusableWidget_IsFocusableWidgetEnabled) == 0x000001, "Wrong alignment on GbxFocusableWidget_IsFocusableWidgetEnabled");
static_assert(sizeof(GbxFocusableWidget_IsFocusableWidgetEnabled) == 0x000001, "Wrong size on GbxFocusableWidget_IsFocusableWidgetEnabled");
static_assert(offsetof(GbxFocusableWidget_IsFocusableWidgetEnabled, ReturnValue) == 0x000000, "Member 'GbxFocusableWidget_IsFocusableWidgetEnabled::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxFocusableWidget.IsFocusableWidgetFocused
// 0x0001 (0x0001 - 0x0000)
struct GbxFocusableWidget_IsFocusableWidgetFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxFocusableWidget_IsFocusableWidgetFocused) == 0x000001, "Wrong alignment on GbxFocusableWidget_IsFocusableWidgetFocused");
static_assert(sizeof(GbxFocusableWidget_IsFocusableWidgetFocused) == 0x000001, "Wrong size on GbxFocusableWidget_IsFocusableWidgetFocused");
static_assert(offsetof(GbxFocusableWidget_IsFocusableWidgetFocused, ReturnValue) == 0x000000, "Member 'GbxFocusableWidget_IsFocusableWidgetFocused::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxDropDownList.OnDropDownButtonClicked
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxDropDownList_OnDropDownButtonClicked final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxDropDownList_OnDropDownButtonClicked) == 0x000008, "Wrong alignment on GbxGFxDropDownList_OnDropDownButtonClicked");
static_assert(sizeof(GbxGFxDropDownList_OnDropDownButtonClicked) == 0x000038, "Wrong size on GbxGFxDropDownList_OnDropDownButtonClicked");
static_assert(offsetof(GbxGFxDropDownList_OnDropDownButtonClicked, BUTTON) == 0x000000, "Member 'GbxGFxDropDownList_OnDropDownButtonClicked::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxDropDownList_OnDropDownButtonClicked, InputInfo) == 0x000008, "Member 'GbxGFxDropDownList_OnDropDownButtonClicked::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxDropDownList.OnEntryClicked
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxDropDownList_OnEntryClicked final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxDropDownList_OnEntryClicked) == 0x000008, "Wrong alignment on GbxGFxDropDownList_OnEntryClicked");
static_assert(sizeof(GbxGFxDropDownList_OnEntryClicked) == 0x000038, "Wrong size on GbxGFxDropDownList_OnEntryClicked");
static_assert(offsetof(GbxGFxDropDownList_OnEntryClicked, BUTTON) == 0x000000, "Member 'GbxGFxDropDownList_OnEntryClicked::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxDropDownList_OnEntryClicked, InputInfo) == 0x000008, "Member 'GbxGFxDropDownList_OnEntryClicked::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.EnteredPercentRange
// 0x0014 (0x0014 - 0x0000)
struct GbxGFxProgressBar_EnteredPercentRange final
{
public:
	float                                         RangeMin;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreasing;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecreasing;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxProgressBar_EnteredPercentRange) == 0x000004, "Wrong alignment on GbxGFxProgressBar_EnteredPercentRange");
static_assert(sizeof(GbxGFxProgressBar_EnteredPercentRange) == 0x000014, "Wrong size on GbxGFxProgressBar_EnteredPercentRange");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, RangeMin) == 0x000000, "Member 'GbxGFxProgressBar_EnteredPercentRange::RangeMin' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, RangeMax) == 0x000004, "Member 'GbxGFxProgressBar_EnteredPercentRange::RangeMax' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, OldValue) == 0x000008, "Member 'GbxGFxProgressBar_EnteredPercentRange::OldValue' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, CurrentValue) == 0x00000C, "Member 'GbxGFxProgressBar_EnteredPercentRange::CurrentValue' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, bIncreasing) == 0x000010, "Member 'GbxGFxProgressBar_EnteredPercentRange::bIncreasing' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, bDecreasing) == 0x000011, "Member 'GbxGFxProgressBar_EnteredPercentRange::bDecreasing' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_EnteredPercentRange, ReturnValue) == 0x000012, "Member 'GbxGFxProgressBar_EnteredPercentRange::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.PassedPercentThreshold
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxProgressBar_PassedPercentThreshold final
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreasing;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecreasing;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxGFxProgressBar_PassedPercentThreshold) == 0x000004, "Wrong alignment on GbxGFxProgressBar_PassedPercentThreshold");
static_assert(sizeof(GbxGFxProgressBar_PassedPercentThreshold) == 0x000010, "Wrong size on GbxGFxProgressBar_PassedPercentThreshold");
static_assert(offsetof(GbxGFxProgressBar_PassedPercentThreshold, Threshold) == 0x000000, "Member 'GbxGFxProgressBar_PassedPercentThreshold::Threshold' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_PassedPercentThreshold, OldValue) == 0x000004, "Member 'GbxGFxProgressBar_PassedPercentThreshold::OldValue' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_PassedPercentThreshold, CurrentValue) == 0x000008, "Member 'GbxGFxProgressBar_PassedPercentThreshold::CurrentValue' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_PassedPercentThreshold, bIncreasing) == 0x00000C, "Member 'GbxGFxProgressBar_PassedPercentThreshold::bIncreasing' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_PassedPercentThreshold, bDecreasing) == 0x00000D, "Member 'GbxGFxProgressBar_PassedPercentThreshold::bDecreasing' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_PassedPercentThreshold, ReturnValue) == 0x00000E, "Member 'GbxGFxProgressBar_PassedPercentThreshold::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.HandleEnterPercentRange
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxProgressBar_HandleEnterPercentRange final
{
public:
	class FName                                   RangeName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_HandleEnterPercentRange) == 0x000004, "Wrong alignment on GbxGFxProgressBar_HandleEnterPercentRange");
static_assert(sizeof(GbxGFxProgressBar_HandleEnterPercentRange) == 0x000008, "Wrong size on GbxGFxProgressBar_HandleEnterPercentRange");
static_assert(offsetof(GbxGFxProgressBar_HandleEnterPercentRange, RangeName) == 0x000000, "Member 'GbxGFxProgressBar_HandleEnterPercentRange::RangeName' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.HandlePercentChanged
// 0x0034 (0x0034 - 0x0000)
struct GbxGFxProgressBar_HandlePercentChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInterpolating;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxProgressBarInterpolator            ActiveInterpolator;                                // 0x000C(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_HandlePercentChanged) == 0x000004, "Wrong alignment on GbxGFxProgressBar_HandlePercentChanged");
static_assert(sizeof(GbxGFxProgressBar_HandlePercentChanged) == 0x000034, "Wrong size on GbxGFxProgressBar_HandlePercentChanged");
static_assert(offsetof(GbxGFxProgressBar_HandlePercentChanged, OldValue) == 0x000000, "Member 'GbxGFxProgressBar_HandlePercentChanged::OldValue' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_HandlePercentChanged, CurrentValue) == 0x000004, "Member 'GbxGFxProgressBar_HandlePercentChanged::CurrentValue' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_HandlePercentChanged, bIsInterpolating) == 0x000008, "Member 'GbxGFxProgressBar_HandlePercentChanged::bIsInterpolating' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_HandlePercentChanged, ActiveInterpolator) == 0x00000C, "Member 'GbxGFxProgressBar_HandlePercentChanged::ActiveInterpolator' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.InterpolateToPercent
// 0x0004 (0x0004 - 0x0000)
struct GbxGFxProgressBar_InterpolateToPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_InterpolateToPercent) == 0x000004, "Wrong alignment on GbxGFxProgressBar_InterpolateToPercent");
static_assert(sizeof(GbxGFxProgressBar_InterpolateToPercent) == 0x000004, "Wrong size on GbxGFxProgressBar_InterpolateToPercent");
static_assert(offsetof(GbxGFxProgressBar_InterpolateToPercent, InPercent) == 0x000000, "Member 'GbxGFxProgressBar_InterpolateToPercent::InPercent' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.InterpolateToPercentWithInterpolator
// 0x002C (0x002C - 0x0000)
struct GbxGFxProgressBar_InterpolateToPercentWithInterpolator final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxProgressBarInterpolator            Interpolator_0;                                    // 0x0004(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_InterpolateToPercentWithInterpolator) == 0x000004, "Wrong alignment on GbxGFxProgressBar_InterpolateToPercentWithInterpolator");
static_assert(sizeof(GbxGFxProgressBar_InterpolateToPercentWithInterpolator) == 0x00002C, "Wrong size on GbxGFxProgressBar_InterpolateToPercentWithInterpolator");
static_assert(offsetof(GbxGFxProgressBar_InterpolateToPercentWithInterpolator, InPercent) == 0x000000, "Member 'GbxGFxProgressBar_InterpolateToPercentWithInterpolator::InPercent' has a wrong offset!");
static_assert(offsetof(GbxGFxProgressBar_InterpolateToPercentWithInterpolator, Interpolator_0) == 0x000004, "Member 'GbxGFxProgressBar_InterpolateToPercentWithInterpolator::Interpolator_0' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.SetCurrentValueText
// 0x0018 (0x0018 - 0x0000)
struct GbxGFxProgressBar_SetCurrentValueText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_SetCurrentValueText) == 0x000008, "Wrong alignment on GbxGFxProgressBar_SetCurrentValueText");
static_assert(sizeof(GbxGFxProgressBar_SetCurrentValueText) == 0x000018, "Wrong size on GbxGFxProgressBar_SetCurrentValueText");
static_assert(offsetof(GbxGFxProgressBar_SetCurrentValueText, Text) == 0x000000, "Member 'GbxGFxProgressBar_SetCurrentValueText::Text' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxProgressBar_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on GbxGFxProgressBar_SetFillColorAndOpacity");
static_assert(sizeof(GbxGFxProgressBar_SetFillColorAndOpacity) == 0x000010, "Wrong size on GbxGFxProgressBar_SetFillColorAndOpacity");
static_assert(offsetof(GbxGFxProgressBar_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'GbxGFxProgressBar_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.SetMaxValueText
// 0x0018 (0x0018 - 0x0000)
struct GbxGFxProgressBar_SetMaxValueText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_SetMaxValueText) == 0x000008, "Wrong alignment on GbxGFxProgressBar_SetMaxValueText");
static_assert(sizeof(GbxGFxProgressBar_SetMaxValueText) == 0x000018, "Wrong size on GbxGFxProgressBar_SetMaxValueText");
static_assert(offsetof(GbxGFxProgressBar_SetMaxValueText, Text) == 0x000000, "Member 'GbxGFxProgressBar_SetMaxValueText::Text' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct GbxGFxProgressBar_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_SetPercent) == 0x000004, "Wrong alignment on GbxGFxProgressBar_SetPercent");
static_assert(sizeof(GbxGFxProgressBar_SetPercent) == 0x000004, "Wrong size on GbxGFxProgressBar_SetPercent");
static_assert(offsetof(GbxGFxProgressBar_SetPercent, InPercent) == 0x000000, "Member 'GbxGFxProgressBar_SetPercent::InPercent' has a wrong offset!");

// Function GbxUI.GbxGFxProgressBar.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct GbxGFxProgressBar_GetPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxProgressBar_GetPercent) == 0x000004, "Wrong alignment on GbxGFxProgressBar_GetPercent");
static_assert(sizeof(GbxGFxProgressBar_GetPercent) == 0x000004, "Wrong size on GbxGFxProgressBar_GetPercent");
static_assert(offsetof(GbxGFxProgressBar_GetPercent, ReturnValue) == 0x000000, "Member 'GbxGFxProgressBar_GetPercent::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxGFxListItemNumber.OnSliderUpdated
// 0x0004 (0x0004 - 0x0000)
struct GbxGFxListItemNumber_OnSliderUpdated final
{
public:
	float                                         SliderPct;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxListItemNumber_OnSliderUpdated) == 0x000004, "Wrong alignment on GbxGFxListItemNumber_OnSliderUpdated");
static_assert(sizeof(GbxGFxListItemNumber_OnSliderUpdated) == 0x000004, "Wrong size on GbxGFxListItemNumber_OnSliderUpdated");
static_assert(offsetof(GbxGFxListItemNumber_OnSliderUpdated, SliderPct) == 0x000000, "Member 'GbxGFxListItemNumber_OnSliderUpdated::SliderPct' has a wrong offset!");

// Function GbxUI.GbxMenuSwitcher.SwitchToPage
// 0x0008 (0x0008 - 0x0000)
struct GbxMenuSwitcher_SwitchToPage final
{
public:
	class FName                                   SubMenuId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuSwitcher_SwitchToPage) == 0x000004, "Wrong alignment on GbxMenuSwitcher_SwitchToPage");
static_assert(sizeof(GbxMenuSwitcher_SwitchToPage) == 0x000008, "Wrong size on GbxMenuSwitcher_SwitchToPage");
static_assert(offsetof(GbxMenuSwitcher_SwitchToPage, SubMenuId) == 0x000000, "Member 'GbxMenuSwitcher_SwitchToPage::SubMenuId' has a wrong offset!");

// Function GbxUI.GbxMenuSwitcher.GetCurrentSubmenuId
// 0x0008 (0x0008 - 0x0000)
struct GbxMenuSwitcher_GetCurrentSubmenuId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuSwitcher_GetCurrentSubmenuId) == 0x000004, "Wrong alignment on GbxMenuSwitcher_GetCurrentSubmenuId");
static_assert(sizeof(GbxMenuSwitcher_GetCurrentSubmenuId) == 0x000008, "Wrong size on GbxMenuSwitcher_GetCurrentSubmenuId");
static_assert(offsetof(GbxMenuSwitcher_GetCurrentSubmenuId, ReturnValue) == 0x000000, "Member 'GbxMenuSwitcher_GetCurrentSubmenuId::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxDebugMenu.OnCategorySelected
// 0x0038 (0x0038 - 0x0000)
struct GbxDebugMenu_OnCategorySelected final
{
public:
	class UGbxUserWidget*                         Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDebugMenu_OnCategorySelected) == 0x000008, "Wrong alignment on GbxDebugMenu_OnCategorySelected");
static_assert(sizeof(GbxDebugMenu_OnCategorySelected) == 0x000038, "Wrong size on GbxDebugMenu_OnCategorySelected");
static_assert(offsetof(GbxDebugMenu_OnCategorySelected, Widget) == 0x000000, "Member 'GbxDebugMenu_OnCategorySelected::Widget' has a wrong offset!");
static_assert(offsetof(GbxDebugMenu_OnCategorySelected, InputInfo) == 0x000008, "Member 'GbxDebugMenu_OnCategorySelected::InputInfo' has a wrong offset!");

// Function GbxUI.GbxHUD.ClearHUDStates
// 0x0008 (0x0008 - 0x0000)
struct GbxHUD_ClearHUDStates final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_ClearHUDStates) == 0x000008, "Wrong alignment on GbxHUD_ClearHUDStates");
static_assert(sizeof(GbxHUD_ClearHUDStates) == 0x000008, "Wrong size on GbxHUD_ClearHUDStates");
static_assert(offsetof(GbxHUD_ClearHUDStates, PlayerController) == 0x000000, "Member 'GbxHUD_ClearHUDStates::PlayerController' has a wrong offset!");

// Function GbxUI.GbxHUD.ClearToDefaultHUDState
// 0x0008 (0x0008 - 0x0000)
struct GbxHUD_ClearToDefaultHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_ClearToDefaultHUDState) == 0x000008, "Wrong alignment on GbxHUD_ClearToDefaultHUDState");
static_assert(sizeof(GbxHUD_ClearToDefaultHUDState) == 0x000008, "Wrong size on GbxHUD_ClearToDefaultHUDState");
static_assert(offsetof(GbxHUD_ClearToDefaultHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_ClearToDefaultHUDState::PlayerController' has a wrong offset!");

// Function GbxUI.GbxHUD.GetCurrentHUDState
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_GetCurrentHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_GetCurrentHUDState) == 0x000008, "Wrong alignment on GbxHUD_GetCurrentHUDState");
static_assert(sizeof(GbxHUD_GetCurrentHUDState) == 0x000010, "Wrong size on GbxHUD_GetCurrentHUDState");
static_assert(offsetof(GbxHUD_GetCurrentHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_GetCurrentHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_GetCurrentHUDState, ReturnValue) == 0x000008, "Member 'GbxHUD_GetCurrentHUDState::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxHUD.GotoHUDState
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_GotoHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_GotoHUDState) == 0x000008, "Wrong alignment on GbxHUD_GotoHUDState");
static_assert(sizeof(GbxHUD_GotoHUDState) == 0x000010, "Wrong size on GbxHUD_GotoHUDState");
static_assert(offsetof(GbxHUD_GotoHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_GotoHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_GotoHUDState, State) == 0x000008, "Member 'GbxHUD_GotoHUDState::State' has a wrong offset!");

// Function GbxUI.GbxHUD.GotoPreviousHUDState
// 0x0008 (0x0008 - 0x0000)
struct GbxHUD_GotoPreviousHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_GotoPreviousHUDState) == 0x000008, "Wrong alignment on GbxHUD_GotoPreviousHUDState");
static_assert(sizeof(GbxHUD_GotoPreviousHUDState) == 0x000008, "Wrong size on GbxHUD_GotoPreviousHUDState");
static_assert(offsetof(GbxHUD_GotoPreviousHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_GotoPreviousHUDState::PlayerController' has a wrong offset!");

// Function GbxUI.GbxHUD.PopHUDState
// 0x0008 (0x0008 - 0x0000)
struct GbxHUD_PopHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_PopHUDState) == 0x000008, "Wrong alignment on GbxHUD_PopHUDState");
static_assert(sizeof(GbxHUD_PopHUDState) == 0x000008, "Wrong size on GbxHUD_PopHUDState");
static_assert(offsetof(GbxHUD_PopHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_PopHUDState::PlayerController' has a wrong offset!");

// Function GbxUI.GbxHUD.PopSpecifiedHUDState
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_PopSpecifiedHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_PopSpecifiedHUDState) == 0x000008, "Wrong alignment on GbxHUD_PopSpecifiedHUDState");
static_assert(sizeof(GbxHUD_PopSpecifiedHUDState) == 0x000010, "Wrong size on GbxHUD_PopSpecifiedHUDState");
static_assert(offsetof(GbxHUD_PopSpecifiedHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_PopSpecifiedHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_PopSpecifiedHUDState, State) == 0x000008, "Member 'GbxHUD_PopSpecifiedHUDState::State' has a wrong offset!");

// Function GbxUI.GbxHUD.PopToHUDState
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_PopToHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_PopToHUDState) == 0x000008, "Wrong alignment on GbxHUD_PopToHUDState");
static_assert(sizeof(GbxHUD_PopToHUDState) == 0x000010, "Wrong size on GbxHUD_PopToHUDState");
static_assert(offsetof(GbxHUD_PopToHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_PopToHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_PopToHUDState, State) == 0x000008, "Member 'GbxHUD_PopToHUDState::State' has a wrong offset!");

// Function GbxUI.GbxHUD.PopToSwitchToHUDState
// 0x0018 (0x0018 - 0x0000)
struct GbxHUD_PopToSwitchToHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       PopToState;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       SwitchToState;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_PopToSwitchToHUDState) == 0x000008, "Wrong alignment on GbxHUD_PopToSwitchToHUDState");
static_assert(sizeof(GbxHUD_PopToSwitchToHUDState) == 0x000018, "Wrong size on GbxHUD_PopToSwitchToHUDState");
static_assert(offsetof(GbxHUD_PopToSwitchToHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_PopToSwitchToHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_PopToSwitchToHUDState, PopToState) == 0x000008, "Member 'GbxHUD_PopToSwitchToHUDState::PopToState' has a wrong offset!");
static_assert(offsetof(GbxHUD_PopToSwitchToHUDState, SwitchToState) == 0x000010, "Member 'GbxHUD_PopToSwitchToHUDState::SwitchToState' has a wrong offset!");

// Function GbxUI.GbxHUD.PushHUDState
// 0x0018 (0x0018 - 0x0000)
struct GbxHUD_PushHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDuplicatePush;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxHUD_PushHUDState) == 0x000008, "Wrong alignment on GbxHUD_PushHUDState");
static_assert(sizeof(GbxHUD_PushHUDState) == 0x000018, "Wrong size on GbxHUD_PushHUDState");
static_assert(offsetof(GbxHUD_PushHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_PushHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_PushHUDState, State) == 0x000008, "Member 'GbxHUD_PushHUDState::State' has a wrong offset!");
static_assert(offsetof(GbxHUD_PushHUDState, bAllowDuplicatePush) == 0x000010, "Member 'GbxHUD_PushHUDState::bAllowDuplicatePush' has a wrong offset!");

// Function GbxUI.GbxHUD.SetHUDContainer
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_SetHUDContainer final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGbxHUDData*                      ContainerDefinition;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_SetHUDContainer) == 0x000008, "Wrong alignment on GbxHUD_SetHUDContainer");
static_assert(sizeof(GbxHUD_SetHUDContainer) == 0x000010, "Wrong size on GbxHUD_SetHUDContainer");
static_assert(offsetof(GbxHUD_SetHUDContainer, PlayerController) == 0x000000, "Member 'GbxHUD_SetHUDContainer::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_SetHUDContainer, ContainerDefinition) == 0x000008, "Member 'GbxHUD_SetHUDContainer::ContainerDefinition' has a wrong offset!");

// Function GbxUI.GbxHUD.SwitchToHUDState
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_SwitchToHUDState final
{
public:
	class AGbxPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxHUDStateData*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_SwitchToHUDState) == 0x000008, "Wrong alignment on GbxHUD_SwitchToHUDState");
static_assert(sizeof(GbxHUD_SwitchToHUDState) == 0x000010, "Wrong size on GbxHUD_SwitchToHUDState");
static_assert(offsetof(GbxHUD_SwitchToHUDState, PlayerController) == 0x000000, "Member 'GbxHUD_SwitchToHUDState::PlayerController' has a wrong offset!");
static_assert(offsetof(GbxHUD_SwitchToHUDState, State) == 0x000008, "Member 'GbxHUD_SwitchToHUDState::State' has a wrong offset!");

// Function GbxUI.GbxHUD.OnPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct GbxHUD_OnPawnChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  OldPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_OnPawnChanged) == 0x000008, "Wrong alignment on GbxHUD_OnPawnChanged");
static_assert(sizeof(GbxHUD_OnPawnChanged) == 0x000010, "Wrong size on GbxHUD_OnPawnChanged");
static_assert(offsetof(GbxHUD_OnPawnChanged, Pawn) == 0x000000, "Member 'GbxHUD_OnPawnChanged::Pawn' has a wrong offset!");
static_assert(offsetof(GbxHUD_OnPawnChanged, OldPawn) == 0x000008, "Member 'GbxHUD_OnPawnChanged::OldPawn' has a wrong offset!");

// Function GbxUI.GbxHUD.OnPrimaryCharacterChanged
// 0x0008 (0x0008 - 0x0000)
struct GbxHUD_OnPrimaryCharacterChanged final
{
public:
	class AGbxCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHUD_OnPrimaryCharacterChanged) == 0x000008, "Wrong alignment on GbxHUD_OnPrimaryCharacterChanged");
static_assert(sizeof(GbxHUD_OnPrimaryCharacterChanged) == 0x000008, "Wrong size on GbxHUD_OnPrimaryCharacterChanged");
static_assert(offsetof(GbxHUD_OnPrimaryCharacterChanged, Character) == 0x000000, "Member 'GbxHUD_OnPrimaryCharacterChanged::Character' has a wrong offset!");

// Function GbxUI.GbxUILibrary.AbbreviateNumberText
// 0x0018 (0x0018 - 0x0000)
struct GbxUILibrary_AbbreviateNumberText final
{
public:
	float                                         ValueToFormat;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_AbbreviateNumberText) == 0x000008, "Wrong alignment on GbxUILibrary_AbbreviateNumberText");
static_assert(sizeof(GbxUILibrary_AbbreviateNumberText) == 0x000018, "Wrong size on GbxUILibrary_AbbreviateNumberText");
static_assert(offsetof(GbxUILibrary_AbbreviateNumberText, ValueToFormat) == 0x000000, "Member 'GbxUILibrary_AbbreviateNumberText::ValueToFormat' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_AbbreviateNumberText, ReturnValue) == 0x000008, "Member 'GbxUILibrary_AbbreviateNumberText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateBooleanListItem
// 0x0040 (0x0040 - 0x0000)
struct GbxUILibrary_CreateBooleanListItem final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          InitialValue;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxListItemBoolean*                    ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateBooleanListItem) == 0x000008, "Wrong alignment on GbxUILibrary_CreateBooleanListItem");
static_assert(sizeof(GbxUILibrary_CreateBooleanListItem) == 0x000040, "Wrong size on GbxUILibrary_CreateBooleanListItem");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItem, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateBooleanListItem::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItem, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateBooleanListItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItem, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateBooleanListItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItem, InitialValue) == 0x000030, "Member 'GbxUILibrary_CreateBooleanListItem::InitialValue' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItem, ReturnValue) == 0x000038, "Member 'GbxUILibrary_CreateBooleanListItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateBooleanListItemWithDelegates
// 0x0060 (0x0060 - 0x0000)
struct GbxUILibrary_CreateBooleanListItemWithDelegates final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          InitialValue;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGbxListItem* Item)>     ChangedDelegate;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0048(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemBoolean*                    ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateBooleanListItemWithDelegates) == 0x000008, "Wrong alignment on GbxUILibrary_CreateBooleanListItemWithDelegates");
static_assert(sizeof(GbxUILibrary_CreateBooleanListItemWithDelegates) == 0x000060, "Wrong size on GbxUILibrary_CreateBooleanListItemWithDelegates");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, InitialValue) == 0x000030, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::InitialValue' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, ChangedDelegate) == 0x000038, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::ChangedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, SelectedDelegate) == 0x000048, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateBooleanListItemWithDelegates, ReturnValue) == 0x000058, "Member 'GbxUILibrary_CreateBooleanListItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateComboBoxListItem
// 0x0050 (0x0050 - 0x0000)
struct GbxUILibrary_CreateComboBoxListItem final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class FText>                           Items;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InitialIndex;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxListItemComboBox*                   ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateComboBoxListItem) == 0x000008, "Wrong alignment on GbxUILibrary_CreateComboBoxListItem");
static_assert(sizeof(GbxUILibrary_CreateComboBoxListItem) == 0x000050, "Wrong size on GbxUILibrary_CreateComboBoxListItem");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItem, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateComboBoxListItem::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItem, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateComboBoxListItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItem, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateComboBoxListItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItem, Items) == 0x000030, "Member 'GbxUILibrary_CreateComboBoxListItem::Items' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItem, InitialIndex) == 0x000040, "Member 'GbxUILibrary_CreateComboBoxListItem::InitialIndex' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItem, ReturnValue) == 0x000048, "Member 'GbxUILibrary_CreateComboBoxListItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateComboBoxListItemWithDelegates
// 0x0070 (0x0070 - 0x0000)
struct GbxUILibrary_CreateComboBoxListItemWithDelegates final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class FText>                           Items;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InitialIndex;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGbxListItem* Item)>     ChangedDelegate;                                   // 0x0048(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0058(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemComboBox*                   ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateComboBoxListItemWithDelegates) == 0x000008, "Wrong alignment on GbxUILibrary_CreateComboBoxListItemWithDelegates");
static_assert(sizeof(GbxUILibrary_CreateComboBoxListItemWithDelegates) == 0x000070, "Wrong size on GbxUILibrary_CreateComboBoxListItemWithDelegates");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, Items) == 0x000030, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::Items' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, InitialIndex) == 0x000040, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::InitialIndex' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, ChangedDelegate) == 0x000048, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::ChangedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, SelectedDelegate) == 0x000058, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateComboBoxListItemWithDelegates, ReturnValue) == 0x000068, "Member 'GbxUILibrary_CreateComboBoxListItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateDefaultListItem
// 0x0020 (0x0020 - 0x0000)
struct GbxUILibrary_CreateDefaultListItem final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxListItem*                           ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateDefaultListItem) == 0x000008, "Wrong alignment on GbxUILibrary_CreateDefaultListItem");
static_assert(sizeof(GbxUILibrary_CreateDefaultListItem) == 0x000020, "Wrong size on GbxUILibrary_CreateDefaultListItem");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItem, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateDefaultListItem::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItem, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateDefaultListItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItem, ReturnValue) == 0x000018, "Member 'GbxUILibrary_CreateDefaultListItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateDefaultListItemWithDelegates
// 0x0040 (0x0040 - 0x0000)
struct GbxUILibrary_CreateDefaultListItemWithDelegates final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItem*                           ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateDefaultListItemWithDelegates) == 0x000008, "Wrong alignment on GbxUILibrary_CreateDefaultListItemWithDelegates");
static_assert(sizeof(GbxUILibrary_CreateDefaultListItemWithDelegates) == 0x000040, "Wrong size on GbxUILibrary_CreateDefaultListItemWithDelegates");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItemWithDelegates, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateDefaultListItemWithDelegates::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItemWithDelegates, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateDefaultListItemWithDelegates::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItemWithDelegates, ClickedDelegate) == 0x000018, "Member 'GbxUILibrary_CreateDefaultListItemWithDelegates::ClickedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItemWithDelegates, SelectedDelegate) == 0x000028, "Member 'GbxUILibrary_CreateDefaultListItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateDefaultListItemWithDelegates, ReturnValue) == 0x000038, "Member 'GbxUILibrary_CreateDefaultListItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateListItem
// 0x0028 (0x0028 - 0x0000)
struct GbxUILibrary_CreateListItem final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGbxListItem>               ItemClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxListItem*                           ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateListItem) == 0x000008, "Wrong alignment on GbxUILibrary_CreateListItem");
static_assert(sizeof(GbxUILibrary_CreateListItem) == 0x000028, "Wrong size on GbxUILibrary_CreateListItem");
static_assert(offsetof(GbxUILibrary_CreateListItem, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateListItem::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItem, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateListItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItem, ItemClass) == 0x000018, "Member 'GbxUILibrary_CreateListItem::ItemClass' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItem, ReturnValue) == 0x000020, "Member 'GbxUILibrary_CreateListItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateListItemWithDelegates
// 0x0048 (0x0048 - 0x0000)
struct GbxUILibrary_CreateListItemWithDelegates final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGbxListItem>               ItemClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItem*                           ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateListItemWithDelegates) == 0x000008, "Wrong alignment on GbxUILibrary_CreateListItemWithDelegates");
static_assert(sizeof(GbxUILibrary_CreateListItemWithDelegates) == 0x000048, "Wrong size on GbxUILibrary_CreateListItemWithDelegates");
static_assert(offsetof(GbxUILibrary_CreateListItemWithDelegates, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateListItemWithDelegates::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItemWithDelegates, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateListItemWithDelegates::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItemWithDelegates, ItemClass) == 0x000018, "Member 'GbxUILibrary_CreateListItemWithDelegates::ItemClass' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItemWithDelegates, ClickedDelegate) == 0x000020, "Member 'GbxUILibrary_CreateListItemWithDelegates::ClickedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItemWithDelegates, SelectedDelegate) == 0x000030, "Member 'GbxUILibrary_CreateListItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateListItemWithDelegates, ReturnValue) == 0x000040, "Member 'GbxUILibrary_CreateListItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateNumberListItem
// 0x0048 (0x0048 - 0x0000)
struct GbxUILibrary_CreateNumberListItem final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMin;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMax;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderStep;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxListItemNumber*                     ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateNumberListItem) == 0x000008, "Wrong alignment on GbxUILibrary_CreateNumberListItem");
static_assert(sizeof(GbxUILibrary_CreateNumberListItem) == 0x000048, "Wrong size on GbxUILibrary_CreateNumberListItem");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateNumberListItem::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateNumberListItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateNumberListItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, InitialValue) == 0x000030, "Member 'GbxUILibrary_CreateNumberListItem::InitialValue' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, SliderMin) == 0x000034, "Member 'GbxUILibrary_CreateNumberListItem::SliderMin' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, SliderMax) == 0x000038, "Member 'GbxUILibrary_CreateNumberListItem::SliderMax' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, SliderStep) == 0x00003C, "Member 'GbxUILibrary_CreateNumberListItem::SliderStep' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItem, ReturnValue) == 0x000040, "Member 'GbxUILibrary_CreateNumberListItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateNumberListItemWithDelegates
// 0x0068 (0x0068 - 0x0000)
struct GbxUILibrary_CreateNumberListItemWithDelegates final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMin;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMax;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderStep;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxListItem* Item)>     ChangedDelegate;                                   // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemNumber*                     ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateNumberListItemWithDelegates) == 0x000008, "Wrong alignment on GbxUILibrary_CreateNumberListItemWithDelegates");
static_assert(sizeof(GbxUILibrary_CreateNumberListItemWithDelegates) == 0x000068, "Wrong size on GbxUILibrary_CreateNumberListItemWithDelegates");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, InitialValue) == 0x000030, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::InitialValue' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, SliderMin) == 0x000034, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::SliderMin' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, SliderMax) == 0x000038, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::SliderMax' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, SliderStep) == 0x00003C, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::SliderStep' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, ChangedDelegate) == 0x000040, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::ChangedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, SelectedDelegate) == 0x000050, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateNumberListItemWithDelegates, ReturnValue) == 0x000060, "Member 'GbxUILibrary_CreateNumberListItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateTextListItem
// 0x0038 (0x0038 - 0x0000)
struct GbxUILibrary_CreateTextListItem final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UGbxListItemText*                       ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateTextListItem) == 0x000008, "Wrong alignment on GbxUILibrary_CreateTextListItem");
static_assert(sizeof(GbxUILibrary_CreateTextListItem) == 0x000038, "Wrong size on GbxUILibrary_CreateTextListItem");
static_assert(offsetof(GbxUILibrary_CreateTextListItem, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateTextListItem::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItem, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateTextListItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItem, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateTextListItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItem, ReturnValue) == 0x000030, "Member 'GbxUILibrary_CreateTextListItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.CreateTextListItemWithDelegates
// 0x0058 (0x0058 - 0x0000)
struct GbxUILibrary_CreateTextListItemWithDelegates final
{
public:
	TScriptInterface<class IGbxList>              OwningList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemText*                       ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_CreateTextListItemWithDelegates) == 0x000008, "Wrong alignment on GbxUILibrary_CreateTextListItemWithDelegates");
static_assert(sizeof(GbxUILibrary_CreateTextListItemWithDelegates) == 0x000058, "Wrong size on GbxUILibrary_CreateTextListItemWithDelegates");
static_assert(offsetof(GbxUILibrary_CreateTextListItemWithDelegates, OwningList) == 0x000000, "Member 'GbxUILibrary_CreateTextListItemWithDelegates::OwningList' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItemWithDelegates, OwningPlayer) == 0x000010, "Member 'GbxUILibrary_CreateTextListItemWithDelegates::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItemWithDelegates, LabelText) == 0x000018, "Member 'GbxUILibrary_CreateTextListItemWithDelegates::LabelText' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItemWithDelegates, ClickedDelegate) == 0x000030, "Member 'GbxUILibrary_CreateTextListItemWithDelegates::ClickedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItemWithDelegates, SelectedDelegate) == 0x000040, "Member 'GbxUILibrary_CreateTextListItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_CreateTextListItemWithDelegates, ReturnValue) == 0x000050, "Member 'GbxUILibrary_CreateTextListItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.PlayFullScreenMovie
// 0x0020 (0x0020 - 0x0000)
struct GbxUILibrary_PlayFullScreenMovie final
{
public:
	class AGbxPlayerController*                   GbxPC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           MediaSource;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnceAndDestroy;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxFullScreenMovie*                    ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_PlayFullScreenMovie) == 0x000008, "Wrong alignment on GbxUILibrary_PlayFullScreenMovie");
static_assert(sizeof(GbxUILibrary_PlayFullScreenMovie) == 0x000020, "Wrong size on GbxUILibrary_PlayFullScreenMovie");
static_assert(offsetof(GbxUILibrary_PlayFullScreenMovie, GbxPC) == 0x000000, "Member 'GbxUILibrary_PlayFullScreenMovie::GbxPC' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_PlayFullScreenMovie, MediaSource) == 0x000008, "Member 'GbxUILibrary_PlayFullScreenMovie::MediaSource' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_PlayFullScreenMovie, bPlayOnceAndDestroy) == 0x000010, "Member 'GbxUILibrary_PlayFullScreenMovie::bPlayOnceAndDestroy' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_PlayFullScreenMovie, ReturnValue) == 0x000018, "Member 'GbxUILibrary_PlayFullScreenMovie::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILibrary.SendTextToDebugHUD
// 0x0038 (0x0038 - 0x0000)
struct GbxUILibrary_SendTextToDebugHUD final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextSize;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILibrary_SendTextToDebugHUD) == 0x000008, "Wrong alignment on GbxUILibrary_SendTextToDebugHUD");
static_assert(sizeof(GbxUILibrary_SendTextToDebugHUD) == 0x000038, "Wrong size on GbxUILibrary_SendTextToDebugHUD");
static_assert(offsetof(GbxUILibrary_SendTextToDebugHUD, WorldContextObject) == 0x000000, "Member 'GbxUILibrary_SendTextToDebugHUD::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_SendTextToDebugHUD, Text) == 0x000008, "Member 'GbxUILibrary_SendTextToDebugHUD::Text' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_SendTextToDebugHUD, Color) == 0x000020, "Member 'GbxUILibrary_SendTextToDebugHUD::Color' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_SendTextToDebugHUD, TextSize) == 0x000030, "Member 'GbxUILibrary_SendTextToDebugHUD::TextSize' has a wrong offset!");
static_assert(offsetof(GbxUILibrary_SendTextToDebugHUD, Duration) == 0x000034, "Member 'GbxUILibrary_SendTextToDebugHUD::Duration' has a wrong offset!");

// Function GbxUI.GbxCascadingList.OnItemClicked_Internal
// 0x0008 (0x0008 - 0x0000)
struct GbxCascadingList_OnItemClicked_Internal final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCascadingList_OnItemClicked_Internal) == 0x000008, "Wrong alignment on GbxCascadingList_OnItemClicked_Internal");
static_assert(sizeof(GbxCascadingList_OnItemClicked_Internal) == 0x000008, "Wrong size on GbxCascadingList_OnItemClicked_Internal");
static_assert(offsetof(GbxCascadingList_OnItemClicked_Internal, Item) == 0x000000, "Member 'GbxCascadingList_OnItemClicked_Internal::Item' has a wrong offset!");

// Function GbxUI.GbxCascadingList.OnItemSelected_Internal
// 0x0008 (0x0008 - 0x0000)
struct GbxCascadingList_OnItemSelected_Internal final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCascadingList_OnItemSelected_Internal) == 0x000008, "Wrong alignment on GbxCascadingList_OnItemSelected_Internal");
static_assert(sizeof(GbxCascadingList_OnItemSelected_Internal) == 0x000008, "Wrong size on GbxCascadingList_OnItemSelected_Internal");
static_assert(offsetof(GbxCascadingList_OnItemSelected_Internal, Item) == 0x000000, "Member 'GbxCascadingList_OnItemSelected_Internal::Item' has a wrong offset!");

// Function GbxUI.GbxCascadingList.PushItems
// 0x0010 (0x0010 - 0x0000)
struct GbxCascadingList_PushItems final
{
public:
	TArray<struct FGbxCascadingListItemData>      Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCascadingList_PushItems) == 0x000008, "Wrong alignment on GbxCascadingList_PushItems");
static_assert(sizeof(GbxCascadingList_PushItems) == 0x000010, "Wrong size on GbxCascadingList_PushItems");
static_assert(offsetof(GbxCascadingList_PushItems, Items) == 0x000000, "Member 'GbxCascadingList_PushItems::Items' has a wrong offset!");

// Function GbxUI.GbxCascadingList.SetActiveList
// 0x0008 (0x0008 - 0x0000)
struct GbxCascadingList_SetActiveList final
{
public:
	class UGbxGridListWidget*                     List;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCascadingList_SetActiveList) == 0x000008, "Wrong alignment on GbxCascadingList_SetActiveList");
static_assert(sizeof(GbxCascadingList_SetActiveList) == 0x000008, "Wrong size on GbxCascadingList_SetActiveList");
static_assert(offsetof(GbxCascadingList_SetActiveList, List) == 0x000000, "Member 'GbxCascadingList_SetActiveList::List' has a wrong offset!");

// Function GbxUI.GbxCascadingList.GetStackDepth
// 0x0004 (0x0004 - 0x0000)
struct GbxCascadingList_GetStackDepth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCascadingList_GetStackDepth) == 0x000004, "Wrong alignment on GbxCascadingList_GetStackDepth");
static_assert(sizeof(GbxCascadingList_GetStackDepth) == 0x000004, "Wrong size on GbxCascadingList_GetStackDepth");
static_assert(offsetof(GbxCascadingList_GetStackDepth, ReturnValue) == 0x000000, "Member 'GbxCascadingList_GetStackDepth::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxCascadingList.HasItems
// 0x0001 (0x0001 - 0x0000)
struct GbxCascadingList_HasItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxCascadingList_HasItems) == 0x000001, "Wrong alignment on GbxCascadingList_HasItems");
static_assert(sizeof(GbxCascadingList_HasItems) == 0x000001, "Wrong size on GbxCascadingList_HasItems");
static_assert(offsetof(GbxCascadingList_HasItems, ReturnValue) == 0x000000, "Member 'GbxCascadingList_HasItems::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxComboBoxDropdownMenu.OnChoiceClicked
// 0x0008 (0x0008 - 0x0000)
struct GbxComboBoxDropdownMenu_OnChoiceClicked final
{
public:
	class UGbxListItem*                           ListItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxComboBoxDropdownMenu_OnChoiceClicked) == 0x000008, "Wrong alignment on GbxComboBoxDropdownMenu_OnChoiceClicked");
static_assert(sizeof(GbxComboBoxDropdownMenu_OnChoiceClicked) == 0x000008, "Wrong size on GbxComboBoxDropdownMenu_OnChoiceClicked");
static_assert(offsetof(GbxComboBoxDropdownMenu_OnChoiceClicked, ListItem) == 0x000000, "Member 'GbxComboBoxDropdownMenu_OnChoiceClicked::ListItem' has a wrong offset!");

// Function GbxUI.GbxComboBox.OnComboBoxClicked
// 0x0038 (0x0038 - 0x0000)
struct GbxComboBox_OnComboBoxClicked final
{
public:
	class UGbxUserWidget*                         Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxComboBox_OnComboBoxClicked) == 0x000008, "Wrong alignment on GbxComboBox_OnComboBoxClicked");
static_assert(sizeof(GbxComboBox_OnComboBoxClicked) == 0x000038, "Wrong size on GbxComboBox_OnComboBoxClicked");
static_assert(offsetof(GbxComboBox_OnComboBoxClicked, Widget) == 0x000000, "Member 'GbxComboBox_OnComboBoxClicked::Widget' has a wrong offset!");
static_assert(offsetof(GbxComboBox_OnComboBoxClicked, InputInfo) == 0x000008, "Member 'GbxComboBox_OnComboBoxClicked::InputInfo' has a wrong offset!");

// Function GbxUI.GbxComboBox.GetCurentChoiceReferenceIndex
// 0x0004 (0x0004 - 0x0000)
struct GbxComboBox_GetCurentChoiceReferenceIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxComboBox_GetCurentChoiceReferenceIndex) == 0x000004, "Wrong alignment on GbxComboBox_GetCurentChoiceReferenceIndex");
static_assert(sizeof(GbxComboBox_GetCurentChoiceReferenceIndex) == 0x000004, "Wrong size on GbxComboBox_GetCurentChoiceReferenceIndex");
static_assert(offsetof(GbxComboBox_GetCurentChoiceReferenceIndex, ReturnValue) == 0x000000, "Member 'GbxComboBox_GetCurentChoiceReferenceIndex::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxDialogBox.OnChoiceClicked
// 0x0008 (0x0008 - 0x0000)
struct GbxDialogBox_OnChoiceClicked final
{
public:
	class UGbxListItem*                           ClickedItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDialogBox_OnChoiceClicked) == 0x000008, "Wrong alignment on GbxDialogBox_OnChoiceClicked");
static_assert(sizeof(GbxDialogBox_OnChoiceClicked) == 0x000008, "Wrong size on GbxDialogBox_OnChoiceClicked");
static_assert(offsetof(GbxDialogBox_OnChoiceClicked, ClickedItem) == 0x000000, "Member 'GbxDialogBox_OnChoiceClicked::ClickedItem' has a wrong offset!");

// Function GbxUI.GbxDialogBox.SetBodyText
// 0x0020 (0x0020 - 0x0000)
struct GbxDialogBox_SetBodyText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bClearFormatArgs;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxDialogBox_SetBodyText) == 0x000008, "Wrong alignment on GbxDialogBox_SetBodyText");
static_assert(sizeof(GbxDialogBox_SetBodyText) == 0x000020, "Wrong size on GbxDialogBox_SetBodyText");
static_assert(offsetof(GbxDialogBox_SetBodyText, NewText) == 0x000000, "Member 'GbxDialogBox_SetBodyText::NewText' has a wrong offset!");
static_assert(offsetof(GbxDialogBox_SetBodyText, bClearFormatArgs) == 0x000018, "Member 'GbxDialogBox_SetBodyText::bClearFormatArgs' has a wrong offset!");

// Function GbxUI.GbxDialogBox.SetBodyTextFormatArg
// 0x0028 (0x0028 - 0x0000)
struct GbxDialogBox_SetBodyTextFormatArg final
{
public:
	class FString                                 ArgName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReplacementText;                                   // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDialogBox_SetBodyTextFormatArg) == 0x000008, "Wrong alignment on GbxDialogBox_SetBodyTextFormatArg");
static_assert(sizeof(GbxDialogBox_SetBodyTextFormatArg) == 0x000028, "Wrong size on GbxDialogBox_SetBodyTextFormatArg");
static_assert(offsetof(GbxDialogBox_SetBodyTextFormatArg, ArgName) == 0x000000, "Member 'GbxDialogBox_SetBodyTextFormatArg::ArgName' has a wrong offset!");
static_assert(offsetof(GbxDialogBox_SetBodyTextFormatArg, ReplacementText) == 0x000010, "Member 'GbxDialogBox_SetBodyTextFormatArg::ReplacementText' has a wrong offset!");

// Function GbxUI.GbxDialogBox.SetHeaderText
// 0x0020 (0x0020 - 0x0000)
struct GbxDialogBox_SetHeaderText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bClearFormatArgs;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxDialogBox_SetHeaderText) == 0x000008, "Wrong alignment on GbxDialogBox_SetHeaderText");
static_assert(sizeof(GbxDialogBox_SetHeaderText) == 0x000020, "Wrong size on GbxDialogBox_SetHeaderText");
static_assert(offsetof(GbxDialogBox_SetHeaderText, NewText) == 0x000000, "Member 'GbxDialogBox_SetHeaderText::NewText' has a wrong offset!");
static_assert(offsetof(GbxDialogBox_SetHeaderText, bClearFormatArgs) == 0x000018, "Member 'GbxDialogBox_SetHeaderText::bClearFormatArgs' has a wrong offset!");

// Function GbxUI.GbxDialogBox.SetHeaderTextFormatArg
// 0x0028 (0x0028 - 0x0000)
struct GbxDialogBox_SetHeaderTextFormatArg final
{
public:
	class FString                                 ArgName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReplacementText;                                   // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDialogBox_SetHeaderTextFormatArg) == 0x000008, "Wrong alignment on GbxDialogBox_SetHeaderTextFormatArg");
static_assert(sizeof(GbxDialogBox_SetHeaderTextFormatArg) == 0x000028, "Wrong size on GbxDialogBox_SetHeaderTextFormatArg");
static_assert(offsetof(GbxDialogBox_SetHeaderTextFormatArg, ArgName) == 0x000000, "Member 'GbxDialogBox_SetHeaderTextFormatArg::ArgName' has a wrong offset!");
static_assert(offsetof(GbxDialogBox_SetHeaderTextFormatArg, ReplacementText) == 0x000010, "Member 'GbxDialogBox_SetHeaderTextFormatArg::ReplacementText' has a wrong offset!");

// Function GbxUI.GbxDialogBox.SetupDialog
// 0x0060 (0x0060 - 0x0000)
struct GbxDialogBox_SetupDialog final
{
public:
	struct FGbxDialogBoxInfo                      DialogBoxInfo;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDialogBox_SetupDialog) == 0x000008, "Wrong alignment on GbxDialogBox_SetupDialog");
static_assert(sizeof(GbxDialogBox_SetupDialog) == 0x000060, "Wrong size on GbxDialogBox_SetupDialog");
static_assert(offsetof(GbxDialogBox_SetupDialog, DialogBoxInfo) == 0x000000, "Member 'GbxDialogBox_SetupDialog::DialogBoxInfo' has a wrong offset!");

// Function GbxUI.GbxDialogBox.UpdateText
// 0x0030 (0x0030 - 0x0000)
struct GbxDialogBox_UpdateText final
{
public:
	class FText                                   NewHeaderText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NewBodyText;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxDialogBox_UpdateText) == 0x000008, "Wrong alignment on GbxDialogBox_UpdateText");
static_assert(sizeof(GbxDialogBox_UpdateText) == 0x000030, "Wrong size on GbxDialogBox_UpdateText");
static_assert(offsetof(GbxDialogBox_UpdateText, NewHeaderText) == 0x000000, "Member 'GbxDialogBox_UpdateText::NewHeaderText' has a wrong offset!");
static_assert(offsetof(GbxDialogBox_UpdateText, NewBodyText) == 0x000018, "Member 'GbxDialogBox_UpdateText::NewBodyText' has a wrong offset!");

// Function GbxUI.GbxGFxContextualMenu.OnContextualMenuItemClicked
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxContextualMenu_OnContextualMenuItemClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxContextualMenu_OnContextualMenuItemClicked) == 0x000008, "Wrong alignment on GbxGFxContextualMenu_OnContextualMenuItemClicked");
static_assert(sizeof(GbxGFxContextualMenu_OnContextualMenuItemClicked) == 0x000038, "Wrong size on GbxGFxContextualMenu_OnContextualMenuItemClicked");
static_assert(offsetof(GbxGFxContextualMenu_OnContextualMenuItemClicked, PressedButton) == 0x000000, "Member 'GbxGFxContextualMenu_OnContextualMenuItemClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GbxGFxContextualMenu_OnContextualMenuItemClicked, InputInfo) == 0x000008, "Member 'GbxGFxContextualMenu_OnContextualMenuItemClicked::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxContextualMenu.OnSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxContextualMenu_OnSelectionChanged final
{
public:
	class UGbxGFxListCell*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxContextualMenu_OnSelectionChanged) == 0x000008, "Wrong alignment on GbxGFxContextualMenu_OnSelectionChanged");
static_assert(sizeof(GbxGFxContextualMenu_OnSelectionChanged) == 0x000008, "Wrong size on GbxGFxContextualMenu_OnSelectionChanged");
static_assert(offsetof(GbxGFxContextualMenu_OnSelectionChanged, Item) == 0x000000, "Member 'GbxGFxContextualMenu_OnSelectionChanged::Item' has a wrong offset!");

// Function GbxUI.GbxGFxDragDropManager.OnDropButtonHovered
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxDragDropManager_OnDropButtonHovered final
{
public:
	class UGbxGFxButton*                          HoveredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxDragDropManager_OnDropButtonHovered) == 0x000008, "Wrong alignment on GbxGFxDragDropManager_OnDropButtonHovered");
static_assert(sizeof(GbxGFxDragDropManager_OnDropButtonHovered) == 0x000038, "Wrong size on GbxGFxDragDropManager_OnDropButtonHovered");
static_assert(offsetof(GbxGFxDragDropManager_OnDropButtonHovered, HoveredButton) == 0x000000, "Member 'GbxGFxDragDropManager_OnDropButtonHovered::HoveredButton' has a wrong offset!");
static_assert(offsetof(GbxGFxDragDropManager_OnDropButtonHovered, InputInfo) == 0x000008, "Member 'GbxGFxDragDropManager_OnDropButtonHovered::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxDragDropManager.OnDropButtonUnhovered
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxDragDropManager_OnDropButtonUnhovered final
{
public:
	class UGbxGFxButton*                          UnhoveredButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxDragDropManager_OnDropButtonUnhovered) == 0x000008, "Wrong alignment on GbxGFxDragDropManager_OnDropButtonUnhovered");
static_assert(sizeof(GbxGFxDragDropManager_OnDropButtonUnhovered) == 0x000038, "Wrong size on GbxGFxDragDropManager_OnDropButtonUnhovered");
static_assert(offsetof(GbxGFxDragDropManager_OnDropButtonUnhovered, UnhoveredButton) == 0x000000, "Member 'GbxGFxDragDropManager_OnDropButtonUnhovered::UnhoveredButton' has a wrong offset!");
static_assert(offsetof(GbxGFxDragDropManager_OnDropButtonUnhovered, InputInfo) == 0x000008, "Member 'GbxGFxDragDropManager_OnDropButtonUnhovered::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxHintWidget.OnThisHintClicked
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxHintWidget_OnThisHintClicked final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxHintWidget_OnThisHintClicked) == 0x000008, "Wrong alignment on GbxGFxHintWidget_OnThisHintClicked");
static_assert(sizeof(GbxGFxHintWidget_OnThisHintClicked) == 0x000038, "Wrong size on GbxGFxHintWidget_OnThisHintClicked");
static_assert(offsetof(GbxGFxHintWidget_OnThisHintClicked, BUTTON) == 0x000000, "Member 'GbxGFxHintWidget_OnThisHintClicked::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxHintWidget_OnThisHintClicked, InputInfo) == 0x000008, "Member 'GbxGFxHintWidget_OnThisHintClicked::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxListItemComboBox.OnOwningListSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxListItemComboBox_OnOwningListSelectionChanged final
{
public:
	class UGbxGFxListCell*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxListItemComboBox_OnOwningListSelectionChanged) == 0x000008, "Wrong alignment on GbxGFxListItemComboBox_OnOwningListSelectionChanged");
static_assert(sizeof(GbxGFxListItemComboBox_OnOwningListSelectionChanged) == 0x000008, "Wrong size on GbxGFxListItemComboBox_OnOwningListSelectionChanged");
static_assert(offsetof(GbxGFxListItemComboBox_OnOwningListSelectionChanged, Item) == 0x000000, "Member 'GbxGFxListItemComboBox_OnOwningListSelectionChanged::Item' has a wrong offset!");

// Function GbxUI.GbxGFxListItemComboBox.OnSelectionUpdated
// 0x0008 (0x0008 - 0x0000)
struct GbxGFxListItemComboBox_OnSelectionUpdated final
{
public:
	class UGbxGFxListCell*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxListItemComboBox_OnSelectionUpdated) == 0x000008, "Wrong alignment on GbxGFxListItemComboBox_OnSelectionUpdated");
static_assert(sizeof(GbxGFxListItemComboBox_OnSelectionUpdated) == 0x000008, "Wrong size on GbxGFxListItemComboBox_OnSelectionUpdated");
static_assert(offsetof(GbxGFxListItemComboBox_OnSelectionUpdated, Item) == 0x000000, "Member 'GbxGFxListItemComboBox_OnSelectionUpdated::Item' has a wrong offset!");

// Function GbxUI.GbxGFxMediaPlayer.OnMovieMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMediaPlayer_OnMovieMediaOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMediaPlayer_OnMovieMediaOpened) == 0x000008, "Wrong alignment on GbxGFxMediaPlayer_OnMovieMediaOpened");
static_assert(sizeof(GbxGFxMediaPlayer_OnMovieMediaOpened) == 0x000010, "Wrong size on GbxGFxMediaPlayer_OnMovieMediaOpened");
static_assert(offsetof(GbxGFxMediaPlayer_OnMovieMediaOpened, OpenedUrl) == 0x000000, "Member 'GbxGFxMediaPlayer_OnMovieMediaOpened::OpenedUrl' has a wrong offset!");

// Function GbxUI.GbxGFxMediaPlayer.OnMovieMediaOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct GbxGFxMediaPlayer_OnMovieMediaOpenFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMediaPlayer_OnMovieMediaOpenFailed) == 0x000008, "Wrong alignment on GbxGFxMediaPlayer_OnMovieMediaOpenFailed");
static_assert(sizeof(GbxGFxMediaPlayer_OnMovieMediaOpenFailed) == 0x000010, "Wrong size on GbxGFxMediaPlayer_OnMovieMediaOpenFailed");
static_assert(offsetof(GbxGFxMediaPlayer_OnMovieMediaOpenFailed, FailedUrl) == 0x000000, "Member 'GbxGFxMediaPlayer_OnMovieMediaOpenFailed::FailedUrl' has a wrong offset!");

// Function GbxUI.GbxGFxMenuSwitcherNavWidget.OnTabClicked
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxMenuSwitcherNavWidget_OnTabClicked final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxMenuSwitcherNavWidget_OnTabClicked) == 0x000008, "Wrong alignment on GbxGFxMenuSwitcherNavWidget_OnTabClicked");
static_assert(sizeof(GbxGFxMenuSwitcherNavWidget_OnTabClicked) == 0x000038, "Wrong size on GbxGFxMenuSwitcherNavWidget_OnTabClicked");
static_assert(offsetof(GbxGFxMenuSwitcherNavWidget_OnTabClicked, BUTTON) == 0x000000, "Member 'GbxGFxMenuSwitcherNavWidget_OnTabClicked::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxMenuSwitcherNavWidget_OnTabClicked, InputInfo) == 0x000008, "Member 'GbxGFxMenuSwitcherNavWidget_OnTabClicked::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxSlider.BeginLeftSlide
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxSlider_BeginLeftSlide final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxSlider_BeginLeftSlide) == 0x000008, "Wrong alignment on GbxGFxSlider_BeginLeftSlide");
static_assert(sizeof(GbxGFxSlider_BeginLeftSlide) == 0x000038, "Wrong size on GbxGFxSlider_BeginLeftSlide");
static_assert(offsetof(GbxGFxSlider_BeginLeftSlide, BUTTON) == 0x000000, "Member 'GbxGFxSlider_BeginLeftSlide::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxSlider_BeginLeftSlide, InputInfo) == 0x000008, "Member 'GbxGFxSlider_BeginLeftSlide::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxSlider.BeginRightSlide
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxSlider_BeginRightSlide final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxSlider_BeginRightSlide) == 0x000008, "Wrong alignment on GbxGFxSlider_BeginRightSlide");
static_assert(sizeof(GbxGFxSlider_BeginRightSlide) == 0x000038, "Wrong size on GbxGFxSlider_BeginRightSlide");
static_assert(offsetof(GbxGFxSlider_BeginRightSlide, BUTTON) == 0x000000, "Member 'GbxGFxSlider_BeginRightSlide::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxSlider_BeginRightSlide, InputInfo) == 0x000008, "Member 'GbxGFxSlider_BeginRightSlide::InputInfo' has a wrong offset!");

// Function GbxUI.GbxGFxSlider.EndSlide
// 0x0038 (0x0038 - 0x0000)
struct GbxGFxSlider_EndSlide final
{
public:
	class UGbxGFxButton*                          BUTTON;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxSlider_EndSlide) == 0x000008, "Wrong alignment on GbxGFxSlider_EndSlide");
static_assert(sizeof(GbxGFxSlider_EndSlide) == 0x000038, "Wrong size on GbxGFxSlider_EndSlide");
static_assert(offsetof(GbxGFxSlider_EndSlide, BUTTON) == 0x000000, "Member 'GbxGFxSlider_EndSlide::BUTTON' has a wrong offset!");
static_assert(offsetof(GbxGFxSlider_EndSlide, InputInfo) == 0x000008, "Member 'GbxGFxSlider_EndSlide::InputInfo' has a wrong offset!");

// DelegateFunction GbxUI.GbxGFxSlider.GbxGFxSliderUpdateEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature final
{
public:
	float                                         SliderPercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature) == 0x000004, "Wrong alignment on GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature");
static_assert(sizeof(GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature) == 0x000004, "Wrong size on GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature");
static_assert(offsetof(GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature, SliderPercent) == 0x000000, "Member 'GbxGFxSlider_GbxGFxSliderUpdateEvent__DelegateSignature::SliderPercent' has a wrong offset!");

// Function GbxUI.GbxHintBarWidgetContainer.HintBarAppendHint
// 0x0040 (0x0040 - 0x0000)
struct GbxHintBarWidgetContainer_HintBarAppendHint final
{
public:
	struct FGbxHintInfo                           HintInfo;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHintBarWidgetContainer_HintBarAppendHint) == 0x000008, "Wrong alignment on GbxHintBarWidgetContainer_HintBarAppendHint");
static_assert(sizeof(GbxHintBarWidgetContainer_HintBarAppendHint) == 0x000040, "Wrong size on GbxHintBarWidgetContainer_HintBarAppendHint");
static_assert(offsetof(GbxHintBarWidgetContainer_HintBarAppendHint, HintInfo) == 0x000000, "Member 'GbxHintBarWidgetContainer_HintBarAppendHint::HintInfo' has a wrong offset!");

// Function GbxUI.GbxHintBarWidgetContainer.HintBarInitOwnerInfo
// 0x0010 (0x0010 - 0x0000)
struct GbxHintBarWidgetContainer_HintBarInitOwnerInfo final
{
public:
	class UGbxHintBar*                            HintBarOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AGbxPlayerController*             PlayerControllerContext;                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHintBarWidgetContainer_HintBarInitOwnerInfo) == 0x000008, "Wrong alignment on GbxHintBarWidgetContainer_HintBarInitOwnerInfo");
static_assert(sizeof(GbxHintBarWidgetContainer_HintBarInitOwnerInfo) == 0x000010, "Wrong size on GbxHintBarWidgetContainer_HintBarInitOwnerInfo");
static_assert(offsetof(GbxHintBarWidgetContainer_HintBarInitOwnerInfo, HintBarOwner) == 0x000000, "Member 'GbxHintBarWidgetContainer_HintBarInitOwnerInfo::HintBarOwner' has a wrong offset!");
static_assert(offsetof(GbxHintBarWidgetContainer_HintBarInitOwnerInfo, PlayerControllerContext) == 0x000008, "Member 'GbxHintBarWidgetContainer_HintBarInitOwnerInfo::PlayerControllerContext' has a wrong offset!");

// Function GbxUI.GbxHintBarWidgetContainer.HintBarSetVisible
// 0x0001 (0x0001 - 0x0000)
struct GbxHintBarWidgetContainer_HintBarSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHintBarWidgetContainer_HintBarSetVisible) == 0x000001, "Wrong alignment on GbxHintBarWidgetContainer_HintBarSetVisible");
static_assert(sizeof(GbxHintBarWidgetContainer_HintBarSetVisible) == 0x000001, "Wrong size on GbxHintBarWidgetContainer_HintBarSetVisible");
static_assert(offsetof(GbxHintBarWidgetContainer_HintBarSetVisible, bVisible) == 0x000000, "Member 'GbxHintBarWidgetContainer_HintBarSetVisible::bVisible' has a wrong offset!");

// Function GbxUI.GbxHintBar.OnHintClicked
// 0x0010 (0x0010 - 0x0000)
struct GbxHintBar_OnHintClicked final
{
public:
	class FName                                   InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeld;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxHintBar_OnHintClicked) == 0x000004, "Wrong alignment on GbxHintBar_OnHintClicked");
static_assert(sizeof(GbxHintBar_OnHintClicked) == 0x000010, "Wrong size on GbxHintBar_OnHintClicked");
static_assert(offsetof(GbxHintBar_OnHintClicked, InputAction) == 0x000000, "Member 'GbxHintBar_OnHintClicked::InputAction' has a wrong offset!");
static_assert(offsetof(GbxHintBar_OnHintClicked, bHeld) == 0x000008, "Member 'GbxHintBar_OnHintClicked::bHeld' has a wrong offset!");

// Function GbxUI.GbxHintWidget.HintWidgetInitOwnerInfo
// 0x0010 (0x0010 - 0x0000)
struct GbxHintWidget_HintWidgetInitOwnerInfo final
{
public:
	class UGbxHintBar*                            HintBarOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AGbxPlayerController*             PlayerControllerContext;                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHintWidget_HintWidgetInitOwnerInfo) == 0x000008, "Wrong alignment on GbxHintWidget_HintWidgetInitOwnerInfo");
static_assert(sizeof(GbxHintWidget_HintWidgetInitOwnerInfo) == 0x000010, "Wrong size on GbxHintWidget_HintWidgetInitOwnerInfo");
static_assert(offsetof(GbxHintWidget_HintWidgetInitOwnerInfo, HintBarOwner) == 0x000000, "Member 'GbxHintWidget_HintWidgetInitOwnerInfo::HintBarOwner' has a wrong offset!");
static_assert(offsetof(GbxHintWidget_HintWidgetInitOwnerInfo, PlayerControllerContext) == 0x000008, "Member 'GbxHintWidget_HintWidgetInitOwnerInfo::PlayerControllerContext' has a wrong offset!");

// Function GbxUI.GbxHintWidget.HintWidgetSetInfo
// 0x0040 (0x0040 - 0x0000)
struct GbxHintWidget_HintWidgetSetInfo final
{
public:
	struct FGbxHintInfo                           HintInfo;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHintWidget_HintWidgetSetInfo) == 0x000008, "Wrong alignment on GbxHintWidget_HintWidgetSetInfo");
static_assert(sizeof(GbxHintWidget_HintWidgetSetInfo) == 0x000040, "Wrong size on GbxHintWidget_HintWidgetSetInfo");
static_assert(offsetof(GbxHintWidget_HintWidgetSetInfo, HintInfo) == 0x000000, "Member 'GbxHintWidget_HintWidgetSetInfo::HintInfo' has a wrong offset!");

// Function GbxUI.GbxHintWidget.HintWidgetSetVisible
// 0x0001 (0x0001 - 0x0000)
struct GbxHintWidget_HintWidgetSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxHintWidget_HintWidgetSetVisible) == 0x000001, "Wrong alignment on GbxHintWidget_HintWidgetSetVisible");
static_assert(sizeof(GbxHintWidget_HintWidgetSetVisible) == 0x000001, "Wrong size on GbxHintWidget_HintWidgetSetVisible");
static_assert(offsetof(GbxHintWidget_HintWidgetSetVisible, bVisible) == 0x000000, "Member 'GbxHintWidget_HintWidgetSetVisible::bVisible' has a wrong offset!");

// Function GbxUI.GbxList.InsertListItem
// 0x0008 (0x0008 - 0x0000)
struct GbxList_InsertListItem final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_InsertListItem) == 0x000008, "Wrong alignment on GbxList_InsertListItem");
static_assert(sizeof(GbxList_InsertListItem) == 0x000008, "Wrong size on GbxList_InsertListItem");
static_assert(offsetof(GbxList_InsertListItem, Item) == 0x000000, "Member 'GbxList_InsertListItem::Item' has a wrong offset!");

// Function GbxUI.GbxList.MoveSelectionDown
// 0x0001 (0x0001 - 0x0000)
struct GbxList_MoveSelectionDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_MoveSelectionDown) == 0x000001, "Wrong alignment on GbxList_MoveSelectionDown");
static_assert(sizeof(GbxList_MoveSelectionDown) == 0x000001, "Wrong size on GbxList_MoveSelectionDown");
static_assert(offsetof(GbxList_MoveSelectionDown, ReturnValue) == 0x000000, "Member 'GbxList_MoveSelectionDown::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.MoveSelectionLeft
// 0x0001 (0x0001 - 0x0000)
struct GbxList_MoveSelectionLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_MoveSelectionLeft) == 0x000001, "Wrong alignment on GbxList_MoveSelectionLeft");
static_assert(sizeof(GbxList_MoveSelectionLeft) == 0x000001, "Wrong size on GbxList_MoveSelectionLeft");
static_assert(offsetof(GbxList_MoveSelectionLeft, ReturnValue) == 0x000000, "Member 'GbxList_MoveSelectionLeft::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.MoveSelectionRight
// 0x0001 (0x0001 - 0x0000)
struct GbxList_MoveSelectionRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_MoveSelectionRight) == 0x000001, "Wrong alignment on GbxList_MoveSelectionRight");
static_assert(sizeof(GbxList_MoveSelectionRight) == 0x000001, "Wrong size on GbxList_MoveSelectionRight");
static_assert(offsetof(GbxList_MoveSelectionRight, ReturnValue) == 0x000000, "Member 'GbxList_MoveSelectionRight::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.MoveSelectionUp
// 0x0001 (0x0001 - 0x0000)
struct GbxList_MoveSelectionUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_MoveSelectionUp) == 0x000001, "Wrong alignment on GbxList_MoveSelectionUp");
static_assert(sizeof(GbxList_MoveSelectionUp) == 0x000001, "Wrong size on GbxList_MoveSelectionUp");
static_assert(offsetof(GbxList_MoveSelectionUp, ReturnValue) == 0x000000, "Member 'GbxList_MoveSelectionUp::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.OnItemClicked
// 0x0008 (0x0008 - 0x0000)
struct GbxList_OnItemClicked final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_OnItemClicked) == 0x000008, "Wrong alignment on GbxList_OnItemClicked");
static_assert(sizeof(GbxList_OnItemClicked) == 0x000008, "Wrong size on GbxList_OnItemClicked");
static_assert(offsetof(GbxList_OnItemClicked, Item) == 0x000000, "Member 'GbxList_OnItemClicked::Item' has a wrong offset!");

// Function GbxUI.GbxList.RemoveListItem
// 0x0008 (0x0008 - 0x0000)
struct GbxList_RemoveListItem final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_RemoveListItem) == 0x000008, "Wrong alignment on GbxList_RemoveListItem");
static_assert(sizeof(GbxList_RemoveListItem) == 0x000008, "Wrong size on GbxList_RemoveListItem");
static_assert(offsetof(GbxList_RemoveListItem, Item) == 0x000000, "Member 'GbxList_RemoveListItem::Item' has a wrong offset!");

// Function GbxUI.GbxList.SetItemClickedDelegate
// 0x0010 (0x0010 - 0x0000)
struct GbxList_SetItemClickedDelegate final
{
public:
	TDelegate<void(class UGbxListItem* ClickedItem)> InItemClickedDelegate;                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_SetItemClickedDelegate) == 0x000004, "Wrong alignment on GbxList_SetItemClickedDelegate");
static_assert(sizeof(GbxList_SetItemClickedDelegate) == 0x000010, "Wrong size on GbxList_SetItemClickedDelegate");
static_assert(offsetof(GbxList_SetItemClickedDelegate, InItemClickedDelegate) == 0x000000, "Member 'GbxList_SetItemClickedDelegate::InItemClickedDelegate' has a wrong offset!");

// Function GbxUI.GbxList.SetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct GbxList_SetSelectedIndex final
{
public:
	int32                                         NewSelection;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollIntoView;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateScroll;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxList_SetSelectedIndex) == 0x000004, "Wrong alignment on GbxList_SetSelectedIndex");
static_assert(sizeof(GbxList_SetSelectedIndex) == 0x000008, "Wrong size on GbxList_SetSelectedIndex");
static_assert(offsetof(GbxList_SetSelectedIndex, NewSelection) == 0x000000, "Member 'GbxList_SetSelectedIndex::NewSelection' has a wrong offset!");
static_assert(offsetof(GbxList_SetSelectedIndex, bScrollIntoView) == 0x000004, "Member 'GbxList_SetSelectedIndex::bScrollIntoView' has a wrong offset!");
static_assert(offsetof(GbxList_SetSelectedIndex, bAnimateScroll) == 0x000005, "Member 'GbxList_SetSelectedIndex::bAnimateScroll' has a wrong offset!");

// Function GbxUI.GbxList.SetSelectedItem
// 0x0010 (0x0010 - 0x0000)
struct GbxList_SetSelectedItem final
{
public:
	class UGbxListItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollIntoView;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateScroll;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxList_SetSelectedItem) == 0x000008, "Wrong alignment on GbxList_SetSelectedItem");
static_assert(sizeof(GbxList_SetSelectedItem) == 0x000010, "Wrong size on GbxList_SetSelectedItem");
static_assert(offsetof(GbxList_SetSelectedItem, Item) == 0x000000, "Member 'GbxList_SetSelectedItem::Item' has a wrong offset!");
static_assert(offsetof(GbxList_SetSelectedItem, bScrollIntoView) == 0x000008, "Member 'GbxList_SetSelectedItem::bScrollIntoView' has a wrong offset!");
static_assert(offsetof(GbxList_SetSelectedItem, bAnimateScroll) == 0x000009, "Member 'GbxList_SetSelectedItem::bAnimateScroll' has a wrong offset!");

// Function GbxUI.GbxList.SetSelectionChangedDelegate
// 0x0010 (0x0010 - 0x0000)
struct GbxList_SetSelectionChangedDelegate final
{
public:
	TDelegate<void(class UGbxListItem* Item)>     InSelectionChangedDelegate;                        // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_SetSelectionChangedDelegate) == 0x000004, "Wrong alignment on GbxList_SetSelectionChangedDelegate");
static_assert(sizeof(GbxList_SetSelectionChangedDelegate) == 0x000010, "Wrong size on GbxList_SetSelectionChangedDelegate");
static_assert(offsetof(GbxList_SetSelectionChangedDelegate, InSelectionChangedDelegate) == 0x000000, "Member 'GbxList_SetSelectionChangedDelegate::InSelectionChangedDelegate' has a wrong offset!");

// Function GbxUI.GbxList.TryToAcquireMenuFocus
// 0x0001 (0x0001 - 0x0000)
struct GbxList_TryToAcquireMenuFocus final
{
public:
	bool                                          bFromMouse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_TryToAcquireMenuFocus) == 0x000001, "Wrong alignment on GbxList_TryToAcquireMenuFocus");
static_assert(sizeof(GbxList_TryToAcquireMenuFocus) == 0x000001, "Wrong size on GbxList_TryToAcquireMenuFocus");
static_assert(offsetof(GbxList_TryToAcquireMenuFocus, bFromMouse) == 0x000000, "Member 'GbxList_TryToAcquireMenuFocus::bFromMouse' has a wrong offset!");

// Function GbxUI.GbxList.GetDefaultItemClass
// 0x0008 (0x0008 - 0x0000)
struct GbxList_GetDefaultItemClass final
{
public:
	TSubclassOf<class UGbxListItem>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_GetDefaultItemClass) == 0x000008, "Wrong alignment on GbxList_GetDefaultItemClass");
static_assert(sizeof(GbxList_GetDefaultItemClass) == 0x000008, "Wrong size on GbxList_GetDefaultItemClass");
static_assert(offsetof(GbxList_GetDefaultItemClass, ReturnValue) == 0x000000, "Member 'GbxList_GetDefaultItemClass::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.GetItemAtIndex
// 0x0010 (0x0010 - 0x0000)
struct GbxList_GetItemAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxListItem*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_GetItemAtIndex) == 0x000008, "Wrong alignment on GbxList_GetItemAtIndex");
static_assert(sizeof(GbxList_GetItemAtIndex) == 0x000010, "Wrong size on GbxList_GetItemAtIndex");
static_assert(offsetof(GbxList_GetItemAtIndex, Index_0) == 0x000000, "Member 'GbxList_GetItemAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GbxList_GetItemAtIndex, ReturnValue) == 0x000008, "Member 'GbxList_GetItemAtIndex::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.GetListItemFactory
// 0x0008 (0x0008 - 0x0000)
struct GbxList_GetListItemFactory final
{
public:
	class UGbxListItemFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_GetListItemFactory) == 0x000008, "Wrong alignment on GbxList_GetListItemFactory");
static_assert(sizeof(GbxList_GetListItemFactory) == 0x000008, "Wrong size on GbxList_GetListItemFactory");
static_assert(offsetof(GbxList_GetListItemFactory, ReturnValue) == 0x000000, "Member 'GbxList_GetListItemFactory::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.GetNumItemsInList
// 0x0004 (0x0004 - 0x0000)
struct GbxList_GetNumItemsInList final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_GetNumItemsInList) == 0x000004, "Wrong alignment on GbxList_GetNumItemsInList");
static_assert(sizeof(GbxList_GetNumItemsInList) == 0x000004, "Wrong size on GbxList_GetNumItemsInList");
static_assert(offsetof(GbxList_GetNumItemsInList, ReturnValue) == 0x000000, "Member 'GbxList_GetNumItemsInList::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GbxList_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_GetSelectedIndex) == 0x000004, "Wrong alignment on GbxList_GetSelectedIndex");
static_assert(sizeof(GbxList_GetSelectedIndex) == 0x000004, "Wrong size on GbxList_GetSelectedIndex");
static_assert(offsetof(GbxList_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'GbxList_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.GetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct GbxList_GetSelectedItem final
{
public:
	class UGbxListItem*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_GetSelectedItem) == 0x000008, "Wrong alignment on GbxList_GetSelectedItem");
static_assert(sizeof(GbxList_GetSelectedItem) == 0x000008, "Wrong size on GbxList_GetSelectedItem");
static_assert(offsetof(GbxList_GetSelectedItem, ReturnValue) == 0x000000, "Member 'GbxList_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.IsListEnabled
// 0x0001 (0x0001 - 0x0000)
struct GbxList_IsListEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_IsListEnabled) == 0x000001, "Wrong alignment on GbxList_IsListEnabled");
static_assert(sizeof(GbxList_IsListEnabled) == 0x000001, "Wrong size on GbxList_IsListEnabled");
static_assert(offsetof(GbxList_IsListEnabled, ReturnValue) == 0x000000, "Member 'GbxList_IsListEnabled::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxList.IsListFocused
// 0x0001 (0x0001 - 0x0000)
struct GbxList_IsListFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxList_IsListFocused) == 0x000001, "Wrong alignment on GbxList_IsListFocused");
static_assert(sizeof(GbxList_IsListFocused) == 0x000001, "Wrong size on GbxList_IsListFocused");
static_assert(offsetof(GbxList_IsListFocused, ReturnValue) == 0x000000, "Member 'GbxList_IsListFocused::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemBoolean.HandleFocusableWidgetPressed
// 0x0030 (0x0030 - 0x0000)
struct GbxListItemBoolean_HandleFocusableWidgetPressed final
{
public:
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemBoolean_HandleFocusableWidgetPressed) == 0x000008, "Wrong alignment on GbxListItemBoolean_HandleFocusableWidgetPressed");
static_assert(sizeof(GbxListItemBoolean_HandleFocusableWidgetPressed) == 0x000030, "Wrong size on GbxListItemBoolean_HandleFocusableWidgetPressed");
static_assert(offsetof(GbxListItemBoolean_HandleFocusableWidgetPressed, InputInfo) == 0x000000, "Member 'GbxListItemBoolean_HandleFocusableWidgetPressed::InputInfo' has a wrong offset!");

// Function GbxUI.GbxListItemBoolean.SetChecked
// 0x0001 (0x0001 - 0x0000)
struct GbxListItemBoolean_SetChecked final
{
public:
	bool                                          bChecked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemBoolean_SetChecked) == 0x000001, "Wrong alignment on GbxListItemBoolean_SetChecked");
static_assert(sizeof(GbxListItemBoolean_SetChecked) == 0x000001, "Wrong size on GbxListItemBoolean_SetChecked");
static_assert(offsetof(GbxListItemBoolean_SetChecked, bChecked) == 0x000000, "Member 'GbxListItemBoolean_SetChecked::bChecked' has a wrong offset!");

// Function GbxUI.GbxListItemBoolean.IsChecked
// 0x0001 (0x0001 - 0x0000)
struct GbxListItemBoolean_IsChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemBoolean_IsChecked) == 0x000001, "Wrong alignment on GbxListItemBoolean_IsChecked");
static_assert(sizeof(GbxListItemBoolean_IsChecked) == 0x000001, "Wrong size on GbxListItemBoolean_IsChecked");
static_assert(offsetof(GbxListItemBoolean_IsChecked, ReturnValue) == 0x000000, "Member 'GbxListItemBoolean_IsChecked::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemComboBox.InitializeComboBox
// 0x0018 (0x0018 - 0x0000)
struct GbxListItemComboBox_InitializeComboBox final
{
public:
	TArray<class FText>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InitialValue;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxListItemComboBox_InitializeComboBox) == 0x000008, "Wrong alignment on GbxListItemComboBox_InitializeComboBox");
static_assert(sizeof(GbxListItemComboBox_InitializeComboBox) == 0x000018, "Wrong size on GbxListItemComboBox_InitializeComboBox");
static_assert(offsetof(GbxListItemComboBox_InitializeComboBox, Items) == 0x000000, "Member 'GbxListItemComboBox_InitializeComboBox::Items' has a wrong offset!");
static_assert(offsetof(GbxListItemComboBox_InitializeComboBox, InitialValue) == 0x000010, "Member 'GbxListItemComboBox_InitializeComboBox::InitialValue' has a wrong offset!");

// DelegateFunction GbxUI.GbxListItemComboBox.ListItemComboBoxSelectionChangedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature final
{
public:
	int32                                         NewSelectedIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature");
static_assert(sizeof(GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature) == 0x000004, "Wrong size on GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature");
static_assert(offsetof(GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature, NewSelectedIndex) == 0x000000, "Member 'GbxListItemComboBox_ListItemComboBoxSelectionChangedDelegate__DelegateSignature::NewSelectedIndex' has a wrong offset!");

// Function GbxUI.GbxListItemComboBox.OnValueComboBoxChanged
// 0x0018 (0x0018 - 0x0000)
struct GbxListItemComboBox_OnValueComboBoxChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxListItemComboBox_OnValueComboBoxChanged) == 0x000008, "Wrong alignment on GbxListItemComboBox_OnValueComboBoxChanged");
static_assert(sizeof(GbxListItemComboBox_OnValueComboBoxChanged) == 0x000018, "Wrong size on GbxListItemComboBox_OnValueComboBoxChanged");
static_assert(offsetof(GbxListItemComboBox_OnValueComboBoxChanged, SelectedItem) == 0x000000, "Member 'GbxListItemComboBox_OnValueComboBoxChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(GbxListItemComboBox_OnValueComboBoxChanged, SelectionType) == 0x000010, "Member 'GbxListItemComboBox_OnValueComboBoxChanged::SelectionType' has a wrong offset!");

// Function GbxUI.GbxListItemComboBox.SetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct GbxListItemComboBox_SetSelectedOptionIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemComboBox_SetSelectedOptionIndex) == 0x000004, "Wrong alignment on GbxListItemComboBox_SetSelectedOptionIndex");
static_assert(sizeof(GbxListItemComboBox_SetSelectedOptionIndex) == 0x000004, "Wrong size on GbxListItemComboBox_SetSelectedOptionIndex");
static_assert(offsetof(GbxListItemComboBox_SetSelectedOptionIndex, Index_0) == 0x000000, "Member 'GbxListItemComboBox_SetSelectedOptionIndex::Index_0' has a wrong offset!");

// Function GbxUI.GbxListItemComboBox.GetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct GbxListItemComboBox_GetSelectedOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemComboBox_GetSelectedOptionIndex) == 0x000004, "Wrong alignment on GbxListItemComboBox_GetSelectedOptionIndex");
static_assert(sizeof(GbxListItemComboBox_GetSelectedOptionIndex) == 0x000004, "Wrong size on GbxListItemComboBox_GetSelectedOptionIndex");
static_assert(offsetof(GbxListItemComboBox_GetSelectedOptionIndex, ReturnValue) == 0x000000, "Member 'GbxListItemComboBox_GetSelectedOptionIndex::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemFactory.CreateItem
// 0x0028 (0x0028 - 0x0000)
struct GbxListItemFactory_CreateItem final
{
public:
	class APlayerController*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGbxList>              Parent;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UGbxListItem>               ItemClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxListItem*                           ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemFactory_CreateItem) == 0x000008, "Wrong alignment on GbxListItemFactory_CreateItem");
static_assert(sizeof(GbxListItemFactory_CreateItem) == 0x000028, "Wrong size on GbxListItemFactory_CreateItem");
static_assert(offsetof(GbxListItemFactory_CreateItem, Owner) == 0x000000, "Member 'GbxListItemFactory_CreateItem::Owner' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItem, Parent) == 0x000008, "Member 'GbxListItemFactory_CreateItem::Parent' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItem, ItemClass) == 0x000018, "Member 'GbxListItemFactory_CreateItem::ItemClass' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItem, ReturnValue) == 0x000020, "Member 'GbxListItemFactory_CreateItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemFactory.CreateItemWithDelegates
// 0x0048 (0x0048 - 0x0000)
struct GbxListItemFactory_CreateItemWithDelegates final
{
public:
	class APlayerController*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGbxList>              Parent;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UGbxListItem>               ItemClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItem*                           ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemFactory_CreateItemWithDelegates) == 0x000008, "Wrong alignment on GbxListItemFactory_CreateItemWithDelegates");
static_assert(sizeof(GbxListItemFactory_CreateItemWithDelegates) == 0x000048, "Wrong size on GbxListItemFactory_CreateItemWithDelegates");
static_assert(offsetof(GbxListItemFactory_CreateItemWithDelegates, Owner) == 0x000000, "Member 'GbxListItemFactory_CreateItemWithDelegates::Owner' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItemWithDelegates, Parent) == 0x000008, "Member 'GbxListItemFactory_CreateItemWithDelegates::Parent' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItemWithDelegates, ItemClass) == 0x000018, "Member 'GbxListItemFactory_CreateItemWithDelegates::ItemClass' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItemWithDelegates, ClickedDelegate) == 0x000020, "Member 'GbxListItemFactory_CreateItemWithDelegates::ClickedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItemWithDelegates, SelectedDelegate) == 0x000030, "Member 'GbxListItemFactory_CreateItemWithDelegates::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateItemWithDelegates, ReturnValue) == 0x000040, "Member 'GbxListItemFactory_CreateItemWithDelegates::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemFactory.CreateBooleanItem
// 0x0060 (0x0060 - 0x0000)
struct GbxListItemFactory_CreateBooleanItem final
{
public:
	class APlayerController*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGbxList>              Parent;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          InitialValue;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGbxListItem* Item)>     ChangedDelegate;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0048(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemBoolean*                    ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemFactory_CreateBooleanItem) == 0x000008, "Wrong alignment on GbxListItemFactory_CreateBooleanItem");
static_assert(sizeof(GbxListItemFactory_CreateBooleanItem) == 0x000060, "Wrong size on GbxListItemFactory_CreateBooleanItem");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, Owner) == 0x000000, "Member 'GbxListItemFactory_CreateBooleanItem::Owner' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, Parent) == 0x000008, "Member 'GbxListItemFactory_CreateBooleanItem::Parent' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, LabelText) == 0x000018, "Member 'GbxListItemFactory_CreateBooleanItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, InitialValue) == 0x000030, "Member 'GbxListItemFactory_CreateBooleanItem::InitialValue' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, ChangedDelegate) == 0x000038, "Member 'GbxListItemFactory_CreateBooleanItem::ChangedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, SelectedDelegate) == 0x000048, "Member 'GbxListItemFactory_CreateBooleanItem::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateBooleanItem, ReturnValue) == 0x000058, "Member 'GbxListItemFactory_CreateBooleanItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemFactory.CreateComboBoxItem
// 0x0070 (0x0070 - 0x0000)
struct GbxListItemFactory_CreateComboBoxItem final
{
public:
	class APlayerController*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGbxList>              Parent;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class FText>                           Items;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InitialIndex;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGbxListItem* Item)>     ChangedDelegate;                                   // 0x0048(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0058(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemComboBox*                   ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemFactory_CreateComboBoxItem) == 0x000008, "Wrong alignment on GbxListItemFactory_CreateComboBoxItem");
static_assert(sizeof(GbxListItemFactory_CreateComboBoxItem) == 0x000070, "Wrong size on GbxListItemFactory_CreateComboBoxItem");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, Owner) == 0x000000, "Member 'GbxListItemFactory_CreateComboBoxItem::Owner' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, Parent) == 0x000008, "Member 'GbxListItemFactory_CreateComboBoxItem::Parent' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, LabelText) == 0x000018, "Member 'GbxListItemFactory_CreateComboBoxItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, Items) == 0x000030, "Member 'GbxListItemFactory_CreateComboBoxItem::Items' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, InitialIndex) == 0x000040, "Member 'GbxListItemFactory_CreateComboBoxItem::InitialIndex' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, ChangedDelegate) == 0x000048, "Member 'GbxListItemFactory_CreateComboBoxItem::ChangedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, SelectedDelegate) == 0x000058, "Member 'GbxListItemFactory_CreateComboBoxItem::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateComboBoxItem, ReturnValue) == 0x000068, "Member 'GbxListItemFactory_CreateComboBoxItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemFactory.CreateNumberItem
// 0x0068 (0x0068 - 0x0000)
struct GbxListItemFactory_CreateNumberItem final
{
public:
	class APlayerController*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGbxList>              Parent;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMin;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMax;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderStep;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxListItem* Item)>     ChangedDelegate;                                   // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemNumber*                     ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemFactory_CreateNumberItem) == 0x000008, "Wrong alignment on GbxListItemFactory_CreateNumberItem");
static_assert(sizeof(GbxListItemFactory_CreateNumberItem) == 0x000068, "Wrong size on GbxListItemFactory_CreateNumberItem");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, Owner) == 0x000000, "Member 'GbxListItemFactory_CreateNumberItem::Owner' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, Parent) == 0x000008, "Member 'GbxListItemFactory_CreateNumberItem::Parent' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, LabelText) == 0x000018, "Member 'GbxListItemFactory_CreateNumberItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, InitialValue) == 0x000030, "Member 'GbxListItemFactory_CreateNumberItem::InitialValue' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, SliderMin) == 0x000034, "Member 'GbxListItemFactory_CreateNumberItem::SliderMin' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, SliderMax) == 0x000038, "Member 'GbxListItemFactory_CreateNumberItem::SliderMax' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, SliderStep) == 0x00003C, "Member 'GbxListItemFactory_CreateNumberItem::SliderStep' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, ChangedDelegate) == 0x000040, "Member 'GbxListItemFactory_CreateNumberItem::ChangedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, SelectedDelegate) == 0x000050, "Member 'GbxListItemFactory_CreateNumberItem::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateNumberItem, ReturnValue) == 0x000060, "Member 'GbxListItemFactory_CreateNumberItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemFactory.CreateTextItem
// 0x0058 (0x0058 - 0x0000)
struct GbxListItemFactory_CreateTextItem final
{
public:
	class APlayerController*                      Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGbxList>              Parent;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   LabelText;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> ClickedDelegate;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UGbxUserWidget* Widget, struct FGbxMenuInputEvent& InputInfo)> SelectedDelegate;                                  // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UGbxListItemText*                       ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemFactory_CreateTextItem) == 0x000008, "Wrong alignment on GbxListItemFactory_CreateTextItem");
static_assert(sizeof(GbxListItemFactory_CreateTextItem) == 0x000058, "Wrong size on GbxListItemFactory_CreateTextItem");
static_assert(offsetof(GbxListItemFactory_CreateTextItem, Owner) == 0x000000, "Member 'GbxListItemFactory_CreateTextItem::Owner' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateTextItem, Parent) == 0x000008, "Member 'GbxListItemFactory_CreateTextItem::Parent' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateTextItem, LabelText) == 0x000018, "Member 'GbxListItemFactory_CreateTextItem::LabelText' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateTextItem, ClickedDelegate) == 0x000030, "Member 'GbxListItemFactory_CreateTextItem::ClickedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateTextItem, SelectedDelegate) == 0x000040, "Member 'GbxListItemFactory_CreateTextItem::SelectedDelegate' has a wrong offset!");
static_assert(offsetof(GbxListItemFactory_CreateTextItem, ReturnValue) == 0x000050, "Member 'GbxListItemFactory_CreateTextItem::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemNumber.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct GbxListItemNumber_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemNumber_GetCurrentValue) == 0x000004, "Wrong alignment on GbxListItemNumber_GetCurrentValue");
static_assert(sizeof(GbxListItemNumber_GetCurrentValue) == 0x000004, "Wrong size on GbxListItemNumber_GetCurrentValue");
static_assert(offsetof(GbxListItemNumber_GetCurrentValue, ReturnValue) == 0x000000, "Member 'GbxListItemNumber_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxListItemNumber.OnSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct GbxListItemNumber_OnSliderValueChanged final
{
public:
	float                                         NewPosition;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxListItemNumber_OnSliderValueChanged) == 0x000004, "Wrong alignment on GbxListItemNumber_OnSliderValueChanged");
static_assert(sizeof(GbxListItemNumber_OnSliderValueChanged) == 0x000004, "Wrong size on GbxListItemNumber_OnSliderValueChanged");
static_assert(offsetof(GbxListItemNumber_OnSliderValueChanged, NewPosition) == 0x000000, "Member 'GbxListItemNumber_OnSliderValueChanged::NewPosition' has a wrong offset!");

// Function GbxUI.GbxMenuStack.GetIndexOfMenu
// 0x0010 (0x0010 - 0x0000)
struct GbxMenuStack_GetIndexOfMenu final
{
public:
	const class UObject*                          Menu;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxMenuStack_GetIndexOfMenu) == 0x000008, "Wrong alignment on GbxMenuStack_GetIndexOfMenu");
static_assert(sizeof(GbxMenuStack_GetIndexOfMenu) == 0x000010, "Wrong size on GbxMenuStack_GetIndexOfMenu");
static_assert(offsetof(GbxMenuStack_GetIndexOfMenu, Menu) == 0x000000, "Member 'GbxMenuStack_GetIndexOfMenu::Menu' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_GetIndexOfMenu, ReturnValue) == 0x000008, "Member 'GbxMenuStack_GetIndexOfMenu::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.GetMenuAtIndex
// 0x0010 (0x0010 - 0x0000)
struct GbxMenuStack_GetMenuAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_GetMenuAtIndex) == 0x000008, "Wrong alignment on GbxMenuStack_GetMenuAtIndex");
static_assert(sizeof(GbxMenuStack_GetMenuAtIndex) == 0x000010, "Wrong size on GbxMenuStack_GetMenuAtIndex");
static_assert(offsetof(GbxMenuStack_GetMenuAtIndex, Index_0) == 0x000000, "Member 'GbxMenuStack_GetMenuAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_GetMenuAtIndex, ReturnValue) == 0x000008, "Member 'GbxMenuStack_GetMenuAtIndex::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.GetTopMenu
// 0x0008 (0x0008 - 0x0000)
struct GbxMenuStack_GetTopMenu final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_GetTopMenu) == 0x000008, "Wrong alignment on GbxMenuStack_GetTopMenu");
static_assert(sizeof(GbxMenuStack_GetTopMenu) == 0x000008, "Wrong size on GbxMenuStack_GetTopMenu");
static_assert(offsetof(GbxMenuStack_GetTopMenu, ReturnValue) == 0x000000, "Member 'GbxMenuStack_GetTopMenu::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.HandleRawInput
// 0x0020 (0x0020 - 0x0000)
struct GbxMenuStack_HandleRawInput final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EVENTTYPE;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerId;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_HandleRawInput) == 0x000008, "Wrong alignment on GbxMenuStack_HandleRawInput");
static_assert(sizeof(GbxMenuStack_HandleRawInput) == 0x000020, "Wrong size on GbxMenuStack_HandleRawInput");
static_assert(offsetof(GbxMenuStack_HandleRawInput, Key) == 0x000000, "Member 'GbxMenuStack_HandleRawInput::Key' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_HandleRawInput, EVENTTYPE) == 0x000018, "Member 'GbxMenuStack_HandleRawInput::EVENTTYPE' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_HandleRawInput, ControllerId) == 0x00001C, "Member 'GbxMenuStack_HandleRawInput::ControllerId' has a wrong offset!");

// Function GbxUI.GbxMenuStack.PopTo
// 0x0008 (0x0008 - 0x0000)
struct GbxMenuStack_PopTo final
{
public:
	const class UObject*                          Menu;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_PopTo) == 0x000008, "Wrong alignment on GbxMenuStack_PopTo");
static_assert(sizeof(GbxMenuStack_PopTo) == 0x000008, "Wrong size on GbxMenuStack_PopTo");
static_assert(offsetof(GbxMenuStack_PopTo, Menu) == 0x000000, "Member 'GbxMenuStack_PopTo::Menu' has a wrong offset!");

// Function GbxUI.GbxMenuStack.PopToSwitchTo
// 0x0018 (0x0018 - 0x0000)
struct GbxMenuStack_PopToSwitchTo final
{
public:
	const class UObject*                          Menu;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxMenuData*                           MenuData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_PopToSwitchTo) == 0x000008, "Wrong alignment on GbxMenuStack_PopToSwitchTo");
static_assert(sizeof(GbxMenuStack_PopToSwitchTo) == 0x000018, "Wrong size on GbxMenuStack_PopToSwitchTo");
static_assert(offsetof(GbxMenuStack_PopToSwitchTo, Menu) == 0x000000, "Member 'GbxMenuStack_PopToSwitchTo::Menu' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_PopToSwitchTo, MenuData) == 0x000008, "Member 'GbxMenuStack_PopToSwitchTo::MenuData' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_PopToSwitchTo, ReturnValue) == 0x000010, "Member 'GbxMenuStack_PopToSwitchTo::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.Push
// 0x0010 (0x0010 - 0x0000)
struct GbxMenuStack_Push final
{
public:
	class UGbxMenuData*                           MenuData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_Push) == 0x000008, "Wrong alignment on GbxMenuStack_Push");
static_assert(sizeof(GbxMenuStack_Push) == 0x000010, "Wrong size on GbxMenuStack_Push");
static_assert(offsetof(GbxMenuStack_Push, MenuData) == 0x000000, "Member 'GbxMenuStack_Push::MenuData' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_Push, ReturnValue) == 0x000008, "Member 'GbxMenuStack_Push::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.SetBlockAllRawInput
// 0x0001 (0x0001 - 0x0000)
struct GbxMenuStack_SetBlockAllRawInput final
{
public:
	bool                                          bShouldBlock;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_SetBlockAllRawInput) == 0x000001, "Wrong alignment on GbxMenuStack_SetBlockAllRawInput");
static_assert(sizeof(GbxMenuStack_SetBlockAllRawInput) == 0x000001, "Wrong size on GbxMenuStack_SetBlockAllRawInput");
static_assert(offsetof(GbxMenuStack_SetBlockAllRawInput, bShouldBlock) == 0x000000, "Member 'GbxMenuStack_SetBlockAllRawInput::bShouldBlock' has a wrong offset!");

// Function GbxUI.GbxMenuStack.SetBlockingMode
// 0x0001 (0x0001 - 0x0000)
struct GbxMenuStack_SetBlockingMode final
{
public:
	bool                                          bShouldBlock;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_SetBlockingMode) == 0x000001, "Wrong alignment on GbxMenuStack_SetBlockingMode");
static_assert(sizeof(GbxMenuStack_SetBlockingMode) == 0x000001, "Wrong size on GbxMenuStack_SetBlockingMode");
static_assert(offsetof(GbxMenuStack_SetBlockingMode, bShouldBlock) == 0x000000, "Member 'GbxMenuStack_SetBlockingMode::bShouldBlock' has a wrong offset!");

// Function GbxUI.GbxMenuStack.SwitchTo
// 0x0010 (0x0010 - 0x0000)
struct GbxMenuStack_SwitchTo final
{
public:
	class UGbxMenuData*                           MenuData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_SwitchTo) == 0x000008, "Wrong alignment on GbxMenuStack_SwitchTo");
static_assert(sizeof(GbxMenuStack_SwitchTo) == 0x000010, "Wrong size on GbxMenuStack_SwitchTo");
static_assert(offsetof(GbxMenuStack_SwitchTo, MenuData) == 0x000000, "Member 'GbxMenuStack_SwitchTo::MenuData' has a wrong offset!");
static_assert(offsetof(GbxMenuStack_SwitchTo, ReturnValue) == 0x000008, "Member 'GbxMenuStack_SwitchTo::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.Tick
// 0x0004 (0x0004 - 0x0000)
struct GbxMenuStack_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_Tick) == 0x000004, "Wrong alignment on GbxMenuStack_Tick");
static_assert(sizeof(GbxMenuStack_Tick) == 0x000004, "Wrong size on GbxMenuStack_Tick");
static_assert(offsetof(GbxMenuStack_Tick, DeltaTime) == 0x000000, "Member 'GbxMenuStack_Tick::DeltaTime' has a wrong offset!");

// Function GbxUI.GbxMenuStack.GetCurrentInputDevice
// 0x0001 (0x0001 - 0x0000)
struct GbxMenuStack_GetCurrentInputDevice final
{
public:
	EGbxMenuInputDevice                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_GetCurrentInputDevice) == 0x000001, "Wrong alignment on GbxMenuStack_GetCurrentInputDevice");
static_assert(sizeof(GbxMenuStack_GetCurrentInputDevice) == 0x000001, "Wrong size on GbxMenuStack_GetCurrentInputDevice");
static_assert(offsetof(GbxMenuStack_GetCurrentInputDevice, ReturnValue) == 0x000000, "Member 'GbxMenuStack_GetCurrentInputDevice::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxMenuStack.Num
// 0x0004 (0x0004 - 0x0000)
struct GbxMenuStack_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxMenuStack_Num) == 0x000004, "Wrong alignment on GbxMenuStack_Num");
static_assert(sizeof(GbxMenuStack_Num) == 0x000004, "Wrong size on GbxMenuStack_Num");
static_assert(offsetof(GbxMenuStack_Num, ReturnValue) == 0x000000, "Member 'GbxMenuStack_Num::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxProgressBar.EnteredPercentRange
// 0x0014 (0x0014 - 0x0000)
struct GbxProgressBar_EnteredPercentRange final
{
public:
	float                                         RangeMin;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreasing;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecreasing;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProgressBar_EnteredPercentRange) == 0x000004, "Wrong alignment on GbxProgressBar_EnteredPercentRange");
static_assert(sizeof(GbxProgressBar_EnteredPercentRange) == 0x000014, "Wrong size on GbxProgressBar_EnteredPercentRange");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, RangeMin) == 0x000000, "Member 'GbxProgressBar_EnteredPercentRange::RangeMin' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, RangeMax) == 0x000004, "Member 'GbxProgressBar_EnteredPercentRange::RangeMax' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, OldValue) == 0x000008, "Member 'GbxProgressBar_EnteredPercentRange::OldValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, CurrentValue) == 0x00000C, "Member 'GbxProgressBar_EnteredPercentRange::CurrentValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, bIncreasing) == 0x000010, "Member 'GbxProgressBar_EnteredPercentRange::bIncreasing' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, bDecreasing) == 0x000011, "Member 'GbxProgressBar_EnteredPercentRange::bDecreasing' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_EnteredPercentRange, ReturnValue) == 0x000012, "Member 'GbxProgressBar_EnteredPercentRange::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxProgressBar.PassedPercentThreshold
// 0x0010 (0x0010 - 0x0000)
struct GbxProgressBar_PassedPercentThreshold final
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreasing;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecreasing;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxProgressBar_PassedPercentThreshold) == 0x000004, "Wrong alignment on GbxProgressBar_PassedPercentThreshold");
static_assert(sizeof(GbxProgressBar_PassedPercentThreshold) == 0x000010, "Wrong size on GbxProgressBar_PassedPercentThreshold");
static_assert(offsetof(GbxProgressBar_PassedPercentThreshold, Threshold) == 0x000000, "Member 'GbxProgressBar_PassedPercentThreshold::Threshold' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_PassedPercentThreshold, OldValue) == 0x000004, "Member 'GbxProgressBar_PassedPercentThreshold::OldValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_PassedPercentThreshold, CurrentValue) == 0x000008, "Member 'GbxProgressBar_PassedPercentThreshold::CurrentValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_PassedPercentThreshold, bIncreasing) == 0x00000C, "Member 'GbxProgressBar_PassedPercentThreshold::bIncreasing' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_PassedPercentThreshold, bDecreasing) == 0x00000D, "Member 'GbxProgressBar_PassedPercentThreshold::bDecreasing' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_PassedPercentThreshold, ReturnValue) == 0x00000E, "Member 'GbxProgressBar_PassedPercentThreshold::ReturnValue' has a wrong offset!");

// DelegateFunction GbxUI.GbxProgressBar.GbxProgressBarRangeEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature final
{
public:
	class FName                                   RangeName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature) == 0x000004, "Wrong alignment on GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature");
static_assert(sizeof(GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature) == 0x000008, "Wrong size on GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature");
static_assert(offsetof(GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature, RangeName) == 0x000000, "Member 'GbxProgressBar_GbxProgressBarRangeEvent__DelegateSignature::RangeName' has a wrong offset!");

// Function GbxUI.GbxProgressBar.HandleEnterPercentRange
// 0x0008 (0x0008 - 0x0000)
struct GbxProgressBar_HandleEnterPercentRange final
{
public:
	class FName                                   RangeName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_HandleEnterPercentRange) == 0x000004, "Wrong alignment on GbxProgressBar_HandleEnterPercentRange");
static_assert(sizeof(GbxProgressBar_HandleEnterPercentRange) == 0x000008, "Wrong size on GbxProgressBar_HandleEnterPercentRange");
static_assert(offsetof(GbxProgressBar_HandleEnterPercentRange, RangeName) == 0x000000, "Member 'GbxProgressBar_HandleEnterPercentRange::RangeName' has a wrong offset!");

// Function GbxUI.GbxProgressBar.HandlePercentChanged
// 0x0034 (0x0034 - 0x0000)
struct GbxProgressBar_HandlePercentChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInterpolating;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxProgressBarInterpolator            ActiveInterpolator;                                // 0x000C(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_HandlePercentChanged) == 0x000004, "Wrong alignment on GbxProgressBar_HandlePercentChanged");
static_assert(sizeof(GbxProgressBar_HandlePercentChanged) == 0x000034, "Wrong size on GbxProgressBar_HandlePercentChanged");
static_assert(offsetof(GbxProgressBar_HandlePercentChanged, OldValue) == 0x000000, "Member 'GbxProgressBar_HandlePercentChanged::OldValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_HandlePercentChanged, CurrentValue) == 0x000004, "Member 'GbxProgressBar_HandlePercentChanged::CurrentValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_HandlePercentChanged, bIsInterpolating) == 0x000008, "Member 'GbxProgressBar_HandlePercentChanged::bIsInterpolating' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_HandlePercentChanged, ActiveInterpolator) == 0x00000C, "Member 'GbxProgressBar_HandlePercentChanged::ActiveInterpolator' has a wrong offset!");

// Function GbxUI.GbxProgressBar.HandleShowDeltaEffect
// 0x0010 (0x0010 - 0x0000)
struct GbxProgressBar_HandleShowDeltaEffect final
{
public:
	class UWidget*                                Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_HandleShowDeltaEffect) == 0x000008, "Wrong alignment on GbxProgressBar_HandleShowDeltaEffect");
static_assert(sizeof(GbxProgressBar_HandleShowDeltaEffect) == 0x000010, "Wrong size on GbxProgressBar_HandleShowDeltaEffect");
static_assert(offsetof(GbxProgressBar_HandleShowDeltaEffect, Effect) == 0x000000, "Member 'GbxProgressBar_HandleShowDeltaEffect::Effect' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_HandleShowDeltaEffect, OldValue) == 0x000008, "Member 'GbxProgressBar_HandleShowDeltaEffect::OldValue' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_HandleShowDeltaEffect, CurrentValue) == 0x00000C, "Member 'GbxProgressBar_HandleShowDeltaEffect::CurrentValue' has a wrong offset!");

// Function GbxUI.GbxProgressBar.InterpolateToPercent
// 0x0004 (0x0004 - 0x0000)
struct GbxProgressBar_InterpolateToPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_InterpolateToPercent) == 0x000004, "Wrong alignment on GbxProgressBar_InterpolateToPercent");
static_assert(sizeof(GbxProgressBar_InterpolateToPercent) == 0x000004, "Wrong size on GbxProgressBar_InterpolateToPercent");
static_assert(offsetof(GbxProgressBar_InterpolateToPercent, InPercent) == 0x000000, "Member 'GbxProgressBar_InterpolateToPercent::InPercent' has a wrong offset!");

// Function GbxUI.GbxProgressBar.InterpolateToPercentWithInterpolator
// 0x002C (0x002C - 0x0000)
struct GbxProgressBar_InterpolateToPercentWithInterpolator final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxProgressBarInterpolator            Interpolator;                                      // 0x0004(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_InterpolateToPercentWithInterpolator) == 0x000004, "Wrong alignment on GbxProgressBar_InterpolateToPercentWithInterpolator");
static_assert(sizeof(GbxProgressBar_InterpolateToPercentWithInterpolator) == 0x00002C, "Wrong size on GbxProgressBar_InterpolateToPercentWithInterpolator");
static_assert(offsetof(GbxProgressBar_InterpolateToPercentWithInterpolator, InPercent) == 0x000000, "Member 'GbxProgressBar_InterpolateToPercentWithInterpolator::InPercent' has a wrong offset!");
static_assert(offsetof(GbxProgressBar_InterpolateToPercentWithInterpolator, Interpolator) == 0x000004, "Member 'GbxProgressBar_InterpolateToPercentWithInterpolator::Interpolator' has a wrong offset!");

// Function GbxUI.GbxProgressBar.SetCurrentValueText
// 0x0018 (0x0018 - 0x0000)
struct GbxProgressBar_SetCurrentValueText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_SetCurrentValueText) == 0x000008, "Wrong alignment on GbxProgressBar_SetCurrentValueText");
static_assert(sizeof(GbxProgressBar_SetCurrentValueText) == 0x000018, "Wrong size on GbxProgressBar_SetCurrentValueText");
static_assert(offsetof(GbxProgressBar_SetCurrentValueText, Text) == 0x000000, "Member 'GbxProgressBar_SetCurrentValueText::Text' has a wrong offset!");

// Function GbxUI.GbxProgressBar.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct GbxProgressBar_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on GbxProgressBar_SetFillColorAndOpacity");
static_assert(sizeof(GbxProgressBar_SetFillColorAndOpacity) == 0x000010, "Wrong size on GbxProgressBar_SetFillColorAndOpacity");
static_assert(offsetof(GbxProgressBar_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'GbxProgressBar_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function GbxUI.GbxProgressBar.SetMaxValueText
// 0x0018 (0x0018 - 0x0000)
struct GbxProgressBar_SetMaxValueText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_SetMaxValueText) == 0x000008, "Wrong alignment on GbxProgressBar_SetMaxValueText");
static_assert(sizeof(GbxProgressBar_SetMaxValueText) == 0x000018, "Wrong size on GbxProgressBar_SetMaxValueText");
static_assert(offsetof(GbxProgressBar_SetMaxValueText, Text) == 0x000000, "Member 'GbxProgressBar_SetMaxValueText::Text' has a wrong offset!");

// Function GbxUI.GbxProgressBar.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct GbxProgressBar_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_SetPercent) == 0x000004, "Wrong alignment on GbxProgressBar_SetPercent");
static_assert(sizeof(GbxProgressBar_SetPercent) == 0x000004, "Wrong size on GbxProgressBar_SetPercent");
static_assert(offsetof(GbxProgressBar_SetPercent, InPercent) == 0x000000, "Member 'GbxProgressBar_SetPercent::InPercent' has a wrong offset!");

// Function GbxUI.GbxProgressBar.SetShear
// 0x0004 (0x0004 - 0x0000)
struct GbxProgressBar_SetShear final
{
public:
	float                                         InShear;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_SetShear) == 0x000004, "Wrong alignment on GbxProgressBar_SetShear");
static_assert(sizeof(GbxProgressBar_SetShear) == 0x000004, "Wrong size on GbxProgressBar_SetShear");
static_assert(offsetof(GbxProgressBar_SetShear, InShear) == 0x000000, "Member 'GbxProgressBar_SetShear::InShear' has a wrong offset!");

// Function GbxUI.GbxProgressBar.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct GbxProgressBar_GetPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_GetPercent) == 0x000004, "Wrong alignment on GbxProgressBar_GetPercent");
static_assert(sizeof(GbxProgressBar_GetPercent) == 0x000004, "Wrong size on GbxProgressBar_GetPercent");
static_assert(offsetof(GbxProgressBar_GetPercent, ReturnValue) == 0x000000, "Member 'GbxProgressBar_GetPercent::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxProgressBar.GetShear
// 0x0004 (0x0004 - 0x0000)
struct GbxProgressBar_GetShear final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_GetShear) == 0x000004, "Wrong alignment on GbxProgressBar_GetShear");
static_assert(sizeof(GbxProgressBar_GetShear) == 0x000004, "Wrong size on GbxProgressBar_GetShear");
static_assert(offsetof(GbxProgressBar_GetShear, ReturnValue) == 0x000000, "Member 'GbxProgressBar_GetShear::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxProgressBar.IsInterpolating
// 0x0001 (0x0001 - 0x0000)
struct GbxProgressBar_IsInterpolating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxProgressBar_IsInterpolating) == 0x000001, "Wrong alignment on GbxProgressBar_IsInterpolating");
static_assert(sizeof(GbxProgressBar_IsInterpolating) == 0x000001, "Wrong size on GbxProgressBar_IsInterpolating");
static_assert(offsetof(GbxProgressBar_IsInterpolating, ReturnValue) == 0x000000, "Member 'GbxProgressBar_IsInterpolating::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxSpinner.SpinLeft
// 0x0038 (0x0038 - 0x0000)
struct GbxSpinner_SpinLeft final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxSpinner_SpinLeft) == 0x000008, "Wrong alignment on GbxSpinner_SpinLeft");
static_assert(sizeof(GbxSpinner_SpinLeft) == 0x000038, "Wrong size on GbxSpinner_SpinLeft");
static_assert(offsetof(GbxSpinner_SpinLeft, PressedButton) == 0x000000, "Member 'GbxSpinner_SpinLeft::PressedButton' has a wrong offset!");
static_assert(offsetof(GbxSpinner_SpinLeft, InputInfo) == 0x000008, "Member 'GbxSpinner_SpinLeft::InputInfo' has a wrong offset!");

// Function GbxUI.GbxSpinner.SpinRight
// 0x0038 (0x0038 - 0x0000)
struct GbxSpinner_SpinRight final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxSpinner_SpinRight) == 0x000008, "Wrong alignment on GbxSpinner_SpinRight");
static_assert(sizeof(GbxSpinner_SpinRight) == 0x000038, "Wrong size on GbxSpinner_SpinRight");
static_assert(offsetof(GbxSpinner_SpinRight, PressedButton) == 0x000000, "Member 'GbxSpinner_SpinRight::PressedButton' has a wrong offset!");
static_assert(offsetof(GbxSpinner_SpinRight, InputInfo) == 0x000008, "Member 'GbxSpinner_SpinRight::InputInfo' has a wrong offset!");

// Function GbxUI.GbxTextField.OnScrollBarPositionUpdated
// 0x0004 (0x0004 - 0x0000)
struct GbxTextField_OnScrollBarPositionUpdated final
{
public:
	float                                         SliderPercentage;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxTextField_OnScrollBarPositionUpdated) == 0x000004, "Wrong alignment on GbxTextField_OnScrollBarPositionUpdated");
static_assert(sizeof(GbxTextField_OnScrollBarPositionUpdated) == 0x000004, "Wrong size on GbxTextField_OnScrollBarPositionUpdated");
static_assert(offsetof(GbxTextField_OnScrollBarPositionUpdated, SliderPercentage) == 0x000000, "Member 'GbxTextField_OnScrollBarPositionUpdated::SliderPercentage' has a wrong offset!");

// Function GbxUI.GbxUILocalization.FKeyToGFxHTMLText
// 0x0040 (0x0040 - 0x0000)
struct GbxUILocalization_FKeyToGFxHTMLText final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxActionToTextType                          GlyphType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlyphHeight;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_FKeyToGFxHTMLText) == 0x000008, "Wrong alignment on GbxUILocalization_FKeyToGFxHTMLText");
static_assert(sizeof(GbxUILocalization_FKeyToGFxHTMLText) == 0x000040, "Wrong size on GbxUILocalization_FKeyToGFxHTMLText");
static_assert(offsetof(GbxUILocalization_FKeyToGFxHTMLText, Key) == 0x000000, "Member 'GbxUILocalization_FKeyToGFxHTMLText::Key' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_FKeyToGFxHTMLText, Pc) == 0x000018, "Member 'GbxUILocalization_FKeyToGFxHTMLText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_FKeyToGFxHTMLText, GlyphType) == 0x000020, "Member 'GbxUILocalization_FKeyToGFxHTMLText::GlyphType' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_FKeyToGFxHTMLText, GlyphHeight) == 0x000024, "Member 'GbxUILocalization_FKeyToGFxHTMLText::GlyphHeight' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_FKeyToGFxHTMLText, ReturnValue) == 0x000028, "Member 'GbxUILocalization_FKeyToGFxHTMLText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.InputActionToGFxHTMLText
// 0x0038 (0x0038 - 0x0000)
struct GbxUILocalization_InputActionToGFxHTMLText final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxActionToTextType                          GlyphType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlyphHeight;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VSpace;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_InputActionToGFxHTMLText) == 0x000008, "Wrong alignment on GbxUILocalization_InputActionToGFxHTMLText");
static_assert(sizeof(GbxUILocalization_InputActionToGFxHTMLText) == 0x000038, "Wrong size on GbxUILocalization_InputActionToGFxHTMLText");
static_assert(offsetof(GbxUILocalization_InputActionToGFxHTMLText, ActionName) == 0x000000, "Member 'GbxUILocalization_InputActionToGFxHTMLText::ActionName' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGFxHTMLText, Pc) == 0x000008, "Member 'GbxUILocalization_InputActionToGFxHTMLText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGFxHTMLText, GlyphType) == 0x000010, "Member 'GbxUILocalization_InputActionToGFxHTMLText::GlyphType' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGFxHTMLText, GlyphHeight) == 0x000014, "Member 'GbxUILocalization_InputActionToGFxHTMLText::GlyphHeight' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGFxHTMLText, VSpace) == 0x000018, "Member 'GbxUILocalization_InputActionToGFxHTMLText::VSpace' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGFxHTMLText, ReturnValue) == 0x000020, "Member 'GbxUILocalization_InputActionToGFxHTMLText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.InputActionToGlyph
// 0x00A0 (0x00A0 - 0x0000)
struct GbxUILocalization_InputActionToGlyph final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxActionToTextType                          GlyphType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0018(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_InputActionToGlyph) == 0x000008, "Wrong alignment on GbxUILocalization_InputActionToGlyph");
static_assert(sizeof(GbxUILocalization_InputActionToGlyph) == 0x0000A0, "Wrong size on GbxUILocalization_InputActionToGlyph");
static_assert(offsetof(GbxUILocalization_InputActionToGlyph, ActionName) == 0x000000, "Member 'GbxUILocalization_InputActionToGlyph::ActionName' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGlyph, Pc) == 0x000008, "Member 'GbxUILocalization_InputActionToGlyph::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGlyph, GlyphType) == 0x000010, "Member 'GbxUILocalization_InputActionToGlyph::GlyphType' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToGlyph, ReturnValue) == 0x000018, "Member 'GbxUILocalization_InputActionToGlyph::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.InputActionToRichText
// 0x0038 (0x0038 - 0x0000)
struct GbxUILocalization_InputActionToRichText final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxActionToTextType                          GlyphType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              GlyphSize;                                         // 0x0014(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_InputActionToRichText) == 0x000008, "Wrong alignment on GbxUILocalization_InputActionToRichText");
static_assert(sizeof(GbxUILocalization_InputActionToRichText) == 0x000038, "Wrong size on GbxUILocalization_InputActionToRichText");
static_assert(offsetof(GbxUILocalization_InputActionToRichText, ActionName) == 0x000000, "Member 'GbxUILocalization_InputActionToRichText::ActionName' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToRichText, Pc) == 0x000008, "Member 'GbxUILocalization_InputActionToRichText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToRichText, GlyphType) == 0x000010, "Member 'GbxUILocalization_InputActionToRichText::GlyphType' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToRichText, GlyphSize) == 0x000014, "Member 'GbxUILocalization_InputActionToRichText::GlyphSize' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToRichText, ReturnValue) == 0x000020, "Member 'GbxUILocalization_InputActionToRichText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.InputActionToText
// 0x0030 (0x0030 - 0x0000)
struct GbxUILocalization_InputActionToText final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxActionToTextType                          GlyphType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_InputActionToText) == 0x000008, "Wrong alignment on GbxUILocalization_InputActionToText");
static_assert(sizeof(GbxUILocalization_InputActionToText) == 0x000030, "Wrong size on GbxUILocalization_InputActionToText");
static_assert(offsetof(GbxUILocalization_InputActionToText, ActionName) == 0x000000, "Member 'GbxUILocalization_InputActionToText::ActionName' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToText, Pc) == 0x000008, "Member 'GbxUILocalization_InputActionToText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToText, GlyphType) == 0x000010, "Member 'GbxUILocalization_InputActionToText::GlyphType' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_InputActionToText, ReturnValue) == 0x000018, "Member 'GbxUILocalization_InputActionToText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.IsInputActionGlyphAvailable
// 0x0018 (0x0018 - 0x0000)
struct GbxUILocalization_IsInputActionGlyphAvailable final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxActionToTextType                          GlyphType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxUILocalization_IsInputActionGlyphAvailable) == 0x000008, "Wrong alignment on GbxUILocalization_IsInputActionGlyphAvailable");
static_assert(sizeof(GbxUILocalization_IsInputActionGlyphAvailable) == 0x000018, "Wrong size on GbxUILocalization_IsInputActionGlyphAvailable");
static_assert(offsetof(GbxUILocalization_IsInputActionGlyphAvailable, ActionName) == 0x000000, "Member 'GbxUILocalization_IsInputActionGlyphAvailable::ActionName' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_IsInputActionGlyphAvailable, Pc) == 0x000008, "Member 'GbxUILocalization_IsInputActionGlyphAvailable::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_IsInputActionGlyphAvailable, GlyphType) == 0x000010, "Member 'GbxUILocalization_IsInputActionGlyphAvailable::GlyphType' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_IsInputActionGlyphAvailable, ReturnValue) == 0x000011, "Member 'GbxUILocalization_IsInputActionGlyphAvailable::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.IsPlatformGlyphAvailable
// 0x0018 (0x0018 - 0x0000)
struct GbxUILocalization_IsPlatformGlyphAvailable final
{
public:
	class FName                                   Platform;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxUILocalization_IsPlatformGlyphAvailable) == 0x000008, "Wrong alignment on GbxUILocalization_IsPlatformGlyphAvailable");
static_assert(sizeof(GbxUILocalization_IsPlatformGlyphAvailable) == 0x000018, "Wrong size on GbxUILocalization_IsPlatformGlyphAvailable");
static_assert(offsetof(GbxUILocalization_IsPlatformGlyphAvailable, Platform) == 0x000000, "Member 'GbxUILocalization_IsPlatformGlyphAvailable::Platform' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_IsPlatformGlyphAvailable, Pc) == 0x000008, "Member 'GbxUILocalization_IsPlatformGlyphAvailable::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_IsPlatformGlyphAvailable, ReturnValue) == 0x000010, "Member 'GbxUILocalization_IsPlatformGlyphAvailable::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.PlatformToGFxHTMLText
// 0x0030 (0x0030 - 0x0000)
struct GbxUILocalization_PlatformToGFxHTMLText final
{
public:
	class FName                                   Platform;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlyphHeight;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VSpace;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_PlatformToGFxHTMLText) == 0x000008, "Wrong alignment on GbxUILocalization_PlatformToGFxHTMLText");
static_assert(sizeof(GbxUILocalization_PlatformToGFxHTMLText) == 0x000030, "Wrong size on GbxUILocalization_PlatformToGFxHTMLText");
static_assert(offsetof(GbxUILocalization_PlatformToGFxHTMLText, Platform) == 0x000000, "Member 'GbxUILocalization_PlatformToGFxHTMLText::Platform' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToGFxHTMLText, Pc) == 0x000008, "Member 'GbxUILocalization_PlatformToGFxHTMLText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToGFxHTMLText, GlyphHeight) == 0x000010, "Member 'GbxUILocalization_PlatformToGFxHTMLText::GlyphHeight' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToGFxHTMLText, VSpace) == 0x000014, "Member 'GbxUILocalization_PlatformToGFxHTMLText::VSpace' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToGFxHTMLText, ReturnValue) == 0x000018, "Member 'GbxUILocalization_PlatformToGFxHTMLText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.PlatformToGlyph
// 0x0098 (0x0098 - 0x0000)
struct GbxUILocalization_PlatformToGlyph final
{
public:
	class FName                                   Platform;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_PlatformToGlyph) == 0x000008, "Wrong alignment on GbxUILocalization_PlatformToGlyph");
static_assert(sizeof(GbxUILocalization_PlatformToGlyph) == 0x000098, "Wrong size on GbxUILocalization_PlatformToGlyph");
static_assert(offsetof(GbxUILocalization_PlatformToGlyph, Platform) == 0x000000, "Member 'GbxUILocalization_PlatformToGlyph::Platform' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToGlyph, Pc) == 0x000008, "Member 'GbxUILocalization_PlatformToGlyph::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToGlyph, ReturnValue) == 0x000010, "Member 'GbxUILocalization_PlatformToGlyph::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.PlatformToRichText
// 0x0030 (0x0030 - 0x0000)
struct GbxUILocalization_PlatformToRichText final
{
public:
	class FName                                   Platform;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GlyphSize;                                         // 0x0010(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_PlatformToRichText) == 0x000008, "Wrong alignment on GbxUILocalization_PlatformToRichText");
static_assert(sizeof(GbxUILocalization_PlatformToRichText) == 0x000030, "Wrong size on GbxUILocalization_PlatformToRichText");
static_assert(offsetof(GbxUILocalization_PlatformToRichText, Platform) == 0x000000, "Member 'GbxUILocalization_PlatformToRichText::Platform' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToRichText, Pc) == 0x000008, "Member 'GbxUILocalization_PlatformToRichText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToRichText, GlyphSize) == 0x000010, "Member 'GbxUILocalization_PlatformToRichText::GlyphSize' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToRichText, ReturnValue) == 0x000018, "Member 'GbxUILocalization_PlatformToRichText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUILocalization.PlatformToText
// 0x0028 (0x0028 - 0x0000)
struct GbxUILocalization_PlatformToText final
{
public:
	class FName                                   Platform;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGbxPlayerController*                   Pc;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUILocalization_PlatformToText) == 0x000008, "Wrong alignment on GbxUILocalization_PlatformToText");
static_assert(sizeof(GbxUILocalization_PlatformToText) == 0x000028, "Wrong size on GbxUILocalization_PlatformToText");
static_assert(offsetof(GbxUILocalization_PlatformToText, Platform) == 0x000000, "Member 'GbxUILocalization_PlatformToText::Platform' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToText, Pc) == 0x000008, "Member 'GbxUILocalization_PlatformToText::Pc' has a wrong offset!");
static_assert(offsetof(GbxUILocalization_PlatformToText, ReturnValue) == 0x000010, "Member 'GbxUILocalization_PlatformToText::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxUISpinnerWidget.MoveToNumber
// 0x0008 (0x0008 - 0x0000)
struct GbxUISpinnerWidget_MoveToNumber final
{
public:
	uint8                                         NewNumber;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxSpinnerWidgetGoToMethod                   GoToMethod;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxUISpinnerWidget_MoveToNumber) == 0x000004, "Wrong alignment on GbxUISpinnerWidget_MoveToNumber");
static_assert(sizeof(GbxUISpinnerWidget_MoveToNumber) == 0x000008, "Wrong size on GbxUISpinnerWidget_MoveToNumber");
static_assert(offsetof(GbxUISpinnerWidget_MoveToNumber, NewNumber) == 0x000000, "Member 'GbxUISpinnerWidget_MoveToNumber::NewNumber' has a wrong offset!");
static_assert(offsetof(GbxUISpinnerWidget_MoveToNumber, GoToMethod) == 0x000001, "Member 'GbxUISpinnerWidget_MoveToNumber::GoToMethod' has a wrong offset!");
static_assert(offsetof(GbxUISpinnerWidget_MoveToNumber, ReturnValue) == 0x000004, "Member 'GbxUISpinnerWidget_MoveToNumber::ReturnValue' has a wrong offset!");

// Function GbxUI.GbxWidgetComponent.SetDistanceAlphaBorder
// 0x0008 (0x0008 - 0x0000)
struct GbxWidgetComponent_SetDistanceAlphaBorder final
{
public:
	class UBorder*                                NewDistanceAlphaBorder;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxWidgetComponent_SetDistanceAlphaBorder) == 0x000008, "Wrong alignment on GbxWidgetComponent_SetDistanceAlphaBorder");
static_assert(sizeof(GbxWidgetComponent_SetDistanceAlphaBorder) == 0x000008, "Wrong size on GbxWidgetComponent_SetDistanceAlphaBorder");
static_assert(offsetof(GbxWidgetComponent_SetDistanceAlphaBorder, NewDistanceAlphaBorder) == 0x000000, "Member 'GbxWidgetComponent_SetDistanceAlphaBorder::NewDistanceAlphaBorder' has a wrong offset!");

// Function GbxUI.GbxWidgetComponent.SetDistanceAlphaCurve
// 0x0008 (0x0008 - 0x0000)
struct GbxWidgetComponent_SetDistanceAlphaCurve final
{
public:
	class UCurveFloat*                            NewDistanceAlphaCurve;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxWidgetComponent_SetDistanceAlphaCurve) == 0x000008, "Wrong alignment on GbxWidgetComponent_SetDistanceAlphaCurve");
static_assert(sizeof(GbxWidgetComponent_SetDistanceAlphaCurve) == 0x000008, "Wrong size on GbxWidgetComponent_SetDistanceAlphaCurve");
static_assert(offsetof(GbxWidgetComponent_SetDistanceAlphaCurve, NewDistanceAlphaCurve) == 0x000000, "Member 'GbxWidgetComponent_SetDistanceAlphaCurve::NewDistanceAlphaCurve' has a wrong offset!");

// Function GbxUI.GbxWidgetComponent.SetDistanceScaleCurve
// 0x0008 (0x0008 - 0x0000)
struct GbxWidgetComponent_SetDistanceScaleCurve final
{
public:
	class UCurveFloat*                            NewDistanceScaleCurve;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxWidgetComponent_SetDistanceScaleCurve) == 0x000008, "Wrong alignment on GbxWidgetComponent_SetDistanceScaleCurve");
static_assert(sizeof(GbxWidgetComponent_SetDistanceScaleCurve) == 0x000008, "Wrong size on GbxWidgetComponent_SetDistanceScaleCurve");
static_assert(offsetof(GbxWidgetComponent_SetDistanceScaleCurve, NewDistanceScaleCurve) == 0x000000, "Member 'GbxWidgetComponent_SetDistanceScaleCurve::NewDistanceScaleCurve' has a wrong offset!");

// Function GbxUI.GbxWidgetComponent.Setup
// 0x0028 (0x0028 - 0x0000)
struct GbxWidgetComponent_Setup final
{
public:
	TSubclassOf<class UUserWidget>                NewWidgetClass;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AGbxPlayerController*             NewTrackedPlayer;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ParentComponent;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetSpace                                  WidgetSpace;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewLayerZOrder;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfile;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxWidgetComponent_Setup) == 0x000008, "Wrong alignment on GbxWidgetComponent_Setup");
static_assert(sizeof(GbxWidgetComponent_Setup) == 0x000028, "Wrong size on GbxWidgetComponent_Setup");
static_assert(offsetof(GbxWidgetComponent_Setup, NewWidgetClass) == 0x000000, "Member 'GbxWidgetComponent_Setup::NewWidgetClass' has a wrong offset!");
static_assert(offsetof(GbxWidgetComponent_Setup, NewTrackedPlayer) == 0x000008, "Member 'GbxWidgetComponent_Setup::NewTrackedPlayer' has a wrong offset!");
static_assert(offsetof(GbxWidgetComponent_Setup, ParentComponent) == 0x000010, "Member 'GbxWidgetComponent_Setup::ParentComponent' has a wrong offset!");
static_assert(offsetof(GbxWidgetComponent_Setup, WidgetSpace) == 0x000018, "Member 'GbxWidgetComponent_Setup::WidgetSpace' has a wrong offset!");
static_assert(offsetof(GbxWidgetComponent_Setup, NewLayerZOrder) == 0x00001C, "Member 'GbxWidgetComponent_Setup::NewLayerZOrder' has a wrong offset!");
static_assert(offsetof(GbxWidgetComponent_Setup, CollisionProfile) == 0x000020, "Member 'GbxWidgetComponent_Setup::CollisionProfile' has a wrong offset!");

// Function GbxUI.GbxWorldSpaceProxyWidget.GetWorldLocation
// 0x000C (0x000C - 0x0000)
struct GbxWorldSpaceProxyWidget_GetWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxWorldSpaceProxyWidget_GetWorldLocation) == 0x000004, "Wrong alignment on GbxWorldSpaceProxyWidget_GetWorldLocation");
static_assert(sizeof(GbxWorldSpaceProxyWidget_GetWorldLocation) == 0x00000C, "Wrong size on GbxWorldSpaceProxyWidget_GetWorldLocation");
static_assert(offsetof(GbxWorldSpaceProxyWidget_GetWorldLocation, ReturnValue) == 0x000000, "Member 'GbxWorldSpaceProxyWidget_GetWorldLocation::ReturnValue' has a wrong offset!");

// Function GbxUI.InWorldDamageNumber.ImpulseAnimationCompleted
// 0x0008 (0x0008 - 0x0000)
struct InWorldDamageNumber_ImpulseAnimationCompleted final
{
public:
	class UUserWidget*                            AssociatedWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InWorldDamageNumber_ImpulseAnimationCompleted) == 0x000008, "Wrong alignment on InWorldDamageNumber_ImpulseAnimationCompleted");
static_assert(sizeof(InWorldDamageNumber_ImpulseAnimationCompleted) == 0x000008, "Wrong size on InWorldDamageNumber_ImpulseAnimationCompleted");
static_assert(offsetof(InWorldDamageNumber_ImpulseAnimationCompleted, AssociatedWidget) == 0x000000, "Member 'InWorldDamageNumber_ImpulseAnimationCompleted::AssociatedWidget' has a wrong offset!");

}

