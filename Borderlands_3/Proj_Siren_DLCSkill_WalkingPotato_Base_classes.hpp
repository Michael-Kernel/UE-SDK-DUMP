#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_Siren_DLCSkill_WalkingPotato_Base

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "ESirenDLCProjectileState_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_Siren_DLCSkill_WalkingPotato_Base.Proj_Siren_DLCSkill_WalkingPotato_Base_C
// 0x0290 (0x09C8 - 0x0738)
class AProj_Siren_DLCSkill_WalkingPotato_Base_C : public AOakProjectile_PhaseTrance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0738(0x0008)(Transient, DuplicateTransient)
	class UWwiseAudioComponent*                   WwiseAudio;                                        // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OrbRadius;                                         // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OrbMain;                                           // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OrbSpawn;                                          // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              SwitchRadius;                                      // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              SwitchMain;                                        // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OrbImpact;                                         // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWalkingProjectileMovementComponent*    WalkingProjectileMovement;                         // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocketComponent*                       MeleeTargetSocket;                                 // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakTriggerComponent*                   HitEnemyTrigger;                                   // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakDamageComponent*                    OakDamage;                                         // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetableComponent*                   Targetable;                                        // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileHomingComponent*             ProjectileHoming;                                  // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EPhaseTranceElementalType                     OrbElement;                                        // 0x07B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	ESirenDLCProjectileState                      OrbState;                                          // 0x07B1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B2[0x6];                                      // 0x07B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   SirenDLCProjectile_SetOrbState;                    // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FEnvQueryParams                        EQSFindTarget;                                     // 0x07C8(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FEnvQueryParams                        EQSFindLocation;                                   // 0x0880(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         ReturnMaxSpeed;                                    // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SendMaxSpeed;                                      // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DamageAreaData;                                    // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ProjectileCount;                                   // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_94C[0x4];                                      // 0x094C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UExplosionData*                         ImpactEnemyExplosionData;                          // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImpactData*                            ImpactEnemyImpactData;                             // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeNextTarget;                               // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_961[0x3];                                      // 0x0961(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentDamage;                                     // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableValueHandle                  DmgScalar;                                         // 0x0968(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableValueHandle                  DmgBonusScalar;                                    // 0x0980(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         HitCount;                                          // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99C[0x4];                                      // 0x099C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableValueHandle                  MaxMeleeHits;                                      // 0x09A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          SendOnSpawn;                                       // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableMainEmitter;                                 // 0x09B9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_9BA[0x6];                                      // 0x09BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MyHomingTarget;                                    // 0x09C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void SirenDLCProjectile_SetOrbState__DelegateSignature(ESirenDLCProjectileState NewState);
	void ExecuteUbergraph_Proj_Siren_DLCSkill_WalkingPotato_Base(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RemoveHomingTargetBinds(class AActor* HomingTarget);
	void HomingTargetDied(class AActor* DamageReceiver, class AActor* DamageCauser);
	void SetHomingTargetBinds(class AActor* HomingTarget);
	void BndEvt__ProjectileHoming_K2Node_ComponentBoundEvent_0_ProjectileHomingComponentEvent__DelegateSignature_Proj_Mayhem2_ItFollows();
	void RemoveSpawnEmitter();
	void FinishedSpawningOrb();
	void BndEvt__WalkingProjectileMovement_K2Node_ComponentBoundEvent_3_OnWalkingProjectileHitUnwalkableSurface__DelegateSignature_Proj_Siren_DLCSkill_WalkingPotato_Base(const struct FHitResult& ImpactResult);
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_2_TakeAnyPipelineDamageDelegate__DelegateSignature_Proj_Mayhem2_ItFollows(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details);
	void ReceiveDestroyed();
	void OnOrbStateSpawning();
	void DealExplodeDamage();
	void OnExplode();
	void OnPhasetranceEnded(class UOakActionAbility* ActionAbility);
	void BndEvt__OakTrigger_K2Node_ComponentBoundEvent_1_OakTouchedTriggerDelegate__DelegateSignature_Proj_Siren_DLCSkill_Potato(class AActor* TouchingActor, bool bIsPlayer, class UActorComponent* ComponentTouched);
	void SetOrbMovement(class AActor* New_Homing_Target, const struct FVector& New_Homing_Location, float ReachDistance);
	void SetOrbState(ESirenDLCProjectileState NewState);
	void RequestRecallOrb();
	void SirenDLCProjectile_SetOrbState_Event(ESirenDLCProjectileState NewState);
	void UserConstructionScript();
	void OnRep_OrbElement();
	void OnRep_OrbState();
	void OnOrbStateIdle();
	void OnOrbStateSending();
	void OnOrbStateReturning();
	void OnOrbStateDespawning();
	void ToggleDamageArea(bool Enable);
	void GetOrbAreaDamageType(class UClass** Res);
	void DamageScalar(float* Res);
	void SetImpactExplosionData(bool* Res);
	void OrbDamageRadius(float* Res);
	void StartFistFX();
	void StopFistFX();
	void UpdateCurrentDamage(float* Res);
	void StopActionSkillOnMaxHits(bool* Res);
	void IncreaseHitCount();
	void ReachedMaxHitCount(bool* Res);
	void OnOrbDetaching();
	void OnRep_EnableMainEmitter();
	void OnRep_MyHomingTarget();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_Siren_DLCSkill_WalkingPotato_Base_C">();
	}
	static class AProj_Siren_DLCSkill_WalkingPotato_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_Siren_DLCSkill_WalkingPotato_Base_C>();
	}
};
static_assert(alignof(AProj_Siren_DLCSkill_WalkingPotato_Base_C) == 0x000008, "Wrong alignment on AProj_Siren_DLCSkill_WalkingPotato_Base_C");
static_assert(sizeof(AProj_Siren_DLCSkill_WalkingPotato_Base_C) == 0x0009C8, "Wrong size on AProj_Siren_DLCSkill_WalkingPotato_Base_C");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, UberGraphFrame) == 0x000738, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, WwiseAudio) == 0x000740, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::WwiseAudio' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OrbRadius) == 0x000748, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OrbRadius' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OrbMain) == 0x000750, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OrbMain' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OrbSpawn) == 0x000758, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OrbSpawn' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, SwitchRadius) == 0x000760, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::SwitchRadius' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, SwitchMain) == 0x000768, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::SwitchMain' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OrbImpact) == 0x000770, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OrbImpact' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, WalkingProjectileMovement) == 0x000778, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::WalkingProjectileMovement' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, MeleeTargetSocket) == 0x000780, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::MeleeTargetSocket' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, HitEnemyTrigger) == 0x000788, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::HitEnemyTrigger' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OakDamage) == 0x000790, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OakDamage' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, Targetable) == 0x000798, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::Targetable' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, ProjectileHoming) == 0x0007A0, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::ProjectileHoming' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, Sphere) == 0x0007A8, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::Sphere' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OrbElement) == 0x0007B0, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OrbElement' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, OrbState) == 0x0007B1, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::OrbState' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, SirenDLCProjectile_SetOrbState) == 0x0007B8, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::SirenDLCProjectile_SetOrbState' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, EQSFindTarget) == 0x0007C8, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::EQSFindTarget' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, EQSFindLocation) == 0x000880, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::EQSFindLocation' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, ReturnMaxSpeed) == 0x000938, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::ReturnMaxSpeed' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, SendMaxSpeed) == 0x00093C, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::SendMaxSpeed' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, DamageAreaData) == 0x000940, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::DamageAreaData' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, ProjectileCount) == 0x000948, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::ProjectileCount' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, ImpactEnemyExplosionData) == 0x000950, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::ImpactEnemyExplosionData' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, ImpactEnemyImpactData) == 0x000958, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::ImpactEnemyImpactData' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, RandomizeNextTarget) == 0x000960, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::RandomizeNextTarget' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, CurrentDamage) == 0x000964, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::CurrentDamage' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, DmgScalar) == 0x000968, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::DmgScalar' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, DmgBonusScalar) == 0x000980, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::DmgBonusScalar' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, HitCount) == 0x000998, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::HitCount' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, MaxMeleeHits) == 0x0009A0, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::MaxMeleeHits' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, SendOnSpawn) == 0x0009B8, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::SendOnSpawn' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, EnableMainEmitter) == 0x0009B9, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::EnableMainEmitter' has a wrong offset!");
static_assert(offsetof(AProj_Siren_DLCSkill_WalkingPotato_Base_C, MyHomingTarget) == 0x0009C0, "Member 'AProj_Siren_DLCSkill_WalkingPotato_Base_C::MyHomingTarget' has a wrong offset!");

}

