#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_SM_TED_DarkArmy

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ability_SM_TED_DarkArmy.Ability_SM_TED_DarkArmy_C
// 0x0050 (0x0148 - 0x00F8)
class UAbility_SM_TED_DarkArmy_C final : public UOakAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F8(0x0008)(Transient, DuplicateTransient)
	class UWeaponFireProjectileComponent*         MyFireComponent;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_BinaryOperator; // 0x0108(0x0028)()
	class ABPWeap_SM_TED_C*                       BPWeap;                                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADroneProj_TED_DarkArmy_C*>      DroneArray;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Ability_SM_TED_DarkArmy(int32 EntryPoint);
	void OnActivated();
	void OnPaused();
	void OnUnregistered();
	void OnDeactivated();
	void ReloadStartedDelegate(class AWeapon* EventWeapon, bool bCompleted);
	void OnRegistered();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ability_SM_TED_DarkArmy_C">();
	}
	static class UAbility_SM_TED_DarkArmy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_SM_TED_DarkArmy_C>();
	}
};
static_assert(alignof(UAbility_SM_TED_DarkArmy_C) == 0x000008, "Wrong alignment on UAbility_SM_TED_DarkArmy_C");
static_assert(sizeof(UAbility_SM_TED_DarkArmy_C) == 0x000148, "Wrong size on UAbility_SM_TED_DarkArmy_C");
static_assert(offsetof(UAbility_SM_TED_DarkArmy_C, UberGraphFrame) == 0x0000F8, "Member 'UAbility_SM_TED_DarkArmy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAbility_SM_TED_DarkArmy_C, MyFireComponent) == 0x000100, "Member 'UAbility_SM_TED_DarkArmy_C::MyFireComponent' has a wrong offset!");
static_assert(offsetof(UAbility_SM_TED_DarkArmy_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_BinaryOperator) == 0x000108, "Member 'UAbility_SM_TED_DarkArmy_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_BinaryOperator' has a wrong offset!");
static_assert(offsetof(UAbility_SM_TED_DarkArmy_C, BPWeap) == 0x000130, "Member 'UAbility_SM_TED_DarkArmy_C::BPWeap' has a wrong offset!");
static_assert(offsetof(UAbility_SM_TED_DarkArmy_C, DroneArray) == 0x000138, "Member 'UAbility_SM_TED_DarkArmy_C::DroneArray' has a wrong offset!");

}

