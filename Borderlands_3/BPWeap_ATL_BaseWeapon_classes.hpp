#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_ATL_BaseWeapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPWeap_BaseWeapon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C
// 0x0098 (0x0A68 - 0x09D0)
class ABPWeap_ATL_BaseWeapon_C : public ABPWeap_BaseWeapon_C
{
public:
	uint8                                         Pad_9CC[0x4];                                      // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BPWeap_ATL_BaseWeapon_C;            // 0x09D0(0x0008)(Transient, DuplicateTransient)
	TArray<class AActor*>                         HomingTargets;                                     // 0x09D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AProj_Weapon_BaseProjectile_C*>  ActiveTrackers;                                    // 0x09E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         TrackerLifetime;                                   // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasFiredRecently;                                  // 0x09FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTargetIndex;                                // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColor;                                         // 0x0A04(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor;                                    // 0x0A14(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MarkerBaseColor;                                   // 0x0A24(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MarkerHighlightColor;                              // 0x0A34(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HomingColorBase;                                   // 0x0A44(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HomingColorHighlight;                              // 0x0A54(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPWeap_ATL_BaseWeapon(int32 EntryPoint);
	void Weapon_NotifyPutDown(class AWeapon* EventWeapon);
	void ReEvaluateEmissive();
	void SetEmissiveData(const struct FLinearColor& BaseColor_0, const struct FLinearColor& HighlightColor_0, const struct FLinearColor& MarkerBaseColor_0, const struct FLinearColor& MarkerHighlightColor_0, const struct FLinearColor& HomingOverrideBase, const struct FLinearColor& NewParamHomingOverrideHighlight);
	void NotifySwitchedMode_Event();
	void Initialize_Elemental_Emissive();
	void RemoveHomingTarget(class AActor* HomingTarget);
	void AddHomingTarget(class AActor* HomingTarget);
	void InitBaseGlow();
	void InitMarkerGlow();
	void InitHoming();
	void Notify_ReloadStarted(bool bAutoReload);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWeap_ATL_BaseWeapon_C">();
	}
	static class ABPWeap_ATL_BaseWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPWeap_ATL_BaseWeapon_C>();
	}
};
static_assert(alignof(ABPWeap_ATL_BaseWeapon_C) == 0x000008, "Wrong alignment on ABPWeap_ATL_BaseWeapon_C");
static_assert(sizeof(ABPWeap_ATL_BaseWeapon_C) == 0x000A68, "Wrong size on ABPWeap_ATL_BaseWeapon_C");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, UberGraphFrame_BPWeap_ATL_BaseWeapon_C) == 0x0009D0, "Member 'ABPWeap_ATL_BaseWeapon_C::UberGraphFrame_BPWeap_ATL_BaseWeapon_C' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, HomingTargets) == 0x0009D8, "Member 'ABPWeap_ATL_BaseWeapon_C::HomingTargets' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, ActiveTrackers) == 0x0009E8, "Member 'ABPWeap_ATL_BaseWeapon_C::ActiveTrackers' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, TrackerLifetime) == 0x0009F8, "Member 'ABPWeap_ATL_BaseWeapon_C::TrackerLifetime' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, HasFiredRecently) == 0x0009FC, "Member 'ABPWeap_ATL_BaseWeapon_C::HasFiredRecently' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, CurrentTargetIndex) == 0x000A00, "Member 'ABPWeap_ATL_BaseWeapon_C::CurrentTargetIndex' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, BaseColor) == 0x000A04, "Member 'ABPWeap_ATL_BaseWeapon_C::BaseColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, HighlightColor) == 0x000A14, "Member 'ABPWeap_ATL_BaseWeapon_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, MarkerBaseColor) == 0x000A24, "Member 'ABPWeap_ATL_BaseWeapon_C::MarkerBaseColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, MarkerHighlightColor) == 0x000A34, "Member 'ABPWeap_ATL_BaseWeapon_C::MarkerHighlightColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, HomingColorBase) == 0x000A44, "Member 'ABPWeap_ATL_BaseWeapon_C::HomingColorBase' has a wrong offset!");
static_assert(offsetof(ABPWeap_ATL_BaseWeapon_C, HomingColorHighlight) == 0x000A54, "Member 'ABPWeap_ATL_BaseWeapon_C::HomingColorHighlight' has a wrong offset!");

}

