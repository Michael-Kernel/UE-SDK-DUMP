#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IO_Combat_PipeValve

#include "Basic.hpp"

#include "Enum_IO_ExplodingPipe_DestroyedState_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_Switch_State_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IO_Combat_PipeValve.IO_Combat_PipeValve_C
// 0x0128 (0x0678 - 0x0550)
class AIO_Combat_PipeValve_C : public AInteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BlackFog;                                          // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        PreviewDecal;                                      // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ElementalOverlap;                                  // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UElementalInteractionComponent*         ElementalInteraction;                              // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetableComponent*                   Targetable;                                        // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakDamageComponent*                    OakDamage;                                         // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          NavPaintCollision;                                 // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_Waterspray;                                     // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pipe;                                              // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PipeValve;                                         // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URegionBalanceStateComponent*           RegionBalanceState;                                // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxNavMeshPainterComponent*            GbxNavMeshPainter;                                 // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_PreviewSpray;                                   // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DurationOfLiquidSpray;                             // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewSpray_;                                     // 0x05CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CD[0x3];                                      // 0x05CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SprayCollisionTimer;                               // 0x05D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          SpawnPuddle_;                                      // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DecalPuddle;                                       // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5DA[0x2];                                      // 0x05DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PuddleScale;                                       // 0x05DC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGasPipe_;                                        // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E9[0x3];                                      // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceBetweenPipeAndSpawnedPuddle;            // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprayVelocity;                                     // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityOverride;                                   // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxScale;                                          // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinScale;                                          // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxChildActorComponent*                Puddle;                                            // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartDestroyed_;                                   // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IO_Switch_Parent_V1_C*              My_Switch;                                         // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   On_PipeDestroyed;                                  // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_PipeFlow_On;                                    // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   On_PipeFlow_Off;                                   // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UDA_IO_ExplodingPipe_C*                 DA_ExplodingPipe;                                  // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AElementalPuddle*                       SpawnedPuddle;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPreviewPuddle;                               // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LevelActorsToIgnore;                               // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                         TimeItTookForSprayTraceToCollide;                  // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceChannelArray;                                 // 0x0674(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetPipeFlowState(bool* HasFlow);
	void GetPipeDestroyedState(bool* Destroyed);
	void SprayTrace(float ProjectileRadius, EObjectTypeQuery ObjectTypeToTestAgainst, ECollisionChannel CollissionTraceChannel, class AActor** OutHitActor, struct FVector* OutHitLocation, struct FVector* OutHitNormal);
	void CheckForSprayDamage();
	void SetupDestroyedPipes();
	void SpawnAPuddle();
	void TurnOnFlowFeedback();
	void TurnOffFlowFeedback();
	void TurnFlowOff();
	void TurnFlowOn();
	void CheckChangeFlowState();
	void InitialSetup();
	void SetUpPipeValveMaterialParameters(class UStaticMeshComponent* StaticMeshIn);
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void OnEnabled();
	void OnLStateUnlocked();
	void SwitchIsOn(class AActor* LastActorToUseSwitch);
	void SwitchIsOff(class AActor* LastActorToUseSwitch);
	void OnEnabling();
	void OnLStateLocked();
	void SetPipeState(Enum_IO_ExplodingPipe_DestroyedState PipeState);
	void DestroyPipe();
	void SetPipeFlowState(bool HasFlow);
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve(class UDamageComponent* DamageReceiver, class UDamageCauserComponent* DamageCauser);
	void AttemptToSpawnPudle();
	void ExecuteUbergraph_IO_Combat_PipeValve(int32 EntryPoint);
	void On_PipeFlow_Off__DelegateSignature();
	void On_PipeFlow_On__DelegateSignature();
	void On_PipeDestroyed__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IO_Combat_PipeValve_C">();
	}
	static class AIO_Combat_PipeValve_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIO_Combat_PipeValve_C>();
	}
};
static_assert(alignof(AIO_Combat_PipeValve_C) == 0x000008, "Wrong alignment on AIO_Combat_PipeValve_C");
static_assert(sizeof(AIO_Combat_PipeValve_C) == 0x000678, "Wrong size on AIO_Combat_PipeValve_C");
static_assert(offsetof(AIO_Combat_PipeValve_C, UberGraphFrame) == 0x000550, "Member 'AIO_Combat_PipeValve_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, BlackFog) == 0x000558, "Member 'AIO_Combat_PipeValve_C::BlackFog' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, PreviewDecal) == 0x000560, "Member 'AIO_Combat_PipeValve_C::PreviewDecal' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, ElementalOverlap) == 0x000568, "Member 'AIO_Combat_PipeValve_C::ElementalOverlap' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, ElementalInteraction) == 0x000570, "Member 'AIO_Combat_PipeValve_C::ElementalInteraction' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, Targetable) == 0x000578, "Member 'AIO_Combat_PipeValve_C::Targetable' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, OakDamage) == 0x000580, "Member 'AIO_Combat_PipeValve_C::OakDamage' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, NavPaintCollision) == 0x000588, "Member 'AIO_Combat_PipeValve_C::NavPaintCollision' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, Scene) == 0x000590, "Member 'AIO_Combat_PipeValve_C::Scene' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, FX_Waterspray) == 0x000598, "Member 'AIO_Combat_PipeValve_C::FX_Waterspray' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, Pipe) == 0x0005A0, "Member 'AIO_Combat_PipeValve_C::Pipe' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, PipeValve) == 0x0005A8, "Member 'AIO_Combat_PipeValve_C::PipeValve' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, RegionBalanceState) == 0x0005B0, "Member 'AIO_Combat_PipeValve_C::RegionBalanceState' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, GbxNavMeshPainter) == 0x0005B8, "Member 'AIO_Combat_PipeValve_C::GbxNavMeshPainter' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, FX_PreviewSpray) == 0x0005C0, "Member 'AIO_Combat_PipeValve_C::FX_PreviewSpray' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, DurationOfLiquidSpray) == 0x0005C8, "Member 'AIO_Combat_PipeValve_C::DurationOfLiquidSpray' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, PreviewSpray_) == 0x0005CC, "Member 'AIO_Combat_PipeValve_C::PreviewSpray_' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, SprayCollisionTimer) == 0x0005D0, "Member 'AIO_Combat_PipeValve_C::SprayCollisionTimer' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, SpawnPuddle_) == 0x0005D8, "Member 'AIO_Combat_PipeValve_C::SpawnPuddle_' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, DecalPuddle) == 0x0005D9, "Member 'AIO_Combat_PipeValve_C::DecalPuddle' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, PuddleScale) == 0x0005DC, "Member 'AIO_Combat_PipeValve_C::PuddleScale' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, IsGasPipe_) == 0x0005E8, "Member 'AIO_Combat_PipeValve_C::IsGasPipe_' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, MaxDistanceBetweenPipeAndSpawnedPuddle) == 0x0005EC, "Member 'AIO_Combat_PipeValve_C::MaxDistanceBetweenPipeAndSpawnedPuddle' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, SprayVelocity) == 0x0005F0, "Member 'AIO_Combat_PipeValve_C::SprayVelocity' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, GravityOverride) == 0x0005F4, "Member 'AIO_Combat_PipeValve_C::GravityOverride' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, MaxScale) == 0x0005F8, "Member 'AIO_Combat_PipeValve_C::MaxScale' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, MinScale) == 0x0005FC, "Member 'AIO_Combat_PipeValve_C::MinScale' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, Puddle) == 0x000600, "Member 'AIO_Combat_PipeValve_C::Puddle' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, StartDestroyed_) == 0x000608, "Member 'AIO_Combat_PipeValve_C::StartDestroyed_' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, My_Switch) == 0x000610, "Member 'AIO_Combat_PipeValve_C::My_Switch' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, On_PipeDestroyed) == 0x000618, "Member 'AIO_Combat_PipeValve_C::On_PipeDestroyed' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, On_PipeFlow_On) == 0x000628, "Member 'AIO_Combat_PipeValve_C::On_PipeFlow_On' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, On_PipeFlow_Off) == 0x000638, "Member 'AIO_Combat_PipeValve_C::On_PipeFlow_Off' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, DA_ExplodingPipe) == 0x000648, "Member 'AIO_Combat_PipeValve_C::DA_ExplodingPipe' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, SpawnedPuddle) == 0x000650, "Member 'AIO_Combat_PipeValve_C::SpawnedPuddle' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, ShouldPreviewPuddle) == 0x000658, "Member 'AIO_Combat_PipeValve_C::ShouldPreviewPuddle' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, LevelActorsToIgnore) == 0x000660, "Member 'AIO_Combat_PipeValve_C::LevelActorsToIgnore' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, TimeItTookForSprayTraceToCollide) == 0x000670, "Member 'AIO_Combat_PipeValve_C::TimeItTookForSprayTraceToCollide' has a wrong offset!");
static_assert(offsetof(AIO_Combat_PipeValve_C, TraceChannelArray) == 0x000674, "Member 'AIO_Combat_PipeValve_C::TraceChannelArray' has a wrong offset!");

}

