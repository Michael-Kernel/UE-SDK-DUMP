#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IO_MissionDamageable

#include "Basic.hpp"

#include "IO_MissionDamageable_States_structs.hpp"
#include "Enum_MissionDamageableState_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxMission_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IO_MissionDamageable.IO_MissionDamageable_C
// 0x0120 (0x0728 - 0x0608)
class AIO_MissionDamageable_C : public AMission_InteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0608(0x0008)(Transient, DuplicateTransient)
	class UUsableComponent*                       Usable;                                            // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_IO_LootSpawnComponent_C*            BP_IO_LootSpawnComponent;                          // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocketComponent*                       LootSpawnSocket;                                   // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetableComponent*                   Targetable;                                        // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URegionBalanceStateComponent*           RegionBalanceState;                                // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakHitRegionComponent*                 OakHitRegion;                                      // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakDamageComponent*                    OakDamage;                                         // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMissionObserverComponent*              MissionObserver;                                   // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMissionIconComponent*               OakMissionIcon;                                    // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_0F85D07A4B5A262EE6BABB90D9998913; // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_0F85D07A4B5A262EE6BABB90D9998913; // 0x0664(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   MissionDamageableDestroyed;                        // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   MissionDamageableIsDamageable;                     // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EIO_MissionDamageable_States                  MissionDamageableState;                            // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionEventReference                 MissionEventToSendOnDestruction;                   // 0x0698(0x0010)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	bool                                          DamageableOnlyByPlayerControllers;                 // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          DestroyBasedOnNumberOfHits;                        // 0x06A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_6AA[0x2];                                      // 0x06AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfRequiredHits;                              // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         HitsReceived;                                      // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            MeshComponentArray;                                // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   MissionDamageableTookDamage;                       // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UConditionalDamageModifier*>     CustomConditionalDamageModifier;                   // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)
	float                                         DelayBetweenDesructionAndSpawningLoot;             // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemPoolListInterface*                 ItemPool;                                          // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   LootSocketName;                                    // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULootSpawnPatternData*                  LootSpawnPattern;                                  // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenAcceptingHits;                         // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToSpawnLootOver;                               // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAcceptHits;                                  // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttachLoot;                                        // 0x0711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseMissionLootFailsafe;                            // 0x0712(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_713[0x5];                                      // 0x0713(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          Cond_MissionDamageableState_NewEnumerator1;        // 0x0718(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_MissionDamageableState_NewEnumerator2;        // 0x0720(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void SetDamageableGlowValue(float Value__0Minus1_);
	void SetMissionDamageableState(Enum_MissionDamageableState DamageableState);
	void UserConstructionScript();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_TakeAnyPipelineDamageDelegate__DelegateSignature_BP_IO_Switch_Parent_V1_Damageable(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details);
	void ReceiveBeginPlay();
	void FlashMaterialsOnHit();
	void PlayFeedback_Destroying();
	void PlayFeedback_Destroyed();
	void PlayFeedback_Damageable();
	void PlayFeedback_Default();
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_MissionDamageable_UNIX1533573730(class UDamageComponent* DamageReceiver, class UDamageCauserComponent* DamageCauser);
	void __UserState_MissionDamageableState_0(bool bFromLoad);
	void __UserState_MissionDamageableState_1(bool bFromLoad);
	void __UserState_MissionDamageableState_2(bool bFromLoad);
	void MissionDamageableTookNonZeroDamage_Multicast(int32 NumberOfTimesHit);
	void ExecuteUbergraph_IO_MissionDamageable(int32 EntryPoint);
	void MissionDamageableTookDamage__DelegateSignature(int32 NumberOfTimesHit);
	void MissionDamageableIsDamageable__DelegateSignature();
	void MissionDamageableDestroyed__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IO_MissionDamageable_C">();
	}
	static class AIO_MissionDamageable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIO_MissionDamageable_C>();
	}
};
static_assert(alignof(AIO_MissionDamageable_C) == 0x000008, "Wrong alignment on AIO_MissionDamageable_C");
static_assert(sizeof(AIO_MissionDamageable_C) == 0x000728, "Wrong size on AIO_MissionDamageable_C");
static_assert(offsetof(AIO_MissionDamageable_C, UberGraphFrame) == 0x000608, "Member 'AIO_MissionDamageable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Usable) == 0x000610, "Member 'AIO_MissionDamageable_C::Usable' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, BP_IO_LootSpawnComponent) == 0x000618, "Member 'AIO_MissionDamageable_C::BP_IO_LootSpawnComponent' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, LootSpawnSocket) == 0x000620, "Member 'AIO_MissionDamageable_C::LootSpawnSocket' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Targetable) == 0x000628, "Member 'AIO_MissionDamageable_C::Targetable' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, RegionBalanceState) == 0x000630, "Member 'AIO_MissionDamageable_C::RegionBalanceState' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, OakHitRegion) == 0x000638, "Member 'AIO_MissionDamageable_C::OakHitRegion' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, OakDamage) == 0x000640, "Member 'AIO_MissionDamageable_C::OakDamage' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MissionObserver) == 0x000648, "Member 'AIO_MissionDamageable_C::MissionObserver' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, OakMissionIcon) == 0x000650, "Member 'AIO_MissionDamageable_C::OakMissionIcon' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, DefaultSceneRoot) == 0x000658, "Member 'AIO_MissionDamageable_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Timeline_0_NewTrack_0_0F85D07A4B5A262EE6BABB90D9998913) == 0x000660, "Member 'AIO_MissionDamageable_C::Timeline_0_NewTrack_0_0F85D07A4B5A262EE6BABB90D9998913' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Timeline_0__Direction_0F85D07A4B5A262EE6BABB90D9998913) == 0x000664, "Member 'AIO_MissionDamageable_C::Timeline_0__Direction_0F85D07A4B5A262EE6BABB90D9998913' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Timeline_0) == 0x000668, "Member 'AIO_MissionDamageable_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MissionDamageableDestroyed) == 0x000670, "Member 'AIO_MissionDamageable_C::MissionDamageableDestroyed' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MissionDamageableIsDamageable) == 0x000680, "Member 'AIO_MissionDamageable_C::MissionDamageableIsDamageable' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MissionDamageableState) == 0x000690, "Member 'AIO_MissionDamageable_C::MissionDamageableState' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MissionEventToSendOnDestruction) == 0x000698, "Member 'AIO_MissionDamageable_C::MissionEventToSendOnDestruction' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, DamageableOnlyByPlayerControllers) == 0x0006A8, "Member 'AIO_MissionDamageable_C::DamageableOnlyByPlayerControllers' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, DestroyBasedOnNumberOfHits) == 0x0006A9, "Member 'AIO_MissionDamageable_C::DestroyBasedOnNumberOfHits' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, NumberOfRequiredHits) == 0x0006AC, "Member 'AIO_MissionDamageable_C::NumberOfRequiredHits' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, HitsReceived) == 0x0006B0, "Member 'AIO_MissionDamageable_C::HitsReceived' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MeshComponentArray) == 0x0006B8, "Member 'AIO_MissionDamageable_C::MeshComponentArray' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, MissionDamageableTookDamage) == 0x0006C8, "Member 'AIO_MissionDamageable_C::MissionDamageableTookDamage' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, CustomConditionalDamageModifier) == 0x0006D8, "Member 'AIO_MissionDamageable_C::CustomConditionalDamageModifier' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, DelayBetweenDesructionAndSpawningLoot) == 0x0006E8, "Member 'AIO_MissionDamageable_C::DelayBetweenDesructionAndSpawningLoot' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, ItemPool) == 0x0006F0, "Member 'AIO_MissionDamageable_C::ItemPool' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, LootSocketName) == 0x0006F8, "Member 'AIO_MissionDamageable_C::LootSocketName' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, LootSpawnPattern) == 0x000700, "Member 'AIO_MissionDamageable_C::LootSpawnPattern' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, DelayBetweenAcceptingHits) == 0x000708, "Member 'AIO_MissionDamageable_C::DelayBetweenAcceptingHits' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, TimeToSpawnLootOver) == 0x00070C, "Member 'AIO_MissionDamageable_C::TimeToSpawnLootOver' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, ShouldAcceptHits) == 0x000710, "Member 'AIO_MissionDamageable_C::ShouldAcceptHits' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, AttachLoot) == 0x000711, "Member 'AIO_MissionDamageable_C::AttachLoot' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, UseMissionLootFailsafe) == 0x000712, "Member 'AIO_MissionDamageable_C::UseMissionLootFailsafe' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Cond_MissionDamageableState_NewEnumerator1) == 0x000718, "Member 'AIO_MissionDamageable_C::Cond_MissionDamageableState_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(AIO_MissionDamageable_C, Cond_MissionDamageableState_NewEnumerator2) == 0x000720, "Member 'AIO_MissionDamageable_C::Cond_MissionDamageableState_NewEnumerator2' has a wrong offset!");

}

