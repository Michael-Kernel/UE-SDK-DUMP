#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTravelStation

#include "Basic.hpp"

#include "GbxTravelStation_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GbxTravelStation.TeleportDestinationActor.TeleportPlayersToDestination
// 0x0010 (0x0010 - 0x0000)
struct TeleportDestinationActor_TeleportPlayersToDestination final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATeleportDestinationActor*              Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeleportDestinationActor_TeleportPlayersToDestination) == 0x000008, "Wrong alignment on TeleportDestinationActor_TeleportPlayersToDestination");
static_assert(sizeof(TeleportDestinationActor_TeleportPlayersToDestination) == 0x000010, "Wrong size on TeleportDestinationActor_TeleportPlayersToDestination");
static_assert(offsetof(TeleportDestinationActor_TeleportPlayersToDestination, WorldContextObject) == 0x000000, "Member 'TeleportDestinationActor_TeleportPlayersToDestination::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeleportDestinationActor_TeleportPlayersToDestination, Destination) == 0x000008, "Member 'TeleportDestinationActor_TeleportPlayersToDestination::Destination' has a wrong offset!");

// Function GbxTravelStation.GlobalTravelGraph.DebugFindClosestLevel
// 0x0018 (0x0018 - 0x0000)
struct GlobalTravelGraph_DebugFindClosestLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelData*                             StartingLevel;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelData*                             DestinationLevel;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalTravelGraph_DebugFindClosestLevel) == 0x000008, "Wrong alignment on GlobalTravelGraph_DebugFindClosestLevel");
static_assert(sizeof(GlobalTravelGraph_DebugFindClosestLevel) == 0x000018, "Wrong size on GlobalTravelGraph_DebugFindClosestLevel");
static_assert(offsetof(GlobalTravelGraph_DebugFindClosestLevel, WorldContextObject) == 0x000000, "Member 'GlobalTravelGraph_DebugFindClosestLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GlobalTravelGraph_DebugFindClosestLevel, StartingLevel) == 0x000008, "Member 'GlobalTravelGraph_DebugFindClosestLevel::StartingLevel' has a wrong offset!");
static_assert(offsetof(GlobalTravelGraph_DebugFindClosestLevel, DestinationLevel) == 0x000010, "Member 'GlobalTravelGraph_DebugFindClosestLevel::DestinationLevel' has a wrong offset!");

// Function GbxTravelStation.TravelStationData.GetStationMapName
// 0x0008 (0x0008 - 0x0000)
struct TravelStationData_GetStationMapName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationData_GetStationMapName) == 0x000004, "Wrong alignment on TravelStationData_GetStationMapName");
static_assert(sizeof(TravelStationData_GetStationMapName) == 0x000008, "Wrong size on TravelStationData_GetStationMapName");
static_assert(offsetof(TravelStationData_GetStationMapName, ReturnValue) == 0x000000, "Member 'TravelStationData_GetStationMapName::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.FindFastTravelStationForMap
// 0x0010 (0x0010 - 0x0000)
struct TravelStationTracker_FindFastTravelStationForMap final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFastTravelStationData*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_FindFastTravelStationForMap) == 0x000008, "Wrong alignment on TravelStationTracker_FindFastTravelStationForMap");
static_assert(sizeof(TravelStationTracker_FindFastTravelStationForMap) == 0x000010, "Wrong size on TravelStationTracker_FindFastTravelStationForMap");
static_assert(offsetof(TravelStationTracker_FindFastTravelStationForMap, MapName) == 0x000000, "Member 'TravelStationTracker_FindFastTravelStationForMap::MapName' has a wrong offset!");
static_assert(offsetof(TravelStationTracker_FindFastTravelStationForMap, ReturnValue) == 0x000008, "Member 'TravelStationTracker_FindFastTravelStationForMap::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.GetActiveFastTravelStationList
// 0x0010 (0x0010 - 0x0000)
struct TravelStationTracker_GetActiveFastTravelStationList final
{
public:
	TArray<struct FActiveFastTravelData>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_GetActiveFastTravelStationList) == 0x000008, "Wrong alignment on TravelStationTracker_GetActiveFastTravelStationList");
static_assert(sizeof(TravelStationTracker_GetActiveFastTravelStationList) == 0x000010, "Wrong size on TravelStationTracker_GetActiveFastTravelStationList");
static_assert(offsetof(TravelStationTracker_GetActiveFastTravelStationList, ReturnValue) == 0x000000, "Member 'TravelStationTracker_GetActiveFastTravelStationList::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.GetAllFastTravelStations
// 0x0010 (0x0010 - 0x0000)
struct TravelStationTracker_GetAllFastTravelStations final
{
public:
	TArray<class UFastTravelStationData*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_GetAllFastTravelStations) == 0x000008, "Wrong alignment on TravelStationTracker_GetAllFastTravelStations");
static_assert(sizeof(TravelStationTracker_GetAllFastTravelStations) == 0x000010, "Wrong size on TravelStationTracker_GetAllFastTravelStations");
static_assert(offsetof(TravelStationTracker_GetAllFastTravelStations, ReturnValue) == 0x000000, "Member 'TravelStationTracker_GetAllFastTravelStations::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.GetFastTravelStationInfo
// 0x0018 (0x0018 - 0x0000)
struct TravelStationTracker_GetFastTravelStationInfo final
{
public:
	class FString                                 FastTravelStationName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFastTravelStationData*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_GetFastTravelStationInfo) == 0x000008, "Wrong alignment on TravelStationTracker_GetFastTravelStationInfo");
static_assert(sizeof(TravelStationTracker_GetFastTravelStationInfo) == 0x000018, "Wrong size on TravelStationTracker_GetFastTravelStationInfo");
static_assert(offsetof(TravelStationTracker_GetFastTravelStationInfo, FastTravelStationName) == 0x000000, "Member 'TravelStationTracker_GetFastTravelStationInfo::FastTravelStationName' has a wrong offset!");
static_assert(offsetof(TravelStationTracker_GetFastTravelStationInfo, ReturnValue) == 0x000010, "Member 'TravelStationTracker_GetFastTravelStationInfo::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.GetLastActiveTravelToStation
// 0x0010 (0x0010 - 0x0000)
struct TravelStationTracker_GetLastActiveTravelToStation final
{
public:
	class APlayerController*                      Pc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_GetLastActiveTravelToStation) == 0x000008, "Wrong alignment on TravelStationTracker_GetLastActiveTravelToStation");
static_assert(sizeof(TravelStationTracker_GetLastActiveTravelToStation) == 0x000010, "Wrong size on TravelStationTracker_GetLastActiveTravelToStation");
static_assert(offsetof(TravelStationTracker_GetLastActiveTravelToStation, Pc) == 0x000000, "Member 'TravelStationTracker_GetLastActiveTravelToStation::Pc' has a wrong offset!");
static_assert(offsetof(TravelStationTracker_GetLastActiveTravelToStation, ReturnValue) == 0x000008, "Member 'TravelStationTracker_GetLastActiveTravelToStation::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.GetLastTravelledThroughStation
// 0x0008 (0x0008 - 0x0000)
struct TravelStationTracker_GetLastTravelledThroughStation final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_GetLastTravelledThroughStation) == 0x000008, "Wrong alignment on TravelStationTracker_GetLastTravelledThroughStation");
static_assert(sizeof(TravelStationTracker_GetLastTravelledThroughStation) == 0x000008, "Wrong size on TravelStationTracker_GetLastTravelledThroughStation");
static_assert(offsetof(TravelStationTracker_GetLastTravelledThroughStation, ReturnValue) == 0x000000, "Member 'TravelStationTracker_GetLastTravelledThroughStation::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationTracker.GetTravelStationComponent
// 0x0010 (0x0010 - 0x0000)
struct TravelStationTracker_GetTravelStationComponent final
{
public:
	class UTravelStationData*                     TravelStationData;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTravelStationComponentBase*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationTracker_GetTravelStationComponent) == 0x000008, "Wrong alignment on TravelStationTracker_GetTravelStationComponent");
static_assert(sizeof(TravelStationTracker_GetTravelStationComponent) == 0x000010, "Wrong size on TravelStationTracker_GetTravelStationComponent");
static_assert(offsetof(TravelStationTracker_GetTravelStationComponent, TravelStationData) == 0x000000, "Member 'TravelStationTracker_GetTravelStationComponent::TravelStationData' has a wrong offset!");
static_assert(offsetof(TravelStationTracker_GetTravelStationComponent, ReturnValue) == 0x000008, "Member 'TravelStationTracker_GetTravelStationComponent::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationComponentBase.EnumerateValidTravelStation
// 0x0018 (0x0018 - 0x0000)
struct TravelStationComponentBase_EnumerateValidTravelStation final
{
public:
	class UObject*                                TravelStationObject;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutItems;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationComponentBase_EnumerateValidTravelStation) == 0x000008, "Wrong alignment on TravelStationComponentBase_EnumerateValidTravelStation");
static_assert(sizeof(TravelStationComponentBase_EnumerateValidTravelStation) == 0x000018, "Wrong size on TravelStationComponentBase_EnumerateValidTravelStation");
static_assert(offsetof(TravelStationComponentBase_EnumerateValidTravelStation, TravelStationObject) == 0x000000, "Member 'TravelStationComponentBase_EnumerateValidTravelStation::TravelStationObject' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_EnumerateValidTravelStation, OutItems) == 0x000008, "Member 'TravelStationComponentBase_EnumerateValidTravelStation::OutItems' has a wrong offset!");

// Function GbxTravelStation.TravelStationComponentBase.TravelToStation
// 0x0028 (0x0028 - 0x0000)
struct TravelStationComponentBase_TravelToStation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTravelStationData*                     DestinationStationData;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ActivatingPawn;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisallowLocalTravel;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TravelStationComponentBase_TravelToStation) == 0x000008, "Wrong alignment on TravelStationComponentBase_TravelToStation");
static_assert(sizeof(TravelStationComponentBase_TravelToStation) == 0x000028, "Wrong size on TravelStationComponentBase_TravelToStation");
static_assert(offsetof(TravelStationComponentBase_TravelToStation, WorldContextObject) == 0x000000, "Member 'TravelStationComponentBase_TravelToStation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_TravelToStation, DestinationStationData) == 0x000008, "Member 'TravelStationComponentBase_TravelToStation::DestinationStationData' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_TravelToStation, bImmediate) == 0x000010, "Member 'TravelStationComponentBase_TravelToStation::bImmediate' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_TravelToStation, ActivatingPawn) == 0x000018, "Member 'TravelStationComponentBase_TravelToStation::ActivatingPawn' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_TravelToStation, bDisallowLocalTravel) == 0x000020, "Member 'TravelStationComponentBase_TravelToStation::bDisallowLocalTravel' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_TravelToStation, ReturnValue) == 0x000021, "Member 'TravelStationComponentBase_TravelToStation::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationComponentBase.GetAvailableSpawnLocation
// 0x0028 (0x0028 - 0x0000)
struct TravelStationComponentBase_GetAvailableSpawnLocation final
{
public:
	class AActor*                                 ActorForSpawnLocation;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTestOnly;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForVehicle;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TravelStationComponentBase_GetAvailableSpawnLocation) == 0x000008, "Wrong alignment on TravelStationComponentBase_GetAvailableSpawnLocation");
static_assert(sizeof(TravelStationComponentBase_GetAvailableSpawnLocation) == 0x000028, "Wrong size on TravelStationComponentBase_GetAvailableSpawnLocation");
static_assert(offsetof(TravelStationComponentBase_GetAvailableSpawnLocation, ActorForSpawnLocation) == 0x000000, "Member 'TravelStationComponentBase_GetAvailableSpawnLocation::ActorForSpawnLocation' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_GetAvailableSpawnLocation, SpawnLocation) == 0x000008, "Member 'TravelStationComponentBase_GetAvailableSpawnLocation::SpawnLocation' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_GetAvailableSpawnLocation, SpawnRotation) == 0x000014, "Member 'TravelStationComponentBase_GetAvailableSpawnLocation::SpawnRotation' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_GetAvailableSpawnLocation, bTestOnly) == 0x000020, "Member 'TravelStationComponentBase_GetAvailableSpawnLocation::bTestOnly' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_GetAvailableSpawnLocation, bForVehicle) == 0x000021, "Member 'TravelStationComponentBase_GetAvailableSpawnLocation::bForVehicle' has a wrong offset!");
static_assert(offsetof(TravelStationComponentBase_GetAvailableSpawnLocation, ReturnValue) == 0x000022, "Member 'TravelStationComponentBase_GetAvailableSpawnLocation::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationComponent.FastTravelToStation
// 0x0018 (0x0018 - 0x0000)
struct FastTravelStationComponent_FastTravelToStation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFastTravelStationData*                 DestinationStationData;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ActivatingPawn;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastTravelStationComponent_FastTravelToStation) == 0x000008, "Wrong alignment on FastTravelStationComponent_FastTravelToStation");
static_assert(sizeof(FastTravelStationComponent_FastTravelToStation) == 0x000018, "Wrong size on FastTravelStationComponent_FastTravelToStation");
static_assert(offsetof(FastTravelStationComponent_FastTravelToStation, WorldContextObject) == 0x000000, "Member 'FastTravelStationComponent_FastTravelToStation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FastTravelStationComponent_FastTravelToStation, DestinationStationData) == 0x000008, "Member 'FastTravelStationComponent_FastTravelToStation::DestinationStationData' has a wrong offset!");
static_assert(offsetof(FastTravelStationComponent_FastTravelToStation, ActivatingPawn) == 0x000010, "Member 'FastTravelStationComponent_FastTravelToStation::ActivatingPawn' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationComponent.ActivateFastTravel
// 0x0001 (0x0001 - 0x0000)
struct FastTravelStationComponent_ActivateFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastTravelStationComponent_ActivateFastTravel) == 0x000001, "Wrong alignment on FastTravelStationComponent_ActivateFastTravel");
static_assert(sizeof(FastTravelStationComponent_ActivateFastTravel) == 0x000001, "Wrong size on FastTravelStationComponent_ActivateFastTravel");
static_assert(offsetof(FastTravelStationComponent_ActivateFastTravel, ReturnValue) == 0x000000, "Member 'FastTravelStationComponent_ActivateFastTravel::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationComponent.DeactivateFastTravel
// 0x0010 (0x0010 - 0x0000)
struct FastTravelStationComponent_DeactivateFastTravel final
{
public:
	class UFastTravelStationComponent*            FallbackLocation;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FastTravelStationComponent_DeactivateFastTravel) == 0x000008, "Wrong alignment on FastTravelStationComponent_DeactivateFastTravel");
static_assert(sizeof(FastTravelStationComponent_DeactivateFastTravel) == 0x000010, "Wrong size on FastTravelStationComponent_DeactivateFastTravel");
static_assert(offsetof(FastTravelStationComponent_DeactivateFastTravel, FallbackLocation) == 0x000000, "Member 'FastTravelStationComponent_DeactivateFastTravel::FallbackLocation' has a wrong offset!");
static_assert(offsetof(FastTravelStationComponent_DeactivateFastTravel, ReturnValue) == 0x000008, "Member 'FastTravelStationComponent_DeactivateFastTravel::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationComponent.OnTravelStationActivated
// 0x0008 (0x0008 - 0x0000)
struct FastTravelStationComponent_OnTravelStationActivated final
{
public:
	class AActor*                                 PreviousStation;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastTravelStationComponent_OnTravelStationActivated) == 0x000008, "Wrong alignment on FastTravelStationComponent_OnTravelStationActivated");
static_assert(sizeof(FastTravelStationComponent_OnTravelStationActivated) == 0x000008, "Wrong size on FastTravelStationComponent_OnTravelStationActivated");
static_assert(offsetof(FastTravelStationComponent_OnTravelStationActivated, PreviousStation) == 0x000000, "Member 'FastTravelStationComponent_OnTravelStationActivated::PreviousStation' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationDebugMenu.OnActiveStationsStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FastTravelStationDebugMenu_OnActiveStationsStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastTravelStationDebugMenu_OnActiveStationsStateChanged) == 0x000001, "Wrong alignment on FastTravelStationDebugMenu_OnActiveStationsStateChanged");
static_assert(sizeof(FastTravelStationDebugMenu_OnActiveStationsStateChanged) == 0x000001, "Wrong size on FastTravelStationDebugMenu_OnActiveStationsStateChanged");
static_assert(offsetof(FastTravelStationDebugMenu_OnActiveStationsStateChanged, bIsChecked) == 0x000000, "Member 'FastTravelStationDebugMenu_OnActiveStationsStateChanged::bIsChecked' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationDebugMenu.OnShowLevelStationsStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FastTravelStationDebugMenu_OnShowLevelStationsStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastTravelStationDebugMenu_OnShowLevelStationsStateChanged) == 0x000001, "Wrong alignment on FastTravelStationDebugMenu_OnShowLevelStationsStateChanged");
static_assert(sizeof(FastTravelStationDebugMenu_OnShowLevelStationsStateChanged) == 0x000001, "Wrong size on FastTravelStationDebugMenu_OnShowLevelStationsStateChanged");
static_assert(offsetof(FastTravelStationDebugMenu_OnShowLevelStationsStateChanged, bIsChecked) == 0x000000, "Member 'FastTravelStationDebugMenu_OnShowLevelStationsStateChanged::bIsChecked' has a wrong offset!");

// Function GbxTravelStation.FastTravelStationDebugMenu.OnTravelStationSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct FastTravelStationDebugMenu_OnTravelStationSelectedChanged final
{
public:
	class UFastTravelStationDebugButton*          TriggeredButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChecked;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FastTravelStationDebugMenu_OnTravelStationSelectedChanged) == 0x000008, "Wrong alignment on FastTravelStationDebugMenu_OnTravelStationSelectedChanged");
static_assert(sizeof(FastTravelStationDebugMenu_OnTravelStationSelectedChanged) == 0x000010, "Wrong size on FastTravelStationDebugMenu_OnTravelStationSelectedChanged");
static_assert(offsetof(FastTravelStationDebugMenu_OnTravelStationSelectedChanged, TriggeredButton) == 0x000000, "Member 'FastTravelStationDebugMenu_OnTravelStationSelectedChanged::TriggeredButton' has a wrong offset!");
static_assert(offsetof(FastTravelStationDebugMenu_OnTravelStationSelectedChanged, bIsChecked) == 0x000008, "Member 'FastTravelStationDebugMenu_OnTravelStationSelectedChanged::bIsChecked' has a wrong offset!");

// Function GbxTravelStation.LevelTravelStationComponent.ActivateLevelTravel
// 0x0010 (0x0010 - 0x0000)
struct LevelTravelStationComponent_ActivateLevelTravel final
{
public:
	class AController*                            ActivatingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelTravelStationComponent_ActivateLevelTravel) == 0x000008, "Wrong alignment on LevelTravelStationComponent_ActivateLevelTravel");
static_assert(sizeof(LevelTravelStationComponent_ActivateLevelTravel) == 0x000010, "Wrong size on LevelTravelStationComponent_ActivateLevelTravel");
static_assert(offsetof(LevelTravelStationComponent_ActivateLevelTravel, ActivatingController) == 0x000000, "Member 'LevelTravelStationComponent_ActivateLevelTravel::ActivatingController' has a wrong offset!");
static_assert(offsetof(LevelTravelStationComponent_ActivateLevelTravel, ReturnValue) == 0x000008, "Member 'LevelTravelStationComponent_ActivateLevelTravel::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.LevelTravelStationComponent.GetLevelTravelStationData
// 0x0008 (0x0008 - 0x0000)
struct LevelTravelStationComponent_GetLevelTravelStationData final
{
public:
	class ULevelTravelStationData*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelTravelStationComponent_GetLevelTravelStationData) == 0x000008, "Wrong alignment on LevelTravelStationComponent_GetLevelTravelStationData");
static_assert(sizeof(LevelTravelStationComponent_GetLevelTravelStationData) == 0x000008, "Wrong size on LevelTravelStationComponent_GetLevelTravelStationData");
static_assert(offsetof(LevelTravelStationComponent_GetLevelTravelStationData, ReturnValue) == 0x000000, "Member 'LevelTravelStationComponent_GetLevelTravelStationData::ReturnValue' has a wrong offset!");

// Function GbxTravelStation.TravelStationResurrectComponent.ActivateTravelStation
// 0x0002 (0x0002 - 0x0000)
struct TravelStationResurrectComponent_ActivateTravelStation final
{
public:
	bool                                          bForceActivation;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelStationResurrectComponent_ActivateTravelStation) == 0x000001, "Wrong alignment on TravelStationResurrectComponent_ActivateTravelStation");
static_assert(sizeof(TravelStationResurrectComponent_ActivateTravelStation) == 0x000002, "Wrong size on TravelStationResurrectComponent_ActivateTravelStation");
static_assert(offsetof(TravelStationResurrectComponent_ActivateTravelStation, bForceActivation) == 0x000000, "Member 'TravelStationResurrectComponent_ActivateTravelStation::bForceActivation' has a wrong offset!");
static_assert(offsetof(TravelStationResurrectComponent_ActivateTravelStation, ReturnValue) == 0x000001, "Member 'TravelStationResurrectComponent_ActivateTravelStation::ReturnValue' has a wrong offset!");

}

