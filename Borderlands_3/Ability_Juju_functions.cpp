#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_Juju

#include "Basic.hpp"

#include "Ability_Juju_classes.hpp"
#include "Ability_Juju_parameters.hpp"


namespace SDK
{

// Function Ability_Juju.Ability_Juju_C.ExecuteUbergraph_Ability_Juju
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_Juju_C::ExecuteUbergraph_Ability_Juju(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "ExecuteUbergraph_Ability_Juju");

	Params::Ability_Juju_C_ExecuteUbergraph_Ability_Juju Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_Juju.Ability_Juju_C.OnResumed
// (Event, Protected, BlueprintEvent)

void UAbility_Juju_C::OnResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "OnResumed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Juju.Ability_Juju_C.OnCausedDeath_CE
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDamageComponent*                 Damaged                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCausedDeathDetails              Details                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UAbility_Juju_C::OnCausedDeath_CE(const class UDamageComponent* Damaged, const struct FCausedDeathDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "OnCausedDeath_CE");

	Params::Ability_Juju_C_OnCausedDeath_CE Parms{};

	Parms.Damaged = Damaged;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_Juju.Ability_Juju_C.OnCausedDmg_CE
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageInstigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGbxDamageType*                   DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageSource*                    DamageSource                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCausedDamageDetails             Details                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UAbility_Juju_C::OnCausedDmg_CE(class AActor* DamageInstigator, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "OnCausedDmg_CE");

	Params::Ability_Juju_C_OnCausedDmg_CE Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.DamagedActor = DamagedActor;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_Juju.Ability_Juju_C.OnUnregistered
// (Event, Protected, BlueprintEvent)

void UAbility_Juju_C::OnUnregistered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "OnUnregistered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Juju.Ability_Juju_C.ReloadStartedEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeapon*                          EventWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAutoReload                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAbility_Juju_C::ReloadStartedEvent(class AWeapon* EventWeapon, bool bAutoReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "ReloadStartedEvent");

	Params::Ability_Juju_C_ReloadStartedEvent Parms{};

	Parms.EventWeapon = EventWeapon;
	Parms.bAutoReload = bAutoReload;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_Juju.Ability_Juju_C.OnActivated
// (Event, Protected, BlueprintEvent)

void UAbility_Juju_C::OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "OnActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_Juju.Ability_Juju_C.OnRegistered
// (Event, Protected, BlueprintEvent)

void UAbility_Juju_C::OnRegistered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_Juju_C", "OnRegistered");

	UObject::ProcessEvent(Func, nullptr);
}

}

