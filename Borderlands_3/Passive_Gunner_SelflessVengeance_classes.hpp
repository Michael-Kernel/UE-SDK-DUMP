#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Passive_Gunner_SelflessVengeance

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Passive_Gunner_SelflessVengeance.Passive_Gunner_SelflessVengeance_C
// 0x0068 (0x0218 - 0x01B0)
class UPassive_Gunner_SelflessVengeance_C final : public UOakPassiveAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(Transient, DuplicateTransient)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Gunner_SelflessVengeance; // 0x01B8(0x0028)()
	struct FOakAbilityResourceController_WeaponShotModifier RsrcCntrlr_OakAbilityResourceController_WeaponShotModifier_Passive_Gunner_SelflessVengeance; // 0x01E0(0x0028)()
	TArray<class AOakCharacter_Player*>           ShotModifiedAllies;                                // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Passive_Gunner_SelflessVengeance(int32 EntryPoint);
	void OnAbilityTimerEnded(const struct FOakAbilityTimerSpec& Spec, const struct FOakAbilityTimerResult& Result);
	void OnAbilityTimerStarted(const struct FOakAbilityTimerSpec& Spec);
	void ReloadEnded_SelflessVengeance(class AWeapon* EventWeapon, bool bCompleted);
	void OnActivated();
	void ApplyBonusDamageToTarget(float Damage, const class UDamageSource* DmgSource, class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Passive_Gunner_SelflessVengeance_C">();
	}
	static class UPassive_Gunner_SelflessVengeance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPassive_Gunner_SelflessVengeance_C>();
	}
};
static_assert(alignof(UPassive_Gunner_SelflessVengeance_C) == 0x000008, "Wrong alignment on UPassive_Gunner_SelflessVengeance_C");
static_assert(sizeof(UPassive_Gunner_SelflessVengeance_C) == 0x000218, "Wrong size on UPassive_Gunner_SelflessVengeance_C");
static_assert(offsetof(UPassive_Gunner_SelflessVengeance_C, UberGraphFrame) == 0x0001B0, "Member 'UPassive_Gunner_SelflessVengeance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_SelflessVengeance_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Gunner_SelflessVengeance) == 0x0001B8, "Member 'UPassive_Gunner_SelflessVengeance_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Gunner_SelflessVengeance' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_SelflessVengeance_C, RsrcCntrlr_OakAbilityResourceController_WeaponShotModifier_Passive_Gunner_SelflessVengeance) == 0x0001E0, "Member 'UPassive_Gunner_SelflessVengeance_C::RsrcCntrlr_OakAbilityResourceController_WeaponShotModifier_Passive_Gunner_SelflessVengeance' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_SelflessVengeance_C, ShotModifiedAllies) == 0x000208, "Member 'UPassive_Gunner_SelflessVengeance_C::ShotModifiedAllies' has a wrong offset!");

}

