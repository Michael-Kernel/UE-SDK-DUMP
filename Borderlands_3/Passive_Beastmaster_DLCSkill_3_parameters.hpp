#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Passive_Beastmaster_DLCSkill_3

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"


namespace SDK::Params
{

// Function Passive_Beastmaster_DLCSkill_3.Passive_Beastmaster_DLCSkill_3_C.CalculateAbilityState
// 0x000C (0x000C - 0x0000)
struct Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState final
{
public:
	EGbxAbilityState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGbxAbilityState                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGbxAbilityState                              CallFunc_CalculateAbilityState_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentShield_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGbxAbilityState                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState) == 0x000004, "Wrong alignment on Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState");
static_assert(sizeof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState) == 0x00000C, "Wrong size on Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, ReturnValue) == 0x000000, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::ReturnValue' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, Temp_bool_Variable) == 0x000001, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, Temp_byte_Variable) == 0x000002, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, CallFunc_CalculateAbilityState_ReturnValue) == 0x000003, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::CallFunc_CalculateAbilityState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, CallFunc_GetCurrentShield_ReturnValue) == 0x000004, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::CallFunc_GetCurrentShield_ReturnValue' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState, K2Node_Select_Default) == 0x000009, "Member 'Passive_Beastmaster_DLCSkill_3_C_CalculateAbilityState::K2Node_Select_Default' has a wrong offset!");

}

