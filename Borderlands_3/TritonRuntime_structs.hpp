#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TritonRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "WwiseAudio_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct TritonRuntime.TritonAdvancedParams
// 0x0024 (0x0024 - 0x0000)
struct FTritonAdvancedParams final
{
public:
	bool                                          bUseProbeStreaming;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreloadDistance;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLoadedProbes;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceFractionForPreload;                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpatialInterpCacheSize;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoxelDecompressionCacheSize;                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimCellCacheSize;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowProbeAutoLoad;                               // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbeSearchDistance;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTritonAdvancedParams) == 0x000004, "Wrong alignment on FTritonAdvancedParams");
static_assert(sizeof(FTritonAdvancedParams) == 0x000024, "Wrong size on FTritonAdvancedParams");
static_assert(offsetof(FTritonAdvancedParams, bUseProbeStreaming) == 0x000000, "Member 'FTritonAdvancedParams::bUseProbeStreaming' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, PreloadDistance) == 0x000004, "Member 'FTritonAdvancedParams::PreloadDistance' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, MaxLoadedProbes) == 0x000008, "Member 'FTritonAdvancedParams::MaxLoadedProbes' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, MinDistanceFractionForPreload) == 0x00000C, "Member 'FTritonAdvancedParams::MinDistanceFractionForPreload' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, SpatialInterpCacheSize) == 0x000010, "Member 'FTritonAdvancedParams::SpatialInterpCacheSize' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, VoxelDecompressionCacheSize) == 0x000014, "Member 'FTritonAdvancedParams::VoxelDecompressionCacheSize' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, SimCellCacheSize) == 0x000018, "Member 'FTritonAdvancedParams::SimCellCacheSize' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, bAllowProbeAutoLoad) == 0x00001C, "Member 'FTritonAdvancedParams::bAllowProbeAutoLoad' has a wrong offset!");
static_assert(offsetof(FTritonAdvancedParams, ProbeSearchDistance) == 0x000020, "Member 'FTritonAdvancedParams::ProbeSearchDistance' has a wrong offset!");

// ScriptStruct TritonRuntime.CachedPerProbeAcousticData
// 0x000C (0x000C - 0x0000)
struct FCachedPerProbeAcousticData final
{
public:
	float                                         ERVolume;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LRVolume;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LRDuration;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedPerProbeAcousticData) == 0x000004, "Wrong alignment on FCachedPerProbeAcousticData");
static_assert(sizeof(FCachedPerProbeAcousticData) == 0x00000C, "Wrong size on FCachedPerProbeAcousticData");
static_assert(offsetof(FCachedPerProbeAcousticData, ERVolume) == 0x000000, "Member 'FCachedPerProbeAcousticData::ERVolume' has a wrong offset!");
static_assert(offsetof(FCachedPerProbeAcousticData, LRVolume) == 0x000004, "Member 'FCachedPerProbeAcousticData::LRVolume' has a wrong offset!");
static_assert(offsetof(FCachedPerProbeAcousticData, LRDuration) == 0x000008, "Member 'FCachedPerProbeAcousticData::LRDuration' has a wrong offset!");

// ScriptStruct TritonRuntime.TritonProbeSet
// 0x0030 (0x0030 - 0x0000)
struct FTritonProbeSet final
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATritonProbeLocationProvider*           ProbeLocationProvider;                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ProbeLocations;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLowDetail;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTritonProbeSet) == 0x000008, "Wrong alignment on FTritonProbeSet");
static_assert(sizeof(FTritonProbeSet) == 0x000030, "Wrong size on FTritonProbeSet");
static_assert(offsetof(FTritonProbeSet, Label) == 0x000000, "Member 'FTritonProbeSet::Label' has a wrong offset!");
static_assert(offsetof(FTritonProbeSet, ProbeLocationProvider) == 0x000010, "Member 'FTritonProbeSet::ProbeLocationProvider' has a wrong offset!");
static_assert(offsetof(FTritonProbeSet, ProbeLocations) == 0x000018, "Member 'FTritonProbeSet::ProbeLocations' has a wrong offset!");
static_assert(offsetof(FTritonProbeSet, bLowDetail) == 0x000028, "Member 'FTritonProbeSet::bLowDetail' has a wrong offset!");

// ScriptStruct TritonRuntime.TritonUpdateDesc
// 0x000A (0x000A - 0x0000)
struct FTritonUpdateDesc final
{
public:
	bool                                          bCleanTempDirectory;                               // 0x0000(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportVoxelizedRegion;                            // 0x0001(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateJobConfig;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateTaskImages;                                 // 0x0003(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunTasks;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateCompressedVoxMap;                           // 0x0005(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollateResults;                                   // 0x0006(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateLongDistanceProbes;                       // 0x0007(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixupDirectionalReciprocity;                      // 0x0008(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncorporateNewACE;                                // 0x0009(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTritonUpdateDesc) == 0x000001, "Wrong alignment on FTritonUpdateDesc");
static_assert(sizeof(FTritonUpdateDesc) == 0x00000A, "Wrong size on FTritonUpdateDesc");
static_assert(offsetof(FTritonUpdateDesc, bCleanTempDirectory) == 0x000000, "Member 'FTritonUpdateDesc::bCleanTempDirectory' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bExportVoxelizedRegion) == 0x000001, "Member 'FTritonUpdateDesc::bExportVoxelizedRegion' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bCreateJobConfig) == 0x000002, "Member 'FTritonUpdateDesc::bCreateJobConfig' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bCreateTaskImages) == 0x000003, "Member 'FTritonUpdateDesc::bCreateTaskImages' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bRunTasks) == 0x000004, "Member 'FTritonUpdateDesc::bRunTasks' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bCreateCompressedVoxMap) == 0x000005, "Member 'FTritonUpdateDesc::bCreateCompressedVoxMap' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bCollateResults) == 0x000006, "Member 'FTritonUpdateDesc::bCollateResults' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bGenerateLongDistanceProbes) == 0x000007, "Member 'FTritonUpdateDesc::bGenerateLongDistanceProbes' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bFixupDirectionalReciprocity) == 0x000008, "Member 'FTritonUpdateDesc::bFixupDirectionalReciprocity' has a wrong offset!");
static_assert(offsetof(FTritonUpdateDesc, bIncorporateNewACE) == 0x000009, "Member 'FTritonUpdateDesc::bIncorporateNewACE' has a wrong offset!");

// ScriptStruct TritonRuntime.TritonSimulationParams
// 0x0018 (0x0018 - 0x0000)
struct FTritonSimulationParams final
{
public:
	float                                         SimulationFrequency;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationRadius;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationDepth;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationHeight;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealVoxelmapResolutionInMeters;                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRMSForAveragingLongDistanceVolumes;            // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWallinessFactorForLongDistanceVolumes;         // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTritonSimulationParams) == 0x000004, "Wrong alignment on FTritonSimulationParams");
static_assert(sizeof(FTritonSimulationParams) == 0x000018, "Wrong size on FTritonSimulationParams");
static_assert(offsetof(FTritonSimulationParams, SimulationFrequency) == 0x000000, "Member 'FTritonSimulationParams::SimulationFrequency' has a wrong offset!");
static_assert(offsetof(FTritonSimulationParams, SimulationRadius) == 0x000004, "Member 'FTritonSimulationParams::SimulationRadius' has a wrong offset!");
static_assert(offsetof(FTritonSimulationParams, SimulationDepth) == 0x000008, "Member 'FTritonSimulationParams::SimulationDepth' has a wrong offset!");
static_assert(offsetof(FTritonSimulationParams, SimulationHeight) == 0x00000C, "Member 'FTritonSimulationParams::SimulationHeight' has a wrong offset!");
static_assert(offsetof(FTritonSimulationParams, IdealVoxelmapResolutionInMeters) == 0x000010, "Member 'FTritonSimulationParams::IdealVoxelmapResolutionInMeters' has a wrong offset!");
static_assert(offsetof(FTritonSimulationParams, bUseRMSForAveragingLongDistanceVolumes) == 0x000014, "Member 'FTritonSimulationParams::bUseRMSForAveragingLongDistanceVolumes' has a wrong offset!");
static_assert(offsetof(FTritonSimulationParams, bUseWallinessFactorForLongDistanceVolumes) == 0x000015, "Member 'FTritonSimulationParams::bUseWallinessFactorForLongDistanceVolumes' has a wrong offset!");

// ScriptStruct TritonRuntime.TritonLayerFadeParams
// 0x0014 (0x0014 - 0x0000)
struct FTritonLayerFadeParams final
{
public:
	float                                         RangeMin;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolMin;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pivot;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolMax;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTritonLayerFadeParams) == 0x000004, "Wrong alignment on FTritonLayerFadeParams");
static_assert(sizeof(FTritonLayerFadeParams) == 0x000014, "Wrong size on FTritonLayerFadeParams");
static_assert(offsetof(FTritonLayerFadeParams, RangeMin) == 0x000000, "Member 'FTritonLayerFadeParams::RangeMin' has a wrong offset!");
static_assert(offsetof(FTritonLayerFadeParams, VolMin) == 0x000004, "Member 'FTritonLayerFadeParams::VolMin' has a wrong offset!");
static_assert(offsetof(FTritonLayerFadeParams, Pivot) == 0x000008, "Member 'FTritonLayerFadeParams::Pivot' has a wrong offset!");
static_assert(offsetof(FTritonLayerFadeParams, RangeMax) == 0x00000C, "Member 'FTritonLayerFadeParams::RangeMax' has a wrong offset!");
static_assert(offsetof(FTritonLayerFadeParams, VolMax) == 0x000010, "Member 'FTritonLayerFadeParams::VolMax' has a wrong offset!");

// ScriptStruct TritonRuntime.FallbackAcousticData
// 0x0040 (0x0040 - 0x0000)
struct FFallbackAcousticData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwiseEmitterAcousticData              AcousticData;                                      // 0x000C(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Outdoorness;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 EarlyReflections;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallbackAcousticData) == 0x000008, "Wrong alignment on FFallbackAcousticData");
static_assert(sizeof(FFallbackAcousticData) == 0x000040, "Wrong size on FFallbackAcousticData");
static_assert(offsetof(FFallbackAcousticData, Location) == 0x000000, "Member 'FFallbackAcousticData::Location' has a wrong offset!");
static_assert(offsetof(FFallbackAcousticData, AcousticData) == 0x00000C, "Member 'FFallbackAcousticData::AcousticData' has a wrong offset!");
static_assert(offsetof(FFallbackAcousticData, Outdoorness) == 0x000028, "Member 'FFallbackAcousticData::Outdoorness' has a wrong offset!");
static_assert(offsetof(FFallbackAcousticData, EarlyReflections) == 0x000030, "Member 'FFallbackAcousticData::EarlyReflections' has a wrong offset!");

// ScriptStruct TritonRuntime.TritonProbeLayer
// 0x0178 (0x0178 - 0x0000)
struct FTritonProbeLayer final
{
public:
	TArray<struct FTritonProbeSet>                ProbeLocationSets;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTritonSimulationParams                SimulationParams;                                  // 0x0010(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTritonLayerFadeParams                 FadeParams;                                        // 0x0028(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTritonAdvancedParams                  AdvancedParams;                                    // 0x003C(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         DatasetPathOverride;                               // 0x0060(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 DatasetFile;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFallbackAcousticData>          FallbackAcousticData;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFallbackAcousticData                  FallbackAcousticDataAggregate;                     // 0x0090(0x0040)(Edit, NativeAccessSpecifierPublic)
	struct FWwiseAcousticEmulationParameters      FallbackAcousticEmulationParameters;               // 0x00D0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasGeneratedEarlyReflections;                     // 0x00E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x8F];                                      // 0x00E9(0x008F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTritonProbeLayer) == 0x000008, "Wrong alignment on FTritonProbeLayer");
static_assert(sizeof(FTritonProbeLayer) == 0x000178, "Wrong size on FTritonProbeLayer");
static_assert(offsetof(FTritonProbeLayer, ProbeLocationSets) == 0x000000, "Member 'FTritonProbeLayer::ProbeLocationSets' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, SimulationParams) == 0x000010, "Member 'FTritonProbeLayer::SimulationParams' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, FadeParams) == 0x000028, "Member 'FTritonProbeLayer::FadeParams' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, AdvancedParams) == 0x00003C, "Member 'FTritonProbeLayer::AdvancedParams' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, DatasetPathOverride) == 0x000060, "Member 'FTritonProbeLayer::DatasetPathOverride' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, DatasetFile) == 0x000070, "Member 'FTritonProbeLayer::DatasetFile' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, FallbackAcousticData) == 0x000080, "Member 'FTritonProbeLayer::FallbackAcousticData' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, FallbackAcousticDataAggregate) == 0x000090, "Member 'FTritonProbeLayer::FallbackAcousticDataAggregate' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, FallbackAcousticEmulationParameters) == 0x0000D0, "Member 'FTritonProbeLayer::FallbackAcousticEmulationParameters' has a wrong offset!");
static_assert(offsetof(FTritonProbeLayer, bHasGeneratedEarlyReflections) == 0x0000E8, "Member 'FTritonProbeLayer::bHasGeneratedEarlyReflections' has a wrong offset!");

}

