#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OakAbility_Gunner_CM_DLC1

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxAbilities_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass OakAbility_Gunner_CM_DLC1.OakAbility_Gunner_CM_DLC1_C
// 0x0088 (0x0180 - 0x00F8)
class UOakAbility_Gunner_CM_DLC1_C final : public UOakAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F8(0x0008)(Transient, DuplicateTransient)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_OakAbility_Gunner_CM_DLC1; // 0x0100(0x0028)()
	class AOakCharacter_Player*                   PlayerCharacterOwner;                              // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAbilityResourceController_ConditionalDamageModifier RsrcCntrlr_GbxAbilityResourceController_ConditionalDamageModifier_OakAbility_Gunner_CM_DLC1; // 0x0130(0x0028)()
	class ABPClass_ClassMod_C*                    BaseClassMod;                                      // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScalarTimer;                                       // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableValueHandle                  TickTime;                                          // 0x0168(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_OakAbility_Gunner_CM_DLC1(int32 EntryPoint);
	void OnWeaponChanged(class AWeapon* NewWeapon, class AWeapon* LastWeapon);
	void UnbindWeaponEvents(class AWeapon* OldWeapon);
	void BindWeaponEvents(class AWeapon* NewWeapon);
	void OnDeactivated();
	void UpdateScalar();
	void StopClassModBonus();
	void StartClassModBonus();
	void OnSwitchMode();
	void OnReloadStarted(class AWeapon* EventWeapon, bool bAutoReload);
	void OnPutDown(class AWeapon* EventWeapon);
	void OnClicked(uint8 InputChannel);
	void OnActivated();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"OakAbility_Gunner_CM_DLC1_C">();
	}
	static class UOakAbility_Gunner_CM_DLC1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOakAbility_Gunner_CM_DLC1_C>();
	}
};
static_assert(alignof(UOakAbility_Gunner_CM_DLC1_C) == 0x000008, "Wrong alignment on UOakAbility_Gunner_CM_DLC1_C");
static_assert(sizeof(UOakAbility_Gunner_CM_DLC1_C) == 0x000180, "Wrong size on UOakAbility_Gunner_CM_DLC1_C");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, UberGraphFrame) == 0x0000F8, "Member 'UOakAbility_Gunner_CM_DLC1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_OakAbility_Gunner_CM_DLC1) == 0x000100, "Member 'UOakAbility_Gunner_CM_DLC1_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_OakAbility_Gunner_CM_DLC1' has a wrong offset!");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, PlayerCharacterOwner) == 0x000128, "Member 'UOakAbility_Gunner_CM_DLC1_C::PlayerCharacterOwner' has a wrong offset!");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, RsrcCntrlr_GbxAbilityResourceController_ConditionalDamageModifier_OakAbility_Gunner_CM_DLC1) == 0x000130, "Member 'UOakAbility_Gunner_CM_DLC1_C::RsrcCntrlr_GbxAbilityResourceController_ConditionalDamageModifier_OakAbility_Gunner_CM_DLC1' has a wrong offset!");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, BaseClassMod) == 0x000158, "Member 'UOakAbility_Gunner_CM_DLC1_C::BaseClassMod' has a wrong offset!");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, ScalarTimer) == 0x000160, "Member 'UOakAbility_Gunner_CM_DLC1_C::ScalarTimer' has a wrong offset!");
static_assert(offsetof(UOakAbility_Gunner_CM_DLC1_C, TickTime) == 0x000168, "Member 'UOakAbility_Gunner_CM_DLC1_C::TickTime' has a wrong offset!");

}

