#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPAnim_HW_ATL

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPAnim_HW_ATL.BPAnim_HW_ATL_C.ExecuteUbergraph_BPAnim_HW_ATL
// 0x0030 (0x0030 - 0x0000)
struct BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0010(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewMode;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL) == 0x000004, "Wrong alignment on BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL");
static_assert(sizeof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL) == 0x000030, "Wrong size on BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, EntryPoint) == 0x000000, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, CallFunc_BreakTransform_Location) == 0x000004, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, CallFunc_BreakTransform_Rotation) == 0x000010, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, CallFunc_BreakTransform_Scale) == 0x00001C, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, K2Node_Event_NewMode) == 0x000028, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::K2Node_Event_NewMode' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, CallFunc_IsValid_ReturnValue) == 0x00002D, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002E, "Member 'BPAnim_HW_ATL_C_ExecuteUbergraph_BPAnim_HW_ATL::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BPAnim_HW_ATL.BPAnim_HW_ATL_C.BlueprintSwitchedMode
// 0x0004 (0x0004 - 0x0000)
struct BPAnim_HW_ATL_C_BlueprintSwitchedMode final
{
public:
	int32                                         NewMode;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPAnim_HW_ATL_C_BlueprintSwitchedMode) == 0x000004, "Wrong alignment on BPAnim_HW_ATL_C_BlueprintSwitchedMode");
static_assert(sizeof(BPAnim_HW_ATL_C_BlueprintSwitchedMode) == 0x000004, "Wrong size on BPAnim_HW_ATL_C_BlueprintSwitchedMode");
static_assert(offsetof(BPAnim_HW_ATL_C_BlueprintSwitchedMode, NewMode) == 0x000000, "Member 'BPAnim_HW_ATL_C_BlueprintSwitchedMode::NewMode' has a wrong offset!");

}

