#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_Rakkman

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"


namespace SDK::Params
{

// Function Ability_Rakkman.Ability_Rakkman_C.ExecuteUbergraph_Ability_Rakkman
// 0x0028 (0x0028 - 0x0000)
struct Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAbilityOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman) == 0x000008, "Wrong alignment on Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman");
static_assert(sizeof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman) == 0x000028, "Wrong size on Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman");
static_assert(offsetof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman, EntryPoint) == 0x000000, "Member 'Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman, CallFunc_GetAbilityOwner_ReturnValue) == 0x000008, "Member 'Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman::CallFunc_GetAbilityOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman, K2Node_DynamicCast_AsOak_Character) == 0x000010, "Member 'Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman, CallFunc_GetMovementComponent_ReturnValue) == 0x000020, "Member 'Ability_Rakkman_C_ExecuteUbergraph_Ability_Rakkman::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");

// Function Ability_Rakkman.Ability_Rakkman_C.CalculateAbilityState
// 0x0004 (0x0004 - 0x0000)
struct Ability_Rakkman_C_CalculateAbilityState final
{
public:
	EGbxAbilityState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGbxAbilityState                              CallFunc_CalculateAbilityState_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ability_Rakkman_C_CalculateAbilityState) == 0x000001, "Wrong alignment on Ability_Rakkman_C_CalculateAbilityState");
static_assert(sizeof(Ability_Rakkman_C_CalculateAbilityState) == 0x000004, "Wrong size on Ability_Rakkman_C_CalculateAbilityState");
static_assert(offsetof(Ability_Rakkman_C_CalculateAbilityState, ReturnValue) == 0x000000, "Member 'Ability_Rakkman_C_CalculateAbilityState::ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_CalculateAbilityState, CallFunc_IsFalling_ReturnValue) == 0x000001, "Member 'Ability_Rakkman_C_CalculateAbilityState::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_CalculateAbilityState, CallFunc_CalculateAbilityState_ReturnValue) == 0x000002, "Member 'Ability_Rakkman_C_CalculateAbilityState::CallFunc_CalculateAbilityState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_Rakkman_C_CalculateAbilityState, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'Ability_Rakkman_C_CalculateAbilityState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

