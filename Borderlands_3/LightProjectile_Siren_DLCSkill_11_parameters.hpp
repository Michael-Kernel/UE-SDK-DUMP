#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightProjectile_Siren_DLCSkill_11

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LightProjectile_Siren_DLCSkill_11.LightProjectile_Siren_DLCSkill_11_C.EnableProjectileHoming
// 0x0008 (0x0008 - 0x0000)
struct LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming final
{
public:
	class UOakLightProjectile*                    Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming) == 0x000008, "Wrong alignment on LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming");
static_assert(sizeof(LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming) == 0x000008, "Wrong size on LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming, Projectile) == 0x000000, "Member 'LightProjectile_Siren_DLCSkill_11_C_EnableProjectileHoming::Projectile' has a wrong offset!");

// Function LightProjectile_Siren_DLCSkill_11.LightProjectile_Siren_DLCSkill_11_C.TryEnableProjectileHoming
// 0x0010 (0x0010 - 0x0000)
struct LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming final
{
public:
	class UOakLightProjectile*                    Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming) == 0x000008, "Wrong alignment on LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming");
static_assert(sizeof(LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming) == 0x000010, "Wrong size on LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming, Projectile) == 0x000000, "Member 'LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000008, "Member 'LightProjectile_Siren_DLCSkill_11_C_TryEnableProjectileHoming::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");

// Function LightProjectile_Siren_DLCSkill_11.LightProjectile_Siren_DLCSkill_11_C.OnDamage
// 0x00A0 (0x00A0 - 0x0000)
struct LightProjectile_Siren_DLCSkill_11_C_OnDamage final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bCritical;                                         // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightProjectile_Siren_DLCSkill_11_C_OnDamage) == 0x000008, "Wrong alignment on LightProjectile_Siren_DLCSkill_11_C_OnDamage");
static_assert(sizeof(LightProjectile_Siren_DLCSkill_11_C_OnDamage) == 0x0000A0, "Wrong size on LightProjectile_Siren_DLCSkill_11_C_OnDamage");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_OnDamage, Projectile) == 0x000000, "Member 'LightProjectile_Siren_DLCSkill_11_C_OnDamage::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_OnDamage, Hit) == 0x000008, "Member 'LightProjectile_Siren_DLCSkill_11_C_OnDamage::Hit' has a wrong offset!");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_OnDamage, bCritical) == 0x000098, "Member 'LightProjectile_Siren_DLCSkill_11_C_OnDamage::bCritical' has a wrong offset!");

// Function LightProjectile_Siren_DLCSkill_11.LightProjectile_Siren_DLCSkill_11_C.OnImpact
// 0x0098 (0x0098 - 0x0000)
struct LightProjectile_Siren_DLCSkill_11_C_OnImpact final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(LightProjectile_Siren_DLCSkill_11_C_OnImpact) == 0x000008, "Wrong alignment on LightProjectile_Siren_DLCSkill_11_C_OnImpact");
static_assert(sizeof(LightProjectile_Siren_DLCSkill_11_C_OnImpact) == 0x000098, "Wrong size on LightProjectile_Siren_DLCSkill_11_C_OnImpact");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_OnImpact, Projectile) == 0x000000, "Member 'LightProjectile_Siren_DLCSkill_11_C_OnImpact::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_Siren_DLCSkill_11_C_OnImpact, Hit) == 0x000008, "Member 'LightProjectile_Siren_DLCSkill_11_C_OnImpact::Hit' has a wrong offset!");

}

