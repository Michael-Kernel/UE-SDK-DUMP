#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZoneMap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "OakGame_structs.hpp"
#include "EZoneMapMode_structs.hpp"
#include "ZoneMapSection_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_ZoneMap.BP_ZoneMap_C.ExecuteUbergraph_BP_ZoneMap
// 0x0410 (0x0410 - 0x0000)
struct BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key5;                         // 0x0010(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key4;                         // 0x0028(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key3;                         // 0x0040(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key2;                         // 0x0058(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable1;                              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable2;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable3;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable4;                              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable5;                              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key1;                         // 0x0090(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x00A8(0x0018)(HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Bool_ReturnValue;             // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable6;                              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable7;                              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable8;                              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable5;                               // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* NewlyFocusedPOI)> K2Node_CreateDelegate_OutputDelegate;              // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	float                                         Temp_float_Variable9;                              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable6;                               // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable10;                             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable11;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable7;                               // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable12;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable8;                               // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable9;                               // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable10;                              // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable11;                              // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable13;                             // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable14;                             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable12;                              // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable15;                             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable13;                              // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Axis_Value5;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Axis_Value4;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue1;       // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue1;             // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select2_Default;                            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select3_Default;                            // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Axis_Value3;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Axis_Value2;                    // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue2;       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue3;       // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue2;          // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue3;          // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select4_Default;                            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue2;             // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select5_Default;                            // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UZoneMapData*                           CallFunc_GetZoneMapForLevel_ReturnValue;           // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bInstantShutdown;               // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AB[0x1];                                      // 0x01AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Axis_Value1;                    // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Axis_Value;                     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue4;       // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue5;       // 0x01B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue4;          // 0x01B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue5;          // 0x01B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select6_Default;                            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select7_Default;                            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue8;         // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue9;         // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue3;             // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue4;             // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select8_Default;                            // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select9_Default;                            // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum3_CmpSuccess;                     // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable16;                             // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlanetData*                            CallFunc_GetZoneMapPlanet_ReturnValue;             // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetMapData_C*                       K2Node_DynamicCast_AsPlanet_Map_Data;              // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlanetData*                            CallFunc_GetZoneMapPlanet_ReturnValue1;            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable17;                             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UZoneMapData*                           K2Node_Event_InLevelData;                          // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetData*                            K2Node_Event_InPlanetData;                         // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetMapData_C*                       K2Node_DynamicCast_AsPlanet_Map_Data1;             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0xF];                                      // 0x0231(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_Transform;                            // 0x0240(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x027C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0288(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData*                           K2Node_Event_Level;                                // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UPlanetData*                            K2Node_Event_Planet;                               // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ZoneMap_C>        K2Node_DynamicCast_AsBPI_Zone_Map;                 // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable14;                              // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E3[0x1];                                      // 0x02E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select10_Default;                           // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue10;        // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue11;        // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue5;             // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select11_Default;                           // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_NewlyFocusedPOI;                // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable15;                              // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key6;                         // 0x0308(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum4_CmpSuccess;                     // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key7;                         // 0x0328(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location1;                 // 0x0344(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation1;                 // 0x0350(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale1;                    // 0x035C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0368(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0374(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue1;                        // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxProfile*                            CallFunc_GetPlayerProfile_ReturnValue;             // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakProfile*                            K2Node_DynamicCast_AsOak_Profile;                  // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue2;                        // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue3;                        // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue4;                        // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue4;         // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue5;         // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue6;         // 0x03AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Lerp_ReturnValue5;                        // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue7;         // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue8;         // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2[0x2];                                      // 0x03B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue6;                        // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetData*                            CallFunc_GetZoneMapPlanet_ReturnValue2;            // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select12_Default;                           // 0x03C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select13_Default;                           // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select14_Default;                           // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue7;                        // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UZoneMapData*>                   CallFunc_GetPlanetZoneMaps_OutZoneMaps;            // 0x03E0(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_GetPlanetZoneMaps_ReturnValue;            // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData*                           CallFunc_Array_Get_Item;                           // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue8;                        // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue9;         // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue10;        // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap) == 0x000010, "Wrong alignment on BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap");
static_assert(sizeof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap) == 0x000410, "Wrong size on BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, EntryPoint) == 0x000000, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable) == 0x000004, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key5) == 0x000010, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key4) == 0x000028, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key3) == 0x000040, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key2) == 0x000058, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable) == 0x000070, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable1) == 0x000074, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable2) == 0x000078, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable1) == 0x00007C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable3) == 0x000080, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable4) == 0x000084, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable2) == 0x000088, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable5) == 0x00008C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key1) == 0x000090, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key) == 0x0000A8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BuildString_Bool_ReturnValue) == 0x0000C0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BuildString_Bool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable3) == 0x0000D0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable6) == 0x0000D4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable4) == 0x0000D8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable7) == 0x0000DC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable8) == 0x0000E0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable8' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable5) == 0x0000E4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CreateDelegate_OutputDelegate) == 0x0000E8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable9) == 0x0000F8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable9' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable6) == 0x0000FC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable10) == 0x000100, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable10' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable11) == 0x000104, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable11' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable7) == 0x000108, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable12) == 0x00010C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable12' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable8) == 0x000110, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable8' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable9) == 0x000111, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable9' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable10) == 0x000112, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable10' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable11) == 0x000113, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable11' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable13) == 0x000114, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable13' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable14) == 0x000118, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable14' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable12) == 0x00011C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable12' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable15) == 0x000120, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable15' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable13) == 0x000124, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable13' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Event_DeltaSeconds) == 0x000128, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_Axis_Value5) == 0x00012C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_Axis_Value5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_Axis_Value4) == 0x000130, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_Axis_Value4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000134, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_FloatFloat_ReturnValue1) == 0x000135, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000136, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x000137, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select_Default) == 0x000138, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select1_Default) == 0x00013C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000140, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000144, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000148, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x00014C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_MapRangeClamped_ReturnValue) == 0x000150, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_MapRangeClamped_ReturnValue1) == 0x000154, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_MapRangeClamped_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select2_Default) == 0x000158, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select3_Default) == 0x00015C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000160, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x000164, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_Axis_Value3) == 0x000168, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_Axis_Value3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_Axis_Value2) == 0x00016C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_Axis_Value2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_FloatFloat_ReturnValue2) == 0x000170, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_FloatFloat_ReturnValue3) == 0x000171, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Greater_FloatFloat_ReturnValue2) == 0x000172, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Greater_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Greater_FloatFloat_ReturnValue3) == 0x000173, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Greater_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select4_Default) == 0x000174, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000178, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x00017C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_MapRangeClamped_ReturnValue2) == 0x000180, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_MapRangeClamped_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select5_Default) == 0x000184, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_SwitchEnum_CmpSuccess) == 0x000188, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000190, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetZoneMapForLevel_ReturnValue) == 0x0001A0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetZoneMapForLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_SwitchEnum1_CmpSuccess) == 0x0001A8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_bInstantShutdown) == 0x0001A9, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_bInstantShutdown' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_IsValid_ReturnValue) == 0x0001AA, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_Axis_Value1) == 0x0001AC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_Axis_Value1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_Axis_Value) == 0x0001B0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_Axis_Value' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_FloatFloat_ReturnValue4) == 0x0001B4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_FloatFloat_ReturnValue5) == 0x0001B5, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Greater_FloatFloat_ReturnValue4) == 0x0001B6, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Greater_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Greater_FloatFloat_ReturnValue5) == 0x0001B7, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Greater_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select6_Default) == 0x0001B8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select6_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select7_Default) == 0x0001BC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select7_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x0001C0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x0001C4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue8) == 0x0001C8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue9) == 0x0001CC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_MapRangeClamped_ReturnValue3) == 0x0001D0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_MapRangeClamped_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_MapRangeClamped_ReturnValue4) == 0x0001D4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_MapRangeClamped_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select8_Default) == 0x0001D8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select8_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select9_Default) == 0x0001DC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select9_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_SwitchEnum2_CmpSuccess) == 0x0001E0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_SwitchEnum3_CmpSuccess) == 0x0001E1, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_SwitchEnum3_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable16) == 0x0001E4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable16' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x0001E8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BooleanAND_ReturnValue) == 0x0001E9, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetZoneMapPlanet_ReturnValue) == 0x0001F0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetZoneMapPlanet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_AsPlanet_Map_Data) == 0x0001F8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_AsPlanet_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetZoneMapPlanet_ReturnValue1) == 0x000208, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetZoneMapPlanet_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_IsValid_ReturnValue1) == 0x000210, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_float_Variable17) == 0x000214, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_float_Variable17' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Event_InLevelData) == 0x000218, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Event_InLevelData' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Event_InPlanetData) == 0x000220, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Event_InPlanetData' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_AsPlanet_Map_Data1) == 0x000228, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_AsPlanet_Map_Data1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_bSuccess1) == 0x000230, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Event_Transform) == 0x000240, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Event_Transform' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BreakTransform_Location) == 0x000270, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BreakTransform_Rotation) == 0x00027C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BreakTransform_Scale) == 0x000288, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Event_Level) == 0x000298, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Event_Level' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetDisplayName_ReturnValue) == 0x0002A0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Event_Planet) == 0x0002B0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Event_Planet' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_AsBPI_Zone_Map) == 0x0002B8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_AsBPI_Zone_Map' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_bSuccess2) == 0x0002C8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_IsValid_ReturnValue2) == 0x0002C9, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetOwner_ReturnValue) == 0x0002D0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_AsOak_Player_Controller) == 0x0002D8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_bSuccess3) == 0x0002E0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0002E1, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable14) == 0x0002E2, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable14' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select10_Default) == 0x0002E4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select10_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue10) == 0x0002E8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_FloatFloat_ReturnValue11) == 0x0002EC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_FloatFloat_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_MapRangeClamped_ReturnValue5) == 0x0002F0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_MapRangeClamped_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select11_Default) == 0x0002F4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select11_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_CustomEvent_NewlyFocusedPOI) == 0x0002F8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_CustomEvent_NewlyFocusedPOI' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, Temp_bool_Variable15) == 0x000300, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::Temp_bool_Variable15' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Not_PreBool_ReturnValue) == 0x000301, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key6) == 0x000308, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_SwitchEnum4_CmpSuccess) == 0x000320, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_SwitchEnum4_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_InputKeyEvent_Key7) == 0x000328, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_InputKeyEvent_Key7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000340, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BreakTransform_Location1) == 0x000344, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BreakTransform_Location1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BreakTransform_Rotation1) == 0x000350, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BreakTransform_Rotation1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_BreakTransform_Scale1) == 0x00035C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_BreakTransform_Scale1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000368, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_VLerp_ReturnValue) == 0x000374, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue) == 0x000380, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue1) == 0x000384, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetPlayerProfile_ReturnValue) == 0x000388, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetPlayerProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_AsOak_Profile) == 0x000390, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_AsOak_Profile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_DynamicCast_bSuccess4) == 0x000398, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue2) == 0x00039C, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue3) == 0x0003A0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue4) == 0x0003A4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x0003A8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue4) == 0x0003A9, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue5) == 0x0003AA, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue6) == 0x0003AB, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue5) == 0x0003AC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue7) == 0x0003B0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue8) == 0x0003B1, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue6) == 0x0003B4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetZoneMapPlanet_ReturnValue2) == 0x0003B8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetZoneMapPlanet_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select12_Default) == 0x0003C0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select12_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select13_Default) == 0x0003CC, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select13_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, K2Node_Select14_Default) == 0x0003D0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::K2Node_Select14_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Add_FloatFloat_ReturnValue) == 0x0003D4, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue7) == 0x0003D8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetPlanetZoneMaps_OutZoneMaps) == 0x0003E0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetPlanetZoneMaps_OutZoneMaps' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_GetPlanetZoneMaps_ReturnValue) == 0x0003F0, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_GetPlanetZoneMaps_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Array_Get_Item) == 0x0003F8, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_SelectFloat_ReturnValue) == 0x000400, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_Lerp_ReturnValue8) == 0x000404, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_Lerp_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue9) == 0x000408, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap, CallFunc_EqualEqual_ByteByte_ReturnValue10) == 0x000409, "Member 'BP_ZoneMap_C_ExecuteUbergraph_BP_ZoneMap::CallFunc_EqualEqual_ByteByte_ReturnValue10' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.CustomEvent_0
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_CustomEvent_0 final
{
public:
	class AActor*                                 NewlyFocusedPOI;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_ZoneMap_C_CustomEvent_0");
static_assert(sizeof(BP_ZoneMap_C_CustomEvent_0) == 0x000008, "Wrong size on BP_ZoneMap_C_CustomEvent_0");
static_assert(offsetof(BP_ZoneMap_C_CustomEvent_0, NewlyFocusedPOI) == 0x000000, "Member 'BP_ZoneMap_C_CustomEvent_0::NewlyFocusedPOI' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_FocusOnPlanet
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_K2_FocusOnPlanet final
{
public:
	class UPlanetData*                            Planet;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_FocusOnPlanet) == 0x000008, "Wrong alignment on BP_ZoneMap_C_K2_FocusOnPlanet");
static_assert(sizeof(BP_ZoneMap_C_K2_FocusOnPlanet) == 0x000008, "Wrong size on BP_ZoneMap_C_K2_FocusOnPlanet");
static_assert(offsetof(BP_ZoneMap_C_K2_FocusOnPlanet, Planet) == 0x000000, "Member 'BP_ZoneMap_C_K2_FocusOnPlanet::Planet' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_FocusOnLevel
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_K2_FocusOnLevel final
{
public:
	class UZoneMapData*                           Level;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_FocusOnLevel) == 0x000008, "Wrong alignment on BP_ZoneMap_C_K2_FocusOnLevel");
static_assert(sizeof(BP_ZoneMap_C_K2_FocusOnLevel) == 0x000008, "Wrong size on BP_ZoneMap_C_K2_FocusOnLevel");
static_assert(offsetof(BP_ZoneMap_C_K2_FocusOnLevel, Level) == 0x000000, "Member 'BP_ZoneMap_C_K2_FocusOnLevel::Level' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_FocusOnTransform
// 0x0030 (0x0030 - 0x0000)
struct BP_ZoneMap_C_K2_FocusOnTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_K2_FocusOnTransform) == 0x000010, "Wrong alignment on BP_ZoneMap_C_K2_FocusOnTransform");
static_assert(sizeof(BP_ZoneMap_C_K2_FocusOnTransform) == 0x000030, "Wrong size on BP_ZoneMap_C_K2_FocusOnTransform");
static_assert(offsetof(BP_ZoneMap_C_K2_FocusOnTransform, Transform) == 0x000000, "Member 'BP_ZoneMap_C_K2_FocusOnTransform::Transform' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_GotoPlanetMap
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_K2_GotoPlanetMap final
{
public:
	class UPlanetData*                            InPlanetData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_GotoPlanetMap) == 0x000008, "Wrong alignment on BP_ZoneMap_C_K2_GotoPlanetMap");
static_assert(sizeof(BP_ZoneMap_C_K2_GotoPlanetMap) == 0x000008, "Wrong size on BP_ZoneMap_C_K2_GotoPlanetMap");
static_assert(offsetof(BP_ZoneMap_C_K2_GotoPlanetMap, InPlanetData) == 0x000000, "Member 'BP_ZoneMap_C_K2_GotoPlanetMap::InPlanetData' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_GotoLevelMap
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_K2_GotoLevelMap final
{
public:
	class UZoneMapData*                           InLevelData;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_GotoLevelMap) == 0x000008, "Wrong alignment on BP_ZoneMap_C_K2_GotoLevelMap");
static_assert(sizeof(BP_ZoneMap_C_K2_GotoLevelMap) == 0x000008, "Wrong size on BP_ZoneMap_C_K2_GotoLevelMap");
static_assert(offsetof(BP_ZoneMap_C_K2_GotoLevelMap, InLevelData) == 0x000000, "Member 'BP_ZoneMap_C_K2_GotoLevelMap::InLevelData' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.GbxMenu_LeftStickAxisY
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_GbxMenu_LeftStickAxisY final
{
public:
	float                                         Axis_Value;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_GbxMenu_LeftStickAxisY) == 0x000004, "Wrong alignment on BP_ZoneMap_C_GbxMenu_LeftStickAxisY");
static_assert(sizeof(BP_ZoneMap_C_GbxMenu_LeftStickAxisY) == 0x000004, "Wrong size on BP_ZoneMap_C_GbxMenu_LeftStickAxisY");
static_assert(offsetof(BP_ZoneMap_C_GbxMenu_LeftStickAxisY, Axis_Value) == 0x000000, "Member 'BP_ZoneMap_C_GbxMenu_LeftStickAxisY::Axis_Value' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.GbxMenu_LeftStickAxisX
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_GbxMenu_LeftStickAxisX final
{
public:
	float                                         Axis_Value;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_GbxMenu_LeftStickAxisX) == 0x000004, "Wrong alignment on BP_ZoneMap_C_GbxMenu_LeftStickAxisX");
static_assert(sizeof(BP_ZoneMap_C_GbxMenu_LeftStickAxisX) == 0x000004, "Wrong size on BP_ZoneMap_C_GbxMenu_LeftStickAxisX");
static_assert(offsetof(BP_ZoneMap_C_GbxMenu_LeftStickAxisX, Axis_Value) == 0x000000, "Member 'BP_ZoneMap_C_GbxMenu_LeftStickAxisX::Axis_Value' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Shutdown Map
// 0x0001 (0x0001 - 0x0000)
struct BP_ZoneMap_C_Shutdown_Map final
{
public:
	bool                                          bInstantShutdown;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Shutdown_Map) == 0x000001, "Wrong alignment on BP_ZoneMap_C_Shutdown_Map");
static_assert(sizeof(BP_ZoneMap_C_Shutdown_Map) == 0x000001, "Wrong size on BP_ZoneMap_C_Shutdown_Map");
static_assert(offsetof(BP_ZoneMap_C_Shutdown_Map, bInstantShutdown) == 0x000000, "Member 'BP_ZoneMap_C_Shutdown_Map::bInstantShutdown' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.OakMenu_MapZoomIn
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_OakMenu_MapZoomIn final
{
public:
	float                                         Axis_Value;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_OakMenu_MapZoomIn) == 0x000004, "Wrong alignment on BP_ZoneMap_C_OakMenu_MapZoomIn");
static_assert(sizeof(BP_ZoneMap_C_OakMenu_MapZoomIn) == 0x000004, "Wrong size on BP_ZoneMap_C_OakMenu_MapZoomIn");
static_assert(offsetof(BP_ZoneMap_C_OakMenu_MapZoomIn, Axis_Value) == 0x000000, "Member 'BP_ZoneMap_C_OakMenu_MapZoomIn::Axis_Value' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.OakMenu_MapZoomOut
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_OakMenu_MapZoomOut final
{
public:
	float                                         Axis_Value;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_OakMenu_MapZoomOut) == 0x000004, "Wrong alignment on BP_ZoneMap_C_OakMenu_MapZoomOut");
static_assert(sizeof(BP_ZoneMap_C_OakMenu_MapZoomOut) == 0x000004, "Wrong size on BP_ZoneMap_C_OakMenu_MapZoomOut");
static_assert(offsetof(BP_ZoneMap_C_OakMenu_MapZoomOut, Axis_Value) == 0x000000, "Member 'BP_ZoneMap_C_OakMenu_MapZoomOut::Axis_Value' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.GbxMenu_RightStickAxisY
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_GbxMenu_RightStickAxisY final
{
public:
	float                                         Axis_Value;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_GbxMenu_RightStickAxisY) == 0x000004, "Wrong alignment on BP_ZoneMap_C_GbxMenu_RightStickAxisY");
static_assert(sizeof(BP_ZoneMap_C_GbxMenu_RightStickAxisY) == 0x000004, "Wrong size on BP_ZoneMap_C_GbxMenu_RightStickAxisY");
static_assert(offsetof(BP_ZoneMap_C_GbxMenu_RightStickAxisY, Axis_Value) == 0x000000, "Member 'BP_ZoneMap_C_GbxMenu_RightStickAxisY::Axis_Value' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.GbxMenu_RightStickAxisX
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_GbxMenu_RightStickAxisX final
{
public:
	float                                         Axis_Value;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_GbxMenu_RightStickAxisX) == 0x000004, "Wrong alignment on BP_ZoneMap_C_GbxMenu_RightStickAxisX");
static_assert(sizeof(BP_ZoneMap_C_GbxMenu_RightStickAxisX) == 0x000004, "Wrong size on BP_ZoneMap_C_GbxMenu_RightStickAxisX");
static_assert(offsetof(BP_ZoneMap_C_GbxMenu_RightStickAxisX, Axis_Value) == 0x000000, "Member 'BP_ZoneMap_C_GbxMenu_RightStickAxisX::Axis_Value' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_ZoneMap_C_ReceiveTick");
static_assert(sizeof(BP_ZoneMap_C_ReceiveTick) == 0x000004, "Wrong size on BP_ZoneMap_C_ReceiveTick");
static_assert(offsetof(BP_ZoneMap_C_ReceiveTick, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_ReceiveTick::DeltaSeconds_0' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_8::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_9::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_10::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_11::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_12::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_13::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_14::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15");
static_assert(sizeof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15) == 0x000018, "Wrong size on BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15");
static_assert(offsetof(BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15, Key) == 0x000000, "Member 'BP_ZoneMap_C_InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_15::Key' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.UserConstructionScript
// 0x0640 (0x0640 - 0x0000)
struct BP_ZoneMap_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeightedBlendable                     K2Node_MakeStruct_WeightedBlendable;               // 0x0008(0x0010)(NoDestructor)
	TArray<struct FWeightedBlendable>             K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	struct FWeightedBlendables                    K2Node_MakeStruct_WeightedBlendables;              // 0x0028(0x0010)()
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   K2Node_MakeStruct_PostProcessSettings;             // 0x0040(0x0600)()
};
static_assert(alignof(BP_ZoneMap_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_ZoneMap_C_UserConstructionScript");
static_assert(sizeof(BP_ZoneMap_C_UserConstructionScript) == 0x000640, "Wrong size on BP_ZoneMap_C_UserConstructionScript");
static_assert(offsetof(BP_ZoneMap_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_ZoneMap_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_UserConstructionScript, K2Node_MakeStruct_WeightedBlendable) == 0x000008, "Member 'BP_ZoneMap_C_UserConstructionScript::K2Node_MakeStruct_WeightedBlendable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_ZoneMap_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_UserConstructionScript, K2Node_MakeStruct_WeightedBlendables) == 0x000028, "Member 'BP_ZoneMap_C_UserConstructionScript::K2Node_MakeStruct_WeightedBlendables' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_UserConstructionScript, K2Node_MakeStruct_PostProcessSettings) == 0x000040, "Member 'BP_ZoneMap_C_UserConstructionScript::K2Node_MakeStruct_PostProcessSettings' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Add Decoration Meshes
// 0x0020 (0x0020 - 0x0000)
struct BP_ZoneMap_C_Add_Decoration_Meshes final
{
public:
	TArray<class AActor*>                         DecoActors;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	class UMaterialInstanceDynamic*               Deco_DMI;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   New_Mesh;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Add_Decoration_Meshes) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Add_Decoration_Meshes");
static_assert(sizeof(BP_ZoneMap_C_Add_Decoration_Meshes) == 0x000020, "Wrong size on BP_ZoneMap_C_Add_Decoration_Meshes");
static_assert(offsetof(BP_ZoneMap_C_Add_Decoration_Meshes, DecoActors) == 0x000000, "Member 'BP_ZoneMap_C_Add_Decoration_Meshes::DecoActors' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Decoration_Meshes, Deco_DMI) == 0x000010, "Member 'BP_ZoneMap_C_Add_Decoration_Meshes::Deco_DMI' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Decoration_Meshes, New_Mesh) == 0x000018, "Member 'BP_ZoneMap_C_Add_Decoration_Meshes::New_Mesh' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Reset Map Orienation 
// 0x0200 (0x0200 - 0x0000)
struct BP_ZoneMap_C_Reset_Map_Orienation_ final
{
public:
	bool                                          Snap_to_Player;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Reset_Orientation;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Instant;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0018(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Get_Player_s_Current_Zone_Section_Section_Index; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00B0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0144(0x000C)(IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue1;                  // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0164(0x000C)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0170(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_ZoneMap_C_Reset_Map_Orienation_) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Reset_Map_Orienation_");
static_assert(sizeof(BP_ZoneMap_C_Reset_Map_Orienation_) == 0x000200, "Wrong size on BP_ZoneMap_C_Reset_Map_Orienation_");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, Snap_to_Player) == 0x000000, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::Snap_to_Player' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, Reset_Orientation) == 0x000001, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::Reset_Orientation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, Instant) == 0x000002, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::Instant' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_IsValid_ReturnValue1) == 0x000011, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000018, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_Get_Player_s_Current_Zone_Section_Section_Index) == 0x0000A8, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_Get_Player_s_Current_Zone_Section_Section_Index' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000B0, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_Greater_IntInt_ReturnValue) == 0x000140, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_GetControlRotation_ReturnValue) == 0x000144, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_K2_GetPawn_ReturnValue1) == 0x000150, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_K2_GetPawn_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_BreakRotator_Roll) == 0x000158, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_BreakRotator_Pitch) == 0x00015C, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_BreakRotator_Yaw) == 0x000160, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_MakeRotator_ReturnValue) == 0x000164, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Reset_Map_Orienation_, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000170, "Member 'BP_ZoneMap_C_Reset_Map_Orienation_::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Set Pivot To Actor
// 0x00D8 (0x00D8 - 0x0000)
struct BP_ZoneMap_C_Set_Pivot_To_Actor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInstant;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0040(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Set_Pivot_To_Actor) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Set_Pivot_To_Actor");
static_assert(sizeof(BP_ZoneMap_C_Set_Pivot_To_Actor) == 0x0000D8, "Wrong size on BP_ZoneMap_C_Set_Pivot_To_Actor");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, Actor) == 0x000000, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::Actor' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, bInstant) == 0x000008, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::bInstant' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000018, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000030, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000040, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_To_Actor, K2Node_SwitchEnum_CmpSuccess) == 0x0000D0, "Member 'BP_ZoneMap_C_Set_Pivot_To_Actor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InitializeMapForLevel
// 0x0030 (0x0030 - 0x0000)
struct BP_ZoneMap_C_InitializeMapForLevel final
{
public:
	class UZoneMapData*                           Level_Map_Data;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UZoneMapMeshData*                       Zone_Map_Mesh_Data;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UZoneMapMeshData*                       CallFunc_GetZoneMeshData_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsViewingCurrentLevel_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData_Base_C*                    K2Node_DynamicCast_AsZone_Map_Data_Base;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_InitializeMapForLevel) == 0x000008, "Wrong alignment on BP_ZoneMap_C_InitializeMapForLevel");
static_assert(sizeof(BP_ZoneMap_C_InitializeMapForLevel) == 0x000030, "Wrong size on BP_ZoneMap_C_InitializeMapForLevel");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, Level_Map_Data) == 0x000000, "Member 'BP_ZoneMap_C_InitializeMapForLevel::Level_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, Zone_Map_Mesh_Data) == 0x000008, "Member 'BP_ZoneMap_C_InitializeMapForLevel::Zone_Map_Mesh_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, CallFunc_GetZoneMeshData_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_InitializeMapForLevel::CallFunc_GetZoneMeshData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_InitializeMapForLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, CallFunc_IsViewingCurrentLevel_ReturnValue) == 0x000019, "Member 'BP_ZoneMap_C_InitializeMapForLevel::CallFunc_IsViewingCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, K2Node_DynamicCast_AsZone_Map_Data_Base) == 0x000020, "Member 'BP_ZoneMap_C_InitializeMapForLevel::K2Node_DynamicCast_AsZone_Map_Data_Base' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForLevel, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_ZoneMap_C_InitializeMapForLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Update Transforms For Level Map
// 0x02E0 (0x02E0 - 0x0000)
struct BP_ZoneMap_C_Update_Transforms_For_Level_Map final
{
public:
	float                                         Delta_Seconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZoneMapMovementMode                          Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZoneMapMovementMode                          Temp_byte_Variable1;                               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue1;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue2;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue3;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue4;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue1;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue5;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x008C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue2;             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue1;            // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinePlaneIntersection_OriginNormal_T;     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LinePlaneIntersection_OriginNormal_Intersection; // 0x00E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue; // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x00FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue2;            // 0x0118(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x0124(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceForPOI_OutZoneMapTraceLocation;      // 0x013C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceForPOI_OutZoneMapTraceHasHit;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue4;        // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x015C(0x000C)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0168(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x01F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue5;        // 0x0208(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue3;             // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue6;        // 0x0218(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue6;                         // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue7;                         // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetNewScaleTargetNative_ZoomDelta;        // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0238(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select1_Default;                            // 0x0244(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0250(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_ZoneMap_C_Update_Transforms_For_Level_Map) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Update_Transforms_For_Level_Map");
static_assert(sizeof(BP_ZoneMap_C_Update_Transforms_For_Level_Map) == 0x0002E0, "Wrong size on BP_ZoneMap_C_Update_Transforms_For_Level_Map");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, Delta_Seconds) == 0x000000, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, Temp_byte_Variable) == 0x000004, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x00001C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000028, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, Temp_byte_Variable1) == 0x000048, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000049, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue) == 0x00004C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue1) == 0x000050, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BreakVector_X) == 0x000054, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BreakVector_Y) == 0x000058, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BreakVector_Z) == 0x00005C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000060, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_MakeVector_ReturnValue) == 0x000064, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue2) == 0x000074, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue3) == 0x000078, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00007C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue4) == 0x000080, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Less_FloatFloat_ReturnValue1) == 0x000084, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Less_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue5) == 0x000088, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x00008C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000098, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Less_FloatFloat_ReturnValue2) == 0x00009C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Less_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_GetForwardVector_ReturnValue) == 0x0000A0, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BooleanAND_ReturnValue) == 0x0000AC, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BooleanAND_ReturnValue1) == 0x0000AD, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_GetForwardVector_ReturnValue1) == 0x0000B0, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_GetForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BooleanAND_ReturnValue2) == 0x0000BC, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x0000C0, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_BooleanAND_ReturnValue3) == 0x0000CC, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_LinePlaneIntersection_OriginNormal_T) == 0x0000DC, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_LinePlaneIntersection_OriginNormal_T' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_LinePlaneIntersection_OriginNormal_Intersection) == 0x0000E0, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_LinePlaneIntersection_OriginNormal_Intersection' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue) == 0x0000EC, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000F0, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x0000FC, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_VSize_ReturnValue) == 0x000108, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_FInterpTo_ReturnValue) == 0x00010C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000110, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000114, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_GetForwardVector_ReturnValue2) == 0x000118, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_GetForwardVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x000124, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_VectorVector_ReturnValue1) == 0x000130, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_TraceForPOI_OutZoneMapTraceLocation) == 0x00013C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_TraceForPOI_OutZoneMapTraceLocation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_TraceForPOI_OutZoneMapTraceHasHit) == 0x000148, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_TraceForPOI_OutZoneMapTraceHasHit' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue4) == 0x00014C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, K2Node_Select_Default) == 0x000158, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_MakeRotator_ReturnValue) == 0x00015C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000168, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x0001F8, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_VSize_ReturnValue1) == 0x000204, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue5) == 0x000208, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Less_FloatFloat_ReturnValue3) == 0x000214, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Less_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Multiply_VectorFloat_ReturnValue6) == 0x000218, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Multiply_VectorFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue6) == 0x000224, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Abs_ReturnValue7) == 0x000228, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Abs_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Add_FloatFloat_ReturnValue4) == 0x00022C, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000230, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, K2Node_SwitchEnum_CmpSuccess) == 0x000231, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_GetNewScaleTargetNative_ZoomDelta) == 0x000234, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_GetNewScaleTargetNative_ZoomDelta' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_VInterpTo_ReturnValue) == 0x000238, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, K2Node_Select1_Default) == 0x000244, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Transforms_For_Level_Map, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000250, "Member 'BP_ZoneMap_C_Update_Transforms_For_Level_Map::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Initialize Point Cloud Particle System
// 0x00D0 (0x00D0 - 0x0000)
struct BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System final
{
public:
	class UZoneMapMeshData*                       Zone_Map_Mesh_Data;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_BuildString_Int_ReturnValue;              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FZoneMapGPUPointCloudData              CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue1;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable;                              // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue1;              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateNamedDynamicMaterialInstance_ReturnValue; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System) == 0x000010, "Wrong alignment on BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System");
static_assert(sizeof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System) == 0x0000D0, "Wrong size on BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, Zone_Map_Mesh_Data) == 0x000000, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::Zone_Map_Mesh_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_BuildString_Int_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_BuildString_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Conv_IntToString_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Conv_StringToName_ReturnValue1) == 0x000058, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Conv_StringToName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, Temp_struct_Variable) == 0x000060, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Array_Length_ReturnValue1) == 0x000090, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Greater_IntInt_ReturnValue1) == 0x000094, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Greater_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_AddComponent_ReturnValue) == 0x000098, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, Temp_bool_True_if_break_was_hit_Variable) == 0x0000A0, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_IsValid_ReturnValue) == 0x0000A2, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_CreateNamedDynamicMaterialInstance_ReturnValue) == 0x0000A8, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_CreateNamedDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Array_Add_ReturnValue) == 0x0000B0, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_IsValid_ReturnValue1) == 0x0000B4, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, Temp_int_Loop_Counter_Variable) == 0x0000B8, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000BC, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Less_IntInt_ReturnValue) == 0x0000BD, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System, CallFunc_BooleanAND_ReturnValue) == 0x0000C4, "Member 'BP_ZoneMap_C_Initialize_Point_Cloud_Particle_System::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Box Constraint
// 0x0084 (0x0084 - 0x0000)
struct BP_ZoneMap_C_Box_Constraint final
{
public:
	struct FVector                                Vector_To_Constrain;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Bounds_Origin;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Bounds_Extent;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Result;                                            // 0x0024(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Box_Constraint) == 0x000004, "Wrong alignment on BP_ZoneMap_C_Box_Constraint");
static_assert(sizeof(BP_ZoneMap_C_Box_Constraint) == 0x000084, "Wrong size on BP_ZoneMap_C_Box_Constraint");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, Vector_To_Constrain) == 0x000000, "Member 'BP_ZoneMap_C_Box_Constraint::Vector_To_Constrain' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, Bounds_Origin) == 0x00000C, "Member 'BP_ZoneMap_C_Box_Constraint::Bounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, Bounds_Extent) == 0x000018, "Member 'BP_ZoneMap_C_Box_Constraint::Bounds_Extent' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, Result) == 0x000024, "Member 'BP_ZoneMap_C_Box_Constraint::Result' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_X) == 0x000030, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_Y) == 0x000034, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_Z) == 0x000038, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_X1) == 0x000054, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_Y1) == 0x000058, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_Z1) == 0x00005C, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_X2) == 0x000060, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_Y2) == 0x000064, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_BreakVector_Z2) == 0x000068, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_FClamp_ReturnValue) == 0x00006C, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_FClamp_ReturnValue1) == 0x000070, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_FClamp_ReturnValue2) == 0x000074, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Box_Constraint, CallFunc_MakeVector_ReturnValue) == 0x000078, "Member 'BP_ZoneMap_C_Box_Constraint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Cycle Zone Map Sections
// 0x0080 (0x0080 - 0x0000)
struct BP_ZoneMap_C_Cycle_Zone_Map_Sections final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cycle_Direction;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneMapSection                        CallFunc_Array_Get_Item;                           // 0x0010(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0054(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue1;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Cycle_Zone_Map_Sections) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Cycle_Zone_Map_Sections");
static_assert(sizeof(BP_ZoneMap_C_Cycle_Zone_Map_Sections) == 0x000080, "Wrong size on BP_ZoneMap_C_Cycle_Zone_Map_Sections");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, Direction) == 0x000000, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::Direction' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, Cycle_Direction) == 0x000004, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::Cycle_Direction' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Less_IntInt_ReturnValue) == 0x000009, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000054, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Add_IntInt_ReturnValue1) == 0x000064, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000068, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Less_IntInt_ReturnValue1) == 0x000069, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_SelectInt_ReturnValue) == 0x00006C, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Array_Length_ReturnValue1) == 0x000070, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_Subtract_IntInt_ReturnValue) == 0x000074, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Cycle_Zone_Map_Sections, CallFunc_SelectInt_ReturnValue1) == 0x000078, "Member 'BP_ZoneMap_C_Cycle_Zone_Map_Sections::CallFunc_SelectInt_ReturnValue1' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get Player's Current Zone Section
// 0x00F0 (0x00F0 - 0x0000)
struct BP_ZoneMap_C_Get_Player_s_Current_Zone_Section final
{
public:
	int32                                         Section_Index;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Distances;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MinOfFloatArray_IndexOfMinValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MinOfFloatArray_MinValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FZoneMapSection                        CallFunc_Array_Get_Item;                           // 0x0040(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue1;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0098(0x0010)(ZeroConstructor, ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item2;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ZoneMapSection_C*                   K2Node_DynamicCast_AsBP_Zone_Map_Section;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_Player_s_Current_Zone_Section");
static_assert(sizeof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section) == 0x0000F0, "Wrong size on BP_ZoneMap_C_Get_Player_s_Current_Zone_Section");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, Section_Index) == 0x000000, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::Section_Index' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, Distances) == 0x000008, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::Distances' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, Temp_int_Loop_Counter_Variable1) == 0x00001C, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Add_IntInt_ReturnValue1) == 0x000024, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, Temp_int_Array_Index_Variable1) == 0x00002C, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_MinOfFloatArray_IndexOfMinValue) == 0x000030, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_MinOfFloatArray_IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_MinOfFloatArray_MinValue) == 0x000034, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_MinOfFloatArray_MinValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_K2_GetPawn_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_IsValid_ReturnValue) == 0x000085, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_K2_GetPawn_ReturnValue1) == 0x000088, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_K2_GetPawn_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_IsValid_ReturnValue1) == 0x000090, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000098, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Get_Item1) == 0x0000A8, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Get_Item2) == 0x0000B0, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_GetDistanceTo_ReturnValue) == 0x0000B8, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, K2Node_DynamicCast_AsBP_Zone_Map_Section) == 0x0000C0, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::K2Node_DynamicCast_AsBP_Zone_Map_Section' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_GetObjectName_ReturnValue) == 0x0000D0, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Length_ReturnValue1) == 0x0000E0, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000E4, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Less_IntInt_ReturnValue1) == 0x0000E5, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_Array_Length_ReturnValue2) == 0x0000E8, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Player_s_Current_Zone_Section, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000EC, "Member 'BP_ZoneMap_C_Get_Player_s_Current_Zone_Section::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Add Zone Map Mesh Sections
// 0x0120 (0x0120 - 0x0000)
struct BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections final
{
public:
	class UZoneMapMeshData*                       Zone_Map_Mesh_Data;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Zone_Map_Wireframe_Parent_DMI;                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Zone_Map_Solid_Parent_DMI;                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FZoneMapMeshListEntry                  CallFunc_Array_Get_Item;                           // 0x0020(0x0038)(NoDestructor)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue1; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x00E0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue1;                // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue1;               // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue1;        // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue3;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections) == 0x000010, "Wrong alignment on BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections");
static_assert(sizeof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections) == 0x000120, "Wrong size on BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, Zone_Map_Mesh_Data) == 0x000000, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::Zone_Map_Mesh_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, Zone_Map_Wireframe_Parent_DMI) == 0x000008, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::Zone_Map_Wireframe_Parent_DMI' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, Zone_Map_Solid_Parent_DMI) == 0x000010, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::Zone_Map_Solid_Parent_DMI' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_MakeTransform_ReturnValue) == 0x000060, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_GetDisplayName_ReturnValue) == 0x000090, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_AddComponent_ReturnValue) == 0x0000A0, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_SetStaticMesh_ReturnValue) == 0x0000A8, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, Temp_int_Loop_Counter_Variable) == 0x0000AC, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Array_Add_ReturnValue) == 0x0000B0, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_IsValid_ReturnValue) == 0x0000BC, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_IsValid_ReturnValue1) == 0x0000BD, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_IsValid_ReturnValue2) == 0x0000BE, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0000C0, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Array_Add_ReturnValue1) == 0x0000C8, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_CreateDynamicMaterialInstance_ReturnValue1) == 0x0000D0, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_CreateDynamicMaterialInstance_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Array_Add_ReturnValue2) == 0x0000D8, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000DC, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, Temp_struct_Variable) == 0x0000E0, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_AddComponent_ReturnValue1) == 0x000110, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_AddComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_SetStaticMesh_ReturnValue1) == 0x000118, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_SetStaticMesh_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_K2_AttachToComponent_ReturnValue1) == 0x000119, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_K2_AttachToComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections, CallFunc_Array_Add_ReturnValue3) == 0x00011C, "Member 'BP_ZoneMap_C_Add_Zone_Map_Mesh_Sections::CallFunc_Array_Add_ReturnValue3' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get New Transform Target
// 0x0250 (0x0250 - 0x0000)
struct BP_ZoneMap_C_Get_New_Transform_Target final
{
public:
	float                                         Delta_Seconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformMin;                                      // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformMax;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransformBuffer;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Global_Transform_Scale;                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom_Delta;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ZoomCurve;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MyDeflection;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MyDeltaSeconds;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0050(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0068(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue1;            // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue1;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F[0x1];                                       // 0x009F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue1;       // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EZoneMapMode                                  Temp_byte_Variable;                                // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Temp_object_Variable;                              // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue2;           // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue3;           // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue4;           // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue5;           // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue3;         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0174(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x0184(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0194(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x01B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Temp_object_Variable1;                             // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            K2Node_Select1_Default;                            // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue1;               // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue8;         // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue9;         // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue10;        // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue4;        // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0210(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x021C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x0240(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_New_Transform_Target) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_New_Transform_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_New_Transform_Target) == 0x000250, "Wrong size on BP_ZoneMap_C_Get_New_Transform_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Delta_Seconds) == 0x000000, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, TransformMin) == 0x000004, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::TransformMin' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, TransformMax) == 0x000010, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::TransformMax' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, TransformBuffer) == 0x00001C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::TransformBuffer' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Global_Transform_Scale) == 0x000020, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Global_Transform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Zoom_Delta) == 0x000024, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Zoom_Delta' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, ZoomCurve) == 0x000028, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::ZoomCurve' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, MyDeflection) == 0x000030, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::MyDeflection' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, MyDeltaSeconds) == 0x000034, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::MyDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Temp_bool_Variable) == 0x000038, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Temp_float_Variable) == 0x00003C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_GetForwardVector_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakRotator_Roll) == 0x00005C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakRotator_Pitch) == 0x000060, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakRotator_Yaw) == 0x000064, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_MakeRotator_ReturnValue) == 0x000068, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_GetForwardVector_ReturnValue1) == 0x000074, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_GetForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Abs_ReturnValue) == 0x000080, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_GetRightVector_ReturnValue) == 0x000084, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Abs_ReturnValue1) == 0x000090, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Abs_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_GetFloatValue_ReturnValue) == 0x000094, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_FloatFloat_ReturnValue) == 0x000098, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Not_PreBool_ReturnValue1) == 0x00009D, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00009E, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_EqualEqual_FloatFloat_ReturnValue1) == 0x0000A4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_EqualEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BooleanOR_ReturnValue) == 0x0000A5, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Temp_byte_Variable) == 0x0000A6, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_FloatFloat_ReturnValue1) == 0x0000A8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000AC, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000B0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0000CC, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_SelectVector_ReturnValue) == 0x0000D8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Temp_object_Variable) == 0x0000F0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_MakeLiteralFloat_ReturnValue) == 0x0000FC, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_X) == 0x000100, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_Y) == 0x000104, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_Z) == 0x000108, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_X1) == 0x00010C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_Y1) == 0x000110, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_Z1) == 0x000114, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000118, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x00011C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000120, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000124, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_IntFloat_ReturnValue2) == 0x000128, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_IntFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_IntFloat_ReturnValue3) == 0x00012C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_IntFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000130, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x000134, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_IntFloat_ReturnValue4) == 0x000138, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_IntFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_IntFloat_ReturnValue5) == 0x00013C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_IntFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000140, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_FloatFloat_ReturnValue4) == 0x000144, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_IsValid_ReturnValue) == 0x000148, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Subtract_FloatFloat_ReturnValue3) == 0x00014C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Subtract_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000150, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000154, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x000160, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BooleanAND_ReturnValue) == 0x000161, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x000164, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BooleanAND_ReturnValue1) == 0x000170, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_VectorVector_ReturnValue1) == 0x000174, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BooleanAND_ReturnValue2) == 0x000180, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x000184, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BooleanAND_ReturnValue3) == 0x000190, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Normal_ReturnValue) == 0x000194, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x0001A0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x0001A4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_MakeVector_ReturnValue) == 0x0001A8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_VSize_ReturnValue) == 0x0001B4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_MakeVector_ReturnValue1) == 0x0001B8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_VSize_ReturnValue1) == 0x0001C4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001C8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, K2Node_Select_Default) == 0x0001CC, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_MapRangeClamped_ReturnValue) == 0x0001D0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, Temp_object_Variable1) == 0x0001D8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x0001E0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, K2Node_Select1_Default) == 0x0001E8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x0001F0, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_GetFloatValue_ReturnValue1) == 0x0001F4, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_GetFloatValue_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue8) == 0x0001F8, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue9) == 0x0001FC, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_FloatFloat_ReturnValue10) == 0x000200, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_FloatFloat_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Multiply_VectorFloat_ReturnValue4) == 0x000204, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Multiply_VectorFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_VectorVector_ReturnValue2) == 0x000210, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_Add_VectorVector_ReturnValue3) == 0x00021C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_X2) == 0x000228, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_Y2) == 0x00022C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_BreakVector_Z2) == 0x000230, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_FClamp_ReturnValue) == 0x000234, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_FClamp_ReturnValue1) == 0x000238, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_FClamp_ReturnValue2) == 0x00023C, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Transform_Target, CallFunc_MakeVector_ReturnValue2) == 0x000240, "Member 'BP_ZoneMap_C_Get_New_Transform_Target::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Set Pivot to Actor World Location
// 0x0038 (0x0038 - 0x0000)
struct BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location final
{
public:
	struct FVector                                World_Location;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location");
static_assert(sizeof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location) == 0x000038, "Wrong size on BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, World_Location) == 0x000000, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::World_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000018, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'BP_ZoneMap_C_Set_Pivot_to_Actor_World_Location::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InitializeMapForPlanet
// 0x0960 (0x0960 - 0x0000)
struct BP_ZoneMap_C_InitializeMapForPlanet final
{
public:
	class UPlanetData*                            Planet_Data;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FZoneMapPOIEntry>               Travel_Station_Entries;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UPlanetData*                            Local_Planet_Data;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetMapData_C*                       K2Node_DynamicCast_AsPlanet_Map_Data;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetPlanetClass_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0040(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00D0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0160(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult1;      // 0x01F0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FWeightedBlendable>             K2Node_MakeArray_Array;                            // 0x0280(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeightedBlendables                    K2Node_MakeStruct_WeightedBlendables;              // 0x0298(0x0010)()
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   K2Node_MakeStruct_PostProcessSettings;             // 0x02B0(0x0600)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x08B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B4[0xC];                                      // 0x08B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x08C0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AZoneMapPlanetViewer*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ZoneMap_Planet_C*                   K2Node_DynamicCast_AsBP_Zone_Map_Planet;           // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_909[0x7];                                      // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UZoneMapData*>                   CallFunc_GetPlanetZoneMaps_OutZoneMaps;            // 0x0910(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_GetPlanetZoneMaps_ReturnValue;            // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData*                           CallFunc_Array_Get_Item;                           // 0x0928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0930(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData_Base_C*                    K2Node_DynamicCast_AsZone_Map_Data_Base;           // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0941(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_942[0x6];                                      // 0x0942(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1; // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlanetPOI_C*                        CallFunc_FinishSpawningActor_ReturnValue1;         // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_InitializeMapForPlanet) == 0x000010, "Wrong alignment on BP_ZoneMap_C_InitializeMapForPlanet");
static_assert(sizeof(BP_ZoneMap_C_InitializeMapForPlanet) == 0x000960, "Wrong size on BP_ZoneMap_C_InitializeMapForPlanet");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, Planet_Data) == 0x000000, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::Planet_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, Travel_Station_Entries) == 0x000008, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::Travel_Station_Entries' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, Local_Planet_Data) == 0x000018, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::Local_Planet_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_DynamicCast_AsPlanet_Map_Data) == 0x000020, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_DynamicCast_AsPlanet_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_GetPlanetClass_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_GetPlanetClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000040, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000D0, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000160, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_K2_SetWorldRotation_SweepHitResult1) == 0x0001F0, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_K2_SetWorldRotation_SweepHitResult1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_MakeArray_Array) == 0x000280, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, Temp_int_Loop_Counter_Variable) == 0x000290, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_MakeStruct_WeightedBlendables) == 0x000298, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_MakeStruct_WeightedBlendables' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_MakeStruct_PostProcessSettings) == 0x0002B0, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_MakeStruct_PostProcessSettings' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_Add_IntInt_ReturnValue) == 0x0008B0, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_MakeTransform_ReturnValue) == 0x0008C0, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0008F0, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_FinishSpawningActor_ReturnValue) == 0x0008F8, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_DynamicCast_AsBP_Zone_Map_Planet) == 0x000900, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_DynamicCast_AsBP_Zone_Map_Planet' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_DynamicCast_bSuccess1) == 0x000908, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_GetPlanetZoneMaps_OutZoneMaps) == 0x000910, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_GetPlanetZoneMaps_OutZoneMaps' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_GetPlanetZoneMaps_ReturnValue) == 0x000920, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_GetPlanetZoneMaps_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_Array_Get_Item) == 0x000928, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_Array_Length_ReturnValue) == 0x000930, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_DynamicCast_AsZone_Map_Data_Base) == 0x000938, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_DynamicCast_AsZone_Map_Data_Base' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, K2Node_DynamicCast_bSuccess2) == 0x000940, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_Less_IntInt_ReturnValue) == 0x000941, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1) == 0x000948, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_FinishSpawningActor_ReturnValue1) == 0x000950, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_FinishSpawningActor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForPlanet, CallFunc_Array_Add_ReturnValue) == 0x000958, "Member 'BP_ZoneMap_C_InitializeMapForPlanet::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Create Compass and Grid
// 0x0050 (0x0050 - 0x0000)
struct BP_ZoneMap_C_Create_Compass_and_Grid final
{
public:
	struct FTransform                             Temp_struct_Variable;                              // 0x0000(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Create_Compass_and_Grid) == 0x000010, "Wrong alignment on BP_ZoneMap_C_Create_Compass_and_Grid");
static_assert(sizeof(BP_ZoneMap_C_Create_Compass_and_Grid) == 0x000050, "Wrong size on BP_ZoneMap_C_Create_Compass_and_Grid");
static_assert(offsetof(BP_ZoneMap_C_Create_Compass_and_Grid, Temp_struct_Variable) == 0x000000, "Member 'BP_ZoneMap_C_Create_Compass_and_Grid::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Create_Compass_and_Grid, CallFunc_AddComponent_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_Create_Compass_and_Grid::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Create_Compass_and_Grid, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Create_Compass_and_Grid::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Create_Compass_and_Grid, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Create_Compass_and_Grid::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Level Map Tick
// 0x00C0 (0x00C0 - 0x0000)
struct BP_ZoneMap_C_Level_Map_Tick final
{
public:
	bool                                          bLevelMapDMICountChanged;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Map_Pivot;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Player_Pos;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerMoved;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x004C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue1;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue1;    // 0x0094(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue1;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Level_Map_Tick) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Level_Map_Tick");
static_assert(sizeof(BP_ZoneMap_C_Level_Map_Tick) == 0x0000C0, "Wrong size on BP_ZoneMap_C_Level_Map_Tick");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, bLevelMapDMICountChanged) == 0x000000, "Member 'BP_ZoneMap_C_Level_Map_Tick::bLevelMapDMICountChanged' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, Map_Pivot) == 0x000004, "Member 'BP_ZoneMap_C_Level_Map_Tick::Map_Pivot' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, Player_Pos) == 0x000014, "Member 'BP_ZoneMap_C_Level_Map_Tick::Player_Pos' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, bPlayerMoved) == 0x000024, "Member 'BP_ZoneMap_C_Level_Map_Tick::bPlayerMoved' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_ZoneMap_C_Level_Map_Tick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_ZoneMap_C_Level_Map_Tick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Array_Length_ReturnValue1) == 0x000038, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, Temp_int_Loop_Counter_Variable1) == 0x000040, "Member 'BP_ZoneMap_C_Level_Map_Tick::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Add_IntInt_ReturnValue1) == 0x000048, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x00004C, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Array_Length_ReturnValue2) == 0x00005C, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Array_Length_ReturnValue3) == 0x000068, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_NotEqual_IntInt_ReturnValue1) == 0x00006C, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_NotEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Less_IntInt_ReturnValue1) == 0x00006D, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, Temp_int_Array_Index_Variable1) == 0x000070, "Member 'BP_ZoneMap_C_Level_Map_Tick::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_K2_GetPawn_ReturnValue) == 0x000078, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Array_Get_Item1) == 0x000080, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000088, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Conv_VectorToLinearColor_ReturnValue1) == 0x000094, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Conv_VectorToLinearColor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_BooleanOR_ReturnValue) == 0x0000A4, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_K2_GetPawn_ReturnValue1) == 0x0000A8, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_K2_GetPawn_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0000B0, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x0000BC, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Level_Map_Tick, CallFunc_Not_PreBool_ReturnValue) == 0x0000BD, "Member 'BP_ZoneMap_C_Level_Map_Tick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Planet Map Tick
// 0x0298 (0x0298 - 0x0000)
struct BP_ZoneMap_C_Planet_Map_Tick final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetZoom_Max;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetZoom_Min;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetLook_Speed;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetLook_LockYaw;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetLook_LockPitch;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetLook_LockRadius;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetLook_OffsetYaw;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetLook_OffsetPitch;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetRotate_OffsetYaw;                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetRotate_OffsetPitch;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetRotate_Speed;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetRotate_MaxYaw;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tune_PlanetRotate_MaxPitch;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZoneMapMovementMode                          Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZoneMapMovementMode                          Temp_byte_Variable1;                               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0040(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00D0(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue1;     // 0x00DC(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlanetMap_ZoneMagnetism_Magnetized;       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0104(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x0110(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0120(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue1;            // 0x01B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CA[0x2];                                      // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RInterpTo_ReturnValue1;                   // 0x01CC(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select2_Default;                            // 0x01D8(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x01E8(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UGbxProfile*                            CallFunc_GetPlayerProfile_ReturnValue;             // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakProfile*                            K2Node_DynamicCast_AsOak_Profile;                  // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Planet_Map_Tick) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Planet_Map_Tick");
static_assert(sizeof(BP_ZoneMap_C_Planet_Map_Tick) == 0x000298, "Wrong size on BP_ZoneMap_C_Planet_Map_Tick");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, InterpSpeed) == 0x000000, "Member 'BP_ZoneMap_C_Planet_Map_Tick::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetZoom_Max) == 0x000004, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetZoom_Max' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetZoom_Min) == 0x000008, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetZoom_Min' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetLook_Speed) == 0x00000C, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetLook_Speed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetLook_LockYaw) == 0x000010, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetLook_LockYaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetLook_LockPitch) == 0x000014, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetLook_LockPitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetLook_LockRadius) == 0x000018, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetLook_LockRadius' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetLook_OffsetYaw) == 0x00001C, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetLook_OffsetYaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetLook_OffsetPitch) == 0x000020, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetLook_OffsetPitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetRotate_OffsetYaw) == 0x000024, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetRotate_OffsetYaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetRotate_OffsetPitch) == 0x000028, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetRotate_OffsetPitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetRotate_Speed) == 0x00002C, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetRotate_Speed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetRotate_MaxYaw) == 0x000030, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetRotate_MaxYaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Tune_PlanetRotate_MaxPitch) == 0x000034, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Tune_PlanetRotate_MaxPitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Temp_byte_Variable) == 0x000038, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Temp_byte_Variable1) == 0x000039, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000040, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000D0, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_K2_GetComponentRotation_ReturnValue1) == 0x0000DC, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_K2_GetComponentRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_PlanetMap_ZoneMagnetism_Magnetized) == 0x0000E8, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_PlanetMap_ZoneMagnetism_Magnetized' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_GetForwardVector_ReturnValue) == 0x0000EC, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_Not_PreBool_ReturnValue1) == 0x0000F8, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_BooleanAND_ReturnValue) == 0x0000F9, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, Temp_bool_Variable) == 0x0000FA, "Member 'BP_ZoneMap_C_Planet_Map_Tick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000FB, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000FC, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000100, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_RInterpTo_ReturnValue) == 0x000104, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_Select_Default) == 0x000110, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000120, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_FInterpTo_ReturnValue) == 0x0001B0, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_Select1_Default) == 0x0001B4, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_GetForwardVector_ReturnValue1) == 0x0001B8, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_GetForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001C4, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001C8, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_SwitchEnum_CmpSuccess) == 0x0001C9, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_RInterpTo_ReturnValue1) == 0x0001CC, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_RInterpTo_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_Select2_Default) == 0x0001D8, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0001E8, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, CallFunc_GetPlayerProfile_ReturnValue) == 0x000278, "Member 'BP_ZoneMap_C_Planet_Map_Tick::CallFunc_GetPlayerProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_SwitchEnum1_CmpSuccess) == 0x000280, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_DynamicCast_AsOak_Profile) == 0x000288, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_DynamicCast_AsOak_Profile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Map_Tick, K2Node_DynamicCast_bSuccess) == 0x000290, "Member 'BP_ZoneMap_C_Planet_Map_Tick::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get Rotation Yaw Target
// 0x0048 (0x0048 - 0x0000)
struct BP_ZoneMap_C_Get_Rotation_Yaw_Target final
{
public:
	float                                         Delta_Seconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawMin;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawMax;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue1;       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGbxProfile*                            CallFunc_GetPlayerProfile_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakProfile*                            K2Node_DynamicCast_AsOak_Profile;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_Rotation_Yaw_Target) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_Rotation_Yaw_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_Rotation_Yaw_Target) == 0x000048, "Wrong size on BP_ZoneMap_C_Get_Rotation_Yaw_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, Delta_Seconds) == 0x000000, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, YawMin) == 0x000004, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::YawMin' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, YawMax) == 0x000008, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::YawMax' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_EqualEqual_FloatFloat_ReturnValue1) == 0x00000D, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_EqualEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, Temp_bool_Variable) == 0x00000F, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_GetPlayerProfile_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_GetPlayerProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, K2Node_DynamicCast_AsOak_Profile) == 0x000018, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::K2Node_DynamicCast_AsOak_Profile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_SelectFloat_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000030, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000034, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Yaw_Target, K2Node_Select_Default) == 0x000040, "Member 'BP_ZoneMap_C_Get_Rotation_Yaw_Target::K2Node_Select_Default' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get Rotation Pitch Target
// 0x0048 (0x0048 - 0x0000)
struct BP_ZoneMap_C_Get_Rotation_Pitch_Target final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxProfile*                            CallFunc_GetPlayerProfile_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakProfile*                            K2Node_DynamicCast_AsOak_Profile;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_Rotation_Pitch_Target) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_Rotation_Pitch_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_Rotation_Pitch_Target) == 0x000048, "Wrong size on BP_ZoneMap_C_Get_Rotation_Pitch_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_GetPlayerProfile_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_GetPlayerProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, K2Node_DynamicCast_AsOak_Profile) == 0x000018, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::K2Node_DynamicCast_AsOak_Profile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_SelectFloat_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000030, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000034, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_FClamp_ReturnValue1) == 0x000040, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_Pitch_Target, CallFunc_SelectFloat_ReturnValue1) == 0x000044, "Member 'BP_ZoneMap_C_Get_Rotation_Pitch_Target::CallFunc_SelectFloat_ReturnValue1' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Destroy Map Actor
// 0x0010 (0x0010 - 0x0000)
struct BP_ZoneMap_C_Destroy_Map_Actor final
{
public:
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Destroy_Map_Actor) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Destroy_Map_Actor");
static_assert(sizeof(BP_ZoneMap_C_Destroy_Map_Actor) == 0x000010, "Wrong size on BP_ZoneMap_C_Destroy_Map_Actor");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Map_Actor, CallFunc_K2_GetPawn_ReturnValue) == 0x000000, "Member 'BP_ZoneMap_C_Destroy_Map_Actor::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Map_Actor, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Destroy_Map_Actor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Destroy Planet Map Components
// 0x00F0 (0x00F0 - 0x0000)
struct BP_ZoneMap_C_Destroy_Planet_Map_Components final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x0048(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlanetPOI_C*                        CallFunc_Array_Get_Item;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Destroy_Planet_Map_Components) == 0x000010, "Wrong alignment on BP_ZoneMap_C_Destroy_Planet_Map_Components");
static_assert(sizeof(BP_ZoneMap_C_Destroy_Planet_Map_Components) == 0x0000F0, "Wrong size on BP_ZoneMap_C_Destroy_Planet_Map_Components");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x000048, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_Add_IntInt_ReturnValue) == 0x0000D8, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_IsValid_ReturnValue) == 0x0000DC, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_Array_Length_ReturnValue) == 0x0000E8, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Destroy_Planet_Map_Components, CallFunc_Less_IntInt_ReturnValue) == 0x0000EC, "Member 'BP_ZoneMap_C_Destroy_Planet_Map_Components::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.InitializeMapForGalaxy
// 0x0920 (0x0920 - 0x0000)
struct BP_ZoneMap_C_InitializeMapForGalaxy final
{
public:
	class UGalaxyMapData_C*                       Galaxy_Map_Data;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGalaxyMapData_C*                       Local_Galaxy_Map_Data;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult; // 0x0048(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ABP_ZoneMap_Galaxy_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00E0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x017C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0188(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0194(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   K2Node_MakeStruct_PostProcessSettings;             // 0x01B0(0x0600)()
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x07B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x3];                                      // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location1;                 // 0x07B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation1;                 // 0x07C0(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale1;                    // 0x07CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x07D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x07E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x07F0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0880(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_InitializeMapForGalaxy) == 0x000010, "Wrong alignment on BP_ZoneMap_C_InitializeMapForGalaxy");
static_assert(sizeof(BP_ZoneMap_C_InitializeMapForGalaxy) == 0x000920, "Wrong size on BP_ZoneMap_C_InitializeMapForGalaxy");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, Galaxy_Map_Data) == 0x000000, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::Galaxy_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, Local_Galaxy_Map_Data) == 0x000008, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::Local_Galaxy_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult) == 0x000048, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000D8, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000E0, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BreakTransform_Location) == 0x000170, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BreakTransform_Rotation) == 0x00017C, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BreakTransform_Scale) == 0x000188, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_MakeRotator_ReturnValue) == 0x000194, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, Temp_bool_Variable) == 0x0001A0, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, K2Node_MakeStruct_PostProcessSettings) == 0x0001B0, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::K2Node_MakeStruct_PostProcessSettings' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0007B0, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BreakTransform_Location1) == 0x0007B4, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BreakTransform_Location1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BreakTransform_Rotation1) == 0x0007C0, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BreakTransform_Rotation1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_BreakTransform_Scale1) == 0x0007CC, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_BreakTransform_Scale1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, K2Node_Select_Default) == 0x0007D8, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0007E4, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0007F0, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000880, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_InitializeMapForGalaxy, CallFunc_IsValid_ReturnValue) == 0x000910, "Member 'BP_ZoneMap_C_InitializeMapForGalaxy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.GalaxyMapTick
// 0x01F8 (0x01F8 - 0x0000)
struct BP_ZoneMap_C_GalaxyMapTick final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakProfile*                            MyProfile;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZoneMapMovementMode                          Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZoneMapMovementMode                          Temp_byte_Variable1;                               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select1_Default;                            // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00A0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0138(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0148(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxProfile*                            CallFunc_GetPlayerProfile_ReturnValue;             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakProfile*                            K2Node_DynamicCast_AsOak_Profile;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_GalaxyMapTick) == 0x000008, "Wrong alignment on BP_ZoneMap_C_GalaxyMapTick");
static_assert(sizeof(BP_ZoneMap_C_GalaxyMapTick) == 0x0001F8, "Wrong size on BP_ZoneMap_C_GalaxyMapTick");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, InterpSpeed) == 0x000000, "Member 'BP_ZoneMap_C_GalaxyMapTick::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, MyProfile) == 0x000008, "Member 'BP_ZoneMap_C_GalaxyMapTick::MyProfile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, Temp_byte_Variable) == 0x000010, "Member 'BP_ZoneMap_C_GalaxyMapTick::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, Temp_byte_Variable1) == 0x000011, "Member 'BP_ZoneMap_C_GalaxyMapTick::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000028, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Abs_ReturnValue) == 0x000048, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Less_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, K2Node_SwitchEnum_CmpSuccess) == 0x000054, "Member 'BP_ZoneMap_C_GalaxyMapTick::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_FInterpTo_ReturnValue) == 0x000058, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, K2Node_Select_Default) == 0x00005C, "Member 'BP_ZoneMap_C_GalaxyMapTick::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000060, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x00006C, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_VInterpTo_ReturnValue) == 0x000078, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, K2Node_Select1_Default) == 0x000084, "Member 'BP_ZoneMap_C_GalaxyMapTick::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000090, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000A0, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_VSize_ReturnValue) == 0x000130, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000134, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_MakeRotator_ReturnValue) == 0x000138, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000148, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, K2Node_SwitchEnum1_CmpSuccess) == 0x0001D8, "Member 'BP_ZoneMap_C_GalaxyMapTick::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, CallFunc_GetPlayerProfile_ReturnValue) == 0x0001E0, "Member 'BP_ZoneMap_C_GalaxyMapTick::CallFunc_GetPlayerProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, K2Node_DynamicCast_AsOak_Profile) == 0x0001E8, "Member 'BP_ZoneMap_C_GalaxyMapTick::K2Node_DynamicCast_AsOak_Profile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GalaxyMapTick, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'BP_ZoneMap_C_GalaxyMapTick::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.DestroyGalaxyMapComponents
// 0x0028 (0x0028 - 0x0000)
struct BP_ZoneMap_C_DestroyGalaxyMapComponents final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GalaxyPOI_C*                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_DestroyGalaxyMapComponents) == 0x000008, "Wrong alignment on BP_ZoneMap_C_DestroyGalaxyMapComponents");
static_assert(sizeof(BP_ZoneMap_C_DestroyGalaxyMapComponents) == 0x000028, "Wrong size on BP_ZoneMap_C_DestroyGalaxyMapComponents");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_DestroyGalaxyMapComponents, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_ZoneMap_C_DestroyGalaxyMapComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Base Tick
// 0x0004 (0x0004 - 0x0000)
struct BP_ZoneMap_C_Base_Tick final
{
public:
	float                                         Delta_Seconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Base_Tick) == 0x000004, "Wrong alignment on BP_ZoneMap_C_Base_Tick");
static_assert(sizeof(BP_ZoneMap_C_Base_Tick) == 0x000004, "Wrong size on BP_ZoneMap_C_Base_Tick");
static_assert(offsetof(BP_ZoneMap_C_Base_Tick, Delta_Seconds) == 0x000000, "Member 'BP_ZoneMap_C_Base_Tick::Delta_Seconds' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get Default Level Map Pivot
// 0x0024 (0x0024 - 0x0000)
struct BP_ZoneMap_C_Get_Default_Level_Map_Pivot final
{
public:
	struct FVector                                Point_Of_Interest_Transform_Location;              // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_Default_Level_Map_Pivot) == 0x000004, "Wrong alignment on BP_ZoneMap_C_Get_Default_Level_Map_Pivot");
static_assert(sizeof(BP_ZoneMap_C_Get_Default_Level_Map_Pivot) == 0x000024, "Wrong size on BP_ZoneMap_C_Get_Default_Level_Map_Pivot");
static_assert(offsetof(BP_ZoneMap_C_Get_Default_Level_Map_Pivot, Point_Of_Interest_Transform_Location) == 0x000000, "Member 'BP_ZoneMap_C_Get_Default_Level_Map_Pivot::Point_Of_Interest_Transform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Default_Level_Map_Pivot, CallFunc_Add_VectorVector_ReturnValue) == 0x00000C, "Member 'BP_ZoneMap_C_Get_Default_Level_Map_Pivot::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Default_Level_Map_Pivot, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_Get_Default_Level_Map_Pivot::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.TransitionToPlanet
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_TransitionToPlanet final
{
public:
	class UPlanetMapData_C*                       Planet_Map_Data_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_TransitionToPlanet) == 0x000008, "Wrong alignment on BP_ZoneMap_C_TransitionToPlanet");
static_assert(sizeof(BP_ZoneMap_C_TransitionToPlanet) == 0x000008, "Wrong size on BP_ZoneMap_C_TransitionToPlanet");
static_assert(offsetof(BP_ZoneMap_C_TransitionToPlanet, Planet_Map_Data_0) == 0x000000, "Member 'BP_ZoneMap_C_TransitionToPlanet::Planet_Map_Data_0' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.TransitionToLevel
// 0x0048 (0x0048 - 0x0000)
struct BP_ZoneMap_C_TransitionToLevel final
{
public:
	class UZoneMapData*                           Level_Data;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetData*                            CallFunc_GetZoneMapPlanet_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlanetMapData_C*                       K2Node_DynamicCast_AsPlanet_Map_Data;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0028(0x0018)()
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_TransitionToLevel) == 0x000008, "Wrong alignment on BP_ZoneMap_C_TransitionToLevel");
static_assert(sizeof(BP_ZoneMap_C_TransitionToLevel) == 0x000048, "Wrong size on BP_ZoneMap_C_TransitionToLevel");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, Level_Data) == 0x000000, "Member 'BP_ZoneMap_C_TransitionToLevel::Level_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, CallFunc_GetZoneMapPlanet_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_TransitionToLevel::CallFunc_GetZoneMapPlanet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_ZoneMap_C_TransitionToLevel::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, K2Node_DynamicCast_AsPlanet_Map_Data) == 0x000018, "Member 'BP_ZoneMap_C_TransitionToLevel::K2Node_DynamicCast_AsPlanet_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ZoneMap_C_TransitionToLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, K2Node_SwitchEnum1_CmpSuccess) == 0x000021, "Member 'BP_ZoneMap_C_TransitionToLevel::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, CallFunc_MakeLiteralText_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_TransitionToLevel::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_TransitionToLevel, CallFunc_EqualEqual_TextText_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_TransitionToLevel::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get Rotation For Level Transition
// 0x0068 (0x0068 - 0x0000)
struct BP_ZoneMap_C_Get_Rotation_For_Level_Transition final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData_Base_C*                    K2Node_DynamicCast_AsZone_Map_Data_Base;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0028(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x004C(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0058(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_Rotation_For_Level_Transition");
static_assert(sizeof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition) == 0x000068, "Wrong size on BP_ZoneMap_C_Get_Rotation_For_Level_Transition");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, ReturnValue) == 0x000000, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, K2Node_DynamicCast_AsZone_Map_Data_Base) == 0x000010, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::K2Node_DynamicCast_AsZone_Map_Data_Base' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, CallFunc_BreakTransform_Location) == 0x00001C, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, CallFunc_BreakTransform_Rotation) == 0x000028, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, CallFunc_BreakTransform_Scale) == 0x000034, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00004C, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Rotation_For_Level_Transition, CallFunc_NegateRotator_ReturnValue) == 0x000058, "Member 'BP_ZoneMap_C_Get_Rotation_For_Level_Transition::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Focus Level
// 0x0130 (0x0130 - 0x0000)
struct BP_ZoneMap_C_Focus_Level final
{
public:
	class UZoneMapData*                           Level;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInstant;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Local_Instant;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData_Base_C*                    Local_Level;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData_Base_C*                    K2Node_DynamicCast_AsZone_Map_Data_Base;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_GetZoneMeshOnPlanet_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0050(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlanetPOI_C*                        CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00F4(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x0100(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x010C(0x000C)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlanetPOI_C*                        CallFunc_Array_Get_Item1;                          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Focus_Level) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Focus_Level");
static_assert(sizeof(BP_ZoneMap_C_Focus_Level) == 0x000130, "Wrong size on BP_ZoneMap_C_Focus_Level");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Level) == 0x000000, "Member 'BP_ZoneMap_C_Focus_Level::Level' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, bInstant) == 0x000008, "Member 'BP_ZoneMap_C_Focus_Level::bInstant' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Local_Instant) == 0x000009, "Member 'BP_ZoneMap_C_Focus_Level::Local_Instant' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Local_Level) == 0x000010, "Member 'BP_ZoneMap_C_Focus_Level::Local_Level' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, K2Node_DynamicCast_AsZone_Map_Data_Base) == 0x000020, "Member 'BP_ZoneMap_C_Focus_Level::K2Node_DynamicCast_AsZone_Map_Data_Base' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_ZoneMap_C_Focus_Level::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_GetZoneMeshOnPlanet_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_GetZoneMeshOnPlanet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_ZoneMap_C_Focus_Level::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Array_Length_ReturnValue1) == 0x000044, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000050, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Temp_int_Array_Index_Variable) == 0x0000E0, "Member 'BP_ZoneMap_C_Focus_Level::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F0, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000F1, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_MakeRotator_ReturnValue) == 0x0000F4, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_MakeRotator_ReturnValue1) == 0x000100, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_ComposeRotators_ReturnValue) == 0x00010C, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Temp_int_Loop_Counter_Variable1) == 0x000118, "Member 'BP_ZoneMap_C_Focus_Level::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Less_IntInt_ReturnValue1) == 0x00011C, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Add_IntInt_ReturnValue1) == 0x000120, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, Temp_int_Array_Index_Variable1) == 0x000124, "Member 'BP_ZoneMap_C_Focus_Level::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Focus_Level, CallFunc_Array_Get_Item1) == 0x000128, "Member 'BP_ZoneMap_C_Focus_Level::CallFunc_Array_Get_Item1' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Update Party Memeber Locations
// 0x0120 (0x0120 - 0x0000)
struct BP_ZoneMap_C_Update_Party_Memeber_Locations final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AOakPlayerState*>                CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetTargetActorRotation_ReturnValue;       // 0x0034(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetTargetActorLocation_ReturnValue;       // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Map_Find_Value;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x0090(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_ZoneMap_C_Update_Party_Memeber_Locations) == 0x000010, "Wrong alignment on BP_ZoneMap_C_Update_Party_Memeber_Locations");
static_assert(sizeof(BP_ZoneMap_C_Update_Party_Memeber_Locations) == 0x000120, "Wrong size on BP_ZoneMap_C_Update_Party_Memeber_Locations");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_GetTargetActorRotation_ReturnValue) == 0x000034, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_GetTargetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_GetTargetActorLocation_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_GetTargetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Map_Find_Value) == 0x000050, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_MakeTransform_ReturnValue) == 0x000060, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_Party_Memeber_Locations, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x000090, "Member 'BP_ZoneMap_C_Update_Party_Memeber_Locations::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_HandleAxisInput
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) BP_ZoneMap_C_K2_HandleAxisInput final
{
public:
	class FName                                   InputAction;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisValue;                                         // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_K2_HandleAxisInput) == 0x000008, "Wrong alignment on BP_ZoneMap_C_K2_HandleAxisInput");
static_assert(sizeof(BP_ZoneMap_C_K2_HandleAxisInput) == 0x000010, "Wrong size on BP_ZoneMap_C_K2_HandleAxisInput");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleAxisInput, InputAction) == 0x000000, "Member 'BP_ZoneMap_C_K2_HandleAxisInput::InputAction' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleAxisInput, AxisValue) == 0x000008, "Member 'BP_ZoneMap_C_K2_HandleAxisInput::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleAxisInput, ReturnValue) == 0x00000C, "Member 'BP_ZoneMap_C_K2_HandleAxisInput::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleAxisInput, K2Node_SwitchName_CmpSuccess) == 0x00000D, "Member 'BP_ZoneMap_C_K2_HandleAxisInput::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_HandleInputAction
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) BP_ZoneMap_C_K2_HandleInputAction final
{
public:
	class FName                                   InputAction;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomRate;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomAmt;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomMax;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomMin;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_HandleInputAction) == 0x000008, "Wrong alignment on BP_ZoneMap_C_K2_HandleInputAction");
static_assert(sizeof(BP_ZoneMap_C_K2_HandleInputAction) == 0x000038, "Wrong size on BP_ZoneMap_C_K2_HandleInputAction");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, InputAction) == 0x000000, "Member 'BP_ZoneMap_C_K2_HandleInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_K2_HandleInputAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, ZoomRate) == 0x00000C, "Member 'BP_ZoneMap_C_K2_HandleInputAction::ZoomRate' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, ZoomAmt) == 0x000010, "Member 'BP_ZoneMap_C_K2_HandleInputAction::ZoomAmt' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, ZoomMax) == 0x000014, "Member 'BP_ZoneMap_C_K2_HandleInputAction::ZoomMax' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, ZoomMin) == 0x000018, "Member 'BP_ZoneMap_C_K2_HandleInputAction::ZoomMin' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, K2Node_SwitchName_CmpSuccess) == 0x00001C, "Member 'BP_ZoneMap_C_K2_HandleInputAction::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, K2Node_SwitchEnum_CmpSuccess) == 0x00001D, "Member 'BP_ZoneMap_C_K2_HandleInputAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, K2Node_SwitchEnum1_CmpSuccess) == 0x00001E, "Member 'BP_ZoneMap_C_K2_HandleInputAction::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_ZoneMap_C_K2_HandleInputAction::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000024, "Member 'BP_ZoneMap_C_K2_HandleInputAction::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, K2Node_SwitchEnum2_CmpSuccess) == 0x000028, "Member 'BP_ZoneMap_C_K2_HandleInputAction::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_K2_HandleInputAction::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_HandleInputAction, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_K2_HandleInputAction::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get Normalized Distance To POI Center
// 0x0070 (0x0070 - 0x0000)
struct BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center final
{
public:
	class USphereComponent*                       POI_Collision_Sphere;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hit_Location;                                      // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledSphereRadius_ReturnValue;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnToPlane_ReturnValue;        // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center");
static_assert(sizeof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center) == 0x000070, "Wrong size on BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, POI_Collision_Sphere) == 0x000000, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::POI_Collision_Sphere' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, Hit_Location) == 0x000008, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::Hit_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_GetScaledSphereRadius_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_GetScaledSphereRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00001C, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_GetCameraLocation_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_Normal_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_ProjectPointOnToPlane_ReturnValue) == 0x00004C, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_ProjectPointOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000058, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_VSize_ReturnValue) == 0x000064, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_ZoneMap_C_Get_Normalized_Distance_To_POI_Center::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get New Scale Target
// 0x0068 (0x0068 - 0x0000)
struct BP_ZoneMap_C_Get_New_Scale_Target final
{
public:
	float                                         Delta_Seconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Min;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Max;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Rate;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom_Delta;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MyInput_Zoom;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MyDelta;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MyZoomSpeedByZoom;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_New_Scale_Target) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_New_Scale_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_New_Scale_Target) == 0x000068, "Wrong size on BP_ZoneMap_C_Get_New_Scale_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, Delta_Seconds) == 0x000000, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, Scale_Min) == 0x000004, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::Scale_Min' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, Scale_Max) == 0x000008, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::Scale_Max' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, Scale_Rate) == 0x00000C, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::Scale_Rate' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, Zoom_Delta) == 0x000010, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::Zoom_Delta' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, MyInput_Zoom) == 0x000014, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::MyInput_Zoom' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, MyDelta) == 0x000018, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::MyDelta' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, MyZoomSpeedByZoom) == 0x000020, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::MyZoomSpeedByZoom' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_GetFloatValue_ReturnValue) == 0x000034, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000038, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00003C, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Less_FloatFloat_ReturnValue) == 0x000041, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000042, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000044, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000048, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00004C, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_FMin_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_FMax_ReturnValue) == 0x000058, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_Add_FloatFloat_ReturnValue3) == 0x00005C, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_New_Scale_Target, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'BP_ZoneMap_C_Get_New_Scale_Target::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Set Global LUT Visibility
// 0x0650 (0x0650 - 0x0000)
struct BP_ZoneMap_C_Set_Global_LUT_Visibility final
{
public:
	bool                                          Visibile;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettingsWithInheritance    K2Node_MakeStruct_PostProcessSettingsWithInheritance; // 0x0010(0x0610)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APostProcessVolume*>             CallFunc_GetAllActorsOfClass_OutActors;            // 0x0628(0x0010)(ZeroConstructor, ReferenceParm)
	class APostProcessVolume*                     CallFunc_Array_Get_Item;                           // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0644(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_645[0x3];                                      // 0x0645(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Set_Global_LUT_Visibility) == 0x000010, "Wrong alignment on BP_ZoneMap_C_Set_Global_LUT_Visibility");
static_assert(sizeof(BP_ZoneMap_C_Set_Global_LUT_Visibility) == 0x000650, "Wrong size on BP_ZoneMap_C_Set_Global_LUT_Visibility");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, Visibile) == 0x000000, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::Visibile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, K2Node_MakeStruct_PostProcessSettingsWithInheritance) == 0x000010, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::K2Node_MakeStruct_PostProcessSettingsWithInheritance' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, Temp_int_Loop_Counter_Variable) == 0x000620, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, CallFunc_GetAllActorsOfClass_OutActors) == 0x000628, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, CallFunc_Array_Get_Item) == 0x000638, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, CallFunc_Array_Length_ReturnValue) == 0x000640, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, CallFunc_Less_IntInt_ReturnValue) == 0x000644, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Global_LUT_Visibility, CallFunc_Add_IntInt_ReturnValue) == 0x000648, "Member 'BP_ZoneMap_C_Set_Global_LUT_Visibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Set Transitioning
// 0x0001 (0x0001 - 0x0000)
struct BP_ZoneMap_C_Set_Transitioning final
{
public:
	bool                                          Transitioning;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Set_Transitioning) == 0x000001, "Wrong alignment on BP_ZoneMap_C_Set_Transitioning");
static_assert(sizeof(BP_ZoneMap_C_Set_Transitioning) == 0x000001, "Wrong size on BP_ZoneMap_C_Set_Transitioning");
static_assert(offsetof(BP_ZoneMap_C_Set_Transitioning, Transitioning) == 0x000000, "Member 'BP_ZoneMap_C_Set_Transitioning::Transitioning' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.SetVisibleRadiusBP
// 0x0048 (0x0048 - 0x0000)
struct BP_ZoneMap_C_SetVisibleRadiusBP final
{
public:
	TArray<class UMaterialInstanceDynamic*>       DMIArray;                                          // 0x0000(0x0010)(BlueprintVisible, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         Alpha_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadiusAlpha;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distortion;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_SetVisibleRadiusBP) == 0x000008, "Wrong alignment on BP_ZoneMap_C_SetVisibleRadiusBP");
static_assert(sizeof(BP_ZoneMap_C_SetVisibleRadiusBP) == 0x000048, "Wrong size on BP_ZoneMap_C_SetVisibleRadiusBP");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, DMIArray) == 0x000000, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::DMIArray' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, Alpha_0) == 0x000010, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::Alpha_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, RadiusAlpha) == 0x000014, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::RadiusAlpha' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, Distortion) == 0x000018, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::Distortion' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000020, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000024, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetVisibleRadiusBP, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_SetVisibleRadiusBP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_UpdateTransforms
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_K2_UpdateTransforms final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_K2_UpdateTransforms) == 0x000004, "Wrong alignment on BP_ZoneMap_C_K2_UpdateTransforms");
static_assert(sizeof(BP_ZoneMap_C_K2_UpdateTransforms) == 0x000008, "Wrong size on BP_ZoneMap_C_K2_UpdateTransforms");
static_assert(offsetof(BP_ZoneMap_C_K2_UpdateTransforms, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_K2_UpdateTransforms::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_UpdateTransforms, ReturnValue) == 0x000004, "Member 'BP_ZoneMap_C_K2_UpdateTransforms::ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_GetNewScaleTarget
// 0x0010 (0x0010 - 0x0000)
struct BP_ZoneMap_C_K2_GetNewScaleTarget final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomDelta;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_New_Scale_Target_Zoom_Delta;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_GetNewScaleTarget) == 0x000004, "Wrong alignment on BP_ZoneMap_C_K2_GetNewScaleTarget");
static_assert(sizeof(BP_ZoneMap_C_K2_GetNewScaleTarget) == 0x000010, "Wrong size on BP_ZoneMap_C_K2_GetNewScaleTarget");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewScaleTarget, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_K2_GetNewScaleTarget::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewScaleTarget, ZoomDelta) == 0x000004, "Member 'BP_ZoneMap_C_K2_GetNewScaleTarget::ZoomDelta' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewScaleTarget, ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_K2_GetNewScaleTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewScaleTarget, CallFunc_Get_New_Scale_Target_Zoom_Delta) == 0x00000C, "Member 'BP_ZoneMap_C_K2_GetNewScaleTarget::CallFunc_Get_New_Scale_Target_Zoom_Delta' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_GetNewTransformTarget
// 0x0030 (0x0030 - 0x0000)
struct BP_ZoneMap_C_K2_GetNewTransformTarget final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformMin;                                      // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TransformMax;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransformBuffer;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalTransformScale;                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomDelta;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_K2_GetNewTransformTarget) == 0x000004, "Wrong alignment on BP_ZoneMap_C_K2_GetNewTransformTarget");
static_assert(sizeof(BP_ZoneMap_C_K2_GetNewTransformTarget) == 0x000030, "Wrong size on BP_ZoneMap_C_K2_GetNewTransformTarget");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, TransformMin) == 0x000004, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::TransformMin' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, TransformMax) == 0x000010, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::TransformMax' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, TransformBuffer) == 0x00001C, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::TransformBuffer' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, GlobalTransformScale) == 0x000020, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::GlobalTransformScale' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, ZoomDelta) == 0x000024, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::ZoomDelta' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetNewTransformTarget, CallFunc_MakeLiteralFloat_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_K2_GetNewTransformTarget::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_GetRotationPitchTarget
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_K2_GetRotationPitchTarget final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_K2_GetRotationPitchTarget) == 0x000004, "Wrong alignment on BP_ZoneMap_C_K2_GetRotationPitchTarget");
static_assert(sizeof(BP_ZoneMap_C_K2_GetRotationPitchTarget) == 0x000008, "Wrong size on BP_ZoneMap_C_K2_GetRotationPitchTarget");
static_assert(offsetof(BP_ZoneMap_C_K2_GetRotationPitchTarget, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_K2_GetRotationPitchTarget::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetRotationPitchTarget, ReturnValue) == 0x000004, "Member 'BP_ZoneMap_C_K2_GetRotationPitchTarget::ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.K2_GetRotationYawTarget
// 0x0010 (0x0010 - 0x0000)
struct BP_ZoneMap_C_K2_GetRotationYawTarget final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawMin;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawMax;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_K2_GetRotationYawTarget) == 0x000004, "Wrong alignment on BP_ZoneMap_C_K2_GetRotationYawTarget");
static_assert(sizeof(BP_ZoneMap_C_K2_GetRotationYawTarget) == 0x000010, "Wrong size on BP_ZoneMap_C_K2_GetRotationYawTarget");
static_assert(offsetof(BP_ZoneMap_C_K2_GetRotationYawTarget, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_K2_GetRotationYawTarget::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetRotationYawTarget, YawMin) == 0x000004, "Member 'BP_ZoneMap_C_K2_GetRotationYawTarget::YawMin' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetRotationYawTarget, YawMax) == 0x000008, "Member 'BP_ZoneMap_C_K2_GetRotationYawTarget::YawMax' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_K2_GetRotationYawTarget, ReturnValue) == 0x00000C, "Member 'BP_ZoneMap_C_K2_GetRotationYawTarget::ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.SetLevelMapPostProcess
// 0x0630 (0x0630 - 0x0000)
struct BP_ZoneMap_C_SetLevelMapPostProcess final
{
public:
	struct FWeightedBlendable                     K2Node_MakeStruct_WeightedBlendable;               // 0x0000(0x0010)(NoDestructor)
	TArray<struct FWeightedBlendable>             K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	struct FWeightedBlendables                    K2Node_MakeStruct_WeightedBlendables;              // 0x0020(0x0010)()
	struct FPostProcessSettings                   K2Node_MakeStruct_PostProcessSettings;             // 0x0030(0x0600)()
};
static_assert(alignof(BP_ZoneMap_C_SetLevelMapPostProcess) == 0x000010, "Wrong alignment on BP_ZoneMap_C_SetLevelMapPostProcess");
static_assert(sizeof(BP_ZoneMap_C_SetLevelMapPostProcess) == 0x000630, "Wrong size on BP_ZoneMap_C_SetLevelMapPostProcess");
static_assert(offsetof(BP_ZoneMap_C_SetLevelMapPostProcess, K2Node_MakeStruct_WeightedBlendable) == 0x000000, "Member 'BP_ZoneMap_C_SetLevelMapPostProcess::K2Node_MakeStruct_WeightedBlendable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetLevelMapPostProcess, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_ZoneMap_C_SetLevelMapPostProcess::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetLevelMapPostProcess, K2Node_MakeStruct_WeightedBlendables) == 0x000020, "Member 'BP_ZoneMap_C_SetLevelMapPostProcess::K2Node_MakeStruct_WeightedBlendables' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetLevelMapPostProcess, K2Node_MakeStruct_PostProcessSettings) == 0x000030, "Member 'BP_ZoneMap_C_SetLevelMapPostProcess::K2Node_MakeStruct_PostProcessSettings' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.GetGalaxyRotationTarget
// 0x0060 (0x0060 - 0x0000)
struct BP_ZoneMap_C_GetGalaxyRotationTarget final
{
public:
	float                                         DeltaSeconds_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxProfile*                            CallFunc_GetPlayerProfile_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakProfile*                            K2Node_DynamicCast_AsOak_Profile;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInputAxisValue_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputAxisValue_ReturnValue1;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_GetGalaxyRotationTarget) == 0x000008, "Wrong alignment on BP_ZoneMap_C_GetGalaxyRotationTarget");
static_assert(sizeof(BP_ZoneMap_C_GetGalaxyRotationTarget) == 0x000060, "Wrong size on BP_ZoneMap_C_GetGalaxyRotationTarget");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, DeltaSeconds_0) == 0x000000, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::DeltaSeconds_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_GetPlayerProfile_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_GetPlayerProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, K2Node_DynamicCast_AsOak_Profile) == 0x000018, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::K2Node_DynamicCast_AsOak_Profile' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_GetInputAxisValue_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_GetInputAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_GetInputAxisValue_ReturnValue1) == 0x000028, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_GetInputAxisValue_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_SelectFloat_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000034, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Abs_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000040, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000048, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00004C, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_FClamp_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_FClamp_ReturnValue1) == 0x000054, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_GetGalaxyRotationTarget, CallFunc_SelectFloat_ReturnValue1) == 0x000058, "Member 'BP_ZoneMap_C_GetGalaxyRotationTarget::CallFunc_SelectFloat_ReturnValue1' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.SpawnGalaxyMapPOIs
// 0x0088 (0x0088 - 0x0000)
struct BP_ZoneMap_C_SpawnGalaxyMapPOIs final
{
public:
	class UGalaxyMapData_C*                       Galaxy_Map_Data;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GalaxyPOI_C*                        New_POI;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetData*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetMapData_C*                       K2Node_DynamicCast_AsPlanet_Map_Data;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0030(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UZoneMapData*>                   CallFunc_GetPlanetZoneMaps_OutZoneMaps;            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_GetPlanetZoneMaps_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GalaxyPOI_C*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_SpawnGalaxyMapPOIs) == 0x000008, "Wrong alignment on BP_ZoneMap_C_SpawnGalaxyMapPOIs");
static_assert(sizeof(BP_ZoneMap_C_SpawnGalaxyMapPOIs) == 0x000088, "Wrong size on BP_ZoneMap_C_SpawnGalaxyMapPOIs");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, Galaxy_Map_Data) == 0x000000, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::Galaxy_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, New_POI) == 0x000008, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::New_POI' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, K2Node_DynamicCast_AsPlanet_Map_Data) == 0x000020, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::K2Node_DynamicCast_AsPlanet_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_MakeLiteralText_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_EqualEqual_TextText_ReturnValue) == 0x00004C, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_Array_AddUnique_ReturnValue) == 0x000054, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000058, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_GetPlanetZoneMaps_OutZoneMaps) == 0x000060, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_GetPlanetZoneMaps_OutZoneMaps' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_GetPlanetZoneMaps_ReturnValue) == 0x000070, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_GetPlanetZoneMaps_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_Array_Length_ReturnValue1) == 0x000074, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000078, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SpawnGalaxyMapPOIs, CallFunc_FinishSpawningActor_ReturnValue) == 0x000080, "Member 'BP_ZoneMap_C_SpawnGalaxyMapPOIs::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.FocusOnPlanet
// 0x0048 (0x0048 - 0x0000)
struct BP_ZoneMap_C_FocusOnPlanet final
{
public:
	class UPlanetData*                            Planet;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlanetMapData_C*                       K2Node_DynamicCast_AsPlanet_Map_Data;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0020(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_FocusOnPlanet) == 0x000008, "Wrong alignment on BP_ZoneMap_C_FocusOnPlanet");
static_assert(sizeof(BP_ZoneMap_C_FocusOnPlanet) == 0x000048, "Wrong size on BP_ZoneMap_C_FocusOnPlanet");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, Planet) == 0x000000, "Member 'BP_ZoneMap_C_FocusOnPlanet::Planet' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, K2Node_DynamicCast_AsPlanet_Map_Data) == 0x000008, "Member 'BP_ZoneMap_C_FocusOnPlanet::K2Node_DynamicCast_AsPlanet_Map_Data' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_ZoneMap_C_FocusOnPlanet::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, CallFunc_BreakTransform_Location) == 0x000014, "Member 'BP_ZoneMap_C_FocusOnPlanet::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, CallFunc_BreakTransform_Rotation) == 0x000020, "Member 'BP_ZoneMap_C_FocusOnPlanet::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, CallFunc_BreakTransform_Scale) == 0x00002C, "Member 'BP_ZoneMap_C_FocusOnPlanet::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_FocusOnPlanet, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_FocusOnPlanet::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Update_ZoneMap_DMIs
// 0x0080 (0x0080 - 0x0000)
struct BP_ZoneMap_C_Update_ZoneMap_DMIs final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0020(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneMapLevelMeshInfo                  CallFunc_Array_Get_Item;                           // 0x0048(0x0028)(NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsViewingCurrentLevel_ReturnValue;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Update_ZoneMap_DMIs) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Update_ZoneMap_DMIs");
static_assert(sizeof(BP_ZoneMap_C_Update_ZoneMap_DMIs) == 0x000080, "Wrong size on BP_ZoneMap_C_Update_ZoneMap_DMIs");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000020, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, Temp_float_Variable) == 0x000030, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, Temp_bool_Variable) == 0x000038, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, Temp_float_Variable1) == 0x000040, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, K2Node_Select_Default) == 0x000070, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_IsValid_ReturnValue1) == 0x000074, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_IsValid_ReturnValue2) == 0x000075, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_IsViewingCurrentLevel_ReturnValue) == 0x00007C, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_IsViewingCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Update_ZoneMap_DMIs, CallFunc_Less_IntInt_ReturnValue) == 0x00007D, "Member 'BP_ZoneMap_C_Update_ZoneMap_DMIs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.ViewChanged
// 0x0050 (0x0050 - 0x0000)
struct BP_ZoneMap_C_ViewChanged final
{
public:
	bool                                          bShowingZoneMap_0;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FZoneMapLevelMeshInfo                  CallFunc_Array_Get_Item;                           // 0x0018(0x0028)(NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_ViewChanged) == 0x000008, "Wrong alignment on BP_ZoneMap_C_ViewChanged");
static_assert(sizeof(BP_ZoneMap_C_ViewChanged) == 0x000050, "Wrong size on BP_ZoneMap_C_ViewChanged");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, bShowingZoneMap_0) == 0x000000, "Member 'BP_ZoneMap_C_ViewChanged::bShowingZoneMap_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, Temp_bool_Variable) == 0x000001, "Member 'BP_ZoneMap_C_ViewChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, Temp_float_Variable) == 0x000004, "Member 'BP_ZoneMap_C_ViewChanged::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, Temp_float_Variable1) == 0x000008, "Member 'BP_ZoneMap_C_ViewChanged::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_ZoneMap_C_ViewChanged::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, K2Node_Select_Default) == 0x000010, "Member 'BP_ZoneMap_C_ViewChanged::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_ZoneMap_C_ViewChanged::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_ZoneMap_C_ViewChanged::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_ViewChanged::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_ViewChanged::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_ViewChanged, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_ZoneMap_C_ViewChanged::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.SetCameraLag
// 0x000C (0x000C - 0x0000)
struct BP_ZoneMap_C_SetCameraLag final
{
public:
	bool                                          Location_Lag;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Rotation_Lag;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Location_Lag_Speed;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Lag_Speed;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_SetCameraLag) == 0x000004, "Wrong alignment on BP_ZoneMap_C_SetCameraLag");
static_assert(sizeof(BP_ZoneMap_C_SetCameraLag) == 0x00000C, "Wrong size on BP_ZoneMap_C_SetCameraLag");
static_assert(offsetof(BP_ZoneMap_C_SetCameraLag, Location_Lag) == 0x000000, "Member 'BP_ZoneMap_C_SetCameraLag::Location_Lag' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetCameraLag, Rotation_Lag) == 0x000001, "Member 'BP_ZoneMap_C_SetCameraLag::Rotation_Lag' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetCameraLag, Location_Lag_Speed) == 0x000004, "Member 'BP_ZoneMap_C_SetCameraLag::Location_Lag_Speed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetCameraLag, Rotation_Lag_Speed) == 0x000008, "Member 'BP_ZoneMap_C_SetCameraLag::Rotation_Lag_Speed' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Planet_Recenter
// 0x00D0 (0x00D0 - 0x0000)
struct BP_ZoneMap_C_Planet_Recenter final
{
public:
	bool                                          bInstant;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlanetData*                            CallFunc_GetZoneMapPlanet_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x0020(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x002C(0x000C)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0038(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Planet_Recenter) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Planet_Recenter");
static_assert(sizeof(BP_ZoneMap_C_Planet_Recenter) == 0x0000D0, "Wrong size on BP_ZoneMap_C_Planet_Recenter");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, bInstant) == 0x000000, "Member 'BP_ZoneMap_C_Planet_Recenter::bInstant' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_GetZoneMapPlanet_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_GetZoneMapPlanet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_MakeRotator_ReturnValue1) == 0x000020, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_ComposeRotators_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000038, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Planet_Recenter, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x0000C8, "Member 'BP_ZoneMap_C_Planet_Recenter::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.SetGamma
// 0x0008 (0x0008 - 0x0000)
struct BP_ZoneMap_C_SetGamma final
{
public:
	float                                         Gamma;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_SetGamma) == 0x000004, "Wrong alignment on BP_ZoneMap_C_SetGamma");
static_assert(sizeof(BP_ZoneMap_C_SetGamma) == 0x000008, "Wrong size on BP_ZoneMap_C_SetGamma");
static_assert(offsetof(BP_ZoneMap_C_SetGamma, Gamma) == 0x000000, "Member 'BP_ZoneMap_C_SetGamma::Gamma' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_SetGamma, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_ZoneMap_C_SetGamma::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Initialize_LevelMap_Camera_Properties
// 0x0268 (0x0268 - 0x0000)
struct BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties final
{
public:
	bool                                          MyCurrentLevel;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable;                              // 0x0004(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0018(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00A8(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0138(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0150(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x015C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default;                             // 0x0168(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0180(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue1;                        // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0230(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x023C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Default_Level_Map_Pivot_Point_Of_Interest_Transform_Location; // 0x0248(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsViewingCurrentLevel_ReturnValue;        // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select1_Default;                            // 0x0258(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties");
static_assert(sizeof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties) == 0x000268, "Wrong size on BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, MyCurrentLevel) == 0x000000, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::MyCurrentLevel' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, Temp_bool_Variable) == 0x000001, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, Temp_struct_Variable) == 0x000004, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, Temp_bool_Variable1) == 0x000010, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000018, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000A8, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_GetControlRotation_ReturnValue) == 0x000138, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakRotator_Roll) == 0x000144, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakRotator_Pitch) == 0x000148, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakRotator_Yaw) == 0x00014C, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_MakeRotator_ReturnValue) == 0x000150, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00015C, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, K2Node_Select_Default) == 0x000168, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakVector_X) == 0x000174, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakVector_Y) == 0x000178, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakVector_Z) == 0x00017C, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000180, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_FMax_ReturnValue) == 0x000210, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakRotator_Roll1) == 0x000214, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakRotator_Pitch1) == 0x000218, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_BreakRotator_Yaw1) == 0x00021C, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_FMax_ReturnValue1) == 0x000220, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_FMax_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_K2_GetPawn_ReturnValue) == 0x000228, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000230, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00023C, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_Get_Default_Level_Map_Pivot_Point_Of_Interest_Transform_Location) == 0x000248, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_Get_Default_Level_Map_Pivot_Point_Of_Interest_Transform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, CallFunc_IsViewingCurrentLevel_ReturnValue) == 0x000254, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::CallFunc_IsViewingCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties, K2Node_Select1_Default) == 0x000258, "Member 'BP_ZoneMap_C_Initialize_LevelMap_Camera_Properties::K2Node_Select1_Default' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get_Planet_Rotation_Target
// 0x0090 (0x0090 - 0x0000)
struct BP_ZoneMap_C_Get_Planet_Rotation_Target final
{
public:
	class UCurveFloat*                            My_ZoomRotationScaler;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         My_Input_Y;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         My_Input_X;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Max_Pitch;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Planet_Rotate_Speed;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x0044(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0050(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_Planet_Rotation_Target) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Get_Planet_Rotation_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_Planet_Rotation_Target) == 0x000090, "Wrong size on BP_ZoneMap_C_Get_Planet_Rotation_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, My_ZoomRotationScaler) == 0x000000, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::My_ZoomRotationScaler' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, My_Input_Y) == 0x000008, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::My_Input_Y' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, My_Input_X) == 0x00000C, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::My_Input_X' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, Local_Max_Pitch) == 0x000010, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::Local_Max_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, Local_Planet_Rotate_Speed) == 0x000014, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::Local_Planet_Rotate_Speed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, Temp_bool_Variable) == 0x000018, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_GetFloatValue_ReturnValue) == 0x00001C, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, Temp_bool_Variable1) == 0x000020, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000022, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_BooleanOR_ReturnValue) == 0x000023, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x000028, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00002C, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000034, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_MakeRotator_ReturnValue1) == 0x000044, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_ComposeRotators_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00005C, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000060, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000064, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x000068, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00006C, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x000070, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_FClamp_ReturnValue) == 0x000074, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x000078, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, K2Node_Select_Default) == 0x00007C, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000080, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, CallFunc_FClamp_ReturnValue1) == 0x000084, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Rotation_Target, K2Node_Select1_Default) == 0x000088, "Member 'BP_ZoneMap_C_Get_Planet_Rotation_Target::K2Node_Select1_Default' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get_Planet_and_Galaxy_Scale_Target
// 0x0018 (0x0018 - 0x0000)
struct BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target final
{
public:
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target) == 0x000004, "Wrong alignment on BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target) == 0x000018, "Wrong size on BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000000, "Member 'BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00000C, "Member 'BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000010, "Member 'BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_Get_Planet_and_Galaxy_Scale_Target::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Get_Planet_Gimbal_Target
// 0x0038 (0x0038 - 0x0000)
struct BP_ZoneMap_C_Get_Planet_Gimbal_Target final
{
public:
	float                                         Local_Max_Pitch;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Planet_Rotate_Speed;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue1;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x002C(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Get_Planet_Gimbal_Target) == 0x000004, "Wrong alignment on BP_ZoneMap_C_Get_Planet_Gimbal_Target");
static_assert(sizeof(BP_ZoneMap_C_Get_Planet_Gimbal_Target) == 0x000038, "Wrong size on BP_ZoneMap_C_Get_Planet_Gimbal_Target");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, Local_Max_Pitch) == 0x000000, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::Local_Max_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, Local_Planet_Rotate_Speed) == 0x000004, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::Local_Planet_Rotate_Speed' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Abs_ReturnValue) == 0x00000C, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Abs_ReturnValue1) == 0x000010, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Abs_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_FMax_ReturnValue) == 0x000014, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000020, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000024, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000028, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Get_Planet_Gimbal_Target, CallFunc_MakeRotator_ReturnValue) == 0x00002C, "Member 'BP_ZoneMap_C_Get_Planet_Gimbal_Target::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Set_Keyframes
// 0x0014 (0x0014 - 0x0000)
struct BP_ZoneMap_C_Set_Keyframes final
{
public:
	struct FVector                                Transform_Target_Keyframe_0;                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Pitch_Target_Keyframe_0;                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Target_Keyframe_0;                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZoneMap_C_Set_Keyframes) == 0x000004, "Wrong alignment on BP_ZoneMap_C_Set_Keyframes");
static_assert(sizeof(BP_ZoneMap_C_Set_Keyframes) == 0x000014, "Wrong size on BP_ZoneMap_C_Set_Keyframes");
static_assert(offsetof(BP_ZoneMap_C_Set_Keyframes, Transform_Target_Keyframe_0) == 0x000000, "Member 'BP_ZoneMap_C_Set_Keyframes::Transform_Target_Keyframe_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Keyframes, Rotation_Pitch_Target_Keyframe_0) == 0x00000C, "Member 'BP_ZoneMap_C_Set_Keyframes::Rotation_Pitch_Target_Keyframe_0' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Set_Keyframes, Scale_Target_Keyframe_0) == 0x000010, "Member 'BP_ZoneMap_C_Set_Keyframes::Scale_Target_Keyframe_0' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.Initialize_Level_Map_DMIs
// 0x0050 (0x0050 - 0x0000)
struct BP_ZoneMap_C_Initialize_Level_Map_DMIs final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneMapLevelMeshInfo                  CallFunc_Array_Get_Item;                           // 0x0018(0x0028)(NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_Initialize_Level_Map_DMIs) == 0x000008, "Wrong alignment on BP_ZoneMap_C_Initialize_Level_Map_DMIs");
static_assert(sizeof(BP_ZoneMap_C_Initialize_Level_Map_DMIs) == 0x000050, "Wrong size on BP_ZoneMap_C_Initialize_Level_Map_DMIs");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, Temp_float_Variable) == 0x000000, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, Temp_float_Variable1) == 0x000010, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, Temp_bool_Variable) == 0x000014, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, K2Node_Select_Default) == 0x000040, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_Initialize_Level_Map_DMIs, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_ZoneMap_C_Initialize_Level_Map_DMIs::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ZoneMap.BP_ZoneMap_C.PlanetMap_ZoneMagnetism
// 0x00D0 (0x00D0 - 0x0000)
struct BP_ZoneMap_C_PlanetMap_ZoneMagnetism final
{
public:
	bool                                          Magnetized;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MyScaledDeflection;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MyMagnetisedInputScaling;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MyInterpRotation;                                  // 0x0010(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneMapData_Base_C*                    MyZone;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlanetPOI_C*                        K2Node_DynamicCast_AsBP_Planet_POI;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0054(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x0060(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x006C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0098(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue2;                 // 0x00A8(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue3;                 // 0x00B4(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue1;             // 0x00C0(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism) == 0x000008, "Wrong alignment on BP_ZoneMap_C_PlanetMap_ZoneMagnetism");
static_assert(sizeof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism) == 0x0000D0, "Wrong size on BP_ZoneMap_C_PlanetMap_ZoneMagnetism");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, Magnetized) == 0x000000, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::Magnetized' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, MyScaledDeflection) == 0x000004, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::MyScaledDeflection' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, MyMagnetisedInputScaling) == 0x000008, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::MyMagnetisedInputScaling' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, MyInterpRotation) == 0x000010, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::MyInterpRotation' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, MyZone) == 0x000020, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::MyZone' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, K2Node_DynamicCast_AsBP_Planet_POI) == 0x000030, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::K2Node_DynamicCast_AsBP_Planet_POI' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_VSize_ReturnValue) == 0x000050, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_MakeRotator_ReturnValue) == 0x000054, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_MakeRotator_ReturnValue1) == 0x000060, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_ComposeRotators_ReturnValue) == 0x00006C, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_IsValid_ReturnValue1) == 0x000078, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_GetFloatValue_ReturnValue) == 0x00007C, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000080, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000084, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000094, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_RInterpTo_ReturnValue) == 0x000098, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A4, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_MakeRotator_ReturnValue2) == 0x0000A8, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_MakeRotator_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_MakeRotator_ReturnValue3) == 0x0000B4, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_MakeRotator_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_ZoneMap_C_PlanetMap_ZoneMagnetism, CallFunc_ComposeRotators_ReturnValue1) == 0x0000C0, "Member 'BP_ZoneMap_C_PlanetMap_ZoneMagnetism::CallFunc_ComposeRotators_ReturnValue1' has a wrong offset!");

}

