#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPIO_DiamondChestWall

#include "Basic.hpp"

#include "Enum_DChest_MusicStates_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.ExecuteUbergraph_BPIO_DiamondChestWall
// 0x00F0 (0x00F0 - 0x0000)
struct BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADroppedInventoryItemPickup*            K2Node_ComponentBoundEvent_Pickup1;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADroppedInventoryItemPickup*            K2Node_ComponentBoundEvent_Pickup;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_PickedUpBy;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakInventoryItemPickup*                K2Node_DynamicCast_AsOak_Inventory_Item_Pickup;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_SpawnAndAttachLoot_SelectedConfigurationName; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_UserStateEvent_bFromLoad5;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad4;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad3;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad2;                  // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_UserStateEvent_bFromLoad1;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayLength_ReturnValue1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ALight*>                         CallFunc_Map_Keys_Keys;                            // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	class ALight*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Map_Find_Value;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0078(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_UserStateEvent_bFromLoad;                   // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0098(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x00B0(0x0008)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x00BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x00C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue4;     // 0x00D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue5;     // 0x00E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall) == 0x000008, "Wrong alignment on BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall");
static_assert(sizeof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall) == 0x0000F0, "Wrong size on BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, EntryPoint) == 0x000000, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_ComponentBoundEvent_Pickup1) == 0x000010, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_ComponentBoundEvent_Pickup1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_ComponentBoundEvent_Pickup) == 0x000018, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_ComponentBoundEvent_Pickup' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_ComponentBoundEvent_PickedUpBy) == 0x000020, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_ComponentBoundEvent_PickedUpBy' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_DynamicCast_AsOak_Inventory_Item_Pickup) == 0x000028, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_DynamicCast_AsOak_Inventory_Item_Pickup' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_SpawnAndAttachLoot_SelectedConfigurationName) == 0x000038, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_SpawnAndAttachLoot_SelectedConfigurationName' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_UserStateEvent_bFromLoad5) == 0x000040, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_UserStateEvent_bFromLoad5' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_UserStateEvent_bFromLoad4) == 0x000041, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_UserStateEvent_bFromLoad4' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_UserStateEvent_bFromLoad3) == 0x000042, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_UserStateEvent_bFromLoad3' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_UserStateEvent_bFromLoad2) == 0x000043, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_UserStateEvent_bFromLoad2' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_GetPlayLength_ReturnValue) == 0x000044, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_UserStateEvent_bFromLoad1) == 0x000048, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_UserStateEvent_bFromLoad1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_GetPlayLength_ReturnValue1) == 0x00004C, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_GetPlayLength_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Map_Keys_Keys) == 0x000050, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Array_Get_Item) == 0x000060, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Map_Find_Value) == 0x000068, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Map_Find_ReturnValue) == 0x00006C, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Lerp_ReturnValue) == 0x000070, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_LinearColorLerp_ReturnValue) == 0x000078, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, K2Node_UserStateEvent_bFromLoad) == 0x000094, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::K2Node_UserStateEvent_bFromLoad' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000098, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x0000A4, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_SetTimer_ReturnValue) == 0x0000B0, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x0000BC, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x0000C8, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_GetComponentLocation_ReturnValue4) == 0x0000D4, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_GetComponentLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall, CallFunc_K2_GetComponentLocation_ReturnValue5) == 0x0000E0, "Member 'BPIO_DiamondChestWall_C_ExecuteUbergraph_BPIO_DiamondChestWall::CallFunc_K2_GetComponentLocation_ReturnValue5' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.__UserState_WallState_0
// 0x0001 (0x0001 - 0x0000)
struct BPIO_DiamondChestWall_C___UserState_WallState_0 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C___UserState_WallState_0) == 0x000001, "Wrong alignment on BPIO_DiamondChestWall_C___UserState_WallState_0");
static_assert(sizeof(BPIO_DiamondChestWall_C___UserState_WallState_0) == 0x000001, "Wrong size on BPIO_DiamondChestWall_C___UserState_WallState_0");
static_assert(offsetof(BPIO_DiamondChestWall_C___UserState_WallState_0, bFromLoad) == 0x000000, "Member 'BPIO_DiamondChestWall_C___UserState_WallState_0::bFromLoad' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.__UserState_WallState_3
// 0x0001 (0x0001 - 0x0000)
struct BPIO_DiamondChestWall_C___UserState_WallState_3 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C___UserState_WallState_3) == 0x000001, "Wrong alignment on BPIO_DiamondChestWall_C___UserState_WallState_3");
static_assert(sizeof(BPIO_DiamondChestWall_C___UserState_WallState_3) == 0x000001, "Wrong size on BPIO_DiamondChestWall_C___UserState_WallState_3");
static_assert(offsetof(BPIO_DiamondChestWall_C___UserState_WallState_3, bFromLoad) == 0x000000, "Member 'BPIO_DiamondChestWall_C___UserState_WallState_3::bFromLoad' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.__UserState_WallState_5
// 0x0001 (0x0001 - 0x0000)
struct BPIO_DiamondChestWall_C___UserState_WallState_5 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C___UserState_WallState_5) == 0x000001, "Wrong alignment on BPIO_DiamondChestWall_C___UserState_WallState_5");
static_assert(sizeof(BPIO_DiamondChestWall_C___UserState_WallState_5) == 0x000001, "Wrong size on BPIO_DiamondChestWall_C___UserState_WallState_5");
static_assert(offsetof(BPIO_DiamondChestWall_C___UserState_WallState_5, bFromLoad) == 0x000000, "Member 'BPIO_DiamondChestWall_C___UserState_WallState_5::bFromLoad' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.__UserState_WallState_4
// 0x0001 (0x0001 - 0x0000)
struct BPIO_DiamondChestWall_C___UserState_WallState_4 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C___UserState_WallState_4) == 0x000001, "Wrong alignment on BPIO_DiamondChestWall_C___UserState_WallState_4");
static_assert(sizeof(BPIO_DiamondChestWall_C___UserState_WallState_4) == 0x000001, "Wrong size on BPIO_DiamondChestWall_C___UserState_WallState_4");
static_assert(offsetof(BPIO_DiamondChestWall_C___UserState_WallState_4, bFromLoad) == 0x000000, "Member 'BPIO_DiamondChestWall_C___UserState_WallState_4::bFromLoad' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.__UserState_WallState_2
// 0x0001 (0x0001 - 0x0000)
struct BPIO_DiamondChestWall_C___UserState_WallState_2 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C___UserState_WallState_2) == 0x000001, "Wrong alignment on BPIO_DiamondChestWall_C___UserState_WallState_2");
static_assert(sizeof(BPIO_DiamondChestWall_C___UserState_WallState_2) == 0x000001, "Wrong size on BPIO_DiamondChestWall_C___UserState_WallState_2");
static_assert(offsetof(BPIO_DiamondChestWall_C___UserState_WallState_2, bFromLoad) == 0x000000, "Member 'BPIO_DiamondChestWall_C___UserState_WallState_2::bFromLoad' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.__UserState_WallState_1
// 0x0001 (0x0001 - 0x0000)
struct BPIO_DiamondChestWall_C___UserState_WallState_1 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C___UserState_WallState_1) == 0x000001, "Wrong alignment on BPIO_DiamondChestWall_C___UserState_WallState_1");
static_assert(sizeof(BPIO_DiamondChestWall_C___UserState_WallState_1) == 0x000001, "Wrong size on BPIO_DiamondChestWall_C___UserState_WallState_1");
static_assert(offsetof(BPIO_DiamondChestWall_C___UserState_WallState_1, bFromLoad) == 0x000000, "Member 'BPIO_DiamondChestWall_C___UserState_WallState_1::bFromLoad' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey
// 0x0010 (0x0010 - 0x0000)
struct BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey final
{
public:
	class ADroppedInventoryItemPickup*            Pickup;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PickedUpBy;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey) == 0x000008, "Wrong alignment on BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey");
static_assert(sizeof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey) == 0x000010, "Wrong size on BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey");
static_assert(offsetof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey, Pickup) == 0x000000, "Member 'BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey::Pickup' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey, PickedUpBy) == 0x000008, "Member 'BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_0_PickupDetachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey::PickedUpBy' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey
// 0x0008 (0x0008 - 0x0000)
struct BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey final
{
public:
	class ADroppedInventoryItemPickup*            Pickup;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey) == 0x000008, "Wrong alignment on BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey");
static_assert(sizeof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey) == 0x000008, "Wrong size on BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey");
static_assert(offsetof(BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey, Pickup) == 0x000000, "Member 'BPIO_DiamondChestWall_C_BndEvt__Loot_K2Node_ComponentBoundEvent_1_PickupAttachedDelegate__DelegateSignature_BPIO_Lootable_Global_GoldenKey::Pickup' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BPIO_DiamondChestWall_C_UserConstructionScript final
{
public:
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue3;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue4;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPIO_DiamondChestWall_C_UserConstructionScript) == 0x000008, "Wrong alignment on BPIO_DiamondChestWall_C_UserConstructionScript");
static_assert(sizeof(BPIO_DiamondChestWall_C_UserConstructionScript) == 0x000020, "Wrong size on BPIO_DiamondChestWall_C_UserConstructionScript");
static_assert(offsetof(BPIO_DiamondChestWall_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000000, "Member 'BPIO_DiamondChestWall_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000004, "Member 'BPIO_DiamondChestWall_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000008, "Member 'BPIO_DiamondChestWall_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue3) == 0x00000C, "Member 'BPIO_DiamondChestWall_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue4) == 0x000010, "Member 'BPIO_DiamondChestWall_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'BPIO_DiamondChestWall_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.CloseAllWallsAndProgressChestState?
// 0x0038 (0x0038 - 0x0000)
struct BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_ final
{
public:
	int32                                         NumWallsClosed;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_DChest_MusicStates                       Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DChest_MusicStates                       Temp_byte_Variable1;                               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DChest_MusicStates                       Temp_byte_Variable2;                               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DChest_MusicStates                       K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue1;           // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue1;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue2;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_) == 0x000004, "Wrong alignment on BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_");
static_assert(sizeof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_) == 0x000038, "Wrong size on BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, NumWallsClosed) == 0x000000, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::NumWallsClosed' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, Temp_byte_Variable) == 0x000006, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, Temp_int_Variable) == 0x000008, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, Temp_byte_Variable1) == 0x00000C, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, Temp_byte_Variable2) == 0x00000D, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, K2Node_Select_Default) == 0x00000E, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_NotEqual_ByteByte_ReturnValue1) == 0x00000F, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_NotEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000011, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000014, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_Conv_BoolToInt_ReturnValue1) == 0x00001C, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_Conv_BoolToInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000024, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_Conv_BoolToInt_ReturnValue2) == 0x000028, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_Conv_BoolToInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_BooleanAND_ReturnValue1) == 0x00002C, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_Add_IntInt_ReturnValue1) == 0x000030, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_, CallFunc_BooleanAND_ReturnValue2) == 0x000034, "Member 'BPIO_DiamondChestWall_C_CloseAllWallsAndProgressChestState_::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.SetLightIntensities
// 0x0090 (0x0090 - 0x0000)
struct BPIO_DiamondChestWall_C_SetLightIntensities final
{
public:
	TMap<class ALight*, float>                    Lights;                                            // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         Alpha;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALight*>                         CallFunc_Map_Keys_Keys;                            // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALight*                                 CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Map_Find_Value;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPIO_DiamondChestWall_C_SetLightIntensities) == 0x000008, "Wrong alignment on BPIO_DiamondChestWall_C_SetLightIntensities");
static_assert(sizeof(BPIO_DiamondChestWall_C_SetLightIntensities) == 0x000090, "Wrong size on BPIO_DiamondChestWall_C_SetLightIntensities");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, Lights) == 0x000000, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::Lights' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, Alpha) == 0x000050, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::Alpha' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Map_Keys_Keys) == 0x000058, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, Temp_int_Array_Index_Variable) == 0x000068, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Array_Get_Item) == 0x000070, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Map_Find_Value) == 0x00007C, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Less_IntInt_ReturnValue) == 0x000081, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Lerp_ReturnValue) == 0x000084, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_SetLightIntensities, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BPIO_DiamondChestWall_C_SetLightIntensities::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPIO_DiamondChestWall.BPIO_DiamondChestWall_C.CleanUpRemainingLoot
// 0x0038 (0x0038 - 0x0000)
struct BPIO_DiamondChestWall_C_CleanUpRemainingLoot final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADroppedInventoryItemPickup*>    CallFunc_GetAttachedPickups_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADroppedInventoryItemPickup*            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot) == 0x000008, "Wrong alignment on BPIO_DiamondChestWall_C_CleanUpRemainingLoot");
static_assert(sizeof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot) == 0x000038, "Wrong size on BPIO_DiamondChestWall_C_CleanUpRemainingLoot");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, CallFunc_RandomFloatInRange_ReturnValue) == 0x00000C, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, CallFunc_GetAttachedPickups_ReturnValue) == 0x000010, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::CallFunc_GetAttachedPickups_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, CallFunc_Array_Get_Item) == 0x000028, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPIO_DiamondChestWall_C_CleanUpRemainingLoot, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BPIO_DiamondChestWall_C_CleanUpRemainingLoot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

