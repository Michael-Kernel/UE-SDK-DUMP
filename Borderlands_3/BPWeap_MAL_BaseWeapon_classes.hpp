#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_MAL_BaseWeapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPWeap_BaseWeapon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWeap_MAL_BaseWeapon.BPWeap_MAL_BaseWeapon_C
// 0x0078 (0x0A48 - 0x09D0)
class ABPWeap_MAL_BaseWeapon_C : public ABPWeap_BaseWeapon_C
{
public:
	uint8                                         Pad_9CC[0x4];                                      // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BPWeap_MAL_BaseWeapon_C;            // 0x09D0(0x0008)(Transient, DuplicateTransient)
	float                                         ElementalInterpolationTimeline_ElementalAlpha_491B51944C4C5F786231C2B7EA1D51DB; // 0x09D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ElementalInterpolationTimeline__Direction_491B51944C4C5F786231C2B7EA1D51DB; // 0x09DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9DD[0x3];                                      // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ElementalInterpolationTimeline;                    // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponChargeComponent*                 ChargeComponent_Mode_01;                           // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponChargeComponent*                 ChargeComponent_Mode_02;                           // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Em_ReloadCurve;                                    // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Em_ModeSwitchCurve;                                // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PrimaryElementalBaseColor;                         // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PrimaryElementalHighlightColor;                    // 0x0A18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SecondaryElementalBaseColor;                       // 0x0A28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SecondaryElementalHighlightColor;                  // 0x0A38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPWeap_MAL_BaseWeapon(int32 EntryPoint);
	void PutDown_Event(class AWeapon* EventWeapon);
	void SetSecondaryElementalData(const struct FLinearColor& BaseColor, const struct FLinearColor& HighlightColor);
	void Event_ModeSwitched();
	void Weapon_NotifyEquipped();
	void K2_OnWeaponSkinApplied();
	void SetSecondary();
	void SetPrimary();
	void Initialize_Elemental_Emissive();
	void OnSwitchToSecondary();
	void OnSwitchToPrimary();
	void SetPrimaryElementalData(const struct FLinearColor& BaseColor, const struct FLinearColor& HighlightColor);
	void ElementalInterpolationTimeline__UpdateFunc();
	void ElementalInterpolationTimeline__FinishedFunc();
	void WeaponAttached();
	void Notify_ReloadStarted(bool bAutoReload);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetChargePercent(float* ChargePercent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWeap_MAL_BaseWeapon_C">();
	}
	static class ABPWeap_MAL_BaseWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPWeap_MAL_BaseWeapon_C>();
	}
};
static_assert(alignof(ABPWeap_MAL_BaseWeapon_C) == 0x000008, "Wrong alignment on ABPWeap_MAL_BaseWeapon_C");
static_assert(sizeof(ABPWeap_MAL_BaseWeapon_C) == 0x000A48, "Wrong size on ABPWeap_MAL_BaseWeapon_C");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, UberGraphFrame_BPWeap_MAL_BaseWeapon_C) == 0x0009D0, "Member 'ABPWeap_MAL_BaseWeapon_C::UberGraphFrame_BPWeap_MAL_BaseWeapon_C' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, ElementalInterpolationTimeline_ElementalAlpha_491B51944C4C5F786231C2B7EA1D51DB) == 0x0009D8, "Member 'ABPWeap_MAL_BaseWeapon_C::ElementalInterpolationTimeline_ElementalAlpha_491B51944C4C5F786231C2B7EA1D51DB' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, ElementalInterpolationTimeline__Direction_491B51944C4C5F786231C2B7EA1D51DB) == 0x0009DC, "Member 'ABPWeap_MAL_BaseWeapon_C::ElementalInterpolationTimeline__Direction_491B51944C4C5F786231C2B7EA1D51DB' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, ElementalInterpolationTimeline) == 0x0009E0, "Member 'ABPWeap_MAL_BaseWeapon_C::ElementalInterpolationTimeline' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, ChargeComponent_Mode_01) == 0x0009E8, "Member 'ABPWeap_MAL_BaseWeapon_C::ChargeComponent_Mode_01' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, ChargeComponent_Mode_02) == 0x0009F0, "Member 'ABPWeap_MAL_BaseWeapon_C::ChargeComponent_Mode_02' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, Em_ReloadCurve) == 0x0009F8, "Member 'ABPWeap_MAL_BaseWeapon_C::Em_ReloadCurve' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, Em_ModeSwitchCurve) == 0x000A00, "Member 'ABPWeap_MAL_BaseWeapon_C::Em_ModeSwitchCurve' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, PrimaryElementalBaseColor) == 0x000A08, "Member 'ABPWeap_MAL_BaseWeapon_C::PrimaryElementalBaseColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, PrimaryElementalHighlightColor) == 0x000A18, "Member 'ABPWeap_MAL_BaseWeapon_C::PrimaryElementalHighlightColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, SecondaryElementalBaseColor) == 0x000A28, "Member 'ABPWeap_MAL_BaseWeapon_C::SecondaryElementalBaseColor' has a wrong offset!");
static_assert(offsetof(ABPWeap_MAL_BaseWeapon_C, SecondaryElementalHighlightColor) == 0x000A38, "Member 'ABPWeap_MAL_BaseWeapon_C::SecondaryElementalHighlightColor' has a wrong offset!");

}

