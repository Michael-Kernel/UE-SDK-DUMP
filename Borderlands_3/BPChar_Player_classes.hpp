#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_Player

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPChar_Player.BPChar_Player_C
// 0x0220 (0x35F0 - 0x33D0)
#pragma pack(push, 0x1)
class alignas(0x10) ABPChar_Player_C : public AOakCharacter_Player
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x33D0(0x0008)(Transient, DuplicateTransient)
	class UTerritoryComponent*                    Territory;                                         // 0x33D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHavokNavObstacleComponent*             HavokNavObstacle;                                  // 0x33E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocialInteractionComponent*            SocialInteraction;                                 // 0x33E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakInventoryListComponent*             InventoryList;                                     // 0x33F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakInventoryListComponent*             BankInventoryList;                                 // 0x33F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMinimapIconComponent*               OakMinimapIcon;                                    // 0x3400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakHitRegionComponent*                 HitRegion;                                         // 0x3408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakCharacterSoundLogicComponent*       OakCharacterSoundLogic;                            // 0x3410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OakAttributeComponent_C*            BP_OakAttributeComponent;                          // 0x3418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPFightForYourLifeComponent_C*         BPFightForYourLifeComponent;                       // 0x3420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerMeleeStateComponent*             PlayerMeleeState;                                  // 0x3428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakPlayerAbilityManagerComponent*      OakPlayerAbilityManager;                           // 0x3430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBodyWeaponHoldManagerComponent*        BodyWeaponHoldManager;                             // 0x3438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakFirstPersonComponent*               FirstPerson;                                       // 0x3440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFoleyMainComponent*                    FoleyMain;                                         // 0x3448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGameplayTasksComponent*                GameplayTasks;                                     // 0x3450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerBalanceStateComponent*           PlayerBalanceState;                                // 0x3458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IK_Override;                                       // 0x3460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3461[0xF];                                     // 0x3461(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             R_Hand_IK_World;                                   // 0x3470(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             L_Hand_IK_World;                                   // 0x34A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FText                                   Text;                                              // 0x34D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           TextColor;                                         // 0x34E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   TextColorText;                                     // 0x34F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TextSize;                                          // 0x3510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextDuration;                                      // 0x3514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceEnd;                                          // 0x3518(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_HealthPickRegenerationScalar;                  // 0x3524(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_ButtSlamRadius;                                // 0x3530(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_ButtSlamImpact_Multiplier;                     // 0x353C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_SlideSpeedMultiplier;                          // 0x3548(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_CashMultiplier;                                // 0x3554(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_AmmoMultiplier;                                // 0x3560(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Multikill_Count;                                   // 0x356C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 Manufacturers;                                     // 0x3570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FForceSelection                        ForceImpact_Heavy;                                 // 0x3580(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	UMulticastDelegateProperty_                   GroundSlam;                                        // 0x35A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 ArtifactGroundSlamDamageType;                      // 0x35B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ArtifactSlideDamageType;                           // 0x35B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_ClassMod_Gunner_ClassModL02Equipped;           // 0x35C0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDueling;                                         // 0x35CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35CD[0x3];                                     // 0x35CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxAttributeFloat                     WalkSpeed_ZeroG;                                   // 0x35D0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     WalkSpeed_Normal;                                  // 0x35DC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void GroundSlam__DelegateSignature(float Distance, float Damage);
	void ExecuteUbergraph_BPChar_Player(int32 EntryPoint);
	void ServerStartZeroG();
	void EndZeroG();
	void StartZeroG();
	void Player_SpawnTransfusionProjectile(class UClass* DataBlueprint__Override_, class UClass* DamageType__Override_, class AActor* SourceActor, class AActor* TargetActor, float Damage, class AActor* Causer__Override_);
	void BndEvt__PlayerBalanceState_K2Node_ComponentBoundEvent_0_PlayerBalanceEvent__DelegateSignature_BPChar_Player(const int32 OldExperienceLevel, const int32 NewExperienceLevel);
	void Player_LevelUp(int32 Old_XP_Level, int32 New_XP_Level);
	void Multikill_Reset();
	void BndEvt__DamageCauserComponent_K2Node_ComponentBoundEvent_1_CauseDeathDelegate__DelegateSignature_BPChar_Player(const class UDamageComponent* Damaged, const struct FCausedDeathDetails& Details);
	void BndEvt__PlayerBalanceState_K2Node_ComponentBoundEvent_0_SimplePlayerBalanceEvent__DelegateSignature_BPChar_Player();
	void GroundSlam_End(float Distance);
	void BndEvt__DamageComponent_K2Node_ComponentBoundEvent_11_DamageCompHealthDepletedDelegate__DelegateSignature_BPChar_Player(class UDamageComponent* DamageReceiver, class UDamageCauserComponent* DamageCauser);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void DoMelee();
	void OnInventoryPickedUp(class AActor* PickedUpActor, int32 Quantity);
	void OnInventoryUnequipped(class AActor* InventoryActor, class UInventorySlotData* SlotData);
	void OnInventoryEquipped(class AActor* InventoryActor, class UInventorySlotData* SlotData);
	void SetMissionDebugText(const class FText& Text_0, float TextSize_0, float Duration, const struct FLinearColor& TextColor_0, bool FacePlayer);
	void Enemy_OnThoughtLockStop();
	void Enemy_OnThoughtLockStart();
	void Enemy_OnPhaseLockStop();
	void Enemy_OnPhaseLockStart();
	void Player_HealthDepleted(class AOakCharacter* Character);
	void UserConstructionScript();
	void ClearTargetingTimers();
	void GetHeadMesh(class USkeletalMesh** HeadMesh);
	void BackupFriendlyTargeting();
	void GroundSlamEnd(float Distance);
	void PlayLevelUpFX();
	void GetTransfusionSpawnEndLocation(class AActor* SourceActor, struct FVector* Res);

	bool PreInventoryItemPickupCheck(class AActor* PickupActor, int32 Quantity, bool UsedByInstigator, class AInventoryItemPickup* WorldPickupActor) const;
	void GetLevelUpFXAttachComponent(class USceneComponent** Res) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_Player_C">();
	}
	static class ABPChar_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_Player_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABPChar_Player_C) == 0x000010, "Wrong alignment on ABPChar_Player_C");
static_assert(sizeof(ABPChar_Player_C) == 0x0035F0, "Wrong size on ABPChar_Player_C");
static_assert(offsetof(ABPChar_Player_C, UberGraphFrame) == 0x0033D0, "Member 'ABPChar_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Territory) == 0x0033D8, "Member 'ABPChar_Player_C::Territory' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, HavokNavObstacle) == 0x0033E0, "Member 'ABPChar_Player_C::HavokNavObstacle' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, SocialInteraction) == 0x0033E8, "Member 'ABPChar_Player_C::SocialInteraction' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, InventoryList) == 0x0033F0, "Member 'ABPChar_Player_C::InventoryList' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, BankInventoryList) == 0x0033F8, "Member 'ABPChar_Player_C::BankInventoryList' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, OakMinimapIcon) == 0x003400, "Member 'ABPChar_Player_C::OakMinimapIcon' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, HitRegion) == 0x003408, "Member 'ABPChar_Player_C::HitRegion' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, OakCharacterSoundLogic) == 0x003410, "Member 'ABPChar_Player_C::OakCharacterSoundLogic' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, BP_OakAttributeComponent) == 0x003418, "Member 'ABPChar_Player_C::BP_OakAttributeComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, BPFightForYourLifeComponent) == 0x003420, "Member 'ABPChar_Player_C::BPFightForYourLifeComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, PlayerMeleeState) == 0x003428, "Member 'ABPChar_Player_C::PlayerMeleeState' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, OakPlayerAbilityManager) == 0x003430, "Member 'ABPChar_Player_C::OakPlayerAbilityManager' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, BodyWeaponHoldManager) == 0x003438, "Member 'ABPChar_Player_C::BodyWeaponHoldManager' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, FirstPerson) == 0x003440, "Member 'ABPChar_Player_C::FirstPerson' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, FoleyMain) == 0x003448, "Member 'ABPChar_Player_C::FoleyMain' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, GameplayTasks) == 0x003450, "Member 'ABPChar_Player_C::GameplayTasks' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, PlayerBalanceState) == 0x003458, "Member 'ABPChar_Player_C::PlayerBalanceState' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, IK_Override) == 0x003460, "Member 'ABPChar_Player_C::IK_Override' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, R_Hand_IK_World) == 0x003470, "Member 'ABPChar_Player_C::R_Hand_IK_World' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, L_Hand_IK_World) == 0x0034A0, "Member 'ABPChar_Player_C::L_Hand_IK_World' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Text) == 0x0034D0, "Member 'ABPChar_Player_C::Text' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, TextColor) == 0x0034E8, "Member 'ABPChar_Player_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, TextColorText) == 0x0034F8, "Member 'ABPChar_Player_C::TextColorText' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, TextSize) == 0x003510, "Member 'ABPChar_Player_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, TextDuration) == 0x003514, "Member 'ABPChar_Player_C::TextDuration' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, TraceEnd) == 0x003518, "Member 'ABPChar_Player_C::TraceEnd' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_HealthPickRegenerationScalar) == 0x003524, "Member 'ABPChar_Player_C::Att_HealthPickRegenerationScalar' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_ButtSlamRadius) == 0x003530, "Member 'ABPChar_Player_C::Att_ButtSlamRadius' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_ButtSlamImpact_Multiplier) == 0x00353C, "Member 'ABPChar_Player_C::Att_ButtSlamImpact_Multiplier' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_SlideSpeedMultiplier) == 0x003548, "Member 'ABPChar_Player_C::Att_SlideSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_CashMultiplier) == 0x003554, "Member 'ABPChar_Player_C::Att_CashMultiplier' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_AmmoMultiplier) == 0x003560, "Member 'ABPChar_Player_C::Att_AmmoMultiplier' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Multikill_Count) == 0x00356C, "Member 'ABPChar_Player_C::Multikill_Count' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Manufacturers) == 0x003570, "Member 'ABPChar_Player_C::Manufacturers' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, ForceImpact_Heavy) == 0x003580, "Member 'ABPChar_Player_C::ForceImpact_Heavy' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, GroundSlam) == 0x0035A0, "Member 'ABPChar_Player_C::GroundSlam' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, ArtifactGroundSlamDamageType) == 0x0035B0, "Member 'ABPChar_Player_C::ArtifactGroundSlamDamageType' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, ArtifactSlideDamageType) == 0x0035B8, "Member 'ABPChar_Player_C::ArtifactSlideDamageType' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, Att_ClassMod_Gunner_ClassModL02Equipped) == 0x0035C0, "Member 'ABPChar_Player_C::Att_ClassMod_Gunner_ClassModL02Equipped' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, IsDueling) == 0x0035CC, "Member 'ABPChar_Player_C::IsDueling' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, WalkSpeed_ZeroG) == 0x0035D0, "Member 'ABPChar_Player_C::WalkSpeed_ZeroG' has a wrong offset!");
static_assert(offsetof(ABPChar_Player_C, WalkSpeed_Normal) == 0x0035DC, "Member 'ABPChar_Player_C::WalkSpeed_Normal' has a wrong offset!");

}

