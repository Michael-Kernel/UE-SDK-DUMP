#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NavigationSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "NavigationSystem_structs.hpp"


namespace SDK
{

// Class NavigationSystem.GbxNavLayerBase
// 0x0000 (0x0030 - 0x0030)
class UGbxNavLayerBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxNavLayerBase">();
	}
	static class UGbxNavLayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxNavLayerBase>();
	}
};
static_assert(alignof(UGbxNavLayerBase) == 0x000008, "Wrong alignment on UGbxNavLayerBase");
static_assert(sizeof(UGbxNavLayerBase) == 0x000030, "Wrong size on UGbxNavLayerBase");

// Class NavigationSystem.HavokTraversalType
// 0x0030 (0x0058 - 0x0028)
class UHavokTraversalType : public UObject
{
public:
	float                                         MaxPlanarAngle;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRelativeSlopeAngle;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseCost;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGbxNavLayerBase*>               AssociatedLayers;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGbxUserEdgeBase*                       GbxUserEdge;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHavokUserEdge>             UserEdge;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokTraversalType">();
	}
	static class UHavokTraversalType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokTraversalType>();
	}
};
static_assert(alignof(UHavokTraversalType) == 0x000008, "Wrong alignment on UHavokTraversalType");
static_assert(sizeof(UHavokTraversalType) == 0x000058, "Wrong size on UHavokTraversalType");
static_assert(offsetof(UHavokTraversalType, MaxPlanarAngle) == 0x000028, "Member 'UHavokTraversalType::MaxPlanarAngle' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType, MaxRelativeSlopeAngle) == 0x00002C, "Member 'UHavokTraversalType::MaxRelativeSlopeAngle' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType, BaseCost) == 0x000030, "Member 'UHavokTraversalType::BaseCost' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType, AssociatedLayers) == 0x000038, "Member 'UHavokTraversalType::AssociatedLayers' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType, GbxUserEdge) == 0x000048, "Member 'UHavokTraversalType::GbxUserEdge' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType, UserEdge) == 0x000050, "Member 'UHavokTraversalType::UserEdge' has a wrong offset!");

// Class NavigationSystem.HavokTraversalType_Vault
// 0x0030 (0x0088 - 0x0058)
class UHavokTraversalType_Vault final : public UHavokTraversalType
{
public:
	float                                         MinWallWidth;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWallWidth;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWallHeight;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWallHeight;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUpHeight;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDownHeight;                                     // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalApex;                                      // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPlantAngle;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPlantLeftExtent;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPlantRightExtent;                              // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPlantMaxProfileAngle;                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokTraversalType_Vault">();
	}
	static class UHavokTraversalType_Vault* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokTraversalType_Vault>();
	}
};
static_assert(alignof(UHavokTraversalType_Vault) == 0x000008, "Wrong alignment on UHavokTraversalType_Vault");
static_assert(sizeof(UHavokTraversalType_Vault) == 0x000088, "Wrong size on UHavokTraversalType_Vault");
static_assert(offsetof(UHavokTraversalType_Vault, MinWallWidth) == 0x000058, "Member 'UHavokTraversalType_Vault::MinWallWidth' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, MaxWallWidth) == 0x00005C, "Member 'UHavokTraversalType_Vault::MaxWallWidth' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, MinWallHeight) == 0x000060, "Member 'UHavokTraversalType_Vault::MinWallHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, MaxWallHeight) == 0x000064, "Member 'UHavokTraversalType_Vault::MaxWallHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, MaxUpHeight) == 0x000068, "Member 'UHavokTraversalType_Vault::MaxUpHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, MaxDownHeight) == 0x00006C, "Member 'UHavokTraversalType_Vault::MaxDownHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, VerticalApex) == 0x000070, "Member 'UHavokTraversalType_Vault::VerticalApex' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, HandPlantAngle) == 0x000074, "Member 'UHavokTraversalType_Vault::HandPlantAngle' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, HandPlantLeftExtent) == 0x000078, "Member 'UHavokTraversalType_Vault::HandPlantLeftExtent' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, HandPlantRightExtent) == 0x00007C, "Member 'UHavokTraversalType_Vault::HandPlantRightExtent' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Vault, HandPlantMaxProfileAngle) == 0x000080, "Member 'UHavokTraversalType_Vault::HandPlantMaxProfileAngle' has a wrong offset!");

// Class NavigationSystem.NavigationSystemV1
// 0x0400 (0x0428 - 0x0028)
class UNavigationSystemV1 : public UNavigationSystemBase
{
public:
	class ANavigationData*                        MainNavData;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        AbstractNavData;                                   // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCrowdManagerBase>          CrowdManagerClass;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bAutoCreateNavigationData : 1;                     // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSpawnNavDataInNavBoundsLevel : 1;                 // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAllowClientSideNavigation : 1;                    // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldDiscardSubLevelNavData : 1;                 // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bTickWhilePaused : 1;                              // 0x0040(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSupportRebuilding : 1;                            // 0x0040(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bInitialBuildingLocked : 1;                        // 0x0040(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_40_7 : 1;                                   // 0x0040(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bSkipAgentHeightCheckWhenPickingNavData : 1;       // 0x0041(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ENavDataGatheringModeConfig                   DataGatheringMode;                                 // 0x0044(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bGenerateNavigationOnlyAroundNavigationInvokers : 1; // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveTilesUpdateInterval;                         // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FNavDataConfig>                 SupportedAgents;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                         DirtyAreasUpdateFreq;                              // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANavigationData*>                NavDataSet;                                        // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ANavigationData*>                NavDataRegistrationQueue;                          // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x60];                                      // 0x0088(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnNavDataRegisteredEvent;                          // 0x00E8(0x0010)(ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNavigationGenerationFinishedDelegate;            // 0x00F8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0xCC];                                     // 0x0108(0x00CC)(Fixing Size After Last Property [ Dumper-7 ])
	EFNavigationSystemRunMode                     OperationMode;                                     // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D5[0x23B];                                    // 0x01D5(0x023B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         NavigationDataClassName;                           // 0x0410(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UNavigationSystemV1* GetNavigationSystem(class UObject* WorldContextObject);
	static struct FVector GetRandomPointInNavigableRadius(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	static struct FVector GetRandomReachablePointInRadius(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	static bool K2_GetRandomPointInNavigableRadius(class UObject* WorldContextObject, const struct FVector& Origin, struct FVector* RandomLocation, float Radius, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	static bool K2_GetRandomReachablePointInRadius(class UObject* WorldContextObject, const struct FVector& Origin, struct FVector* RandomLocation, float Radius, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	static bool K2_ProjectPointToNavigation(class UObject* WorldContextObject, const struct FVector& Point, struct FVector* ProjectedLocation, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass, const struct FVector& QueryExtent);
	static struct FVector ProjectPointToNavigation(class UObject* WorldContextObject, const struct FVector& Point, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass, const struct FVector& QueryExtent);
	static void SimpleMoveToActor(class AController* Controller, const class AActor* Goal);
	static void SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);

	void OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationSystemV1">();
	}
	static class UNavigationSystemV1* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationSystemV1>();
	}
};
static_assert(alignof(UNavigationSystemV1) == 0x000008, "Wrong alignment on UNavigationSystemV1");
static_assert(sizeof(UNavigationSystemV1) == 0x000428, "Wrong size on UNavigationSystemV1");
static_assert(offsetof(UNavigationSystemV1, MainNavData) == 0x000028, "Member 'UNavigationSystemV1::MainNavData' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, AbstractNavData) == 0x000030, "Member 'UNavigationSystemV1::AbstractNavData' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, CrowdManagerClass) == 0x000038, "Member 'UNavigationSystemV1::CrowdManagerClass' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, DataGatheringMode) == 0x000044, "Member 'UNavigationSystemV1::DataGatheringMode' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, ActiveTilesUpdateInterval) == 0x00004C, "Member 'UNavigationSystemV1::ActiveTilesUpdateInterval' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, SupportedAgents) == 0x000050, "Member 'UNavigationSystemV1::SupportedAgents' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, DirtyAreasUpdateFreq) == 0x000060, "Member 'UNavigationSystemV1::DirtyAreasUpdateFreq' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, NavDataSet) == 0x000068, "Member 'UNavigationSystemV1::NavDataSet' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, NavDataRegistrationQueue) == 0x000078, "Member 'UNavigationSystemV1::NavDataRegistrationQueue' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, OnNavDataRegisteredEvent) == 0x0000E8, "Member 'UNavigationSystemV1::OnNavDataRegisteredEvent' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, OnNavigationGenerationFinishedDelegate) == 0x0000F8, "Member 'UNavigationSystemV1::OnNavigationGenerationFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, OperationMode) == 0x0001D4, "Member 'UNavigationSystemV1::OperationMode' has a wrong offset!");
static_assert(offsetof(UNavigationSystemV1, NavigationDataClassName) == 0x000410, "Member 'UNavigationSystemV1::NavigationDataClassName' has a wrong offset!");

// Class NavigationSystem.NavArea
// 0x0040 (0x0070 - 0x0030)
class UNavArea : public UNavAreaBase
{
public:
	float                                         DefaultCost;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedAreaEnteringCost;                             // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DrawColor;                                         // 0x0038(0x0004)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                      SupportedAgents;                                   // 0x003C(0x0004)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bSupportsAgent0 : 1;                               // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent1 : 1;                               // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent2 : 1;                               // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent3 : 1;                               // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent4 : 1;                               // 0x0040(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent5 : 1;                               // 0x0040(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent6 : 1;                               // 0x0040(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent7 : 1;                               // 0x0040(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent8 : 1;                               // 0x0041(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent9 : 1;                               // 0x0041(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent10 : 1;                              // 0x0041(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent11 : 1;                              // 0x0041(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent12 : 1;                              // 0x0041(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent13 : 1;                              // 0x0041(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent14 : 1;                              // 0x0041(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsAgent15 : 1;                              // 0x0041(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                GbxNavArea;                                        // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHavokNavMaterial                             HavokNavMaterial;                                  // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGbxNavLayerBase*>               IgnoreLayers;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                   EffectiveArea;                                     // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea">();
	}
	static class UNavArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea>();
	}
};
static_assert(alignof(UNavArea) == 0x000008, "Wrong alignment on UNavArea");
static_assert(sizeof(UNavArea) == 0x000070, "Wrong size on UNavArea");
static_assert(offsetof(UNavArea, DefaultCost) == 0x000030, "Member 'UNavArea::DefaultCost' has a wrong offset!");
static_assert(offsetof(UNavArea, FixedAreaEnteringCost) == 0x000034, "Member 'UNavArea::FixedAreaEnteringCost' has a wrong offset!");
static_assert(offsetof(UNavArea, DrawColor) == 0x000038, "Member 'UNavArea::DrawColor' has a wrong offset!");
static_assert(offsetof(UNavArea, SupportedAgents) == 0x00003C, "Member 'UNavArea::SupportedAgents' has a wrong offset!");
static_assert(offsetof(UNavArea, GbxNavArea) == 0x000048, "Member 'UNavArea::GbxNavArea' has a wrong offset!");
static_assert(offsetof(UNavArea, HavokNavMaterial) == 0x000050, "Member 'UNavArea::HavokNavMaterial' has a wrong offset!");
static_assert(offsetof(UNavArea, IgnoreLayers) == 0x000058, "Member 'UNavArea::IgnoreLayers' has a wrong offset!");
static_assert(offsetof(UNavArea, EffectiveArea) == 0x000068, "Member 'UNavArea::EffectiveArea' has a wrong offset!");

// Class NavigationSystem.NavAreaMeta
// 0x0000 (0x0070 - 0x0070)
class UNavAreaMeta : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavAreaMeta">();
	}
	static class UNavAreaMeta* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavAreaMeta>();
	}
};
static_assert(alignof(UNavAreaMeta) == 0x000008, "Wrong alignment on UNavAreaMeta");
static_assert(sizeof(UNavAreaMeta) == 0x000070, "Wrong size on UNavAreaMeta");

// Class NavigationSystem.NavAreaMeta_SwitchByAgent
// 0x0080 (0x00F0 - 0x0070)
class UNavAreaMeta_SwitchByAgent final : public UNavAreaMeta
{
public:
	TSubclassOf<class UNavArea>                   Agent0Area;                                        // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent1Area;                                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent2Area;                                        // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent3Area;                                        // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent4Area;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent5Area;                                        // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent6Area;                                        // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent7Area;                                        // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent8Area;                                        // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent9Area;                                        // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent10Area;                                       // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent11Area;                                       // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent12Area;                                       // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent13Area;                                       // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent14Area;                                       // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   Agent15Area;                                       // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavAreaMeta_SwitchByAgent">();
	}
	static class UNavAreaMeta_SwitchByAgent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavAreaMeta_SwitchByAgent>();
	}
};
static_assert(alignof(UNavAreaMeta_SwitchByAgent) == 0x000008, "Wrong alignment on UNavAreaMeta_SwitchByAgent");
static_assert(sizeof(UNavAreaMeta_SwitchByAgent) == 0x0000F0, "Wrong size on UNavAreaMeta_SwitchByAgent");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent0Area) == 0x000070, "Member 'UNavAreaMeta_SwitchByAgent::Agent0Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent1Area) == 0x000078, "Member 'UNavAreaMeta_SwitchByAgent::Agent1Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent2Area) == 0x000080, "Member 'UNavAreaMeta_SwitchByAgent::Agent2Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent3Area) == 0x000088, "Member 'UNavAreaMeta_SwitchByAgent::Agent3Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent4Area) == 0x000090, "Member 'UNavAreaMeta_SwitchByAgent::Agent4Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent5Area) == 0x000098, "Member 'UNavAreaMeta_SwitchByAgent::Agent5Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent6Area) == 0x0000A0, "Member 'UNavAreaMeta_SwitchByAgent::Agent6Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent7Area) == 0x0000A8, "Member 'UNavAreaMeta_SwitchByAgent::Agent7Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent8Area) == 0x0000B0, "Member 'UNavAreaMeta_SwitchByAgent::Agent8Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent9Area) == 0x0000B8, "Member 'UNavAreaMeta_SwitchByAgent::Agent9Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent10Area) == 0x0000C0, "Member 'UNavAreaMeta_SwitchByAgent::Agent10Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent11Area) == 0x0000C8, "Member 'UNavAreaMeta_SwitchByAgent::Agent11Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent12Area) == 0x0000D0, "Member 'UNavAreaMeta_SwitchByAgent::Agent12Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent13Area) == 0x0000D8, "Member 'UNavAreaMeta_SwitchByAgent::Agent13Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent14Area) == 0x0000E0, "Member 'UNavAreaMeta_SwitchByAgent::Agent14Area' has a wrong offset!");
static_assert(offsetof(UNavAreaMeta_SwitchByAgent, Agent15Area) == 0x0000E8, "Member 'UNavAreaMeta_SwitchByAgent::Agent15Area' has a wrong offset!");

// Class NavigationSystem.NavigationData
// 0x01C0 (0x0618 - 0x0458)
class ANavigationData : public AActor
{
public:
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    RenderingComp;                                     // 0x0460(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavDataConfig                         NavDataConfig;                                     // 0x0468(0x0068)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bEnableDrawing : 1;                                // 0x04D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bForceRebuildOnLoad : 1;                           // 0x04D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanBeMainNavData : 1;                             // 0x04D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, EditConst, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanSpawnOnRebuild : 1;                            // 0x04D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, EditConst, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRebuildAtRuntime : 1;                             // 0x04D0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Config, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ERuntimeGenerationType                        RuntimeGeneration;                                 // 0x04D4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObservedPathsTickInterval;                         // 0x04D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        DataVersion;                                       // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E0[0xD0];                                     // 0x04E0(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSupportedAreaData>             SupportedAreas;                                    // 0x05B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C0[0x58];                                     // 0x05C0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationData">();
	}
	static class ANavigationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavigationData>();
	}
};
static_assert(alignof(ANavigationData) == 0x000008, "Wrong alignment on ANavigationData");
static_assert(sizeof(ANavigationData) == 0x000618, "Wrong size on ANavigationData");
static_assert(offsetof(ANavigationData, RenderingComp) == 0x000460, "Member 'ANavigationData::RenderingComp' has a wrong offset!");
static_assert(offsetof(ANavigationData, NavDataConfig) == 0x000468, "Member 'ANavigationData::NavDataConfig' has a wrong offset!");
static_assert(offsetof(ANavigationData, RuntimeGeneration) == 0x0004D4, "Member 'ANavigationData::RuntimeGeneration' has a wrong offset!");
static_assert(offsetof(ANavigationData, ObservedPathsTickInterval) == 0x0004D8, "Member 'ANavigationData::ObservedPathsTickInterval' has a wrong offset!");
static_assert(offsetof(ANavigationData, DataVersion) == 0x0004DC, "Member 'ANavigationData::DataVersion' has a wrong offset!");
static_assert(offsetof(ANavigationData, SupportedAreas) == 0x0005B0, "Member 'ANavigationData::SupportedAreas' has a wrong offset!");

// Class NavigationSystem.AbstractNavData
// 0x0000 (0x0618 - 0x0618)
class AAbstractNavData final : public ANavigationData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbstractNavData">();
	}
	static class AAbstractNavData* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAbstractNavData>();
	}
};
static_assert(alignof(AAbstractNavData) == 0x000008, "Wrong alignment on AAbstractNavData");
static_assert(sizeof(AAbstractNavData) == 0x000618, "Wrong size on AAbstractNavData");

// Class NavigationSystem.CrowdManagerBase
// 0x0000 (0x0028 - 0x0028)
class UCrowdManagerBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrowdManagerBase">();
	}
	static class UCrowdManagerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrowdManagerBase>();
	}
};
static_assert(alignof(UCrowdManagerBase) == 0x000008, "Wrong alignment on UCrowdManagerBase");
static_assert(sizeof(UCrowdManagerBase) == 0x000028, "Wrong size on UCrowdManagerBase");

// Class NavigationSystem.HavokNavData
// 0x0000 (0x0028 - 0x0028)
class UHavokNavData : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavData">();
	}
	static class UHavokNavData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavData>();
	}
};
static_assert(alignof(UHavokNavData) == 0x000008, "Wrong alignment on UHavokNavData");
static_assert(sizeof(UHavokNavData) == 0x000028, "Wrong size on UHavokNavData");

// Class NavigationSystem.NavigationQueryFilter
// 0x0020 (0x0048 - 0x0028)
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>          Areas;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNavigationFilterFlags                 IncludeFlags;                                      // 0x0038(0x0004)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FNavigationFilterFlags                 ExcludeFlags;                                      // 0x003C(0x0004)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationQueryFilter">();
	}
	static class UNavigationQueryFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationQueryFilter>();
	}
};
static_assert(alignof(UNavigationQueryFilter) == 0x000008, "Wrong alignment on UNavigationQueryFilter");
static_assert(sizeof(UNavigationQueryFilter) == 0x000048, "Wrong size on UNavigationQueryFilter");
static_assert(offsetof(UNavigationQueryFilter, Areas) == 0x000028, "Member 'UNavigationQueryFilter::Areas' has a wrong offset!");
static_assert(offsetof(UNavigationQueryFilter, IncludeFlags) == 0x000038, "Member 'UNavigationQueryFilter::IncludeFlags' has a wrong offset!");
static_assert(offsetof(UNavigationQueryFilter, ExcludeFlags) == 0x00003C, "Member 'UNavigationQueryFilter::ExcludeFlags' has a wrong offset!");

// Class NavigationSystem.HavokNavigationQueryFilter
// 0x0000 (0x0048 - 0x0048)
class UHavokNavigationQueryFilter final : public UNavigationQueryFilter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavigationQueryFilter">();
	}
	static class UHavokNavigationQueryFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavigationQueryFilter>();
	}
};
static_assert(alignof(UHavokNavigationQueryFilter) == 0x000008, "Wrong alignment on UHavokNavigationQueryFilter");
static_assert(sizeof(UHavokNavigationQueryFilter) == 0x000048, "Wrong size on UHavokNavigationQueryFilter");

// Class NavigationSystem.HavokNavLayer
// 0x0010 (0x0038 - 0x0028)
class UHavokNavLayer : public UHavokNavLayerBase
{
public:
	class UGbxNavLayerBase*                       GbxNavLayer;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DrawColor;                                         // 0x0030(0x0004)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavLayer">();
	}
	static class UHavokNavLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavLayer>();
	}
};
static_assert(alignof(UHavokNavLayer) == 0x000008, "Wrong alignment on UHavokNavLayer");
static_assert(sizeof(UHavokNavLayer) == 0x000038, "Wrong size on UHavokNavLayer");
static_assert(offsetof(UHavokNavLayer, GbxNavLayer) == 0x000028, "Member 'UHavokNavLayer::GbxNavLayer' has a wrong offset!");
static_assert(offsetof(UHavokNavLayer, DrawColor) == 0x000030, "Member 'UHavokNavLayer::DrawColor' has a wrong offset!");

// Class NavigationSystem.HavokNavLayerRegistry
// 0x00E0 (0x0108 - 0x0028)
class UHavokNavLayerRegistry final : public UObject
{
public:
	uint8                                         Pad_28[0xE0];                                      // 0x0028(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavLayerRegistry">();
	}
	static class UHavokNavLayerRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavLayerRegistry>();
	}
};
static_assert(alignof(UHavokNavLayerRegistry) == 0x000008, "Wrong alignment on UHavokNavLayerRegistry");
static_assert(sizeof(UHavokNavLayerRegistry) == 0x000108, "Wrong size on UHavokNavLayerRegistry");

// Class NavigationSystem.HavokNavMesh
// 0x0028 (0x0050 - 0x0028)
class UHavokNavMesh final : public UHavokNavData
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavMesh">();
	}
	static class UHavokNavMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavMesh>();
	}
};
static_assert(alignof(UHavokNavMesh) == 0x000008, "Wrong alignment on UHavokNavMesh");
static_assert(sizeof(UHavokNavMesh) == 0x000050, "Wrong size on UHavokNavMesh");

// Class NavigationSystem.NavTraversalData
// 0x0020 (0x0050 - 0x0030)
class UNavTraversalData final : public UDataAsset
{
public:
	struct FHavokTraversalAnalysisSettings        Settings;                                          // 0x0030(0x0020)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavTraversalData">();
	}
	static class UNavTraversalData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavTraversalData>();
	}
};
static_assert(alignof(UNavTraversalData) == 0x000008, "Wrong alignment on UNavTraversalData");
static_assert(sizeof(UNavTraversalData) == 0x000050, "Wrong size on UNavTraversalData");
static_assert(offsetof(UNavTraversalData, Settings) == 0x000030, "Member 'UNavTraversalData::Settings' has a wrong offset!");

// Class NavigationSystem.HavokNavMeshGenerationSettings
// 0x0160 (0x0188 - 0x0028)
class UHavokNavMeshGenerationSettings final : public UObject
{
public:
	float                                         QuantizationGridSize;                              // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkableSlope;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegenerateAreaThreshold;                           // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegeneratedWidthThreshold;                         // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConvexThreshold;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumEdgesPerFace;                                // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHavokNavMeshEdgeMatchingSettings      EdgeMatchingSettings;                              // 0x0040(0x0028)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FHavokNavMeshEdgeMatchingSettings      StreamEdgeMatchingSettings;                        // 0x0068(0x0028)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	EHavokNavMeshEdgeMatchingMetric               EdgeMatchingMetric;                                // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EdgeConnectionIterations;                          // 0x0094(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHavokNavMeshRegionPruningSettings     RegionPruningSettings;                             // 0x0098(0x0014)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bFixupOverlappingTriangles : 1;                    // 0x00AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHavokNavMeshOverlappingTrianglesSettings OverlappingTrianglesSettings;                      // 0x00B0(0x000C)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         bWeldInputVertices : 1;                            // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeldThreshold;                                     // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSimplification : 1;                         // 0x00C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHavokNavMeshSimplificationSettings    SimplificationSettings;                            // 0x00C8(0x007C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHavokTraversalAnalysisSettings        TraversalAnalysisSettings;                         // 0x0148(0x0020)(Edit, Config, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        TraversalSettingsName;                             // 0x0168(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSaveInputSnapshot : 1;                            // 0x0180(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavMeshGenerationSettings">();
	}
	static class UHavokNavMeshGenerationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavMeshGenerationSettings>();
	}
};
static_assert(alignof(UHavokNavMeshGenerationSettings) == 0x000008, "Wrong alignment on UHavokNavMeshGenerationSettings");
static_assert(sizeof(UHavokNavMeshGenerationSettings) == 0x000188, "Wrong size on UHavokNavMeshGenerationSettings");
static_assert(offsetof(UHavokNavMeshGenerationSettings, QuantizationGridSize) == 0x000028, "Member 'UHavokNavMeshGenerationSettings::QuantizationGridSize' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, MaxWalkableSlope) == 0x00002C, "Member 'UHavokNavMeshGenerationSettings::MaxWalkableSlope' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, DegenerateAreaThreshold) == 0x000030, "Member 'UHavokNavMeshGenerationSettings::DegenerateAreaThreshold' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, DegeneratedWidthThreshold) == 0x000034, "Member 'UHavokNavMeshGenerationSettings::DegeneratedWidthThreshold' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, ConvexThreshold) == 0x000038, "Member 'UHavokNavMeshGenerationSettings::ConvexThreshold' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, MaxNumEdgesPerFace) == 0x00003C, "Member 'UHavokNavMeshGenerationSettings::MaxNumEdgesPerFace' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, EdgeMatchingSettings) == 0x000040, "Member 'UHavokNavMeshGenerationSettings::EdgeMatchingSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, StreamEdgeMatchingSettings) == 0x000068, "Member 'UHavokNavMeshGenerationSettings::StreamEdgeMatchingSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, EdgeMatchingMetric) == 0x000090, "Member 'UHavokNavMeshGenerationSettings::EdgeMatchingMetric' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, EdgeConnectionIterations) == 0x000094, "Member 'UHavokNavMeshGenerationSettings::EdgeConnectionIterations' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, RegionPruningSettings) == 0x000098, "Member 'UHavokNavMeshGenerationSettings::RegionPruningSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, OverlappingTrianglesSettings) == 0x0000B0, "Member 'UHavokNavMeshGenerationSettings::OverlappingTrianglesSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, WeldThreshold) == 0x0000C0, "Member 'UHavokNavMeshGenerationSettings::WeldThreshold' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, SimplificationSettings) == 0x0000C8, "Member 'UHavokNavMeshGenerationSettings::SimplificationSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, TraversalAnalysisSettings) == 0x000148, "Member 'UHavokNavMeshGenerationSettings::TraversalAnalysisSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshGenerationSettings, TraversalSettingsName) == 0x000168, "Member 'UHavokNavMeshGenerationSettings::TraversalSettingsName' has a wrong offset!");

// Class NavigationSystem.HavokNavMeshLayer
// 0x0010 (0x0048 - 0x0038)
class UHavokNavMeshLayer : public UHavokNavLayer
{
public:
	float                                         CharacterRadius;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterHalfHeight;                               // 0x003C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UserEdgeEntryDistance;                             // 0x0040(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bErodeWidth;                                       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavMeshLayer">();
	}
	static class UHavokNavMeshLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavMeshLayer>();
	}
};
static_assert(alignof(UHavokNavMeshLayer) == 0x000008, "Wrong alignment on UHavokNavMeshLayer");
static_assert(sizeof(UHavokNavMeshLayer) == 0x000048, "Wrong size on UHavokNavMeshLayer");
static_assert(offsetof(UHavokNavMeshLayer, CharacterRadius) == 0x000038, "Member 'UHavokNavMeshLayer::CharacterRadius' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshLayer, CharacterHalfHeight) == 0x00003C, "Member 'UHavokNavMeshLayer::CharacterHalfHeight' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshLayer, UserEdgeEntryDistance) == 0x000040, "Member 'UHavokNavMeshLayer::UserEdgeEntryDistance' has a wrong offset!");
static_assert(offsetof(UHavokNavMeshLayer, bErodeWidth) == 0x000044, "Member 'UHavokNavMeshLayer::bErodeWidth' has a wrong offset!");

// Class NavigationSystem.HavokNavMeshLayer_Default
// 0x0000 (0x0048 - 0x0048)
class UHavokNavMeshLayer_Default final : public UHavokNavMeshLayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavMeshLayer_Default">();
	}
	static class UHavokNavMeshLayer_Default* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavMeshLayer_Default>();
	}
};
static_assert(alignof(UHavokNavMeshLayer_Default) == 0x000008, "Wrong alignment on UHavokNavMeshLayer_Default");
static_assert(sizeof(UHavokNavMeshLayer_Default) == 0x000048, "Wrong size on UHavokNavMeshLayer_Default");

// Class NavigationSystem.HavokNavVolume
// 0x0018 (0x0040 - 0x0028)
class UHavokNavVolume final : public UHavokNavData
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavVolume">();
	}
	static class UHavokNavVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavVolume>();
	}
};
static_assert(alignof(UHavokNavVolume) == 0x000008, "Wrong alignment on UHavokNavVolume");
static_assert(sizeof(UHavokNavVolume) == 0x000040, "Wrong size on UHavokNavVolume");

// Class NavigationSystem.HavokNavVolumeGenerationSettings
// 0x0040 (0x0068 - 0x0028)
class UHavokNavVolumeGenerationSettings final : public UObject
{
public:
	struct FHavokNavVolumeChunkSettings           ChunkSettings;                                     // 0x0028(0x0008)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FHavokNavVolumeBorderSettings          BorderSettings;                                    // 0x0030(0x0008)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FHavokNavVolumeMergingSettings         MergingSettings;                                   // 0x0038(0x0020)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FHavokNavVolumePruningSettings         PruningSettings;                                   // 0x0058(0x0008)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSaveInputSnapshot;                                // 0x0060(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavVolumeGenerationSettings">();
	}
	static class UHavokNavVolumeGenerationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavVolumeGenerationSettings>();
	}
};
static_assert(alignof(UHavokNavVolumeGenerationSettings) == 0x000008, "Wrong alignment on UHavokNavVolumeGenerationSettings");
static_assert(sizeof(UHavokNavVolumeGenerationSettings) == 0x000068, "Wrong size on UHavokNavVolumeGenerationSettings");
static_assert(offsetof(UHavokNavVolumeGenerationSettings, ChunkSettings) == 0x000028, "Member 'UHavokNavVolumeGenerationSettings::ChunkSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavVolumeGenerationSettings, BorderSettings) == 0x000030, "Member 'UHavokNavVolumeGenerationSettings::BorderSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavVolumeGenerationSettings, MergingSettings) == 0x000038, "Member 'UHavokNavVolumeGenerationSettings::MergingSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavVolumeGenerationSettings, PruningSettings) == 0x000058, "Member 'UHavokNavVolumeGenerationSettings::PruningSettings' has a wrong offset!");
static_assert(offsetof(UHavokNavVolumeGenerationSettings, bSaveInputSnapshot) == 0x000060, "Member 'UHavokNavVolumeGenerationSettings::bSaveInputSnapshot' has a wrong offset!");

// Class NavigationSystem.HavokNavVolumeLayer
// 0x0010 (0x0048 - 0x0038)
class UHavokNavVolumeLayer : public UHavokNavLayer
{
public:
	float                                         CharacterRadius;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellWidth;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHavokNavVolumeCellWidthToResolutionRounding  ResolutionRoundingMode;                            // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavVolumeLayer">();
	}
	static class UHavokNavVolumeLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavVolumeLayer>();
	}
};
static_assert(alignof(UHavokNavVolumeLayer) == 0x000008, "Wrong alignment on UHavokNavVolumeLayer");
static_assert(sizeof(UHavokNavVolumeLayer) == 0x000048, "Wrong size on UHavokNavVolumeLayer");
static_assert(offsetof(UHavokNavVolumeLayer, CharacterRadius) == 0x000038, "Member 'UHavokNavVolumeLayer::CharacterRadius' has a wrong offset!");
static_assert(offsetof(UHavokNavVolumeLayer, CellWidth) == 0x00003C, "Member 'UHavokNavVolumeLayer::CellWidth' has a wrong offset!");
static_assert(offsetof(UHavokNavVolumeLayer, ResolutionRoundingMode) == 0x000040, "Member 'UHavokNavVolumeLayer::ResolutionRoundingMode' has a wrong offset!");

// Class NavigationSystem.HavokNavVolumeLayer_Default
// 0x0000 (0x0048 - 0x0048)
class UHavokNavVolumeLayer_Default final : public UHavokNavVolumeLayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokNavVolumeLayer_Default">();
	}
	static class UHavokNavVolumeLayer_Default* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokNavVolumeLayer_Default>();
	}
};
static_assert(alignof(UHavokNavVolumeLayer_Default) == 0x000008, "Wrong alignment on UHavokNavVolumeLayer_Default");
static_assert(sizeof(UHavokNavVolumeLayer_Default) == 0x000048, "Wrong size on UHavokNavVolumeLayer_Default");

// Class NavigationSystem.HavokTraversalType_ClimbUp
// 0x0020 (0x0078 - 0x0058)
class UHavokTraversalType_ClimbUp final : public UHavokTraversalType
{
public:
	float                                         MaxUnderhang;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinUpHeight;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUpHeight;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabAngle;                                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabScanDepth;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabMaxProfileAngle;                               // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalLipHeight;                                 // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResolveHangExtraDist;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokTraversalType_ClimbUp">();
	}
	static class UHavokTraversalType_ClimbUp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokTraversalType_ClimbUp>();
	}
};
static_assert(alignof(UHavokTraversalType_ClimbUp) == 0x000008, "Wrong alignment on UHavokTraversalType_ClimbUp");
static_assert(sizeof(UHavokTraversalType_ClimbUp) == 0x000078, "Wrong size on UHavokTraversalType_ClimbUp");
static_assert(offsetof(UHavokTraversalType_ClimbUp, MaxUnderhang) == 0x000058, "Member 'UHavokTraversalType_ClimbUp::MaxUnderhang' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, MinUpHeight) == 0x00005C, "Member 'UHavokTraversalType_ClimbUp::MinUpHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, MaxUpHeight) == 0x000060, "Member 'UHavokTraversalType_ClimbUp::MaxUpHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, GrabAngle) == 0x000064, "Member 'UHavokTraversalType_ClimbUp::GrabAngle' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, GrabScanDepth) == 0x000068, "Member 'UHavokTraversalType_ClimbUp::GrabScanDepth' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, GrabMaxProfileAngle) == 0x00006C, "Member 'UHavokTraversalType_ClimbUp::GrabMaxProfileAngle' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, VerticalLipHeight) == 0x000070, "Member 'UHavokTraversalType_ClimbUp::VerticalLipHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_ClimbUp, ResolveHangExtraDist) == 0x000074, "Member 'UHavokTraversalType_ClimbUp::ResolveHangExtraDist' has a wrong offset!");

// Class NavigationSystem.HavokTraversalType_DropDown
// 0x0018 (0x0070 - 0x0058)
class UHavokTraversalType_DropDown final : public UHavokTraversalType
{
public:
	float                                         MinDropDistance;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDropDistance;                                   // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUnderhang;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinUnderhang;                                      // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalLipHeight;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokTraversalType_DropDown">();
	}
	static class UHavokTraversalType_DropDown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokTraversalType_DropDown>();
	}
};
static_assert(alignof(UHavokTraversalType_DropDown) == 0x000008, "Wrong alignment on UHavokTraversalType_DropDown");
static_assert(sizeof(UHavokTraversalType_DropDown) == 0x000070, "Wrong size on UHavokTraversalType_DropDown");
static_assert(offsetof(UHavokTraversalType_DropDown, MinDropDistance) == 0x000058, "Member 'UHavokTraversalType_DropDown::MinDropDistance' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_DropDown, MaxDropDistance) == 0x00005C, "Member 'UHavokTraversalType_DropDown::MaxDropDistance' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_DropDown, MaxUnderhang) == 0x000060, "Member 'UHavokTraversalType_DropDown::MaxUnderhang' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_DropDown, MinUnderhang) == 0x000064, "Member 'UHavokTraversalType_DropDown::MinUnderhang' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_DropDown, VerticalLipHeight) == 0x000068, "Member 'UHavokTraversalType_DropDown::VerticalLipHeight' has a wrong offset!");

// Class NavigationSystem.HavokTraversalType_Jump
// 0x0018 (0x0070 - 0x0058)
class UHavokTraversalType_Jump final : public UHavokTraversalType
{
public:
	float                                         MaxHorizontalDistance;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHorizontalDistance;                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUpHeight;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDownHeight;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalApex;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokTraversalType_Jump">();
	}
	static class UHavokTraversalType_Jump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokTraversalType_Jump>();
	}
};
static_assert(alignof(UHavokTraversalType_Jump) == 0x000008, "Wrong alignment on UHavokTraversalType_Jump");
static_assert(sizeof(UHavokTraversalType_Jump) == 0x000070, "Wrong size on UHavokTraversalType_Jump");
static_assert(offsetof(UHavokTraversalType_Jump, MaxHorizontalDistance) == 0x000058, "Member 'UHavokTraversalType_Jump::MaxHorizontalDistance' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Jump, MinHorizontalDistance) == 0x00005C, "Member 'UHavokTraversalType_Jump::MinHorizontalDistance' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Jump, MaxUpHeight) == 0x000060, "Member 'UHavokTraversalType_Jump::MaxUpHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Jump, MaxDownHeight) == 0x000064, "Member 'UHavokTraversalType_Jump::MaxDownHeight' has a wrong offset!");
static_assert(offsetof(UHavokTraversalType_Jump, VerticalApex) == 0x000068, "Member 'UHavokTraversalType_Jump::VerticalApex' has a wrong offset!");

// Class NavigationSystem.GbxUserEdgeBase
// 0x0000 (0x0030 - 0x0030)
class UGbxUserEdgeBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxUserEdgeBase">();
	}
	static class UGbxUserEdgeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxUserEdgeBase>();
	}
};
static_assert(alignof(UGbxUserEdgeBase) == 0x000008, "Wrong alignment on UGbxUserEdgeBase");
static_assert(sizeof(UGbxUserEdgeBase) == 0x000030, "Wrong size on UGbxUserEdgeBase");

// Class NavigationSystem.HavokUserEdge
// 0x0048 (0x0070 - 0x0028)
class UHavokUserEdge : public UObject
{
public:
	class UGbxUserEdgeBase*                       GbxUserEdge;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHavokUserEdge>             ReverseEdge;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DrawColor;                                         // 0x0038(0x0004)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlignEdges;                                       // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLimitDistanceMin;                                 // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceMin;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLimitDistanceMax;                                 // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceMax;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLimitHeightMin;                                   // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightMin;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLimitHeightMax;                                   // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightMax;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bZeroWidthEntry;                                   // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bZeroWidthExit;                                    // 0x005D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTeleportEntry;                                    // 0x005E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTeleportExit;                                     // 0x005F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UHavokUserEdge>>     TeleportEdges;                                     // 0x0060(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HavokUserEdge">();
	}
	static class UHavokUserEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHavokUserEdge>();
	}
};
static_assert(alignof(UHavokUserEdge) == 0x000008, "Wrong alignment on UHavokUserEdge");
static_assert(sizeof(UHavokUserEdge) == 0x000070, "Wrong size on UHavokUserEdge");
static_assert(offsetof(UHavokUserEdge, GbxUserEdge) == 0x000028, "Member 'UHavokUserEdge::GbxUserEdge' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, ReverseEdge) == 0x000030, "Member 'UHavokUserEdge::ReverseEdge' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, DrawColor) == 0x000038, "Member 'UHavokUserEdge::DrawColor' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bAlignEdges) == 0x00003C, "Member 'UHavokUserEdge::bAlignEdges' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bLimitDistanceMin) == 0x00003D, "Member 'UHavokUserEdge::bLimitDistanceMin' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, DistanceMin) == 0x000040, "Member 'UHavokUserEdge::DistanceMin' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bLimitDistanceMax) == 0x000044, "Member 'UHavokUserEdge::bLimitDistanceMax' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, DistanceMax) == 0x000048, "Member 'UHavokUserEdge::DistanceMax' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bLimitHeightMin) == 0x00004C, "Member 'UHavokUserEdge::bLimitHeightMin' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, HeightMin) == 0x000050, "Member 'UHavokUserEdge::HeightMin' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bLimitHeightMax) == 0x000054, "Member 'UHavokUserEdge::bLimitHeightMax' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, HeightMax) == 0x000058, "Member 'UHavokUserEdge::HeightMax' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bZeroWidthEntry) == 0x00005C, "Member 'UHavokUserEdge::bZeroWidthEntry' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bZeroWidthExit) == 0x00005D, "Member 'UHavokUserEdge::bZeroWidthExit' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bTeleportEntry) == 0x00005E, "Member 'UHavokUserEdge::bTeleportEntry' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, bTeleportExit) == 0x00005F, "Member 'UHavokUserEdge::bTeleportExit' has a wrong offset!");
static_assert(offsetof(UHavokUserEdge, TeleportEdges) == 0x000060, "Member 'UHavokUserEdge::TeleportEdges' has a wrong offset!");

// Class NavigationSystem.NavArea_Default
// 0x0000 (0x0070 - 0x0070)
class UNavArea_Default final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_Default">();
	}
	static class UNavArea_Default* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_Default>();
	}
};
static_assert(alignof(UNavArea_Default) == 0x000008, "Wrong alignment on UNavArea_Default");
static_assert(sizeof(UNavArea_Default) == 0x000070, "Wrong size on UNavArea_Default");

// Class NavigationSystem.NavArea_LowHeight
// 0x0000 (0x0070 - 0x0070)
class UNavArea_LowHeight final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_LowHeight">();
	}
	static class UNavArea_LowHeight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_LowHeight>();
	}
};
static_assert(alignof(UNavArea_LowHeight) == 0x000008, "Wrong alignment on UNavArea_LowHeight");
static_assert(sizeof(UNavArea_LowHeight) == 0x000070, "Wrong size on UNavArea_LowHeight");

// Class NavigationSystem.NavArea_Null
// 0x0000 (0x0070 - 0x0070)
class UNavArea_Null final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_Null">();
	}
	static class UNavArea_Null* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_Null>();
	}
};
static_assert(alignof(UNavArea_Null) == 0x000008, "Wrong alignment on UNavArea_Null");
static_assert(sizeof(UNavArea_Null) == 0x000070, "Wrong size on UNavArea_Null");

// Class NavigationSystem.NavArea_Obstacle
// 0x0000 (0x0070 - 0x0070)
class UNavArea_Obstacle final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_Obstacle">();
	}
	static class UNavArea_Obstacle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_Obstacle>();
	}
};
static_assert(alignof(UNavArea_Obstacle) == 0x000008, "Wrong alignment on UNavArea_Obstacle");
static_assert(sizeof(UNavArea_Obstacle) == 0x000070, "Wrong size on UNavArea_Obstacle");

// Class NavigationSystem.NavCollision
// 0x0068 (0x00D8 - 0x0070)
class UNavCollision final : public UNavCollisionBase
{
public:
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNavCollisionCylinder>          CylinderCollision;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavCollisionBox>               BoxCollision;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   AreaClass;                                         // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bGatherConvexGeometry : 1;                         // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x2F];                                      // 0x00A9(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavCollision">();
	}
	static class UNavCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavCollision>();
	}
};
static_assert(alignof(UNavCollision) == 0x000008, "Wrong alignment on UNavCollision");
static_assert(sizeof(UNavCollision) == 0x0000D8, "Wrong size on UNavCollision");
static_assert(offsetof(UNavCollision, CylinderCollision) == 0x000080, "Member 'UNavCollision::CylinderCollision' has a wrong offset!");
static_assert(offsetof(UNavCollision, BoxCollision) == 0x000090, "Member 'UNavCollision::BoxCollision' has a wrong offset!");
static_assert(offsetof(UNavCollision, AreaClass) == 0x0000A0, "Member 'UNavCollision::AreaClass' has a wrong offset!");

// Class NavigationSystem.NavigationGraph
// 0x0000 (0x0618 - 0x0618)
class ANavigationGraph final : public ANavigationData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationGraph">();
	}
	static class ANavigationGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavigationGraph>();
	}
};
static_assert(alignof(ANavigationGraph) == 0x000008, "Wrong alignment on ANavigationGraph");
static_assert(sizeof(ANavigationGraph) == 0x000618, "Wrong size on ANavigationGraph");

// Class NavigationSystem.NavigationGraphNode
// 0x0000 (0x0458 - 0x0458)
class ANavigationGraphNode final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationGraphNode">();
	}
	static class ANavigationGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavigationGraphNode>();
	}
};
static_assert(alignof(ANavigationGraphNode) == 0x000008, "Wrong alignment on ANavigationGraphNode");
static_assert(sizeof(ANavigationGraphNode) == 0x000458, "Wrong size on ANavigationGraphNode");

// Class NavigationSystem.NavigationGraphNodeComponent
// 0x0030 (0x0300 - 0x02D0)
class UNavigationGraphNodeComponent final : public USceneComponent
{
public:
	struct FNavGraphNode                          Node;                                              // 0x02D0(0x0018)(NativeAccessSpecifierPublic)
	class UNavigationGraphNodeComponent*          NextNodeComponent;                                 // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationGraphNodeComponent*          PrevNodeComponent;                                 // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationGraphNodeComponent">();
	}
	static class UNavigationGraphNodeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationGraphNodeComponent>();
	}
};
static_assert(alignof(UNavigationGraphNodeComponent) == 0x000008, "Wrong alignment on UNavigationGraphNodeComponent");
static_assert(sizeof(UNavigationGraphNodeComponent) == 0x000300, "Wrong size on UNavigationGraphNodeComponent");
static_assert(offsetof(UNavigationGraphNodeComponent, Node) == 0x0002D0, "Member 'UNavigationGraphNodeComponent::Node' has a wrong offset!");
static_assert(offsetof(UNavigationGraphNodeComponent, NextNodeComponent) == 0x0002E8, "Member 'UNavigationGraphNodeComponent::NextNodeComponent' has a wrong offset!");
static_assert(offsetof(UNavigationGraphNodeComponent, PrevNodeComponent) == 0x0002F0, "Member 'UNavigationGraphNodeComponent::PrevNodeComponent' has a wrong offset!");

// Class NavigationSystem.NavigationInvokerComponent
// 0x0008 (0x0180 - 0x0178)
class UNavigationInvokerComponent final : public UActorComponent
{
public:
	float                                         TileGenerationRadius;                              // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileRemovalRadius;                                 // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationInvokerComponent">();
	}
	static class UNavigationInvokerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationInvokerComponent>();
	}
};
static_assert(alignof(UNavigationInvokerComponent) == 0x000008, "Wrong alignment on UNavigationInvokerComponent");
static_assert(sizeof(UNavigationInvokerComponent) == 0x000180, "Wrong size on UNavigationInvokerComponent");
static_assert(offsetof(UNavigationInvokerComponent, TileGenerationRadius) == 0x000178, "Member 'UNavigationInvokerComponent::TileGenerationRadius' has a wrong offset!");
static_assert(offsetof(UNavigationInvokerComponent, TileRemovalRadius) == 0x00017C, "Member 'UNavigationInvokerComponent::TileRemovalRadius' has a wrong offset!");

// Class NavigationSystem.NavigationPath
// 0x0060 (0x0088 - 0x0028)
class UNavigationPath final : public UObject
{
public:
	UMulticastDelegateProperty_                   PathUpdatedNotifier;                               // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENavigationOptionFlag                         RecalculateOnInvalidation;                         // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3F];                                      // 0x0049(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
	void EnableRecalculationOnInvalidation(ENavigationOptionFlag DoRecalculation);

	class FString GetDebugString() const;
	float GetPathCost() const;
	float GetPathLength() const;
	bool IsPartial() const;
	bool IsStringPulled() const;
	bool IsValid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationPath">();
	}
	static class UNavigationPath* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationPath>();
	}
};
static_assert(alignof(UNavigationPath) == 0x000008, "Wrong alignment on UNavigationPath");
static_assert(sizeof(UNavigationPath) == 0x000088, "Wrong size on UNavigationPath");
static_assert(offsetof(UNavigationPath, PathUpdatedNotifier) == 0x000028, "Member 'UNavigationPath::PathUpdatedNotifier' has a wrong offset!");
static_assert(offsetof(UNavigationPath, PathPoints) == 0x000038, "Member 'UNavigationPath::PathPoints' has a wrong offset!");
static_assert(offsetof(UNavigationPath, RecalculateOnInvalidation) == 0x000048, "Member 'UNavigationPath::RecalculateOnInvalidation' has a wrong offset!");

// Class NavigationSystem.NavigationPathGenerator
// 0x0000 (0x0028 - 0x0028)
class INavigationPathGenerator final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationPathGenerator">();
	}
	static class INavigationPathGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavigationPathGenerator>();
	}
};
static_assert(alignof(INavigationPathGenerator) == 0x000008, "Wrong alignment on INavigationPathGenerator");
static_assert(sizeof(INavigationPathGenerator) == 0x000028, "Wrong size on INavigationPathGenerator");

// Class NavigationSystem.NavigationSystemModuleConfig
// 0x0008 (0x0048 - 0x0040)
class UNavigationSystemModuleConfig final : public UNavigationSystemConfig
{
public:
	uint8                                         bStrictlyStatic : 1;                               // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCreateOnClient : 1;                               // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAutoSpawnMissingNavData : 1;                      // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSpawnNavDataInNavBoundsLevel : 1;                 // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationSystemModuleConfig">();
	}
	static class UNavigationSystemModuleConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationSystemModuleConfig>();
	}
};
static_assert(alignof(UNavigationSystemModuleConfig) == 0x000008, "Wrong alignment on UNavigationSystemModuleConfig");
static_assert(sizeof(UNavigationSystemModuleConfig) == 0x000048, "Wrong size on UNavigationSystemModuleConfig");

// Class NavigationSystem.NavigationTestingActor
// 0x00E8 (0x0540 - 0x0458)
class ANavigationTestingActor final : public AActor
{
public:
	uint8                                         Pad_458[0x10];                                     // 0x0458(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNavigationInvokerComponent*            InvokerComponent;                                  // 0x0470(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bActAsNavigationInvoker : 1;                       // 0x0478(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNavAgentProperties                    NavAgentProps;                                     // 0x0480(0x0030)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryingExtent;                                    // 0x04B0(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        MyNavData;                                         // 0x04C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectedLocation;                                 // 0x04C8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bProjectedLocationValid : 1;                       // 0x04D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSearchStart : 1;                                  // 0x04D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseHierarchicalPathfinding : 1;                   // 0x04D4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGatherDetailedInfo : 1;                           // 0x04D4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawDistanceToWall : 1;                           // 0x04D4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowNodePool : 1;                                 // 0x04D4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowBestPath : 1;                                 // 0x04D4(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDiffWithPreviousStep : 1;                     // 0x04D4(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBeVisibleInGame : 1;                        // 0x04D5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D6[0x2];                                      // 0x04D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ENavCostDisplay                               CostDisplayMode;                                   // 0x04D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TextCanvasOffset;                                  // 0x04DC(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPathExist : 1;                                    // 0x04E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPathIsPartial : 1;                                // 0x04E4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPathSearchOutOfNodes : 1;                         // 0x04E4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PathfindingTime;                                   // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathCost;                                          // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PathfindingSteps;                                  // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationTestingActor*                OtherActor;                                        // 0x04F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0500(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowStepIndex;                                     // 0x0508(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetFromCornersDistance;                         // 0x050C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_510[0x30];                                     // 0x0510(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationTestingActor">();
	}
	static class ANavigationTestingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavigationTestingActor>();
	}
};
static_assert(alignof(ANavigationTestingActor) == 0x000008, "Wrong alignment on ANavigationTestingActor");
static_assert(sizeof(ANavigationTestingActor) == 0x000540, "Wrong size on ANavigationTestingActor");
static_assert(offsetof(ANavigationTestingActor, CapsuleComponent) == 0x000468, "Member 'ANavigationTestingActor::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, InvokerComponent) == 0x000470, "Member 'ANavigationTestingActor::InvokerComponent' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, NavAgentProps) == 0x000480, "Member 'ANavigationTestingActor::NavAgentProps' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, QueryingExtent) == 0x0004B0, "Member 'ANavigationTestingActor::QueryingExtent' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, MyNavData) == 0x0004C0, "Member 'ANavigationTestingActor::MyNavData' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, ProjectedLocation) == 0x0004C8, "Member 'ANavigationTestingActor::ProjectedLocation' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, CostDisplayMode) == 0x0004D8, "Member 'ANavigationTestingActor::CostDisplayMode' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, TextCanvasOffset) == 0x0004DC, "Member 'ANavigationTestingActor::TextCanvasOffset' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, PathfindingTime) == 0x0004E8, "Member 'ANavigationTestingActor::PathfindingTime' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, PathCost) == 0x0004EC, "Member 'ANavigationTestingActor::PathCost' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, PathfindingSteps) == 0x0004F0, "Member 'ANavigationTestingActor::PathfindingSteps' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, OtherActor) == 0x0004F8, "Member 'ANavigationTestingActor::OtherActor' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, FilterClass) == 0x000500, "Member 'ANavigationTestingActor::FilterClass' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, ShowStepIndex) == 0x000508, "Member 'ANavigationTestingActor::ShowStepIndex' has a wrong offset!");
static_assert(offsetof(ANavigationTestingActor, OffsetFromCornersDistance) == 0x00050C, "Member 'ANavigationTestingActor::OffsetFromCornersDistance' has a wrong offset!");

// Class NavigationSystem.NavLinkComponent
// 0x0020 (0x0710 - 0x06F0)
class UNavLinkComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_6F0[0x8];                                      // 0x06F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNavigationLink>                Links;                                             // 0x06F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_708[0x8];                                      // 0x0708(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavLinkComponent">();
	}
	static class UNavLinkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavLinkComponent>();
	}
};
static_assert(alignof(UNavLinkComponent) == 0x000008, "Wrong alignment on UNavLinkComponent");
static_assert(sizeof(UNavLinkComponent) == 0x000710, "Wrong size on UNavLinkComponent");
static_assert(offsetof(UNavLinkComponent, Links) == 0x0006F8, "Member 'UNavLinkComponent::Links' has a wrong offset!");

// Class NavigationSystem.NavRelevantComponent
// 0x0030 (0x01A8 - 0x0178)
class UNavRelevantComponent : public UActorComponent
{
public:
	uint8                                         Pad_178[0x24];                                     // 0x0178(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAttachToOwnersRoot : 1;                           // 0x019C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CachedNavParent;                                   // 0x01A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetNavigationRelevancy(bool bRelevant);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavRelevantComponent">();
	}
	static class UNavRelevantComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavRelevantComponent>();
	}
};
static_assert(alignof(UNavRelevantComponent) == 0x000008, "Wrong alignment on UNavRelevantComponent");
static_assert(sizeof(UNavRelevantComponent) == 0x0001A8, "Wrong size on UNavRelevantComponent");
static_assert(offsetof(UNavRelevantComponent, CachedNavParent) == 0x0001A0, "Member 'UNavRelevantComponent::CachedNavParent' has a wrong offset!");

// Class NavigationSystem.NavLinkCustomComponent
// 0x00A8 (0x0250 - 0x01A8)
class UNavLinkCustomComponent final : public UNavRelevantComponent
{
public:
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NavLinkUserId;                                     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavArea>                   EnabledAreaClass;                                  // 0x01B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                   DisabledAreaClass;                                 // 0x01C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LinkRelativeStart;                                 // 0x01C8(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LinkRelativeEnd;                                   // 0x01D4(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENavLinkDirection                             LinkDirection;                                     // 0x01E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bLinkEnabled : 1;                                  // 0x01E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bNotifyWhenEnabled : 1;                            // 0x01E4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bNotifyWhenDisabled : 1;                           // 0x01E4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCreateBoxObstacle : 1;                            // 0x01E4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ObstacleOffset;                                    // 0x01E8(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ObstacleExtent;                                    // 0x01F4(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                   ObstacleAreaClass;                                 // 0x0200(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BroadcastRadius;                                   // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BroadcastInterval;                                 // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             BroadcastChannel;                                  // 0x0210(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_211[0x3F];                                     // 0x0211(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavLinkCustomComponent">();
	}
	static class UNavLinkCustomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavLinkCustomComponent>();
	}
};
static_assert(alignof(UNavLinkCustomComponent) == 0x000008, "Wrong alignment on UNavLinkCustomComponent");
static_assert(sizeof(UNavLinkCustomComponent) == 0x000250, "Wrong size on UNavLinkCustomComponent");
static_assert(offsetof(UNavLinkCustomComponent, NavLinkUserId) == 0x0001B0, "Member 'UNavLinkCustomComponent::NavLinkUserId' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, EnabledAreaClass) == 0x0001B8, "Member 'UNavLinkCustomComponent::EnabledAreaClass' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, DisabledAreaClass) == 0x0001C0, "Member 'UNavLinkCustomComponent::DisabledAreaClass' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, LinkRelativeStart) == 0x0001C8, "Member 'UNavLinkCustomComponent::LinkRelativeStart' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, LinkRelativeEnd) == 0x0001D4, "Member 'UNavLinkCustomComponent::LinkRelativeEnd' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, LinkDirection) == 0x0001E0, "Member 'UNavLinkCustomComponent::LinkDirection' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, ObstacleOffset) == 0x0001E8, "Member 'UNavLinkCustomComponent::ObstacleOffset' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, ObstacleExtent) == 0x0001F4, "Member 'UNavLinkCustomComponent::ObstacleExtent' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, ObstacleAreaClass) == 0x000200, "Member 'UNavLinkCustomComponent::ObstacleAreaClass' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, BroadcastRadius) == 0x000208, "Member 'UNavLinkCustomComponent::BroadcastRadius' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, BroadcastInterval) == 0x00020C, "Member 'UNavLinkCustomComponent::BroadcastInterval' has a wrong offset!");
static_assert(offsetof(UNavLinkCustomComponent, BroadcastChannel) == 0x000210, "Member 'UNavLinkCustomComponent::BroadcastChannel' has a wrong offset!");

// Class NavigationSystem.NavLinkCustomInterface
// 0x0000 (0x0028 - 0x0028)
class INavLinkCustomInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavLinkCustomInterface">();
	}
	static class INavLinkCustomInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavLinkCustomInterface>();
	}
};
static_assert(alignof(INavLinkCustomInterface) == 0x000008, "Wrong alignment on INavLinkCustomInterface");
static_assert(sizeof(INavLinkCustomInterface) == 0x000028, "Wrong size on INavLinkCustomInterface");

// Class NavigationSystem.NavLinkHostInterface
// 0x0000 (0x0028 - 0x0028)
class INavLinkHostInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavLinkHostInterface">();
	}
	static class INavLinkHostInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavLinkHostInterface>();
	}
};
static_assert(alignof(INavLinkHostInterface) == 0x000008, "Wrong alignment on INavLinkHostInterface");
static_assert(sizeof(INavLinkHostInterface) == 0x000028, "Wrong size on INavLinkHostInterface");

// Class NavigationSystem.NavLinkRenderingComponent
// 0x0000 (0x06F0 - 0x06F0)
class UNavLinkRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavLinkRenderingComponent">();
	}
	static class UNavLinkRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavLinkRenderingComponent>();
	}
};
static_assert(alignof(UNavLinkRenderingComponent) == 0x000008, "Wrong alignment on UNavLinkRenderingComponent");
static_assert(sizeof(UNavLinkRenderingComponent) == 0x0006F0, "Wrong size on UNavLinkRenderingComponent");

// Class NavigationSystem.NavLinkTrivial
// 0x0000 (0x0050 - 0x0050)
class UNavLinkTrivial final : public UNavLinkDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavLinkTrivial">();
	}
	static class UNavLinkTrivial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavLinkTrivial>();
	}
};
static_assert(alignof(UNavLinkTrivial) == 0x000008, "Wrong alignment on UNavLinkTrivial");
static_assert(sizeof(UNavLinkTrivial) == 0x000050, "Wrong size on UNavLinkTrivial");

// Class NavigationSystem.NavMeshBoundsVolume
// 0x0008 (0x0498 - 0x0490)
class ANavMeshBoundsVolume : public AVolume
{
public:
	struct FNavAgentSelector                      SupportedAgents;                                   // 0x0490(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavMeshBoundsVolume">();
	}
	static class ANavMeshBoundsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavMeshBoundsVolume>();
	}
};
static_assert(alignof(ANavMeshBoundsVolume) == 0x000008, "Wrong alignment on ANavMeshBoundsVolume");
static_assert(sizeof(ANavMeshBoundsVolume) == 0x000498, "Wrong size on ANavMeshBoundsVolume");
static_assert(offsetof(ANavMeshBoundsVolume, SupportedAgents) == 0x000490, "Member 'ANavMeshBoundsVolume::SupportedAgents' has a wrong offset!");

// Class NavigationSystem.NavMeshRenderingComponent
// 0x0010 (0x0700 - 0x06F0)
class UNavMeshRenderingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_6F0[0x10];                                     // 0x06F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavMeshRenderingComponent">();
	}
	static class UNavMeshRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavMeshRenderingComponent>();
	}
};
static_assert(alignof(UNavMeshRenderingComponent) == 0x000008, "Wrong alignment on UNavMeshRenderingComponent");
static_assert(sizeof(UNavMeshRenderingComponent) == 0x000700, "Wrong size on UNavMeshRenderingComponent");

// Class NavigationSystem.NavModifierComponent
// 0x0028 (0x01D0 - 0x01A8)
class UNavModifierComponent final : public UNavRelevantComponent
{
public:
	TSubclassOf<class UNavArea>                   AreaClass;                                         // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FailsafeExtent;                                    // 0x01B0(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIncludeAgentHeight : 1;                           // 0x01BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1BD[0x13];                                     // 0x01BD(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAreaClass(TSubclassOf<class UNavArea> NewAreaClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavModifierComponent">();
	}
	static class UNavModifierComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavModifierComponent>();
	}
};
static_assert(alignof(UNavModifierComponent) == 0x000008, "Wrong alignment on UNavModifierComponent");
static_assert(sizeof(UNavModifierComponent) == 0x0001D0, "Wrong size on UNavModifierComponent");
static_assert(offsetof(UNavModifierComponent, AreaClass) == 0x0001A8, "Member 'UNavModifierComponent::AreaClass' has a wrong offset!");
static_assert(offsetof(UNavModifierComponent, FailsafeExtent) == 0x0001B0, "Member 'UNavModifierComponent::FailsafeExtent' has a wrong offset!");

// Class NavigationSystem.NavModifierVolume
// 0x0010 (0x04A0 - 0x0490)
class ANavModifierVolume final : public AVolume
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavArea>                   AreaClass;                                         // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetAreaClass(TSubclassOf<class UNavArea> NewAreaClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavModifierVolume">();
	}
	static class ANavModifierVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavModifierVolume>();
	}
};
static_assert(alignof(ANavModifierVolume) == 0x000008, "Wrong alignment on ANavModifierVolume");
static_assert(sizeof(ANavModifierVolume) == 0x0004A0, "Wrong size on ANavModifierVolume");
static_assert(offsetof(ANavModifierVolume, AreaClass) == 0x000498, "Member 'ANavModifierVolume::AreaClass' has a wrong offset!");

// Class NavigationSystem.NavNodeInterface
// 0x0000 (0x0028 - 0x0028)
class INavNodeInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavNodeInterface">();
	}
	static class INavNodeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavNodeInterface>();
	}
};
static_assert(alignof(INavNodeInterface) == 0x000008, "Wrong alignment on INavNodeInterface");
static_assert(sizeof(INavNodeInterface) == 0x000028, "Wrong size on INavNodeInterface");

// Class NavigationSystem.NavTestRenderingComponent
// 0x0000 (0x06F0 - 0x06F0)
class UNavTestRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavTestRenderingComponent">();
	}
	static class UNavTestRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavTestRenderingComponent>();
	}
};
static_assert(alignof(UNavTestRenderingComponent) == 0x000008, "Wrong alignment on UNavTestRenderingComponent");
static_assert(sizeof(UNavTestRenderingComponent) == 0x0006F0, "Wrong size on UNavTestRenderingComponent");

// Class NavigationSystem.RecastFilter_UseDefaultArea
// 0x0000 (0x0048 - 0x0048)
class URecastFilter_UseDefaultArea final : public UNavigationQueryFilter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecastFilter_UseDefaultArea">();
	}
	static class URecastFilter_UseDefaultArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecastFilter_UseDefaultArea>();
	}
};
static_assert(alignof(URecastFilter_UseDefaultArea) == 0x000008, "Wrong alignment on URecastFilter_UseDefaultArea");
static_assert(sizeof(URecastFilter_UseDefaultArea) == 0x000048, "Wrong size on URecastFilter_UseDefaultArea");

// Class NavigationSystem.RecastNavMesh
// 0x0090 (0x06A8 - 0x0618)
class ARecastNavMesh final : public ANavigationData
{
public:
	uint8                                         bDrawTriangleEdges : 1;                            // 0x0618(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawPolyEdges : 1;                                // 0x0618(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawFilledPolys : 1;                              // 0x0618(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawNavMeshEdges : 1;                             // 0x0618(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawTileBounds : 1;                               // 0x0618(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawPathCollidingGeometry : 1;                    // 0x0618(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawTileLabels : 1;                               // 0x0618(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawPolygonLabels : 1;                            // 0x0618(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawDefaultPolygonCost : 1;                       // 0x0619(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawLabelsOnPathNodes : 1;                        // 0x0619(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawNavLinks : 1;                                 // 0x0619(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawFailedNavLinks : 1;                           // 0x0619(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawClusters : 1;                                 // 0x0619(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawOctree : 1;                                   // 0x0619(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawOctreeDetails : 1;                            // 0x0619(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDistinctlyDrawTilesBeingBuilt : 1;                // 0x0619(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawNavMesh : 1;                                  // 0x061A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61B[0x1];                                      // 0x061B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawOffset;                                        // 0x061C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFixedTilePoolSize : 1;                            // 0x0620(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_621[0x3];                                      // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TilePoolSize;                                      // 0x0624(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSizeUU;                                        // 0x0628(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x062C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellHeight;                                        // 0x0630(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentRadius;                                       // 0x0634(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentHeight;                                       // 0x0638(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentMaxHeight;                                    // 0x063C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentMaxSlope;                                     // 0x0640(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentMaxStepHeight;                                // 0x0644(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRegionArea;                                     // 0x0648(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MergeRegionSize;                                   // 0x064C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimplificationError;                            // 0x0650(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimultaneousTileGenerationJobsCount;            // 0x0654(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileNumberHardLimit;                               // 0x0658(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolyRefTileBits;                                   // 0x065C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolyRefNavPolyBits;                                // 0x0660(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolyRefSaltBits;                                   // 0x0664(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDrawDistance;                               // 0x0668(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxSearchNodes;                             // 0x066C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxHierarchicalSearchNodes;                 // 0x0670(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecastPartitioning                           RegionPartitioning;                                // 0x0674(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecastPartitioning                           LayerPartitioning;                                 // 0x0675(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_676[0x2];                                      // 0x0676(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RegionChunkSplits;                                 // 0x0678(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerChunkSplits;                                  // 0x067C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSortNavigationAreasByCost : 1;                    // 0x0680(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPerformVoxelFiltering : 1;                        // 0x0680(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMarkLowHeightAreas : 1;                           // 0x0680(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFilterLowSpanSequences : 1;                       // 0x0680(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFilterLowSpanFromTileCache : 1;                   // 0x0680(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoFullyAsyncNavDataGathering : 1;                 // 0x0680(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseBetterOffsetsFromCorners : 1;                  // 0x0680(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStoreEmptyTileLayers : 1;                         // 0x0680(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseVirtualFilters : 1;                            // 0x0681(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowNavLinkAsPathEnd : 1;                        // 0x0681(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseVoxelCache : 1;                                // 0x0681(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_682[0x2];                                      // 0x0682(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TileSetUpdateInterval;                             // 0x0684(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeuristicScale;                                    // 0x0688(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalDeviationFromGroundCompensation;           // 0x068C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_690[0x18];                                     // 0x0690(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecastNavMesh">();
	}
	static class ARecastNavMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARecastNavMesh>();
	}
};
static_assert(alignof(ARecastNavMesh) == 0x000008, "Wrong alignment on ARecastNavMesh");
static_assert(sizeof(ARecastNavMesh) == 0x0006A8, "Wrong size on ARecastNavMesh");
static_assert(offsetof(ARecastNavMesh, DrawOffset) == 0x00061C, "Member 'ARecastNavMesh::DrawOffset' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, TilePoolSize) == 0x000624, "Member 'ARecastNavMesh::TilePoolSize' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, TileSizeUU) == 0x000628, "Member 'ARecastNavMesh::TileSizeUU' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, CellSize) == 0x00062C, "Member 'ARecastNavMesh::CellSize' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, CellHeight) == 0x000630, "Member 'ARecastNavMesh::CellHeight' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, AgentRadius) == 0x000634, "Member 'ARecastNavMesh::AgentRadius' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, AgentHeight) == 0x000638, "Member 'ARecastNavMesh::AgentHeight' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, AgentMaxHeight) == 0x00063C, "Member 'ARecastNavMesh::AgentMaxHeight' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, AgentMaxSlope) == 0x000640, "Member 'ARecastNavMesh::AgentMaxSlope' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, AgentMaxStepHeight) == 0x000644, "Member 'ARecastNavMesh::AgentMaxStepHeight' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, MinRegionArea) == 0x000648, "Member 'ARecastNavMesh::MinRegionArea' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, MergeRegionSize) == 0x00064C, "Member 'ARecastNavMesh::MergeRegionSize' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, MaxSimplificationError) == 0x000650, "Member 'ARecastNavMesh::MaxSimplificationError' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount) == 0x000654, "Member 'ARecastNavMesh::MaxSimultaneousTileGenerationJobsCount' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, TileNumberHardLimit) == 0x000658, "Member 'ARecastNavMesh::TileNumberHardLimit' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, PolyRefTileBits) == 0x00065C, "Member 'ARecastNavMesh::PolyRefTileBits' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, PolyRefNavPolyBits) == 0x000660, "Member 'ARecastNavMesh::PolyRefNavPolyBits' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, PolyRefSaltBits) == 0x000664, "Member 'ARecastNavMesh::PolyRefSaltBits' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, DefaultDrawDistance) == 0x000668, "Member 'ARecastNavMesh::DefaultDrawDistance' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, DefaultMaxSearchNodes) == 0x00066C, "Member 'ARecastNavMesh::DefaultMaxSearchNodes' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, DefaultMaxHierarchicalSearchNodes) == 0x000670, "Member 'ARecastNavMesh::DefaultMaxHierarchicalSearchNodes' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, RegionPartitioning) == 0x000674, "Member 'ARecastNavMesh::RegionPartitioning' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, LayerPartitioning) == 0x000675, "Member 'ARecastNavMesh::LayerPartitioning' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, RegionChunkSplits) == 0x000678, "Member 'ARecastNavMesh::RegionChunkSplits' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, LayerChunkSplits) == 0x00067C, "Member 'ARecastNavMesh::LayerChunkSplits' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, TileSetUpdateInterval) == 0x000684, "Member 'ARecastNavMesh::TileSetUpdateInterval' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, HeuristicScale) == 0x000688, "Member 'ARecastNavMesh::HeuristicScale' has a wrong offset!");
static_assert(offsetof(ARecastNavMesh, VerticalDeviationFromGroundCompensation) == 0x00068C, "Member 'ARecastNavMesh::VerticalDeviationFromGroundCompensation' has a wrong offset!");

// Class NavigationSystem.RecastNavMeshDataChunk
// 0x0010 (0x0040 - 0x0030)
class URecastNavMeshDataChunk final : public UNavigationDataChunk
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecastNavMeshDataChunk">();
	}
	static class URecastNavMeshDataChunk* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecastNavMeshDataChunk>();
	}
};
static_assert(alignof(URecastNavMeshDataChunk) == 0x000008, "Wrong alignment on URecastNavMeshDataChunk");
static_assert(sizeof(URecastNavMeshDataChunk) == 0x000040, "Wrong size on URecastNavMeshDataChunk");

}

