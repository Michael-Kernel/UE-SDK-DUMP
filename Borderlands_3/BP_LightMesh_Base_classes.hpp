#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightMesh_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightMesh_Base.BP_LightMesh_Base_C
// 0x0108 (0x0560 - 0x0458)
class ABP_LightMesh_Base_C : public ARenderActor
{
public:
	class UStaticMeshComponent*                   LightMesh;                                         // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableAdvancedOptions;                             // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Light_Color;                                       // 0x046C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Seperate_Bulb_Meshes;                          // 0x047C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Light_Material_Instance;                           // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Bulb_Element_Index;                                // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Inverse_Squared_Falloff;                       // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity_NonInverse_Pointlight;                   // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity_NonInverse_Spotlight;                    // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponentBase*>            LightComponents;                                   // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           Bulb_Components;                                   // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         Light_FallOff_Exponent_NonInverseSquared;          // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flicker_Strength;                                  // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flicker_Frequency;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flicker_Speed;                                     // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Flicker_Randomize_Seed;                            // 0x04D8(0x0008)(Edit, BlueprintVisible, NoDestructor)
	float                                         Flicker_Randomize;                                 // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CastShadows_Point;                                 // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CastShadows_Spot;                                  // 0x04E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E6[0x2];                                      // 0x04E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationRadius_Point;                           // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceRadius_Point;                                // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoftSourceRadius_Point;                            // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceLength_Point;                                // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationRadius_Spot;                            // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceRadius_Spot;                                 // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoftSourceRadius_Spot;                             // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceLength_Spot;                                 // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerConeAngle_Spot;                               // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OuterConeAngle_Spot;                               // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temperature_Spot;                                  // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndirectLightingIntensity_Spot;                    // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricScatteringIntensity_Spot;                // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInverseSquaredFalloff_Spot;                     // 0x051C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightFalloffExponent_Spot;                         // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temperature_Point;                                 // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndirectLightingIntensity_Point;                   // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricScatteringIntensity_Point;               // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInverseSquaredFalloff_Point;                    // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightFalloffExponent_Point;                        // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Light_Function_Material;                           // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Multiplier;                               // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Off_with_Time_of_Day;                              // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfDay_Time_On;                                 // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeOfDay_Time_Off;                                // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimeOfDay_Randomize_On;                            // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          TimeOfDay_Randomize_Seed;                          // 0x0554(0x0008)(Edit, BlueprintVisible, NoDestructor)
	float                                         TimeOfDay_Randomize;                               // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetPointLight_LightFunction(class UPointLightComponent* Point_Light);
	void SetSpotLight_LightFunction(class USpotLightComponent* Spot_Light);
	void SetSpotLight_Variables(class USpotLightComponent* Spot_Light);
	void SetPointLight_Variables(class UPointLightComponent* PointLight);
	void Create_Bulb_Material_Instances();
	void Create_Light_Dynamic_Material_Instance(int32 ElementIndex);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightMesh_Base_C">();
	}
	static class ABP_LightMesh_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightMesh_Base_C>();
	}
};
static_assert(alignof(ABP_LightMesh_Base_C) == 0x000008, "Wrong alignment on ABP_LightMesh_Base_C");
static_assert(sizeof(ABP_LightMesh_Base_C) == 0x000560, "Wrong size on ABP_LightMesh_Base_C");
static_assert(offsetof(ABP_LightMesh_Base_C, LightMesh) == 0x000458, "Member 'ABP_LightMesh_Base_C::LightMesh' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Scene) == 0x000460, "Member 'ABP_LightMesh_Base_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, EnableAdvancedOptions) == 0x000468, "Member 'ABP_LightMesh_Base_C::EnableAdvancedOptions' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Light_Color) == 0x00046C, "Member 'ABP_LightMesh_Base_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Has_Seperate_Bulb_Meshes) == 0x00047C, "Member 'ABP_LightMesh_Base_C::Has_Seperate_Bulb_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Mesh) == 0x000480, "Member 'ABP_LightMesh_Base_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Light_Material_Instance) == 0x000488, "Member 'ABP_LightMesh_Base_C::Light_Material_Instance' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Bulb_Element_Index) == 0x000490, "Member 'ABP_LightMesh_Base_C::Bulb_Element_Index' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Use_Inverse_Squared_Falloff) == 0x000494, "Member 'ABP_LightMesh_Base_C::Use_Inverse_Squared_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Intensity_NonInverse_Pointlight) == 0x000498, "Member 'ABP_LightMesh_Base_C::Intensity_NonInverse_Pointlight' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Intensity_NonInverse_Spotlight) == 0x00049C, "Member 'ABP_LightMesh_Base_C::Intensity_NonInverse_Spotlight' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Intensity) == 0x0004A0, "Member 'ABP_LightMesh_Base_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, LightComponents) == 0x0004A8, "Member 'ABP_LightMesh_Base_C::LightComponents' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Bulb_Components) == 0x0004B8, "Member 'ABP_LightMesh_Base_C::Bulb_Components' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Light_FallOff_Exponent_NonInverseSquared) == 0x0004C8, "Member 'ABP_LightMesh_Base_C::Light_FallOff_Exponent_NonInverseSquared' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Flicker_Strength) == 0x0004CC, "Member 'ABP_LightMesh_Base_C::Flicker_Strength' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Flicker_Frequency) == 0x0004D0, "Member 'ABP_LightMesh_Base_C::Flicker_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Flicker_Speed) == 0x0004D4, "Member 'ABP_LightMesh_Base_C::Flicker_Speed' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Flicker_Randomize_Seed) == 0x0004D8, "Member 'ABP_LightMesh_Base_C::Flicker_Randomize_Seed' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Flicker_Randomize) == 0x0004E0, "Member 'ABP_LightMesh_Base_C::Flicker_Randomize' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, CastShadows_Point) == 0x0004E4, "Member 'ABP_LightMesh_Base_C::CastShadows_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, CastShadows_Spot) == 0x0004E5, "Member 'ABP_LightMesh_Base_C::CastShadows_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, AttenuationRadius_Point) == 0x0004E8, "Member 'ABP_LightMesh_Base_C::AttenuationRadius_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, SourceRadius_Point) == 0x0004EC, "Member 'ABP_LightMesh_Base_C::SourceRadius_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, SoftSourceRadius_Point) == 0x0004F0, "Member 'ABP_LightMesh_Base_C::SoftSourceRadius_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, SourceLength_Point) == 0x0004F4, "Member 'ABP_LightMesh_Base_C::SourceLength_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, AttenuationRadius_Spot) == 0x0004F8, "Member 'ABP_LightMesh_Base_C::AttenuationRadius_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, SourceRadius_Spot) == 0x0004FC, "Member 'ABP_LightMesh_Base_C::SourceRadius_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, SoftSourceRadius_Spot) == 0x000500, "Member 'ABP_LightMesh_Base_C::SoftSourceRadius_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, SourceLength_Spot) == 0x000504, "Member 'ABP_LightMesh_Base_C::SourceLength_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, InnerConeAngle_Spot) == 0x000508, "Member 'ABP_LightMesh_Base_C::InnerConeAngle_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, OuterConeAngle_Spot) == 0x00050C, "Member 'ABP_LightMesh_Base_C::OuterConeAngle_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Temperature_Spot) == 0x000510, "Member 'ABP_LightMesh_Base_C::Temperature_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, IndirectLightingIntensity_Spot) == 0x000514, "Member 'ABP_LightMesh_Base_C::IndirectLightingIntensity_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, VolumetricScatteringIntensity_Spot) == 0x000518, "Member 'ABP_LightMesh_Base_C::VolumetricScatteringIntensity_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, UseInverseSquaredFalloff_Spot) == 0x00051C, "Member 'ABP_LightMesh_Base_C::UseInverseSquaredFalloff_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, LightFalloffExponent_Spot) == 0x000520, "Member 'ABP_LightMesh_Base_C::LightFalloffExponent_Spot' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Temperature_Point) == 0x000524, "Member 'ABP_LightMesh_Base_C::Temperature_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, IndirectLightingIntensity_Point) == 0x000528, "Member 'ABP_LightMesh_Base_C::IndirectLightingIntensity_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, VolumetricScatteringIntensity_Point) == 0x00052C, "Member 'ABP_LightMesh_Base_C::VolumetricScatteringIntensity_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, UseInverseSquaredFalloff_Point) == 0x000530, "Member 'ABP_LightMesh_Base_C::UseInverseSquaredFalloff_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, LightFalloffExponent_Point) == 0x000534, "Member 'ABP_LightMesh_Base_C::LightFalloffExponent_Point' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Light_Function_Material) == 0x000538, "Member 'ABP_LightMesh_Base_C::Light_Function_Material' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Emissive_Multiplier) == 0x000540, "Member 'ABP_LightMesh_Base_C::Emissive_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, Off_with_Time_of_Day) == 0x000544, "Member 'ABP_LightMesh_Base_C::Off_with_Time_of_Day' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, TimeOfDay_Time_On) == 0x000548, "Member 'ABP_LightMesh_Base_C::TimeOfDay_Time_On' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, TimeOfDay_Time_Off) == 0x00054C, "Member 'ABP_LightMesh_Base_C::TimeOfDay_Time_Off' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, TimeOfDay_Randomize_On) == 0x000550, "Member 'ABP_LightMesh_Base_C::TimeOfDay_Randomize_On' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, TimeOfDay_Randomize_Seed) == 0x000554, "Member 'ABP_LightMesh_Base_C::TimeOfDay_Randomize_Seed' has a wrong offset!");
static_assert(offsetof(ABP_LightMesh_Base_C, TimeOfDay_Randomize) == 0x00055C, "Member 'ABP_LightMesh_Base_C::TimeOfDay_Randomize' has a wrong offset!");

}

