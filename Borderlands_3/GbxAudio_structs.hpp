#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "WwiseAudio_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum GbxAudio.EDistributedSoundDebugVisualizationMode
// NumValues: 0x0005
enum class EDistributedSoundDebugVisualizationMode : uint8
{
	Off                                      = 0,
	ActiveLocations                          = 1,
	Tree                                     = 2,
	LeafNodes                                = 3,
	EDistributedSoundDebugVisualizationMode_MAX = 4,
};

// Enum GbxAudio.EWwiseNotifyComponentMethod
// NumValues: 0x0004
enum class EWwiseNotifyComponentMethod : uint32
{
	UseActorDefaultComponent                 = 0,
	FindComponentsByTag                      = 1,
	SpawnComponentAtSocket                   = 2,
	EWwiseNotifyComponentMethod_MAX          = 3,
};

// Enum GbxAudio.EOcclusionVoxelThinningAlgorithm
// NumValues: 0x0003
enum class EOcclusionVoxelThinningAlgorithm : uint8
{
	Skeletal                                 = 0,
	MedialPlane                              = 1,
	EOcclusionVoxelThinningAlgorithm_MAX     = 2,
};

// Enum GbxAudio.EFilterResultOperation
// NumValues: 0x0004
enum class EFilterResultOperation : uint32
{
	AcceptAsNewResult                        = 0,
	Add                                      = 1,
	Subtract                                 = 2,
	EFilterResultOperation_MAX               = 3,
};

// Enum GbxAudio.ECharacterSoundType
// NumValues: 0x0003
enum class ECharacterSoundType : uint8
{
	SFX                                      = 0,
	Vocalization                             = 1,
	ECharacterSoundType_MAX                  = 2,
};

// Enum GbxAudio.EDistributedSoundMode
// NumValues: 0x0003
enum class EDistributedSoundMode : uint8
{
	Point                                    = 0,
	VolumetricSphere                         = 1,
	EDistributedSoundMode_MAX                = 2,
};

// ScriptStruct GbxAudio.CharacterVocalLoopImplementation
// 0x0078 (0x0078 - 0x0000)
struct FCharacterVocalLoopImplementation final
{
public:
	bool                                          bOriginator;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoopName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPainLoop;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LoopID;                                            // 0x0014(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideConditions;                               // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ConditionID;                                       // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxCondition*                          Condition;                                         // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnce;                                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopTryingToRunAfterXSeconds;                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  WhileConditionID;                                  // 0x0048(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxCondition*                          WhileCondition;                                    // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAudio;                                    // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            StartEvent;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StopEvent;                                         // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterVocalLoopImplementation) == 0x000008, "Wrong alignment on FCharacterVocalLoopImplementation");
static_assert(sizeof(FCharacterVocalLoopImplementation) == 0x000078, "Wrong size on FCharacterVocalLoopImplementation");
static_assert(offsetof(FCharacterVocalLoopImplementation, bOriginator) == 0x000000, "Member 'FCharacterVocalLoopImplementation::bOriginator' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, LoopName) == 0x000008, "Member 'FCharacterVocalLoopImplementation::LoopName' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, bPainLoop) == 0x000010, "Member 'FCharacterVocalLoopImplementation::bPainLoop' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, LoopID) == 0x000014, "Member 'FCharacterVocalLoopImplementation::LoopID' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, bOverrideConditions) == 0x000024, "Member 'FCharacterVocalLoopImplementation::bOverrideConditions' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, ConditionID) == 0x000028, "Member 'FCharacterVocalLoopImplementation::ConditionID' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, Condition) == 0x000038, "Member 'FCharacterVocalLoopImplementation::Condition' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, bPlayOnce) == 0x000040, "Member 'FCharacterVocalLoopImplementation::bPlayOnce' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, StopTryingToRunAfterXSeconds) == 0x000044, "Member 'FCharacterVocalLoopImplementation::StopTryingToRunAfterXSeconds' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, WhileConditionID) == 0x000048, "Member 'FCharacterVocalLoopImplementation::WhileConditionID' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, WhileCondition) == 0x000058, "Member 'FCharacterVocalLoopImplementation::WhileCondition' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, bOverrideAudio) == 0x000060, "Member 'FCharacterVocalLoopImplementation::bOverrideAudio' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, StartEvent) == 0x000068, "Member 'FCharacterVocalLoopImplementation::StartEvent' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoopImplementation, StopEvent) == 0x000070, "Member 'FCharacterVocalLoopImplementation::StopEvent' has a wrong offset!");

// ScriptStruct GbxAudio.ActiveAmbientInstance
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FActiveAmbientInstance final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveAmbientInstance) == 0x000008, "Wrong alignment on FActiveAmbientInstance");
static_assert(sizeof(FActiveAmbientInstance) == 0x000040, "Wrong size on FActiveAmbientInstance");

// ScriptStruct GbxAudio.ResultGridFilter
// 0x0018 (0x0018 - 0x0000)
struct FResultGridFilter final
{
public:
	int32                                         Iterations;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFilterResultOperation                        ResultOperation;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StructuringElements;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultGridFilter) == 0x000008, "Wrong alignment on FResultGridFilter");
static_assert(sizeof(FResultGridFilter) == 0x000018, "Wrong size on FResultGridFilter");
static_assert(offsetof(FResultGridFilter, Iterations) == 0x000000, "Member 'FResultGridFilter::Iterations' has a wrong offset!");
static_assert(offsetof(FResultGridFilter, ResultOperation) == 0x000004, "Member 'FResultGridFilter::ResultOperation' has a wrong offset!");
static_assert(offsetof(FResultGridFilter, StructuringElements) == 0x000008, "Member 'FResultGridFilter::StructuringElements' has a wrong offset!");

// ScriptStruct GbxAudio.CharacterSoundImplementation
// 0x0020 (0x0020 - 0x0000)
struct FCharacterSoundImplementation final
{
public:
	bool                                          bOriginator;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            DefaultWwiseEvent;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideWwiseEvent;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSoundImplementation) == 0x000008, "Wrong alignment on FCharacterSoundImplementation");
static_assert(sizeof(FCharacterSoundImplementation) == 0x000020, "Wrong size on FCharacterSoundImplementation");
static_assert(offsetof(FCharacterSoundImplementation, bOriginator) == 0x000000, "Member 'FCharacterSoundImplementation::bOriginator' has a wrong offset!");
static_assert(offsetof(FCharacterSoundImplementation, DefaultWwiseEvent) == 0x000008, "Member 'FCharacterSoundImplementation::DefaultWwiseEvent' has a wrong offset!");
static_assert(offsetof(FCharacterSoundImplementation, bOverrideWwiseEvent) == 0x000010, "Member 'FCharacterSoundImplementation::bOverrideWwiseEvent' has a wrong offset!");
static_assert(offsetof(FCharacterSoundImplementation, WwiseEvent) == 0x000018, "Member 'FCharacterSoundImplementation::WwiseEvent' has a wrong offset!");

// ScriptStruct GbxAudio.InheritableSoundMap
// 0x0050 (0x0050 - 0x0000)
struct FInheritableSoundMap final
{
public:
	TMap<class UCharacterSoundTag*, struct FCharacterSoundImplementation> CharacterSounds;                                   // 0x0000(0x0050)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInheritableSoundMap) == 0x000008, "Wrong alignment on FInheritableSoundMap");
static_assert(sizeof(FInheritableSoundMap) == 0x000050, "Wrong size on FInheritableSoundMap");
static_assert(offsetof(FInheritableSoundMap, CharacterSounds) == 0x000000, "Member 'FInheritableSoundMap::CharacterSounds' has a wrong offset!");

// ScriptStruct GbxAudio.ActiveLoopingSoundNotifyData
// 0x0010 (0x0010 - 0x0000)
struct FActiveLoopingSoundNotifyData final
{
public:
	TArray<struct FWwisePlaybackInstance>         Instances;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveLoopingSoundNotifyData) == 0x000008, "Wrong alignment on FActiveLoopingSoundNotifyData");
static_assert(sizeof(FActiveLoopingSoundNotifyData) == 0x000010, "Wrong size on FActiveLoopingSoundNotifyData");
static_assert(offsetof(FActiveLoopingSoundNotifyData, Instances) == 0x000000, "Member 'FActiveLoopingSoundNotifyData::Instances' has a wrong offset!");

// ScriptStruct GbxAudio.ADMSubscriberData
// 0x0038 (0x0038 - 0x0000)
struct FADMSubscriberData final
{
public:
	TScriptInterface<class IAudioDistanceThresholdSubscriberInterface> Subscriber;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x28];                                      // 0x0010(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADMSubscriberData) == 0x000008, "Wrong alignment on FADMSubscriberData");
static_assert(sizeof(FADMSubscriberData) == 0x000038, "Wrong size on FADMSubscriberData");
static_assert(offsetof(FADMSubscriberData, Subscriber) == 0x000000, "Member 'FADMSubscriberData::Subscriber' has a wrong offset!");

// ScriptStruct GbxAudio.AudioPropHitFilter_DirectionLimit
// 0x0014 (0x0014 - 0x0000)
struct FAudioPropHitFilter_DirectionLimit final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         DotProductLimits;                                  // 0x000C(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioPropHitFilter_DirectionLimit) == 0x000004, "Wrong alignment on FAudioPropHitFilter_DirectionLimit");
static_assert(sizeof(FAudioPropHitFilter_DirectionLimit) == 0x000014, "Wrong size on FAudioPropHitFilter_DirectionLimit");
static_assert(offsetof(FAudioPropHitFilter_DirectionLimit, Direction) == 0x000000, "Member 'FAudioPropHitFilter_DirectionLimit::Direction' has a wrong offset!");
static_assert(offsetof(FAudioPropHitFilter_DirectionLimit, DotProductLimits) == 0x00000C, "Member 'FAudioPropHitFilter_DirectionLimit::DotProductLimits' has a wrong offset!");

// ScriptStruct GbxAudio.AudioPrepHitResultFilter
// 0x0078 (0x0078 - 0x0000)
struct FAudioPrepHitResultFilter final
{
public:
	TArray<class FString>                         HitAssetNameFilter;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      SurfaceTypeFilter;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UPhysicalMaterial>> PhysMatFilter;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> MaterialFilter;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WithinActorBoundsBlueprint;                        // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TLazyObjectPtr<class AActor>>          WithinActorBounds;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FAudioPropHitFilter_DirectionLimit> NormalDirectionLimits;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowHitsWithinGeometry;                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioPrepHitResultFilter) == 0x000008, "Wrong alignment on FAudioPrepHitResultFilter");
static_assert(sizeof(FAudioPrepHitResultFilter) == 0x000078, "Wrong size on FAudioPrepHitResultFilter");
static_assert(offsetof(FAudioPrepHitResultFilter, HitAssetNameFilter) == 0x000000, "Member 'FAudioPrepHitResultFilter::HitAssetNameFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, SurfaceTypeFilter) == 0x000010, "Member 'FAudioPrepHitResultFilter::SurfaceTypeFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, PhysMatFilter) == 0x000020, "Member 'FAudioPrepHitResultFilter::PhysMatFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, MaterialFilter) == 0x000030, "Member 'FAudioPrepHitResultFilter::MaterialFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, WithinActorBoundsBlueprint) == 0x000040, "Member 'FAudioPrepHitResultFilter::WithinActorBoundsBlueprint' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, WithinActorBounds) == 0x000050, "Member 'FAudioPrepHitResultFilter::WithinActorBounds' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, NormalDirectionLimits) == 0x000060, "Member 'FAudioPrepHitResultFilter::NormalDirectionLimits' has a wrong offset!");
static_assert(offsetof(FAudioPrepHitResultFilter, bAllowHitsWithinGeometry) == 0x000070, "Member 'FAudioPrepHitResultFilter::bAllowHitsWithinGeometry' has a wrong offset!");

// ScriptStruct GbxAudio.AudioPrepComponentFilter
// 0x00A8 (0x00A8 - 0x0000)
struct FAudioPrepComponentFilter final
{
public:
	TArray<class FString>                         AssetNameFilter;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      SurfaceTypeFilter;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UPhysicalMaterial>> PhysMatFilter;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> MaterialFilter;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         MaterialName;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WithinActorBoundsBlueprint;                        // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TLazyObjectPtr<class AActor>>          WithinActorBounds;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TLazyObjectPtr<class AActor>>          AttachedToActors;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         ActorClassName;                                    // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ComponentClassName;                                // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOnlyWorldGeometry;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioPrepComponentFilter) == 0x000008, "Wrong alignment on FAudioPrepComponentFilter");
static_assert(sizeof(FAudioPrepComponentFilter) == 0x0000A8, "Wrong size on FAudioPrepComponentFilter");
static_assert(offsetof(FAudioPrepComponentFilter, AssetNameFilter) == 0x000000, "Member 'FAudioPrepComponentFilter::AssetNameFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, SurfaceTypeFilter) == 0x000010, "Member 'FAudioPrepComponentFilter::SurfaceTypeFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, PhysMatFilter) == 0x000020, "Member 'FAudioPrepComponentFilter::PhysMatFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, MaterialFilter) == 0x000030, "Member 'FAudioPrepComponentFilter::MaterialFilter' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, MaterialName) == 0x000040, "Member 'FAudioPrepComponentFilter::MaterialName' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, WithinActorBoundsBlueprint) == 0x000050, "Member 'FAudioPrepComponentFilter::WithinActorBoundsBlueprint' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, WithinActorBounds) == 0x000060, "Member 'FAudioPrepComponentFilter::WithinActorBounds' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, AttachedToActors) == 0x000070, "Member 'FAudioPrepComponentFilter::AttachedToActors' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, ActorClassName) == 0x000080, "Member 'FAudioPrepComponentFilter::ActorClassName' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, ComponentClassName) == 0x000090, "Member 'FAudioPrepComponentFilter::ComponentClassName' has a wrong offset!");
static_assert(offsetof(FAudioPrepComponentFilter, bOnlyWorldGeometry) == 0x0000A0, "Member 'FAudioPrepComponentFilter::bOnlyWorldGeometry' has a wrong offset!");

// ScriptStruct GbxAudio.InheritableVocalLoopList
// 0x0010 (0x0010 - 0x0000)
struct FInheritableVocalLoopList final
{
public:
	TArray<struct FCharacterVocalLoopImplementation> VocalLoops;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInheritableVocalLoopList) == 0x000008, "Wrong alignment on FInheritableVocalLoopList");
static_assert(sizeof(FInheritableVocalLoopList) == 0x000010, "Wrong size on FInheritableVocalLoopList");
static_assert(offsetof(FInheritableVocalLoopList, VocalLoops) == 0x000000, "Member 'FInheritableVocalLoopList::VocalLoops' has a wrong offset!");

// ScriptStruct GbxAudio.CharacterSoundLoopDetails
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCharacterSoundLoopDetails final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterSoundLoopDetails) == 0x000008, "Wrong alignment on FCharacterSoundLoopDetails");
static_assert(sizeof(FCharacterSoundLoopDetails) == 0x000020, "Wrong size on FCharacterSoundLoopDetails");

// ScriptStruct GbxAudio.CurrentVocalization
// 0x0020 (0x0020 - 0x0000)
struct FCurrentVocalization final
{
public:
	class UCharacterSoundTag*                     Tag;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwisePlaybackInstance                 PlayingInstance;                                   // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrentVocalization) == 0x000008, "Wrong alignment on FCurrentVocalization");
static_assert(sizeof(FCurrentVocalization) == 0x000020, "Wrong size on FCurrentVocalization");
static_assert(offsetof(FCurrentVocalization, Tag) == 0x000000, "Member 'FCurrentVocalization::Tag' has a wrong offset!");
static_assert(offsetof(FCurrentVocalization, PlayingInstance) == 0x000008, "Member 'FCurrentVocalization::PlayingInstance' has a wrong offset!");

// ScriptStruct GbxAudio.CurrentVocalLoopInfo
// 0x0048 (0x0048 - 0x0000)
struct FCurrentVocalLoopInfo final
{
public:
	struct FGuid                                  LoopID;                                            // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwisePlaybackInstance                 PlayingInstance;                                   // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	struct FCharacterSoundLoopDetails             Details;                                           // 0x0028(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrentVocalLoopInfo) == 0x000008, "Wrong alignment on FCurrentVocalLoopInfo");
static_assert(sizeof(FCurrentVocalLoopInfo) == 0x000048, "Wrong size on FCurrentVocalLoopInfo");
static_assert(offsetof(FCurrentVocalLoopInfo, LoopID) == 0x000000, "Member 'FCurrentVocalLoopInfo::LoopID' has a wrong offset!");
static_assert(offsetof(FCurrentVocalLoopInfo, PlayingInstance) == 0x000010, "Member 'FCurrentVocalLoopInfo::PlayingInstance' has a wrong offset!");
static_assert(offsetof(FCurrentVocalLoopInfo, Details) == 0x000028, "Member 'FCurrentVocalLoopInfo::Details' has a wrong offset!");

// ScriptStruct GbxAudio.CharacterVocalLoop
// 0x0028 (0x0028 - 0x0000)
struct FCharacterVocalLoop final
{
public:
	class UWwiseEvent*                            StartEvent;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StopEvent;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxCondition*                          Condition;                                         // 0x0010(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxCondition*                          WhileCondition;                                    // 0x0018(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPainLoop;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterVocalLoop) == 0x000008, "Wrong alignment on FCharacterVocalLoop");
static_assert(sizeof(FCharacterVocalLoop) == 0x000028, "Wrong size on FCharacterVocalLoop");
static_assert(offsetof(FCharacterVocalLoop, StartEvent) == 0x000000, "Member 'FCharacterVocalLoop::StartEvent' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoop, StopEvent) == 0x000008, "Member 'FCharacterVocalLoop::StopEvent' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoop, Condition) == 0x000010, "Member 'FCharacterVocalLoop::Condition' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoop, WhileCondition) == 0x000018, "Member 'FCharacterVocalLoop::WhileCondition' has a wrong offset!");
static_assert(offsetof(FCharacterVocalLoop, bPainLoop) == 0x000020, "Member 'FCharacterVocalLoop::bPainLoop' has a wrong offset!");

// ScriptStruct GbxAudio.FoleyEventParams
// 0x0048 (0x0048 - 0x0000)
struct FFoleyEventParams final
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseSwitch*                           OptionalMaterialSwitch;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ComponentTags;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoleyEventParams) == 0x000008, "Wrong alignment on FFoleyEventParams");
static_assert(sizeof(FFoleyEventParams) == 0x000048, "Wrong size on FFoleyEventParams");
static_assert(offsetof(FFoleyEventParams, WwiseEvent) == 0x000000, "Member 'FFoleyEventParams::WwiseEvent' has a wrong offset!");
static_assert(offsetof(FFoleyEventParams, OptionalMaterialSwitch) == 0x000008, "Member 'FFoleyEventParams::OptionalMaterialSwitch' has a wrong offset!");
static_assert(offsetof(FFoleyEventParams, Volume) == 0x000010, "Member 'FFoleyEventParams::Volume' has a wrong offset!");
static_assert(offsetof(FFoleyEventParams, Pitch) == 0x000014, "Member 'FFoleyEventParams::Pitch' has a wrong offset!");
static_assert(offsetof(FFoleyEventParams, ComponentTags) == 0x000018, "Member 'FFoleyEventParams::ComponentTags' has a wrong offset!");

// ScriptStruct GbxAudio.ExtraFoleyParameter
// 0x0010 (0x0010 - 0x0000)
struct FExtraFoleyParameter final
{
public:
	class UWwiseRtpc*                             RtpcParam;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExtraFoleyParameter) == 0x000008, "Wrong alignment on FExtraFoleyParameter");
static_assert(sizeof(FExtraFoleyParameter) == 0x000010, "Wrong size on FExtraFoleyParameter");
static_assert(offsetof(FExtraFoleyParameter, RtpcParam) == 0x000000, "Member 'FExtraFoleyParameter::RtpcParam' has a wrong offset!");
static_assert(offsetof(FExtraFoleyParameter, Value) == 0x000008, "Member 'FExtraFoleyParameter::Value' has a wrong offset!");

// ScriptStruct GbxAudio.WindLocalAxisSensitivity
// 0x0008 (0x0008 - 0x0000)
struct FWindLocalAxisSensitivity final
{
public:
	float                                         PositiveDirectionSensitivity;                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeDirectionSensitivity;                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindLocalAxisSensitivity) == 0x000004, "Wrong alignment on FWindLocalAxisSensitivity");
static_assert(sizeof(FWindLocalAxisSensitivity) == 0x000008, "Wrong size on FWindLocalAxisSensitivity");
static_assert(offsetof(FWindLocalAxisSensitivity, PositiveDirectionSensitivity) == 0x000000, "Member 'FWindLocalAxisSensitivity::PositiveDirectionSensitivity' has a wrong offset!");
static_assert(offsetof(FWindLocalAxisSensitivity, NegativeDirectionSensitivity) == 0x000004, "Member 'FWindLocalAxisSensitivity::NegativeDirectionSensitivity' has a wrong offset!");

// ScriptStruct GbxAudio.WindDirectionalSensitivity
// 0x0018 (0x0018 - 0x0000)
struct FWindDirectionalSensitivity final
{
public:
	struct FWindLocalAxisSensitivity              LocalX;                                            // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWindLocalAxisSensitivity              LocalY;                                            // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWindLocalAxisSensitivity              LocalZ;                                            // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindDirectionalSensitivity) == 0x000004, "Wrong alignment on FWindDirectionalSensitivity");
static_assert(sizeof(FWindDirectionalSensitivity) == 0x000018, "Wrong size on FWindDirectionalSensitivity");
static_assert(offsetof(FWindDirectionalSensitivity, LocalX) == 0x000000, "Member 'FWindDirectionalSensitivity::LocalX' has a wrong offset!");
static_assert(offsetof(FWindDirectionalSensitivity, LocalY) == 0x000008, "Member 'FWindDirectionalSensitivity::LocalY' has a wrong offset!");
static_assert(offsetof(FWindDirectionalSensitivity, LocalZ) == 0x000010, "Member 'FWindDirectionalSensitivity::LocalZ' has a wrong offset!");

}

