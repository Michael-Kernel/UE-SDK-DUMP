#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_Operative

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OakGame_structs.hpp"
#include "WwiseAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function BPChar_Operative.BPChar_Operative_C.ExecuteUbergraph_BPChar_Operative
// 0x0088 (0x0088 - 0x0000)
struct BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCrosshairOffCenter_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable;                              // 0x0008(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               Temp_struct_Variable1;                             // 0x0014(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x0020(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location;                             // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Damage;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 CallFunc_PostEventAtLocation_ReturnValue;          // 0x0050(0x0018)()
	bool                                          K2Node_Event_bVisible;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_CustomEvent_CannonEmitter;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_CustomEvent_CannonComponent;                // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative) == 0x000008, "Wrong alignment on BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative");
static_assert(sizeof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative) == 0x000088, "Wrong size on BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, EntryPoint) == 0x000000, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_IsCrosshairOffCenter_ReturnValue) == 0x000004, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_IsCrosshairOffCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, Temp_bool_Variable) == 0x000006, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, Temp_struct_Variable) == 0x000008, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, Temp_struct_Variable1) == 0x000014, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, K2Node_Select_Default) == 0x000020, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_IsValid_ReturnValue1) == 0x00002C, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_IsValid_ReturnValue2) == 0x00002D, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, K2Node_Event_Location) == 0x00003C, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, K2Node_Event_Damage) == 0x000048, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_PostEventAtLocation_ReturnValue) == 0x000050, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_PostEventAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, K2Node_Event_bVisible) == 0x000068, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::K2Node_Event_bVisible' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, K2Node_CustomEvent_CannonEmitter) == 0x000070, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::K2Node_CustomEvent_CannonEmitter' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, K2Node_CustomEvent_CannonComponent) == 0x000078, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::K2Node_CustomEvent_CannonComponent' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000080, "Member 'BPChar_Operative_C_ExecuteUbergraph_BPChar_Operative::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.SpawnCannonEmitterMulticast
// 0x0010 (0x0010 - 0x0000)
struct BPChar_Operative_C_SpawnCannonEmitterMulticast final
{
public:
	class UParticleSystem*                        CannonEmitter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CannonComponent;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_SpawnCannonEmitterMulticast) == 0x000008, "Wrong alignment on BPChar_Operative_C_SpawnCannonEmitterMulticast");
static_assert(sizeof(BPChar_Operative_C_SpawnCannonEmitterMulticast) == 0x000010, "Wrong size on BPChar_Operative_C_SpawnCannonEmitterMulticast");
static_assert(offsetof(BPChar_Operative_C_SpawnCannonEmitterMulticast, CannonEmitter) == 0x000000, "Member 'BPChar_Operative_C_SpawnCannonEmitterMulticast::CannonEmitter' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnCannonEmitterMulticast, CannonComponent) == 0x000008, "Member 'BPChar_Operative_C_SpawnCannonEmitterMulticast::CannonComponent' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.SetOperativeDeviceVisible
// 0x0001 (0x0001 - 0x0000)
struct BPChar_Operative_C_SetOperativeDeviceVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_SetOperativeDeviceVisible) == 0x000001, "Wrong alignment on BPChar_Operative_C_SetOperativeDeviceVisible");
static_assert(sizeof(BPChar_Operative_C_SetOperativeDeviceVisible) == 0x000001, "Wrong size on BPChar_Operative_C_SetOperativeDeviceVisible");
static_assert(offsetof(BPChar_Operative_C_SetOperativeDeviceVisible, bVisible) == 0x000000, "Member 'BPChar_Operative_C_SetOperativeDeviceVisible::bVisible' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.DoOperativeCryoNovaAtLocation
// 0x0010 (0x0010 - 0x0000)
struct BPChar_Operative_C_DoOperativeCryoNovaAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_DoOperativeCryoNovaAtLocation) == 0x000004, "Wrong alignment on BPChar_Operative_C_DoOperativeCryoNovaAtLocation");
static_assert(sizeof(BPChar_Operative_C_DoOperativeCryoNovaAtLocation) == 0x000010, "Wrong size on BPChar_Operative_C_DoOperativeCryoNovaAtLocation");
static_assert(offsetof(BPChar_Operative_C_DoOperativeCryoNovaAtLocation, Location) == 0x000000, "Member 'BPChar_Operative_C_DoOperativeCryoNovaAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_DoOperativeCryoNovaAtLocation, Damage) == 0x00000C, "Member 'BPChar_Operative_C_DoOperativeCryoNovaAtLocation::Damage' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.InnerDoCryoNovaAtLocation
// 0x00F8 (0x00F8 - 0x0000)
struct BPChar_Operative_C_InnerDoCryoNovaAtLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDamage;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableValueHandle                  SkillRadius;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NoDestructor)
	struct FHitResult                             Temp_struct_Variable;                              // 0x0038(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue;  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue1; // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue2; // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue3; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCauseDamageStatusEffectOverrides      K2Node_MakeStruct_CauseDamageStatusEffectOverrides; // 0x00D8(0x001C)(NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_InnerDoCryoNovaAtLocation) == 0x000008, "Wrong alignment on BPChar_Operative_C_InnerDoCryoNovaAtLocation");
static_assert(sizeof(BPChar_Operative_C_InnerDoCryoNovaAtLocation) == 0x0000F8, "Wrong size on BPChar_Operative_C_InnerDoCryoNovaAtLocation");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, InLocation) == 0x000000, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::InLocation' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, InDamage) == 0x00000C, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::InDamage' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, Damage) == 0x000010, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::Damage' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, Location) == 0x000014, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, SkillRadius) == 0x000020, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::SkillRadius' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, Temp_struct_Variable) == 0x000038, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, CallFunc_GetDataTableValueFromHandle_ReturnValue) == 0x0000C8, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::CallFunc_GetDataTableValueFromHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, CallFunc_GetDataTableValueFromHandle_ReturnValue1) == 0x0000CC, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::CallFunc_GetDataTableValueFromHandle_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, CallFunc_GetDataTableValueFromHandle_ReturnValue2) == 0x0000D0, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::CallFunc_GetDataTableValueFromHandle_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, CallFunc_GetDataTableValueFromHandle_ReturnValue3) == 0x0000D4, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::CallFunc_GetDataTableValueFromHandle_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_InnerDoCryoNovaAtLocation, K2Node_MakeStruct_CauseDamageStatusEffectOverrides) == 0x0000D8, "Member 'BPChar_Operative_C_InnerDoCryoNovaAtLocation::K2Node_MakeStruct_CauseDamageStatusEffectOverrides' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Materials TP Gun
// 0x0030 (0x0030 - 0x0000)
struct BPChar_Operative_C_Get_Materials_TP_Gun final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	class AWeapon*                                CallFunc_GetWeapon_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetAttachmentMesh_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPChar_Operative_C_Get_Materials_TP_Gun) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Materials_TP_Gun");
static_assert(sizeof(BPChar_Operative_C_Get_Materials_TP_Gun) == 0x000030, "Wrong size on BPChar_Operative_C_Get_Materials_TP_Gun");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_TP_Gun, Materials) == 0x000000, "Member 'BPChar_Operative_C_Get_Materials_TP_Gun::Materials' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_TP_Gun, CallFunc_GetWeapon_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_Get_Materials_TP_Gun::CallFunc_GetWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_TP_Gun, CallFunc_GetAttachmentMesh_ReturnValue) == 0x000018, "Member 'BPChar_Operative_C_Get_Materials_TP_Gun::CallFunc_GetAttachmentMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_TP_Gun, CallFunc_GetMaterials_ReturnValue) == 0x000020, "Member 'BPChar_Operative_C_Get_Materials_TP_Gun::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Materials FP Gun
// 0x0030 (0x0030 - 0x0000)
struct BPChar_Operative_C_Get_Materials_FP_Gun final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	class AWeapon*                                CallFunc_GetWeapon_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetAttachmentMesh_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPChar_Operative_C_Get_Materials_FP_Gun) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Materials_FP_Gun");
static_assert(sizeof(BPChar_Operative_C_Get_Materials_FP_Gun) == 0x000030, "Wrong size on BPChar_Operative_C_Get_Materials_FP_Gun");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_FP_Gun, Materials) == 0x000000, "Member 'BPChar_Operative_C_Get_Materials_FP_Gun::Materials' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_FP_Gun, CallFunc_GetWeapon_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_Get_Materials_FP_Gun::CallFunc_GetWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_FP_Gun, CallFunc_GetAttachmentMesh_ReturnValue) == 0x000018, "Member 'BPChar_Operative_C_Get_Materials_FP_Gun::CallFunc_GetAttachmentMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_FP_Gun, CallFunc_GetMaterials_ReturnValue) == 0x000020, "Member 'BPChar_Operative_C_Get_Materials_FP_Gun::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Materials Skeletal Mesh
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_Get_Materials_Skeletal_Mesh final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPChar_Operative_C_Get_Materials_Skeletal_Mesh) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Materials_Skeletal_Mesh");
static_assert(sizeof(BPChar_Operative_C_Get_Materials_Skeletal_Mesh) == 0x000020, "Wrong size on BPChar_Operative_C_Get_Materials_Skeletal_Mesh");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Skeletal_Mesh, Materials) == 0x000000, "Member 'BPChar_Operative_C_Get_Materials_Skeletal_Mesh::Materials' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Skeletal_Mesh, CallFunc_GetMaterials_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_Get_Materials_Skeletal_Mesh::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Materials Legs
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_Get_Materials_Legs final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPChar_Operative_C_Get_Materials_Legs) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Materials_Legs");
static_assert(sizeof(BPChar_Operative_C_Get_Materials_Legs) == 0x000020, "Wrong size on BPChar_Operative_C_Get_Materials_Legs");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Legs, Materials) == 0x000000, "Member 'BPChar_Operative_C_Get_Materials_Legs::Materials' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Legs, CallFunc_GetMaterials_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_Get_Materials_Legs::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Materials Arms
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_Get_Materials_Arms final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPChar_Operative_C_Get_Materials_Arms) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Materials_Arms");
static_assert(sizeof(BPChar_Operative_C_Get_Materials_Arms) == 0x000020, "Wrong size on BPChar_Operative_C_Get_Materials_Arms");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Arms, Materials) == 0x000000, "Member 'BPChar_Operative_C_Get_Materials_Arms::Materials' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Arms, CallFunc_GetMaterials_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_Get_Materials_Arms::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Materials Head
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_Get_Materials_Head final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPChar_Operative_C_Get_Materials_Head) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Materials_Head");
static_assert(sizeof(BPChar_Operative_C_Get_Materials_Head) == 0x000020, "Wrong size on BPChar_Operative_C_Get_Materials_Head");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Head, Materials) == 0x000000, "Member 'BPChar_Operative_C_Get_Materials_Head::Materials' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_Get_Materials_Head, CallFunc_GetMaterials_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_Get_Materials_Head::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Skeletal Mesh
// 0x0008 (0x0008 - 0x0000)
struct BPChar_Operative_C_Get_Skeletal_Mesh final
{
public:
	class USkeletalMeshComponent*                 Skeletal_Mesh;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_Get_Skeletal_Mesh) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Skeletal_Mesh");
static_assert(sizeof(BPChar_Operative_C_Get_Skeletal_Mesh) == 0x000008, "Wrong size on BPChar_Operative_C_Get_Skeletal_Mesh");
static_assert(offsetof(BPChar_Operative_C_Get_Skeletal_Mesh, Skeletal_Mesh) == 0x000000, "Member 'BPChar_Operative_C_Get_Skeletal_Mesh::Skeletal_Mesh' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Skeletal Mesh Legs
// 0x0008 (0x0008 - 0x0000)
struct BPChar_Operative_C_Get_Skeletal_Mesh_Legs final
{
public:
	class UGbxSkeletalMeshComponent*              Legs;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_Get_Skeletal_Mesh_Legs) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Skeletal_Mesh_Legs");
static_assert(sizeof(BPChar_Operative_C_Get_Skeletal_Mesh_Legs) == 0x000008, "Wrong size on BPChar_Operative_C_Get_Skeletal_Mesh_Legs");
static_assert(offsetof(BPChar_Operative_C_Get_Skeletal_Mesh_Legs, Legs) == 0x000000, "Member 'BPChar_Operative_C_Get_Skeletal_Mesh_Legs::Legs' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Skeletal Mesh Arms
// 0x0008 (0x0008 - 0x0000)
struct BPChar_Operative_C_Get_Skeletal_Mesh_Arms final
{
public:
	class USkeletalMeshComponent*                 Arms_Mesh;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_Get_Skeletal_Mesh_Arms) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Skeletal_Mesh_Arms");
static_assert(sizeof(BPChar_Operative_C_Get_Skeletal_Mesh_Arms) == 0x000008, "Wrong size on BPChar_Operative_C_Get_Skeletal_Mesh_Arms");
static_assert(offsetof(BPChar_Operative_C_Get_Skeletal_Mesh_Arms, Arms_Mesh) == 0x000000, "Member 'BPChar_Operative_C_Get_Skeletal_Mesh_Arms::Arms_Mesh' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.Get Skeletal Mesh Head
// 0x0008 (0x0008 - 0x0000)
struct BPChar_Operative_C_Get_Skeletal_Mesh_Head final
{
public:
	class UGbxSkeletalMeshComponent*              Head_Mesh;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_Get_Skeletal_Mesh_Head) == 0x000008, "Wrong alignment on BPChar_Operative_C_Get_Skeletal_Mesh_Head");
static_assert(sizeof(BPChar_Operative_C_Get_Skeletal_Mesh_Head) == 0x000008, "Wrong size on BPChar_Operative_C_Get_Skeletal_Mesh_Head");
static_assert(offsetof(BPChar_Operative_C_Get_Skeletal_Mesh_Head, Head_Mesh) == 0x000000, "Member 'BPChar_Operative_C_Get_Skeletal_Mesh_Head::Head_Mesh' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetDroneSpawnLocation
// 0x0060 (0x0060 - 0x0000)
struct BPChar_Operative_C_GetDroneSpawnLocation final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetDroneSpawnLocation) == 0x000010, "Wrong alignment on BPChar_Operative_C_GetDroneSpawnLocation");
static_assert(sizeof(BPChar_Operative_C_GetDroneSpawnLocation) == 0x000060, "Wrong size on BPChar_Operative_C_GetDroneSpawnLocation");
static_assert(offsetof(BPChar_Operative_C_GetDroneSpawnLocation, Transform) == 0x000000, "Member 'BPChar_Operative_C_GetDroneSpawnLocation::Transform' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDroneSpawnLocation, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'BPChar_Operative_C_GetDroneSpawnLocation::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.BlockOperativeActionSkillActivation
// 0x0006 (0x0006 - 0x0000)
struct BPChar_Operative_C_BlockOperativeActionSkillActivation final
{
public:
	bool                                          ShouldBlock;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingClass_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingClass_ReturnValue1;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingClass_ReturnValue2;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_BlockOperativeActionSkillActivation) == 0x000001, "Wrong alignment on BPChar_Operative_C_BlockOperativeActionSkillActivation");
static_assert(sizeof(BPChar_Operative_C_BlockOperativeActionSkillActivation) == 0x000006, "Wrong size on BPChar_Operative_C_BlockOperativeActionSkillActivation");
static_assert(offsetof(BPChar_Operative_C_BlockOperativeActionSkillActivation, ShouldBlock) == 0x000000, "Member 'BPChar_Operative_C_BlockOperativeActionSkillActivation::ShouldBlock' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_BlockOperativeActionSkillActivation, CallFunc_IsPlayingClass_ReturnValue) == 0x000001, "Member 'BPChar_Operative_C_BlockOperativeActionSkillActivation::CallFunc_IsPlayingClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_BlockOperativeActionSkillActivation, CallFunc_IsPlayingClass_ReturnValue1) == 0x000002, "Member 'BPChar_Operative_C_BlockOperativeActionSkillActivation::CallFunc_IsPlayingClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_BlockOperativeActionSkillActivation, CallFunc_IsPlayingClass_ReturnValue2) == 0x000003, "Member 'BPChar_Operative_C_BlockOperativeActionSkillActivation::CallFunc_IsPlayingClass_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_BlockOperativeActionSkillActivation, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BPChar_Operative_C_BlockOperativeActionSkillActivation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_BlockOperativeActionSkillActivation, CallFunc_BooleanOR_ReturnValue1) == 0x000005, "Member 'BPChar_Operative_C_BlockOperativeActionSkillActivation::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.SpawnAndThrowOperativeGrenade
// 0x0090 (0x0090 - 0x0000)
struct BPChar_Operative_C_SpawnAndThrowOperativeGrenade final
{
public:
	class AActor*                                 SpawnFromActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpawnFromSocket;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Res;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Grenade;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScaleDownVelocity;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bThrowInFrontOfTarget;                             // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLoc;                                         // 0x0028(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnFrom;                                         // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          bIgnorePayload;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bClearDelivery;                                    // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGrenade*                               SpawnedGrenade;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGrenade*                               CallFunc_SpawnAmmoOptionalGrenadeFromSource_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade) == 0x000010, "Wrong alignment on BPChar_Operative_C_SpawnAndThrowOperativeGrenade");
static_assert(sizeof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade) == 0x000090, "Wrong size on BPChar_Operative_C_SpawnAndThrowOperativeGrenade");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, SpawnFromActor) == 0x000000, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::SpawnFromActor' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, SpawnFromSocket) == 0x000008, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::SpawnFromSocket' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, Res) == 0x000010, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::Res' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, Grenade) == 0x000018, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::Grenade' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, Speed) == 0x000020, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::Speed' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, bScaleDownVelocity) == 0x000024, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::bScaleDownVelocity' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, bThrowInFrontOfTarget) == 0x000025, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::bThrowInFrontOfTarget' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, TargetLoc) == 0x000028, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::TargetLoc' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, SpawnFrom) == 0x000040, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::SpawnFrom' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, bIgnorePayload) == 0x000070, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::bIgnorePayload' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, bClearDelivery) == 0x000071, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::bClearDelivery' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, SpawnedGrenade) == 0x000078, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::SpawnedGrenade' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, CallFunc_SpawnAmmoOptionalGrenadeFromSource_ReturnValue) == 0x000080, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::CallFunc_SpawnAmmoOptionalGrenadeFromSource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, CallFunc_IsServer_ReturnValue) == 0x000089, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_SpawnAndThrowOperativeGrenade, CallFunc_BooleanAND_ReturnValue) == 0x00008A, "Member 'BPChar_Operative_C_SpawnAndThrowOperativeGrenade::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetDigiCloneShieldRemainingPercent
// 0x0050 (0x0050 - 0x0000)
struct BPChar_Operative_C_GetDigiCloneShieldRemainingPercent final
{
public:
	float                                         ShieldPercentRemaining;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakActionAbility_Digiclone*            CallFunc_GetDigicloneActionAbility_Res;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameResourcePoolManagerComponent*      CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameResourcePoolReference             CallFunc_GetResourcePoolByResource_ReturnValue;    // 0x0020(0x0018)(NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakResourcePoolReference_bValid;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakResourcePoolReference_CurrentValue;  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakResourcePoolReference_MinValue;      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakResourcePoolReference_MaxValue;      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetDigiCloneShieldRemainingPercent");
static_assert(sizeof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent) == 0x000050, "Wrong size on BPChar_Operative_C_GetDigiCloneShieldRemainingPercent");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, ShieldPercentRemaining) == 0x000000, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::ShieldPercentRemaining' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_GetDigicloneActionAbility_Res) == 0x000008, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_GetDigicloneActionAbility_Res' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_GetResourcePoolByResource_ReturnValue) == 0x000020, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_GetResourcePoolByResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_BreakResourcePoolReference_bValid) == 0x000038, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_BreakResourcePoolReference_bValid' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_BreakResourcePoolReference_CurrentValue) == 0x00003C, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_BreakResourcePoolReference_CurrentValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_BreakResourcePoolReference_MinValue) == 0x000040, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_BreakResourcePoolReference_MinValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_BreakResourcePoolReference_MaxValue) == 0x000044, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_BreakResourcePoolReference_MaxValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigiCloneShieldRemainingPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000048, "Member 'BPChar_Operative_C_GetDigiCloneShieldRemainingPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetOperativeShieldRemainingPercent
// 0x0040 (0x0040 - 0x0000)
struct BPChar_Operative_C_GetOperativeShieldRemainingPercent final
{
public:
	float                                         ShieldPercentRemaining;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasShieldEquipped_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameResourcePoolReference             CallFunc_GetResourcePoolByResource_ReturnValue;    // 0x0008(0x0018)(NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakResourcePoolReference_bValid;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakResourcePoolReference_CurrentValue;  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakResourcePoolReference_MinValue;      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakResourcePoolReference_MaxValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_GetOperativeShieldRemainingPercent) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetOperativeShieldRemainingPercent");
static_assert(sizeof(BPChar_Operative_C_GetOperativeShieldRemainingPercent) == 0x000040, "Wrong size on BPChar_Operative_C_GetOperativeShieldRemainingPercent");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, ShieldPercentRemaining) == 0x000000, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::ShieldPercentRemaining' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_HasShieldEquipped_ReturnValue) == 0x000004, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_HasShieldEquipped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_GetResourcePoolByResource_ReturnValue) == 0x000008, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_GetResourcePoolByResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_BreakResourcePoolReference_bValid) == 0x000020, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_BreakResourcePoolReference_bValid' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_BreakResourcePoolReference_CurrentValue) == 0x000024, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_BreakResourcePoolReference_CurrentValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_BreakResourcePoolReference_MinValue) == 0x000028, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_BreakResourcePoolReference_MinValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_BreakResourcePoolReference_MaxValue) == 0x00002C, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_BreakResourcePoolReference_MaxValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_BooleanAND_ReturnValue) == 0x000030, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_FClamp_ReturnValue) == 0x000034, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeShieldRemainingPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'BPChar_Operative_C_GetOperativeShieldRemainingPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetOperativeStatusEffectOverrides
// 0x0044 (0x0044 - 0x0000)
struct BPChar_Operative_C_GetOperativeStatusEffectOverrides final
{
public:
	struct FCauseDamageStatusEffectOverrides      Overrides;                                         // 0x0000(0x001C)(Parm, OutParm, NoDestructor)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue;  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue1; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValueFromHandle_ReturnValue2; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCauseDamageStatusEffectOverrides      K2Node_MakeStruct_CauseDamageStatusEffectOverrides; // 0x0028(0x001C)(NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetOperativeStatusEffectOverrides) == 0x000004, "Wrong alignment on BPChar_Operative_C_GetOperativeStatusEffectOverrides");
static_assert(sizeof(BPChar_Operative_C_GetOperativeStatusEffectOverrides) == 0x000044, "Wrong size on BPChar_Operative_C_GetOperativeStatusEffectOverrides");
static_assert(offsetof(BPChar_Operative_C_GetOperativeStatusEffectOverrides, Overrides) == 0x000000, "Member 'BPChar_Operative_C_GetOperativeStatusEffectOverrides::Overrides' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeStatusEffectOverrides, CallFunc_GetDataTableValueFromHandle_ReturnValue) == 0x00001C, "Member 'BPChar_Operative_C_GetOperativeStatusEffectOverrides::CallFunc_GetDataTableValueFromHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeStatusEffectOverrides, CallFunc_GetDataTableValueFromHandle_ReturnValue1) == 0x000020, "Member 'BPChar_Operative_C_GetOperativeStatusEffectOverrides::CallFunc_GetDataTableValueFromHandle_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeStatusEffectOverrides, CallFunc_GetDataTableValueFromHandle_ReturnValue2) == 0x000024, "Member 'BPChar_Operative_C_GetOperativeStatusEffectOverrides::CallFunc_GetDataTableValueFromHandle_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetOperativeStatusEffectOverrides, K2Node_MakeStruct_CauseDamageStatusEffectOverrides) == 0x000028, "Member 'BPChar_Operative_C_GetOperativeStatusEffectOverrides::K2Node_MakeStruct_CauseDamageStatusEffectOverrides' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetBarrierActionAbility
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_GetBarrierActionAbility final
{
public:
	class UOakActionAbility_Barrier*              Res;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility*                      CallFunc_FindActionAbility_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility_Barrier*              K2Node_DynamicCast_AsOak_Action_Ability_Barrier;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetBarrierActionAbility) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetBarrierActionAbility");
static_assert(sizeof(BPChar_Operative_C_GetBarrierActionAbility) == 0x000020, "Wrong size on BPChar_Operative_C_GetBarrierActionAbility");
static_assert(offsetof(BPChar_Operative_C_GetBarrierActionAbility, Res) == 0x000000, "Member 'BPChar_Operative_C_GetBarrierActionAbility::Res' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetBarrierActionAbility, CallFunc_FindActionAbility_ReturnValue) == 0x000008, "Member 'BPChar_Operative_C_GetBarrierActionAbility::CallFunc_FindActionAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetBarrierActionAbility, K2Node_DynamicCast_AsOak_Action_Ability_Barrier) == 0x000010, "Member 'BPChar_Operative_C_GetBarrierActionAbility::K2Node_DynamicCast_AsOak_Action_Ability_Barrier' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetBarrierActionAbility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPChar_Operative_C_GetBarrierActionAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.CanActivateTrapCard
// 0x0010 (0x0010 - 0x0000)
struct BPChar_Operative_C_CanActivateTrapCard final
{
public:
	bool                                          Res;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakGbxAttributeFloat_Value;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakGbxAttributeFloat_BaseValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_CanActivateTrapCard) == 0x000004, "Wrong alignment on BPChar_Operative_C_CanActivateTrapCard");
static_assert(sizeof(BPChar_Operative_C_CanActivateTrapCard) == 0x000010, "Wrong size on BPChar_Operative_C_CanActivateTrapCard");
static_assert(offsetof(BPChar_Operative_C_CanActivateTrapCard, Res) == 0x000000, "Member 'BPChar_Operative_C_CanActivateTrapCard::Res' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_CanActivateTrapCard, CallFunc_BreakGbxAttributeFloat_Value) == 0x000004, "Member 'BPChar_Operative_C_CanActivateTrapCard::CallFunc_BreakGbxAttributeFloat_Value' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_CanActivateTrapCard, CallFunc_BreakGbxAttributeFloat_BaseValue) == 0x000008, "Member 'BPChar_Operative_C_CanActivateTrapCard::CallFunc_BreakGbxAttributeFloat_BaseValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_CanActivateTrapCard, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BPChar_Operative_C_CanActivateTrapCard::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BPChar_Operative_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_Setup_ReturnValue;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_UserConstructionScript) == 0x000001, "Wrong alignment on BPChar_Operative_C_UserConstructionScript");
static_assert(sizeof(BPChar_Operative_C_UserConstructionScript) == 0x000001, "Wrong size on BPChar_Operative_C_UserConstructionScript");
static_assert(offsetof(BPChar_Operative_C_UserConstructionScript, CallFunc_Setup_ReturnValue) == 0x000000, "Member 'BPChar_Operative_C_UserConstructionScript::CallFunc_Setup_ReturnValue' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetHeadMesh
// 0x0008 (0x0008 - 0x0000)
struct BPChar_Operative_C_GetHeadMesh final
{
public:
	class USkeletalMesh*                          HeadMesh;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPChar_Operative_C_GetHeadMesh) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetHeadMesh");
static_assert(sizeof(BPChar_Operative_C_GetHeadMesh) == 0x000008, "Wrong size on BPChar_Operative_C_GetHeadMesh");
static_assert(offsetof(BPChar_Operative_C_GetHeadMesh, HeadMesh) == 0x000000, "Member 'BPChar_Operative_C_GetHeadMesh::HeadMesh' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetPrimaryActionAbility
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_GetPrimaryActionAbility final
{
public:
	class UOakActionAbility*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakPlayerAbility*                      CallFunc_GetSlotAbility_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility*                      K2Node_DynamicCast_AsOak_Action_Ability;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetPrimaryActionAbility) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetPrimaryActionAbility");
static_assert(sizeof(BPChar_Operative_C_GetPrimaryActionAbility) == 0x000020, "Wrong size on BPChar_Operative_C_GetPrimaryActionAbility");
static_assert(offsetof(BPChar_Operative_C_GetPrimaryActionAbility, ReturnValue) == 0x000000, "Member 'BPChar_Operative_C_GetPrimaryActionAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetPrimaryActionAbility, CallFunc_GetSlotAbility_ReturnValue) == 0x000008, "Member 'BPChar_Operative_C_GetPrimaryActionAbility::CallFunc_GetSlotAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetPrimaryActionAbility, K2Node_DynamicCast_AsOak_Action_Ability) == 0x000010, "Member 'BPChar_Operative_C_GetPrimaryActionAbility::K2Node_DynamicCast_AsOak_Action_Ability' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetPrimaryActionAbility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPChar_Operative_C_GetPrimaryActionAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetSecondaryActionAbility
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_GetSecondaryActionAbility final
{
public:
	class UOakActionAbility*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakPlayerAbility*                      CallFunc_GetSlotAbility_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility*                      K2Node_DynamicCast_AsOak_Action_Ability;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetSecondaryActionAbility) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetSecondaryActionAbility");
static_assert(sizeof(BPChar_Operative_C_GetSecondaryActionAbility) == 0x000020, "Wrong size on BPChar_Operative_C_GetSecondaryActionAbility");
static_assert(offsetof(BPChar_Operative_C_GetSecondaryActionAbility, ReturnValue) == 0x000000, "Member 'BPChar_Operative_C_GetSecondaryActionAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetSecondaryActionAbility, CallFunc_GetSlotAbility_ReturnValue) == 0x000008, "Member 'BPChar_Operative_C_GetSecondaryActionAbility::CallFunc_GetSlotAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetSecondaryActionAbility, K2Node_DynamicCast_AsOak_Action_Ability) == 0x000010, "Member 'BPChar_Operative_C_GetSecondaryActionAbility::K2Node_DynamicCast_AsOak_Action_Ability' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetSecondaryActionAbility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPChar_Operative_C_GetSecondaryActionAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetDigicloneActionAbility
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_GetDigicloneActionAbility final
{
public:
	class UOakActionAbility_Digiclone*            Res;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility*                      CallFunc_FindActionAbility_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility_Digiclone*            K2Node_DynamicCast_AsOak_Action_Ability_Digiclone; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetDigicloneActionAbility) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetDigicloneActionAbility");
static_assert(sizeof(BPChar_Operative_C_GetDigicloneActionAbility) == 0x000020, "Wrong size on BPChar_Operative_C_GetDigicloneActionAbility");
static_assert(offsetof(BPChar_Operative_C_GetDigicloneActionAbility, Res) == 0x000000, "Member 'BPChar_Operative_C_GetDigicloneActionAbility::Res' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigicloneActionAbility, CallFunc_FindActionAbility_ReturnValue) == 0x000008, "Member 'BPChar_Operative_C_GetDigicloneActionAbility::CallFunc_FindActionAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigicloneActionAbility, K2Node_DynamicCast_AsOak_Action_Ability_Digiclone) == 0x000010, "Member 'BPChar_Operative_C_GetDigicloneActionAbility::K2Node_DynamicCast_AsOak_Action_Ability_Digiclone' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetDigicloneActionAbility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPChar_Operative_C_GetDigicloneActionAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPChar_Operative.BPChar_Operative_C.GetGRMLNActionAbility
// 0x0020 (0x0020 - 0x0000)
struct BPChar_Operative_C_GetGRMLNActionAbility final
{
public:
	class UOakActionAbility_GRMLN*                Res;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility*                      CallFunc_FindActionAbility_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbility_GRMLN*                K2Node_DynamicCast_AsOak_Action_Ability_GRMLN;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPChar_Operative_C_GetGRMLNActionAbility) == 0x000008, "Wrong alignment on BPChar_Operative_C_GetGRMLNActionAbility");
static_assert(sizeof(BPChar_Operative_C_GetGRMLNActionAbility) == 0x000020, "Wrong size on BPChar_Operative_C_GetGRMLNActionAbility");
static_assert(offsetof(BPChar_Operative_C_GetGRMLNActionAbility, Res) == 0x000000, "Member 'BPChar_Operative_C_GetGRMLNActionAbility::Res' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetGRMLNActionAbility, CallFunc_FindActionAbility_ReturnValue) == 0x000008, "Member 'BPChar_Operative_C_GetGRMLNActionAbility::CallFunc_FindActionAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetGRMLNActionAbility, K2Node_DynamicCast_AsOak_Action_Ability_GRMLN) == 0x000010, "Member 'BPChar_Operative_C_GetGRMLNActionAbility::K2Node_DynamicCast_AsOak_Action_Ability_GRMLN' has a wrong offset!");
static_assert(offsetof(BPChar_Operative_C_GetGRMLNActionAbility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPChar_Operative_C_GetGRMLNActionAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

