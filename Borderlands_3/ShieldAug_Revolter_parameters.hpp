#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShieldAug_Revolter

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function ShieldAug_Revolter.ShieldAug_Revolter_C.K2_TriggerEffect
// 0x00C0 (0x00C0 - 0x0000)
struct ShieldAug_Revolter_C_K2_TriggerEffect final
{
public:
	class AShield*                                Shield;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameResourcePoolReference             ResourcePool;                                      // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
	struct FAugmentData                           StackData;                                         // 0x0020(0x0030)(BlueprintVisible, Parm, OutParm, ReferenceParm, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatusEffectSpec                      K2Node_MakeStruct_StatusEffectSpec;                // 0x0070(0x0038)(NoDestructor)
	struct FStatusEffectInstanceReference         CallFunc_AddStatusEffect_ReturnValue;              // 0x00A8(0x0018)(NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ShieldAug_Revolter_C_K2_TriggerEffect) == 0x000008, "Wrong alignment on ShieldAug_Revolter_C_K2_TriggerEffect");
static_assert(sizeof(ShieldAug_Revolter_C_K2_TriggerEffect) == 0x0000C0, "Wrong size on ShieldAug_Revolter_C_K2_TriggerEffect");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, Shield) == 0x000000, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::Shield' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, ResourcePool) == 0x000008, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::ResourcePool' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, StackData) == 0x000020, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::StackData' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, CallFunc_GetValueOfAttribute_ReturnValue) == 0x000058, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::CallFunc_GetValueOfAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, K2Node_DynamicCast_AsOak_Character) == 0x000060, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, K2Node_MakeStruct_StatusEffectSpec) == 0x000070, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::K2Node_MakeStruct_StatusEffectSpec' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_TriggerEffect, CallFunc_AddStatusEffect_ReturnValue) == 0x0000A8, "Member 'ShieldAug_Revolter_C_K2_TriggerEffect::CallFunc_AddStatusEffect_ReturnValue' has a wrong offset!");

// Function ShieldAug_Revolter.ShieldAug_Revolter_C.K2_NativeDelayCallback
// 0x0060 (0x0060 - 0x0000)
struct ShieldAug_Revolter_C_K2_NativeDelayCallback final
{
public:
	class AShield*                                Shield;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAugmentData                           StackData;                                         // 0x0008(0x0030)(BlueprintVisible, Parm, OutParm, ReferenceParm, NoDestructor)
	class FName                                   DelayName;                                         // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ShieldAug_Revolter_C_K2_NativeDelayCallback) == 0x000008, "Wrong alignment on ShieldAug_Revolter_C_K2_NativeDelayCallback");
static_assert(sizeof(ShieldAug_Revolter_C_K2_NativeDelayCallback) == 0x000060, "Wrong size on ShieldAug_Revolter_C_K2_NativeDelayCallback");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, Shield) == 0x000000, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::Shield' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, StackData) == 0x000008, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::StackData' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, DelayName) == 0x000038, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::DelayName' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000040, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, K2Node_DynamicCast_AsOak_Character) == 0x000050, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_NativeDelayCallback, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'ShieldAug_Revolter_C_K2_NativeDelayCallback::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ShieldAug_Revolter.ShieldAug_Revolter_C.K2_OnShieldUnequipped
// 0x0058 (0x0058 - 0x0000)
struct ShieldAug_Revolter_C_K2_OnShieldUnequipped final
{
public:
	class AShield*                                Shield;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          Equipper;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAugmentData                           StackData;                                         // 0x0010(0x0030)(BlueprintVisible, Parm, OutParm, ReferenceParm, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ShieldAug_Revolter_C_K2_OnShieldUnequipped) == 0x000008, "Wrong alignment on ShieldAug_Revolter_C_K2_OnShieldUnequipped");
static_assert(sizeof(ShieldAug_Revolter_C_K2_OnShieldUnequipped) == 0x000058, "Wrong size on ShieldAug_Revolter_C_K2_OnShieldUnequipped");
static_assert(offsetof(ShieldAug_Revolter_C_K2_OnShieldUnequipped, Shield) == 0x000000, "Member 'ShieldAug_Revolter_C_K2_OnShieldUnequipped::Shield' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_OnShieldUnequipped, Equipper) == 0x000008, "Member 'ShieldAug_Revolter_C_K2_OnShieldUnequipped::Equipper' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_OnShieldUnequipped, StackData) == 0x000010, "Member 'ShieldAug_Revolter_C_K2_OnShieldUnequipped::StackData' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_OnShieldUnequipped, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'ShieldAug_Revolter_C_K2_OnShieldUnequipped::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_OnShieldUnequipped, K2Node_DynamicCast_AsOak_Character) == 0x000048, "Member 'ShieldAug_Revolter_C_K2_OnShieldUnequipped::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(ShieldAug_Revolter_C_K2_OnShieldUnequipped, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'ShieldAug_Revolter_C_K2_OnShieldUnequipped::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

