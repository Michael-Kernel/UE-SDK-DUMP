#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_CritFail

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"


namespace SDK::Params
{

// Function Ability_CritFail.Ability_CritFail_C.ExecuteUbergraph_Ability_CritFail
// 0x0078 (0x0078 - 0x0000)
struct Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAbilityOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayer_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AWeapon* EventWeapon, bool bAutoReload)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetAbilityOwner_ReturnValue1;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                K2Node_CustomEvent_EventWeapon;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAutoReload;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxAbilityResourceSpec_ScriptDelegate K2Node_MakeStruct_GbxAbilityResourceSpec_ScriptDelegate; // 0x0050(0x0028)(NoDestructor)
};
static_assert(alignof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail) == 0x000008, "Wrong alignment on Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail");
static_assert(sizeof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail) == 0x000078, "Wrong size on Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, EntryPoint) == 0x000000, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, CallFunc_GetAbilityOwner_ReturnValue) == 0x000008, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::CallFunc_GetAbilityOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, CallFunc_IsPlayer_ReturnValue) == 0x000010, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::CallFunc_IsPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, CallFunc_GetAbilityOwner_ReturnValue1) == 0x000028, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::CallFunc_GetAbilityOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, K2Node_CustomEvent_EventWeapon) == 0x000030, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::K2Node_CustomEvent_EventWeapon' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, K2Node_CustomEvent_bAutoReload) == 0x000038, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::K2Node_CustomEvent_bAutoReload' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, K2Node_DynamicCast_AsOak_Character) == 0x000040, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000049, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail, K2Node_MakeStruct_GbxAbilityResourceSpec_ScriptDelegate) == 0x000050, "Member 'Ability_CritFail_C_ExecuteUbergraph_Ability_CritFail::K2Node_MakeStruct_GbxAbilityResourceSpec_ScriptDelegate' has a wrong offset!");

// Function Ability_CritFail.Ability_CritFail_C.ReloadStartedEvent
// 0x0010 (0x0010 - 0x0000)
struct Ability_CritFail_C_ReloadStartedEvent final
{
public:
	class AWeapon*                                EventWeapon;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoReload;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ability_CritFail_C_ReloadStartedEvent) == 0x000008, "Wrong alignment on Ability_CritFail_C_ReloadStartedEvent");
static_assert(sizeof(Ability_CritFail_C_ReloadStartedEvent) == 0x000010, "Wrong size on Ability_CritFail_C_ReloadStartedEvent");
static_assert(offsetof(Ability_CritFail_C_ReloadStartedEvent, EventWeapon) == 0x000000, "Member 'Ability_CritFail_C_ReloadStartedEvent::EventWeapon' has a wrong offset!");
static_assert(offsetof(Ability_CritFail_C_ReloadStartedEvent, bAutoReload) == 0x000008, "Member 'Ability_CritFail_C_ReloadStartedEvent::bAutoReload' has a wrong offset!");

}

