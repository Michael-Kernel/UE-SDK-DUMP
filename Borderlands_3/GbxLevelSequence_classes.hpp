#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxLevelSequence

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "LevelSequence_classes.hpp"
#include "Engine_classes.hpp"
#include "GbxLevelSequence_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class GbxLevelSequence.GbxMovieSceneBindingOverrides
// 0x0000 (0x0098 - 0x0098)
class UGbxMovieSceneBindingOverrides final : public UMovieSceneBindingOverrides
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxMovieSceneBindingOverrides">();
	}
	static class UGbxMovieSceneBindingOverrides* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxMovieSceneBindingOverrides>();
	}
};
static_assert(alignof(UGbxMovieSceneBindingOverrides) == 0x000008, "Wrong alignment on UGbxMovieSceneBindingOverrides");
static_assert(sizeof(UGbxMovieSceneBindingOverrides) == 0x000098, "Wrong size on UGbxMovieSceneBindingOverrides");

// Class GbxLevelSequence.GbxLevelSequence
// 0x0000 (0x0490 - 0x0490)
class UGbxLevelSequence final : public ULevelSequence
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxLevelSequence">();
	}
	static class UGbxLevelSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxLevelSequence>();
	}
};
static_assert(alignof(UGbxLevelSequence) == 0x000008, "Wrong alignment on UGbxLevelSequence");
static_assert(sizeof(UGbxLevelSequence) == 0x000490, "Wrong size on UGbxLevelSequence");

// Class GbxLevelSequence.GbxLevelSequenceActor
// 0x00D0 (0x0600 - 0x0530)
class AGbxLevelSequenceActor final : public ALevelSequenceActor
{
public:
	uint8                                         Pad_530[0x20];                                     // 0x0530(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnPlay;                                            // 0x0550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPause;                                           // 0x0560(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFinished;                                        // 0x0570(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStop;                                            // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UGameplayTasksComponent*                GameplayTasksComponent;                            // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxLevelSequencePlayer*                GbxLevelSequencePlayer;                            // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGbxLevelSequenceBindingSlot>   BindingSlots;                                      // 0x05A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReplicatedLevelSequence;                           // 0x05B0(0x0018)(Net, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieScenePlayerStatus                       ReplicatedPlaybackStatus;                          // 0x05C8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicatedReversePlayback;                        // 0x05C9(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5CA[0x2];                                      // 0x05CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReplicatedPlaybackPosition;                        // 0x05CC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplicatedPlaybackRate;                            // 0x05D0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplicatedLoopCount;                               // 0x05D4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGbxLevelSequenceBoundActorSlot> BoundActors;                                       // 0x05D8(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreReplicatedPlaybackState;                    // 0x05E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x13];                                     // 0x05E9(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPendingReplicatedCutsceneSkip;                    // 0x05FC(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCutsceneSkipped;                               // 0x05FD(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FE[0x2];                                      // 0x05FE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GoToEndAndStop();
	void OnLevelSequenceFinished();
	void OnLevelSequencePause();
	void OnLevelSequencePlay();
	void OnLevelSequenceStop();
	void OnRep_ReplicatedCutsceneSkip();
	void Pause();
	void Play();
	void PlayFromStart();
	void PlayLooping(int32 NumLoops);
	void SetPlayRate(float PlayRate);
	void Stop();

	float GetPlayRate() const;
	bool IsFinished() const;
	bool IsPaused() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxLevelSequenceActor">();
	}
	static class AGbxLevelSequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxLevelSequenceActor>();
	}
};
static_assert(alignof(AGbxLevelSequenceActor) == 0x000008, "Wrong alignment on AGbxLevelSequenceActor");
static_assert(sizeof(AGbxLevelSequenceActor) == 0x000600, "Wrong size on AGbxLevelSequenceActor");
static_assert(offsetof(AGbxLevelSequenceActor, OnPlay) == 0x000550, "Member 'AGbxLevelSequenceActor::OnPlay' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, OnPause) == 0x000560, "Member 'AGbxLevelSequenceActor::OnPause' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, OnFinished) == 0x000570, "Member 'AGbxLevelSequenceActor::OnFinished' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, OnStop) == 0x000580, "Member 'AGbxLevelSequenceActor::OnStop' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, GameplayTasksComponent) == 0x000590, "Member 'AGbxLevelSequenceActor::GameplayTasksComponent' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, GbxLevelSequencePlayer) == 0x000598, "Member 'AGbxLevelSequenceActor::GbxLevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, BindingSlots) == 0x0005A0, "Member 'AGbxLevelSequenceActor::BindingSlots' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, ReplicatedLevelSequence) == 0x0005B0, "Member 'AGbxLevelSequenceActor::ReplicatedLevelSequence' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, ReplicatedPlaybackStatus) == 0x0005C8, "Member 'AGbxLevelSequenceActor::ReplicatedPlaybackStatus' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, bReplicatedReversePlayback) == 0x0005C9, "Member 'AGbxLevelSequenceActor::bReplicatedReversePlayback' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, ReplicatedPlaybackPosition) == 0x0005CC, "Member 'AGbxLevelSequenceActor::ReplicatedPlaybackPosition' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, ReplicatedPlaybackRate) == 0x0005D0, "Member 'AGbxLevelSequenceActor::ReplicatedPlaybackRate' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, ReplicatedLoopCount) == 0x0005D4, "Member 'AGbxLevelSequenceActor::ReplicatedLoopCount' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, BoundActors) == 0x0005D8, "Member 'AGbxLevelSequenceActor::BoundActors' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, bIgnoreReplicatedPlaybackState) == 0x0005E8, "Member 'AGbxLevelSequenceActor::bIgnoreReplicatedPlaybackState' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, bPendingReplicatedCutsceneSkip) == 0x0005FC, "Member 'AGbxLevelSequenceActor::bPendingReplicatedCutsceneSkip' has a wrong offset!");
static_assert(offsetof(AGbxLevelSequenceActor, bWasCutsceneSkipped) == 0x0005FD, "Member 'AGbxLevelSequenceActor::bWasCutsceneSkipped' has a wrong offset!");

// Class GbxLevelSequence.GbxLevelSequencePlayer
// 0x0018 (0x08A8 - 0x0890)
class UGbxLevelSequencePlayer final : public ULevelSequencePlayer
{
public:
	uint8                                         Pad_890[0x10];                                     // 0x0890(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AGbxLevelSequenceActor*                 GbxLevelSequenceActor;                             // 0x08A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UGbxLevelSequencePlayer* CreateGbxLevelSequencePlayer(class UObject* WorldContextObject, class ULevelSequence* LevelSequence, bool bPlay, const struct FMovieSceneSequencePlaybackSettings& Settings, class AGbxLevelSequenceActor** OutActor);

	void OnStarted();

	bool IsFinished() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxLevelSequencePlayer">();
	}
	static class UGbxLevelSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxLevelSequencePlayer>();
	}
};
static_assert(alignof(UGbxLevelSequencePlayer) == 0x000008, "Wrong alignment on UGbxLevelSequencePlayer");
static_assert(sizeof(UGbxLevelSequencePlayer) == 0x0008A8, "Wrong size on UGbxLevelSequencePlayer");
static_assert(offsetof(UGbxLevelSequencePlayer, GbxLevelSequenceActor) == 0x0008A0, "Member 'UGbxLevelSequencePlayer::GbxLevelSequenceActor' has a wrong offset!");

// Class GbxLevelSequence.GbxLevelSequenceThrottleLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxLevelSequenceThrottleLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearLimitGroup(const class FName Group);
	static void LimitSequenceActor(class AGbxLevelSequenceActor* Player, const class FName Group);
	static bool ShouldLimitSequenceGroup(const class FName InGroup);
	static void UnlimitSequenceActor(class AGbxLevelSequenceActor* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxLevelSequenceThrottleLibrary">();
	}
	static class UGbxLevelSequenceThrottleLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxLevelSequenceThrottleLibrary>();
	}
};
static_assert(alignof(UGbxLevelSequenceThrottleLibrary) == 0x000008, "Wrong alignment on UGbxLevelSequenceThrottleLibrary");
static_assert(sizeof(UGbxLevelSequenceThrottleLibrary) == 0x000028, "Wrong size on UGbxLevelSequenceThrottleLibrary");

}

