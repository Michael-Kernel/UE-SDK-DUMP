#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxSpawn

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum GbxSpawn.ESpawnAnimNotifyAction
// NumValues: 0x0003
enum class ESpawnAnimNotifyAction : uint8
{
	Start                                    = 0,
	Stop                                     = 1,
	ESpawnAnimNotifyAction_MAX               = 2,
};

// Enum GbxSpawn.EScriptedWarmup
// NumValues: 0x0004
enum class EScriptedWarmup : uint8
{
	None                                     = 0,
	FirstWave                                = 1,
	AllWaves                                 = 2,
	EScriptedWarmup_MAX                      = 3,
};

// Enum GbxSpawn.ESpawnerDrawStyle
// NumValues: 0x0005
enum class ESpawnerDrawStyle : uint8
{
	None                                     = 0,
	Wire                                     = 1,
	Solid                                    = 2,
	SolidAndWire                             = 3,
	ESpawnerDrawStyle_MAX                    = 4,
};

// Enum GbxSpawn.EScriptedWarmupState
// NumValues: 0x0004
enum class EScriptedWarmupState : uint8
{
	None                                     = 0,
	Activated                                = 1,
	Complete                                 = 2,
	EScriptedWarmupState_MAX                 = 3,
};

// Enum GbxSpawn.EEncounterAdvanceType
// NumValues: 0x0003
enum class EEncounterAdvanceType : uint8
{
	All                                      = 0,
	Any                                      = 1,
	EEncounterAdvanceType_MAX                = 2,
};

// Enum GbxSpawn.ESpawnSystemStreamStyle
// NumValues: 0x0003
enum class ESpawnSystemStreamStyle : uint8
{
	MapStartSynchronous                      = 0,
	MapStartAsynchronous                     = 1,
	ESpawnSystemStreamStyle_MAX              = 2,
};

// Enum GbxSpawn.ESpawnerType
// NumValues: 0x0005
enum class ESpawnerType : uint8
{
	None                                     = 0,
	Level                                    = 1,
	Static                                   = 2,
	Dynamic                                  = 3,
	ESpawnerType_MAX                         = 4,
};

// Enum GbxSpawn.ESpawnerActorState
// NumValues: 0x0005
enum class ESpawnerActorState : uint8
{
	Unborn                                   = 0,
	Alive                                    = 1,
	Suspended                                = 2,
	Dead                                     = 3,
	ESpawnerActorState_MAX                   = 4,
};

// Enum GbxSpawn.ESpawnPointUseType
// NumValues: 0x0005
enum class ESpawnPointUseType : uint8
{
	Self                                     = 0,
	List                                     = 1,
	ManualGroup                              = 2,
	ClusterGroup                             = 3,
	ESpawnPointUseType_MAX                   = 4,
};

// Enum GbxSpawn.ESpawnPointFilter
// NumValues: 0x0005
enum class ESpawnPointFilter : uint8
{
	Any                                      = 0,
	All                                      = 1,
	NotAny                                   = 2,
	NotAll                                   = 3,
	ESpawnPointFilter_MAX                    = 4,
};

// Enum GbxSpawn.ESpawnLimitType
// NumValues: 0x0004
enum class ESpawnLimitType : uint8
{
	None                                     = 0,
	Spawner                                  = 1,
	SpawnerGroup                             = 2,
	ESpawnLimitType_MAX                      = 3,
};

// Enum GbxSpawn.ESpawnerCritical
// NumValues: 0x0004
enum class ESpawnerCritical : uint8
{
	NotCritical                              = 0,
	AlwaysSpawn                              = 1,
	Critical                                 = 2,
	ESpawnerCritical_MAX                     = 3,
};

// Enum GbxSpawn.EIrrelevantAction
// NumValues: 0x0004
enum class EIrrelevantAction : uint8
{
	Suspend                                  = 0,
	Remove                                   = 1,
	Nothing                                  = 2,
	EIrrelevantAction_MAX                    = 3,
};

// Enum GbxSpawn.ERespawnStyle
// NumValues: 0x0004
enum class ERespawnStyle : uint8
{
	Timed                                    = 0,
	Level                                    = 1,
	Never                                    = 2,
	ERespawnStyle_MAX                        = 3,
};

// Enum GbxSpawn.ESpawnStretchType
// NumValues: 0x0005
enum class ESpawnStretchType : uint8
{
	None                                     = 0,
	StartPoint                               = 1,
	EndPoint                                 = 2,
	Dynamic                                  = 3,
	ESpawnStretchType_MAX                    = 4,
};

// ScriptStruct GbxSpawn.SpawnerActorData
// 0x00A8 (0x00A8 - 0x0000)
struct FSpawnerActorData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x48];                                       // 0x0008(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class USpawnFactory*                          Factory;                                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x40];                                      // 0x0058(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnerActorData) == 0x000008, "Wrong alignment on FSpawnerActorData");
static_assert(sizeof(FSpawnerActorData) == 0x0000A8, "Wrong size on FSpawnerActorData");
static_assert(offsetof(FSpawnerActorData, Actor) == 0x000000, "Member 'FSpawnerActorData::Actor' has a wrong offset!");
static_assert(offsetof(FSpawnerActorData, Factory) == 0x000050, "Member 'FSpawnerActorData::Factory' has a wrong offset!");
static_assert(offsetof(FSpawnerActorData, Owner) == 0x000098, "Member 'FSpawnerActorData::Owner' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnerData
// 0x0140 (0x0140 - 0x0000)
struct FSpawnerData final
{
public:
	class USpawnManager*                          Manager;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASpawner*                               Spawner;                                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpawnerComponent*                      SpawnerComp;                                       // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpawnerStyle*                          SpawnerStyle;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpawnerActorData>              Actors;                                            // 0x0070(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x48];                                      // 0x0080(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DeadActors;                                        // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USpawnDLCScript*>                DLCScripts;                                        // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x58];                                      // 0x00E8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnerData) == 0x000008, "Wrong alignment on FSpawnerData");
static_assert(sizeof(FSpawnerData) == 0x000140, "Wrong size on FSpawnerData");
static_assert(offsetof(FSpawnerData, Manager) == 0x000000, "Member 'FSpawnerData::Manager' has a wrong offset!");
static_assert(offsetof(FSpawnerData, Owner) == 0x000030, "Member 'FSpawnerData::Owner' has a wrong offset!");
static_assert(offsetof(FSpawnerData, Spawner) == 0x000038, "Member 'FSpawnerData::Spawner' has a wrong offset!");
static_assert(offsetof(FSpawnerData, SpawnerComp) == 0x000040, "Member 'FSpawnerData::SpawnerComp' has a wrong offset!");
static_assert(offsetof(FSpawnerData, SpawnerStyle) == 0x000048, "Member 'FSpawnerData::SpawnerStyle' has a wrong offset!");
static_assert(offsetof(FSpawnerData, Actors) == 0x000070, "Member 'FSpawnerData::Actors' has a wrong offset!");
static_assert(offsetof(FSpawnerData, DeadActors) == 0x0000C8, "Member 'FSpawnerData::DeadActors' has a wrong offset!");
static_assert(offsetof(FSpawnerData, DLCScripts) == 0x0000D8, "Member 'FSpawnerData::DLCScripts' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnerSoftPath
// 0x0018 (0x0018 - 0x0000)
struct FSpawnerSoftPath final
{
public:
	class FName                                   SpawnerPathName;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpawnerSubPathString;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerSoftPath) == 0x000008, "Wrong alignment on FSpawnerSoftPath");
static_assert(sizeof(FSpawnerSoftPath) == 0x000018, "Wrong size on FSpawnerSoftPath");
static_assert(offsetof(FSpawnerSoftPath, SpawnerPathName) == 0x000000, "Member 'FSpawnerSoftPath::SpawnerPathName' has a wrong offset!");
static_assert(offsetof(FSpawnerSoftPath, SpawnerSubPathString) == 0x000008, "Member 'FSpawnerSoftPath::SpawnerSubPathString' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnDLCGroupItem
// 0x0020 (0x0020 - 0x0000)
struct FSpawnDLCGroupItem final
{
public:
	TArray<struct FSpawnerSoftPath>               SpawnerSoftPaths;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USpawnOptionData*                       SpawnOptions;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysEnabledDuringEvent;                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnDLCGroupItem) == 0x000008, "Wrong alignment on FSpawnDLCGroupItem");
static_assert(sizeof(FSpawnDLCGroupItem) == 0x000020, "Wrong size on FSpawnDLCGroupItem");
static_assert(offsetof(FSpawnDLCGroupItem, SpawnerSoftPaths) == 0x000000, "Member 'FSpawnDLCGroupItem::SpawnerSoftPaths' has a wrong offset!");
static_assert(offsetof(FSpawnDLCGroupItem, SpawnOptions) == 0x000010, "Member 'FSpawnDLCGroupItem::SpawnOptions' has a wrong offset!");
static_assert(offsetof(FSpawnDLCGroupItem, bAlwaysEnabledDuringEvent) == 0x000018, "Member 'FSpawnDLCGroupItem::bAlwaysEnabledDuringEvent' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnDetails
// 0x0007 (0x0007 - 0x0000)
struct FSpawnDetails final
{
public:
	ESpawnerCritical                              Critical;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCritical;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERespawnStyle                                 RespawnStyle;                                      // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRespawnStyle;                             // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIrrelevantAction                             IrrelevantAction;                                  // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideIrrelevantAction;                         // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCritical;                                         // 0x0006(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnDetails) == 0x000001, "Wrong alignment on FSpawnDetails");
static_assert(sizeof(FSpawnDetails) == 0x000007, "Wrong size on FSpawnDetails");
static_assert(offsetof(FSpawnDetails, Critical) == 0x000000, "Member 'FSpawnDetails::Critical' has a wrong offset!");
static_assert(offsetof(FSpawnDetails, bOverrideCritical) == 0x000001, "Member 'FSpawnDetails::bOverrideCritical' has a wrong offset!");
static_assert(offsetof(FSpawnDetails, RespawnStyle) == 0x000002, "Member 'FSpawnDetails::RespawnStyle' has a wrong offset!");
static_assert(offsetof(FSpawnDetails, bOverrideRespawnStyle) == 0x000003, "Member 'FSpawnDetails::bOverrideRespawnStyle' has a wrong offset!");
static_assert(offsetof(FSpawnDetails, IrrelevantAction) == 0x000004, "Member 'FSpawnDetails::IrrelevantAction' has a wrong offset!");
static_assert(offsetof(FSpawnDetails, bOverrideIrrelevantAction) == 0x000005, "Member 'FSpawnDetails::bOverrideIrrelevantAction' has a wrong offset!");
static_assert(offsetof(FSpawnDetails, bCritical) == 0x000006, "Member 'FSpawnDetails::bCritical' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnManagerAsyncRequest
// 0x0068 (0x0068 - 0x0000)
struct FSpawnManagerAsyncRequest
{
public:
	class AActor*                                 Context;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnFactory*                          SpawnFactory;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnOptionData*                       SpawnOptions;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnPointComponent*                   SpawnPointComponent;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnerComponent*                      SpawnerComponent;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* Actor)>          Spawned;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* Actor)>          Failed;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpawnDetails                          SpawnDetails;                                      // 0x0060(0x0007)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnManagerAsyncRequest) == 0x000008, "Wrong alignment on FSpawnManagerAsyncRequest");
static_assert(sizeof(FSpawnManagerAsyncRequest) == 0x000068, "Wrong size on FSpawnManagerAsyncRequest");
static_assert(offsetof(FSpawnManagerAsyncRequest, Context) == 0x000000, "Member 'FSpawnManagerAsyncRequest::Context' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, SpawnFactory) == 0x000008, "Member 'FSpawnManagerAsyncRequest::SpawnFactory' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, SpawnOptions) == 0x000010, "Member 'FSpawnManagerAsyncRequest::SpawnOptions' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, SpawnPointComponent) == 0x000018, "Member 'FSpawnManagerAsyncRequest::SpawnPointComponent' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, SpawnerComponent) == 0x000020, "Member 'FSpawnManagerAsyncRequest::SpawnerComponent' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, Spawned) == 0x000028, "Member 'FSpawnManagerAsyncRequest::Spawned' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, Failed) == 0x000038, "Member 'FSpawnManagerAsyncRequest::Failed' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, Owner) == 0x000058, "Member 'FSpawnManagerAsyncRequest::Owner' has a wrong offset!");
static_assert(offsetof(FSpawnManagerAsyncRequest, SpawnDetails) == 0x000060, "Member 'FSpawnManagerAsyncRequest::SpawnDetails' has a wrong offset!");

// ScriptStruct GbxSpawn.ActionState_SpawnAnim
// 0x0000 (0x04F8 - 0x04F8)
struct FActionState_SpawnAnim : public FActionState_Anim
{
};
static_assert(alignof(FActionState_SpawnAnim) == 0x000008, "Wrong alignment on FActionState_SpawnAnim");
static_assert(sizeof(FActionState_SpawnAnim) == 0x0004F8, "Wrong size on FActionState_SpawnAnim");

// ScriptStruct GbxSpawn.SpawnDLCItem
// 0x0060 (0x0060 - 0x0000)
struct FSpawnDLCItem final
{
public:
	TSoftObjectPtr<class USpawnDLCData>           Data;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeInitializationData           IsEnabled;                                         // 0x0028(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnDLCItem) == 0x000008, "Wrong alignment on FSpawnDLCItem");
static_assert(sizeof(FSpawnDLCItem) == 0x000060, "Wrong size on FSpawnDLCItem");
static_assert(offsetof(FSpawnDLCItem, Data) == 0x000000, "Member 'FSpawnDLCItem::Data' has a wrong offset!");
static_assert(offsetof(FSpawnDLCItem, IsEnabled) == 0x000028, "Member 'FSpawnDLCItem::IsEnabled' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnDLCScriptGroup
// 0x00C0 (0x00C0 - 0x0000)
struct FSpawnDLCScriptGroup final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxParam                              MaximumScriptedSpawnersPerGroupOverride;           // 0x0010(0x0080)(Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSpawnerSoftPath>               SpawnerSoftPaths;                                  // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAlwaysEnabledDuringEvent;                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x1F];                                      // 0x00A1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnDLCScriptGroup) == 0x000008, "Wrong alignment on FSpawnDLCScriptGroup");
static_assert(sizeof(FSpawnDLCScriptGroup) == 0x0000C0, "Wrong size on FSpawnDLCScriptGroup");
static_assert(offsetof(FSpawnDLCScriptGroup, Description) == 0x000000, "Member 'FSpawnDLCScriptGroup::Description' has a wrong offset!");
static_assert(offsetof(FSpawnDLCScriptGroup, MaximumScriptedSpawnersPerGroupOverride) == 0x000010, "Member 'FSpawnDLCScriptGroup::MaximumScriptedSpawnersPerGroupOverride' has a wrong offset!");
static_assert(offsetof(FSpawnDLCScriptGroup, SpawnerSoftPaths) == 0x000090, "Member 'FSpawnDLCScriptGroup::SpawnerSoftPaths' has a wrong offset!");
static_assert(offsetof(FSpawnDLCScriptGroup, bAlwaysEnabledDuringEvent) == 0x0000A0, "Member 'FSpawnDLCScriptGroup::bAlwaysEnabledDuringEvent' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnDLCGroup
// 0x0020 (0x0020 - 0x0000)
struct FSpawnDLCGroup final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpawnDLCGroupItem>             Replacements;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnDLCGroup) == 0x000008, "Wrong alignment on FSpawnDLCGroup");
static_assert(sizeof(FSpawnDLCGroup) == 0x000020, "Wrong size on FSpawnDLCGroup");
static_assert(offsetof(FSpawnDLCGroup, Description) == 0x000000, "Member 'FSpawnDLCGroup::Description' has a wrong offset!");
static_assert(offsetof(FSpawnDLCGroup, Replacements) == 0x000010, "Member 'FSpawnDLCGroup::Replacements' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnPointGroup
// 0x0030 (0x0030 - 0x0000)
struct FSpawnPointGroup final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TerritoryActorForThisGroup;                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASpawnPoint*>                    SpawnPoints;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRandomize;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnPointGroup) == 0x000008, "Wrong alignment on FSpawnPointGroup");
static_assert(sizeof(FSpawnPointGroup) == 0x000030, "Wrong size on FSpawnPointGroup");
static_assert(offsetof(FSpawnPointGroup, Name) == 0x000000, "Member 'FSpawnPointGroup::Name' has a wrong offset!");
static_assert(offsetof(FSpawnPointGroup, Color) == 0x000008, "Member 'FSpawnPointGroup::Color' has a wrong offset!");
static_assert(offsetof(FSpawnPointGroup, TerritoryActorForThisGroup) == 0x000010, "Member 'FSpawnPointGroup::TerritoryActorForThisGroup' has a wrong offset!");
static_assert(offsetof(FSpawnPointGroup, SpawnPoints) == 0x000018, "Member 'FSpawnPointGroup::SpawnPoints' has a wrong offset!");
static_assert(offsetof(FSpawnPointGroup, bRandomize) == 0x000028, "Member 'FSpawnPointGroup::bRandomize' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnerLinkData
// 0x0028 (0x0028 - 0x0000)
struct FSpawnerLinkData final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASpawner*                               Spawner;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeamComponent*                         TeamComp;                                          // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnerComponent*                      SpawnerComp;                                       // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnerLinkComponent*                  LinkComp;                                          // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerLinkData) == 0x000008, "Wrong alignment on FSpawnerLinkData");
static_assert(sizeof(FSpawnerLinkData) == 0x000028, "Wrong size on FSpawnerLinkData");
static_assert(offsetof(FSpawnerLinkData, Owner) == 0x000000, "Member 'FSpawnerLinkData::Owner' has a wrong offset!");
static_assert(offsetof(FSpawnerLinkData, Spawner) == 0x000008, "Member 'FSpawnerLinkData::Spawner' has a wrong offset!");
static_assert(offsetof(FSpawnerLinkData, TeamComp) == 0x000010, "Member 'FSpawnerLinkData::TeamComp' has a wrong offset!");
static_assert(offsetof(FSpawnerLinkData, SpawnerComp) == 0x000018, "Member 'FSpawnerLinkData::SpawnerComp' has a wrong offset!");
static_assert(offsetof(FSpawnerLinkData, LinkComp) == 0x000020, "Member 'FSpawnerLinkData::LinkComp' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnBunchListItem
// 0x0090 (0x0090 - 0x0000)
struct FSpawnBunchListItem final
{
public:
	class USpawnOptionData*                       SpawnOptions;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxParam                              NumActorsParam;                                    // 0x0008(0x0080)(Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   SpawnPointGroupName;                               // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnBunchListItem) == 0x000008, "Wrong alignment on FSpawnBunchListItem");
static_assert(sizeof(FSpawnBunchListItem) == 0x000090, "Wrong size on FSpawnBunchListItem");
static_assert(offsetof(FSpawnBunchListItem, SpawnOptions) == 0x000000, "Member 'FSpawnBunchListItem::SpawnOptions' has a wrong offset!");
static_assert(offsetof(FSpawnBunchListItem, NumActorsParam) == 0x000008, "Member 'FSpawnBunchListItem::NumActorsParam' has a wrong offset!");
static_assert(offsetof(FSpawnBunchListItem, SpawnPointGroupName) == 0x000088, "Member 'FSpawnBunchListItem::SpawnPointGroupName' has a wrong offset!");

// ScriptStruct GbxSpawn.EncounterAdvanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterAdvanceData final
{
public:
	EEncounterAdvanceType                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTimer;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePercent;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterAdvanceData) == 0x000004, "Wrong alignment on FEncounterAdvanceData");
static_assert(sizeof(FEncounterAdvanceData) == 0x000010, "Wrong size on FEncounterAdvanceData");
static_assert(offsetof(FEncounterAdvanceData, Type) == 0x000000, "Member 'FEncounterAdvanceData::Type' has a wrong offset!");
static_assert(offsetof(FEncounterAdvanceData, bUseTimer) == 0x000001, "Member 'FEncounterAdvanceData::bUseTimer' has a wrong offset!");
static_assert(offsetof(FEncounterAdvanceData, Timer) == 0x000004, "Member 'FEncounterAdvanceData::Timer' has a wrong offset!");
static_assert(offsetof(FEncounterAdvanceData, bUsePercent) == 0x000008, "Member 'FEncounterAdvanceData::bUsePercent' has a wrong offset!");
static_assert(offsetof(FEncounterAdvanceData, Percent) == 0x00000C, "Member 'FEncounterAdvanceData::Percent' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnLimitData
// 0x0158 (0x0158 - 0x0000)
struct FSpawnLimitData final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DisallowedTypes;                                   // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	ESpawnPointFilter                             TagFilterType;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxParam                              TotalLimit;                                        // 0x0048(0x0080)(Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bLimitTotal;                                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxParam                              AliveLimit;                                        // 0x00D0(0x0080)(Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bLimitAlive;                                       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   TagMatchType;                                      // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnLimitData) == 0x000008, "Wrong alignment on FSpawnLimitData");
static_assert(sizeof(FSpawnLimitData) == 0x000158, "Wrong size on FSpawnLimitData");
static_assert(offsetof(FSpawnLimitData, Tags) == 0x000000, "Member 'FSpawnLimitData::Tags' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, DisallowedTypes) == 0x000020, "Member 'FSpawnLimitData::DisallowedTypes' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, TagFilterType) == 0x000040, "Member 'FSpawnLimitData::TagFilterType' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, TotalLimit) == 0x000048, "Member 'FSpawnLimitData::TotalLimit' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, bLimitTotal) == 0x0000C8, "Member 'FSpawnLimitData::bLimitTotal' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, AliveLimit) == 0x0000D0, "Member 'FSpawnLimitData::AliveLimit' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, bLimitAlive) == 0x000150, "Member 'FSpawnLimitData::bLimitAlive' has a wrong offset!");
static_assert(offsetof(FSpawnLimitData, TagMatchType) == 0x000151, "Member 'FSpawnLimitData::TagMatchType' has a wrong offset!");

// ScriptStruct GbxSpawn.EncounterWave
// 0x0038 (0x0038 - 0x0000)
struct FEncounterWave final
{
public:
	class USpawnerStyle*                          SpawnerStyle;                                      // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterAdvanceData                  Advancement;                                       // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WarmupTimer;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpawnLimitData>                Limits;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   SpawnPointGroupName;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterWave) == 0x000008, "Wrong alignment on FEncounterWave");
static_assert(sizeof(FEncounterWave) == 0x000038, "Wrong size on FEncounterWave");
static_assert(offsetof(FEncounterWave, SpawnerStyle) == 0x000000, "Member 'FEncounterWave::SpawnerStyle' has a wrong offset!");
static_assert(offsetof(FEncounterWave, Advancement) == 0x000008, "Member 'FEncounterWave::Advancement' has a wrong offset!");
static_assert(offsetof(FEncounterWave, WarmupTimer) == 0x000018, "Member 'FEncounterWave::WarmupTimer' has a wrong offset!");
static_assert(offsetof(FEncounterWave, Limits) == 0x000020, "Member 'FEncounterWave::Limits' has a wrong offset!");
static_assert(offsetof(FEncounterWave, SpawnPointGroupName) == 0x000030, "Member 'FEncounterWave::SpawnPointGroupName' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnOptionDataSoftPath
// 0x0018 (0x0018 - 0x0000)
struct FSpawnOptionDataSoftPath final
{
public:
	class FName                                   SpawnOptionDataPathName;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpawnOptionDataSubPathString;                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnOptionDataSoftPath) == 0x000008, "Wrong alignment on FSpawnOptionDataSoftPath");
static_assert(sizeof(FSpawnOptionDataSoftPath) == 0x000018, "Wrong size on FSpawnOptionDataSoftPath");
static_assert(offsetof(FSpawnOptionDataSoftPath, SpawnOptionDataPathName) == 0x000000, "Member 'FSpawnOptionDataSoftPath::SpawnOptionDataPathName' has a wrong offset!");
static_assert(offsetof(FSpawnOptionDataSoftPath, SpawnOptionDataSubPathString) == 0x000008, "Member 'FSpawnOptionDataSoftPath::SpawnOptionDataSubPathString' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnManagerAsyncRequestEntry
// 0x0008 (0x0070 - 0x0068)
struct FSpawnManagerAsyncRequestEntry final : public FSpawnManagerAsyncRequest
{
public:
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnManagerAsyncRequestEntry) == 0x000008, "Wrong alignment on FSpawnManagerAsyncRequestEntry");
static_assert(sizeof(FSpawnManagerAsyncRequestEntry) == 0x000070, "Wrong size on FSpawnManagerAsyncRequestEntry");

// ScriptStruct GbxSpawn.SpawnPreviewState
// 0x0018 (0x00F0 - 0x00D8)
struct FSpawnPreviewState final : public FPreviewState
{
public:
	class USpawnPointComponent*                   SpawnPointComponent;                               // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USpawnFactory*>                  PreviewFactories;                                  // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSpawnPreviewState) == 0x000008, "Wrong alignment on FSpawnPreviewState");
static_assert(sizeof(FSpawnPreviewState) == 0x0000F0, "Wrong size on FSpawnPreviewState");
static_assert(offsetof(FSpawnPreviewState, SpawnPointComponent) == 0x0000D8, "Member 'FSpawnPreviewState::SpawnPointComponent' has a wrong offset!");
static_assert(offsetof(FSpawnPreviewState, PreviewFactories) == 0x0000E0, "Member 'FSpawnPreviewState::PreviewFactories' has a wrong offset!");

// ScriptStruct GbxSpawn.SpawnFactoryData
// 0x0128 (0x0128 - 0x0000)
struct FSpawnFactoryData final
{
public:
	class USpawnFactory*                          Factory;                                           // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxParam                              WeightParam;                                       // 0x0008(0x0080)(Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FString                                 Probability;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnLimitType                               AliveLimitType;                                    // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxParam                              AliveLimitParam;                                   // 0x00A0(0x0080)(Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         AliveLimit;                                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnFactoryData) == 0x000008, "Wrong alignment on FSpawnFactoryData");
static_assert(sizeof(FSpawnFactoryData) == 0x000128, "Wrong size on FSpawnFactoryData");
static_assert(offsetof(FSpawnFactoryData, Factory) == 0x000000, "Member 'FSpawnFactoryData::Factory' has a wrong offset!");
static_assert(offsetof(FSpawnFactoryData, WeightParam) == 0x000008, "Member 'FSpawnFactoryData::WeightParam' has a wrong offset!");
static_assert(offsetof(FSpawnFactoryData, Probability) == 0x000088, "Member 'FSpawnFactoryData::Probability' has a wrong offset!");
static_assert(offsetof(FSpawnFactoryData, AliveLimitType) == 0x000098, "Member 'FSpawnFactoryData::AliveLimitType' has a wrong offset!");
static_assert(offsetof(FSpawnFactoryData, AliveLimitParam) == 0x0000A0, "Member 'FSpawnFactoryData::AliveLimitParam' has a wrong offset!");
static_assert(offsetof(FSpawnFactoryData, AliveLimit) == 0x000120, "Member 'FSpawnFactoryData::AliveLimit' has a wrong offset!");

// ScriptStruct GbxSpawn.PointWidget
// 0x0030 (0x0030 - 0x0000)
struct FPointWidget final
{
public:
	struct FTransform                             Point;                                             // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPointWidget) == 0x000010, "Wrong alignment on FPointWidget");
static_assert(sizeof(FPointWidget) == 0x000030, "Wrong size on FPointWidget");
static_assert(offsetof(FPointWidget, Point) == 0x000000, "Member 'FPointWidget::Point' has a wrong offset!");

}

