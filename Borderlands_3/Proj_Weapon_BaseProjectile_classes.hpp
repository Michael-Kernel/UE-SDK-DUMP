#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_Weapon_BaseProjectile

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C
// 0x00B0 (0x0790 - 0x06E0)
class AProj_Weapon_BaseProjectile_C : public AOakProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E0(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   GrenadeMesh;                                       // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereCollision;                                   // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxProjectileMovementComponent*        GbxProjectileMovement;                             // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FuseTime;                                          // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     DamageRadius;                                      // 0x0708(0x000C)(Edit, BlueprintVisible, Net, HasGetValueTypeHash)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DamageType;                                        // 0x0718(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DamageSource;                                      // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactForce;                                       // 0x0728(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72C[0x4];                                      // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0730(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 DamageCauser;                                      // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageModifierComponent*               Damage_Modifier;                                   // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          GbxCharacter;                                      // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionImpactForce;                              // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UExplosionData*                         ExplosionDataOverride;                             // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImpactData*                            ImpactDataOverride;                                // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MyDamageData;                                      // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OriginOverride;                                    // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_ElementalTrail;                                 // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_CanDisable;                                     // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ProjectileDetached;                                // 0x0789(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Proj_Weapon_BaseProjectile(int32 EntryPoint);
	void Fallback();
	void OnHitWorld(const struct FHitResult& Hit);
	void Actor_Died();
	void Destructible_Fractured(const struct FVector& HitPoint, const struct FVector& HitDetection);
	void ReceiveBeginPlay();
	void OnExplode();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void UserConstructionScript();
	void WeaponProjectileExplode();
	void StickToActor(const struct FHitResult& HitResult, bool* AttachedToActor);
	void StickToWorld(const struct FHitResult& HitInfo);
	void CallExplode();
	void AddElementalTrail(class UClass* Collection, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& NewScale);
	void StickToTarget(const struct FHitResult& Hit, bool* Attached, bool* StuckToActor);
	void ProjectileDetonate(bool* Success);
	void ProjectileArm(bool* Success);
	void ProjectileDisarm(bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_Weapon_BaseProjectile_C">();
	}
	static class AProj_Weapon_BaseProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_Weapon_BaseProjectile_C>();
	}
};
static_assert(alignof(AProj_Weapon_BaseProjectile_C) == 0x000008, "Wrong alignment on AProj_Weapon_BaseProjectile_C");
static_assert(sizeof(AProj_Weapon_BaseProjectile_C) == 0x000790, "Wrong size on AProj_Weapon_BaseProjectile_C");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, UberGraphFrame) == 0x0006E0, "Member 'AProj_Weapon_BaseProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, GrenadeMesh) == 0x0006E8, "Member 'AProj_Weapon_BaseProjectile_C::GrenadeMesh' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, SphereCollision) == 0x0006F0, "Member 'AProj_Weapon_BaseProjectile_C::SphereCollision' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, GbxProjectileMovement) == 0x0006F8, "Member 'AProj_Weapon_BaseProjectile_C::GbxProjectileMovement' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, FuseTime) == 0x000700, "Member 'AProj_Weapon_BaseProjectile_C::FuseTime' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, Damage) == 0x000704, "Member 'AProj_Weapon_BaseProjectile_C::Damage' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, DamageRadius) == 0x000708, "Member 'AProj_Weapon_BaseProjectile_C::DamageRadius' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, DamageType) == 0x000718, "Member 'AProj_Weapon_BaseProjectile_C::DamageType' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, DamageSource) == 0x000720, "Member 'AProj_Weapon_BaseProjectile_C::DamageSource' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, ImpactForce) == 0x000728, "Member 'AProj_Weapon_BaseProjectile_C::ImpactForce' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, IgnoredActors) == 0x000730, "Member 'AProj_Weapon_BaseProjectile_C::IgnoredActors' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, DamageCauser) == 0x000740, "Member 'AProj_Weapon_BaseProjectile_C::DamageCauser' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, Damage_Modifier) == 0x000748, "Member 'AProj_Weapon_BaseProjectile_C::Damage_Modifier' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, GbxCharacter) == 0x000750, "Member 'AProj_Weapon_BaseProjectile_C::GbxCharacter' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, ExplosionImpactForce) == 0x000758, "Member 'AProj_Weapon_BaseProjectile_C::ExplosionImpactForce' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, ExplosionDataOverride) == 0x000760, "Member 'AProj_Weapon_BaseProjectile_C::ExplosionDataOverride' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, ImpactDataOverride) == 0x000768, "Member 'AProj_Weapon_BaseProjectile_C::ImpactDataOverride' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, MyDamageData) == 0x000770, "Member 'AProj_Weapon_BaseProjectile_C::MyDamageData' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, OriginOverride) == 0x000778, "Member 'AProj_Weapon_BaseProjectile_C::OriginOverride' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, FX_ElementalTrail) == 0x000780, "Member 'AProj_Weapon_BaseProjectile_C::FX_ElementalTrail' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, AI_CanDisable) == 0x000788, "Member 'AProj_Weapon_BaseProjectile_C::AI_CanDisable' has a wrong offset!");
static_assert(offsetof(AProj_Weapon_BaseProjectile_C, ProjectileDetached) == 0x000789, "Member 'AProj_Weapon_BaseProjectile_C::ProjectileDetached' has a wrong offset!");

}

