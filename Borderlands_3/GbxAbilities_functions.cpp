#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAbilities

#include "Basic.hpp"

#include "GbxAbilities_classes.hpp"
#include "GbxAbilities_parameters.hpp"


namespace SDK
{

// Function GbxAbilities.GbxAbility.CalculateAbilityState
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EGbxAbilityState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGbxAbilityState UGbxAbility::CalculateAbilityState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "CalculateAbilityState");

	Params::GbxAbility_CalculateAbilityState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbility.Client_Deactivate
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UGbxAbility::Client_Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "Client_Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnActivated
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnDeactivated
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnDeactivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnForcedRefresh
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnForcedRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnForcedRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnPaused
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnPaused");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnRegistered
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnRegistered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnRegistered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnRep_AbilityState
// (Final, Native, Private)

void UGbxAbility::OnRep_AbilityState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnRep_AbilityState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnRep_Manager
// (Final, Native, Private)

void UGbxAbility::OnRep_Manager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnRep_Manager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnResumed
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnResumed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.OnUnregistered
// (Native, Event, Protected, BlueprintEvent)

void UGbxAbility::OnUnregistered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "OnUnregistered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAbilities.GbxAbility.GetAbilityOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxAbility::GetAbilityOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "GetAbilityOwner");

	Params::GbxAbility_GetAbilityOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbility.IsReplicated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAbility::IsReplicated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbility", "IsReplicated");

	Params::GbxAbility_IsReplicated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbilityManagerComponent.AddAbility
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilitySpec                  Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxAbility*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAbility* UGbxAbilityManagerComponent::AddAbility(const struct FGbxAbilitySpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbilityManagerComponent", "AddAbility");

	Params::GbxAbilityManagerComponent_AddAbility Parms{};

	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbilityManagerComponent.RemoveAbility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxAbility>          AbilityClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAbilityManagerComponent::RemoveAbility(TSubclassOf<class UGbxAbility> AbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbilityManagerComponent", "RemoveAbility");

	Params::GbxAbilityManagerComponent_RemoveAbility Parms{};

	Parms.AbilityClass = AbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbilityManagerComponent.FindAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxAbility>          AbilityClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAbility*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxAbility* UGbxAbilityManagerComponent::FindAbility(TSubclassOf<class UGbxAbility> AbilityClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbilityManagerComponent", "FindAbility");

	Params::GbxAbilityManagerComponent_FindAbility Parms{};

	Parms.AbilityClass = AbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbilityManagerComponent.HasAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxAbility>          AbilityClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAbilityManagerComponent::HasAbility(TSubclassOf<class UGbxAbility> AbilityClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxAbilityManagerComponent", "HasAbility");

	Params::GbxAbilityManagerComponent_HasAbility Parms{};

	Parms.AbilityClass = AbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.RegisterAbilityDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilityResourceController_ScriptDelegateController                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxAbilityResourceSpec_ScriptDelegateSpec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAbilityResourceControllerBlueprintFunctionLibrary::RegisterAbilityDelegate(struct FGbxAbilityResourceController_ScriptDelegate& Controller, const struct FGbxAbilityResourceSpec_ScriptDelegate& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAbilityResourceControllerBlueprintFunctionLibrary", "RegisterAbilityDelegate");

	Params::GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterAbilityDelegate Parms{};

	Parms.Controller = std::move(Controller);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);
}


// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.RegisterConditionalDamageModifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilityResourceController_ConditionalDamageModifierController                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxAbilityResourceSpec_ConditionalDamageModifierSpec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxAbilityResourceControllerBlueprintFunctionLibrary::RegisterConditionalDamageModifier(struct FGbxAbilityResourceController_ConditionalDamageModifier& Controller, const struct FGbxAbilityResourceSpec_ConditionalDamageModifier& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAbilityResourceControllerBlueprintFunctionLibrary", "RegisterConditionalDamageModifier");

	Params::GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterConditionalDamageModifier Parms{};

	Parms.Controller = std::move(Controller);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);
}


// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.RegisterResourcePoolDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilityResourceController_ResourcePoolDelegateController                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxAbilityResourceSpec_ResourcePoolDelegateSpec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxAbilityResourceControllerBlueprintFunctionLibrary::RegisterResourcePoolDelegate(struct FGbxAbilityResourceController_ResourcePoolDelegate& Controller, const struct FGbxAbilityResourceSpec_ResourcePoolDelegate& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAbilityResourceControllerBlueprintFunctionLibrary", "RegisterResourcePoolDelegate");

	Params::GbxAbilityResourceControllerBlueprintFunctionLibrary_RegisterResourcePoolDelegate Parms{};

	Parms.Controller = std::move(Controller);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);
}


// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.UnregisterAbilityDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilityResourceController_ScriptDelegateController                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxAbilityResourceSpec_ScriptDelegateSpec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAbilityResourceControllerBlueprintFunctionLibrary::UnregisterAbilityDelegate(struct FGbxAbilityResourceController_ScriptDelegate& Controller, const struct FGbxAbilityResourceSpec_ScriptDelegate& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAbilityResourceControllerBlueprintFunctionLibrary", "UnregisterAbilityDelegate");

	Params::GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterAbilityDelegate Parms{};

	Parms.Controller = std::move(Controller);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);
}


// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.UnregisterConditionalDamageModifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilityResourceController_ConditionalDamageModifierController                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxAbilityResourceSpec_ConditionalDamageModifierSpec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxAbilityResourceControllerBlueprintFunctionLibrary::UnregisterConditionalDamageModifier(struct FGbxAbilityResourceController_ConditionalDamageModifier& Controller, const struct FGbxAbilityResourceSpec_ConditionalDamageModifier& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAbilityResourceControllerBlueprintFunctionLibrary", "UnregisterConditionalDamageModifier");

	Params::GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterConditionalDamageModifier Parms{};

	Parms.Controller = std::move(Controller);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);
}


// Function GbxAbilities.GbxAbilityResourceControllerBlueprintFunctionLibrary.UnregisterResourcePoolDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAbilityResourceController_ResourcePoolDelegateController                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxAbilityResourceSpec_ResourcePoolDelegateSpec                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxAbilityResourceControllerBlueprintFunctionLibrary::UnregisterResourcePoolDelegate(struct FGbxAbilityResourceController_ResourcePoolDelegate& Controller, const struct FGbxAbilityResourceSpec_ResourcePoolDelegate& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAbilityResourceControllerBlueprintFunctionLibrary", "UnregisterResourcePoolDelegate");

	Params::GbxAbilityResourceControllerBlueprintFunctionLibrary_UnregisterResourcePoolDelegate Parms{};

	Parms.Controller = std::move(Controller);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);
}

}

