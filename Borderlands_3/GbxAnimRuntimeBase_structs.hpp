#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAnimRuntimeBase

#include "Basic.hpp"

#include "GbxRuntime_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum GbxAnimRuntimeBase.EGbxLookAxisOption
// NumValues: 0x0007
enum class EGbxLookAxisOption : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	X_Neg                                    = 3,
	Y_Neg                                    = 4,
	Z_Neg                                    = 5,
	EGbxLookAxisOption_MAX                   = 6,
};

// ScriptStruct GbxAnimRuntimeBase.GbxAnimNode_LegIK
// 0x0740 (0x08B0 - 0x0170)
struct alignas(0x10) FGbxAnimNode_LegIK final : public FAnimNode_LegIK
{
public:
	float                                         FootIKTraceUpScale;                                // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKTraceDownScale;                              // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKOffsetInterpSpeed;                           // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FootIKTargetOffset;                                // 0x017C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FootIKLODThreshold;                                // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScreenSizeSelection                   FootIkTraceScreenSizeThreshold;                    // 0x0190(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseFootIkTraceScreenSizeThreshold;                // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x62F];                                    // 0x01A9(0x062F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNumericRange                          MeshOffsetCharacterSpeedRange;                     // 0x07D8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MeshIKOffsetInterpSpeed;                           // 0x07E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldLimitFootDistanceToMeshOffset;              // 0x07E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E5[0x27];                                     // 0x07E5(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlopeAdaptation;                                   // 0x080C(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_818[0x10];                                     // 0x0818(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         SlopeAdaptationBone;                               // 0x0828(0x0018)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         MaxSlopeAngle;                                     // 0x0840(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeNormalMinInterpSpeed;                         // 0x0844(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeNormalMaxInterpSpeed;                         // 0x0848(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNumericRange                          SlopeNormalCharacterSpeedRange;                    // 0x084C(0x0008)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_854[0x4C];                                     // 0x0854(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVelocity;                                       // 0x08A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxVelocity;                                       // 0x08A4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_LegIK) == 0x000010, "Wrong alignment on FGbxAnimNode_LegIK");
static_assert(sizeof(FGbxAnimNode_LegIK) == 0x0008B0, "Wrong size on FGbxAnimNode_LegIK");
static_assert(offsetof(FGbxAnimNode_LegIK, FootIKTraceUpScale) == 0x000170, "Member 'FGbxAnimNode_LegIK::FootIKTraceUpScale' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, FootIKTraceDownScale) == 0x000174, "Member 'FGbxAnimNode_LegIK::FootIKTraceDownScale' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, FootIKOffsetInterpSpeed) == 0x000178, "Member 'FGbxAnimNode_LegIK::FootIKOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, FootIKTargetOffset) == 0x00017C, "Member 'FGbxAnimNode_LegIK::FootIKTargetOffset' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, FootIKLODThreshold) == 0x000188, "Member 'FGbxAnimNode_LegIK::FootIKLODThreshold' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, FootIkTraceScreenSizeThreshold) == 0x000190, "Member 'FGbxAnimNode_LegIK::FootIkTraceScreenSizeThreshold' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, bUseFootIkTraceScreenSizeThreshold) == 0x0001A8, "Member 'FGbxAnimNode_LegIK::bUseFootIkTraceScreenSizeThreshold' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, MeshOffsetCharacterSpeedRange) == 0x0007D8, "Member 'FGbxAnimNode_LegIK::MeshOffsetCharacterSpeedRange' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, MeshIKOffsetInterpSpeed) == 0x0007E0, "Member 'FGbxAnimNode_LegIK::MeshIKOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, bShouldLimitFootDistanceToMeshOffset) == 0x0007E4, "Member 'FGbxAnimNode_LegIK::bShouldLimitFootDistanceToMeshOffset' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, SlopeAdaptation) == 0x00080C, "Member 'FGbxAnimNode_LegIK::SlopeAdaptation' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, SlopeAdaptationBone) == 0x000828, "Member 'FGbxAnimNode_LegIK::SlopeAdaptationBone' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, MaxSlopeAngle) == 0x000840, "Member 'FGbxAnimNode_LegIK::MaxSlopeAngle' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, SlopeNormalMinInterpSpeed) == 0x000844, "Member 'FGbxAnimNode_LegIK::SlopeNormalMinInterpSpeed' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, SlopeNormalMaxInterpSpeed) == 0x000848, "Member 'FGbxAnimNode_LegIK::SlopeNormalMaxInterpSpeed' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, SlopeNormalCharacterSpeedRange) == 0x00084C, "Member 'FGbxAnimNode_LegIK::SlopeNormalCharacterSpeedRange' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, MinVelocity) == 0x0008A0, "Member 'FGbxAnimNode_LegIK::MinVelocity' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LegIK, MaxVelocity) == 0x0008A4, "Member 'FGbxAnimNode_LegIK::MaxVelocity' has a wrong offset!");

// ScriptStruct GbxAnimRuntimeBase.BoneBlendParams
// 0x0050 (0x0050 - 0x0000)
struct FBoneBlendParams final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawWeight;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchWeight;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNumericRange                          YawClamp;                                          // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNumericRange                          PitchClamp;                                        // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0034(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseRotationOffset;                                // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtClamp;                                       // 0x0044(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxLookAxisOption                            LookAxis;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGbxLookAxisOption                            UpAxis;                                            // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoneBlendParams) == 0x000008, "Wrong alignment on FBoneBlendParams");
static_assert(sizeof(FBoneBlendParams) == 0x000050, "Wrong size on FBoneBlendParams");
static_assert(offsetof(FBoneBlendParams, Bone) == 0x000000, "Member 'FBoneBlendParams::Bone' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, Weight) == 0x000018, "Member 'FBoneBlendParams::Weight' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, YawWeight) == 0x00001C, "Member 'FBoneBlendParams::YawWeight' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, PitchWeight) == 0x000020, "Member 'FBoneBlendParams::PitchWeight' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, YawClamp) == 0x000024, "Member 'FBoneBlendParams::YawClamp' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, PitchClamp) == 0x00002C, "Member 'FBoneBlendParams::PitchClamp' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, RotationOffset) == 0x000034, "Member 'FBoneBlendParams::RotationOffset' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, bUseRotationOffset) == 0x000040, "Member 'FBoneBlendParams::bUseRotationOffset' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, LookAtClamp) == 0x000044, "Member 'FBoneBlendParams::LookAtClamp' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, LookAxis) == 0x000048, "Member 'FBoneBlendParams::LookAxis' has a wrong offset!");
static_assert(offsetof(FBoneBlendParams, UpAxis) == 0x000049, "Member 'FBoneBlendParams::UpAxis' has a wrong offset!");

// ScriptStruct GbxAnimRuntimeBase.GbxAnimNode_LookAt
// 0x0190 (0x02D0 - 0x0140)
struct alignas(0x10) FGbxAnimNode_LookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0140(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ParentBoneToModify;                                // 0x0158(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EGbxLookAxisOption                            ParentLookAxis;                                    // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneBlendParams>               BonesToModify;                                     // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneBlendParams>               EyeBonesToModify;                                  // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                HeadLookAtLocation;                                // 0x0198(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EyeLookAtLocation;                                 // 0x01A4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadLookPercentage;                                // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebug;                                      // 0x01B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEyeMovement;                                   // 0x01B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6[0x2];                                      // 0x01B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               EyeShiftMin;                                       // 0x01B8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               EyeShiftMax;                                       // 0x01C4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               EyeGlanceMin;                                      // 0x01D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               EyeGlanceMax;                                      // 0x01DC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EyeFocusTimeMin;                                   // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeFocusTimeMax;                                   // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeGlanceTimeMin;                                  // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeGlanceTimeMax;                                  // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeShiftTimeMin;                                   // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeShiftTimeMax;                                   // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EyeLODThreshold;                                   // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScreenSizeSelection                   EyeScreenSizeThreshold;                            // 0x0208(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseEyeScreenSizeThreshold;                        // 0x0220(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              ReferencePoseLink;                                 // 0x0228(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_240[0x90];                                     // 0x0240(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxAnimNode_LookAt) == 0x000010, "Wrong alignment on FGbxAnimNode_LookAt");
static_assert(sizeof(FGbxAnimNode_LookAt) == 0x0002D0, "Wrong size on FGbxAnimNode_LookAt");
static_assert(offsetof(FGbxAnimNode_LookAt, BoneToModify) == 0x000140, "Member 'FGbxAnimNode_LookAt::BoneToModify' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, ParentBoneToModify) == 0x000158, "Member 'FGbxAnimNode_LookAt::ParentBoneToModify' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, ParentLookAxis) == 0x000170, "Member 'FGbxAnimNode_LookAt::ParentLookAxis' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, BonesToModify) == 0x000178, "Member 'FGbxAnimNode_LookAt::BonesToModify' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeBonesToModify) == 0x000188, "Member 'FGbxAnimNode_LookAt::EyeBonesToModify' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, HeadLookAtLocation) == 0x000198, "Member 'FGbxAnimNode_LookAt::HeadLookAtLocation' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeLookAtLocation) == 0x0001A4, "Member 'FGbxAnimNode_LookAt::EyeLookAtLocation' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, HeadLookPercentage) == 0x0001B0, "Member 'FGbxAnimNode_LookAt::HeadLookPercentage' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, bEnableDebug) == 0x0001B4, "Member 'FGbxAnimNode_LookAt::bEnableDebug' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, bUseEyeMovement) == 0x0001B5, "Member 'FGbxAnimNode_LookAt::bUseEyeMovement' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeShiftMin) == 0x0001B8, "Member 'FGbxAnimNode_LookAt::EyeShiftMin' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeShiftMax) == 0x0001C4, "Member 'FGbxAnimNode_LookAt::EyeShiftMax' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeGlanceMin) == 0x0001D0, "Member 'FGbxAnimNode_LookAt::EyeGlanceMin' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeGlanceMax) == 0x0001DC, "Member 'FGbxAnimNode_LookAt::EyeGlanceMax' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeFocusTimeMin) == 0x0001E8, "Member 'FGbxAnimNode_LookAt::EyeFocusTimeMin' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeFocusTimeMax) == 0x0001EC, "Member 'FGbxAnimNode_LookAt::EyeFocusTimeMax' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeGlanceTimeMin) == 0x0001F0, "Member 'FGbxAnimNode_LookAt::EyeGlanceTimeMin' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeGlanceTimeMax) == 0x0001F4, "Member 'FGbxAnimNode_LookAt::EyeGlanceTimeMax' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeShiftTimeMin) == 0x0001F8, "Member 'FGbxAnimNode_LookAt::EyeShiftTimeMin' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeShiftTimeMax) == 0x0001FC, "Member 'FGbxAnimNode_LookAt::EyeShiftTimeMax' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeLODThreshold) == 0x000200, "Member 'FGbxAnimNode_LookAt::EyeLODThreshold' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, EyeScreenSizeThreshold) == 0x000208, "Member 'FGbxAnimNode_LookAt::EyeScreenSizeThreshold' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, bUseEyeScreenSizeThreshold) == 0x000220, "Member 'FGbxAnimNode_LookAt::bUseEyeScreenSizeThreshold' has a wrong offset!");
static_assert(offsetof(FGbxAnimNode_LookAt, ReferencePoseLink) == 0x000228, "Member 'FGbxAnimNode_LookAt::ReferencePoseLink' has a wrong offset!");

}

