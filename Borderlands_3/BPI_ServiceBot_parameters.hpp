#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ServiceBot

#include "Basic.hpp"

#include "Enum_ServiceBot_Type_structs.hpp"


namespace SDK::Params
{

// Function BPI_ServiceBot.BPI_ServiceBot_C.IsBotInjured
// 0x0001 (0x0001 - 0x0000)
struct BPI_ServiceBot_C_IsBotInjured final
{
public:
	bool                                          IsInjured;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_IsBotInjured) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_IsBotInjured");
static_assert(sizeof(BPI_ServiceBot_C_IsBotInjured) == 0x000001, "Wrong size on BPI_ServiceBot_C_IsBotInjured");
static_assert(offsetof(BPI_ServiceBot_C_IsBotInjured, IsInjured) == 0x000000, "Member 'BPI_ServiceBot_C_IsBotInjured::IsInjured' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.IsEMSBot
// 0x0001 (0x0001 - 0x0000)
struct BPI_ServiceBot_C_IsEMSBot final
{
public:
	bool                                          IsEMS;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_IsEMSBot) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_IsEMSBot");
static_assert(sizeof(BPI_ServiceBot_C_IsEMSBot) == 0x000001, "Wrong size on BPI_ServiceBot_C_IsEMSBot");
static_assert(offsetof(BPI_ServiceBot_C_IsEMSBot, IsEMS) == 0x000000, "Member 'BPI_ServiceBot_C_IsEMSBot::IsEMS' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.GetBotType
// 0x0001 (0x0001 - 0x0000)
struct BPI_ServiceBot_C_GetBotType final
{
public:
	Enum_ServiceBot_Type                          BotType;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ServiceBot_C_GetBotType) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_GetBotType");
static_assert(sizeof(BPI_ServiceBot_C_GetBotType) == 0x000001, "Wrong size on BPI_ServiceBot_C_GetBotType");
static_assert(offsetof(BPI_ServiceBot_C_GetBotType, BotType) == 0x000000, "Member 'BPI_ServiceBot_C_GetBotType::BotType' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.QueryAttachedPieces
// 0x0003 (0x0003 - 0x0000)
struct BPI_ServiceBot_C_QueryAttachedPieces final
{
public:
	bool                                          HasHead;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasRightArm;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasLeftArm;                                        // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_QueryAttachedPieces) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_QueryAttachedPieces");
static_assert(sizeof(BPI_ServiceBot_C_QueryAttachedPieces) == 0x000003, "Wrong size on BPI_ServiceBot_C_QueryAttachedPieces");
static_assert(offsetof(BPI_ServiceBot_C_QueryAttachedPieces, HasHead) == 0x000000, "Member 'BPI_ServiceBot_C_QueryAttachedPieces::HasHead' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_QueryAttachedPieces, HasRightArm) == 0x000001, "Member 'BPI_ServiceBot_C_QueryAttachedPieces::HasRightArm' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_QueryAttachedPieces, HasLeftArm) == 0x000002, "Member 'BPI_ServiceBot_C_QueryAttachedPieces::HasLeftArm' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.QueryDominantPieces
// 0x0003 (0x0003 - 0x0000)
struct BPI_ServiceBot_C_QueryDominantPieces final
{
public:
	bool                                          RightArmDominant;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LeftArmDominant;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HeadDominant;                                      // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_QueryDominantPieces) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_QueryDominantPieces");
static_assert(sizeof(BPI_ServiceBot_C_QueryDominantPieces) == 0x000003, "Wrong size on BPI_ServiceBot_C_QueryDominantPieces");
static_assert(offsetof(BPI_ServiceBot_C_QueryDominantPieces, RightArmDominant) == 0x000000, "Member 'BPI_ServiceBot_C_QueryDominantPieces::RightArmDominant' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_QueryDominantPieces, LeftArmDominant) == 0x000001, "Member 'BPI_ServiceBot_C_QueryDominantPieces::LeftArmDominant' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_QueryDominantPieces, HeadDominant) == 0x000002, "Member 'BPI_ServiceBot_C_QueryDominantPieces::HeadDominant' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.IsLootWeaponEquipped
// 0x0002 (0x0002 - 0x0000)
struct BPI_ServiceBot_C_IsLootWeaponEquipped final
{
public:
	bool                                          EquippedRight;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EquippedLeft;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_IsLootWeaponEquipped) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_IsLootWeaponEquipped");
static_assert(sizeof(BPI_ServiceBot_C_IsLootWeaponEquipped) == 0x000002, "Wrong size on BPI_ServiceBot_C_IsLootWeaponEquipped");
static_assert(offsetof(BPI_ServiceBot_C_IsLootWeaponEquipped, EquippedRight) == 0x000000, "Member 'BPI_ServiceBot_C_IsLootWeaponEquipped::EquippedRight' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_IsLootWeaponEquipped, EquippedLeft) == 0x000001, "Member 'BPI_ServiceBot_C_IsLootWeaponEquipped::EquippedLeft' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.EMS_ManageReviveParts
// 0x0003 (0x0003 - 0x0000)
struct BPI_ServiceBot_C_EMS_ManageReviveParts final
{
public:
	bool                                          HasHead;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasRightArm;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasLeftArm;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_EMS_ManageReviveParts) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_EMS_ManageReviveParts");
static_assert(sizeof(BPI_ServiceBot_C_EMS_ManageReviveParts) == 0x000003, "Wrong size on BPI_ServiceBot_C_EMS_ManageReviveParts");
static_assert(offsetof(BPI_ServiceBot_C_EMS_ManageReviveParts, HasHead) == 0x000000, "Member 'BPI_ServiceBot_C_EMS_ManageReviveParts::HasHead' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_EMS_ManageReviveParts, HasRightArm) == 0x000001, "Member 'BPI_ServiceBot_C_EMS_ManageReviveParts::HasRightArm' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_EMS_ManageReviveParts, HasLeftArm) == 0x000002, "Member 'BPI_ServiceBot_C_EMS_ManageReviveParts::HasLeftArm' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.DesignateAttachedPieces
// 0x0003 (0x0003 - 0x0000)
struct BPI_ServiceBot_C_DesignateAttachedPieces final
{
public:
	bool                                          HasHead;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasRightArm;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasLeftArm;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_DesignateAttachedPieces) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_DesignateAttachedPieces");
static_assert(sizeof(BPI_ServiceBot_C_DesignateAttachedPieces) == 0x000003, "Wrong size on BPI_ServiceBot_C_DesignateAttachedPieces");
static_assert(offsetof(BPI_ServiceBot_C_DesignateAttachedPieces, HasHead) == 0x000000, "Member 'BPI_ServiceBot_C_DesignateAttachedPieces::HasHead' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_DesignateAttachedPieces, HasRightArm) == 0x000001, "Member 'BPI_ServiceBot_C_DesignateAttachedPieces::HasRightArm' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_DesignateAttachedPieces, HasLeftArm) == 0x000002, "Member 'BPI_ServiceBot_C_DesignateAttachedPieces::HasLeftArm' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_ManageUIName
// 0x0008 (0x0008 - 0x0000)
struct BPI_ServiceBot_C_ServiceBot_ManageUIName final
{
public:
	class UGbxUIName*                             UIName;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ServiceBot_C_ServiceBot_ManageUIName) == 0x000008, "Wrong alignment on BPI_ServiceBot_C_ServiceBot_ManageUIName");
static_assert(sizeof(BPI_ServiceBot_C_ServiceBot_ManageUIName) == 0x000008, "Wrong size on BPI_ServiceBot_C_ServiceBot_ManageUIName");
static_assert(offsetof(BPI_ServiceBot_C_ServiceBot_ManageUIName, UIName) == 0x000000, "Member 'BPI_ServiceBot_C_ServiceBot_ManageUIName::UIName' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.MELEE_SpawnMelee
// 0x0001 (0x0001 - 0x0000)
struct BPI_ServiceBot_C_MELEE_SpawnMelee final
{
public:
	bool                                          SpawnRight;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_MELEE_SpawnMelee) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_MELEE_SpawnMelee");
static_assert(sizeof(BPI_ServiceBot_C_MELEE_SpawnMelee) == 0x000001, "Wrong size on BPI_ServiceBot_C_MELEE_SpawnMelee");
static_assert(offsetof(BPI_ServiceBot_C_MELEE_SpawnMelee, SpawnRight) == 0x000000, "Member 'BPI_ServiceBot_C_MELEE_SpawnMelee::SpawnRight' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.AssignDominantPieces
// 0x0003 (0x0003 - 0x0000)
struct BPI_ServiceBot_C_AssignDominantPieces final
{
public:
	bool                                          RightArmDominant;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LeftArmDominant;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HeadDominant;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_AssignDominantPieces) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_AssignDominantPieces");
static_assert(sizeof(BPI_ServiceBot_C_AssignDominantPieces) == 0x000003, "Wrong size on BPI_ServiceBot_C_AssignDominantPieces");
static_assert(offsetof(BPI_ServiceBot_C_AssignDominantPieces, RightArmDominant) == 0x000000, "Member 'BPI_ServiceBot_C_AssignDominantPieces::RightArmDominant' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_AssignDominantPieces, LeftArmDominant) == 0x000001, "Member 'BPI_ServiceBot_C_AssignDominantPieces::LeftArmDominant' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_AssignDominantPieces, HeadDominant) == 0x000002, "Member 'BPI_ServiceBot_C_AssignDominantPieces::HeadDominant' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.ManageWeapon
// 0x0002 (0x0002 - 0x0000)
struct BPI_ServiceBot_C_ManageWeapon final
{
public:
	bool                                          LeftWeapon;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HideWeapon;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_ManageWeapon) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_ManageWeapon");
static_assert(sizeof(BPI_ServiceBot_C_ManageWeapon) == 0x000002, "Wrong size on BPI_ServiceBot_C_ManageWeapon");
static_assert(offsetof(BPI_ServiceBot_C_ManageWeapon, LeftWeapon) == 0x000000, "Member 'BPI_ServiceBot_C_ManageWeapon::LeftWeapon' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_ManageWeapon, HideWeapon) == 0x000001, "Member 'BPI_ServiceBot_C_ManageWeapon::HideWeapon' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_TargetChanged
// 0x0008 (0x0008 - 0x0000)
struct BPI_ServiceBot_C_ServiceBot_TargetChanged final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ServiceBot_C_ServiceBot_TargetChanged) == 0x000008, "Wrong alignment on BPI_ServiceBot_C_ServiceBot_TargetChanged");
static_assert(sizeof(BPI_ServiceBot_C_ServiceBot_TargetChanged) == 0x000008, "Wrong size on BPI_ServiceBot_C_ServiceBot_TargetChanged");
static_assert(offsetof(BPI_ServiceBot_C_ServiceBot_TargetChanged, TargetActor) == 0x000000, "Member 'BPI_ServiceBot_C_ServiceBot_TargetChanged::TargetActor' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_FireExtinguisher
// 0x0001 (0x0001 - 0x0000)
struct BPI_ServiceBot_C_ServiceBot_FireExtinguisher final
{
public:
	bool                                          ExtinguishOn;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_ServiceBot_FireExtinguisher) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_ServiceBot_FireExtinguisher");
static_assert(sizeof(BPI_ServiceBot_C_ServiceBot_FireExtinguisher) == 0x000001, "Wrong size on BPI_ServiceBot_C_ServiceBot_FireExtinguisher");
static_assert(offsetof(BPI_ServiceBot_C_ServiceBot_FireExtinguisher, ExtinguishOn) == 0x000000, "Member 'BPI_ServiceBot_C_ServiceBot_FireExtinguisher::ExtinguishOn' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_SuicideTimer
// 0x0001 (0x0001 - 0x0000)
struct BPI_ServiceBot_C_ServiceBot_SuicideTimer final
{
public:
	bool                                          Start;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ServiceBot_C_ServiceBot_SuicideTimer) == 0x000001, "Wrong alignment on BPI_ServiceBot_C_ServiceBot_SuicideTimer");
static_assert(sizeof(BPI_ServiceBot_C_ServiceBot_SuicideTimer) == 0x000001, "Wrong size on BPI_ServiceBot_C_ServiceBot_SuicideTimer");
static_assert(offsetof(BPI_ServiceBot_C_ServiceBot_SuicideTimer, Start) == 0x000000, "Member 'BPI_ServiceBot_C_ServiceBot_SuicideTimer::Start' has a wrong offset!");

// Function BPI_ServiceBot.BPI_ServiceBot_C.ServiceBot_GetUIName
// 0x0010 (0x0010 - 0x0000)
struct BPI_ServiceBot_C_ServiceBot_GetUIName final
{
public:
	float                                         PlayThroughIndex;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxUIName*                             UIName;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ServiceBot_C_ServiceBot_GetUIName) == 0x000008, "Wrong alignment on BPI_ServiceBot_C_ServiceBot_GetUIName");
static_assert(sizeof(BPI_ServiceBot_C_ServiceBot_GetUIName) == 0x000010, "Wrong size on BPI_ServiceBot_C_ServiceBot_GetUIName");
static_assert(offsetof(BPI_ServiceBot_C_ServiceBot_GetUIName, PlayThroughIndex) == 0x000000, "Member 'BPI_ServiceBot_C_ServiceBot_GetUIName::PlayThroughIndex' has a wrong offset!");
static_assert(offsetof(BPI_ServiceBot_C_ServiceBot_GetUIName, UIName) == 0x000008, "Member 'BPI_ServiceBot_C_ServiceBot_GetUIName::UIName' has a wrong offset!");

}

