#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ServiceBot

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Enum_ServiceBot_Type_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_ServiceBot.BPI_ServiceBot_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_ServiceBot_C final : public IInterface
{
public:
	void ResetTeam();
	void Activate();
	void Deactivate();
	void IsBotInjured(bool* IsInjured);
	void EMS_ManageBeam();
	void IsEMSBot(bool* IsEMS);
	void GetBotType(Enum_ServiceBot_Type* BotType);
	void WMS_SpawnTurret();
	void ThrowAttack();
	void QueryAttachedPieces(bool* HasHead, bool* HasRightArm, bool* HasLeftArm);
	void RegrowAttachedPiece();
	void EMS_Defibulate();
	void FIRE_SpawnAxe();
	void QueryDominantPieces(bool* RightArmDominant, bool* LeftArmDominant, bool* HeadDominant);
	void SpawnGrenade();
	void BackupAttack();
	void ManageAttachedPieces();
	void IsLootWeaponEquipped(bool* EquippedRight, bool* EquippedLeft);
	void WeaponEffects();
	void WeaponFire();
	void EMS_ManageReviveParts(bool HasHead, bool HasRightArm, bool HasLeftArm);
	void DesignateAttachedPieces(bool HasHead, bool HasRightArm, bool HasLeftArm);
	void ServiceBot_ManageUIName(class UGbxUIName* UIName);
	void MELEE_SpawnMelee(bool SpawnRight);
	void ServiceBot_Suicide();
	void AssignDominantPieces(bool RightArmDominant, bool LeftArmDominant, bool HeadDominant);
	void ManageWeapon(bool LeftWeapon, bool HideWeapon);
	void ServiceBot_Equip_L();
	void ServiceBot_ShieldOn();
	void ServiceBot_TargetChanged(class AActor* TargetActor);
	void ServiceBot_FireExtinguisher(bool ExtinguishOn);
	void ServiceBot_Drop();
	void ServiceBot_SuicideTimer(bool Start);
	void ServiceBot_GetUIName(float PlayThroughIndex, class UGbxUIName** UIName);
	void ServiceBotLOOT_PrepareForEscape();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_ServiceBot_C">();
	}
	static class IBPI_ServiceBot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_ServiceBot_C>();
	}
};
static_assert(alignof(IBPI_ServiceBot_C) == 0x000008, "Wrong alignment on IBPI_ServiceBot_C");
static_assert(sizeof(IBPI_ServiceBot_C) == 0x000028, "Wrong size on IBPI_ServiceBot_C");

}

