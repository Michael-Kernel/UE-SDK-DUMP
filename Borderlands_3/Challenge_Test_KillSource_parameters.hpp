#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_Test_KillSource

#include "Basic.hpp"

#include "GbxWeapon_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.ExecuteUbergraph_Challenge_Test_KillSource
// 0x0004 (0x0004 - 0x0000)
struct Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource) == 0x000004, "Wrong alignment on Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource");
static_assert(sizeof(Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource) == 0x000004, "Wrong size on Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource");
static_assert(offsetof(Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource, EntryPoint) == 0x000000, "Member 'Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource::EntryPoint' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckKillCondition
// 0x0070 (0x0070 - 0x0000)
struct Challenge_Test_KillSource_C_CheckKillCondition final
{
public:
	class UDamageComponent*                       DamageReceiver;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCausedDeathDetails                    DeathDetails;                                      // 0x0008(0x0068)(BlueprintVisible, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Challenge_Test_KillSource_C_CheckKillCondition) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_CheckKillCondition");
static_assert(sizeof(Challenge_Test_KillSource_C_CheckKillCondition) == 0x000070, "Wrong size on Challenge_Test_KillSource_C_CheckKillCondition");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckKillCondition, DamageReceiver) == 0x000000, "Member 'Challenge_Test_KillSource_C_CheckKillCondition::DamageReceiver' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckKillCondition, DeathDetails) == 0x000008, "Member 'Challenge_Test_KillSource_C_CheckKillCondition::DeathDetails' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckDamageTaken
// 0x0088 (0x0088 - 0x0000)
struct Challenge_Test_KillSource_C_CheckDamageTaken final
{
public:
	class UDamageComponent*                       DamageReceiver;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGbxDamageType*                   DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageSource*                    DamageSource;                                      // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageCauserComponent*                 DamageCauser;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FReceivedDamageDetails                 Details;                                           // 0x0030(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(Challenge_Test_KillSource_C_CheckDamageTaken) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_CheckDamageTaken");
static_assert(sizeof(Challenge_Test_KillSource_C_CheckDamageTaken) == 0x000088, "Wrong size on Challenge_Test_KillSource_C_CheckDamageTaken");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, DamageReceiver) == 0x000000, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::DamageReceiver' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, Damage) == 0x000008, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::Damage' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, DamageType) == 0x000010, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::DamageType' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, DamageSource) == 0x000018, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::DamageSource' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, InstigatedBy) == 0x000020, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::InstigatedBy' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, DamageCauser) == 0x000028, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::DamageCauser' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageTaken, Details) == 0x000030, "Member 'Challenge_Test_KillSource_C_CheckDamageTaken::Details' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckPickUpItem
// 0x0050 (0x0050 - 0x0000)
struct Challenge_Test_KillSource_C_CheckPickUpItem final
{
public:
	class AActor*                                 PickedUpActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Quantity;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Test_KillSource_C_CheckPickUpItem) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_CheckPickUpItem");
static_assert(sizeof(Challenge_Test_KillSource_C_CheckPickUpItem) == 0x000050, "Wrong size on Challenge_Test_KillSource_C_CheckPickUpItem");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, PickedUpActor) == 0x000000, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::PickedUpActor' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, Quantity) == 0x000008, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::Quantity' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, CallFunc_GetClassDisplayName_ReturnValue) == 0x000020, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, CallFunc_Conv_BoolToString_ReturnValue) == 0x000030, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckPickUpItem, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'Challenge_Test_KillSource_C_CheckPickUpItem::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckDamageDone
// 0x0088 (0x0088 - 0x0000)
struct Challenge_Test_KillSource_C_CheckDamageDone final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGbxDamageType*                   DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageSource*                    DamageSource;                                      // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamagedActor;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCausedDamageDetails                   Details;                                           // 0x0028(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(Challenge_Test_KillSource_C_CheckDamageDone) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_CheckDamageDone");
static_assert(sizeof(Challenge_Test_KillSource_C_CheckDamageDone) == 0x000088, "Wrong size on Challenge_Test_KillSource_C_CheckDamageDone");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageDone, DamageInstigator) == 0x000000, "Member 'Challenge_Test_KillSource_C_CheckDamageDone::DamageInstigator' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageDone, Damage) == 0x000008, "Member 'Challenge_Test_KillSource_C_CheckDamageDone::Damage' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageDone, DamageType) == 0x000010, "Member 'Challenge_Test_KillSource_C_CheckDamageDone::DamageType' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageDone, DamageSource) == 0x000018, "Member 'Challenge_Test_KillSource_C_CheckDamageDone::DamageSource' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageDone, DamagedActor) == 0x000020, "Member 'Challenge_Test_KillSource_C_CheckDamageDone::DamagedActor' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckDamageDone, Details) == 0x000028, "Member 'Challenge_Test_KillSource_C_CheckDamageDone::Details' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckModifiedShot
// 0x0058 (0x0058 - 0x0000)
struct Challenge_Test_KillSource_C_CheckModifiedShot final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeaponShotModifierData                Data;                                              // 0x0008(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_Test_KillSource_C_CheckModifiedShot) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_CheckModifiedShot");
static_assert(sizeof(Challenge_Test_KillSource_C_CheckModifiedShot) == 0x000058, "Wrong size on Challenge_Test_KillSource_C_CheckModifiedShot");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckModifiedShot, Weapon) == 0x000000, "Member 'Challenge_Test_KillSource_C_CheckModifiedShot::Weapon' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckModifiedShot, Data) == 0x000008, "Member 'Challenge_Test_KillSource_C_CheckModifiedShot::Data' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_CheckModifiedShot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000050, "Member 'Challenge_Test_KillSource_C_CheckModifiedShot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.OnInitChallengeInstance
// 0x0010 (0x0010 - 0x0000)
struct Challenge_Test_KillSource_C_OnInitChallengeInstance final
{
public:
	class UChallengesComponent*                   OwningChallenges;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          AssociatedCharacter;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Test_KillSource_C_OnInitChallengeInstance) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_OnInitChallengeInstance");
static_assert(sizeof(Challenge_Test_KillSource_C_OnInitChallengeInstance) == 0x000010, "Wrong size on Challenge_Test_KillSource_C_OnInitChallengeInstance");
static_assert(offsetof(Challenge_Test_KillSource_C_OnInitChallengeInstance, OwningChallenges) == 0x000000, "Member 'Challenge_Test_KillSource_C_OnInitChallengeInstance::OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_OnInitChallengeInstance, AssociatedCharacter) == 0x000008, "Member 'Challenge_Test_KillSource_C_OnInitChallengeInstance::AssociatedCharacter' has a wrong offset!");

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.SetBinds
// 0x0028 (0x0028 - 0x0000)
struct Challenge_Test_KillSource_C_SetBinds final
{
public:
	TDelegate<void(class UDamageComponent* Damaged, struct FCausedDeathDetails& Details)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_Test_KillSource_C_SetBinds) == 0x000008, "Wrong alignment on Challenge_Test_KillSource_C_SetBinds");
static_assert(sizeof(Challenge_Test_KillSource_C_SetBinds) == 0x000028, "Wrong size on Challenge_Test_KillSource_C_SetBinds");
static_assert(offsetof(Challenge_Test_KillSource_C_SetBinds, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'Challenge_Test_KillSource_C_SetBinds::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_SetBinds, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'Challenge_Test_KillSource_C_SetBinds::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_SetBinds, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000018, "Member 'Challenge_Test_KillSource_C_SetBinds::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_Test_KillSource_C_SetBinds, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Challenge_Test_KillSource_C_SetBinds::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

