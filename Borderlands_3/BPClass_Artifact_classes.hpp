#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPClass_Artifact

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPClass_Artifact.BPClass_Artifact_C
// 0x0038 (0x04F8 - 0x04C0)
class ABPClass_Artifact_C final : public AOakInventoryEquippableItem
{
public:
	class USkeletalMeshComponent*                 ArtifactMesh;                                      // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Artifact_MeleeBonusDamage;                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Artifact_MeleeBonusHealing;                        // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_RadiationExplosionRadiusMultiplier;            // 0x04D0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_RadiationExplosionDamageMultiplier;            // 0x04DC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGbxAttributeFloat                     Att_RadiationAuraDamageScalar;                     // 0x04E8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPClass_Artifact_C">();
	}
	static class ABPClass_Artifact_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPClass_Artifact_C>();
	}
};
static_assert(alignof(ABPClass_Artifact_C) == 0x000008, "Wrong alignment on ABPClass_Artifact_C");
static_assert(sizeof(ABPClass_Artifact_C) == 0x0004F8, "Wrong size on ABPClass_Artifact_C");
static_assert(offsetof(ABPClass_Artifact_C, ArtifactMesh) == 0x0004C0, "Member 'ABPClass_Artifact_C::ArtifactMesh' has a wrong offset!");
static_assert(offsetof(ABPClass_Artifact_C, Artifact_MeleeBonusDamage) == 0x0004C8, "Member 'ABPClass_Artifact_C::Artifact_MeleeBonusDamage' has a wrong offset!");
static_assert(offsetof(ABPClass_Artifact_C, Artifact_MeleeBonusHealing) == 0x0004CC, "Member 'ABPClass_Artifact_C::Artifact_MeleeBonusHealing' has a wrong offset!");
static_assert(offsetof(ABPClass_Artifact_C, Att_RadiationExplosionRadiusMultiplier) == 0x0004D0, "Member 'ABPClass_Artifact_C::Att_RadiationExplosionRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(ABPClass_Artifact_C, Att_RadiationExplosionDamageMultiplier) == 0x0004DC, "Member 'ABPClass_Artifact_C::Att_RadiationExplosionDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABPClass_Artifact_C, Att_RadiationAuraDamageScalar) == 0x0004E8, "Member 'ABPClass_Artifact_C::Att_RadiationAuraDamageScalar' has a wrong offset!");

}

