#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Decorator_HangingSpline

#include "Basic.hpp"

#include "GbxGameSystemCore_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_HangingMeshProperties_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Decorator_HangingSpline.BP_Decorator_HangingSpline_C
// 0x00F0 (0x0548 - 0x0458)
class ABP_Decorator_HangingSpline_C : public ADecorator
{
public:
	class USplineComponent*                       Spline;                                            // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mesh_Tile;                                         // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tension;                                           // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Catenary_Resolution;                               // 0x0478(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResamplePoints;                                    // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start_Point;                                       // 0x0480(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End_Point;                                         // 0x048C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Resample;                                          // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          InstancedMesh;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream;                                            // 0x04A8(0x0008)(Edit, BlueprintVisible, NoDestructor)
	TArray<struct FStruct_HangingMeshProperties>  Hanging_Meshes;                                    // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UMaterialInterface*                     Wire_Material;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Twist;                                             // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Edge_Loops;                                        // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sides;                                             // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mesh_Scale;                                        // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UV_Scale;                                          // 0x04DC(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Collision;                                         // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UInstancedStaticMeshComponent*, class UMaterialInstanceDynamic*> Instanced_Mesh_Materials;                          // 0x04E8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UInstancedStaticMeshComponent*>  InstancedMeshList;                                 // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void GenerateCatenary();
	void PopulateInstances();
	void ConstructSplineMeshes();
	void ResampleSpline();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Decorator_HangingSpline_C">();
	}
	static class ABP_Decorator_HangingSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Decorator_HangingSpline_C>();
	}
};
static_assert(alignof(ABP_Decorator_HangingSpline_C) == 0x000008, "Wrong alignment on ABP_Decorator_HangingSpline_C");
static_assert(sizeof(ABP_Decorator_HangingSpline_C) == 0x000548, "Wrong size on ABP_Decorator_HangingSpline_C");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Spline) == 0x000458, "Member 'ABP_Decorator_HangingSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, DefaultSceneRoot) == 0x000460, "Member 'ABP_Decorator_HangingSpline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Mesh) == 0x000468, "Member 'ABP_Decorator_HangingSpline_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Mesh_Tile) == 0x000470, "Member 'ABP_Decorator_HangingSpline_C::Mesh_Tile' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Tension) == 0x000474, "Member 'ABP_Decorator_HangingSpline_C::Tension' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Catenary_Resolution) == 0x000478, "Member 'ABP_Decorator_HangingSpline_C::Catenary_Resolution' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, ResamplePoints) == 0x00047C, "Member 'ABP_Decorator_HangingSpline_C::ResamplePoints' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Start_Point) == 0x000480, "Member 'ABP_Decorator_HangingSpline_C::Start_Point' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, End_Point) == 0x00048C, "Member 'ABP_Decorator_HangingSpline_C::End_Point' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Resample) == 0x000498, "Member 'ABP_Decorator_HangingSpline_C::Resample' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, InstancedMesh) == 0x0004A0, "Member 'ABP_Decorator_HangingSpline_C::InstancedMesh' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Stream) == 0x0004A8, "Member 'ABP_Decorator_HangingSpline_C::Stream' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Hanging_Meshes) == 0x0004B0, "Member 'ABP_Decorator_HangingSpline_C::Hanging_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Wire_Material) == 0x0004C0, "Member 'ABP_Decorator_HangingSpline_C::Wire_Material' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Twist) == 0x0004C8, "Member 'ABP_Decorator_HangingSpline_C::Twist' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Radius) == 0x0004CC, "Member 'ABP_Decorator_HangingSpline_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Edge_Loops) == 0x0004D0, "Member 'ABP_Decorator_HangingSpline_C::Edge_Loops' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Sides) == 0x0004D4, "Member 'ABP_Decorator_HangingSpline_C::Sides' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Mesh_Scale) == 0x0004D8, "Member 'ABP_Decorator_HangingSpline_C::Mesh_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, UV_Scale) == 0x0004DC, "Member 'ABP_Decorator_HangingSpline_C::UV_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Collision) == 0x0004E4, "Member 'ABP_Decorator_HangingSpline_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, Instanced_Mesh_Materials) == 0x0004E8, "Member 'ABP_Decorator_HangingSpline_C::Instanced_Mesh_Materials' has a wrong offset!");
static_assert(offsetof(ABP_Decorator_HangingSpline_C, InstancedMeshList) == 0x000538, "Member 'ABP_Decorator_HangingSpline_C::InstancedMeshList' has a wrong offset!");

}

