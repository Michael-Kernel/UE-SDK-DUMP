#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NogBadass

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_LaunchAllDrones
// 0x0010 (0x0010 - 0x0000)
struct BPI_NogBadass_C_NogBadass_LaunchAllDrones final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenLaunch;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_LaunchAllDrones) == 0x000008, "Wrong alignment on BPI_NogBadass_C_NogBadass_LaunchAllDrones");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_LaunchAllDrones) == 0x000010, "Wrong size on BPI_NogBadass_C_NogBadass_LaunchAllDrones");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_LaunchAllDrones, MyTarget) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_LaunchAllDrones::MyTarget' has a wrong offset!");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_LaunchAllDrones, DelayBetweenLaunch) == 0x000008, "Member 'BPI_NogBadass_C_NogBadass_LaunchAllDrones::DelayBetweenLaunch' has a wrong offset!");

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_DronenadoBarrage
// 0x0010 (0x0010 - 0x0000)
struct BPI_NogBadass_C_NogBadass_DronenadoBarrage final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DefaultTarget;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_DronenadoBarrage) == 0x000008, "Wrong alignment on BPI_NogBadass_C_NogBadass_DronenadoBarrage");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_DronenadoBarrage) == 0x000010, "Wrong size on BPI_NogBadass_C_NogBadass_DronenadoBarrage");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DronenadoBarrage, Enable) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_DronenadoBarrage::Enable' has a wrong offset!");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DronenadoBarrage, DefaultTarget) == 0x000008, "Member 'BPI_NogBadass_C_NogBadass_DronenadoBarrage::DefaultTarget' has a wrong offset!");

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_DroneShieldDisable
// 0x0010 (0x0010 - 0x0000)
struct BPI_NogBadass_C_NogBadass_DroneShieldDisable final
{
public:
	bool                                          WasDestroyed;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalDamageCauser;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_DroneShieldDisable) == 0x000008, "Wrong alignment on BPI_NogBadass_C_NogBadass_DroneShieldDisable");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_DroneShieldDisable) == 0x000010, "Wrong size on BPI_NogBadass_C_NogBadass_DroneShieldDisable");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DroneShieldDisable, WasDestroyed) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_DroneShieldDisable::WasDestroyed' has a wrong offset!");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DroneShieldDisable, OptionalDamageCauser) == 0x000008, "Member 'BPI_NogBadass_C_NogBadass_DroneShieldDisable::OptionalDamageCauser' has a wrong offset!");

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_AttackDeathLaserFX
// 0x0001 (0x0001 - 0x0000)
struct BPI_NogBadass_C_NogBadass_AttackDeathLaserFX final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_AttackDeathLaserFX) == 0x000001, "Wrong alignment on BPI_NogBadass_C_NogBadass_AttackDeathLaserFX");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_AttackDeathLaserFX) == 0x000001, "Wrong size on BPI_NogBadass_C_NogBadass_AttackDeathLaserFX");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_AttackDeathLaserFX, Enable) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_AttackDeathLaserFX::Enable' has a wrong offset!");

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_DeathLaserBarrage
// 0x0010 (0x0010 - 0x0000)
struct BPI_NogBadass_C_NogBadass_DeathLaserBarrage final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MyTarget;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_DeathLaserBarrage) == 0x000008, "Wrong alignment on BPI_NogBadass_C_NogBadass_DeathLaserBarrage");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_DeathLaserBarrage) == 0x000010, "Wrong size on BPI_NogBadass_C_NogBadass_DeathLaserBarrage");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DeathLaserBarrage, Enable) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_DeathLaserBarrage::Enable' has a wrong offset!");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DeathLaserBarrage, MyTarget) == 0x000008, "Member 'BPI_NogBadass_C_NogBadass_DeathLaserBarrage::MyTarget' has a wrong offset!");

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_GetDroneBombHealthPctOfNog
// 0x0004 (0x0004 - 0x0000)
struct BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog final
{
public:
	float                                         HealthPctOfNog;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog) == 0x000004, "Wrong alignment on BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog) == 0x000004, "Wrong size on BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog, HealthPctOfNog) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_GetDroneBombHealthPctOfNog::HealthPctOfNog' has a wrong offset!");

// Function BPI_NogBadass.BPI_NogBadass_C.NogBadass_DroneShieldDisable_FromHitReaction
// 0x0001 (0x0001 - 0x0000)
struct BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction final
{
public:
	bool                                          WasDestroyed;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction) == 0x000001, "Wrong alignment on BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction");
static_assert(sizeof(BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction) == 0x000001, "Wrong size on BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction");
static_assert(offsetof(BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction, WasDestroyed) == 0x000000, "Member 'BPI_NogBadass_C_NogBadass_DroneShieldDisable_FromHitReaction::WasDestroyed' has a wrong offset!");

}

