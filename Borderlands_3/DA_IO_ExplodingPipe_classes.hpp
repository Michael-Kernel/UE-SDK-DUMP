#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DA_IO_ExplodingPipe

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DA_IO_ExplodingPipe.DA_IO_ExplodingPipe_C
// 0x00C8 (0x00F8 - 0x0030)
class UDA_IO_ExplodingPipe_C : public UGbxDataAssetBlueprintable
{
public:
	class UStaticMesh*                            NonDestroyedPipeMesh;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            DestroyedPipeMesh;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            PipeValveMesh;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DamageType;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParameterName_ElementalBase;                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Color_Primary2_Multiplier;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Decal_BaseColor_Base_Multiplier;                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParameterName_ElementalHighlight;                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Color_Primary1_Multiplier;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Decal_Comp_TextureRef;                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Decal_Normal_TextureRef;                           // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_Spray_Vel1;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_Spray_Vel2;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UElementalInteractionData*              ElementalInteractionWhenSprayIsOn;                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PipeValveMeshLocation;                             // 0x0098(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FX_Spray_Location;                                 // 0x00A4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NavPaintLocation;                                  // 0x00B0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NavPaintScale;                                     // 0x00BC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     PreviewDecalMaterial;                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlackFogLocation;                                  // 0x00D0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlackFogScale;                                     // 0x00DC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MeshPuddleToSpawn;                                 // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DecalPuddleToSpawn;                                // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DA_IO_ExplodingPipe_C">();
	}
	static class UDA_IO_ExplodingPipe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDA_IO_ExplodingPipe_C>();
	}
};
static_assert(alignof(UDA_IO_ExplodingPipe_C) == 0x000008, "Wrong alignment on UDA_IO_ExplodingPipe_C");
static_assert(sizeof(UDA_IO_ExplodingPipe_C) == 0x0000F8, "Wrong size on UDA_IO_ExplodingPipe_C");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, NonDestroyedPipeMesh) == 0x000030, "Member 'UDA_IO_ExplodingPipe_C::NonDestroyedPipeMesh' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, DestroyedPipeMesh) == 0x000038, "Member 'UDA_IO_ExplodingPipe_C::DestroyedPipeMesh' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, PipeValveMesh) == 0x000040, "Member 'UDA_IO_ExplodingPipe_C::PipeValveMesh' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, DamageType) == 0x000048, "Member 'UDA_IO_ExplodingPipe_C::DamageType' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, ParameterName_ElementalBase) == 0x000050, "Member 'UDA_IO_ExplodingPipe_C::ParameterName_ElementalBase' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, Color_Primary2_Multiplier) == 0x000058, "Member 'UDA_IO_ExplodingPipe_C::Color_Primary2_Multiplier' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, Decal_BaseColor_Base_Multiplier) == 0x00005C, "Member 'UDA_IO_ExplodingPipe_C::Decal_BaseColor_Base_Multiplier' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, ParameterName_ElementalHighlight) == 0x000060, "Member 'UDA_IO_ExplodingPipe_C::ParameterName_ElementalHighlight' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, Color_Primary1_Multiplier) == 0x000068, "Member 'UDA_IO_ExplodingPipe_C::Color_Primary1_Multiplier' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, Decal_Comp_TextureRef) == 0x000070, "Member 'UDA_IO_ExplodingPipe_C::Decal_Comp_TextureRef' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, Decal_Normal_TextureRef) == 0x000078, "Member 'UDA_IO_ExplodingPipe_C::Decal_Normal_TextureRef' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, FX_Spray_Vel1) == 0x000080, "Member 'UDA_IO_ExplodingPipe_C::FX_Spray_Vel1' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, FX_Spray_Vel2) == 0x000088, "Member 'UDA_IO_ExplodingPipe_C::FX_Spray_Vel2' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, ElementalInteractionWhenSprayIsOn) == 0x000090, "Member 'UDA_IO_ExplodingPipe_C::ElementalInteractionWhenSprayIsOn' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, PipeValveMeshLocation) == 0x000098, "Member 'UDA_IO_ExplodingPipe_C::PipeValveMeshLocation' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, FX_Spray_Location) == 0x0000A4, "Member 'UDA_IO_ExplodingPipe_C::FX_Spray_Location' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, NavPaintLocation) == 0x0000B0, "Member 'UDA_IO_ExplodingPipe_C::NavPaintLocation' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, NavPaintScale) == 0x0000BC, "Member 'UDA_IO_ExplodingPipe_C::NavPaintScale' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, PreviewDecalMaterial) == 0x0000C8, "Member 'UDA_IO_ExplodingPipe_C::PreviewDecalMaterial' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, BlackFogLocation) == 0x0000D0, "Member 'UDA_IO_ExplodingPipe_C::BlackFogLocation' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, BlackFogScale) == 0x0000DC, "Member 'UDA_IO_ExplodingPipe_C::BlackFogScale' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, MeshPuddleToSpawn) == 0x0000E8, "Member 'UDA_IO_ExplodingPipe_C::MeshPuddleToSpawn' has a wrong offset!");
static_assert(offsetof(UDA_IO_ExplodingPipe_C, DecalPuddleToSpawn) == 0x0000F0, "Member 'UDA_IO_ExplodingPipe_C::DecalPuddleToSpawn' has a wrong offset!");

}

