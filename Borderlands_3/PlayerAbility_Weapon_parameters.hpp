#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerAbility_Weapon

#include "Basic.hpp"


namespace SDK::Params
{

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.ExecuteUbergraph_PlayerAbility_Weapon
// 0x0180 (0x0180 - 0x0000)
struct PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UGbxInputActionData_Discrete> Temp_softobject_Variable;                          // 0x0008(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action10;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action9;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action8;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action7;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action6;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action5;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action4;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action3;       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action2;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action1;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter_Player*                   K2Node_DynamicCast_AsOak_Character_Player;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryThrowGrenade_ReturnValue;              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action11;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x00A0(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> Temp_softobject_Variable1;                         // 0x00C8(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action13;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1; // 0x00F8(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action14;      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue2; // 0x0128(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action12;      // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue3; // 0x0158(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon");
static_assert(sizeof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon) == 0x000180, "Wrong size on PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, EntryPoint) == 0x000000, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::EntryPoint' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, Temp_softobject_Variable) == 0x000008, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action10) == 0x000030, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action10' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action9) == 0x000038, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action9' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action8) == 0x000040, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action8' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action7) == 0x000048, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action7' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action6) == 0x000050, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action6' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action5) == 0x000058, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action5' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action4) == 0x000060, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action4' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action3) == 0x000068, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action3' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action2) == 0x000070, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action2' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action1) == 0x000078, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action1' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action) == 0x000080, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_DynamicCast_AsOak_Character_Player) == 0x000088, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_DynamicCast_AsOak_Character_Player' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, CallFunc_TryThrowGrenade_ReturnValue) == 0x000091, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::CallFunc_TryThrowGrenade_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action11) == 0x000098, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action11' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x0000A0, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, Temp_softobject_Variable1) == 0x0000C8, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::Temp_softobject_Variable1' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action13) == 0x0000F0, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action13' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1) == 0x0000F8, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action14) == 0x000120, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action14' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue2) == 0x000128, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue2' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action12) == 0x000150, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action12' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue3) == 0x000158, "Member 'PlayerAbility_Weapon_C_ExecuteUbergraph_PlayerAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue3' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PreToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_15::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon4_K2Node_GbxInputActionEvent_Discrete_16::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon3_K2Node_GbxInputActionEvent_Discrete_17::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon2_K2Node_GbxInputActionEvent_Discrete_18::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_SelectWeapon1_K2Node_GbxInputActionEvent_Discrete_19::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_NextWeapon_K2Node_GbxInputActionEvent_Discrete_20::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_PrevWeapon_K2Node_GbxInputActionEvent_Discrete_21::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_ToggleWeaponMode_K2Node_GbxInputActionEvent_Discrete_22::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_DropWeapon_K2Node_GbxInputActionEvent_Discrete_23::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Grenade_K2Node_GbxInputActionEvent_Discrete_24::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Reload_K2Node_GbxInputActionEvent_Discrete_25::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_26::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Zoom_K2Node_GbxInputActionEvent_Discrete_27::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_28::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29");
static_assert(sizeof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29) == 0x000008, "Wrong size on PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29");
static_assert(offsetof(PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29, Action) == 0x000000, "Member 'PlayerAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Fire_K2Node_GbxInputActionEvent_Discrete_29::Action' has a wrong offset!");

// Function PlayerAbility_Weapon.PlayerAbility_Weapon_C.QuickSelectWeapon
// 0x0028 (0x0028 - 0x0000)
struct PlayerAbility_Weapon_C_QuickSelectWeapon final
{
public:
	class UInventorySlotData*                     InvSlot;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponSlotData*                        WeaponSlot;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetEquippedInventoryForSlot_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                K2Node_DynamicCast_AsWeapon;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerAbility_Weapon_C_QuickSelectWeapon) == 0x000008, "Wrong alignment on PlayerAbility_Weapon_C_QuickSelectWeapon");
static_assert(sizeof(PlayerAbility_Weapon_C_QuickSelectWeapon) == 0x000028, "Wrong size on PlayerAbility_Weapon_C_QuickSelectWeapon");
static_assert(offsetof(PlayerAbility_Weapon_C_QuickSelectWeapon, InvSlot) == 0x000000, "Member 'PlayerAbility_Weapon_C_QuickSelectWeapon::InvSlot' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_QuickSelectWeapon, WeaponSlot) == 0x000008, "Member 'PlayerAbility_Weapon_C_QuickSelectWeapon::WeaponSlot' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_QuickSelectWeapon, CallFunc_GetEquippedInventoryForSlot_ReturnValue) == 0x000010, "Member 'PlayerAbility_Weapon_C_QuickSelectWeapon::CallFunc_GetEquippedInventoryForSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_QuickSelectWeapon, K2Node_DynamicCast_AsWeapon) == 0x000018, "Member 'PlayerAbility_Weapon_C_QuickSelectWeapon::K2Node_DynamicCast_AsWeapon' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_QuickSelectWeapon, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'PlayerAbility_Weapon_C_QuickSelectWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerAbility_Weapon_C_QuickSelectWeapon, CallFunc_IsActive_ReturnValue) == 0x000021, "Member 'PlayerAbility_Weapon_C_QuickSelectWeapon::CallFunc_IsActive_ReturnValue' has a wrong offset!");

}

