#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightProjectile_MAL_SR_SolekiBounce

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LightProjectile_MAL_SR_SolekiBounce.LightProjectile_MAL_SR_SolekiBounce_C.OnLifetimeExpired
// 0x0008 (0x0008 - 0x0000)
struct LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired) == 0x000008, "Wrong alignment on LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired");
static_assert(sizeof(LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired) == 0x000008, "Wrong size on LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired");
static_assert(offsetof(LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired, Projectile) == 0x000000, "Member 'LightProjectile_MAL_SR_SolekiBounce_C_OnLifetimeExpired::Projectile' has a wrong offset!");

// Function LightProjectile_MAL_SR_SolekiBounce.LightProjectile_MAL_SR_SolekiBounce_C.OnImpact
// 0x0098 (0x0098 - 0x0000)
struct LightProjectile_MAL_SR_SolekiBounce_C_OnImpact final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(LightProjectile_MAL_SR_SolekiBounce_C_OnImpact) == 0x000008, "Wrong alignment on LightProjectile_MAL_SR_SolekiBounce_C_OnImpact");
static_assert(sizeof(LightProjectile_MAL_SR_SolekiBounce_C_OnImpact) == 0x000098, "Wrong size on LightProjectile_MAL_SR_SolekiBounce_C_OnImpact");
static_assert(offsetof(LightProjectile_MAL_SR_SolekiBounce_C_OnImpact, Projectile) == 0x000000, "Member 'LightProjectile_MAL_SR_SolekiBounce_C_OnImpact::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SR_SolekiBounce_C_OnImpact, Hit) == 0x000008, "Member 'LightProjectile_MAL_SR_SolekiBounce_C_OnImpact::Hit' has a wrong offset!");

}

