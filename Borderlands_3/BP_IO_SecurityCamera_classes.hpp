#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IO_SecurityCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "IO_MissionDamageable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IO_SecurityCamera.BP_IO_SecurityCamera_C
// 0x0088 (0x07B0 - 0x0728)
class ABP_IO_SecurityCamera_C final : public AIO_MissionDamageable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_IO_SecurityCamera_C;             // 0x0728(0x0008)(Transient, DuplicateTransient)
	class UWwiseAudioComponent*                   WwiseAudio;                                        // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SleepTarget;                                       // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CameraSightBox;                                    // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Camera;                                         // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Mount;                                          // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObject*                                TargetObject;                                      // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   CameraHasFoundANewTarget;                          // 0x0768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   CameraIsGoingToSleep;                              // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   CameraIsAsleep;                                    // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   CameraDestroyed;                                   // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          StartDamageable;                                   // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseDamageableGlow;                                 // 0x07A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void PlayFeedback_Destroying();
	void PlayFeedback_Destroyed();
	void PlayFeedback_Damageable();
	void ReceiveBeginPlay();
	void LerpToTarget(float TickDelta);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature_BP_IO_SecurityCamera(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature_BP_IO_SecurityCamera(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BreakLoop();
	void DisableTickAfterSleeping();
	void OnEnabling();
	void OnDisabling();
	void ExecuteUbergraph_BP_IO_SecurityCamera(int32 EntryPoint);
	void CameraDestroyed__DelegateSignature();
	void CameraIsAsleep__DelegateSignature();
	void CameraIsGoingToSleep__DelegateSignature();
	void CameraHasFoundANewTarget__DelegateSignature(class AOakCharacter_Player* PlayerTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IO_SecurityCamera_C">();
	}
	static class ABP_IO_SecurityCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IO_SecurityCamera_C>();
	}
};
static_assert(alignof(ABP_IO_SecurityCamera_C) == 0x000008, "Wrong alignment on ABP_IO_SecurityCamera_C");
static_assert(sizeof(ABP_IO_SecurityCamera_C) == 0x0007B0, "Wrong size on ABP_IO_SecurityCamera_C");
static_assert(offsetof(ABP_IO_SecurityCamera_C, UberGraphFrame_BP_IO_SecurityCamera_C) == 0x000728, "Member 'ABP_IO_SecurityCamera_C::UberGraphFrame_BP_IO_SecurityCamera_C' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, WwiseAudio) == 0x000730, "Member 'ABP_IO_SecurityCamera_C::WwiseAudio' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, SleepTarget) == 0x000738, "Member 'ABP_IO_SecurityCamera_C::SleepTarget' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, CameraSightBox) == 0x000740, "Member 'ABP_IO_SecurityCamera_C::CameraSightBox' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, ParticleSystem) == 0x000748, "Member 'ABP_IO_SecurityCamera_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, SM_Camera) == 0x000750, "Member 'ABP_IO_SecurityCamera_C::SM_Camera' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, SM_Mount) == 0x000758, "Member 'ABP_IO_SecurityCamera_C::SM_Mount' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, TargetObject) == 0x000760, "Member 'ABP_IO_SecurityCamera_C::TargetObject' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, CameraHasFoundANewTarget) == 0x000768, "Member 'ABP_IO_SecurityCamera_C::CameraHasFoundANewTarget' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, CameraIsGoingToSleep) == 0x000778, "Member 'ABP_IO_SecurityCamera_C::CameraIsGoingToSleep' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, CameraIsAsleep) == 0x000788, "Member 'ABP_IO_SecurityCamera_C::CameraIsAsleep' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, CameraDestroyed) == 0x000798, "Member 'ABP_IO_SecurityCamera_C::CameraDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, StartDamageable) == 0x0007A8, "Member 'ABP_IO_SecurityCamera_C::StartDamageable' has a wrong offset!");
static_assert(offsetof(ABP_IO_SecurityCamera_C, UseDamageableGlow) == 0x0007A9, "Member 'ABP_IO_SecurityCamera_C::UseDamageableGlow' has a wrong offset!");

}

