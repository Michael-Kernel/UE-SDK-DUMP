#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxDialog

#include "Basic.hpp"

#include "WwiseAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum GbxDialog.EVoiceOfGodSpeaker
// NumValues: 0x0004
enum class EVoiceOfGodSpeaker : uint8
{
	INVALID                                  = 0,
	Lilith_Normal                            = 1,
	Tannis_Normal                            = 2,
	EVoiceOfGodSpeaker_MAX                   = 3,
};

// Enum GbxDialog.ETimeSlotEchoPreference
// NumValues: 0x0004
enum class ETimeSlotEchoPreference : uint8
{
	AutoTransition                           = 0,
	LiveOnly                                 = 1,
	EchoOnly                                 = 2,
	ETimeSlotEchoPreference_MAX              = 3,
};

// Enum GbxDialog.ECachedResultLifetime
// NumValues: 0x0004
enum class ECachedResultLifetime : uint8
{
	OneTest                                  = 0,
	OneSearch                                = 1,
	ManualReset                              = 2,
	ECachedResultLifetime_MAX                = 3,
};

// Enum GbxDialog.EDialogParameterMappingSourceType
// NumValues: 0x0005
enum class EDialogParameterMappingSourceType : uint8
{
	Parameter                                = 0,
	Constant                                 = 1,
	Counter                                  = 2,
	Flag                                     = 3,
	EDialogParameterMappingSourceType_MAX    = 4,
};

// Enum GbxDialog.EDialogImplementationStatus
// NumValues: 0x0003
enum class EDialogImplementationStatus : uint8
{
	Unimplemented                            = 0,
	Implemented                              = 1,
	EDialogImplementationStatus_MAX          = 2,
};

// Enum GbxDialog.EDialogParameterPrimaryType
// NumValues: 0x0006
enum class EDialogParameterPrimaryType : uint8
{
	Event                                    = 0,
	Object                                   = 1,
	Enum                                     = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	EDialogParameterPrimaryType_MAX          = 5,
};

// Enum GbxDialog.EGbxDialogQuietTimeScope
// NumValues: 0x0004
enum class EGbxDialogQuietTimeScope : uint8
{
	Individual                               = 0,
	SmallArea                                = 1,
	Area                                     = 2,
	EGbxDialogQuietTimeScope_MAX             = 3,
};

// Enum GbxDialog.ELineScorePriorityMode
// NumValues: 0x0003
enum class ELineScorePriorityMode : uint8
{
	RetainLowerScores                        = 0,
	DiscardLowerScores                       = 1,
	ELineScorePriorityMode_MAX               = 2,
};

// Enum GbxDialog.EDialogDecisionTestResult
// NumValues: 0x0004
enum class EDialogDecisionTestResult : uint8
{
	ConditionIsTrue                          = 0,
	ConditionIsFalse                         = 1,
	TestIsInvalid                            = 2,
	EDialogDecisionTestResult_MAX            = 3,
};

// Enum GbxDialog.EGbxDialogConversationStatus
// NumValues: 0x0008
enum class EGbxDialogConversationStatus : uint8
{
	NotFound                                 = 0,
	Pending                                  = 1,
	Canceled                                 = 2,
	Started                                  = 3,
	HoldingConversation                      = 4,
	Interrupted                              = 5,
	Succeeded                                = 6,
	EGbxDialogConversationStatus_MAX         = 7,
};

// Enum GbxDialog.EGbxDialogInterruptStrategy
// NumValues: 0x0003
enum class EGbxDialogInterruptStrategy : uint8
{
	StopOthers                               = 0,
	SpeakOverOthers                          = 1,
	EGbxDialogInterruptStrategy_MAX          = 2,
};

// Enum GbxDialog.EGbxDialogSocialStrategy
// NumValues: 0x0004
enum class EGbxDialogSocialStrategy : uint8
{
	Normal                                   = 0,
	Selfish                                  = 1,
	NonSocial                                = 2,
	EGbxDialogSocialStrategy_MAX             = 3,
};

// Enum GbxDialog.EGbxDialogCompileStatus
// NumValues: 0x0004
enum class EGbxDialogCompileStatus : uint8
{
	UpToDate                                 = 0,
	Dirty                                    = 1,
	Error                                    = 2,
	EGbxDialogCompileStatus_MAX              = 3,
};

// ScriptStruct GbxDialog.DialogParameterMapping
// 0x0028 (0x0028 - 0x0000)
struct FDialogParameterMapping final
{
public:
	class UDialogParameter*                       TargetParameter;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogParameterMappingSourceType             SourceType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SourceObject;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObjectSubContext;                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceNumber;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogParameterMapping) == 0x000008, "Wrong alignment on FDialogParameterMapping");
static_assert(sizeof(FDialogParameterMapping) == 0x000028, "Wrong size on FDialogParameterMapping");
static_assert(offsetof(FDialogParameterMapping, TargetParameter) == 0x000000, "Member 'FDialogParameterMapping::TargetParameter' has a wrong offset!");
static_assert(offsetof(FDialogParameterMapping, SourceType) == 0x000008, "Member 'FDialogParameterMapping::SourceType' has a wrong offset!");
static_assert(offsetof(FDialogParameterMapping, SourceObject) == 0x000010, "Member 'FDialogParameterMapping::SourceObject' has a wrong offset!");
static_assert(offsetof(FDialogParameterMapping, SourceObjectSubContext) == 0x000018, "Member 'FDialogParameterMapping::SourceObjectSubContext' has a wrong offset!");
static_assert(offsetof(FDialogParameterMapping, SourceNumber) == 0x000020, "Member 'FDialogParameterMapping::SourceNumber' has a wrong offset!");

// ScriptStruct GbxDialog.DialogSelectorFunctionCallInstance
// 0x0018 (0x0018 - 0x0000)
struct FDialogSelectorFunctionCallInstance final
{
public:
	class UDialogSelectorFunction*                Function;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogParameterMapping>        ParameterMappings;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogSelectorFunctionCallInstance) == 0x000008, "Wrong alignment on FDialogSelectorFunctionCallInstance");
static_assert(sizeof(FDialogSelectorFunctionCallInstance) == 0x000018, "Wrong size on FDialogSelectorFunctionCallInstance");
static_assert(offsetof(FDialogSelectorFunctionCallInstance, Function) == 0x000000, "Member 'FDialogSelectorFunctionCallInstance::Function' has a wrong offset!");
static_assert(offsetof(FDialogSelectorFunctionCallInstance, ParameterMappings) == 0x000008, "Member 'FDialogSelectorFunctionCallInstance::ParameterMappings' has a wrong offset!");

// ScriptStruct GbxDialog.DialogLookupDecision
// 0x0028 (0x0028 - 0x0000)
struct FDialogLookupDecision final
{
public:
	struct FDialogSelectorFunctionCallInstance    Call;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	ECachedResultLifetime                         CachedLifetime;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        DecisionNumber;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogLookupDecision) == 0x000008, "Wrong alignment on FDialogLookupDecision");
static_assert(sizeof(FDialogLookupDecision) == 0x000028, "Wrong size on FDialogLookupDecision");
static_assert(offsetof(FDialogLookupDecision, Call) == 0x000000, "Member 'FDialogLookupDecision::Call' has a wrong offset!");
static_assert(offsetof(FDialogLookupDecision, CachedLifetime) == 0x000018, "Member 'FDialogLookupDecision::CachedLifetime' has a wrong offset!");
static_assert(offsetof(FDialogLookupDecision, DecisionNumber) == 0x00001C, "Member 'FDialogLookupDecision::DecisionNumber' has a wrong offset!");

// ScriptStruct GbxDialog.DialogDecisionNode
// 0x001C (0x001C - 0x0000)
struct FDialogDecisionNode final
{
public:
	int32                                         Parent;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Decision;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrueResultChild;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FalseResultChild;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnrelatedResultChild;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultBucket;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChildQuality;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogDecisionNode) == 0x000004, "Wrong alignment on FDialogDecisionNode");
static_assert(sizeof(FDialogDecisionNode) == 0x00001C, "Wrong size on FDialogDecisionNode");
static_assert(offsetof(FDialogDecisionNode, Parent) == 0x000000, "Member 'FDialogDecisionNode::Parent' has a wrong offset!");
static_assert(offsetof(FDialogDecisionNode, Decision) == 0x000004, "Member 'FDialogDecisionNode::Decision' has a wrong offset!");
static_assert(offsetof(FDialogDecisionNode, TrueResultChild) == 0x000008, "Member 'FDialogDecisionNode::TrueResultChild' has a wrong offset!");
static_assert(offsetof(FDialogDecisionNode, FalseResultChild) == 0x00000C, "Member 'FDialogDecisionNode::FalseResultChild' has a wrong offset!");
static_assert(offsetof(FDialogDecisionNode, UnrelatedResultChild) == 0x000010, "Member 'FDialogDecisionNode::UnrelatedResultChild' has a wrong offset!");
static_assert(offsetof(FDialogDecisionNode, ResultBucket) == 0x000014, "Member 'FDialogDecisionNode::ResultBucket' has a wrong offset!");
static_assert(offsetof(FDialogDecisionNode, MaxChildQuality) == 0x000018, "Member 'FDialogDecisionNode::MaxChildQuality' has a wrong offset!");

// ScriptStruct GbxDialog.DialogLookupResult
// 0x0010 (0x0010 - 0x0000)
struct FDialogLookupResult final
{
public:
	class UDialogLineData*                        Line;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quality;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogLookupResult) == 0x000008, "Wrong alignment on FDialogLookupResult");
static_assert(sizeof(FDialogLookupResult) == 0x000010, "Wrong size on FDialogLookupResult");
static_assert(offsetof(FDialogLookupResult, Line) == 0x000000, "Member 'FDialogLookupResult::Line' has a wrong offset!");
static_assert(offsetof(FDialogLookupResult, Quality) == 0x000008, "Member 'FDialogLookupResult::Quality' has a wrong offset!");

// ScriptStruct GbxDialog.DialogLookupResultBucket
// 0x0010 (0x0010 - 0x0000)
struct FDialogLookupResultBucket final
{
public:
	TArray<struct FDialogLookupResult>            Results;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogLookupResultBucket) == 0x000008, "Wrong alignment on FDialogLookupResultBucket");
static_assert(sizeof(FDialogLookupResultBucket) == 0x000010, "Wrong size on FDialogLookupResultBucket");
static_assert(offsetof(FDialogLookupResultBucket, Results) == 0x000000, "Member 'FDialogLookupResultBucket::Results' has a wrong offset!");

// ScriptStruct GbxDialog.DialogDecisionTree
// 0x0030 (0x0030 - 0x0000)
struct FDialogDecisionTree final
{
public:
	TArray<struct FDialogLookupDecision>          Decisions;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDialogDecisionNode>            Nodes;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDialogLookupResultBucket>      ResultBuckets;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogDecisionTree) == 0x000008, "Wrong alignment on FDialogDecisionTree");
static_assert(sizeof(FDialogDecisionTree) == 0x000030, "Wrong size on FDialogDecisionTree");
static_assert(offsetof(FDialogDecisionTree, Decisions) == 0x000000, "Member 'FDialogDecisionTree::Decisions' has a wrong offset!");
static_assert(offsetof(FDialogDecisionTree, Nodes) == 0x000010, "Member 'FDialogDecisionTree::Nodes' has a wrong offset!");
static_assert(offsetof(FDialogDecisionTree, ResultBuckets) == 0x000020, "Member 'FDialogDecisionTree::ResultBuckets' has a wrong offset!");

// ScriptStruct GbxDialog.RecentDialogPerformanceInfo
// 0x0020 (0x0020 - 0x0000)
struct FRecentDialogPerformanceInfo final
{
public:
	double                                        ExpirationTime;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequenceID;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UGbxDialogComponent>     Speaker;                                           // 0x000C(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UDialogPerformanceData>  Performance;                                       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecentDialogPerformanceInfo) == 0x000008, "Wrong alignment on FRecentDialogPerformanceInfo");
static_assert(sizeof(FRecentDialogPerformanceInfo) == 0x000020, "Wrong size on FRecentDialogPerformanceInfo");
static_assert(offsetof(FRecentDialogPerformanceInfo, ExpirationTime) == 0x000000, "Member 'FRecentDialogPerformanceInfo::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FRecentDialogPerformanceInfo, SequenceID) == 0x000008, "Member 'FRecentDialogPerformanceInfo::SequenceID' has a wrong offset!");
static_assert(offsetof(FRecentDialogPerformanceInfo, Speaker) == 0x00000C, "Member 'FRecentDialogPerformanceInfo::Speaker' has a wrong offset!");
static_assert(offsetof(FRecentDialogPerformanceInfo, Performance) == 0x000014, "Member 'FRecentDialogPerformanceInfo::Performance' has a wrong offset!");

// ScriptStruct GbxDialog.DialogParameterValue
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FDialogParameterValue final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogParameterValue) == 0x000008, "Wrong alignment on FDialogParameterValue");
static_assert(sizeof(FDialogParameterValue) == 0x000038, "Wrong size on FDialogParameterValue");

// ScriptStruct GbxDialog.DialogScriptPinnedRef
// 0x0010 (0x0010 - 0x0000)
struct FDialogScriptPinnedRef final
{
public:
	TWeakObjectPtr<class UDialogBlackboard>       Blackboard;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogScriptData*                      Script;                                            // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogScriptPinnedRef) == 0x000008, "Wrong alignment on FDialogScriptPinnedRef");
static_assert(sizeof(FDialogScriptPinnedRef) == 0x000010, "Wrong size on FDialogScriptPinnedRef");
static_assert(offsetof(FDialogScriptPinnedRef, Blackboard) == 0x000000, "Member 'FDialogScriptPinnedRef::Blackboard' has a wrong offset!");
static_assert(offsetof(FDialogScriptPinnedRef, Script) == 0x000008, "Member 'FDialogScriptPinnedRef::Script' has a wrong offset!");

// ScriptStruct GbxDialog.RecentConversationInfo
// 0x0028 (0x0028 - 0x0000)
struct FRecentConversationInfo final
{
public:
	double                                        ExpirationTime;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APlayerController>       PreferredPlayer;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LastKeyActor;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastKeyLocation;                                   // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecentConversationInfo) == 0x000008, "Wrong alignment on FRecentConversationInfo");
static_assert(sizeof(FRecentConversationInfo) == 0x000028, "Wrong size on FRecentConversationInfo");
static_assert(offsetof(FRecentConversationInfo, ExpirationTime) == 0x000000, "Member 'FRecentConversationInfo::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FRecentConversationInfo, PreferredPlayer) == 0x000008, "Member 'FRecentConversationInfo::PreferredPlayer' has a wrong offset!");
static_assert(offsetof(FRecentConversationInfo, LastKeyActor) == 0x000010, "Member 'FRecentConversationInfo::LastKeyActor' has a wrong offset!");
static_assert(offsetof(FRecentConversationInfo, LastKeyLocation) == 0x000018, "Member 'FRecentConversationInfo::LastKeyLocation' has a wrong offset!");

// ScriptStruct GbxDialog.DialogSequenceNotifyDelegate
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDialogSequenceNotifyDelegate final
{
public:
	TDelegate<void()>                             OnNotify;                                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogSequenceNotifyDelegate) == 0x000008, "Wrong alignment on FDialogSequenceNotifyDelegate");
static_assert(sizeof(FDialogSequenceNotifyDelegate) == 0x000010, "Wrong size on FDialogSequenceNotifyDelegate");
static_assert(offsetof(FDialogSequenceNotifyDelegate, OnNotify) == 0x000000, "Member 'FDialogSequenceNotifyDelegate::OnNotify' has a wrong offset!");

// ScriptStruct GbxDialog.DistributedSpeakerInfo
// 0x0018 (0x0018 - 0x0000)
struct FDistributedSpeakerInfo final
{
public:
	class UGbxDialogComponent*                    DistributedSpeaker;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UGbxDialogComponent>> RepresentedSpeakers;                               // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistributedSpeakerInfo) == 0x000008, "Wrong alignment on FDistributedSpeakerInfo");
static_assert(sizeof(FDistributedSpeakerInfo) == 0x000018, "Wrong size on FDistributedSpeakerInfo");
static_assert(offsetof(FDistributedSpeakerInfo, DistributedSpeaker) == 0x000000, "Member 'FDistributedSpeakerInfo::DistributedSpeaker' has a wrong offset!");
static_assert(offsetof(FDistributedSpeakerInfo, RepresentedSpeakers) == 0x000008, "Member 'FDistributedSpeakerInfo::RepresentedSpeakers' has a wrong offset!");

// ScriptStruct GbxDialog.DialogSequenceDelegates
// 0x0070 (0x0070 - 0x0000)
struct FDialogSequenceDelegates final
{
public:
	TDelegate<void()>                             OnFinished;                                        // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FDialogSequenceNotifyDelegate> Notifies;                                          // 0x0020(0x0050)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogSequenceDelegates) == 0x000008, "Wrong alignment on FDialogSequenceDelegates");
static_assert(sizeof(FDialogSequenceDelegates) == 0x000070, "Wrong size on FDialogSequenceDelegates");
static_assert(offsetof(FDialogSequenceDelegates, OnFinished) == 0x000000, "Member 'FDialogSequenceDelegates::OnFinished' has a wrong offset!");
static_assert(offsetof(FDialogSequenceDelegates, Notifies) == 0x000020, "Member 'FDialogSequenceDelegates::Notifies' has a wrong offset!");

// ScriptStruct GbxDialog.DialogBlackboardCounterValueMap
// 0x0050 (0x0050 - 0x0000)
struct FDialogBlackboardCounterValueMap final
{
public:
	TMap<class UDialogEnumValue*, float>          Map;                                               // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogBlackboardCounterValueMap) == 0x000008, "Wrong alignment on FDialogBlackboardCounterValueMap");
static_assert(sizeof(FDialogBlackboardCounterValueMap) == 0x000050, "Wrong size on FDialogBlackboardCounterValueMap");
static_assert(offsetof(FDialogBlackboardCounterValueMap, Map) == 0x000000, "Member 'FDialogBlackboardCounterValueMap::Map' has a wrong offset!");

// ScriptStruct GbxDialog.DialogBlackboardFlagValue
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FDialogBlackboardFlagValue final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogBlackboardFlagValue) == 0x000004, "Wrong alignment on FDialogBlackboardFlagValue");
static_assert(sizeof(FDialogBlackboardFlagValue) == 0x000010, "Wrong size on FDialogBlackboardFlagValue");

// ScriptStruct GbxDialog.DialogBlackboardFlagValueMap
// 0x0050 (0x0050 - 0x0000)
struct FDialogBlackboardFlagValueMap final
{
public:
	TMap<class UDialogEnumValue*, struct FDialogBlackboardFlagValue> Map;                                               // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogBlackboardFlagValueMap) == 0x000008, "Wrong alignment on FDialogBlackboardFlagValueMap");
static_assert(sizeof(FDialogBlackboardFlagValueMap) == 0x000050, "Wrong size on FDialogBlackboardFlagValueMap");
static_assert(offsetof(FDialogBlackboardFlagValueMap, Map) == 0x000000, "Member 'FDialogBlackboardFlagValueMap::Map' has a wrong offset!");

// ScriptStruct GbxDialog.QuietTimeTracker
// 0x0050 (0x0050 - 0x0000)
struct FQuietTimeTracker final
{
public:
	TWeakObjectPtr<class UObject>                 KeyObject;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 ScopeObject;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuietTimePredicate*                    ScopePredicate;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x38];                                      // 0x0018(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuietTimeTracker) == 0x000008, "Wrong alignment on FQuietTimeTracker");
static_assert(sizeof(FQuietTimeTracker) == 0x000050, "Wrong size on FQuietTimeTracker");
static_assert(offsetof(FQuietTimeTracker, KeyObject) == 0x000000, "Member 'FQuietTimeTracker::KeyObject' has a wrong offset!");
static_assert(offsetof(FQuietTimeTracker, ScopeObject) == 0x000008, "Member 'FQuietTimeTracker::ScopeObject' has a wrong offset!");
static_assert(offsetof(FQuietTimeTracker, ScopePredicate) == 0x000010, "Member 'FQuietTimeTracker::ScopePredicate' has a wrong offset!");

// ScriptStruct GbxDialog.DialogContext
// 0x0218 (0x0218 - 0x0000)
struct alignas(0x08) FDialogContext final
{
public:
	uint8                                         Pad_0[0x218];                                      // 0x0000(0x0218)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogContext) == 0x000008, "Wrong alignment on FDialogContext");
static_assert(sizeof(FDialogContext) == 0x000218, "Wrong size on FDialogContext");

// ScriptStruct GbxDialog.DialogThread
// 0x02C0 (0x02C0 - 0x0000)
struct FDialogThread final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDialogContext                         Context;                                           // 0x0010(0x0218)(NativeAccessSpecifierPublic)
	class UGbxDialogComponent*                    Speaker;                                           // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogPerformanceData*                 Performance;                                       // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                QuietTimeKey;                                      // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                GameCustomizationObject;                           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x78];                                     // 0x0248(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogThread) == 0x000008, "Wrong alignment on FDialogThread");
static_assert(sizeof(FDialogThread) == 0x0002C0, "Wrong size on FDialogThread");
static_assert(offsetof(FDialogThread, Context) == 0x000010, "Member 'FDialogThread::Context' has a wrong offset!");
static_assert(offsetof(FDialogThread, Speaker) == 0x000228, "Member 'FDialogThread::Speaker' has a wrong offset!");
static_assert(offsetof(FDialogThread, Performance) == 0x000230, "Member 'FDialogThread::Performance' has a wrong offset!");
static_assert(offsetof(FDialogThread, QuietTimeKey) == 0x000238, "Member 'FDialogThread::QuietTimeKey' has a wrong offset!");
static_assert(offsetof(FDialogThread, GameCustomizationObject) == 0x000240, "Member 'FDialogThread::GameCustomizationObject' has a wrong offset!");

// ScriptStruct GbxDialog.DialogEventSubscription
// 0x0018 (0x0018 - 0x0000)
struct FDialogEventSubscription final
{
public:
	struct FSoftObjectPath                        ReferencerTimeSlot;                                // 0x0000(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogEventSubscription) == 0x000008, "Wrong alignment on FDialogEventSubscription");
static_assert(sizeof(FDialogEventSubscription) == 0x000018, "Wrong size on FDialogEventSubscription");
static_assert(offsetof(FDialogEventSubscription, ReferencerTimeSlot) == 0x000000, "Member 'FDialogEventSubscription::ReferencerTimeSlot' has a wrong offset!");

// ScriptStruct GbxDialog.DialogParameterType
// 0x0010 (0x0010 - 0x0000)
struct FDialogParameterType final
{
public:
	EDialogParameterPrimaryType                   PrimaryType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogEnumType*                        SecondaryType;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogParameterType) == 0x000008, "Wrong alignment on FDialogParameterType");
static_assert(sizeof(FDialogParameterType) == 0x000010, "Wrong size on FDialogParameterType");
static_assert(offsetof(FDialogParameterType, PrimaryType) == 0x000000, "Member 'FDialogParameterType::PrimaryType' has a wrong offset!");
static_assert(offsetof(FDialogParameterType, SecondaryType) == 0x000008, "Member 'FDialogParameterType::SecondaryType' has a wrong offset!");

// ScriptStruct GbxDialog.ConditionalEchoData
// 0x0010 (0x0010 - 0x0000)
struct FConditionalEchoData final
{
public:
	class UGbxCondition*                          Condition;                                         // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterEchoDataBase*                 EchoData;                                          // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalEchoData) == 0x000008, "Wrong alignment on FConditionalEchoData");
static_assert(sizeof(FConditionalEchoData) == 0x000010, "Wrong size on FConditionalEchoData");
static_assert(offsetof(FConditionalEchoData, Condition) == 0x000000, "Member 'FConditionalEchoData::Condition' has a wrong offset!");
static_assert(offsetof(FConditionalEchoData, EchoData) == 0x000008, "Member 'FConditionalEchoData::EchoData' has a wrong offset!");

// ScriptStruct GbxDialog.DialogMoodInfo
// 0x0008 (0x0008 - 0x0000)
struct FDialogMoodInfo final
{
public:
	TSubclassOf<class UGbxAction>                 Action;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogMoodInfo) == 0x000008, "Wrong alignment on FDialogMoodInfo");
static_assert(sizeof(FDialogMoodInfo) == 0x000008, "Wrong size on FDialogMoodInfo");
static_assert(offsetof(FDialogMoodInfo, Action) == 0x000000, "Member 'FDialogMoodInfo::Action' has a wrong offset!");

// ScriptStruct GbxDialog.DialogPerformanceNotify
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDialogPerformanceNotify final
{
public:
	float                                         TimeFraction;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogPerformanceNotify) == 0x000008, "Wrong alignment on FDialogPerformanceNotify");
static_assert(sizeof(FDialogPerformanceNotify) == 0x000010, "Wrong size on FDialogPerformanceNotify");
static_assert(offsetof(FDialogPerformanceNotify, TimeFraction) == 0x000000, "Member 'FDialogPerformanceNotify::TimeFraction' has a wrong offset!");
static_assert(offsetof(FDialogPerformanceNotify, Name) == 0x000008, "Member 'FDialogPerformanceNotify::Name' has a wrong offset!");

// ScriptStruct GbxDialog.DialogTimeSlotReference
// 0x0040 (0x0040 - 0x0000)
struct FDialogTimeSlotReference final
{
public:
	TSoftObjectPtr<class UDialogScriptData>       Script;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogTimeSlotData*                    CachedTimeSlot;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDialogTimeSlotReference) == 0x000008, "Wrong alignment on FDialogTimeSlotReference");
static_assert(sizeof(FDialogTimeSlotReference) == 0x000040, "Wrong size on FDialogTimeSlotReference");
static_assert(offsetof(FDialogTimeSlotReference, Script) == 0x000000, "Member 'FDialogTimeSlotReference::Script' has a wrong offset!");
static_assert(offsetof(FDialogTimeSlotReference, Guid) == 0x000028, "Member 'FDialogTimeSlotReference::Guid' has a wrong offset!");
static_assert(offsetof(FDialogTimeSlotReference, CachedTimeSlot) == 0x000038, "Member 'FDialogTimeSlotReference::CachedTimeSlot' has a wrong offset!");

// ScriptStruct GbxDialog.InitialDialogInProgress
// 0x0018 (0x0018 - 0x0000)
struct FInitialDialogInProgress final
{
public:
	int32                                         DialogThreadID;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogSequenceID;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogPerformanceData*                 Performance;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInitialDialogInProgress) == 0x000008, "Wrong alignment on FInitialDialogInProgress");
static_assert(sizeof(FInitialDialogInProgress) == 0x000018, "Wrong size on FInitialDialogInProgress");
static_assert(offsetof(FInitialDialogInProgress, DialogThreadID) == 0x000000, "Member 'FInitialDialogInProgress::DialogThreadID' has a wrong offset!");
static_assert(offsetof(FInitialDialogInProgress, DialogSequenceID) == 0x000004, "Member 'FInitialDialogInProgress::DialogSequenceID' has a wrong offset!");
static_assert(offsetof(FInitialDialogInProgress, Performance) == 0x000008, "Member 'FInitialDialogInProgress::Performance' has a wrong offset!");
static_assert(offsetof(FInitialDialogInProgress, PlayTime) == 0x000010, "Member 'FInitialDialogInProgress::PlayTime' has a wrong offset!");

// ScriptStruct GbxDialog.DialogConditionRequirement
// 0x0020 (0x0020 - 0x0000)
struct FDialogConditionRequirement final
{
public:
	struct FDialogSelectorFunctionCallInstance    SelectorCall;                                      // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bRequiredResult;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogConditionRequirement) == 0x000008, "Wrong alignment on FDialogConditionRequirement");
static_assert(sizeof(FDialogConditionRequirement) == 0x000020, "Wrong size on FDialogConditionRequirement");
static_assert(offsetof(FDialogConditionRequirement, SelectorCall) == 0x000000, "Member 'FDialogConditionRequirement::SelectorCall' has a wrong offset!");
static_assert(offsetof(FDialogConditionRequirement, bRequiredResult) == 0x000018, "Member 'FDialogConditionRequirement::bRequiredResult' has a wrong offset!");

// ScriptStruct GbxDialog.DialogSelectionCondition
// 0x0010 (0x0010 - 0x0000)
struct FDialogSelectionCondition final
{
public:
	TArray<struct FDialogConditionRequirement>    Requirements;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogSelectionCondition) == 0x000008, "Wrong alignment on FDialogSelectionCondition");
static_assert(sizeof(FDialogSelectionCondition) == 0x000010, "Wrong size on FDialogSelectionCondition");
static_assert(offsetof(FDialogSelectionCondition, Requirements) == 0x000000, "Member 'FDialogSelectionCondition::Requirements' has a wrong offset!");

// ScriptStruct GbxDialog.DialogScopeParameterInfo
// 0x0018 (0x0018 - 0x0000)
struct FDialogScopeParameterInfo final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogParameterMapping>        ParameterMappings;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogScopeParameterInfo) == 0x000008, "Wrong alignment on FDialogScopeParameterInfo");
static_assert(sizeof(FDialogScopeParameterInfo) == 0x000018, "Wrong size on FDialogScopeParameterInfo");
static_assert(offsetof(FDialogScopeParameterInfo, Target) == 0x000000, "Member 'FDialogScopeParameterInfo::Target' has a wrong offset!");
static_assert(offsetof(FDialogScopeParameterInfo, ParameterMappings) == 0x000008, "Member 'FDialogScopeParameterInfo::ParameterMappings' has a wrong offset!");

// ScriptStruct GbxDialog.CurrentDialogPerformanceInfo
// 0x0060 (0x0060 - 0x0000)
struct FCurrentDialogPerformanceInfo final
{
public:
	int32                                         DialogThreadID;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogSequenceID;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogPerformanceData*                 Performance;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwisePlaybackInstance                 PlayingAudioInstance;                              // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	bool                                          bForcingOwnerRelevantForEcho;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x37];                                      // 0x0029(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrentDialogPerformanceInfo) == 0x000008, "Wrong alignment on FCurrentDialogPerformanceInfo");
static_assert(sizeof(FCurrentDialogPerformanceInfo) == 0x000060, "Wrong size on FCurrentDialogPerformanceInfo");
static_assert(offsetof(FCurrentDialogPerformanceInfo, DialogThreadID) == 0x000000, "Member 'FCurrentDialogPerformanceInfo::DialogThreadID' has a wrong offset!");
static_assert(offsetof(FCurrentDialogPerformanceInfo, DialogSequenceID) == 0x000004, "Member 'FCurrentDialogPerformanceInfo::DialogSequenceID' has a wrong offset!");
static_assert(offsetof(FCurrentDialogPerformanceInfo, Performance) == 0x000008, "Member 'FCurrentDialogPerformanceInfo::Performance' has a wrong offset!");
static_assert(offsetof(FCurrentDialogPerformanceInfo, PlayingAudioInstance) == 0x000010, "Member 'FCurrentDialogPerformanceInfo::PlayingAudioInstance' has a wrong offset!");
static_assert(offsetof(FCurrentDialogPerformanceInfo, bForcingOwnerRelevantForEcho) == 0x000028, "Member 'FCurrentDialogPerformanceInfo::bForcingOwnerRelevantForEcho' has a wrong offset!");

// ScriptStruct GbxDialog.DialogConversation
// 0x000C (0x000C - 0x0000)
struct FDialogConversation final
{
public:
	int32                                         ConversationID;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWorld>                  ConversationWorld;                                 // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogConversation) == 0x000004, "Wrong alignment on FDialogConversation");
static_assert(sizeof(FDialogConversation) == 0x00000C, "Wrong size on FDialogConversation");
static_assert(offsetof(FDialogConversation, ConversationID) == 0x000000, "Member 'FDialogConversation::ConversationID' has a wrong offset!");
static_assert(offsetof(FDialogConversation, ConversationWorld) == 0x000004, "Member 'FDialogConversation::ConversationWorld' has a wrong offset!");

// ScriptStruct GbxDialog.MovieSceneDialogSectionTemplateData
// 0x0080 (0x0080 - 0x0000)
struct FMovieSceneDialogSectionTemplateData final
{
public:
	struct FDialogTimeSlotReference               Dialog;                                            // 0x0000(0x0040)(Edit, NativeAccessSpecifierPublic)
	bool                                          bPlayThroughDialogSystem;                          // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtitleOnly;                                     // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ManualSubtitleText;                                // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         ManualSubtitleDuration;                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogNameTag*                         SubtitleNameTag;                                   // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowIdx;                                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0074(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0078(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneDialogSectionTemplateData) == 0x000008, "Wrong alignment on FMovieSceneDialogSectionTemplateData");
static_assert(sizeof(FMovieSceneDialogSectionTemplateData) == 0x000080, "Wrong size on FMovieSceneDialogSectionTemplateData");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, Dialog) == 0x000000, "Member 'FMovieSceneDialogSectionTemplateData::Dialog' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, bPlayThroughDialogSystem) == 0x000040, "Member 'FMovieSceneDialogSectionTemplateData::bPlayThroughDialogSystem' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, bSubtitleOnly) == 0x000041, "Member 'FMovieSceneDialogSectionTemplateData::bSubtitleOnly' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, ManualSubtitleText) == 0x000048, "Member 'FMovieSceneDialogSectionTemplateData::ManualSubtitleText' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, ManualSubtitleDuration) == 0x000060, "Member 'FMovieSceneDialogSectionTemplateData::ManualSubtitleDuration' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, SubtitleNameTag) == 0x000068, "Member 'FMovieSceneDialogSectionTemplateData::SubtitleNameTag' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, RowIdx) == 0x000070, "Member 'FMovieSceneDialogSectionTemplateData::RowIdx' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, SectionStartFrame) == 0x000074, "Member 'FMovieSceneDialogSectionTemplateData::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogSectionTemplateData, SectionEndFrame) == 0x000078, "Member 'FMovieSceneDialogSectionTemplateData::SectionEndFrame' has a wrong offset!");

// ScriptStruct GbxDialog.MovieSceneDialogSectionTemplate
// 0x0080 (0x00A0 - 0x0020)
struct FMovieSceneDialogSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneDialogSectionTemplateData   TemplateData;                                      // 0x0020(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneDialogSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneDialogSectionTemplate");
static_assert(sizeof(FMovieSceneDialogSectionTemplate) == 0x0000A0, "Wrong size on FMovieSceneDialogSectionTemplate");
static_assert(offsetof(FMovieSceneDialogSectionTemplate, TemplateData) == 0x000020, "Member 'FMovieSceneDialogSectionTemplate::TemplateData' has a wrong offset!");

}

