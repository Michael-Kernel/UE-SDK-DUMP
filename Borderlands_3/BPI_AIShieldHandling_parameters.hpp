#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AIShieldHandling

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_AIShieldHandling.BPI_AIShieldHandling_C.AIShield_Drop
// 0x0001 (0x0001 - 0x0000)
struct BPI_AIShieldHandling_C_AIShield_Drop final
{
public:
	bool                                          RequestNewShield;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIShieldHandling_C_AIShield_Drop) == 0x000001, "Wrong alignment on BPI_AIShieldHandling_C_AIShield_Drop");
static_assert(sizeof(BPI_AIShieldHandling_C_AIShield_Drop) == 0x000001, "Wrong size on BPI_AIShieldHandling_C_AIShield_Drop");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_Drop, RequestNewShield) == 0x000000, "Member 'BPI_AIShieldHandling_C_AIShield_Drop::RequestNewShield' has a wrong offset!");

// Function BPI_AIShieldHandling.BPI_AIShieldHandling_C.AIShield_ThrowAtTarget
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) BPI_AIShieldHandling_C_AIShield_ThrowAtTarget final
{
public:
	float                                         ThrowSpeed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercent;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewShield;                                  // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget) == 0x000008, "Wrong alignment on BPI_AIShieldHandling_C_AIShield_ThrowAtTarget");
static_assert(sizeof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget) == 0x000030, "Wrong size on BPI_AIShieldHandling_C_AIShield_ThrowAtTarget");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, ThrowSpeed) == 0x000000, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, ThrowAnglePercent) == 0x000004, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, TargetSocket) == 0x000008, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::TargetSocket' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, TargetOffset) == 0x000010, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, ThrowAngleOffset) == 0x00001C, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, MaxPrediction) == 0x000028, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::MaxPrediction' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, RequestNewShield) == 0x00002C, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::RequestNewShield' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtTarget, SpawnIfDoesntExist) == 0x00002D, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtTarget::SpawnIfDoesntExist' has a wrong offset!");

// Function BPI_AIShieldHandling.BPI_AIShieldHandling_C.AIShield_ThrowAtActor
// 0x0038 (0x0038 - 0x0000)
struct BPI_AIShieldHandling_C_AIShield_ThrowAtActor final
{
public:
	class AActor*                                 ActorToThrowAt;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActorSocket;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewShield;                                  // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor) == 0x000008, "Wrong alignment on BPI_AIShieldHandling_C_AIShield_ThrowAtActor");
static_assert(sizeof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor) == 0x000038, "Wrong size on BPI_AIShieldHandling_C_AIShield_ThrowAtActor");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, ActorToThrowAt) == 0x000000, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, ThrowSpeed) == 0x000008, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, ThrowAnglePercentage) == 0x00000C, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, ActorSocket) == 0x000010, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::ActorSocket' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, ActorOffset) == 0x000018, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::ActorOffset' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, ThrowAngleOffset) == 0x000024, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, MaxPrediction) == 0x000030, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::MaxPrediction' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, RequestNewShield) == 0x000034, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::RequestNewShield' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtActor, SpawnIfDoesntExist) == 0x000035, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtActor::SpawnIfDoesntExist' has a wrong offset!");

// Function BPI_AIShieldHandling.BPI_AIShieldHandling_C.AIShield_ThrowAtLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_AIShieldHandling_C_AIShield_ThrowAtLocation final
{
public:
	struct FVector                                LocationToThrowAt;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewShield;                                  // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation) == 0x000004, "Wrong alignment on BPI_AIShieldHandling_C_AIShield_ThrowAtLocation");
static_assert(sizeof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation) == 0x000018, "Wrong size on BPI_AIShieldHandling_C_AIShield_ThrowAtLocation");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation, LocationToThrowAt) == 0x000000, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtLocation::LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation, ThrowSpeed) == 0x00000C, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtLocation::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation, ThrowAnglePercentage) == 0x000010, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtLocation::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation, RequestNewShield) == 0x000014, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtLocation::RequestNewShield' has a wrong offset!");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_ThrowAtLocation, SpawnIfDoesntExist) == 0x000015, "Member 'BPI_AIShieldHandling_C_AIShield_ThrowAtLocation::SpawnIfDoesntExist' has a wrong offset!");

// Function BPI_AIShieldHandling.BPI_AIShieldHandling_C.AIShield_SetNewShieldClass
// 0x0008 (0x0008 - 0x0000)
struct BPI_AIShieldHandling_C_AIShield_SetNewShieldClass final
{
public:
	class UClass*                                 NewShieldClass;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AIShieldHandling_C_AIShield_SetNewShieldClass) == 0x000008, "Wrong alignment on BPI_AIShieldHandling_C_AIShield_SetNewShieldClass");
static_assert(sizeof(BPI_AIShieldHandling_C_AIShield_SetNewShieldClass) == 0x000008, "Wrong size on BPI_AIShieldHandling_C_AIShield_SetNewShieldClass");
static_assert(offsetof(BPI_AIShieldHandling_C_AIShield_SetNewShieldClass, NewShieldClass) == 0x000000, "Member 'BPI_AIShieldHandling_C_AIShield_SetNewShieldClass::NewShieldClass' has a wrong offset!");

}

