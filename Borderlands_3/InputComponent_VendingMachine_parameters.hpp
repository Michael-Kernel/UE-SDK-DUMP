#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InputComponent_VendingMachine

#include "Basic.hpp"


namespace SDK::Params
{

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Released_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pulse_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_InitialPulse_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_0_Pressed_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Released_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pulse_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_InitialPulse_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec");
static_assert(sizeof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec");
static_assert(offsetof(InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_K2Node_GbxInputEvent_Button_PressPulse_11_Pressed_exec::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.GbxInputEvent_0
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_GbxInputEvent_0 final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_GbxInputEvent_0) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_GbxInputEvent_0");
static_assert(sizeof(InputComponent_VendingMachine_C_GbxInputEvent_0) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_GbxInputEvent_0");
static_assert(offsetof(InputComponent_VendingMachine_C_GbxInputEvent_0, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_GbxInputEvent_0::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.GbxInputEvent_1
// 0x0004 (0x0004 - 0x0000)
struct InputComponent_VendingMachine_C_GbxInputEvent_1 final
{
public:
	float                                         NextPulseDelay;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_GbxInputEvent_1) == 0x000004, "Wrong alignment on InputComponent_VendingMachine_C_GbxInputEvent_1");
static_assert(sizeof(InputComponent_VendingMachine_C_GbxInputEvent_1) == 0x000004, "Wrong size on InputComponent_VendingMachine_C_GbxInputEvent_1");
static_assert(offsetof(InputComponent_VendingMachine_C_GbxInputEvent_1, NextPulseDelay) == 0x000000, "Member 'InputComponent_VendingMachine_C_GbxInputEvent_1::NextPulseDelay' has a wrong offset!");

// Function InputComponent_VendingMachine.InputComponent_VendingMachine_C.ExecuteUbergraph_InputComponent_VendingMachine
// 0x0048 (0x0048 - 0x0000)
struct InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay7;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay6;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay5;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay4;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay3;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay2;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay1;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NextPulseDelay;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVendingMachineProxy*                   K2Node_DynamicCast_AsVending_Machine_Proxy;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine) == 0x000008, "Wrong alignment on InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine");
static_assert(sizeof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine) == 0x000048, "Wrong size on InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, EntryPoint) == 0x000000, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::EntryPoint' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay7) == 0x000004, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay7' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay6) == 0x000008, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay6' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay5) == 0x00000C, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay5' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay4) == 0x000010, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay4' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay3) == 0x000014, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay3' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay2) == 0x000018, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay2' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay1) == 0x00001C, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay1' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_CustomEvent_NextPulseDelay) == 0x000020, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_CustomEvent_NextPulseDelay' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_DynamicCast_AsVending_Machine_Proxy) == 0x000030, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_DynamicCast_AsVending_Machine_Proxy' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay1) == 0x00003C, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay1' has a wrong offset!");
static_assert(offsetof(InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine, K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay) == 0x000040, "Member 'InputComponent_VendingMachine_C_ExecuteUbergraph_InputComponent_VendingMachine::K2Node_GbxInputEvent_Button_PressPulse_NextPulseDelay' has a wrong offset!");

}

