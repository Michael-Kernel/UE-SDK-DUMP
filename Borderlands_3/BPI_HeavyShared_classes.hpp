#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_HeavyShared

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Enum_Heavy_WeaponSocket_structs.hpp"
#include "OakGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_HeavyShared.BPI_HeavyShared_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_HeavyShared_C final : public IInterface
{
public:
	void Heavy_BackpackExplosion_TriggerFriendlyDodge();
	void Heavy_BackpackExplosion_TriggerExplosion();
	void Heavy_BackpackExplosion_TriggerDeath();
	void Heavy_FireBeam_Start(Enum_Heavy_WeaponSocket WeaponSocket, bool IsNavAnim);
	void Heavy_FireBeam_Stop(bool IsNavAnim);
	void Heavy_ElementalTrap_Spawn(class AActor** Obstruction1, class AActor** Obstruction2);
	void Heavy_BlastWave(class AActor* AttackTarget);
	void Heavy_BlastShot(class AActor* ProjectileTarget, class FName WeaponSocket);
	void Heavy_FaceMedic();
	void Heavy_BackpackDeathBegan(class AActor* DamageCauser);
	void Heavy_WasBackpackExplosionThresholdTriggered(bool* ThresholdReached);
	void Heavy_BackpackExplosion_TriggerExplosion_PostDeath(const struct FVector& ExplosionLocation, class AActor* DamageCauser);
	void Heavy_GetMaxHealth(float* MaxHealth);
	void Wwise_BlastPump_PwrUp();
	void Heavy_StompImpact();
	void Heavy_GroundPoundTrail(class AActor* MyTarget, class FName OptionalStartingSocket, int32 TotalImpactsAlongPath, float Duration, class UClass* OptionalDamageAlongPath, class UClass* OptionalDamageAtTargetLocation, class UParticleSystem* PathFX, class UParticleSystem* TargetFX, float PathFXStartScale, float PathFXEndScale);
	void Heavy_Powerhouse_LaunchPole(class AActor* MyTarget, bool IsLeftHand);
	void Heavy_BombLaunch(class AActor* MyTarget, bool IsLeftHand, EOakElementalType OverrideElementType);
	void Heavy_WeaponChargeFX(bool IsLeftHand, bool Enable);
	void Heavy_GetElementalMode(EOakElementalType* ElementalMode);
	void Wwise_FireBeam_PwrUp();
	void Heavy_FistChargeFX(bool IsLeftHand, bool Enable);
	void Heavy_TargetChanged(class AActor* TargetActor);
	void HeavyLoot_FleeBeam(bool Start);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_HeavyShared_C">();
	}
	static class IBPI_HeavyShared_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_HeavyShared_C>();
	}
};
static_assert(alignof(IBPI_HeavyShared_C) == 0x000008, "Wrong alignment on IBPI_HeavyShared_C");
static_assert(sizeof(IBPI_HeavyShared_C) == 0x000028, "Wrong size on IBPI_HeavyShared_C");

}

