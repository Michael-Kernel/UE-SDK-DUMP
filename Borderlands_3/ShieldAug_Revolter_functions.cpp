#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShieldAug_Revolter

#include "Basic.hpp"

#include "ShieldAug_Revolter_classes.hpp"
#include "ShieldAug_Revolter_parameters.hpp"


namespace SDK
{

// Function ShieldAug_Revolter.ShieldAug_Revolter_C.K2_TriggerEffect
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AShield*                          Shield                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameResourcePoolReference       ResourcePool                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
// struct FAugmentData                     StackData                                              (BlueprintVisible, Parm, OutParm, ReferenceParm, NoDestructor)

void UShieldAug_Revolter_C::K2_TriggerEffect(class AShield* Shield, const struct FGameResourcePoolReference& ResourcePool, struct FAugmentData& StackData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShieldAug_Revolter_C", "K2_TriggerEffect");

	Params::ShieldAug_Revolter_C_K2_TriggerEffect Parms{};

	Parms.Shield = Shield;
	Parms.ResourcePool = std::move(ResourcePool);
	Parms.StackData = std::move(StackData);

	UObject::ProcessEvent(Func, &Parms);

	StackData = std::move(Parms.StackData);
}


// Function ShieldAug_Revolter.ShieldAug_Revolter_C.K2_NativeDelayCallback
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AShield*                          Shield                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAugmentData                     StackData                                              (BlueprintVisible, Parm, OutParm, ReferenceParm, NoDestructor)
// class FName                             DelayName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UShieldAug_Revolter_C::K2_NativeDelayCallback(class AShield* Shield, struct FAugmentData& StackData, class FName DelayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShieldAug_Revolter_C", "K2_NativeDelayCallback");

	Params::ShieldAug_Revolter_C_K2_NativeDelayCallback Parms{};

	Parms.Shield = Shield;
	Parms.StackData = std::move(StackData);
	Parms.DelayName = DelayName;

	UObject::ProcessEvent(Func, &Parms);

	StackData = std::move(Parms.StackData);
}


// Function ShieldAug_Revolter.ShieldAug_Revolter_C.K2_OnShieldUnequipped
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AShield*                          Shield                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AOakCharacter*                    Equipper                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAugmentData                     StackData                                              (BlueprintVisible, Parm, OutParm, ReferenceParm, NoDestructor)

void UShieldAug_Revolter_C::K2_OnShieldUnequipped(class AShield* Shield, class AOakCharacter* Equipper, struct FAugmentData& StackData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShieldAug_Revolter_C", "K2_OnShieldUnequipped");

	Params::ShieldAug_Revolter_C_K2_OnShieldUnequipped Parms{};

	Parms.Shield = Shield;
	Parms.Equipper = Equipper;
	Parms.StackData = std::move(StackData);

	UObject::ProcessEvent(Func, &Parms);

	StackData = std::move(Parms.StackData);
}

}

