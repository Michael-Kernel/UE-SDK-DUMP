#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_Enemy

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "Engine_structs.hpp"
#include "BPChar_AI_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPChar_Enemy.BPChar_Enemy_C
// 0x0040 (0x2390 - 0x2350)
#pragma pack(push, 0x1)
class alignas(0x10) ABPChar_Enemy_C : public ABPChar_AI_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BPChar_Enemy_C;                     // 0x2348(0x0008)(Transient, DuplicateTransient)
	class UOakMinimapIconComponent*               OakMinimapIcon;                                    // 0x2350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBodyWeaponHoldManagerComponent*        BodyWeaponHoldManager;                             // 0x2358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakAIWeaponUserComponent*              AIWeaponUser_0;                                    // 0x2360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIDodgeComponent*                      AIDodge;                                           // 0x2368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakHitRegionComponent*                 HitRegion;                                         // 0x2370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIBalanceStateComponent*               AIBalanceState;                                    // 0x2378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasShield;                                         // 0x2380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPChar_Enemy(int32 EntryPoint);
	void Player_HealthDepleted(class AOakCharacter* Character);
	void Radation_DeathExplosion(class AActor* DamageReceiver, class AActor* DamageCauser);
	void Enemy_OnPhaseLockStart();
	void BndEvt__OakDamageComponent_K2Node_ComponentBoundEvent_0_ElementalDeathDelegate__DelegateSignature_BPChar_Enemy(EOakElementalType Type);
	void Enemy_OnPhaseLockStop();
	void ReceiveBeginPlay();
	void Player_SpawnTransfusionProjectile(class UClass* DataBlueprint__Override_, class UClass* DamageType__Override_, class AActor* SourceActor, class AActor* TargetActor, float Damage, class AActor* Causer__Override_);
	void Enemy_OnThoughtLockStart();
	void Enemy_OnThoughtLockStop();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_Enemy_C">();
	}
	static class ABPChar_Enemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_Enemy_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABPChar_Enemy_C) == 0x000010, "Wrong alignment on ABPChar_Enemy_C");
static_assert(sizeof(ABPChar_Enemy_C) == 0x002390, "Wrong size on ABPChar_Enemy_C");
static_assert(offsetof(ABPChar_Enemy_C, UberGraphFrame_BPChar_Enemy_C) == 0x002348, "Member 'ABPChar_Enemy_C::UberGraphFrame_BPChar_Enemy_C' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, OakMinimapIcon) == 0x002350, "Member 'ABPChar_Enemy_C::OakMinimapIcon' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, BodyWeaponHoldManager) == 0x002358, "Member 'ABPChar_Enemy_C::BodyWeaponHoldManager' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, AIWeaponUser_0) == 0x002360, "Member 'ABPChar_Enemy_C::AIWeaponUser_0' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, AIDodge) == 0x002368, "Member 'ABPChar_Enemy_C::AIDodge' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, HitRegion) == 0x002370, "Member 'ABPChar_Enemy_C::HitRegion' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, AIBalanceState) == 0x002378, "Member 'ABPChar_Enemy_C::AIBalanceState' has a wrong offset!");
static_assert(offsetof(ABPChar_Enemy_C, HasShield) == 0x002380, "Member 'ABPChar_Enemy_C::HasShield' has a wrong offset!");

}

