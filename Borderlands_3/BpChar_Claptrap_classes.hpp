#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BpChar_Claptrap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BPChar_NonPlayerCharacter_classes.hpp"
#include "GbxMission_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BpChar_Claptrap.BPChar_Claptrap_C
// 0x00B0 (0x2640 - 0x2590)
class ABPChar_Claptrap_C final : public ABPChar_NonPlayerCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BPChar_Claptrap_C;                  // 0x2590(0x0008)(Transient, DuplicateTransient)
	class UWwiseAudioComponent*                   WwiseAudio;                                        // 0x2598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AntennaChoice;                                     // 0x25A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPNPCFightForYourLifeComponent_C*      BPNPCFightForYourLifeComponent;                    // 0x25A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Claptrap_Green_Blinky_Light;                    // 0x25B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAntenna;                                    // 0x25B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25BC[0x4];                                     // 0x25BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    AntennaChoices;                                    // 0x25C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Time_ClaptrapCommentsOnAntenna;                    // 0x25D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25D4[0x4];                                     // 0x25D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerClaptrapCommentsAntenna;                      // 0x25D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class AOakCharacter*                          Claptrap_OakCharacter;                             // 0x25E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AntennaVOLineValue;                                // 0x25E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CoatHangerVOLineValue;                             // 0x25EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForkVOLineValue;                                   // 0x25F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UmbrellaVOLineValue;                               // 0x25F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CapVOLineValue;                                    // 0x25F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClapNoAntennaActive;                               // 0x25FC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25FD[0x3];                                     // 0x25FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AntennaChoiceIndex;                                // 0x2600(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2604[0x4];                                     // 0x2604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          MissionAvailableBadReception;                      // 0x2608(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          MissionAvailableBitterPillsToSwallow;              // 0x2610(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          MissionAvailableRockOnPandora;                     // 0x2618(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          MissionAvailableECHONetNeutrality;                 // 0x2620(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          MissionAvailableBabyDancer;                        // 0x2628(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          MissionAvailableTooManyKevins;                     // 0x2630(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         LocalAntennaVar;                                   // 0x2638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void BndEvt__Usable_K2Node_ComponentBoundEvent_24_UsableUsedOnChannelSignature__DelegateSignature_BPChar_Typhon_UNIX1509007700(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void OnRep_AntennaChoiceIndex();
	void OnRep_ClapNoAntennaActive();
	void ClaptrapComments(int32 AntennaChoice_0);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_1_UsableUsedOnChannelSignature__DelegateSignature_BPChar_Claptrap(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void CE_TimerToSwitchAntenna();
	void ForceClaptrapDownstate();
	void DisableClaptrapAntenna();
	void EnableClaptrapAntenna();
	void BndEvt__BPNPCFightForYourLifeComponent_K2Node_ComponentBoundEvent_1_FightForYourLifeEvent__DelegateSignature_BPChar_Claptrap();
	void BndEvt__MissionObserver_K2Node_ComponentBoundEvent_0_MissionObserverMissionsInitialized__DelegateSignature_BPChar_Claptrap();
	void ExecuteUbergraph_BPChar_Claptrap(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_Claptrap_C">();
	}
	static class ABPChar_Claptrap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_Claptrap_C>();
	}
};
static_assert(alignof(ABPChar_Claptrap_C) == 0x000010, "Wrong alignment on ABPChar_Claptrap_C");
static_assert(sizeof(ABPChar_Claptrap_C) == 0x002640, "Wrong size on ABPChar_Claptrap_C");
static_assert(offsetof(ABPChar_Claptrap_C, UberGraphFrame_BPChar_Claptrap_C) == 0x002590, "Member 'ABPChar_Claptrap_C::UberGraphFrame_BPChar_Claptrap_C' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, WwiseAudio) == 0x002598, "Member 'ABPChar_Claptrap_C::WwiseAudio' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, AntennaChoice) == 0x0025A0, "Member 'ABPChar_Claptrap_C::AntennaChoice' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, BPNPCFightForYourLifeComponent) == 0x0025A8, "Member 'ABPChar_Claptrap_C::BPNPCFightForYourLifeComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, PS_Claptrap_Green_Blinky_Light) == 0x0025B0, "Member 'ABPChar_Claptrap_C::PS_Claptrap_Green_Blinky_Light' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, CurrentAntenna) == 0x0025B8, "Member 'ABPChar_Claptrap_C::CurrentAntenna' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, AntennaChoices) == 0x0025C0, "Member 'ABPChar_Claptrap_C::AntennaChoices' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, Time_ClaptrapCommentsOnAntenna) == 0x0025D0, "Member 'ABPChar_Claptrap_C::Time_ClaptrapCommentsOnAntenna' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, TimerClaptrapCommentsAntenna) == 0x0025D8, "Member 'ABPChar_Claptrap_C::TimerClaptrapCommentsAntenna' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, Claptrap_OakCharacter) == 0x0025E0, "Member 'ABPChar_Claptrap_C::Claptrap_OakCharacter' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, AntennaVOLineValue) == 0x0025E8, "Member 'ABPChar_Claptrap_C::AntennaVOLineValue' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, CoatHangerVOLineValue) == 0x0025EC, "Member 'ABPChar_Claptrap_C::CoatHangerVOLineValue' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, ForkVOLineValue) == 0x0025F0, "Member 'ABPChar_Claptrap_C::ForkVOLineValue' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, UmbrellaVOLineValue) == 0x0025F4, "Member 'ABPChar_Claptrap_C::UmbrellaVOLineValue' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, CapVOLineValue) == 0x0025F8, "Member 'ABPChar_Claptrap_C::CapVOLineValue' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, ClapNoAntennaActive) == 0x0025FC, "Member 'ABPChar_Claptrap_C::ClapNoAntennaActive' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, AntennaChoiceIndex) == 0x002600, "Member 'ABPChar_Claptrap_C::AntennaChoiceIndex' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, MissionAvailableBadReception) == 0x002608, "Member 'ABPChar_Claptrap_C::MissionAvailableBadReception' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, MissionAvailableBitterPillsToSwallow) == 0x002610, "Member 'ABPChar_Claptrap_C::MissionAvailableBitterPillsToSwallow' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, MissionAvailableRockOnPandora) == 0x002618, "Member 'ABPChar_Claptrap_C::MissionAvailableRockOnPandora' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, MissionAvailableECHONetNeutrality) == 0x002620, "Member 'ABPChar_Claptrap_C::MissionAvailableECHONetNeutrality' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, MissionAvailableBabyDancer) == 0x002628, "Member 'ABPChar_Claptrap_C::MissionAvailableBabyDancer' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, MissionAvailableTooManyKevins) == 0x002630, "Member 'ABPChar_Claptrap_C::MissionAvailableTooManyKevins' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_C, LocalAntennaVar) == 0x002638, "Member 'ABPChar_Claptrap_C::LocalAntennaVar' has a wrong offset!");

}

