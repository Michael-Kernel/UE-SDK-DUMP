#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IO_EmergencyLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EnumState_EmergencyLight_Color_structs.hpp"


namespace SDK::Params
{

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.SetLightColor
// 0x0014 (0x0014 - 0x0000)
struct BP_IO_EmergencyLight_C_SetLightColor final
{
public:
	int32                                         ColorArrayIndex;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0004(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_EmergencyLight_C_SetLightColor) == 0x000004, "Wrong alignment on BP_IO_EmergencyLight_C_SetLightColor");
static_assert(sizeof(BP_IO_EmergencyLight_C_SetLightColor) == 0x000014, "Wrong size on BP_IO_EmergencyLight_C_SetLightColor");
static_assert(offsetof(BP_IO_EmergencyLight_C_SetLightColor, ColorArrayIndex) == 0x000000, "Member 'BP_IO_EmergencyLight_C_SetLightColor::ColorArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_SetLightColor, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000004, "Member 'BP_IO_EmergencyLight_C_SetLightColor::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct BP_IO_EmergencyLight_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue1; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_IO_EmergencyLight_C_UserConstructionScript");
static_assert(sizeof(BP_IO_EmergencyLight_C_UserConstructionScript) == 0x000018, "Wrong size on BP_IO_EmergencyLight_C_UserConstructionScript");
static_assert(offsetof(BP_IO_EmergencyLight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_IO_EmergencyLight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue1) == 0x000008, "Member 'BP_IO_EmergencyLight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_IO_EmergencyLight_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_UserConstructionScript, K2Node_SwitchEnum1_CmpSuccess) == 0x000011, "Member 'BP_IO_EmergencyLight_C_UserConstructionScript::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Color_3
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Color_3 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Color_3) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Color_3");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Color_3) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Color_3");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Color_3, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Color_3::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Color_4
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Color_4 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Color_4) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Color_4");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Color_4) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Color_4");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Color_4, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Color_4::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Behavior_0
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Behavior_0 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Behavior_0) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Behavior_0");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Behavior_0) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Behavior_0");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Behavior_0, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Behavior_0::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Behavior_2
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Behavior_2 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Behavior_2) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Behavior_2");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Behavior_2) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Behavior_2");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Behavior_2, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Behavior_2::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Behavior_3
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Behavior_3 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Behavior_3) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Behavior_3");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Behavior_3) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Behavior_3");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Behavior_3, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Behavior_3::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Behavior_1
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Behavior_1 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Behavior_1) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Behavior_1");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Behavior_1) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Behavior_1");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Behavior_1, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Behavior_1::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Color_2
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Color_2 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Color_2) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Color_2");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Color_2) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Color_2");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Color_2, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Color_2::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Color_1
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Color_1 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Color_1) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Color_1");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Color_1) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Color_1");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Color_1, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Color_1::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_Color_0
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_Color_0 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_Color_0) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_Color_0");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_Color_0) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_Color_0");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_Color_0, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_Color_0::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_SirenAudio_0
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_SirenAudio_0::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.__UserState_State_SirenAudio_1
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1 final
{
public:
	bool                                          bFromLoad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1");
static_assert(sizeof(BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1");
static_assert(offsetof(BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1, bFromLoad) == 0x000000, "Member 'BP_IO_EmergencyLight_C___UserState_State_SirenAudio_1::bFromLoad' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.SetColorState
// 0x0004 (0x0004 - 0x0000)
struct BP_IO_EmergencyLight_C_SetColorState final
{
public:
	int32                                         Color_Array_Index;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_EmergencyLight_C_SetColorState) == 0x000004, "Wrong alignment on BP_IO_EmergencyLight_C_SetColorState");
static_assert(sizeof(BP_IO_EmergencyLight_C_SetColorState) == 0x000004, "Wrong size on BP_IO_EmergencyLight_C_SetColorState");
static_assert(offsetof(BP_IO_EmergencyLight_C_SetColorState, Color_Array_Index) == 0x000000, "Member 'BP_IO_EmergencyLight_C_SetColorState::Color_Array_Index' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.SetEmergencyLightColorState
// 0x0001 (0x0001 - 0x0000)
struct BP_IO_EmergencyLight_C_SetEmergencyLightColorState final
{
public:
	EnumState_EmergencyLight_Color                StateColorEnum;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_EmergencyLight_C_SetEmergencyLightColorState) == 0x000001, "Wrong alignment on BP_IO_EmergencyLight_C_SetEmergencyLightColorState");
static_assert(sizeof(BP_IO_EmergencyLight_C_SetEmergencyLightColorState) == 0x000001, "Wrong size on BP_IO_EmergencyLight_C_SetEmergencyLightColorState");
static_assert(offsetof(BP_IO_EmergencyLight_C_SetEmergencyLightColorState, StateColorEnum) == 0x000000, "Member 'BP_IO_EmergencyLight_C_SetEmergencyLightColorState::StateColorEnum' has a wrong offset!");

// Function BP_IO_EmergencyLight.BP_IO_EmergencyLight_C.ExecuteUbergraph_BP_IO_EmergencyLight
// 0x0080 (0x0080 - 0x0000)
struct BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad10;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad9;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad8;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad7;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad6;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_UserStateEvent_bFromLoad5;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor1;                    // 0x0024(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x003C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_UserStateEvent_bFromLoad4;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad3;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad2;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad1;                  // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_UserStateEvent_bFromLoad;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0058(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0068(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Color_Array_Index;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_EmergencyLight_Color                K2Node_CustomEvent_StateColorEnum;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight) == 0x000004, "Wrong alignment on BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight");
static_assert(sizeof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight) == 0x000080, "Wrong size on BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, EntryPoint) == 0x000000, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_IsValid_ReturnValue1) == 0x000005, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_IsValid_ReturnValue2) == 0x000006, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_IsValid_ReturnValue3) == 0x000007, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad10) == 0x000008, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad10' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad9) == 0x000009, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad9' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad8) == 0x00000A, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad8' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad7) == 0x00000B, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad7' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad6) == 0x00000C, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad6' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad5) == 0x000020, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad5' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_MakeStruct_LinearColor1) == 0x000024, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_MakeStruct_LinearColor1' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000038, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_MakeRotator_ReturnValue) == 0x00003C, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000048, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad4) == 0x00004C, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad4' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad3) == 0x00004D, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad3' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad2) == 0x00004E, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad2' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad1) == 0x00004F, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad1' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_UserStateEvent_bFromLoad) == 0x000050, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_UserStateEvent_bFromLoad' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000054, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_LinearColorLerp_ReturnValue) == 0x000058, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000068, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_CustomEvent_Color_Array_Index) == 0x000078, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_CustomEvent_Color_Array_Index' has a wrong offset!");
static_assert(offsetof(BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight, K2Node_CustomEvent_StateColorEnum) == 0x00007C, "Member 'BP_IO_EmergencyLight_C_ExecuteUbergraph_BP_IO_EmergencyLight::K2Node_CustomEvent_StateColorEnum' has a wrong offset!");

}

