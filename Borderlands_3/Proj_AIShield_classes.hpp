#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_AIShield

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_AIShield.Proj_AIShield_C
// 0x0038 (0x0718 - 0x06E0)
class AProj_AIShield_C : public AOakAIBalancedProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E0(0x0008)(Transient, DuplicateTransient)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailFX;                                           // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ShieldMesh;                                        // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxProjectileMovementComponent*        GbxProjectileMovement;                             // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MyDamageData;                                      // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EOakElementalType                             ElementalType;                                     // 0x0710(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFlight;                                          // 0x0711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_712[0x2];                                      // 0x0712(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBeforeDestruction;                            // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Proj_AIShield(int32 EntryPoint);
	void OnHitNeutral(const struct FHitResult& Hit);
	void OnHitFriendly(const struct FHitResult& Hit);
	void OnHitEnemy(const struct FHitResult& Hit);
	void HNT_Drop();
	void BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void OnHitWorld(const struct FHitResult& Hit);
	void HNT_Throw();
	void BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee(const struct FHitResult& ImpactResult);
	void HNT_Prime();
	void AIMelee_SetNewMeleeWeaponClass(class UClass* NewMeleeWeaponClass);
	void AIMelee_ThrowAtLocation(const struct FVector& LocationToThrowAt, float ThrowSpeed, float ThrowAnglePercentage, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist);
	void AIMelee_ThrowAtActor(class AActor* ActorToThrowAt, float ThrowSpeed, float ThrowAnglePercentage, class FName ActorSocket, const struct FVector& ActorOffset, const struct FRotator& ThrowAngleOffset, float MaxPrediction, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist);
	void AIMelee_ThrowAtTarget(float ThrowSpeed, float ThrowAnglePercent, class FName TargetSocket, const struct FVector& TargetOffset, const struct FRotator& ThrowAngleOffset, float MaxPrediction, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist);
	void AIMelee_Drop(bool RequestNewMeleeWeapon);
	void AIMelee_Spawn();
	void UserConstructionScript();
	void CauseDamageOnImpact(struct FHitResult& Hit);
	void AIMelee_GetElementalTypeFromMeleeWeapon(EOakElementalType* MeleeWeaponElement);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_AIShield_C">();
	}
	static class AProj_AIShield_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_AIShield_C>();
	}
};
static_assert(alignof(AProj_AIShield_C) == 0x000008, "Wrong alignment on AProj_AIShield_C");
static_assert(sizeof(AProj_AIShield_C) == 0x000718, "Wrong size on AProj_AIShield_C");
static_assert(offsetof(AProj_AIShield_C, UberGraphFrame) == 0x0006E0, "Member 'AProj_AIShield_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, RotatingMovement) == 0x0006E8, "Member 'AProj_AIShield_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, TrailFX) == 0x0006F0, "Member 'AProj_AIShield_C::TrailFX' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, ShieldMesh) == 0x0006F8, "Member 'AProj_AIShield_C::ShieldMesh' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, GbxProjectileMovement) == 0x000700, "Member 'AProj_AIShield_C::GbxProjectileMovement' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, MyDamageData) == 0x000708, "Member 'AProj_AIShield_C::MyDamageData' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, ElementalType) == 0x000710, "Member 'AProj_AIShield_C::ElementalType' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, InFlight) == 0x000711, "Member 'AProj_AIShield_C::InFlight' has a wrong offset!");
static_assert(offsetof(AProj_AIShield_C, DelayBeforeDestruction) == 0x000714, "Member 'AProj_AIShield_C::DelayBeforeDestruction' has a wrong offset!");

}

