#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxBlockingVolumes

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GbxBlockingVolumes.GbxBlockingVolume
// 0x0010 (0x04A0 - 0x0490)
class AGbxBlockingVolume final : public AVolume
{
public:
	bool                                          bAlwaysRender;                                     // 0x0490(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockRockets;                                     // 0x0491(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockProjectiles;                                 // 0x0492(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockTossed;                                      // 0x0493(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockEnemyPawns;                                  // 0x0494(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockEnemyVehicles;                               // 0x0495(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockFriendlyPawns;                               // 0x0496(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockPlayerVehicles;                              // 0x0497(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockUsingThings;                                 // 0x0498(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStandingOn;                                  // 0x0499(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockCamera;                                      // 0x049A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyPawnsPropEnabled;                            // 0x049B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyVehiclesPropEnabled;                         // 0x049C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyPawnsPropEnabled;                         // 0x049D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerVehiclesPropEnabled;                        // 0x049E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49F[0x1];                                      // 0x049F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxBlockingVolume">();
	}
	static class AGbxBlockingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxBlockingVolume>();
	}
};
static_assert(alignof(AGbxBlockingVolume) == 0x000008, "Wrong alignment on AGbxBlockingVolume");
static_assert(sizeof(AGbxBlockingVolume) == 0x0004A0, "Wrong size on AGbxBlockingVolume");
static_assert(offsetof(AGbxBlockingVolume, bAlwaysRender) == 0x000490, "Member 'AGbxBlockingVolume::bAlwaysRender' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockRockets) == 0x000491, "Member 'AGbxBlockingVolume::bBlockRockets' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockProjectiles) == 0x000492, "Member 'AGbxBlockingVolume::bBlockProjectiles' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockTossed) == 0x000493, "Member 'AGbxBlockingVolume::bBlockTossed' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockEnemyPawns) == 0x000494, "Member 'AGbxBlockingVolume::bBlockEnemyPawns' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockEnemyVehicles) == 0x000495, "Member 'AGbxBlockingVolume::bBlockEnemyVehicles' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockFriendlyPawns) == 0x000496, "Member 'AGbxBlockingVolume::bBlockFriendlyPawns' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockPlayerVehicles) == 0x000497, "Member 'AGbxBlockingVolume::bBlockPlayerVehicles' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockUsingThings) == 0x000498, "Member 'AGbxBlockingVolume::bBlockUsingThings' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bAllowStandingOn) == 0x000499, "Member 'AGbxBlockingVolume::bAllowStandingOn' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bBlockCamera) == 0x00049A, "Member 'AGbxBlockingVolume::bBlockCamera' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bEnemyPawnsPropEnabled) == 0x00049B, "Member 'AGbxBlockingVolume::bEnemyPawnsPropEnabled' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bEnemyVehiclesPropEnabled) == 0x00049C, "Member 'AGbxBlockingVolume::bEnemyVehiclesPropEnabled' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bFriendlyPawnsPropEnabled) == 0x00049D, "Member 'AGbxBlockingVolume::bFriendlyPawnsPropEnabled' has a wrong offset!");
static_assert(offsetof(AGbxBlockingVolume, bPlayerVehiclesPropEnabled) == 0x00049E, "Member 'AGbxBlockingVolume::bPlayerVehiclesPropEnabled' has a wrong offset!");

// Class GbxBlockingVolumes.GbxBlockingVolumeUserSettings
// 0x0010 (0x0038 - 0x0028)
class UGbxBlockingVolumeUserSettings final : public UObject
{
public:
	bool                                          bAlwaysRenderVolumes;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverRenderVolumes;                               // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockingVolumeOpacity;                             // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertColors;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxBlockingVolumeUserSettings">();
	}
	static class UGbxBlockingVolumeUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxBlockingVolumeUserSettings>();
	}
};
static_assert(alignof(UGbxBlockingVolumeUserSettings) == 0x000008, "Wrong alignment on UGbxBlockingVolumeUserSettings");
static_assert(sizeof(UGbxBlockingVolumeUserSettings) == 0x000038, "Wrong size on UGbxBlockingVolumeUserSettings");
static_assert(offsetof(UGbxBlockingVolumeUserSettings, bAlwaysRenderVolumes) == 0x000028, "Member 'UGbxBlockingVolumeUserSettings::bAlwaysRenderVolumes' has a wrong offset!");
static_assert(offsetof(UGbxBlockingVolumeUserSettings, bNeverRenderVolumes) == 0x000029, "Member 'UGbxBlockingVolumeUserSettings::bNeverRenderVolumes' has a wrong offset!");
static_assert(offsetof(UGbxBlockingVolumeUserSettings, BlockingVolumeOpacity) == 0x00002C, "Member 'UGbxBlockingVolumeUserSettings::BlockingVolumeOpacity' has a wrong offset!");
static_assert(offsetof(UGbxBlockingVolumeUserSettings, bInvertColors) == 0x000030, "Member 'UGbxBlockingVolumeUserSettings::bInvertColors' has a wrong offset!");

}

