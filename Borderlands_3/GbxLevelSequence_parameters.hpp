#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxLevelSequence

#include "Basic.hpp"

#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function GbxLevelSequence.GbxLevelSequenceActor.PlayLooping
// 0x0004 (0x0004 - 0x0000)
struct GbxLevelSequenceActor_PlayLooping final
{
public:
	int32                                         NumLoops;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceActor_PlayLooping) == 0x000004, "Wrong alignment on GbxLevelSequenceActor_PlayLooping");
static_assert(sizeof(GbxLevelSequenceActor_PlayLooping) == 0x000004, "Wrong size on GbxLevelSequenceActor_PlayLooping");
static_assert(offsetof(GbxLevelSequenceActor_PlayLooping, NumLoops) == 0x000000, "Member 'GbxLevelSequenceActor_PlayLooping::NumLoops' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceActor.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct GbxLevelSequenceActor_SetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceActor_SetPlayRate) == 0x000004, "Wrong alignment on GbxLevelSequenceActor_SetPlayRate");
static_assert(sizeof(GbxLevelSequenceActor_SetPlayRate) == 0x000004, "Wrong size on GbxLevelSequenceActor_SetPlayRate");
static_assert(offsetof(GbxLevelSequenceActor_SetPlayRate, PlayRate) == 0x000000, "Member 'GbxLevelSequenceActor_SetPlayRate::PlayRate' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceActor.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct GbxLevelSequenceActor_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceActor_GetPlayRate) == 0x000004, "Wrong alignment on GbxLevelSequenceActor_GetPlayRate");
static_assert(sizeof(GbxLevelSequenceActor_GetPlayRate) == 0x000004, "Wrong size on GbxLevelSequenceActor_GetPlayRate");
static_assert(offsetof(GbxLevelSequenceActor_GetPlayRate, ReturnValue) == 0x000000, "Member 'GbxLevelSequenceActor_GetPlayRate::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceActor.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct GbxLevelSequenceActor_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceActor_IsFinished) == 0x000001, "Wrong alignment on GbxLevelSequenceActor_IsFinished");
static_assert(sizeof(GbxLevelSequenceActor_IsFinished) == 0x000001, "Wrong size on GbxLevelSequenceActor_IsFinished");
static_assert(offsetof(GbxLevelSequenceActor_IsFinished, ReturnValue) == 0x000000, "Member 'GbxLevelSequenceActor_IsFinished::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceActor.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct GbxLevelSequenceActor_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceActor_IsPaused) == 0x000001, "Wrong alignment on GbxLevelSequenceActor_IsPaused");
static_assert(sizeof(GbxLevelSequenceActor_IsPaused) == 0x000001, "Wrong size on GbxLevelSequenceActor_IsPaused");
static_assert(offsetof(GbxLevelSequenceActor_IsPaused, ReturnValue) == 0x000000, "Member 'GbxLevelSequenceActor_IsPaused::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceActor.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct GbxLevelSequenceActor_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceActor_IsPlaying) == 0x000001, "Wrong alignment on GbxLevelSequenceActor_IsPlaying");
static_assert(sizeof(GbxLevelSequenceActor_IsPlaying) == 0x000001, "Wrong size on GbxLevelSequenceActor_IsPlaying");
static_assert(offsetof(GbxLevelSequenceActor_IsPlaying, ReturnValue) == 0x000000, "Member 'GbxLevelSequenceActor_IsPlaying::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequencePlayer.CreateGbxLevelSequencePlayer
// 0x0070 (0x0070 - 0x0000)
struct GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlay;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneSequencePlaybackSettings    Settings;                                          // 0x0018(0x0048)(Parm, NativeAccessSpecifierPublic)
	class AGbxLevelSequenceActor*                 OutActor;                                          // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxLevelSequencePlayer*                ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer) == 0x000008, "Wrong alignment on GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer");
static_assert(sizeof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer) == 0x000070, "Wrong size on GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer");
static_assert(offsetof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer, WorldContextObject) == 0x000000, "Member 'GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer, LevelSequence) == 0x000008, "Member 'GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer::LevelSequence' has a wrong offset!");
static_assert(offsetof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer, bPlay) == 0x000010, "Member 'GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer::bPlay' has a wrong offset!");
static_assert(offsetof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer, Settings) == 0x000018, "Member 'GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer::Settings' has a wrong offset!");
static_assert(offsetof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer, OutActor) == 0x000060, "Member 'GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer::OutActor' has a wrong offset!");
static_assert(offsetof(GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer, ReturnValue) == 0x000068, "Member 'GbxLevelSequencePlayer_CreateGbxLevelSequencePlayer::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequencePlayer.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct GbxLevelSequencePlayer_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequencePlayer_IsFinished) == 0x000001, "Wrong alignment on GbxLevelSequencePlayer_IsFinished");
static_assert(sizeof(GbxLevelSequencePlayer_IsFinished) == 0x000001, "Wrong size on GbxLevelSequencePlayer_IsFinished");
static_assert(offsetof(GbxLevelSequencePlayer_IsFinished, ReturnValue) == 0x000000, "Member 'GbxLevelSequencePlayer_IsFinished::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceThrottleLibrary.ClearLimitGroup
// 0x0008 (0x0008 - 0x0000)
struct GbxLevelSequenceThrottleLibrary_ClearLimitGroup final
{
public:
	class FName                                   Group;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceThrottleLibrary_ClearLimitGroup) == 0x000004, "Wrong alignment on GbxLevelSequenceThrottleLibrary_ClearLimitGroup");
static_assert(sizeof(GbxLevelSequenceThrottleLibrary_ClearLimitGroup) == 0x000008, "Wrong size on GbxLevelSequenceThrottleLibrary_ClearLimitGroup");
static_assert(offsetof(GbxLevelSequenceThrottleLibrary_ClearLimitGroup, Group) == 0x000000, "Member 'GbxLevelSequenceThrottleLibrary_ClearLimitGroup::Group' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceThrottleLibrary.LimitSequenceActor
// 0x0010 (0x0010 - 0x0000)
struct GbxLevelSequenceThrottleLibrary_LimitSequenceActor final
{
public:
	class AGbxLevelSequenceActor*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceThrottleLibrary_LimitSequenceActor) == 0x000008, "Wrong alignment on GbxLevelSequenceThrottleLibrary_LimitSequenceActor");
static_assert(sizeof(GbxLevelSequenceThrottleLibrary_LimitSequenceActor) == 0x000010, "Wrong size on GbxLevelSequenceThrottleLibrary_LimitSequenceActor");
static_assert(offsetof(GbxLevelSequenceThrottleLibrary_LimitSequenceActor, Player) == 0x000000, "Member 'GbxLevelSequenceThrottleLibrary_LimitSequenceActor::Player' has a wrong offset!");
static_assert(offsetof(GbxLevelSequenceThrottleLibrary_LimitSequenceActor, Group) == 0x000008, "Member 'GbxLevelSequenceThrottleLibrary_LimitSequenceActor::Group' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceThrottleLibrary.ShouldLimitSequenceGroup
// 0x0010 (0x0010 - 0x0000)
struct GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup final
{
public:
	class FName                                   InGroup;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup) == 0x000004, "Wrong alignment on GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup");
static_assert(sizeof(GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup) == 0x000010, "Wrong size on GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup");
static_assert(offsetof(GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup, InGroup) == 0x000000, "Member 'GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup::InGroup' has a wrong offset!");
static_assert(offsetof(GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup, ReturnValue) == 0x000008, "Member 'GbxLevelSequenceThrottleLibrary_ShouldLimitSequenceGroup::ReturnValue' has a wrong offset!");

// Function GbxLevelSequence.GbxLevelSequenceThrottleLibrary.UnlimitSequenceActor
// 0x0008 (0x0008 - 0x0000)
struct GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor final
{
public:
	class AGbxLevelSequenceActor*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor) == 0x000008, "Wrong alignment on GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor");
static_assert(sizeof(GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor) == 0x000008, "Wrong size on GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor");
static_assert(offsetof(GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor, Player) == 0x000000, "Member 'GbxLevelSequenceThrottleLibrary_UnlimitSequenceActor::Player' has a wrong offset!");

}

