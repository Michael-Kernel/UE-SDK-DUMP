#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_ChallengesCompleted

#include "Basic.hpp"


namespace SDK::Params
{

// Function Challenge_ChallengesCompleted.Challenge_ChallengesCompleted_C.ExecuteUbergraph_Challenge_ChallengesCompleted
// 0x0028 (0x0028 - 0x0000)
struct Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChallengesComponent*                   K2Node_Event_OwningChallenges;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          K2Node_Event_AssociatedCharacter;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChallengesComponent*                   K2Node_CustomEvent_ChallengeComponent;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_CustomEvent_ChallengeClass;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted) == 0x000008, "Wrong alignment on Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted");
static_assert(sizeof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted) == 0x000028, "Wrong size on Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted, EntryPoint) == 0x000000, "Member 'Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted, K2Node_Event_OwningChallenges) == 0x000008, "Member 'Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted::K2Node_Event_OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted, K2Node_Event_AssociatedCharacter) == 0x000010, "Member 'Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted::K2Node_Event_AssociatedCharacter' has a wrong offset!");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted, K2Node_CustomEvent_ChallengeComponent) == 0x000018, "Member 'Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted::K2Node_CustomEvent_ChallengeComponent' has a wrong offset!");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted, K2Node_CustomEvent_ChallengeClass) == 0x000020, "Member 'Challenge_ChallengesCompleted_C_ExecuteUbergraph_Challenge_ChallengesCompleted::K2Node_CustomEvent_ChallengeClass' has a wrong offset!");

// Function Challenge_ChallengesCompleted.Challenge_ChallengesCompleted_C.ChallengeCompleted
// 0x0010 (0x0010 - 0x0000)
struct Challenge_ChallengesCompleted_C_ChallengeCompleted final
{
public:
	class UChallengesComponent*                   ChallengeComponent;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ChallengeClass;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ChallengesCompleted_C_ChallengeCompleted) == 0x000008, "Wrong alignment on Challenge_ChallengesCompleted_C_ChallengeCompleted");
static_assert(sizeof(Challenge_ChallengesCompleted_C_ChallengeCompleted) == 0x000010, "Wrong size on Challenge_ChallengesCompleted_C_ChallengeCompleted");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ChallengeCompleted, ChallengeComponent) == 0x000000, "Member 'Challenge_ChallengesCompleted_C_ChallengeCompleted::ChallengeComponent' has a wrong offset!");
static_assert(offsetof(Challenge_ChallengesCompleted_C_ChallengeCompleted, ChallengeClass) == 0x000008, "Member 'Challenge_ChallengesCompleted_C_ChallengeCompleted::ChallengeClass' has a wrong offset!");

// Function Challenge_ChallengesCompleted.Challenge_ChallengesCompleted_C.OnInitChallengeInstance
// 0x0010 (0x0010 - 0x0000)
struct Challenge_ChallengesCompleted_C_OnInitChallengeInstance final
{
public:
	class UChallengesComponent*                   OwningChallenges;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          AssociatedCharacter;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ChallengesCompleted_C_OnInitChallengeInstance) == 0x000008, "Wrong alignment on Challenge_ChallengesCompleted_C_OnInitChallengeInstance");
static_assert(sizeof(Challenge_ChallengesCompleted_C_OnInitChallengeInstance) == 0x000010, "Wrong size on Challenge_ChallengesCompleted_C_OnInitChallengeInstance");
static_assert(offsetof(Challenge_ChallengesCompleted_C_OnInitChallengeInstance, OwningChallenges) == 0x000000, "Member 'Challenge_ChallengesCompleted_C_OnInitChallengeInstance::OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_ChallengesCompleted_C_OnInitChallengeInstance, AssociatedCharacter) == 0x000008, "Member 'Challenge_ChallengesCompleted_C_OnInitChallengeInstance::AssociatedCharacter' has a wrong offset!");

}

