#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Condition_VendingMachine_CanUseAmmoRefill

#include "Basic.hpp"


namespace SDK::Params
{

// Function Condition_VendingMachine_CanUseAmmoRefill.Condition_VendingMachine_CanUseAmmoRefill_C.AmmoIsFull
// 0x0028 (0x0028 - 0x0000)
struct Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull final
{
public:
	class AOakCharacter*                          Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UGbxAttributeData*                Current;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UGbxAttributeData*                Max;                                               // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Full;                                              // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueOfAttribute_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue1;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull) == 0x000008, "Wrong alignment on Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull");
static_assert(sizeof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull) == 0x000028, "Wrong size on Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, Character) == 0x000000, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::Character' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, Current) == 0x000008, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::Current' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, Max) == 0x000010, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::Max' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, Full) == 0x000018, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::Full' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, CallFunc_GetValueOfAttribute_ReturnValue) == 0x00001C, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::CallFunc_GetValueOfAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, CallFunc_GetValueOfAttribute_ReturnValue1) == 0x000020, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::CallFunc_GetValueOfAttribute_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_AmmoIsFull::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function Condition_VendingMachine_CanUseAmmoRefill.Condition_VendingMachine_CanUseAmmoRefill_C.EvaluateCondition
// 0x0030 (0x0030 - 0x0000)
struct Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                OptionalContext;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full1;                         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full2;                         // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full3;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full4;                         // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full5;                         // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AmmoIsFull_Full6;                         // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue4;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue5;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition) == 0x000008, "Wrong alignment on Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition");
static_assert(sizeof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition) == 0x000030, "Wrong size on Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, Context) == 0x000000, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::Context' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, OptionalContext) == 0x000008, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::OptionalContext' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, ReturnValue) == 0x000010, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::ReturnValue' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000018, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full) == 0x000021, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full1) == 0x000022, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full1' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full2) == 0x000023, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full2' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full3) == 0x000024, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full3' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full4) == 0x000025, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full4' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full5) == 0x000026, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full5' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_AmmoIsFull_Full6) == 0x000027, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_AmmoIsFull_Full6' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_BooleanAND_ReturnValue1) == 0x000029, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_BooleanAND_ReturnValue2) == 0x00002A, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_BooleanAND_ReturnValue3) == 0x00002B, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_BooleanAND_ReturnValue4) == 0x00002C, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_BooleanAND_ReturnValue4' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_BooleanAND_ReturnValue5) == 0x00002D, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_BooleanAND_ReturnValue5' has a wrong offset!");
static_assert(offsetof(Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'Condition_VendingMachine_CanUseAmmoRefill_C_EvaluateCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

