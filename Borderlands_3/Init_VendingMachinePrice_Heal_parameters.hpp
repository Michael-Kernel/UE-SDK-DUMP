#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Init_VendingMachinePrice_Heal

#include "Basic.hpp"


namespace SDK::Params
{

// Function Init_VendingMachinePrice_Heal.Init_VendingMachinePrice_Heal_C.CalculateAttributeInitialValue
// 0x0080 (0x0080 - 0x0000)
struct Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGbxCharacter*                          MyChar;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueOfAttribute_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          CallFunc_GetPrimaryCharacter_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueOfAttribute_ReturnValue1;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue2;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue3;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue4;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue5;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue6;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue7;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue1;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue8;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue1;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue) == 0x000008, "Wrong alignment on Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue");
static_assert(sizeof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue) == 0x000080, "Wrong size on Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, Context) == 0x000000, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::Context' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, ReturnValue) == 0x000008, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, MyChar) == 0x000010, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::MyChar' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000018, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue) == 0x000024, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetPrimaryCharacter_ReturnValue) == 0x000028, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetPrimaryCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue1) == 0x000034, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue2) == 0x000038, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue3) == 0x00003C, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue4) == 0x000040, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue4' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue5) == 0x000044, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue5' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue6) == 0x00004C, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue6' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue7) == 0x000054, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue7' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_FCeil_ReturnValue) == 0x000058, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x00005C, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000060, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000064, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_FMax_ReturnValue) == 0x000068, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_FCeil_ReturnValue1) == 0x00006C, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_FCeil_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_GetValueOfAttribute_ReturnValue8) == 0x000070, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_GetValueOfAttribute_ReturnValue8' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x000074, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue, CallFunc_FMax_ReturnValue1) == 0x000078, "Member 'Init_VendingMachinePrice_Heal_C_CalculateAttributeInitialValue::CallFunc_FMax_ReturnValue1' has a wrong offset!");

// Function Init_VendingMachinePrice_Heal.Init_VendingMachinePrice_Heal_C.CalcAmmoCost
// 0x0050 (0x0050 - 0x0000)
struct Init_VendingMachinePrice_Heal_C_CalcAmmoCost final
{
public:
	class UObject*                                CharContext;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UGbxAttributeData*                AmmoMax;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UGbxAttributeData*                AmmoCurrent;                                       // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UGbxAttributeData*                AmmoStackCount;                                    // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UGbxAttributeData*                AmmoStackCost;                                     // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue1;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue2;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueOfAttribute_ReturnValue3;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost) == 0x000008, "Wrong alignment on Init_VendingMachinePrice_Heal_C_CalcAmmoCost");
static_assert(sizeof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost) == 0x000050, "Wrong size on Init_VendingMachinePrice_Heal_C_CalcAmmoCost");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CharContext) == 0x000000, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CharContext' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, AmmoMax) == 0x000008, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::AmmoMax' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, AmmoCurrent) == 0x000010, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::AmmoCurrent' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, AmmoStackCount) == 0x000018, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::AmmoStackCount' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, AmmoStackCost) == 0x000020, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::AmmoStackCost' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, ReturnValue) == 0x000028, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_GetValueOfAttribute_ReturnValue) == 0x00002C, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_GetValueOfAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_GetValueOfAttribute_ReturnValue1) == 0x000030, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_GetValueOfAttribute_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_GetValueOfAttribute_ReturnValue2) == 0x000034, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_GetValueOfAttribute_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_GetValueOfAttribute_ReturnValue3) == 0x000038, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_GetValueOfAttribute_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_FCeil_ReturnValue) == 0x000044, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(Init_VendingMachinePrice_Heal_C_CalcAmmoCost, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000048, "Member 'Init_VendingMachinePrice_Heal_C_CalcAmmoCost::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");

}

