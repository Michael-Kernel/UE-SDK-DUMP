#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_Ringer

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_Ringer.Proj_Ringer_C
// 0x0090 (0x0770 - 0x06E0)
class AProj_Ringer_C final : public AOakAIBalancedProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E0(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       SphereCollision;                                   // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Stage3;                                            // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Stage2;                                            // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PrimedFX;                                          // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              Switch_FuseSparks;                                 // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   WwiseAudio;                                        // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetableComponent*                   Targetable;                                        // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakDamageComponent*                    OakDamage;                                         // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ExplosiveMesh;                                     // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGbxProjectileMovementComponent*        GbxProjectileMovement;                             // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PrimedLight;                                       // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MyDamageData;                                      // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsPrimed;                                          // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UExplosionData*                         MyExplosionData;                                   // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ElementalDamageType;                               // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeDamage;                                     // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeRadius;                                     // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Proj_Ringer(int32 EntryPoint);
	void FuseTimerExpired();
	void OnHitDamagableObject(const struct FHitResult& Hit);
	void BndEvt__OakDamage_K2Node_ComponentBoundEvent_2_DamageCompHealthDepletedDelegate__DelegateSignature_Proj_TinkSuicide_ExplosiveBomb(class UDamageComponent* DamageReceiver, class UDamageCauserComponent* DamageCauser);
	void ReceiveBeginPlay();
	void OnExplode();
	void BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_4_OnProjectileBounceDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void HNT_Throw();
	void HNT_Drop();
	void HNT_Prime();
	void TinkSuicideBomb_StartSuicide();
	void TinkSuicideBomb_SetCurrentHealth(float NewCurrentHealth);
	void TinkSuicideBomb_SetFuseTimer(float NewFuseTime);
	void InitializeElement(EOakElementalType ElementType);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_Ringer_C">();
	}
	static class AProj_Ringer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_Ringer_C>();
	}
};
static_assert(alignof(AProj_Ringer_C) == 0x000008, "Wrong alignment on AProj_Ringer_C");
static_assert(sizeof(AProj_Ringer_C) == 0x000770, "Wrong size on AProj_Ringer_C");
static_assert(offsetof(AProj_Ringer_C, UberGraphFrame) == 0x0006E0, "Member 'AProj_Ringer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, SphereCollision) == 0x0006E8, "Member 'AProj_Ringer_C::SphereCollision' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, Stage3) == 0x0006F0, "Member 'AProj_Ringer_C::Stage3' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, Stage2) == 0x0006F8, "Member 'AProj_Ringer_C::Stage2' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, PrimedFX) == 0x000700, "Member 'AProj_Ringer_C::PrimedFX' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, Switch_FuseSparks) == 0x000708, "Member 'AProj_Ringer_C::Switch_FuseSparks' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, WwiseAudio) == 0x000710, "Member 'AProj_Ringer_C::WwiseAudio' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, Targetable) == 0x000718, "Member 'AProj_Ringer_C::Targetable' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, OakDamage) == 0x000720, "Member 'AProj_Ringer_C::OakDamage' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, ExplosiveMesh) == 0x000728, "Member 'AProj_Ringer_C::ExplosiveMesh' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, GbxProjectileMovement) == 0x000730, "Member 'AProj_Ringer_C::GbxProjectileMovement' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, PrimedLight) == 0x000738, "Member 'AProj_Ringer_C::PrimedLight' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, RotatingMovement) == 0x000740, "Member 'AProj_Ringer_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, MyDamageData) == 0x000748, "Member 'AProj_Ringer_C::MyDamageData' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, IsPrimed) == 0x000750, "Member 'AProj_Ringer_C::IsPrimed' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, MyExplosionData) == 0x000758, "Member 'AProj_Ringer_C::MyExplosionData' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, ElementalDamageType) == 0x000760, "Member 'AProj_Ringer_C::ElementalDamageType' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, GrenadeDamage) == 0x000768, "Member 'AProj_Ringer_C::GrenadeDamage' has a wrong offset!");
static_assert(offsetof(AProj_Ringer_C, GrenadeRadius) == 0x00076C, "Member 'AProj_Ringer_C::GrenadeRadius' has a wrong offset!");

}

