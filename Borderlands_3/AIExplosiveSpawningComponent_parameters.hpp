#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIExplosiveSpawningComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.ExecuteUbergraph_AIExplosiveSpawningComponent
// 0x00E8 (0x00E8 - 0x0000)
struct AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_KillSelfOnDetonate;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_RequestNewExplosive4;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InstigatorOverride1;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed2;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercent;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_TargetSocket;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_TargetOffset;                         // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset1;                    // 0x002C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction1;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewExplosive3;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesn_tExist;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_RequestNewExplosive2;                 // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InstigatorOverride;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ActorToThrowAt;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage1;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ActorSocket;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ActorOffset;                          // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset;                     // 0x006C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewExplosive1;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist1;                  // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_LocationToThrowAt;                    // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed;                           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewExplosive;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist;                   // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Event_NewExplosiveClass;                    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue;                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue1;                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue2;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue3;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHeldActor_ReturnValue4;                // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent) == 0x000008, "Wrong alignment on AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent");
static_assert(sizeof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent) == 0x0000E8, "Wrong size on AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, EntryPoint) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_KillSelfOnDetonate) == 0x000004, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_KillSelfOnDetonate' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_RequestNewExplosive4) == 0x000005, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_RequestNewExplosive4' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_InstigatorOverride1) == 0x000008, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_InstigatorOverride1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowSpeed2) == 0x000010, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowSpeed2' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowAnglePercent) == 0x000014, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_TargetSocket) == 0x000018, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_TargetSocket' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_TargetOffset) == 0x000020, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_TargetOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowAngleOffset1) == 0x00002C, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowAngleOffset1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_MaxPrediction1) == 0x000038, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_MaxPrediction1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_RequestNewExplosive3) == 0x00003C, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_RequestNewExplosive3' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_SpawnIfDoesn_tExist) == 0x00003D, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_SpawnIfDoesn_tExist' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_RequestNewExplosive2) == 0x00003E, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_RequestNewExplosive2' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_InstigatorOverride) == 0x000040, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_InstigatorOverride' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ActorToThrowAt) == 0x000048, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowSpeed1) == 0x000050, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowSpeed1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowAnglePercentage1) == 0x000054, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowAnglePercentage1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ActorSocket) == 0x000058, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ActorSocket' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ActorOffset) == 0x000060, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ActorOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowAngleOffset) == 0x00006C, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_MaxPrediction) == 0x000078, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_RequestNewExplosive1) == 0x00007C, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_RequestNewExplosive1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_SpawnIfDoesntExist1) == 0x00007D, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_SpawnIfDoesntExist1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_LocationToThrowAt) == 0x000080, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowSpeed) == 0x00008C, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_ThrowAnglePercentage) == 0x000090, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_RequestNewExplosive) == 0x000094, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_RequestNewExplosive' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_SpawnIfDoesntExist) == 0x000095, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_SpawnIfDoesntExist' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, K2Node_Event_NewExplosiveClass) == 0x000098, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::K2Node_Event_NewExplosiveClass' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_GetHeldActor_ReturnValue) == 0x0000A0, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_GetHeldActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_GetHeldActor_ReturnValue1) == 0x0000B0, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_GetHeldActor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_IsValid_ReturnValue1) == 0x0000B8, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_GetHeldActor_ReturnValue2) == 0x0000C0, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_GetHeldActor_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_IsValid_ReturnValue2) == 0x0000C8, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_GetHeldActor_ReturnValue3) == 0x0000D0, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_GetHeldActor_ReturnValue3' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_GetHeldActor_ReturnValue4) == 0x0000D8, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_GetHeldActor_ReturnValue4' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_IsValid_ReturnValue3) == 0x0000E0, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent, CallFunc_IsValid_ReturnValue4) == 0x0000E1, "Member 'AIExplosiveSpawningComponent_C_ExecuteUbergraph_AIExplosiveSpawningComponent::CallFunc_IsValid_ReturnValue4' has a wrong offset!");

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.AIExplosive_SetNewExplosiveClass
// 0x0008 (0x0008 - 0x0000)
struct AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass final
{
public:
	class UClass*                                 NewExplosiveClass;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass) == 0x000008, "Wrong alignment on AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass");
static_assert(sizeof(AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass) == 0x000008, "Wrong size on AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass, NewExplosiveClass) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_SetNewExplosiveClass::NewExplosiveClass' has a wrong offset!");

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.AIExplosive_ThrowAtLocation
// 0x0018 (0x0018 - 0x0000)
struct AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation final
{
public:
	struct FVector                                LocationToThrowAt;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewExplosive;                               // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation) == 0x000004, "Wrong alignment on AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation");
static_assert(sizeof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation) == 0x000018, "Wrong size on AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation, LocationToThrowAt) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation::LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation, ThrowSpeed) == 0x00000C, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation, ThrowAnglePercentage) == 0x000010, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation, RequestNewExplosive) == 0x000014, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation::RequestNewExplosive' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation, SpawnIfDoesntExist) == 0x000015, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtLocation::SpawnIfDoesntExist' has a wrong offset!");

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.AIExplosive_ThrowAtActor
// 0x0038 (0x0038 - 0x0000)
struct AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor final
{
public:
	class AActor*                                 ActorToThrowAt;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActorSocket;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewExplosive;                               // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor) == 0x000008, "Wrong alignment on AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor");
static_assert(sizeof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor) == 0x000038, "Wrong size on AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, ActorToThrowAt) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, ThrowSpeed) == 0x000008, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, ThrowAnglePercentage) == 0x00000C, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, ActorSocket) == 0x000010, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::ActorSocket' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, ActorOffset) == 0x000018, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::ActorOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, ThrowAngleOffset) == 0x000024, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, MaxPrediction) == 0x000030, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, RequestNewExplosive) == 0x000034, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::RequestNewExplosive' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor, SpawnIfDoesntExist) == 0x000035, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtActor::SpawnIfDoesntExist' has a wrong offset!");

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.AIExplosive_Drop
// 0x0010 (0x0010 - 0x0000)
struct AIExplosiveSpawningComponent_C_AIExplosive_Drop final
{
public:
	bool                                          RequestNewExplosive;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InstigatorOverride;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_AIExplosive_Drop) == 0x000008, "Wrong alignment on AIExplosiveSpawningComponent_C_AIExplosive_Drop");
static_assert(sizeof(AIExplosiveSpawningComponent_C_AIExplosive_Drop) == 0x000010, "Wrong size on AIExplosiveSpawningComponent_C_AIExplosive_Drop");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_Drop, RequestNewExplosive) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_Drop::RequestNewExplosive' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_Drop, InstigatorOverride) == 0x000008, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_Drop::InstigatorOverride' has a wrong offset!");

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.AIExplosive_ThrowAtTarget
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget final
{
public:
	float                                         ThrowSpeed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercent;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewExplosive;                               // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesn_tExist;                               // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget) == 0x000008, "Wrong alignment on AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget");
static_assert(sizeof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget) == 0x000030, "Wrong size on AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, ThrowSpeed) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, ThrowAnglePercent) == 0x000004, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, TargetSocket) == 0x000008, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::TargetSocket' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, TargetOffset) == 0x000010, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, ThrowAngleOffset) == 0x00001C, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, MaxPrediction) == 0x000028, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::MaxPrediction' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, RequestNewExplosive) == 0x00002C, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::RequestNewExplosive' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget, SpawnIfDoesn_tExist) == 0x00002D, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_ThrowAtTarget::SpawnIfDoesn_tExist' has a wrong offset!");

// Function AIExplosiveSpawningComponent.AIExplosiveSpawningComponent_C.AIExplosive_Detonate
// 0x0010 (0x0010 - 0x0000)
struct AIExplosiveSpawningComponent_C_AIExplosive_Detonate final
{
public:
	bool                                          KillSelfOnDetonate;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RequestNewExplosive;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InstigatorOverride;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIExplosiveSpawningComponent_C_AIExplosive_Detonate) == 0x000008, "Wrong alignment on AIExplosiveSpawningComponent_C_AIExplosive_Detonate");
static_assert(sizeof(AIExplosiveSpawningComponent_C_AIExplosive_Detonate) == 0x000010, "Wrong size on AIExplosiveSpawningComponent_C_AIExplosive_Detonate");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_Detonate, KillSelfOnDetonate) == 0x000000, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_Detonate::KillSelfOnDetonate' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_Detonate, RequestNewExplosive) == 0x000001, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_Detonate::RequestNewExplosive' has a wrong offset!");
static_assert(offsetof(AIExplosiveSpawningComponent_C_AIExplosive_Detonate, InstigatorOverride) == 0x000008, "Member 'AIExplosiveSpawningComponent_C_AIExplosive_Detonate::InstigatorOverride' has a wrong offset!");

}

