#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mission_EchoNetNeutrality

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_OakMission_classes.hpp"
#include "GbxMission_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mission_EchoNetNeutrality.Mission_EchoNetNeutrality_C
// 0x0100 (0x0610 - 0x0510)
class UMission_EchoNetNeutrality_C final : public UBP_OakMission_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Mission_EchoNetNeutrality_C;        // 0x0510(0x0008)(Transient, DuplicateTransient)
	class UMissionObjectiveSet*                   Set_GoToEchoNetHub_ObjSetVar;                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_GoToEchoNetHub_ObjVar;                         // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_DestroyUgThak_ObjSetVar;                       // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_KillCoVMinusWave2_ObjSetVar;                   // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_OpenPipes_ObjSetVar;                           // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_TurnIn_ObjSetVar;                              // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_DestroyUgThak_ObjVar;                          // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_KillCoV_ObjVar;                                // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenPipes_ObjVar;                              // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_TurnIn_ObjVar;                                 // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_KillRealUgThak_ObjSetVar;                      // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_LocateUgThak_ObjSetVar;                        // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_LocateUgThak_ObjVar;                           // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_KillRealUgThak_ObjVar;                         // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_OpenControlRoom_ObjSetVar;                     // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenControlRoom_INVS_ObjVar;                   // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_DamageUgThak_INVS_ObjVar;                      // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_LeaveShack_INVS_ObjVar;                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_FindControlRoom_INVS_ObjVar;                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_FindControlRoom_ObjSetVar;                     // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_TriggerBadassAttack_INVS_ObjVar;               // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_KillCoVMinusWave1_ObjSetVar;                   // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_KillCoVMinusWave1_INVS_ObjVar;                 // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_KillCoVMinusWave2_INVS_ObjVar;                 // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenPipe1_ObjVar;                              // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenPipe2_ObjVar;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenPipe3_ObjVar;                              // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenPipe4_ObjVar;                              // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_OpenPipe5_ObjVar;                              // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjectiveSet*                   Set_TalkToLordOfSkags_ObjSetVar;                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMissionObjective*                      Obj_TalkToEdgren_ObjVar;                           // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Mission_EchoNetNeutrality(int32 EntryPoint);
	void Obj_GoToEchoNetHub(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Set_GoToEchoNetHub(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void Update_TurnIn(class UObject* Context);
	void Set_DestroyUgThak(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void Set_KillCoVMinusWave2(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void UPDATE_GoToEchoNetHub(class UObject* Context);
	void Set_OpenPipes(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void Set_TurnIn(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void UPDATE_TalkToEdgren(class UObject* Context);
	void Obj_TalkToEdgren(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Set_TalkToLordOfSkags(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void Obj_DestroyUgThak(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void MissionKickoff();
	void UPDATE_OpenPipe5(class UObject* Context);
	void UPDATE_OpenPipe4(class UObject* Context);
	void UPDATE_OpenPipe3(class UObject* Context);
	void UPDATE_OpenPipe2(class UObject* Context);
	void UPDATE_OpenPipe1(class UObject* Context);
	void UPDATE_OpenedPipe(class UObject* Context);
	void Obj_OpenPipe5(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_OpenPipe4(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_OpenPipe3(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_OpenPipe2(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_OpenPipe1(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void UPDATE_KillCoVMinusWave2(class UObject* Context);
	void Obj_KillCoVMinusWave2_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void _Obj_KillCoV_Objective__PROXY_1();
	void UPDATE_KillCoVMinusWave1(class UObject* Context);
	void Obj_KillCoVMinusWave1_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Set_KillCoVMinusWave1(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void UPDATE_TriggerBadassAttack(class UObject* Context);
	void Obj_TriggerBadassAttack_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void _Obj_LocateUgThak_Objective__PROXY_0();
	void _Obj_LocateUgThak_Objective__PROXY();
	void Set_FindControlRoom(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void UPDATE_FindControlRoom(class UObject* Context);
	void Obj_FindControlRoom_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void UPDATE_LeaveShack(class UObject* Context);
	void Obj_LeaveShack_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_DamageUgThak_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void UPDATE_OpenControlRoom(class UObject* Context);
	void Obj_OpenControlRoom_INVS(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Set_OpenControlRoom(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void Obj_KillCoV(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_OpenPipes(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Obj_TurnIn(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void UPDATE_KillRealUgThak(class UObject* Context);
	void Obj_KillRealUgThak(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void UPDATE_DamageUgThak(class UObject* Context);
	void UPDATE_LocateUgThak(class UObject* Context);
	void Set_KillRealUgThak(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void Obj_LocateUgThak(EMissionObjectiveEvent ObjectiveEvent, int32 ObjectiveCount);
	void Set_LocateUgThak(EMissionObjectiveSetEvent ObjectiveSetEvent);
	void OnDialogSequenceFinished_22();
	void OnDialogSequenceFinished_23();
	void OnDialogSequenceFinished_24();
	void OnDialogSequenceFinished_25();
	void OnDialogSequenceFinished_26();
	void OnDialogSequenceFinished_27();
	void OnDialogSequenceFinished_28();
	void OnDialogSequenceFinished_29();
	void OnDialogSequenceFinished_30();
	void OnDialogSequenceFinished_31();
	void OnDialogSequenceFinished_32();
	void OnDialogSequenceFinished_33();
	void OnDialogSequenceFinished_34();
	void OnDialogSequenceFinished_35();
	void OnDialogSequenceFinished_36();
	void OnDialogSequenceFinished_37();
	void OnDialogSequenceFinished_38();
	void OnDialogSequenceFinished_39();
	void OnDialogSequenceFinished_40();
	void OnDialogSequenceFinished_41();
	void OnDialogSequenceFinished_42();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mission_EchoNetNeutrality_C">();
	}
	static class UMission_EchoNetNeutrality_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMission_EchoNetNeutrality_C>();
	}
};
static_assert(alignof(UMission_EchoNetNeutrality_C) == 0x000008, "Wrong alignment on UMission_EchoNetNeutrality_C");
static_assert(sizeof(UMission_EchoNetNeutrality_C) == 0x000610, "Wrong size on UMission_EchoNetNeutrality_C");
static_assert(offsetof(UMission_EchoNetNeutrality_C, UberGraphFrame_Mission_EchoNetNeutrality_C) == 0x000510, "Member 'UMission_EchoNetNeutrality_C::UberGraphFrame_Mission_EchoNetNeutrality_C' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_GoToEchoNetHub_ObjSetVar) == 0x000518, "Member 'UMission_EchoNetNeutrality_C::Set_GoToEchoNetHub_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_GoToEchoNetHub_ObjVar) == 0x000520, "Member 'UMission_EchoNetNeutrality_C::Obj_GoToEchoNetHub_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_DestroyUgThak_ObjSetVar) == 0x000528, "Member 'UMission_EchoNetNeutrality_C::Set_DestroyUgThak_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_KillCoVMinusWave2_ObjSetVar) == 0x000530, "Member 'UMission_EchoNetNeutrality_C::Set_KillCoVMinusWave2_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_OpenPipes_ObjSetVar) == 0x000538, "Member 'UMission_EchoNetNeutrality_C::Set_OpenPipes_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_TurnIn_ObjSetVar) == 0x000540, "Member 'UMission_EchoNetNeutrality_C::Set_TurnIn_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_DestroyUgThak_ObjVar) == 0x000548, "Member 'UMission_EchoNetNeutrality_C::Obj_DestroyUgThak_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_KillCoV_ObjVar) == 0x000550, "Member 'UMission_EchoNetNeutrality_C::Obj_KillCoV_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenPipes_ObjVar) == 0x000558, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenPipes_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_TurnIn_ObjVar) == 0x000560, "Member 'UMission_EchoNetNeutrality_C::Obj_TurnIn_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_KillRealUgThak_ObjSetVar) == 0x000568, "Member 'UMission_EchoNetNeutrality_C::Set_KillRealUgThak_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_LocateUgThak_ObjSetVar) == 0x000570, "Member 'UMission_EchoNetNeutrality_C::Set_LocateUgThak_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_LocateUgThak_ObjVar) == 0x000578, "Member 'UMission_EchoNetNeutrality_C::Obj_LocateUgThak_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_KillRealUgThak_ObjVar) == 0x000580, "Member 'UMission_EchoNetNeutrality_C::Obj_KillRealUgThak_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_OpenControlRoom_ObjSetVar) == 0x000588, "Member 'UMission_EchoNetNeutrality_C::Set_OpenControlRoom_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenControlRoom_INVS_ObjVar) == 0x000590, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenControlRoom_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_DamageUgThak_INVS_ObjVar) == 0x000598, "Member 'UMission_EchoNetNeutrality_C::Obj_DamageUgThak_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_LeaveShack_INVS_ObjVar) == 0x0005A0, "Member 'UMission_EchoNetNeutrality_C::Obj_LeaveShack_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_FindControlRoom_INVS_ObjVar) == 0x0005A8, "Member 'UMission_EchoNetNeutrality_C::Obj_FindControlRoom_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_FindControlRoom_ObjSetVar) == 0x0005B0, "Member 'UMission_EchoNetNeutrality_C::Set_FindControlRoom_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_TriggerBadassAttack_INVS_ObjVar) == 0x0005B8, "Member 'UMission_EchoNetNeutrality_C::Obj_TriggerBadassAttack_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_KillCoVMinusWave1_ObjSetVar) == 0x0005C0, "Member 'UMission_EchoNetNeutrality_C::Set_KillCoVMinusWave1_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_KillCoVMinusWave1_INVS_ObjVar) == 0x0005C8, "Member 'UMission_EchoNetNeutrality_C::Obj_KillCoVMinusWave1_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_KillCoVMinusWave2_INVS_ObjVar) == 0x0005D0, "Member 'UMission_EchoNetNeutrality_C::Obj_KillCoVMinusWave2_INVS_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenPipe1_ObjVar) == 0x0005D8, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenPipe1_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenPipe2_ObjVar) == 0x0005E0, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenPipe2_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenPipe3_ObjVar) == 0x0005E8, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenPipe3_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenPipe4_ObjVar) == 0x0005F0, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenPipe4_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_OpenPipe5_ObjVar) == 0x0005F8, "Member 'UMission_EchoNetNeutrality_C::Obj_OpenPipe5_ObjVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Set_TalkToLordOfSkags_ObjSetVar) == 0x000600, "Member 'UMission_EchoNetNeutrality_C::Set_TalkToLordOfSkags_ObjSetVar' has a wrong offset!");
static_assert(offsetof(UMission_EchoNetNeutrality_C, Obj_TalkToEdgren_ObjVar) == 0x000608, "Member 'UMission_EchoNetNeutrality_C::Obj_TalkToEdgren_ObjVar' has a wrong offset!");

}

