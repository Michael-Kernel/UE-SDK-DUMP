#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GbxRuntime_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GbxRuntime.GbxDataAsset
// 0x0000 (0x0030 - 0x0030)
class UGbxDataAsset : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxDataAsset">();
	}
	static class UGbxDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDataAsset>();
	}
};
static_assert(alignof(UGbxDataAsset) == 0x000008, "Wrong alignment on UGbxDataAsset");
static_assert(sizeof(UGbxDataAsset) == 0x000030, "Wrong size on UGbxDataAsset");

// Class GbxRuntime.GbxDataAssetBlueprintable
// 0x0000 (0x0030 - 0x0030)
class UGbxDataAssetBlueprintable : public UGbxDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxDataAssetBlueprintable">();
	}
	static class UGbxDataAssetBlueprintable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDataAssetBlueprintable>();
	}
};
static_assert(alignof(UGbxDataAssetBlueprintable) == 0x000008, "Wrong alignment on UGbxDataAssetBlueprintable");
static_assert(sizeof(UGbxDataAssetBlueprintable) == 0x000030, "Wrong size on UGbxDataAssetBlueprintable");

// Class GbxRuntime.GbxCondition
// 0x0060 (0x0088 - 0x0028)
class UGbxCondition : public UObject
{
public:
	bool                                          bInvertCondition;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EConditionRefreshRate                         RefreshRate;                                       // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x5E];                                      // 0x002A(0x005E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool K2_EvaluateCondition(const class UGbxCondition* Condition, class UObject* Context);
	static bool K2_EvaluateConditionType(TSubclassOf<class UGbxCondition> Condition, class UObject* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxCondition">();
	}
	static class UGbxCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxCondition>();
	}
};
static_assert(alignof(UGbxCondition) == 0x000008, "Wrong alignment on UGbxCondition");
static_assert(sizeof(UGbxCondition) == 0x000088, "Wrong size on UGbxCondition");
static_assert(offsetof(UGbxCondition, bInvertCondition) == 0x000028, "Member 'UGbxCondition::bInvertCondition' has a wrong offset!");
static_assert(offsetof(UGbxCondition, RefreshRate) == 0x000029, "Member 'UGbxCondition::RefreshRate' has a wrong offset!");

// Class GbxRuntime.NumericRangeExt
// 0x0000 (0x0028 - 0x0028)
class UNumericRangeExt final : public UBlueprintFunctionLibrary
{
public:
	static struct FNumericRange CreateNumericRange(float Value, float Variance);
	static struct FNumericRange CreateNumericRangeMinMax(float Minimum, float Maximum);
	static float GenerateRandomNumber(const struct FNumericRange& Range);
	static float GetMaximum(const struct FNumericRange& Range);
	static float GetMinimum(const struct FNumericRange& Range);
	static bool IsWithin(const struct FNumericRange& Range, float Value);
	static void SetMaximum(struct FNumericRange* Range, float Maximum);
	static void SetMinimum(struct FNumericRange* Range, float Minimum);
	static class FString ToMinMaxString(const struct FNumericRange& Range);
	static class FString ToString(const struct FNumericRange& Range);
	static class FString ToValueString(const struct FNumericRange& Range);
	static class FString ToValueVarianceString(const struct FNumericRange& Range);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NumericRangeExt">();
	}
	static class UNumericRangeExt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNumericRangeExt>();
	}
};
static_assert(alignof(UNumericRangeExt) == 0x000008, "Wrong alignment on UNumericRangeExt");
static_assert(sizeof(UNumericRangeExt) == 0x000028, "Wrong size on UNumericRangeExt");

// Class GbxRuntime.RenderActor
// 0x0000 (0x0458 - 0x0458)
class ARenderActor : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RenderActor">();
	}
	static class ARenderActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARenderActor>();
	}
};
static_assert(alignof(ARenderActor) == 0x000008, "Wrong alignment on ARenderActor");
static_assert(sizeof(ARenderActor) == 0x000458, "Wrong size on ARenderActor");

}

