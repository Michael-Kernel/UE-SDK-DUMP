#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIMeleeSpawningComponent

#include "Basic.hpp"

#include "AIMeleeSpawningComponent_classes.hpp"
#include "AIMeleeSpawningComponent_parameters.hpp"


namespace SDK
{

// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.ExecuteUbergraph_AIMeleeSpawningComponent
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMeleeSpawningComponent_C::ExecuteUbergraph_AIMeleeSpawningComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "ExecuteUbergraph_AIMeleeSpawningComponent");

	Params::AIMeleeSpawningComponent_C_ExecuteUbergraph_AIMeleeSpawningComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.OnHeldActorNativeDrop
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMeleeSpawningComponent_C::OnHeldActorNativeDrop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "OnHeldActorNativeDrop");

	Params::AIMeleeSpawningComponent_C_OnHeldActorNativeDrop Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_SetNewMeleeWeaponClass
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           NewMeleeWeaponClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMeleeSpawningComponent_C::AIMelee_SetNewMeleeWeaponClass(class UClass* NewMeleeWeaponClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_SetNewMeleeWeaponClass");

	Params::AIMeleeSpawningComponent_C_AIMelee_SetNewMeleeWeaponClass Parms{};

	Parms.NewMeleeWeaponClass = NewMeleeWeaponClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_ThrowAtLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LocationToThrowAt                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThrowSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThrowAnglePercentage                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequestNewMeleeWeapon                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SpawnIfDoesntExist                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAIMeleeSpawningComponent_C::AIMelee_ThrowAtLocation(const struct FVector& LocationToThrowAt, float ThrowSpeed, float ThrowAnglePercentage, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_ThrowAtLocation");

	Params::AIMeleeSpawningComponent_C_AIMelee_ThrowAtLocation Parms{};

	Parms.LocationToThrowAt = std::move(LocationToThrowAt);
	Parms.ThrowSpeed = ThrowSpeed;
	Parms.ThrowAnglePercentage = ThrowAnglePercentage;
	Parms.RequestNewMeleeWeapon = RequestNewMeleeWeapon;
	Parms.SpawnIfDoesntExist = SpawnIfDoesntExist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_ThrowAtActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToThrowAt                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThrowSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThrowAnglePercentage                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ActorSocket                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ActorOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ThrowAngleOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   MaxPrediction                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequestNewMeleeWeapon                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SpawnIfDoesntExist                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAIMeleeSpawningComponent_C::AIMelee_ThrowAtActor(class AActor* ActorToThrowAt, float ThrowSpeed, float ThrowAnglePercentage, class FName ActorSocket, const struct FVector& ActorOffset, const struct FRotator& ThrowAngleOffset, float MaxPrediction, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_ThrowAtActor");

	Params::AIMeleeSpawningComponent_C_AIMelee_ThrowAtActor Parms{};

	Parms.ActorToThrowAt = ActorToThrowAt;
	Parms.ThrowSpeed = ThrowSpeed;
	Parms.ThrowAnglePercentage = ThrowAnglePercentage;
	Parms.ActorSocket = ActorSocket;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.ThrowAngleOffset = std::move(ThrowAngleOffset);
	Parms.MaxPrediction = MaxPrediction;
	Parms.RequestNewMeleeWeapon = RequestNewMeleeWeapon;
	Parms.SpawnIfDoesntExist = SpawnIfDoesntExist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_Spawn
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMeleeSpawningComponent_C::AIMelee_Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_Spawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_ThrowAtTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ThrowSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThrowAnglePercent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TargetSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ThrowAngleOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   MaxPrediction                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequestNewMeleeWeapon                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SpawnIfDoesntExist                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAIMeleeSpawningComponent_C::AIMelee_ThrowAtTarget(float ThrowSpeed, float ThrowAnglePercent, class FName TargetSocket, const struct FVector& TargetOffset, const struct FRotator& ThrowAngleOffset, float MaxPrediction, bool RequestNewMeleeWeapon, bool SpawnIfDoesntExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_ThrowAtTarget");

	Params::AIMeleeSpawningComponent_C_AIMelee_ThrowAtTarget Parms{};

	Parms.ThrowSpeed = ThrowSpeed;
	Parms.ThrowAnglePercent = ThrowAnglePercent;
	Parms.TargetSocket = TargetSocket;
	Parms.TargetOffset = std::move(TargetOffset);
	Parms.ThrowAngleOffset = std::move(ThrowAngleOffset);
	Parms.MaxPrediction = MaxPrediction;
	Parms.RequestNewMeleeWeapon = RequestNewMeleeWeapon;
	Parms.SpawnIfDoesntExist = SpawnIfDoesntExist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_Drop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RequestNewMeleeWeapon                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAIMeleeSpawningComponent_C::AIMelee_Drop(bool RequestNewMeleeWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_Drop");

	Params::AIMeleeSpawningComponent_C_AIMelee_Drop Parms{};

	Parms.RequestNewMeleeWeapon = RequestNewMeleeWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMeleeSpawningComponent.AIMeleeSpawningComponent_C.AIMelee_GetElementalTypeFromMeleeWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOakElementalType                       MeleeWeaponElement                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMeleeSpawningComponent_C::AIMelee_GetElementalTypeFromMeleeWeapon(EOakElementalType* MeleeWeaponElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMeleeSpawningComponent_C", "AIMelee_GetElementalTypeFromMeleeWeapon");

	Params::AIMeleeSpawningComponent_C_AIMelee_GetElementalTypeFromMeleeWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeleeWeaponElement != nullptr)
		*MeleeWeaponElement = Parms.MeleeWeaponElement;
}

}

