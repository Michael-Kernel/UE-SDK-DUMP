#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumeGlow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolumeGlow.BP_VolumeGlow_C
// 0x0058 (0x04B0 - 0x0458)
class ABP_VolumeGlow_C final : public ARenderActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0458(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_FX_Volume_Sphere;                               // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Glow_Intensity;                                    // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               VolumeGlow_Mat_Inst;                               // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Glow_Color;                                        // 0x0480(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density;                                           // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gradient_Power;                                    // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fade_Distance;                                     // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Far_Fade_Start;                                    // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Far_Fade_End;                                      // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_0;                                          // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Update_Volume_Glow(float Density_0);
	void ExecuteUbergraph_BP_VolumeGlow(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolumeGlow_C">();
	}
	static class ABP_VolumeGlow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolumeGlow_C>();
	}
};
static_assert(alignof(ABP_VolumeGlow_C) == 0x000008, "Wrong alignment on ABP_VolumeGlow_C");
static_assert(sizeof(ABP_VolumeGlow_C) == 0x0004B0, "Wrong size on ABP_VolumeGlow_C");
static_assert(offsetof(ABP_VolumeGlow_C, UberGraphFrame) == 0x000458, "Member 'ABP_VolumeGlow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, SM_FX_Volume_Sphere) == 0x000460, "Member 'ABP_VolumeGlow_C::SM_FX_Volume_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, DefaultSceneRoot) == 0x000468, "Member 'ABP_VolumeGlow_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Glow_Intensity) == 0x000470, "Member 'ABP_VolumeGlow_C::Glow_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, VolumeGlow_Mat_Inst) == 0x000478, "Member 'ABP_VolumeGlow_C::VolumeGlow_Mat_Inst' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Glow_Color) == 0x000480, "Member 'ABP_VolumeGlow_C::Glow_Color' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Density) == 0x000490, "Member 'ABP_VolumeGlow_C::Density' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Distance) == 0x000494, "Member 'ABP_VolumeGlow_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Gradient_Power) == 0x000498, "Member 'ABP_VolumeGlow_C::Gradient_Power' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Fade_Distance) == 0x00049C, "Member 'ABP_VolumeGlow_C::Fade_Distance' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Far_Fade_Start) == 0x0004A0, "Member 'ABP_VolumeGlow_C::Far_Fade_Start' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, Far_Fade_End) == 0x0004A4, "Member 'ABP_VolumeGlow_C::Far_Fade_End' has a wrong offset!");
static_assert(offsetof(ABP_VolumeGlow_C, NewVar_0) == 0x0004A8, "Member 'ABP_VolumeGlow_C::NewVar_0' has a wrong offset!");

}

