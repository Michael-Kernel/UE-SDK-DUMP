#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxCameraModes

#include "Basic.hpp"


namespace SDK
{

// Enum GbxCameraModes.ECameraBehaviorLookAxis
// NumValues: 0x0004
enum class ECameraBehaviorLookAxis : uint8
{
	Pitch                                    = 0,
	Yaw                                      = 1,
	Roll                                     = 2,
	MAX                                      = 3,
};

// Enum GbxCameraModes.ECameraLookSpaces
// NumValues: 0x0004
enum class ECameraLookSpaces : uint8
{
	World                                    = 0,
	ViewTarget                               = 1,
	ViewTargetBase                           = 2,
	ECameraLookSpaces_MAX                    = 3,
};

// Enum GbxCameraModes.ECameraModeTransitionBlendType
// NumValues: 0x0004
enum class ECameraModeTransitionBlendType : uint8
{
	None                                     = 0,
	Full                                     = 1,
	FOV                                      = 2,
	ECameraModeTransitionBlendType_MAX       = 3,
};

// Enum GbxCameraModes.EViewTargetRotationUpdateMethod
// NumValues: 0x0004
enum class EViewTargetRotationUpdateMethod : uint32
{
	FromCamera                               = 0,
	Fixed                                    = 1,
	FromInputDelta                           = 2,
	EViewTargetRotationUpdateMethod_MAX      = 3,
};

// ScriptStruct GbxCameraModes.InitialRotationAxisParams
// 0x0030 (0x0030 - 0x0000)
struct FInitialRotationAxisParams final
{
public:
	float                                         MinAngle;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeToBase;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearInterpolation;                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpeedScaleCurve;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x14];                                      // 0x001C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInitialRotationAxisParams) == 0x000008, "Wrong alignment on FInitialRotationAxisParams");
static_assert(sizeof(FInitialRotationAxisParams) == 0x000030, "Wrong size on FInitialRotationAxisParams");
static_assert(offsetof(FInitialRotationAxisParams, MinAngle) == 0x000000, "Member 'FInitialRotationAxisParams::MinAngle' has a wrong offset!");
static_assert(offsetof(FInitialRotationAxisParams, MaxAngle) == 0x000004, "Member 'FInitialRotationAxisParams::MaxAngle' has a wrong offset!");
static_assert(offsetof(FInitialRotationAxisParams, bRelativeToBase) == 0x000008, "Member 'FInitialRotationAxisParams::bRelativeToBase' has a wrong offset!");
static_assert(offsetof(FInitialRotationAxisParams, bLinearInterpolation) == 0x000009, "Member 'FInitialRotationAxisParams::bLinearInterpolation' has a wrong offset!");
static_assert(offsetof(FInitialRotationAxisParams, Speed) == 0x00000C, "Member 'FInitialRotationAxisParams::Speed' has a wrong offset!");
static_assert(offsetof(FInitialRotationAxisParams, SpeedScaleCurve) == 0x000010, "Member 'FInitialRotationAxisParams::SpeedScaleCurve' has a wrong offset!");
static_assert(offsetof(FInitialRotationAxisParams, Delay) == 0x000018, "Member 'FInitialRotationAxisParams::Delay' has a wrong offset!");

// ScriptStruct GbxCameraModes.ReplicatedCameraModeState
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FReplicatedCameraModeState final
{
public:
	class FName                                   ModeName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeOverride;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedCameraModeState) == 0x000008, "Wrong alignment on FReplicatedCameraModeState");
static_assert(sizeof(FReplicatedCameraModeState) == 0x000010, "Wrong size on FReplicatedCameraModeState");
static_assert(offsetof(FReplicatedCameraModeState, ModeName) == 0x000000, "Member 'FReplicatedCameraModeState::ModeName' has a wrong offset!");
static_assert(offsetof(FReplicatedCameraModeState, BlendTimeOverride) == 0x000008, "Member 'FReplicatedCameraModeState::BlendTimeOverride' has a wrong offset!");

// ScriptStruct GbxCameraModes.CameraBehaviorLookAxis
// 0x0018 (0x0018 - 0x0000)
struct FCameraBehaviorLookAxis final
{
public:
	float                                         InputScale;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLimit : 1;                                        // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAngle;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FeatheringAngle;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FeatheringInputScale;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraBehaviorLookAxis) == 0x000004, "Wrong alignment on FCameraBehaviorLookAxis");
static_assert(sizeof(FCameraBehaviorLookAxis) == 0x000018, "Wrong size on FCameraBehaviorLookAxis");
static_assert(offsetof(FCameraBehaviorLookAxis, InputScale) == 0x000000, "Member 'FCameraBehaviorLookAxis::InputScale' has a wrong offset!");
static_assert(offsetof(FCameraBehaviorLookAxis, MinAngle) == 0x000008, "Member 'FCameraBehaviorLookAxis::MinAngle' has a wrong offset!");
static_assert(offsetof(FCameraBehaviorLookAxis, MaxAngle) == 0x00000C, "Member 'FCameraBehaviorLookAxis::MaxAngle' has a wrong offset!");
static_assert(offsetof(FCameraBehaviorLookAxis, FeatheringAngle) == 0x000010, "Member 'FCameraBehaviorLookAxis::FeatheringAngle' has a wrong offset!");
static_assert(offsetof(FCameraBehaviorLookAxis, FeatheringInputScale) == 0x000014, "Member 'FCameraBehaviorLookAxis::FeatheringInputScale' has a wrong offset!");

// ScriptStruct GbxCameraModes.CameraStatePostProcessBlend
// 0x0610 (0x0610 - 0x0000)
struct alignas(0x10) FCameraStatePostProcessBlend final
{
public:
	uint8                                         Pad_0[0x610];                                      // 0x0000(0x0610)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraStatePostProcessBlend) == 0x000010, "Wrong alignment on FCameraStatePostProcessBlend");
static_assert(sizeof(FCameraStatePostProcessBlend) == 0x000610, "Wrong size on FCameraStatePostProcessBlend");

}

