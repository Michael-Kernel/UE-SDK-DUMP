#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightProjectile_TOR_PS_Craps_StickySpread

#include "Basic.hpp"


namespace SDK::Params
{

// Function LightProjectile_TOR_PS_Craps_StickySpread.LightProjectile_TOR_PS_Craps_StickySpread_C.OnLifetimeExpired
// 0x0008 (0x0008 - 0x0000)
struct LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired) == 0x000008, "Wrong alignment on LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired");
static_assert(sizeof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired) == 0x000008, "Wrong size on LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired");
static_assert(offsetof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired, Projectile) == 0x000000, "Member 'LightProjectile_TOR_PS_Craps_StickySpread_C_OnLifetimeExpired::Projectile' has a wrong offset!");

// Function LightProjectile_TOR_PS_Craps_StickySpread.LightProjectile_TOR_PS_Craps_StickySpread_C.OnBegin
// 0x0018 (0x0018 - 0x0000)
struct LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValue_OutValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableValue_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin) == 0x000008, "Wrong alignment on LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin");
static_assert(sizeof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin) == 0x000018, "Wrong size on LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin");
static_assert(offsetof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin, Projectile) == 0x000000, "Member 'LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin, CallFunc_GetDataTableValue_OutValue) == 0x000008, "Member 'LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin::CallFunc_GetDataTableValue_OutValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin, CallFunc_GetDataTableValue_ReturnValue) == 0x00000C, "Member 'LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin::CallFunc_GetDataTableValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin, CallFunc_RandomFloatInRange_ReturnValue) == 0x000010, "Member 'LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin, CallFunc_FTrunc_ReturnValue) == 0x000014, "Member 'LightProjectile_TOR_PS_Craps_StickySpread_C_OnBegin::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

}

