#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OakProceduralMeshFunctions

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.GetCatenaryPoints
// 0x0110 (0x0110 - 0x0000)
struct OakProceduralMeshFunctions_C_GetCatenaryPoints final
{
public:
	struct FVector                                P1;                                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P2;                                                // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wire_Catenary;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wire_Resolution;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Points;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor)
	float                                         Offset;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dir;                                               // 0x003C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_WireResolution;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_WireCatenary;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Local_P2;                                          // 0x0050(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Local_P1;                                          // 0x005C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Wire_Points;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         NPoints;                                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateCatenary_Result;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateCatenary_Result1;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OakProceduralMeshFunctions_C_GetCatenaryPoints) == 0x000008, "Wrong alignment on OakProceduralMeshFunctions_C_GetCatenaryPoints");
static_assert(sizeof(OakProceduralMeshFunctions_C_GetCatenaryPoints) == 0x000110, "Wrong size on OakProceduralMeshFunctions_C_GetCatenaryPoints");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, P1) == 0x000000, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::P1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, P2) == 0x00000C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::P2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Wire_Catenary) == 0x000018, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Wire_Catenary' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Wire_Resolution) == 0x00001C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Wire_Resolution' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, __WorldContext) == 0x000020, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Points) == 0x000028, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Points' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Offset) == 0x000038, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Offset' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Dir) == 0x00003C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Dir' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Local_WireResolution) == 0x000048, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Local_WireResolution' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Local_WireCatenary) == 0x00004C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Local_WireCatenary' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Local_P2) == 0x000050, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Local_P2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Local_P1) == 0x00005C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Local_P1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Wire_Points) == 0x000068, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Wire_Points' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, NPoints) == 0x000078, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::NPoints' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Distance) == 0x00007C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Distance' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000080, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, Temp_int_Variable) == 0x000084, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Subtract_IntInt_ReturnValue) == 0x000088, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00008C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000090, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000094, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_CalculateCatenary_Result) == 0x000098, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_CalculateCatenary_Result' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x00009C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x0000A0, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A4, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_BreakVector_X) == 0x0000C0, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_BreakVector_Y) == 0x0000C4, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_BreakVector_Z) == 0x0000C8, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0000CC, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x0000DC, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_CalculateCatenary_Result1) == 0x0000E0, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_CalculateCatenary_Result1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E4, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_VSize_ReturnValue) == 0x0000F0, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Normal_ReturnValue) == 0x0000F4, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000100, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Add_FloatFloat_ReturnValue) == 0x000104, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_FTrunc_ReturnValue) == 0x000108, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_GetCatenaryPoints, CallFunc_Min_ReturnValue) == 0x00010C, "Member 'OakProceduralMeshFunctions_C_GetCatenaryPoints::CallFunc_Min_ReturnValue' has a wrong offset!");

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.CalculateCatenary
// 0x0028 (0x0028 - 0x0000)
struct OakProceduralMeshFunctions_C_CalculateCatenary final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Cosh__result;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OakProceduralMeshFunctions_C_CalculateCatenary) == 0x000008, "Wrong alignment on OakProceduralMeshFunctions_C_CalculateCatenary");
static_assert(sizeof(OakProceduralMeshFunctions_C_CalculateCatenary) == 0x000028, "Wrong size on OakProceduralMeshFunctions_C_CalculateCatenary");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, A) == 0x000000, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::A' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, X) == 0x000004, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::X' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, __WorldContext) == 0x000008, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, Result) == 0x000010, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::Result' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, CallFunc_Cosh__result) == 0x00001C, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::CallFunc_Cosh__result' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_CalculateCatenary, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'OakProceduralMeshFunctions_C_CalculateCatenary::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.Sphere Strip
// 0x04B0 (0x04B0 - 0x0000)
struct OakProceduralMeshFunctions_C_Sphere_Strip final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sides;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Sphere_Angle;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector2D                              UV_Tile;                                           // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sub_UV_Index;                                      // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlat;                                             // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Out_Verts;                                         // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 Out_Faces;                                         // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        Out_Normals;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector2D>                      Out_UVs;                                           // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FLinearColor>                   Out_Vertex_Color;                                  // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor)
	bool                                          Local_Flat;                                        // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   Vertex_Color;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FLinearColor                           Local_Color;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Local_Sub_UV_Index;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Local_UV_Tile;                                     // 0x00F4(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      UVs;                                               // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<int32>                                 Faces;                                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVector>                        Normals;                                           // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVector>                        Verts;                                             // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                             Local_Transform;                                   // 0x0140(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Local_Sphere_Angle;                                // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Local_Orientation;                                 // 0x0174(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Local_Sides;                                       // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Radius;                                      // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Width;                                       // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue1;                // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue1;              // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable3;                                // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue4;                  // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue2;                // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue2;             // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue3;             // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue;             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0224(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue1;            // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue1;                         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue1;                         // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x023C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue3;                // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue3;           // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue4;           // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue2;                         // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue2;                         // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0268(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue3;                   // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0280(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x028C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x0298(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x02A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue4;                   // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue5;                   // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue6;                   // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue7;                   // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue4;                // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue5;                // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue2;              // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue3;              // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue4;             // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue5;             // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue5;           // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue6;           // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue6;                // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue6;             // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue7;           // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue7;             // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue8;           // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue3;                         // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue3;                         // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue1;                // 0x0320(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue2;                      // 0x0328(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue8;                   // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue9;                   // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue5;                  // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue6;                  // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue7;                  // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue8;                  // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0350(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue9;           // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue2;            // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue4;                         // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue2;            // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue3;                  // 0x037C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue4;                         // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue10;          // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue3;            // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyByPi_ReturnValue7;                // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue5;                         // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue11;          // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue4;                  // 0x03A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue2;           // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue5;                         // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue12;          // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue5;                  // 0x03BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue1;       // 0x03CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x03D8(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x03E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue10;                  // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue1;           // 0x03F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue6;                         // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue11;                  // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue6;                         // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue6;                  // 0x0408(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue3;            // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue2;       // 0x0418(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0424(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable4;                                // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue3;                      // 0x0434(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue3;           // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue12;                  // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue13;          // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue7;                         // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue7;                         // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue3;                // 0x0458(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue7;                  // 0x0460(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue13;                  // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue3;       // 0x0470(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x047C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue4;            // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformLocation_ReturnValue2;           // 0x048C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue14;                  // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue9;                  // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue3;           // 0x04A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue15;                  // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OakProceduralMeshFunctions_C_Sphere_Strip) == 0x000010, "Wrong alignment on OakProceduralMeshFunctions_C_Sphere_Strip");
static_assert(sizeof(OakProceduralMeshFunctions_C_Sphere_Strip) == 0x0004B0, "Wrong size on OakProceduralMeshFunctions_C_Sphere_Strip");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Width) == 0x000000, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Width' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Radius) == 0x000004, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Radius' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Sides) == 0x000008, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Orientation) == 0x00000C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Orientation' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Sphere_Angle) == 0x000018, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Sphere_Angle' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Transform) == 0x000020, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Transform' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, UV_Tile) == 0x000050, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::UV_Tile' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Sub_UV_Index) == 0x000058, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Sub_UV_Index' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Color) == 0x00005C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Color' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, bFlat) == 0x00006C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::bFlat' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, __WorldContext) == 0x000070, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Out_Verts) == 0x000078, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Out_Verts' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Out_Faces) == 0x000088, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Out_Faces' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Out_Normals) == 0x000098, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Out_Normals' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Out_UVs) == 0x0000A8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Out_UVs' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Out_Vertex_Color) == 0x0000B8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Out_Vertex_Color' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Flat) == 0x0000C8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Flat' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Vertex_Color) == 0x0000D0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Vertex_Color' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Color) == 0x0000E0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Color' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Sub_UV_Index) == 0x0000F0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Sub_UV_Index' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_UV_Tile) == 0x0000F4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_UV_Tile' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, UVs) == 0x000100, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::UVs' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Faces) == 0x000110, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Faces' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Normals) == 0x000120, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Normals' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Verts) == 0x000130, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Verts' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Transform) == 0x000140, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Transform' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Sphere_Angle) == 0x000170, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Sphere_Angle' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Orientation) == 0x000174, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Orientation' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Sides) == 0x000180, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Radius) == 0x000184, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Radius' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Local_Width) == 0x000188, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Local_Width' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Temp_int_Variable) == 0x00018C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue) == 0x000190, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Temp_int_Variable1) == 0x000194, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue1) == 0x000198, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue) == 0x00019C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue1) == 0x0001A0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue) == 0x0001A4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue1) == 0x0001A8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeLiteralInt_ReturnValue) == 0x0001AC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeLiteralInt_ReturnValue1) == 0x0001B0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeLiteralInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001B4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x0001B8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001BC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x0001C0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001C4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0001C8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Temp_int_Variable2) == 0x0001CC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001D0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue2) == 0x0001D4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue3) == 0x0001D8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_X) == 0x0001DC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_Y) == 0x0001E0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_X1) == 0x0001E4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_Y1) == 0x0001E8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Temp_int_Variable3) == 0x0001EC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Temp_int_Variable3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue4) == 0x0001F0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue2) == 0x0001F4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue2) == 0x0001F8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x0001FC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue3) == 0x000200, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Normal_ReturnValue) == 0x000204, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue2) == 0x000210, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_DegreesToRadians_ReturnValue) == 0x000214, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000218, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue) == 0x00021C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue) == 0x000220, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue) == 0x000224, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_DegreesToRadians_ReturnValue1) == 0x000230, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_DegreesToRadians_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue1) == 0x000234, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue1) == 0x000238, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue1) == 0x00023C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue3) == 0x000248, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue3) == 0x00024C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000250, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000254, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue4) == 0x000258, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue2) == 0x00025C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000260, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue2) == 0x000264, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector2D_ReturnValue) == 0x000268, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue2) == 0x000270, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue3) == 0x00027C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000280, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00028C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Normal_ReturnValue1) == 0x000298, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_TransformLocation_ReturnValue) == 0x0002A4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue4) == 0x0002B0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue5) == 0x0002B4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue6) == 0x0002B8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue7) == 0x0002BC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue4) == 0x0002C0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue5) == 0x0002C4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeLiteralInt_ReturnValue2) == 0x0002C8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeLiteralInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeLiteralInt_ReturnValue3) == 0x0002CC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeLiteralInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue4) == 0x0002D0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue5) == 0x0002D4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue5) == 0x0002D8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue6) == 0x0002DC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0002E0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x0002E4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_FloatFloat_ReturnValue2) == 0x0002E8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_X2) == 0x0002EC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_Y2) == 0x0002F0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_X3) == 0x0002F4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_BreakVector2D_Y3) == 0x0002F8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue6) == 0x0002FC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue6) == 0x000300, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue7) == 0x000304, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Conv_IntToFloat_ReturnValue7) == 0x000308, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Conv_IntToFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x00030C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue8) == 0x000310, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue3) == 0x000314, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x000318, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue3) == 0x00031C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector2D_ReturnValue1) == 0x000320, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Normal_ReturnValue2) == 0x000328, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Normal_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue8) == 0x000334, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue8' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue9) == 0x000338, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue9' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue5) == 0x00033C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue6) == 0x000340, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue7) == 0x000344, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue8) == 0x000348, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue8' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, K2Node_MakeArray_Array) == 0x000350, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Subtract_IntInt_ReturnValue) == 0x000360, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x000364, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue9) == 0x000368, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue9' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_FloatFloat_ReturnValue3) == 0x00036C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_DegreesToRadians_ReturnValue2) == 0x000370, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_DegreesToRadians_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue4) == 0x000374, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_LessEqual_IntInt_ReturnValue2) == 0x000378, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_LessEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue3) == 0x00037C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue4) == 0x000388, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue10) == 0x00038C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue10' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000390, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_DegreesToRadians_ReturnValue3) == 0x000394, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_DegreesToRadians_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MultiplyByPi_ReturnValue7) == 0x000398, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MultiplyByPi_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue5) == 0x00039C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue11) == 0x0003A0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue11' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue4) == 0x0003A4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_IntFloat_ReturnValue2) == 0x0003B0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_IntFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue5) == 0x0003B4, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue12) == 0x0003B8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue12' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue5) == 0x0003BC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x0003C8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorVector_ReturnValue1) == 0x0003CC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector2D_ReturnValue2) == 0x0003D8, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0003E0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue10) == 0x0003EC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue10' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_TransformLocation_ReturnValue1) == 0x0003F0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_TransformLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue6) == 0x0003FC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue11) == 0x000400, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue11' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue6) == 0x000404, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue6) == 0x000408, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_LessEqual_IntInt_ReturnValue3) == 0x000414, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_LessEqual_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorVector_ReturnValue2) == 0x000418, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000424, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, Temp_int_Variable4) == 0x000430, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::Temp_int_Variable4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Normal_ReturnValue3) == 0x000434, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Normal_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_IntFloat_ReturnValue3) == 0x000440, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_IntFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue12) == 0x000444, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue12' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Divide_FloatFloat_ReturnValue13) == 0x000448, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Divide_FloatFloat_ReturnValue13' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Cos_ReturnValue7) == 0x00044C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Cos_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x000450, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Sin_ReturnValue7) == 0x000454, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Sin_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector2D_ReturnValue3) == 0x000458, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector2D_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_MakeVector_ReturnValue7) == 0x000460, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_MakeVector_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue13) == 0x00046C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue13' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorVector_ReturnValue3) == 0x000470, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x00047C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_LessEqual_IntInt_ReturnValue4) == 0x000488, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_LessEqual_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_TransformLocation_ReturnValue2) == 0x00048C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_TransformLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue14) == 0x000498, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue14' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Add_IntInt_ReturnValue9) == 0x00049C, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Add_IntInt_ReturnValue9' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_TransformLocation_ReturnValue3) == 0x0004A0, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_TransformLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Sphere_Strip, CallFunc_Array_Add_ReturnValue15) == 0x0004AC, "Member 'OakProceduralMeshFunctions_C_Sphere_Strip::CallFunc_Array_Add_ReturnValue15' has a wrong offset!");

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.Make Quad
// 0x0120 (0x0120 - 0x0000)
struct OakProceduralMeshFunctions_C_Make_Quad final
{
public:
	float                                         Length_;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Verticies;                                         // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 Faces;                                             // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        Normals;                                           // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        K2Node_MakeArray_Array1;                           // 0x00A0(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x00C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x00D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue1;           // 0x00DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue2;           // 0x00E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue3;                  // 0x00F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue3;           // 0x0100(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array2;                           // 0x0110(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(OakProceduralMeshFunctions_C_Make_Quad) == 0x000010, "Wrong alignment on OakProceduralMeshFunctions_C_Make_Quad");
static_assert(sizeof(OakProceduralMeshFunctions_C_Make_Quad) == 0x000120, "Wrong size on OakProceduralMeshFunctions_C_Make_Quad");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, Length_) == 0x000000, "Member 'OakProceduralMeshFunctions_C_Make_Quad::Length_' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, Width) == 0x000004, "Member 'OakProceduralMeshFunctions_C_Make_Quad::Width' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, Transform) == 0x000010, "Member 'OakProceduralMeshFunctions_C_Make_Quad::Transform' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, __WorldContext) == 0x000040, "Member 'OakProceduralMeshFunctions_C_Make_Quad::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, Verticies) == 0x000048, "Member 'OakProceduralMeshFunctions_C_Make_Quad::Verticies' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, Faces) == 0x000058, "Member 'OakProceduralMeshFunctions_C_Make_Quad::Faces' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, Normals) == 0x000068, "Member 'OakProceduralMeshFunctions_C_Make_Quad::Normals' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, K2Node_MakeArray_Array) == 0x000078, "Member 'OakProceduralMeshFunctions_C_Make_Quad::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_TransformDirection_ReturnValue) == 0x000088, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_MakeVector_ReturnValue) == 0x000094, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, K2Node_MakeArray_Array1) == 0x0000A0, "Member 'OakProceduralMeshFunctions_C_Make_Quad::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_TransformLocation_ReturnValue) == 0x0000B0, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000BC, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000C0, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_MakeVector_ReturnValue1) == 0x0000C4, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_MakeVector_ReturnValue2) == 0x0000D0, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_TransformLocation_ReturnValue1) == 0x0000DC, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_TransformLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_TransformLocation_ReturnValue2) == 0x0000E8, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_TransformLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_MakeVector_ReturnValue3) == 0x0000F4, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_MakeVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, CallFunc_TransformLocation_ReturnValue3) == 0x000100, "Member 'OakProceduralMeshFunctions_C_Make_Quad::CallFunc_TransformLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Quad, K2Node_MakeArray_Array2) == 0x000110, "Member 'OakProceduralMeshFunctions_C_Make_Quad::K2Node_MakeArray_Array2' has a wrong offset!");

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.Loft Spline
// 0x02C0 (0x02C0 - 0x0000)
struct OakProceduralMeshFunctions_C_Loft_Spline final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Twist;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Base_Thickness;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Edge_Loops;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sides;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UVScale;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Taper_;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Verticies;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 Triangles;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        Normals;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector2D>                      UVs;                                               // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor)
	float                                         Local_Radius;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Local_Taper_Spline;                                // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Twist_Value;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Out_UVs;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Local_Edge_Loops;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Local_Sides;                                       // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Base_Thickness;                              // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_Twist;                                       // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Out_Normals;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<int32>                                 Out_Triangles;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVector>                        Out_Verts;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         Spline_Length;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       Local_Spline;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue1;                         // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue2;             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue2;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue3;             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue4;             // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue3;           // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue2;           // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0144(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x014C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue2;            // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue4;           // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue3;           // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue; // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01C0(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue5;           // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue4;           // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01F4(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0xC];                                      // 0x0204(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0210(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0240(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable3;                                // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0250(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0260(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue4;                  // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue5;                  // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0280(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue6;                  // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue7;                  // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue8;                  // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue9;                  // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x02A8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue3;            // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue10;                 // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OakProceduralMeshFunctions_C_Loft_Spline) == 0x000010, "Wrong alignment on OakProceduralMeshFunctions_C_Loft_Spline");
static_assert(sizeof(OakProceduralMeshFunctions_C_Loft_Spline) == 0x0002C0, "Wrong size on OakProceduralMeshFunctions_C_Loft_Spline");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Spline) == 0x000000, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Spline' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Twist) == 0x000008, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Twist' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Base_Thickness) == 0x00000C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Base_Thickness' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Edge_Loops) == 0x000010, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Edge_Loops' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Sides) == 0x000014, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, UVScale) == 0x000018, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::UVScale' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Taper_) == 0x000020, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Taper_' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, __WorldContext) == 0x000028, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Verticies) == 0x000030, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Verticies' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Triangles) == 0x000040, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Triangles' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Normals) == 0x000050, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Normals' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, UVs) == 0x000060, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::UVs' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Radius) == 0x000070, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Radius' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Taper_Spline) == 0x000074, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Taper_Spline' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Twist_Value) == 0x000078, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Twist_Value' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Out_UVs) == 0x000080, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Out_UVs' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Edge_Loops) == 0x000090, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Edge_Loops' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Sides) == 0x000094, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Base_Thickness) == 0x000098, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Base_Thickness' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Twist) == 0x00009C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Twist' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Out_Normals) == 0x0000A0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Out_Normals' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Out_Triangles) == 0x0000B0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Out_Triangles' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Out_Verts) == 0x0000C0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Out_Verts' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Spline_Length) == 0x0000D0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Spline_Length' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Local_Spline) == 0x0000D8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Local_Spline' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Temp_int_Variable) == 0x0000E0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Temp_int_Variable1) == 0x0000E8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue1) == 0x0000EC, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000F0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000F4, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000F8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000FC, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Max_ReturnValue) == 0x000100, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x000104, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000108, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x00010C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue2) == 0x000110, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000114, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Subtract_IntInt_ReturnValue) == 0x000118, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Max_ReturnValue1) == 0x00011C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Max_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Conv_IntToFloat_ReturnValue2) == 0x000120, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Conv_IntToFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000124, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Max_ReturnValue2) == 0x000128, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Max_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00012C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Conv_IntToFloat_ReturnValue3) == 0x000130, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Conv_IntToFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Conv_IntToFloat_ReturnValue4) == 0x000134, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Conv_IntToFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Divide_FloatFloat_ReturnValue3) == 0x000138, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Divide_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x00013C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_IntFloat_ReturnValue2) == 0x000140, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_IntFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_MakeVector2D_ReturnValue) == 0x000144, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x00014C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Temp_int_Variable2) == 0x000154, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Array_Add_ReturnValue) == 0x000158, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_LessEqual_IntInt_ReturnValue2) == 0x00015C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_LessEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue3) == 0x000160, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_FloatFloat_ReturnValue) == 0x000164, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000168, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_GetSplineLength_ReturnValue) == 0x00016C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Divide_FloatFloat_ReturnValue4) == 0x000170, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Divide_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_IntFloat_ReturnValue3) == 0x000174, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_IntFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_GetPI_ReturnValue) == 0x000178, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue) == 0x000180, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0001B0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_BreakTransform_Location) == 0x0001B4, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_BreakTransform_Rotation) == 0x0001C0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_BreakTransform_Scale) == 0x0001CC, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Divide_FloatFloat_ReturnValue5) == 0x0001D8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Divide_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_BreakRotator_Roll) == 0x0001DC, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_BreakRotator_Pitch) == 0x0001E0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_BreakRotator_Yaw) == 0x0001E4, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_IntFloat_ReturnValue4) == 0x0001E8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_IntFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_FloatFloat_ReturnValue1) == 0x0001EC, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Cos_ReturnValue) == 0x0001F0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_MakeRotator_ReturnValue) == 0x0001F4, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Sin_ReturnValue) == 0x000200, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_MakeTransform_ReturnValue) == 0x000210, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_MakeVector_ReturnValue) == 0x000240, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, Temp_int_Variable3) == 0x00024C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::Temp_int_Variable3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000250, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Multiply_IntInt_ReturnValue) == 0x00025C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_TransformLocation_ReturnValue) == 0x000260, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue4) == 0x00026C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000270, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue5) == 0x00027C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Normal_ReturnValue) == 0x000280, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue6) == 0x00028C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Array_Add_ReturnValue1) == 0x000290, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue7) == 0x000294, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue8) == 0x000298, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue8' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue9) == 0x00029C, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue9' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Array_Add_ReturnValue2) == 0x0002A0, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, K2Node_MakeArray_Array) == 0x0002A8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_LessEqual_IntInt_ReturnValue3) == 0x0002B8, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_LessEqual_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Loft_Spline, CallFunc_Add_IntInt_ReturnValue10) == 0x0002BC, "Member 'OakProceduralMeshFunctions_C_Loft_Spline::CallFunc_Add_IntInt_ReturnValue10' has a wrong offset!");

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.Make Circular Vertex Array
// 0x0080 (0x0080 - 0x0000)
struct OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sides;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Circle_Verts;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        Verts;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array) == 0x000008, "Wrong alignment on OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array");
static_assert(sizeof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array) == 0x000080, "Wrong size on OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, Radius) == 0x000000, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::Radius' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, Sides) == 0x000004, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, __WorldContext) == 0x000008, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, Circle_Verts) == 0x000010, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::Circle_Verts' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, Verts) == 0x000020, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::Verts' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000030, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_GetPI_ReturnValue) == 0x000038, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, Temp_int_Variable) == 0x00003C, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x000044, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000048, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004C, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000050, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Sin_ReturnValue) == 0x000054, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Cos_ReturnValue) == 0x000058, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00006C, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'OakProceduralMeshFunctions_C_Make_Circular_Vertex_Array::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function OakProceduralMeshFunctions.OakProceduralMeshFunctions_C.FlatTube
// 0x01D0 (0x01D0 - 0x0000)
struct OakProceduralMeshFunctions_C_FlatTube final
{
public:
	float                                         Inner_Radius;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Outer_Radius;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sides;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Radial_Segments;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UV_Scale;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Vertices;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 Triangles;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        Normals;                                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector2D>                      UV0;                                               // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FLinearColor>                   Vertex_Colors;                                     // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector2D>                      UVs;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Local_RadialSegments;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Local_Sides;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Tris;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVector>                        Verts;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue1;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue4;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue2;             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue3;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue5;                  // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue4;             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue6;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue5;             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0128(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array1;                           // 0x0138(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue7;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue8;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue6;             // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue7;             // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue3;           // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0178(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   K2Node_MakeArray_Array2;                           // 0x01B0(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<struct FVector>                        K2Node_MakeArray_Array3;                           // 0x01C0(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(OakProceduralMeshFunctions_C_FlatTube) == 0x000008, "Wrong alignment on OakProceduralMeshFunctions_C_FlatTube");
static_assert(sizeof(OakProceduralMeshFunctions_C_FlatTube) == 0x0001D0, "Wrong size on OakProceduralMeshFunctions_C_FlatTube");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Inner_Radius) == 0x000000, "Member 'OakProceduralMeshFunctions_C_FlatTube::Inner_Radius' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Outer_Radius) == 0x000004, "Member 'OakProceduralMeshFunctions_C_FlatTube::Outer_Radius' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Sides) == 0x000008, "Member 'OakProceduralMeshFunctions_C_FlatTube::Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Radial_Segments) == 0x00000C, "Member 'OakProceduralMeshFunctions_C_FlatTube::Radial_Segments' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, UV_Scale) == 0x000010, "Member 'OakProceduralMeshFunctions_C_FlatTube::UV_Scale' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, __WorldContext) == 0x000018, "Member 'OakProceduralMeshFunctions_C_FlatTube::__WorldContext' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Vertices) == 0x000020, "Member 'OakProceduralMeshFunctions_C_FlatTube::Vertices' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Triangles) == 0x000030, "Member 'OakProceduralMeshFunctions_C_FlatTube::Triangles' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Normals) == 0x000040, "Member 'OakProceduralMeshFunctions_C_FlatTube::Normals' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, UV0) == 0x000050, "Member 'OakProceduralMeshFunctions_C_FlatTube::UV0' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Vertex_Colors) == 0x000060, "Member 'OakProceduralMeshFunctions_C_FlatTube::Vertex_Colors' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, UVs) == 0x000070, "Member 'OakProceduralMeshFunctions_C_FlatTube::UVs' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Local_RadialSegments) == 0x000080, "Member 'OakProceduralMeshFunctions_C_FlatTube::Local_RadialSegments' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Local_Sides) == 0x000084, "Member 'OakProceduralMeshFunctions_C_FlatTube::Local_Sides' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Tris) == 0x000088, "Member 'OakProceduralMeshFunctions_C_FlatTube::Tris' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Verts) == 0x000098, "Member 'OakProceduralMeshFunctions_C_FlatTube::Verts' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_GetPI_ReturnValue) == 0x0000A8, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_BreakVector2D_X) == 0x0000AC, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_BreakVector2D_Y) == 0x0000B0, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B4, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000B8, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Temp_int_Variable) == 0x0000BC, "Member 'OakProceduralMeshFunctions_C_FlatTube::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000C4, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000C8, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x0000CC, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue1) == 0x0000D0, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_IntInt_ReturnValue1) == 0x0000D4, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, Temp_int_Variable1) == 0x0000D8, "Member 'OakProceduralMeshFunctions_C_FlatTube::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue2) == 0x0000DC, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue3) == 0x0000E0, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000E4, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue4) == 0x0000E8, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue2) == 0x0000EC, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue3) == 0x0000F0, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000F4, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x0000F8, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000FC, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000100, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_FloatFloat_ReturnValue) == 0x000104, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000108, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00010C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000110, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue5) == 0x000114, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue4) == 0x000118, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue6) == 0x00011C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue5) == 0x000120, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, K2Node_MakeArray_Array) == 0x000128, "Member 'OakProceduralMeshFunctions_C_FlatTube::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, K2Node_MakeArray_Array1) == 0x000138, "Member 'OakProceduralMeshFunctions_C_FlatTube::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue7) == 0x000148, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Add_IntInt_ReturnValue8) == 0x00014C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Add_IntInt_ReturnValue8' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x000150, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue6) == 0x000154, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000158, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Conv_IntToFloat_ReturnValue7) == 0x00015C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Conv_IntToFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000160, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Divide_FloatFloat_ReturnValue3) == 0x000164, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Divide_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x000168, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x00016C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x000170, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x000174, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_MakeVector2D_ReturnValue) == 0x000178, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Sin_ReturnValue) == 0x000180, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Array_Add_ReturnValue) == 0x000184, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Cos_ReturnValue) == 0x000188, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x00018C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_MakeVector_ReturnValue) == 0x000190, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_BooleanOR_ReturnValue) == 0x00019C, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001A0, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, CallFunc_Array_Add_ReturnValue1) == 0x0001AC, "Member 'OakProceduralMeshFunctions_C_FlatTube::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, K2Node_MakeArray_Array2) == 0x0001B0, "Member 'OakProceduralMeshFunctions_C_FlatTube::K2Node_MakeArray_Array2' has a wrong offset!");
static_assert(offsetof(OakProceduralMeshFunctions_C_FlatTube, K2Node_MakeArray_Array3) == 0x0001C0, "Member 'OakProceduralMeshFunctions_C_FlatTube::K2Node_MakeArray_Array3' has a wrong offset!");

}

