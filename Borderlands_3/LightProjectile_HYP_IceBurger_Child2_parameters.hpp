#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightProjectile_HYP_IceBurger_Child2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function LightProjectile_HYP_IceBurger_Child2.LightProjectile_HYP_IceBurger_Child2_C.OnRicochet
// 0x00A8 (0x00A8 - 0x0000)
struct LightProjectile_HYP_IceBurger_Child2_C_OnRicochet final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                ImpactVelocity;                                    // 0x0098(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceExplosionRadius;                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_HYP_IceBurger_Child2_C_OnRicochet) == 0x000008, "Wrong alignment on LightProjectile_HYP_IceBurger_Child2_C_OnRicochet");
static_assert(sizeof(LightProjectile_HYP_IceBurger_Child2_C_OnRicochet) == 0x0000A8, "Wrong size on LightProjectile_HYP_IceBurger_Child2_C_OnRicochet");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnRicochet, Projectile) == 0x000000, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnRicochet::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnRicochet, Hit) == 0x000008, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnRicochet::Hit' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnRicochet, ImpactVelocity) == 0x000098, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnRicochet::ImpactVelocity' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnRicochet, BounceExplosionRadius) == 0x0000A4, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnRicochet::BounceExplosionRadius' has a wrong offset!");

// Function LightProjectile_HYP_IceBurger_Child2.LightProjectile_HYP_IceBurger_Child2_C.OnLifetimeExpired
// 0x0008 (0x0008 - 0x0000)
struct LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired) == 0x000008, "Wrong alignment on LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired");
static_assert(sizeof(LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired) == 0x000008, "Wrong size on LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired, Projectile) == 0x000000, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnLifetimeExpired::Projectile' has a wrong offset!");

// Function LightProjectile_HYP_IceBurger_Child2.LightProjectile_HYP_IceBurger_Child2_C.OnExplode
// 0x0010 (0x0010 - 0x0000)
struct LightProjectile_HYP_IceBurger_Child2_C_OnExplode final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_PlayExplosion_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_HYP_IceBurger_Child2_C_OnExplode) == 0x000008, "Wrong alignment on LightProjectile_HYP_IceBurger_Child2_C_OnExplode");
static_assert(sizeof(LightProjectile_HYP_IceBurger_Child2_C_OnExplode) == 0x000010, "Wrong size on LightProjectile_HYP_IceBurger_Child2_C_OnExplode");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnExplode, Projectile) == 0x000000, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnExplode::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnExplode, CallFunc_PlayExplosion_ReturnValue) == 0x000008, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnExplode::CallFunc_PlayExplosion_ReturnValue' has a wrong offset!");

// Function LightProjectile_HYP_IceBurger_Child2.LightProjectile_HYP_IceBurger_Child2_C.OnDamage
// 0x00C0 (0x00C0 - 0x0000)
struct LightProjectile_HYP_IceBurger_Child2_C_OnDamage final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bCritical;                                         // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x00A8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x00B4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage) == 0x000008, "Wrong alignment on LightProjectile_HYP_IceBurger_Child2_C_OnDamage");
static_assert(sizeof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage) == 0x0000C0, "Wrong size on LightProjectile_HYP_IceBurger_Child2_C_OnDamage");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage, Projectile) == 0x000000, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnDamage::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage, Hit) == 0x000008, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnDamage::Hit' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage, bCritical) == 0x000098, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnDamage::bCritical' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage, Target) == 0x0000A0, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnDamage::Target' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage, EndLocation) == 0x0000A8, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnDamage::EndLocation' has a wrong offset!");
static_assert(offsetof(LightProjectile_HYP_IceBurger_Child2_C_OnDamage, StartLocation) == 0x0000B4, "Member 'LightProjectile_HYP_IceBurger_Child2_C_OnDamage::StartLocation' has a wrong offset!");

}

