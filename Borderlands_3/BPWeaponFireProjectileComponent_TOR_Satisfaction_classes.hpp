#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeaponFireProjectileComponent_TOR_Satisfaction

#include "Basic.hpp"

#include "GbxWeapon_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWeaponFireProjectileComponent_TOR_Satisfaction.BPWeaponFireProjectileComponent_TOR_Satisfaction_C
// 0x00D0 (0x0A28 - 0x0958)
class UBPWeaponFireProjectileComponent_TOR_Satisfaction_C final : public UWeaponFireProjectileComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0958(0x0008)(Transient, DuplicateTransient)
	class ABPWeap_ATL_BaseWeapon_C*               ATL_BaseWeapon;                                    // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentTargetIndex;                                // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96C[0x4];                                      // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnvQueryParams                        Query;                                             // 0x0970(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BPWeaponFireProjectileComponent_TOR_Satisfaction(int32 EntryPoint);
	void ReceiveBeginPlay();
	class AActor* GetLockedTarget();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWeaponFireProjectileComponent_TOR_Satisfaction_C">();
	}
	static class UBPWeaponFireProjectileComponent_TOR_Satisfaction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPWeaponFireProjectileComponent_TOR_Satisfaction_C>();
	}
};
static_assert(alignof(UBPWeaponFireProjectileComponent_TOR_Satisfaction_C) == 0x000008, "Wrong alignment on UBPWeaponFireProjectileComponent_TOR_Satisfaction_C");
static_assert(sizeof(UBPWeaponFireProjectileComponent_TOR_Satisfaction_C) == 0x000A28, "Wrong size on UBPWeaponFireProjectileComponent_TOR_Satisfaction_C");
static_assert(offsetof(UBPWeaponFireProjectileComponent_TOR_Satisfaction_C, UberGraphFrame) == 0x000958, "Member 'UBPWeaponFireProjectileComponent_TOR_Satisfaction_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPWeaponFireProjectileComponent_TOR_Satisfaction_C, ATL_BaseWeapon) == 0x000960, "Member 'UBPWeaponFireProjectileComponent_TOR_Satisfaction_C::ATL_BaseWeapon' has a wrong offset!");
static_assert(offsetof(UBPWeaponFireProjectileComponent_TOR_Satisfaction_C, CurrentTargetIndex) == 0x000968, "Member 'UBPWeaponFireProjectileComponent_TOR_Satisfaction_C::CurrentTargetIndex' has a wrong offset!");
static_assert(offsetof(UBPWeaponFireProjectileComponent_TOR_Satisfaction_C, Query) == 0x000970, "Member 'UBPWeaponFireProjectileComponent_TOR_Satisfaction_C::Query' has a wrong offset!");

}

