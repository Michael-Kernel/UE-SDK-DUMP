#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weapon_Hardpoint_Minigun

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "Engine_structs.hpp"
#include "WwiseAudio_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "WeaponType_Hardpoints_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Weapon_Hardpoint_Minigun.Weapon_Hardpoint_Minigun_C
// 0x0178 (0x0C00 - 0x0A88)
class AWeapon_Hardpoint_Minigun_C : public AWeaponType_Hardpoints_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Weapon_Hardpoint_Minigun_C;         // 0x0A88(0x0008)(Transient, DuplicateTransient)
	class UOakDamageModifierComponent*            OakDamageModifier;                                 // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStatusEffectManagerComponent*          StatusEffectManager;                               // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakWeaponAudioProviderComponent*       OakWeaponAudioProvider;                            // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWeaponFireProjectileComponent*         WeaponFireProjectile_Minigun;                      // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWeaponRecoilPatternComponent*          WeaponRecoilPattern;                               // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHeatComponent_Gunner_Minigun_C*        HeatComponent_Gunner_Minigun;                      // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FAttributeEffectData                   AttEffect_UseHeatImpulse_Mod1;                     // 0x0AC0(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FAttributeEffectData                   AttEffect_Mod3_CryoMultiplier;                     // 0x0B08(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FAttributeEffectData                   AttEffect_Mod3_UseHeatImpulse;                     // 0x0B50(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FAttributeEffectData                   AttEffect_Mod3_MaxAccuracy;                        // 0x0B98(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UWwiseEvent*                            OverHeatAudioLoop;                                 // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 OverheatAudioLoopInstance;                         // 0x0BE8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Weapon_Hardpoint_Minigun(int32 EntryPoint);
	void InitializeHardPointIronCub();
	void K2_Initialize();
	void K2_InitializeMod();
	void BndEvt__HeatComponent_Gunner_Minigun_K2Node_ComponentBoundEvent_0_HeatChangedDelegate__DelegateSignature_Weapon_Hardpoint_Minigun();
	void UserConstructionScript();
	void InitializeBarrelMaterials();
	void SetupMod3();
	void SetupMod1();
	void SetupMod2();
	void InitAudio();
	void StopOverheatAudio();

	void GetShellCasingEjectEffect(class UParticleSystem** FX) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Weapon_Hardpoint_Minigun_C">();
	}
	static class AWeapon_Hardpoint_Minigun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeapon_Hardpoint_Minigun_C>();
	}
};
static_assert(alignof(AWeapon_Hardpoint_Minigun_C) == 0x000008, "Wrong alignment on AWeapon_Hardpoint_Minigun_C");
static_assert(sizeof(AWeapon_Hardpoint_Minigun_C) == 0x000C00, "Wrong size on AWeapon_Hardpoint_Minigun_C");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, UberGraphFrame_Weapon_Hardpoint_Minigun_C) == 0x000A88, "Member 'AWeapon_Hardpoint_Minigun_C::UberGraphFrame_Weapon_Hardpoint_Minigun_C' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, OakDamageModifier) == 0x000A90, "Member 'AWeapon_Hardpoint_Minigun_C::OakDamageModifier' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, StatusEffectManager) == 0x000A98, "Member 'AWeapon_Hardpoint_Minigun_C::StatusEffectManager' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, OakWeaponAudioProvider) == 0x000AA0, "Member 'AWeapon_Hardpoint_Minigun_C::OakWeaponAudioProvider' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, WeaponFireProjectile_Minigun) == 0x000AA8, "Member 'AWeapon_Hardpoint_Minigun_C::WeaponFireProjectile_Minigun' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, WeaponRecoilPattern) == 0x000AB0, "Member 'AWeapon_Hardpoint_Minigun_C::WeaponRecoilPattern' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, HeatComponent_Gunner_Minigun) == 0x000AB8, "Member 'AWeapon_Hardpoint_Minigun_C::HeatComponent_Gunner_Minigun' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, AttEffect_UseHeatImpulse_Mod1) == 0x000AC0, "Member 'AWeapon_Hardpoint_Minigun_C::AttEffect_UseHeatImpulse_Mod1' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, AttEffect_Mod3_CryoMultiplier) == 0x000B08, "Member 'AWeapon_Hardpoint_Minigun_C::AttEffect_Mod3_CryoMultiplier' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, AttEffect_Mod3_UseHeatImpulse) == 0x000B50, "Member 'AWeapon_Hardpoint_Minigun_C::AttEffect_Mod3_UseHeatImpulse' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, AttEffect_Mod3_MaxAccuracy) == 0x000B98, "Member 'AWeapon_Hardpoint_Minigun_C::AttEffect_Mod3_MaxAccuracy' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, OverHeatAudioLoop) == 0x000BE0, "Member 'AWeapon_Hardpoint_Minigun_C::OverHeatAudioLoop' has a wrong offset!");
static_assert(offsetof(AWeapon_Hardpoint_Minigun_C, OverheatAudioLoopInstance) == 0x000BE8, "Member 'AWeapon_Hardpoint_Minigun_C::OverheatAudioLoopInstance' has a wrong offset!");

}

