#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WwiseAudio

#include "Basic.hpp"

#include "WwiseAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WwiseAudio.WwiseAmbientSound.GetAudioEmitterLocation
// 0x0018 (0x0018 - 0x0000)
struct WwiseAmbientSound_GetAudioEmitterLocation final
{
public:
	struct FVector                                ListenerLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAmbientSound_GetAudioEmitterLocation) == 0x000004, "Wrong alignment on WwiseAmbientSound_GetAudioEmitterLocation");
static_assert(sizeof(WwiseAmbientSound_GetAudioEmitterLocation) == 0x000018, "Wrong size on WwiseAmbientSound_GetAudioEmitterLocation");
static_assert(offsetof(WwiseAmbientSound_GetAudioEmitterLocation, ListenerLocation) == 0x000000, "Member 'WwiseAmbientSound_GetAudioEmitterLocation::ListenerLocation' has a wrong offset!");
static_assert(offsetof(WwiseAmbientSound_GetAudioEmitterLocation, ReturnValue) == 0x00000C, "Member 'WwiseAmbientSound_GetAudioEmitterLocation::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.GetPlayingInstances
// 0x0010 (0x0010 - 0x0000)
struct WwiseAudioComponent_GetPlayingInstances final
{
public:
	TArray<struct FWwisePlaybackInstance>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_GetPlayingInstances) == 0x000008, "Wrong alignment on WwiseAudioComponent_GetPlayingInstances");
static_assert(sizeof(WwiseAudioComponent_GetPlayingInstances) == 0x000010, "Wrong size on WwiseAudioComponent_GetPlayingInstances");
static_assert(offsetof(WwiseAudioComponent_GetPlayingInstances, ReturnValue) == 0x000000, "Member 'WwiseAudioComponent_GetPlayingInstances::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.GetRtpcValue
// 0x0010 (0x0010 - 0x0000)
struct WwiseAudioComponent_GetRtpcValue final
{
public:
	class UWwiseRtpc*                             RTPC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseAudioComponent_GetRtpcValue) == 0x000008, "Wrong alignment on WwiseAudioComponent_GetRtpcValue");
static_assert(sizeof(WwiseAudioComponent_GetRtpcValue) == 0x000010, "Wrong size on WwiseAudioComponent_GetRtpcValue");
static_assert(offsetof(WwiseAudioComponent_GetRtpcValue, RTPC) == 0x000000, "Member 'WwiseAudioComponent_GetRtpcValue::RTPC' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_GetRtpcValue, ReturnValue) == 0x000008, "Member 'WwiseAudioComponent_GetRtpcValue::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.IsPossiblyAudible
// 0x0010 (0x0010 - 0x0000)
struct WwiseAudioComponent_IsPossiblyAudible final
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventAttenuationScale;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseAudioComponent_IsPossiblyAudible) == 0x000008, "Wrong alignment on WwiseAudioComponent_IsPossiblyAudible");
static_assert(sizeof(WwiseAudioComponent_IsPossiblyAudible) == 0x000010, "Wrong size on WwiseAudioComponent_IsPossiblyAudible");
static_assert(offsetof(WwiseAudioComponent_IsPossiblyAudible, WwiseEvent) == 0x000000, "Member 'WwiseAudioComponent_IsPossiblyAudible::WwiseEvent' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_IsPossiblyAudible, EventAttenuationScale) == 0x000008, "Member 'WwiseAudioComponent_IsPossiblyAudible::EventAttenuationScale' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_IsPossiblyAudible, ReturnValue) == 0x00000C, "Member 'WwiseAudioComponent_IsPossiblyAudible::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.MakeMidiNote
// 0x0020 (0x0020 - 0x0000)
struct WwiseAudioComponent_MakeMidiNote final
{
public:
	int32                                         NoteNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Velocity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            AssociatedEvent;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_MakeMidiNote) == 0x000008, "Wrong alignment on WwiseAudioComponent_MakeMidiNote");
static_assert(sizeof(WwiseAudioComponent_MakeMidiNote) == 0x000020, "Wrong size on WwiseAudioComponent_MakeMidiNote");
static_assert(offsetof(WwiseAudioComponent_MakeMidiNote, NoteNum) == 0x000000, "Member 'WwiseAudioComponent_MakeMidiNote::NoteNum' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_MakeMidiNote, Velocity) == 0x000004, "Member 'WwiseAudioComponent_MakeMidiNote::Velocity' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_MakeMidiNote, Channel) == 0x000008, "Member 'WwiseAudioComponent_MakeMidiNote::Channel' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_MakeMidiNote, Duration) == 0x00000C, "Member 'WwiseAudioComponent_MakeMidiNote::Duration' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_MakeMidiNote, StartTime) == 0x000010, "Member 'WwiseAudioComponent_MakeMidiNote::StartTime' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_MakeMidiNote, AssociatedEvent) == 0x000018, "Member 'WwiseAudioComponent_MakeMidiNote::AssociatedEvent' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.PostTrigger
// 0x0008 (0x0008 - 0x0000)
struct WwiseAudioComponent_PostTrigger final
{
public:
	class UWwiseTrigger*                          Trigger;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_PostTrigger) == 0x000008, "Wrong alignment on WwiseAudioComponent_PostTrigger");
static_assert(sizeof(WwiseAudioComponent_PostTrigger) == 0x000008, "Wrong size on WwiseAudioComponent_PostTrigger");
static_assert(offsetof(WwiseAudioComponent_PostTrigger, Trigger) == 0x000000, "Member 'WwiseAudioComponent_PostTrigger::Trigger' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.PostWwiseEvent
// 0x0028 (0x0028 - 0x0000)
struct WwiseAudioComponent_PostWwiseEvent final
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_PostWwiseEvent) == 0x000008, "Wrong alignment on WwiseAudioComponent_PostWwiseEvent");
static_assert(sizeof(WwiseAudioComponent_PostWwiseEvent) == 0x000028, "Wrong size on WwiseAudioComponent_PostWwiseEvent");
static_assert(offsetof(WwiseAudioComponent_PostWwiseEvent, WwiseEvent) == 0x000000, "Member 'WwiseAudioComponent_PostWwiseEvent::WwiseEvent' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_PostWwiseEvent, Flags_0) == 0x000008, "Member 'WwiseAudioComponent_PostWwiseEvent::Flags_0' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_PostWwiseEvent, ReturnValue) == 0x000010, "Member 'WwiseAudioComponent_PostWwiseEvent::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.RegisterRtpcValueCallback
// 0x0010 (0x0010 - 0x0000)
struct WwiseAudioComponent_RegisterRtpcValueCallback final
{
public:
	TArray<class UWwiseRtpc*>                     CallbackRtpcs;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_RegisterRtpcValueCallback) == 0x000008, "Wrong alignment on WwiseAudioComponent_RegisterRtpcValueCallback");
static_assert(sizeof(WwiseAudioComponent_RegisterRtpcValueCallback) == 0x000010, "Wrong size on WwiseAudioComponent_RegisterRtpcValueCallback");
static_assert(offsetof(WwiseAudioComponent_RegisterRtpcValueCallback, CallbackRtpcs) == 0x000000, "Member 'WwiseAudioComponent_RegisterRtpcValueCallback::CallbackRtpcs' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.ScaleAttenuation
// 0x0004 (0x0004 - 0x0000)
struct WwiseAudioComponent_ScaleAttenuation final
{
public:
	float                                         ScalingFactor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_ScaleAttenuation) == 0x000004, "Wrong alignment on WwiseAudioComponent_ScaleAttenuation");
static_assert(sizeof(WwiseAudioComponent_ScaleAttenuation) == 0x000004, "Wrong size on WwiseAudioComponent_ScaleAttenuation");
static_assert(offsetof(WwiseAudioComponent_ScaleAttenuation, ScalingFactor) == 0x000000, "Member 'WwiseAudioComponent_ScaleAttenuation::ScalingFactor' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.ScaleToRadius
// 0x0004 (0x0004 - 0x0000)
struct WwiseAudioComponent_ScaleToRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_ScaleToRadius) == 0x000004, "Wrong alignment on WwiseAudioComponent_ScaleToRadius");
static_assert(sizeof(WwiseAudioComponent_ScaleToRadius) == 0x000004, "Wrong size on WwiseAudioComponent_ScaleToRadius");
static_assert(offsetof(WwiseAudioComponent_ScaleToRadius, Radius) == 0x000000, "Member 'WwiseAudioComponent_ScaleToRadius::Radius' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.SetEmitterLocations
// 0x0018 (0x0018 - 0x0000)
struct WwiseAudioComponent_SetEmitterLocations final
{
public:
	TArray<struct FWwiseLocationOverride>         NewLocations;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EWwiseMultiPositionType                       MultiPositionType_0;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationsAreRelative;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseAudioComponent_SetEmitterLocations) == 0x000008, "Wrong alignment on WwiseAudioComponent_SetEmitterLocations");
static_assert(sizeof(WwiseAudioComponent_SetEmitterLocations) == 0x000018, "Wrong size on WwiseAudioComponent_SetEmitterLocations");
static_assert(offsetof(WwiseAudioComponent_SetEmitterLocations, NewLocations) == 0x000000, "Member 'WwiseAudioComponent_SetEmitterLocations::NewLocations' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_SetEmitterLocations, MultiPositionType_0) == 0x000010, "Member 'WwiseAudioComponent_SetEmitterLocations::MultiPositionType_0' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_SetEmitterLocations, bLocationsAreRelative) == 0x000011, "Member 'WwiseAudioComponent_SetEmitterLocations::bLocationsAreRelative' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.SetRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct WwiseAudioComponent_SetRTPCValue final
{
public:
	class UWwiseRtpc*                             GameParameter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueChangeDuration;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseAudioComponent_SetRTPCValue) == 0x000008, "Wrong alignment on WwiseAudioComponent_SetRTPCValue");
static_assert(sizeof(WwiseAudioComponent_SetRTPCValue) == 0x000018, "Wrong size on WwiseAudioComponent_SetRTPCValue");
static_assert(offsetof(WwiseAudioComponent_SetRTPCValue, GameParameter) == 0x000000, "Member 'WwiseAudioComponent_SetRTPCValue::GameParameter' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_SetRTPCValue, Value) == 0x000008, "Member 'WwiseAudioComponent_SetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_SetRTPCValue, ValueChangeDuration) == 0x00000C, "Member 'WwiseAudioComponent_SetRTPCValue::ValueChangeDuration' has a wrong offset!");
static_assert(offsetof(WwiseAudioComponent_SetRTPCValue, FadeCurve) == 0x000010, "Member 'WwiseAudioComponent_SetRTPCValue::FadeCurve' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.SetSwitch
// 0x0008 (0x0008 - 0x0000)
struct WwiseAudioComponent_SetSwitch final
{
public:
	class UWwiseSwitch*                           WwiseSwitch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_SetSwitch) == 0x000008, "Wrong alignment on WwiseAudioComponent_SetSwitch");
static_assert(sizeof(WwiseAudioComponent_SetSwitch) == 0x000008, "Wrong size on WwiseAudioComponent_SetSwitch");
static_assert(offsetof(WwiseAudioComponent_SetSwitch, WwiseSwitch) == 0x000000, "Member 'WwiseAudioComponent_SetSwitch::WwiseSwitch' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.StartManagedLoop
// 0x0008 (0x0008 - 0x0000)
struct WwiseAudioComponent_StartManagedLoop final
{
public:
	class UWwiseEvent*                            NewLoopEvent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_StartManagedLoop) == 0x000008, "Wrong alignment on WwiseAudioComponent_StartManagedLoop");
static_assert(sizeof(WwiseAudioComponent_StartManagedLoop) == 0x000008, "Wrong size on WwiseAudioComponent_StartManagedLoop");
static_assert(offsetof(WwiseAudioComponent_StartManagedLoop, NewLoopEvent) == 0x000000, "Member 'WwiseAudioComponent_StartManagedLoop::NewLoopEvent' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.StopManagedLoop
// 0x0008 (0x0008 - 0x0000)
struct WwiseAudioComponent_StopManagedLoop final
{
public:
	class UWwiseEvent*                            OptionalStopEvent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_StopManagedLoop) == 0x000008, "Wrong alignment on WwiseAudioComponent_StopManagedLoop");
static_assert(sizeof(WwiseAudioComponent_StopManagedLoop) == 0x000008, "Wrong size on WwiseAudioComponent_StopManagedLoop");
static_assert(offsetof(WwiseAudioComponent_StopManagedLoop, OptionalStopEvent) == 0x000000, "Member 'WwiseAudioComponent_StopManagedLoop::OptionalStopEvent' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.GetMaxAttenuationRadius
// 0x0004 (0x0004 - 0x0000)
struct WwiseAudioComponent_GetMaxAttenuationRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_GetMaxAttenuationRadius) == 0x000004, "Wrong alignment on WwiseAudioComponent_GetMaxAttenuationRadius");
static_assert(sizeof(WwiseAudioComponent_GetMaxAttenuationRadius) == 0x000004, "Wrong size on WwiseAudioComponent_GetMaxAttenuationRadius");
static_assert(offsetof(WwiseAudioComponent_GetMaxAttenuationRadius, ReturnValue) == 0x000000, "Member 'WwiseAudioComponent_GetMaxAttenuationRadius::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.GetRadius
// 0x0004 (0x0004 - 0x0000)
struct WwiseAudioComponent_GetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_GetRadius) == 0x000004, "Wrong alignment on WwiseAudioComponent_GetRadius");
static_assert(sizeof(WwiseAudioComponent_GetRadius) == 0x000004, "Wrong size on WwiseAudioComponent_GetRadius");
static_assert(offsetof(WwiseAudioComponent_GetRadius, ReturnValue) == 0x000000, "Member 'WwiseAudioComponent_GetRadius::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct WwiseAudioComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_IsPlaying) == 0x000001, "Wrong alignment on WwiseAudioComponent_IsPlaying");
static_assert(sizeof(WwiseAudioComponent_IsPlaying) == 0x000001, "Wrong size on WwiseAudioComponent_IsPlaying");
static_assert(offsetof(WwiseAudioComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'WwiseAudioComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseAudioComponentPool.GetPooledComponent
// 0x0008 (0x0008 - 0x0000)
struct WwiseAudioComponentPool_GetPooledComponent final
{
public:
	class UWwiseAudioComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponentPool_GetPooledComponent) == 0x000008, "Wrong alignment on WwiseAudioComponentPool_GetPooledComponent");
static_assert(sizeof(WwiseAudioComponentPool_GetPooledComponent) == 0x000008, "Wrong size on WwiseAudioComponentPool_GetPooledComponent");
static_assert(offsetof(WwiseAudioComponentPool_GetPooledComponent, ReturnValue) == 0x000000, "Member 'WwiseAudioComponentPool_GetPooledComponent::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseEvent.GetMaxDuration
// 0x0004 (0x0004 - 0x0000)
struct WwiseEvent_GetMaxDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseEvent_GetMaxDuration) == 0x000004, "Wrong alignment on WwiseEvent_GetMaxDuration");
static_assert(sizeof(WwiseEvent_GetMaxDuration) == 0x000004, "Wrong size on WwiseEvent_GetMaxDuration");
static_assert(offsetof(WwiseEvent_GetMaxDuration, ReturnValue) == 0x000000, "Member 'WwiseEvent_GetMaxDuration::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.AddOutputCaptureMarker
// 0x0010 (0x0010 - 0x0000)
struct WwiseGameplayStatics_AddOutputCaptureMarker final
{
public:
	class FString                                 MarkerText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_AddOutputCaptureMarker) == 0x000008, "Wrong alignment on WwiseGameplayStatics_AddOutputCaptureMarker");
static_assert(sizeof(WwiseGameplayStatics_AddOutputCaptureMarker) == 0x000010, "Wrong size on WwiseGameplayStatics_AddOutputCaptureMarker");
static_assert(offsetof(WwiseGameplayStatics_AddOutputCaptureMarker, MarkerText) == 0x000000, "Member 'WwiseGameplayStatics_AddOutputCaptureMarker::MarkerText' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.ConvertLocationsToWwiseLocationOverrides
// 0x0038 (0x0038 - 0x0000)
struct WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWwiseLocationOverride>         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides) == 0x000008, "Wrong alignment on WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides");
static_assert(sizeof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides) == 0x000038, "Wrong size on WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides");
static_assert(offsetof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides, Locations) == 0x000000, "Member 'WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides::Locations' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides, Orientation) == 0x000010, "Member 'WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides::Orientation' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides, Gain) == 0x00001C, "Member 'WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides::Gain' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides, Radius) == 0x000020, "Member 'WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides::Radius' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides, ReturnValue) == 0x000028, "Member 'WwiseGameplayStatics_ConvertLocationsToWwiseLocationOverrides::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.CreateAudioEffect
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_CreateAudioEffect final
{
public:
	class UWwiseAuxBus*                           AuxBus;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseEffectType                              EffectType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WetAmount;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseAudioEffect*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_CreateAudioEffect) == 0x000008, "Wrong alignment on WwiseGameplayStatics_CreateAudioEffect");
static_assert(sizeof(WwiseGameplayStatics_CreateAudioEffect) == 0x000020, "Wrong size on WwiseGameplayStatics_CreateAudioEffect");
static_assert(offsetof(WwiseGameplayStatics_CreateAudioEffect, AuxBus) == 0x000000, "Member 'WwiseGameplayStatics_CreateAudioEffect::AuxBus' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateAudioEffect, EffectType) == 0x000008, "Member 'WwiseGameplayStatics_CreateAudioEffect::EffectType' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateAudioEffect, WetAmount) == 0x00000C, "Member 'WwiseGameplayStatics_CreateAudioEffect::WetAmount' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateAudioEffect, TargetActor) == 0x000010, "Member 'WwiseGameplayStatics_CreateAudioEffect::TargetActor' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateAudioEffect, ReturnValue) == 0x000018, "Member 'WwiseGameplayStatics_CreateAudioEffect::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.CreateListenerAudioEffect
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_CreateListenerAudioEffect final
{
public:
	class UWwiseAuxBus*                           AuxBus;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetAmount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseListenerEnvironmentalEffect*      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_CreateListenerAudioEffect) == 0x000008, "Wrong alignment on WwiseGameplayStatics_CreateListenerAudioEffect");
static_assert(sizeof(WwiseGameplayStatics_CreateListenerAudioEffect) == 0x000020, "Wrong size on WwiseGameplayStatics_CreateListenerAudioEffect");
static_assert(offsetof(WwiseGameplayStatics_CreateListenerAudioEffect, AuxBus) == 0x000000, "Member 'WwiseGameplayStatics_CreateListenerAudioEffect::AuxBus' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateListenerAudioEffect, TargetActor) == 0x000008, "Member 'WwiseGameplayStatics_CreateListenerAudioEffect::TargetActor' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateListenerAudioEffect, WetAmount) == 0x000010, "Member 'WwiseGameplayStatics_CreateListenerAudioEffect::WetAmount' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateListenerAudioEffect, ReturnValue) == 0x000018, "Member 'WwiseGameplayStatics_CreateListenerAudioEffect::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.CreateZoneAudioEffect
// 0x0030 (0x0030 - 0x0000)
struct WwiseGameplayStatics_CreateZoneAudioEffect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseAuxBus*                           AuxBus;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectLocation;                                    // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectSize;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectAttenuationDistance;                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseZoneAudioEffect*                  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_CreateZoneAudioEffect) == 0x000008, "Wrong alignment on WwiseGameplayStatics_CreateZoneAudioEffect");
static_assert(sizeof(WwiseGameplayStatics_CreateZoneAudioEffect) == 0x000030, "Wrong size on WwiseGameplayStatics_CreateZoneAudioEffect");
static_assert(offsetof(WwiseGameplayStatics_CreateZoneAudioEffect, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_CreateZoneAudioEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateZoneAudioEffect, AuxBus) == 0x000008, "Member 'WwiseGameplayStatics_CreateZoneAudioEffect::AuxBus' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateZoneAudioEffect, EffectLocation) == 0x000010, "Member 'WwiseGameplayStatics_CreateZoneAudioEffect::EffectLocation' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateZoneAudioEffect, EffectSize) == 0x00001C, "Member 'WwiseGameplayStatics_CreateZoneAudioEffect::EffectSize' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateZoneAudioEffect, EffectAttenuationDistance) == 0x000020, "Member 'WwiseGameplayStatics_CreateZoneAudioEffect::EffectAttenuationDistance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_CreateZoneAudioEffect, ReturnValue) == 0x000028, "Member 'WwiseGameplayStatics_CreateZoneAudioEffect::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.ExecuteActionOnAudioInstance
// 0x0028 (0x0028 - 0x0000)
struct WwiseGameplayStatics_ExecuteActionOnAudioInstance final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EWwiseEventAction                             Action;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionDuration;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_ExecuteActionOnAudioInstance) == 0x000008, "Wrong alignment on WwiseGameplayStatics_ExecuteActionOnAudioInstance");
static_assert(sizeof(WwiseGameplayStatics_ExecuteActionOnAudioInstance) == 0x000028, "Wrong size on WwiseGameplayStatics_ExecuteActionOnAudioInstance");
static_assert(offsetof(WwiseGameplayStatics_ExecuteActionOnAudioInstance, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_ExecuteActionOnAudioInstance::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ExecuteActionOnAudioInstance, Action) == 0x000018, "Member 'WwiseGameplayStatics_ExecuteActionOnAudioInstance::Action' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ExecuteActionOnAudioInstance, TransitionDuration) == 0x00001C, "Member 'WwiseGameplayStatics_ExecuteActionOnAudioInstance::TransitionDuration' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ExecuteActionOnAudioInstance, FadeCurve) == 0x000020, "Member 'WwiseGameplayStatics_ExecuteActionOnAudioInstance::FadeCurve' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetAudioComponentFromPlaybackInstance
// 0x0028 (0x0028 - 0x0000)
struct WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCreateIfNotFound;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioComponent*                   ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance");
static_assert(sizeof(WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance) == 0x000028, "Wrong size on WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance");
static_assert(offsetof(WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance, bCreateIfNotFound) == 0x000018, "Member 'WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance::bCreateIfNotFound' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance, ReturnValue) == 0x000020, "Member 'WwiseGameplayStatics_GetAudioComponentFromPlaybackInstance::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetAudioPlaybackPosition
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_GetAudioPlaybackPosition final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExtrapolateSubFrameTime;                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_GetAudioPlaybackPosition) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetAudioPlaybackPosition");
static_assert(sizeof(WwiseGameplayStatics_GetAudioPlaybackPosition) == 0x000020, "Wrong size on WwiseGameplayStatics_GetAudioPlaybackPosition");
static_assert(offsetof(WwiseGameplayStatics_GetAudioPlaybackPosition, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_GetAudioPlaybackPosition::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetAudioPlaybackPosition, bExtrapolateSubFrameTime) == 0x000018, "Member 'WwiseGameplayStatics_GetAudioPlaybackPosition::bExtrapolateSubFrameTime' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetAudioPlaybackPosition, ReturnValue) == 0x00001C, "Member 'WwiseGameplayStatics_GetAudioPlaybackPosition::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetClosestListenerLocation
// 0x0028 (0x0028 - 0x0000)
struct WwiseGameplayStatics_GetClosestListenerLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestPosition;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestLocation;                                   // 0x0014(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_GetClosestListenerLocation) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetClosestListenerLocation");
static_assert(sizeof(WwiseGameplayStatics_GetClosestListenerLocation) == 0x000028, "Wrong size on WwiseGameplayStatics_GetClosestListenerLocation");
static_assert(offsetof(WwiseGameplayStatics_GetClosestListenerLocation, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_GetClosestListenerLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetClosestListenerLocation, TestPosition) == 0x000008, "Member 'WwiseGameplayStatics_GetClosestListenerLocation::TestPosition' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetClosestListenerLocation, ClosestLocation) == 0x000014, "Member 'WwiseGameplayStatics_GetClosestListenerLocation::ClosestLocation' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetClosestListenerLocation, bSuccess) == 0x000020, "Member 'WwiseGameplayStatics_GetClosestListenerLocation::bSuccess' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetDefaultWwiseComponent
// 0x0018 (0x0018 - 0x0000)
struct WwiseGameplayStatics_GetDefaultWwiseComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateIfNotFound;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioComponent*                   ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_GetDefaultWwiseComponent) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetDefaultWwiseComponent");
static_assert(sizeof(WwiseGameplayStatics_GetDefaultWwiseComponent) == 0x000018, "Wrong size on WwiseGameplayStatics_GetDefaultWwiseComponent");
static_assert(offsetof(WwiseGameplayStatics_GetDefaultWwiseComponent, Actor) == 0x000000, "Member 'WwiseGameplayStatics_GetDefaultWwiseComponent::Actor' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetDefaultWwiseComponent, bCreateIfNotFound) == 0x000008, "Member 'WwiseGameplayStatics_GetDefaultWwiseComponent::bCreateIfNotFound' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetDefaultWwiseComponent, ReturnValue) == 0x000010, "Member 'WwiseGameplayStatics_GetDefaultWwiseComponent::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetEstimatedAudioDuration
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_GetEstimatedAudioDuration final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_GetEstimatedAudioDuration) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetEstimatedAudioDuration");
static_assert(sizeof(WwiseGameplayStatics_GetEstimatedAudioDuration) == 0x000020, "Wrong size on WwiseGameplayStatics_GetEstimatedAudioDuration");
static_assert(offsetof(WwiseGameplayStatics_GetEstimatedAudioDuration, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_GetEstimatedAudioDuration::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetEstimatedAudioDuration, ReturnValue) == 0x000018, "Member 'WwiseGameplayStatics_GetEstimatedAudioDuration::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetPlayingEvent
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_GetPlayingEvent final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_GetPlayingEvent) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetPlayingEvent");
static_assert(sizeof(WwiseGameplayStatics_GetPlayingEvent) == 0x000020, "Wrong size on WwiseGameplayStatics_GetPlayingEvent");
static_assert(offsetof(WwiseGameplayStatics_GetPlayingEvent, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_GetPlayingEvent::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_GetPlayingEvent, ReturnValue) == 0x000018, "Member 'WwiseGameplayStatics_GetPlayingEvent::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.GetWwiseBankEfficiencyReport
// 0x0010 (0x0010 - 0x0000)
struct WwiseGameplayStatics_GetWwiseBankEfficiencyReport final
{
public:
	TArray<struct FWwiseBankEfficiencyReportDatum> ReportData;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_GetWwiseBankEfficiencyReport) == 0x000008, "Wrong alignment on WwiseGameplayStatics_GetWwiseBankEfficiencyReport");
static_assert(sizeof(WwiseGameplayStatics_GetWwiseBankEfficiencyReport) == 0x000010, "Wrong size on WwiseGameplayStatics_GetWwiseBankEfficiencyReport");
static_assert(offsetof(WwiseGameplayStatics_GetWwiseBankEfficiencyReport, ReportData) == 0x000000, "Member 'WwiseGameplayStatics_GetWwiseBankEfficiencyReport::ReportData' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.IsAudioPaused
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_IsAudioPaused final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_IsAudioPaused) == 0x000008, "Wrong alignment on WwiseGameplayStatics_IsAudioPaused");
static_assert(sizeof(WwiseGameplayStatics_IsAudioPaused) == 0x000020, "Wrong size on WwiseGameplayStatics_IsAudioPaused");
static_assert(offsetof(WwiseGameplayStatics_IsAudioPaused, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_IsAudioPaused::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsAudioPaused, ReturnValue) == 0x000018, "Member 'WwiseGameplayStatics_IsAudioPaused::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.IsAudioPlaying
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_IsAudioPlaying final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_IsAudioPlaying) == 0x000008, "Wrong alignment on WwiseGameplayStatics_IsAudioPlaying");
static_assert(sizeof(WwiseGameplayStatics_IsAudioPlaying) == 0x000020, "Wrong size on WwiseGameplayStatics_IsAudioPlaying");
static_assert(offsetof(WwiseGameplayStatics_IsAudioPlaying, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_IsAudioPlaying::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsAudioPlaying, ReturnValue) == 0x000018, "Member 'WwiseGameplayStatics_IsAudioPlaying::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.IsPossiblyAudible
// 0x0028 (0x0028 - 0x0000)
struct WwiseGameplayStatics_IsPossiblyAudible final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            InWwiseEvent;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationScale;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterRadius;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_IsPossiblyAudible) == 0x000008, "Wrong alignment on WwiseGameplayStatics_IsPossiblyAudible");
static_assert(sizeof(WwiseGameplayStatics_IsPossiblyAudible) == 0x000028, "Wrong size on WwiseGameplayStatics_IsPossiblyAudible");
static_assert(offsetof(WwiseGameplayStatics_IsPossiblyAudible, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_IsPossiblyAudible::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsPossiblyAudible, InWwiseEvent) == 0x000008, "Member 'WwiseGameplayStatics_IsPossiblyAudible::InWwiseEvent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsPossiblyAudible, Location) == 0x000010, "Member 'WwiseGameplayStatics_IsPossiblyAudible::Location' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsPossiblyAudible, AttenuationScale) == 0x00001C, "Member 'WwiseGameplayStatics_IsPossiblyAudible::AttenuationScale' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsPossiblyAudible, EmitterRadius) == 0x000020, "Member 'WwiseGameplayStatics_IsPossiblyAudible::EmitterRadius' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_IsPossiblyAudible, ReturnValue) == 0x000024, "Member 'WwiseGameplayStatics_IsPossiblyAudible::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.LoadBank
// 0x0008 (0x0008 - 0x0000)
struct WwiseGameplayStatics_LoadBank final
{
public:
	class UWwiseBank*                             Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_LoadBank) == 0x000008, "Wrong alignment on WwiseGameplayStatics_LoadBank");
static_assert(sizeof(WwiseGameplayStatics_LoadBank) == 0x000008, "Wrong size on WwiseGameplayStatics_LoadBank");
static_assert(offsetof(WwiseGameplayStatics_LoadBank, Bank) == 0x000000, "Member 'WwiseGameplayStatics_LoadBank::Bank' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.PauseAudio
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_PauseAudio final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_PauseAudio) == 0x000008, "Wrong alignment on WwiseGameplayStatics_PauseAudio");
static_assert(sizeof(WwiseGameplayStatics_PauseAudio) == 0x000020, "Wrong size on WwiseGameplayStatics_PauseAudio");
static_assert(offsetof(WwiseGameplayStatics_PauseAudio, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_PauseAudio::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PauseAudio, TransitionDuration) == 0x000018, "Member 'WwiseGameplayStatics_PauseAudio::TransitionDuration' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PauseAudio, FadeCurve) == 0x00001C, "Member 'WwiseGameplayStatics_PauseAudio::FadeCurve' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.PostAttachedEvent
// 0x0040 (0x0040 - 0x0000)
struct WwiseGameplayStatics_PostAttachedEvent final
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachToActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterRadius;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_PostAttachedEvent) == 0x000008, "Wrong alignment on WwiseGameplayStatics_PostAttachedEvent");
static_assert(sizeof(WwiseGameplayStatics_PostAttachedEvent) == 0x000040, "Wrong size on WwiseGameplayStatics_PostAttachedEvent");
static_assert(offsetof(WwiseGameplayStatics_PostAttachedEvent, WwiseEvent) == 0x000000, "Member 'WwiseGameplayStatics_PostAttachedEvent::WwiseEvent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostAttachedEvent, AttachToActor) == 0x000008, "Member 'WwiseGameplayStatics_PostAttachedEvent::AttachToActor' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostAttachedEvent, AttachToComponent) == 0x000010, "Member 'WwiseGameplayStatics_PostAttachedEvent::AttachToComponent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostAttachedEvent, SocketName) == 0x000018, "Member 'WwiseGameplayStatics_PostAttachedEvent::SocketName' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostAttachedEvent, EmitterRadius) == 0x000020, "Member 'WwiseGameplayStatics_PostAttachedEvent::EmitterRadius' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostAttachedEvent, ReturnValue) == 0x000028, "Member 'WwiseGameplayStatics_PostAttachedEvent::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.PostEventAtLocation
// 0x0048 (0x0048 - 0x0000)
struct WwiseGameplayStatics_PostEventAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterRadius;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_PostEventAtLocation) == 0x000008, "Wrong alignment on WwiseGameplayStatics_PostEventAtLocation");
static_assert(sizeof(WwiseGameplayStatics_PostEventAtLocation) == 0x000048, "Wrong size on WwiseGameplayStatics_PostEventAtLocation");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtLocation, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_PostEventAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtLocation, WwiseEvent) == 0x000008, "Member 'WwiseGameplayStatics_PostEventAtLocation::WwiseEvent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtLocation, Location) == 0x000010, "Member 'WwiseGameplayStatics_PostEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtLocation, EmitterRadius) == 0x00001C, "Member 'WwiseGameplayStatics_PostEventAtLocation::EmitterRadius' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtLocation, Orientation) == 0x000020, "Member 'WwiseGameplayStatics_PostEventAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtLocation, ReturnValue) == 0x000030, "Member 'WwiseGameplayStatics_PostEventAtLocation::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.PostEventAtMultipleLocations
// 0x0040 (0x0040 - 0x0000)
struct WwiseGameplayStatics_PostEventAtMultipleLocations final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWwiseLocationOverride>         NewLocations;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EWwiseMultiPositionType                       MultiPositionType;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwisePlaybackInstance                 ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_PostEventAtMultipleLocations) == 0x000008, "Wrong alignment on WwiseGameplayStatics_PostEventAtMultipleLocations");
static_assert(sizeof(WwiseGameplayStatics_PostEventAtMultipleLocations) == 0x000040, "Wrong size on WwiseGameplayStatics_PostEventAtMultipleLocations");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtMultipleLocations, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_PostEventAtMultipleLocations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtMultipleLocations, WwiseEvent) == 0x000008, "Member 'WwiseGameplayStatics_PostEventAtMultipleLocations::WwiseEvent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtMultipleLocations, NewLocations) == 0x000010, "Member 'WwiseGameplayStatics_PostEventAtMultipleLocations::NewLocations' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtMultipleLocations, MultiPositionType) == 0x000020, "Member 'WwiseGameplayStatics_PostEventAtMultipleLocations::MultiPositionType' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_PostEventAtMultipleLocations, ReturnValue) == 0x000028, "Member 'WwiseGameplayStatics_PostEventAtMultipleLocations::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.ResumeAudio
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_ResumeAudio final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_ResumeAudio) == 0x000008, "Wrong alignment on WwiseGameplayStatics_ResumeAudio");
static_assert(sizeof(WwiseGameplayStatics_ResumeAudio) == 0x000020, "Wrong size on WwiseGameplayStatics_ResumeAudio");
static_assert(offsetof(WwiseGameplayStatics_ResumeAudio, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_ResumeAudio::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ResumeAudio, TransitionDuration) == 0x000018, "Member 'WwiseGameplayStatics_ResumeAudio::TransitionDuration' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_ResumeAudio, FadeCurve) == 0x00001C, "Member 'WwiseGameplayStatics_ResumeAudio::FadeCurve' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.SetAudioPlaybackPosition
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_SetAudioPlaybackPosition final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         PlaybackPosition;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_SetAudioPlaybackPosition) == 0x000008, "Wrong alignment on WwiseGameplayStatics_SetAudioPlaybackPosition");
static_assert(sizeof(WwiseGameplayStatics_SetAudioPlaybackPosition) == 0x000020, "Wrong size on WwiseGameplayStatics_SetAudioPlaybackPosition");
static_assert(offsetof(WwiseGameplayStatics_SetAudioPlaybackPosition, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_SetAudioPlaybackPosition::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SetAudioPlaybackPosition, PlaybackPosition) == 0x000018, "Member 'WwiseGameplayStatics_SetAudioPlaybackPosition::PlaybackPosition' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.SetGlobalRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct WwiseGameplayStatics_SetGlobalRTPCValue final
{
public:
	class UWwiseRtpc*                             GameParameter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_SetGlobalRTPCValue) == 0x000008, "Wrong alignment on WwiseGameplayStatics_SetGlobalRTPCValue");
static_assert(sizeof(WwiseGameplayStatics_SetGlobalRTPCValue) == 0x000018, "Wrong size on WwiseGameplayStatics_SetGlobalRTPCValue");
static_assert(offsetof(WwiseGameplayStatics_SetGlobalRTPCValue, GameParameter) == 0x000000, "Member 'WwiseGameplayStatics_SetGlobalRTPCValue::GameParameter' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SetGlobalRTPCValue, Value) == 0x000008, "Member 'WwiseGameplayStatics_SetGlobalRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SetGlobalRTPCValue, TransitionDuration) == 0x00000C, "Member 'WwiseGameplayStatics_SetGlobalRTPCValue::TransitionDuration' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SetGlobalRTPCValue, FadeCurve) == 0x000010, "Member 'WwiseGameplayStatics_SetGlobalRTPCValue::FadeCurve' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.SetGlobalState
// 0x0008 (0x0008 - 0x0000)
struct WwiseGameplayStatics_SetGlobalState final
{
public:
	class UWwiseState*                            State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_SetGlobalState) == 0x000008, "Wrong alignment on WwiseGameplayStatics_SetGlobalState");
static_assert(sizeof(WwiseGameplayStatics_SetGlobalState) == 0x000008, "Wrong size on WwiseGameplayStatics_SetGlobalState");
static_assert(offsetof(WwiseGameplayStatics_SetGlobalState, State) == 0x000000, "Member 'WwiseGameplayStatics_SetGlobalState::State' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.SpawnAttachedWwiseComponent
// 0x0028 (0x0028 - 0x0000)
struct WwiseGameplayStatics_SpawnAttachedWwiseComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTemporaryComponent;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachmentComponent;                               // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseAudioComponent*                   ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_SpawnAttachedWwiseComponent) == 0x000008, "Wrong alignment on WwiseGameplayStatics_SpawnAttachedWwiseComponent");
static_assert(sizeof(WwiseGameplayStatics_SpawnAttachedWwiseComponent) == 0x000028, "Wrong size on WwiseGameplayStatics_SpawnAttachedWwiseComponent");
static_assert(offsetof(WwiseGameplayStatics_SpawnAttachedWwiseComponent, Actor) == 0x000000, "Member 'WwiseGameplayStatics_SpawnAttachedWwiseComponent::Actor' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnAttachedWwiseComponent, SocketName) == 0x000008, "Member 'WwiseGameplayStatics_SpawnAttachedWwiseComponent::SocketName' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnAttachedWwiseComponent, IsTemporaryComponent) == 0x000010, "Member 'WwiseGameplayStatics_SpawnAttachedWwiseComponent::IsTemporaryComponent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnAttachedWwiseComponent, AttachmentComponent) == 0x000018, "Member 'WwiseGameplayStatics_SpawnAttachedWwiseComponent::AttachmentComponent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnAttachedWwiseComponent, ReturnValue) == 0x000020, "Member 'WwiseGameplayStatics_SpawnAttachedWwiseComponent::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.SpawnWwiseComponentAtLocation
// 0x0030 (0x0030 - 0x0000)
struct WwiseGameplayStatics_SpawnWwiseComponentAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterRadius;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          IsTemporaryComponent;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioComponent*                   ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation) == 0x000008, "Wrong alignment on WwiseGameplayStatics_SpawnWwiseComponentAtLocation");
static_assert(sizeof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation) == 0x000030, "Wrong size on WwiseGameplayStatics_SpawnWwiseComponentAtLocation");
static_assert(offsetof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_SpawnWwiseComponentAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation, Location) == 0x000008, "Member 'WwiseGameplayStatics_SpawnWwiseComponentAtLocation::Location' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation, EmitterRadius) == 0x000014, "Member 'WwiseGameplayStatics_SpawnWwiseComponentAtLocation::EmitterRadius' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation, Orientation) == 0x000018, "Member 'WwiseGameplayStatics_SpawnWwiseComponentAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation, IsTemporaryComponent) == 0x000024, "Member 'WwiseGameplayStatics_SpawnWwiseComponentAtLocation::IsTemporaryComponent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_SpawnWwiseComponentAtLocation, ReturnValue) == 0x000028, "Member 'WwiseGameplayStatics_SpawnWwiseComponentAtLocation::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.StartOutputCapture
// 0x0010 (0x0010 - 0x0000)
struct WwiseGameplayStatics_StartOutputCapture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_StartOutputCapture) == 0x000008, "Wrong alignment on WwiseGameplayStatics_StartOutputCapture");
static_assert(sizeof(WwiseGameplayStatics_StartOutputCapture) == 0x000010, "Wrong size on WwiseGameplayStatics_StartOutputCapture");
static_assert(offsetof(WwiseGameplayStatics_StartOutputCapture, Filename) == 0x000000, "Member 'WwiseGameplayStatics_StartOutputCapture::Filename' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.StartProfilerCapture
// 0x0010 (0x0010 - 0x0000)
struct WwiseGameplayStatics_StartProfilerCapture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_StartProfilerCapture) == 0x000008, "Wrong alignment on WwiseGameplayStatics_StartProfilerCapture");
static_assert(sizeof(WwiseGameplayStatics_StartProfilerCapture) == 0x000010, "Wrong size on WwiseGameplayStatics_StartProfilerCapture");
static_assert(offsetof(WwiseGameplayStatics_StartProfilerCapture, Filename) == 0x000000, "Member 'WwiseGameplayStatics_StartProfilerCapture::Filename' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.StopAudio
// 0x0020 (0x0020 - 0x0000)
struct WwiseGameplayStatics_StopAudio final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_StopAudio) == 0x000008, "Wrong alignment on WwiseGameplayStatics_StopAudio");
static_assert(sizeof(WwiseGameplayStatics_StopAudio) == 0x000020, "Wrong size on WwiseGameplayStatics_StopAudio");
static_assert(offsetof(WwiseGameplayStatics_StopAudio, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_StopAudio::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_StopAudio, TransitionDuration) == 0x000018, "Member 'WwiseGameplayStatics_StopAudio::TransitionDuration' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_StopAudio, FadeCurve) == 0x00001C, "Member 'WwiseGameplayStatics_StopAudio::FadeCurve' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.UnloadBank
// 0x0008 (0x0008 - 0x0000)
struct WwiseGameplayStatics_UnloadBank final
{
public:
	class UWwiseBank*                             Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_UnloadBank) == 0x000008, "Wrong alignment on WwiseGameplayStatics_UnloadBank");
static_assert(sizeof(WwiseGameplayStatics_UnloadBank) == 0x000008, "Wrong size on WwiseGameplayStatics_UnloadBank");
static_assert(offsetof(WwiseGameplayStatics_UnloadBank, Bank) == 0x000000, "Member 'WwiseGameplayStatics_UnloadBank::Bank' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.WaitForAudioInputConnection
// 0x0030 (0x0030 - 0x0000)
struct WwiseGameplayStatics_WaitForAudioInputConnection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseAudioInputEvent*                  AudioInputEvent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxWaitTime;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseGameplayStatics_WaitForAudioInputConnection) == 0x000008, "Wrong alignment on WwiseGameplayStatics_WaitForAudioInputConnection");
static_assert(sizeof(WwiseGameplayStatics_WaitForAudioInputConnection) == 0x000030, "Wrong size on WwiseGameplayStatics_WaitForAudioInputConnection");
static_assert(offsetof(WwiseGameplayStatics_WaitForAudioInputConnection, WorldContextObject) == 0x000000, "Member 'WwiseGameplayStatics_WaitForAudioInputConnection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_WaitForAudioInputConnection, AudioInputEvent) == 0x000008, "Member 'WwiseGameplayStatics_WaitForAudioInputConnection::AudioInputEvent' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_WaitForAudioInputConnection, LatentInfo) == 0x000010, "Member 'WwiseGameplayStatics_WaitForAudioInputConnection::LatentInfo' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_WaitForAudioInputConnection, MaxWaitTime) == 0x000028, "Member 'WwiseGameplayStatics_WaitForAudioInputConnection::MaxWaitTime' has a wrong offset!");

// Function WwiseAudio.WwiseGameplayStatics.WaitForAudioPlayback
// 0x0030 (0x0030 - 0x0000)
struct WwiseGameplayStatics_WaitForAudioPlayback final
{
public:
	struct FWwisePlaybackInstance                 PlaybackInstance;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseGameplayStatics_WaitForAudioPlayback) == 0x000008, "Wrong alignment on WwiseGameplayStatics_WaitForAudioPlayback");
static_assert(sizeof(WwiseGameplayStatics_WaitForAudioPlayback) == 0x000030, "Wrong size on WwiseGameplayStatics_WaitForAudioPlayback");
static_assert(offsetof(WwiseGameplayStatics_WaitForAudioPlayback, PlaybackInstance) == 0x000000, "Member 'WwiseGameplayStatics_WaitForAudioPlayback::PlaybackInstance' has a wrong offset!");
static_assert(offsetof(WwiseGameplayStatics_WaitForAudioPlayback, LatentInfo) == 0x000018, "Member 'WwiseGameplayStatics_WaitForAudioPlayback::LatentInfo' has a wrong offset!");

// Function WwiseAudio.WwiseListenerComponent.FindAssociatedListener
// 0x0010 (0x0010 - 0x0000)
struct WwiseListenerComponent_FindAssociatedListener final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseListenerComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseListenerComponent_FindAssociatedListener) == 0x000008, "Wrong alignment on WwiseListenerComponent_FindAssociatedListener");
static_assert(sizeof(WwiseListenerComponent_FindAssociatedListener) == 0x000010, "Wrong size on WwiseListenerComponent_FindAssociatedListener");
static_assert(offsetof(WwiseListenerComponent_FindAssociatedListener, TargetActor) == 0x000000, "Member 'WwiseListenerComponent_FindAssociatedListener::TargetActor' has a wrong offset!");
static_assert(offsetof(WwiseListenerComponent_FindAssociatedListener, ReturnValue) == 0x000008, "Member 'WwiseListenerComponent_FindAssociatedListener::ReturnValue' has a wrong offset!");

// Function WwiseAudio.WwiseListenerComponent.ConfigureListener
// 0x0008 (0x0008 - 0x0000)
struct WwiseListenerComponent_ConfigureListener final
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseListenerComponent_ConfigureListener) == 0x000008, "Wrong alignment on WwiseListenerComponent_ConfigureListener");
static_assert(sizeof(WwiseListenerComponent_ConfigureListener) == 0x000008, "Wrong size on WwiseListenerComponent_ConfigureListener");
static_assert(offsetof(WwiseListenerComponent_ConfigureListener, WwiseEvent) == 0x000000, "Member 'WwiseListenerComponent_ConfigureListener::WwiseEvent' has a wrong offset!");

// Function WwiseAudio.WwiseListenerComponent.SetBusRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct WwiseListenerComponent_SetBusRTPCValue final
{
public:
	class UWwiseRtpc*                             GameParameter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueChangeDuration;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WwiseListenerComponent_SetBusRTPCValue) == 0x000008, "Wrong alignment on WwiseListenerComponent_SetBusRTPCValue");
static_assert(sizeof(WwiseListenerComponent_SetBusRTPCValue) == 0x000018, "Wrong size on WwiseListenerComponent_SetBusRTPCValue");
static_assert(offsetof(WwiseListenerComponent_SetBusRTPCValue, GameParameter) == 0x000000, "Member 'WwiseListenerComponent_SetBusRTPCValue::GameParameter' has a wrong offset!");
static_assert(offsetof(WwiseListenerComponent_SetBusRTPCValue, Value) == 0x000008, "Member 'WwiseListenerComponent_SetBusRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(WwiseListenerComponent_SetBusRTPCValue, ValueChangeDuration) == 0x00000C, "Member 'WwiseListenerComponent_SetBusRTPCValue::ValueChangeDuration' has a wrong offset!");
static_assert(offsetof(WwiseListenerComponent_SetBusRTPCValue, FadeCurve) == 0x000010, "Member 'WwiseListenerComponent_SetBusRTPCValue::FadeCurve' has a wrong offset!");

}

