#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_Weapon_BaseProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.ExecuteUbergraph_Proj_Weapon_BaseProjectile
// 0x01A0 (0x01A0 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor)
	struct FVector                                K2Node_CustomEvent_HitPoint;                       // 0x0010(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitDetection;                   // 0x001C(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit1;                                 // 0x0068(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x00F8(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile) == 0x0001A0, "Wrong size on Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, EntryPoint) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::EntryPoint' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_CustomEvent_HitPoint) == 0x000010, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_CustomEvent_HitPoint' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_CustomEvent_HitDetection) == 0x00001C, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_CustomEvent_HitDetection' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_MyComp) == 0x000028, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_Other) == 0x000030, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_OtherComp) == 0x000038, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_bSelfMoved) == 0x000040, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_HitLocation) == 0x000044, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_HitNormal) == 0x000050, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_NormalImpulse) == 0x00005C, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_Hit1) == 0x000068, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_Hit1' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_Event_Hit) == 0x0000F8, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, CallFunc_GetInstigator_ReturnValue) == 0x000188, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_DynamicCast_AsOak_Character) == 0x000190, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile, K2Node_DynamicCast_bSuccess) == 0x000198, "Member 'Proj_Weapon_BaseProjectile_C_ExecuteUbergraph_Proj_Weapon_BaseProjectile::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.OnHitWorld
// 0x0090 (0x0090 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_OnHitWorld final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_OnHitWorld) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_OnHitWorld");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_OnHitWorld) == 0x000090, "Wrong size on Proj_Weapon_BaseProjectile_C_OnHitWorld");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_OnHitWorld, Hit) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_OnHitWorld::Hit' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.Destructible_Fractured
// 0x0018 (0x0018 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_Destructible_Fractured final
{
public:
	struct FVector                                HitPoint;                                          // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDetection;                                      // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_Destructible_Fractured) == 0x000004, "Wrong alignment on Proj_Weapon_BaseProjectile_C_Destructible_Fractured");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_Destructible_Fractured) == 0x000018, "Wrong size on Proj_Weapon_BaseProjectile_C_Destructible_Fractured");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_Destructible_Fractured, HitPoint) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_Destructible_Fractured::HitPoint' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_Destructible_Fractured, HitDetection) == 0x00000C, "Member 'Proj_Weapon_BaseProjectile_C_Destructible_Fractured::HitDetection' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.ReceiveHit
// 0x00D0 (0x00D0 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_ReceiveHit) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_ReceiveHit");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_ReceiveHit) == 0x0000D0, "Wrong size on Proj_Weapon_BaseProjectile_C_ReceiveHit");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, MyComp) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, Other) == 0x000008, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, OtherComp) == 0x000010, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, HitLocation) == 0x00001C, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, HitNormal) == 0x000028, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ReceiveHit, Hit) == 0x000040, "Member 'Proj_Weapon_BaseProjectile_C_ReceiveHit::Hit' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.UserConstructionScript
// 0x000C (0x000C - 0x0000)
struct Proj_Weapon_BaseProjectile_C_UserConstructionScript final
{
public:
	struct FGbxAttributeFloat                     CallFunc_MakeGbxAttributeFloat_ReturnValue;        // 0x0000(0x000C)(HasGetValueTypeHash)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_UserConstructionScript) == 0x000004, "Wrong alignment on Proj_Weapon_BaseProjectile_C_UserConstructionScript");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_UserConstructionScript) == 0x00000C, "Wrong size on Proj_Weapon_BaseProjectile_C_UserConstructionScript");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_UserConstructionScript, CallFunc_MakeGbxAttributeFloat_ReturnValue) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_UserConstructionScript::CallFunc_MakeGbxAttributeFloat_ReturnValue' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.WeaponProjectileExplode
// 0x00C0 (0x00C0 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode final
{
public:
	struct FHitResult                             Temp_struct_Variable;                              // 0x0000(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FForceSelection                        CallFunc_Conv_FloatToForceSelection_ReturnValue;   // 0x0090(0x0020)(NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_GbxAttributeFloatToFloat_ReturnValue; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode) == 0x0000C0, "Wrong size on Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode, Temp_struct_Variable) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode, CallFunc_Conv_FloatToForceSelection_ReturnValue) == 0x000090, "Member 'Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode::CallFunc_Conv_FloatToForceSelection_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B0, "Member 'Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode, CallFunc_Conv_GbxAttributeFloatToFloat_ReturnValue) == 0x0000BC, "Member 'Proj_Weapon_BaseProjectile_C_WeaponProjectileExplode::CallFunc_Conv_GbxAttributeFloatToFloat_ReturnValue' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.StickToActor
// 0x02B0 (0x02B0 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_StickToActor final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          AttachedToActor;                                   // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x00A0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x00AC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0120(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x012C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxSkeletalMeshComponent*              K2Node_DynamicCast_AsGbx_Skeletal_Mesh_Component;  // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakVehicle*                            K2Node_DynamicCast_AsOak_Vehicle;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakCharacter*                          K2Node_DynamicCast_AsOak_Character;                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameplayTagContainerComponent*         CallFunc_GetComponentByClass_ReturnValue1;         // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_GetComponentByClass_ReturnValue2;         // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromArray_ReturnValue; // 0x01A8(0x0020)()
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledSphereRadius_ReturnValue;        // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x01E0(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0274(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0280(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsHostile_ReturnValue;                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0298(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_StickToActor) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_StickToActor");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_StickToActor) == 0x0002B0, "Wrong size on Proj_Weapon_BaseProjectile_C_StickToActor");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, HitResult) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::HitResult' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, AttachedToActor) == 0x000090, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::AttachedToActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, BoneName) == 0x000098, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::BoneName' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, HitNormal) == 0x0000A0, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::HitNormal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, HitLocation) == 0x0000AC, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::HitLocation' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B8, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B9, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_Time) == 0x0000BC, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_Distance) == 0x0000C0, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_Location) == 0x0000C4, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D0, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_Normal) == 0x0000DC, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E8, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_HitItem) == 0x000118, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_FaceIndex) == 0x00011C, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_TraceStart) == 0x000120, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_BreakHitResult_TraceEnd) == 0x00012C, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_AsGbx_Skeletal_Mesh_Component) == 0x000138, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_AsGbx_Skeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_AsOak_Vehicle) == 0x000148, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_AsOak_Vehicle' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_bSuccess1) == 0x000150, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_AsOak_Character) == 0x000158, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_AsOak_Character' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_bSuccess2) == 0x000160, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_GetComponentByClass_ReturnValue) == 0x000168, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_GetComponentByClass_ReturnValue1) == 0x000170, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_GetComponentByClass_ReturnValue2) == 0x000178, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_GetComponentByClass_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface) == 0x000180, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_DynamicCast_bSuccess3) == 0x000190, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_IsValid_ReturnValue) == 0x000191, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_MakeArray_Array) == 0x000198, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_MakeGameplayTagContainerFromArray_ReturnValue) == 0x0001A8, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_MakeGameplayTagContainerFromArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0001C8, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_GetScaledSphereRadius_ReturnValue) == 0x0001CC, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_GetScaledSphereRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001D0, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0001E0, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000270, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_Add_VectorVector_ReturnValue) == 0x000274, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_CreateDelegate_OutputDelegate) == 0x000280, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, CallFunc_IsHostile_ReturnValue) == 0x000290, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::CallFunc_IsHostile_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, K2Node_CreateDelegate_OutputDelegate1) == 0x000298, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToActor, Temp_bool_Variable) == 0x0002A8, "Member 'Proj_Weapon_BaseProjectile_C_StickToActor::Temp_bool_Variable' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.StickToWorld
// 0x0110 (0x0110 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_StickToWorld final
{
public:
	struct FHitResult                             HitInfo;                                           // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0104(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_StickToWorld) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_StickToWorld");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_StickToWorld) == 0x000110, "Wrong size on Proj_Weapon_BaseProjectile_C_StickToWorld");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, HitInfo) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::HitInfo' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_bBlockingHit) == 0x000090, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_bInitialOverlap) == 0x000091, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_Time) == 0x000094, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_Distance) == 0x000098, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_Location) == 0x00009C, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A8, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_Normal) == 0x0000B4, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_ImpactNormal) == 0x0000C0, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_PhysMat) == 0x0000D0, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_HitActor) == 0x0000D8, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_HitComponent) == 0x0000E0, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_HitBoneName) == 0x0000E8, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_HitItem) == 0x0000F0, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_FaceIndex) == 0x0000F4, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_TraceStart) == 0x0000F8, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToWorld, CallFunc_BreakHitResult_TraceEnd) == 0x000104, "Member 'Proj_Weapon_BaseProjectile_C_StickToWorld::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.AddElementalTrail
// 0x0040 (0x0040 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_AddElementalTrail final
{
public:
	class UClass*                                 Collection;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewScale;                                          // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        CallFunc_StaticGetParticleEffect_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_AddElementalTrail) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_AddElementalTrail");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_AddElementalTrail) == 0x000040, "Wrong size on Proj_Weapon_BaseProjectile_C_AddElementalTrail");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, Collection) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::Collection' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, AttachToComponent) == 0x000008, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::AttachToComponent' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, AttachPointName) == 0x000010, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::AttachPointName' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, NewScale) == 0x000018, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::NewScale' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, CallFunc_StaticGetParticleEffect_ReturnValue) == 0x000030, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::CallFunc_StaticGetParticleEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_AddElementalTrail, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000038, "Member 'Proj_Weapon_BaseProjectile_C_AddElementalTrail::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.StickToTarget
// 0x01E0 (0x01E0 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_StickToTarget final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Attached;                                          // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StuckToActor;                                      // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0098(0x0090)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 HitActor;                                          // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxDestructibleComponent*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StickToActor_AttachedToActor;             // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetComponentByClass_ReturnValue1;         // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FVector& HitPoint, struct FVector& HitDirection)> K2Node_CreateDelegate_OutputDelegate;              // 0x0150(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x016C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0178(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0184(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_StickToTarget) == 0x000008, "Wrong alignment on Proj_Weapon_BaseProjectile_C_StickToTarget");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_StickToTarget) == 0x0001E0, "Wrong size on Proj_Weapon_BaseProjectile_C_StickToTarget");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, Hit) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::Hit' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, Attached) == 0x000090, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::Attached' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, StuckToActor) == 0x000091, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::StuckToActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, HitInfo) == 0x000098, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::HitInfo' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, HitActor) == 0x000128, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::HitActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_GetComponentByClass_ReturnValue) == 0x000138, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_IsValid_ReturnValue1) == 0x000140, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_StickToActor_AttachedToActor) == 0x000141, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_StickToActor_AttachedToActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_GetComponentByClass_ReturnValue1) == 0x000148, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000150, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_IsValid_ReturnValue2) == 0x000160, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_bBlockingHit) == 0x000161, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_bInitialOverlap) == 0x000162, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_Time) == 0x000164, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_Distance) == 0x000168, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_Location) == 0x00016C, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_ImpactPoint) == 0x000178, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_Normal) == 0x000184, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_ImpactNormal) == 0x000190, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_PhysMat) == 0x0001A0, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_HitActor) == 0x0001A8, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_HitComponent) == 0x0001B0, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_HitBoneName) == 0x0001B8, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_HitItem) == 0x0001C0, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_FaceIndex) == 0x0001C4, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_StickToTarget, CallFunc_BreakHitResult_TraceEnd) == 0x0001D4, "Member 'Proj_Weapon_BaseProjectile_C_StickToTarget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.ProjectileDetonate
// 0x0001 (0x0001 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_ProjectileDetonate final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_ProjectileDetonate) == 0x000001, "Wrong alignment on Proj_Weapon_BaseProjectile_C_ProjectileDetonate");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_ProjectileDetonate) == 0x000001, "Wrong size on Proj_Weapon_BaseProjectile_C_ProjectileDetonate");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ProjectileDetonate, Success) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_ProjectileDetonate::Success' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.ProjectileArm
// 0x0001 (0x0001 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_ProjectileArm final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_ProjectileArm) == 0x000001, "Wrong alignment on Proj_Weapon_BaseProjectile_C_ProjectileArm");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_ProjectileArm) == 0x000001, "Wrong size on Proj_Weapon_BaseProjectile_C_ProjectileArm");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ProjectileArm, Success) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_ProjectileArm::Success' has a wrong offset!");

// Function Proj_Weapon_BaseProjectile.Proj_Weapon_BaseProjectile_C.ProjectileDisarm
// 0x0001 (0x0001 - 0x0000)
struct Proj_Weapon_BaseProjectile_C_ProjectileDisarm final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_Weapon_BaseProjectile_C_ProjectileDisarm) == 0x000001, "Wrong alignment on Proj_Weapon_BaseProjectile_C_ProjectileDisarm");
static_assert(sizeof(Proj_Weapon_BaseProjectile_C_ProjectileDisarm) == 0x000001, "Wrong size on Proj_Weapon_BaseProjectile_C_ProjectileDisarm");
static_assert(offsetof(Proj_Weapon_BaseProjectile_C_ProjectileDisarm, Success) == 0x000000, "Member 'Proj_Weapon_BaseProjectile_C_ProjectileDisarm::Success' has a wrong offset!");

}

