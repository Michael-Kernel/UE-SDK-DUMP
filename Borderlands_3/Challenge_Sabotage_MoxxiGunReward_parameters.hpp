#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_Sabotage_MoxxiGunReward

#include "Basic.hpp"


namespace SDK::Params
{

// Function Challenge_Sabotage_MoxxiGunReward.Challenge_Sabotage_MoxxiGunReward_C.ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward
// 0x0018 (0x0018 - 0x0000)
struct Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AGbxPlayerController*             K2Node_Event_CompletedPlayer;                      // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward) == 0x000008, "Wrong alignment on Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward");
static_assert(sizeof(Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward) == 0x000018, "Wrong size on Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward");
static_assert(offsetof(Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward, EntryPoint) == 0x000000, "Member 'Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward, CallFunc_RandomInteger_ReturnValue) == 0x000004, "Member 'Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward, K2Node_Event_CompletedPlayer) == 0x000010, "Member 'Challenge_Sabotage_MoxxiGunReward_C_ExecuteUbergraph_Challenge_Sabotage_MoxxiGunReward::K2Node_Event_CompletedPlayer' has a wrong offset!");

// Function Challenge_Sabotage_MoxxiGunReward.Challenge_Sabotage_MoxxiGunReward_C.CompletedChallenge
// 0x0008 (0x0008 - 0x0000)
struct Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge final
{
public:
	const class AGbxPlayerController*             CompletedPlayer;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge) == 0x000008, "Wrong alignment on Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge");
static_assert(sizeof(Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge) == 0x000008, "Wrong size on Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge");
static_assert(offsetof(Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge, CompletedPlayer) == 0x000000, "Member 'Challenge_Sabotage_MoxxiGunReward_C_CompletedChallenge::CompletedPlayer' has a wrong offset!");

}

