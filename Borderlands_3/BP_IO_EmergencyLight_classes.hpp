#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IO_EmergencyLight

#include "Basic.hpp"

#include "EnumState_EmergencySiren_OnOff_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EnumState_EmergencyLight_Behavior_structs.hpp"
#include "EnumState_EmergencyLight_Color_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IO_EmergencyLight.BP_IO_EmergencyLight_C
// 0x00E0 (0x0630 - 0x0550)
class ABP_IO_EmergencyLight_C final : public AInteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(Transient, DuplicateTransient)
	class USpotLightComponent*                    Spot_Rotating;                                     // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Spot_Non_Rotating;                                 // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Point_Area;                                        // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Light_Caution;                                  // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Delta_E3DA4E0B425C6FB52B405A96875FD9D9; // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_E3DA4E0B425C6FB52B405A96875FD9D9; // 0x058C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58D[0x3];                                      // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_EmergencyLight_Behavior             State_Behavior;                                    // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_EmergencyLight_Color                State_Color;                                       // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_EmergencyLight_Behavior             PreviewState_Behavior;                             // 0x059A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_EmergencyLight_Color                PreviewState_Color;                                // 0x059B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshLightIntensityMultiplier;                      // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CurrentColor;                                      // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightRotationSpeed;                                // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ColorArray;                                        // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class APostProcessVolume*                     PostProcessVolumeToAffect;                         // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMeshMaterial_LightOn;                       // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMeshMaterial_LightOff;                      // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CurrentDynamicMaterial;                            // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_EmergencySiren_OnOff                State_SirenAudio;                                  // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          Cond_State_Behavior_NewEnumerator3;                // 0x05F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_Behavior_NewEnumerator1;                // 0x05F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_Behavior_NewEnumerator2;                // 0x0600(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_Color_NewEnumerator1;                   // 0x0608(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_Color_NewEnumerator3;                   // 0x0610(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_Color_NewEnumerator4;                   // 0x0618(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_Color_NewEnumerator5;                   // 0x0620(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_State_SirenAudio_NewEnumerator1;              // 0x0628(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void SetLightColor(int32 ColorArrayIndex);
	void UserConstructionScript();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void __UserState_State_Color_3(bool bFromLoad);
	void __UserState_State_Color_4(bool bFromLoad);
	void Preview_Color_01();
	void Preview_Color_02();
	void Preview_Color_03();
	void Preview_Color_04();
	void Preview_Color_05();
	void __UserState_State_Behavior_0(bool bFromLoad);
	void __UserState_State_Behavior_2(bool bFromLoad);
	void __UserState_State_Behavior_3(bool bFromLoad);
	void Preview_BehaviorNone();
	void Preview_BehaviorPulse();
	void Preview_BehaviorPulseAndSpin();
	void __UserState_State_Behavior_1(bool bFromLoad);
	void PreviewBehavior_OnMinusNoMovement();
	void __UserState_State_Color_2(bool bFromLoad);
	void __UserState_State_Color_1(bool bFromLoad);
	void __UserState_State_Color_0(bool bFromLoad);
	void ReceiveBeginPlay();
	void __UserState_State_SirenAudio_0(bool bFromLoad);
	void __UserState_State_SirenAudio_1(bool bFromLoad);
	void SetColorState(int32 Color_Array_Index);
	void SetEmergencyLightColorState(EnumState_EmergencyLight_Color StateColorEnum);
	void ExecuteUbergraph_BP_IO_EmergencyLight(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IO_EmergencyLight_C">();
	}
	static class ABP_IO_EmergencyLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IO_EmergencyLight_C>();
	}
};
static_assert(alignof(ABP_IO_EmergencyLight_C) == 0x000008, "Wrong alignment on ABP_IO_EmergencyLight_C");
static_assert(sizeof(ABP_IO_EmergencyLight_C) == 0x000630, "Wrong size on ABP_IO_EmergencyLight_C");
static_assert(offsetof(ABP_IO_EmergencyLight_C, UberGraphFrame) == 0x000550, "Member 'ABP_IO_EmergencyLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Spot_Rotating) == 0x000558, "Member 'ABP_IO_EmergencyLight_C::Spot_Rotating' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, RotatingMovement) == 0x000560, "Member 'ABP_IO_EmergencyLight_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Spot_Non_Rotating) == 0x000568, "Member 'ABP_IO_EmergencyLight_C::Spot_Non_Rotating' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Point_Area) == 0x000570, "Member 'ABP_IO_EmergencyLight_C::Point_Area' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, SM_Light_Caution) == 0x000578, "Member 'ABP_IO_EmergencyLight_C::SM_Light_Caution' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, DefaultSceneRoot) == 0x000580, "Member 'ABP_IO_EmergencyLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Timeline_0_Delta_E3DA4E0B425C6FB52B405A96875FD9D9) == 0x000588, "Member 'ABP_IO_EmergencyLight_C::Timeline_0_Delta_E3DA4E0B425C6FB52B405A96875FD9D9' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Timeline_0__Direction_E3DA4E0B425C6FB52B405A96875FD9D9) == 0x00058C, "Member 'ABP_IO_EmergencyLight_C::Timeline_0__Direction_E3DA4E0B425C6FB52B405A96875FD9D9' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Timeline_0) == 0x000590, "Member 'ABP_IO_EmergencyLight_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, State_Behavior) == 0x000598, "Member 'ABP_IO_EmergencyLight_C::State_Behavior' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, State_Color) == 0x000599, "Member 'ABP_IO_EmergencyLight_C::State_Color' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, PreviewState_Behavior) == 0x00059A, "Member 'ABP_IO_EmergencyLight_C::PreviewState_Behavior' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, PreviewState_Color) == 0x00059B, "Member 'ABP_IO_EmergencyLight_C::PreviewState_Color' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, MeshLightIntensityMultiplier) == 0x00059C, "Member 'ABP_IO_EmergencyLight_C::MeshLightIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, CurrentColor) == 0x0005A0, "Member 'ABP_IO_EmergencyLight_C::CurrentColor' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, LightRotationSpeed) == 0x0005B0, "Member 'ABP_IO_EmergencyLight_C::LightRotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, ColorArray) == 0x0005B8, "Member 'ABP_IO_EmergencyLight_C::ColorArray' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, PostProcessVolumeToAffect) == 0x0005C8, "Member 'ABP_IO_EmergencyLight_C::PostProcessVolumeToAffect' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, DynamicMeshMaterial_LightOn) == 0x0005D0, "Member 'ABP_IO_EmergencyLight_C::DynamicMeshMaterial_LightOn' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, DynamicMeshMaterial_LightOff) == 0x0005D8, "Member 'ABP_IO_EmergencyLight_C::DynamicMeshMaterial_LightOff' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, CurrentDynamicMaterial) == 0x0005E0, "Member 'ABP_IO_EmergencyLight_C::CurrentDynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, State_SirenAudio) == 0x0005E8, "Member 'ABP_IO_EmergencyLight_C::State_SirenAudio' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Behavior_NewEnumerator3) == 0x0005F0, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Behavior_NewEnumerator3' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Behavior_NewEnumerator1) == 0x0005F8, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Behavior_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Behavior_NewEnumerator2) == 0x000600, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Behavior_NewEnumerator2' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Color_NewEnumerator1) == 0x000608, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Color_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Color_NewEnumerator3) == 0x000610, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Color_NewEnumerator3' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Color_NewEnumerator4) == 0x000618, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Color_NewEnumerator4' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_Color_NewEnumerator5) == 0x000620, "Member 'ABP_IO_EmergencyLight_C::Cond_State_Color_NewEnumerator5' has a wrong offset!");
static_assert(offsetof(ABP_IO_EmergencyLight_C, Cond_State_SirenAudio_NewEnumerator1) == 0x000628, "Member 'ABP_IO_EmergencyLight_C::Cond_State_SirenAudio_NewEnumerator1' has a wrong offset!");

}

