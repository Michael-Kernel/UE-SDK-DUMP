#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Door

#include "Basic.hpp"

#include "Enum_States_DoorLocked_structs.hpp"
#include "Enum_Door_State_structs.hpp"


namespace SDK::Params
{

// Function BPI_Door.BPI_Door_C.SetDoorState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_SetDoorState final
{
public:
	Enum_Door_State                               DoorState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Door_C_SetDoorState) == 0x000001, "Wrong alignment on BPI_Door_C_SetDoorState");
static_assert(sizeof(BPI_Door_C_SetDoorState) == 0x000001, "Wrong size on BPI_Door_C_SetDoorState");
static_assert(offsetof(BPI_Door_C_SetDoorState, DoorState) == 0x000000, "Member 'BPI_Door_C_SetDoorState::DoorState' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.SetDoorLockedState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_SetDoorLockedState final
{
public:
	bool                                          Locked_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Door_C_SetDoorLockedState) == 0x000001, "Wrong alignment on BPI_Door_C_SetDoorLockedState");
static_assert(sizeof(BPI_Door_C_SetDoorLockedState) == 0x000001, "Wrong size on BPI_Door_C_SetDoorLockedState");
static_assert(offsetof(BPI_Door_C_SetDoorLockedState, Locked_) == 0x000000, "Member 'BPI_Door_C_SetDoorLockedState::Locked_' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.SetDoorInteractiveState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_SetDoorInteractiveState final
{
public:
	bool                                          Interactive_;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Door_C_SetDoorInteractiveState) == 0x000001, "Wrong alignment on BPI_Door_C_SetDoorInteractiveState");
static_assert(sizeof(BPI_Door_C_SetDoorInteractiveState) == 0x000001, "Wrong size on BPI_Door_C_SetDoorInteractiveState");
static_assert(offsetof(BPI_Door_C_SetDoorInteractiveState, Interactive_) == 0x000000, "Member 'BPI_Door_C_SetDoorInteractiveState::Interactive_' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.GetDoorState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_GetDoorState final
{
public:
	Enum_Door_State                               DoorState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Door_C_GetDoorState) == 0x000001, "Wrong alignment on BPI_Door_C_GetDoorState");
static_assert(sizeof(BPI_Door_C_GetDoorState) == 0x000001, "Wrong size on BPI_Door_C_GetDoorState");
static_assert(offsetof(BPI_Door_C_GetDoorState, DoorState) == 0x000000, "Member 'BPI_Door_C_GetDoorState::DoorState' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.GetDoorLockedState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_GetDoorLockedState final
{
public:
	bool                                          Locked;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Door_C_GetDoorLockedState) == 0x000001, "Wrong alignment on BPI_Door_C_GetDoorLockedState");
static_assert(sizeof(BPI_Door_C_GetDoorLockedState) == 0x000001, "Wrong size on BPI_Door_C_GetDoorLockedState");
static_assert(offsetof(BPI_Door_C_GetDoorLockedState, Locked) == 0x000000, "Member 'BPI_Door_C_GetDoorLockedState::Locked' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.GetDoorInteractiveState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_GetDoorInteractiveState final
{
public:
	bool                                          Interactive;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Door_C_GetDoorInteractiveState) == 0x000001, "Wrong alignment on BPI_Door_C_GetDoorInteractiveState");
static_assert(sizeof(BPI_Door_C_GetDoorInteractiveState) == 0x000001, "Wrong size on BPI_Door_C_GetDoorInteractiveState");
static_assert(offsetof(BPI_Door_C_GetDoorInteractiveState, Interactive) == 0x000000, "Member 'BPI_Door_C_GetDoorInteractiveState::Interactive' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.SetDoorFeedbackState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_SetDoorFeedbackState final
{
public:
	Enum_States_DoorLocked                        FeedbackState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Door_C_SetDoorFeedbackState) == 0x000001, "Wrong alignment on BPI_Door_C_SetDoorFeedbackState");
static_assert(sizeof(BPI_Door_C_SetDoorFeedbackState) == 0x000001, "Wrong size on BPI_Door_C_SetDoorFeedbackState");
static_assert(offsetof(BPI_Door_C_SetDoorFeedbackState, FeedbackState) == 0x000000, "Member 'BPI_Door_C_SetDoorFeedbackState::FeedbackState' has a wrong offset!");

// Function BPI_Door.BPI_Door_C.GetDoorFeedbackState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Door_C_GetDoorFeedbackState final
{
public:
	Enum_States_DoorLocked                        FeedbackState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Door_C_GetDoorFeedbackState) == 0x000001, "Wrong alignment on BPI_Door_C_GetDoorFeedbackState");
static_assert(sizeof(BPI_Door_C_GetDoorFeedbackState) == 0x000001, "Wrong size on BPI_Door_C_GetDoorFeedbackState");
static_assert(offsetof(BPI_Door_C_GetDoorFeedbackState, FeedbackState) == 0x000000, "Member 'BPI_Door_C_GetDoorFeedbackState::FeedbackState' has a wrong offset!");

}

