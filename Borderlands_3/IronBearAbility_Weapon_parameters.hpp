#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IronBearAbility_Weapon

#include "Basic.hpp"


namespace SDK::Params
{

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.ExecuteUbergraph_IronBearAbility_Weapon
// 0x0158 (0x0158 - 0x0000)
struct IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UGbxInputActionData_Discrete> Temp_softobject_Variable;                          // 0x0008(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action3;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action2;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0040(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1; // 0x0068(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action1;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> Temp_softobject_Variable1;                         // 0x0098(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue2; // 0x00C0(0x0028)(HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action4;       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter_IronBear*                 K2Node_DynamicCast_AsOak_Character_Iron_Bear;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UGbxInputActionData_Discrete> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue3; // 0x0108(0x0028)(HasGetValueTypeHash)
	class UOakActionAbilityAugmentSlotData*       CallFunc_GetLeftFireHardPointSlot_Res;             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPInterface_IronBear_C> K2Node_DynamicCast_AsBPInterface_Iron_Bear;        // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakActionAbilityAugmentSlotData*       CallFunc_GetRightFireHardPointSlot_Res;            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon");
static_assert(sizeof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon) == 0x000158, "Wrong size on IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, EntryPoint) == 0x000000, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::EntryPoint' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, Temp_softobject_Variable) == 0x000008, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action3) == 0x000030, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action3' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action2) == 0x000038, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action2' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000040, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1) == 0x000068, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action1) == 0x000090, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action1' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, Temp_softobject_Variable1) == 0x000098, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::Temp_softobject_Variable1' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue2) == 0x0000C0, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue2' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action) == 0x0000E8, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_GbxInputActionEvent_Discrete_Action4) == 0x0000F0, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_GbxInputActionEvent_Discrete_Action4' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_DynamicCast_AsOak_Character_Iron_Bear) == 0x0000F8, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_DynamicCast_AsOak_Character_Iron_Bear' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue3) == 0x000108, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue3' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, CallFunc_GetLeftFireHardPointSlot_Res) == 0x000130, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::CallFunc_GetLeftFireHardPointSlot_Res' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_DynamicCast_AsBPInterface_Iron_Bear) == 0x000138, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_DynamicCast_AsBPInterface_Iron_Bear' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, K2Node_DynamicCast_bSuccess1) == 0x000148, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon, CallFunc_GetRightFireHardPointSlot_Res) == 0x000150, "Member 'IronBearAbility_Weapon_C_ExecuteUbergraph_IronBearAbility_Weapon::CallFunc_GetRightFireHardPointSlot_Res' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5
// 0x0008 (0x0008 - 0x0000)
struct IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5");
static_assert(sizeof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5) == 0x000008, "Wrong size on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5");
static_assert(offsetof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5, Action) == 0x000000, "Member 'IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_Melee_K2Node_GbxInputActionEvent_Discrete_5::Action' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6
// 0x0008 (0x0008 - 0x0000)
struct IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6");
static_assert(sizeof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6) == 0x000008, "Wrong size on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6");
static_assert(offsetof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6, Action) == 0x000000, "Member 'IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_6::Action' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7
// 0x0008 (0x0008 - 0x0000)
struct IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7");
static_assert(sizeof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7) == 0x000008, "Wrong size on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7");
static_assert(offsetof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7, Action) == 0x000000, "Member 'IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_RightHardPoint_K2Node_GbxInputActionEvent_Discrete_7::Action' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8
// 0x0008 (0x0008 - 0x0000)
struct IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8");
static_assert(sizeof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8) == 0x000008, "Wrong size on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8");
static_assert(offsetof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8, Action) == 0x000000, "Member 'IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_8::Action' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9
// 0x0008 (0x0008 - 0x0000)
struct IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9");
static_assert(sizeof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9) == 0x000008, "Wrong size on IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9");
static_assert(offsetof(IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9, Action) == 0x000000, "Member 'IronBearAbility_Weapon_C_GbxInpActEvt_InputAction_Discrete_IronBear_LeftHardPoint_K2Node_GbxInputActionEvent_Discrete_9::Action' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.QuickSelectWeapon
// 0x0028 (0x0028 - 0x0000)
struct IronBearAbility_Weapon_C_QuickSelectWeapon final
{
public:
	class UInventorySlotData*                     InvSlot;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponSlotData*                        WeaponSlot;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetEquippedInventoryForSlot_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                K2Node_DynamicCast_AsWeapon;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IronBearAbility_Weapon_C_QuickSelectWeapon) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_QuickSelectWeapon");
static_assert(sizeof(IronBearAbility_Weapon_C_QuickSelectWeapon) == 0x000028, "Wrong size on IronBearAbility_Weapon_C_QuickSelectWeapon");
static_assert(offsetof(IronBearAbility_Weapon_C_QuickSelectWeapon, InvSlot) == 0x000000, "Member 'IronBearAbility_Weapon_C_QuickSelectWeapon::InvSlot' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_QuickSelectWeapon, WeaponSlot) == 0x000008, "Member 'IronBearAbility_Weapon_C_QuickSelectWeapon::WeaponSlot' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_QuickSelectWeapon, CallFunc_GetEquippedInventoryForSlot_ReturnValue) == 0x000010, "Member 'IronBearAbility_Weapon_C_QuickSelectWeapon::CallFunc_GetEquippedInventoryForSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_QuickSelectWeapon, K2Node_DynamicCast_AsWeapon) == 0x000018, "Member 'IronBearAbility_Weapon_C_QuickSelectWeapon::K2Node_DynamicCast_AsWeapon' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_QuickSelectWeapon, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'IronBearAbility_Weapon_C_QuickSelectWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_QuickSelectWeapon, CallFunc_IsActive_ReturnValue) == 0x000021, "Member 'IronBearAbility_Weapon_C_QuickSelectWeapon::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GetLeftFireHardPointSlot
// 0x0028 (0x0028 - 0x0000)
struct IronBearAbility_Weapon_C_GetLeftFireHardPointSlot final
{
public:
	class UOakActionAbilityAugmentSlotData*       Res;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakActionAbilityAugmentSlotData*       Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbilityAugmentSlotData*       Temp_object_Variable1;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbilityAugmentSlotData*       K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GetLeftFireHardPointSlot");
static_assert(sizeof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot) == 0x000028, "Wrong size on IronBearAbility_Weapon_C_GetLeftFireHardPointSlot");
static_assert(offsetof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot, Res) == 0x000000, "Member 'IronBearAbility_Weapon_C_GetLeftFireHardPointSlot::Res' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot, Temp_bool_Variable) == 0x000008, "Member 'IronBearAbility_Weapon_C_GetLeftFireHardPointSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot, Temp_object_Variable) == 0x000010, "Member 'IronBearAbility_Weapon_C_GetLeftFireHardPointSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot, Temp_object_Variable1) == 0x000018, "Member 'IronBearAbility_Weapon_C_GetLeftFireHardPointSlot::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetLeftFireHardPointSlot, K2Node_Select_Default) == 0x000020, "Member 'IronBearAbility_Weapon_C_GetLeftFireHardPointSlot::K2Node_Select_Default' has a wrong offset!");

// Function IronBearAbility_Weapon.IronBearAbility_Weapon_C.GetRightFireHardPointSlot
// 0x0028 (0x0028 - 0x0000)
struct IronBearAbility_Weapon_C_GetRightFireHardPointSlot final
{
public:
	class UOakActionAbilityAugmentSlotData*       Res;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakActionAbilityAugmentSlotData*       Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbilityAugmentSlotData*       Temp_object_Variable1;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakActionAbilityAugmentSlotData*       K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot) == 0x000008, "Wrong alignment on IronBearAbility_Weapon_C_GetRightFireHardPointSlot");
static_assert(sizeof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot) == 0x000028, "Wrong size on IronBearAbility_Weapon_C_GetRightFireHardPointSlot");
static_assert(offsetof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot, Res) == 0x000000, "Member 'IronBearAbility_Weapon_C_GetRightFireHardPointSlot::Res' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot, Temp_bool_Variable) == 0x000008, "Member 'IronBearAbility_Weapon_C_GetRightFireHardPointSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot, Temp_object_Variable) == 0x000010, "Member 'IronBearAbility_Weapon_C_GetRightFireHardPointSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot, Temp_object_Variable1) == 0x000018, "Member 'IronBearAbility_Weapon_C_GetRightFireHardPointSlot::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(IronBearAbility_Weapon_C_GetRightFireHardPointSlot, K2Node_Select_Default) == 0x000020, "Member 'IronBearAbility_Weapon_C_GetRightFireHardPointSlot::K2Node_Select_Default' has a wrong offset!");

}

