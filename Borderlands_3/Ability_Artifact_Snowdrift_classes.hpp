#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_Artifact_Snowdrift

#include "Basic.hpp"

#include "BP_InventoryAbility_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "GbxAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ability_Artifact_Snowdrift.Ability_Artifact_Snowdrift_C
// 0x00F0 (0x0210 - 0x0120)
class UAbility_Artifact_Snowdrift_C final : public UBP_InventoryAbility_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Ability_Artifact_Snowdrift_C;       // 0x0120(0x0008)(Transient, DuplicateTransient)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_Artifact_GlacialWave; // 0x0128(0x0028)()
	struct FEnvQueryParams                        EnvQuery;                                          // 0x0150(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          AugmentAvailable;                                  // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Ability_Artifact_Snowdrift(int32 EntryPoint);
	void GbxAsyncRequest_Spawned_BCEC033A4A0EE0839916EBA8DE9C87B1(class AActor* Actor, int32 InstanceIndex);
	void OnAbilityTimerEnded(const struct FOakAbilityTimerSpec& Spec, const struct FOakAbilityTimerResult& Result);
	void OnAbilityTimerStarted(const struct FOakAbilityTimerSpec& Spec);
	void OnActivated();
	void StopSliding(const struct FSlideEndedDetails& Details);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ability_Artifact_Snowdrift_C">();
	}
	static class UAbility_Artifact_Snowdrift_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_Artifact_Snowdrift_C>();
	}
};
static_assert(alignof(UAbility_Artifact_Snowdrift_C) == 0x000008, "Wrong alignment on UAbility_Artifact_Snowdrift_C");
static_assert(sizeof(UAbility_Artifact_Snowdrift_C) == 0x000210, "Wrong size on UAbility_Artifact_Snowdrift_C");
static_assert(offsetof(UAbility_Artifact_Snowdrift_C, UberGraphFrame_Ability_Artifact_Snowdrift_C) == 0x000120, "Member 'UAbility_Artifact_Snowdrift_C::UberGraphFrame_Ability_Artifact_Snowdrift_C' has a wrong offset!");
static_assert(offsetof(UAbility_Artifact_Snowdrift_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_Artifact_GlacialWave) == 0x000128, "Member 'UAbility_Artifact_Snowdrift_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_Artifact_GlacialWave' has a wrong offset!");
static_assert(offsetof(UAbility_Artifact_Snowdrift_C, EnvQuery) == 0x000150, "Member 'UAbility_Artifact_Snowdrift_C::EnvQuery' has a wrong offset!");
static_assert(offsetof(UAbility_Artifact_Snowdrift_C, AugmentAvailable) == 0x000208, "Member 'UAbility_Artifact_Snowdrift_C::AugmentAvailable' has a wrong offset!");

}

