#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxRuntime

#include "Basic.hpp"

#include "GbxRuntime_structs.hpp"


namespace SDK::Params
{

// Function GbxRuntime.GbxCondition.K2_EvaluateCondition
// 0x0018 (0x0018 - 0x0000)
struct GbxCondition_K2_EvaluateCondition final
{
public:
	const class UGbxCondition*                    Condition;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxCondition_K2_EvaluateCondition) == 0x000008, "Wrong alignment on GbxCondition_K2_EvaluateCondition");
static_assert(sizeof(GbxCondition_K2_EvaluateCondition) == 0x000018, "Wrong size on GbxCondition_K2_EvaluateCondition");
static_assert(offsetof(GbxCondition_K2_EvaluateCondition, Condition) == 0x000000, "Member 'GbxCondition_K2_EvaluateCondition::Condition' has a wrong offset!");
static_assert(offsetof(GbxCondition_K2_EvaluateCondition, Context) == 0x000008, "Member 'GbxCondition_K2_EvaluateCondition::Context' has a wrong offset!");
static_assert(offsetof(GbxCondition_K2_EvaluateCondition, ReturnValue) == 0x000010, "Member 'GbxCondition_K2_EvaluateCondition::ReturnValue' has a wrong offset!");

// Function GbxRuntime.GbxCondition.K2_EvaluateConditionType
// 0x0018 (0x0018 - 0x0000)
struct GbxCondition_K2_EvaluateConditionType final
{
public:
	TSubclassOf<class UGbxCondition>              Condition;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxCondition_K2_EvaluateConditionType) == 0x000008, "Wrong alignment on GbxCondition_K2_EvaluateConditionType");
static_assert(sizeof(GbxCondition_K2_EvaluateConditionType) == 0x000018, "Wrong size on GbxCondition_K2_EvaluateConditionType");
static_assert(offsetof(GbxCondition_K2_EvaluateConditionType, Condition) == 0x000000, "Member 'GbxCondition_K2_EvaluateConditionType::Condition' has a wrong offset!");
static_assert(offsetof(GbxCondition_K2_EvaluateConditionType, Context) == 0x000008, "Member 'GbxCondition_K2_EvaluateConditionType::Context' has a wrong offset!");
static_assert(offsetof(GbxCondition_K2_EvaluateConditionType, ReturnValue) == 0x000010, "Member 'GbxCondition_K2_EvaluateConditionType::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.CreateNumericRange
// 0x0010 (0x0010 - 0x0000)
struct NumericRangeExt_CreateNumericRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Variance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNumericRange                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_CreateNumericRange) == 0x000004, "Wrong alignment on NumericRangeExt_CreateNumericRange");
static_assert(sizeof(NumericRangeExt_CreateNumericRange) == 0x000010, "Wrong size on NumericRangeExt_CreateNumericRange");
static_assert(offsetof(NumericRangeExt_CreateNumericRange, Value) == 0x000000, "Member 'NumericRangeExt_CreateNumericRange::Value' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_CreateNumericRange, Variance) == 0x000004, "Member 'NumericRangeExt_CreateNumericRange::Variance' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_CreateNumericRange, ReturnValue) == 0x000008, "Member 'NumericRangeExt_CreateNumericRange::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.CreateNumericRangeMinMax
// 0x0010 (0x0010 - 0x0000)
struct NumericRangeExt_CreateNumericRangeMinMax final
{
public:
	float                                         Minimum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNumericRange                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_CreateNumericRangeMinMax) == 0x000004, "Wrong alignment on NumericRangeExt_CreateNumericRangeMinMax");
static_assert(sizeof(NumericRangeExt_CreateNumericRangeMinMax) == 0x000010, "Wrong size on NumericRangeExt_CreateNumericRangeMinMax");
static_assert(offsetof(NumericRangeExt_CreateNumericRangeMinMax, Minimum) == 0x000000, "Member 'NumericRangeExt_CreateNumericRangeMinMax::Minimum' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_CreateNumericRangeMinMax, Maximum) == 0x000004, "Member 'NumericRangeExt_CreateNumericRangeMinMax::Maximum' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_CreateNumericRangeMinMax, ReturnValue) == 0x000008, "Member 'NumericRangeExt_CreateNumericRangeMinMax::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.GenerateRandomNumber
// 0x000C (0x000C - 0x0000)
struct NumericRangeExt_GenerateRandomNumber final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_GenerateRandomNumber) == 0x000004, "Wrong alignment on NumericRangeExt_GenerateRandomNumber");
static_assert(sizeof(NumericRangeExt_GenerateRandomNumber) == 0x00000C, "Wrong size on NumericRangeExt_GenerateRandomNumber");
static_assert(offsetof(NumericRangeExt_GenerateRandomNumber, Range) == 0x000000, "Member 'NumericRangeExt_GenerateRandomNumber::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_GenerateRandomNumber, ReturnValue) == 0x000008, "Member 'NumericRangeExt_GenerateRandomNumber::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.GetMaximum
// 0x000C (0x000C - 0x0000)
struct NumericRangeExt_GetMaximum final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_GetMaximum) == 0x000004, "Wrong alignment on NumericRangeExt_GetMaximum");
static_assert(sizeof(NumericRangeExt_GetMaximum) == 0x00000C, "Wrong size on NumericRangeExt_GetMaximum");
static_assert(offsetof(NumericRangeExt_GetMaximum, Range) == 0x000000, "Member 'NumericRangeExt_GetMaximum::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_GetMaximum, ReturnValue) == 0x000008, "Member 'NumericRangeExt_GetMaximum::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.GetMinimum
// 0x000C (0x000C - 0x0000)
struct NumericRangeExt_GetMinimum final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_GetMinimum) == 0x000004, "Wrong alignment on NumericRangeExt_GetMinimum");
static_assert(sizeof(NumericRangeExt_GetMinimum) == 0x00000C, "Wrong size on NumericRangeExt_GetMinimum");
static_assert(offsetof(NumericRangeExt_GetMinimum, Range) == 0x000000, "Member 'NumericRangeExt_GetMinimum::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_GetMinimum, ReturnValue) == 0x000008, "Member 'NumericRangeExt_GetMinimum::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.IsWithin
// 0x0010 (0x0010 - 0x0000)
struct NumericRangeExt_IsWithin final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NumericRangeExt_IsWithin) == 0x000004, "Wrong alignment on NumericRangeExt_IsWithin");
static_assert(sizeof(NumericRangeExt_IsWithin) == 0x000010, "Wrong size on NumericRangeExt_IsWithin");
static_assert(offsetof(NumericRangeExt_IsWithin, Range) == 0x000000, "Member 'NumericRangeExt_IsWithin::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_IsWithin, Value) == 0x000008, "Member 'NumericRangeExt_IsWithin::Value' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_IsWithin, ReturnValue) == 0x00000C, "Member 'NumericRangeExt_IsWithin::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.SetMaximum
// 0x000C (0x000C - 0x0000)
struct NumericRangeExt_SetMaximum final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_SetMaximum) == 0x000004, "Wrong alignment on NumericRangeExt_SetMaximum");
static_assert(sizeof(NumericRangeExt_SetMaximum) == 0x00000C, "Wrong size on NumericRangeExt_SetMaximum");
static_assert(offsetof(NumericRangeExt_SetMaximum, Range) == 0x000000, "Member 'NumericRangeExt_SetMaximum::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_SetMaximum, Maximum) == 0x000008, "Member 'NumericRangeExt_SetMaximum::Maximum' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.SetMinimum
// 0x000C (0x000C - 0x0000)
struct NumericRangeExt_SetMinimum final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_SetMinimum) == 0x000004, "Wrong alignment on NumericRangeExt_SetMinimum");
static_assert(sizeof(NumericRangeExt_SetMinimum) == 0x00000C, "Wrong size on NumericRangeExt_SetMinimum");
static_assert(offsetof(NumericRangeExt_SetMinimum, Range) == 0x000000, "Member 'NumericRangeExt_SetMinimum::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_SetMinimum, Minimum) == 0x000008, "Member 'NumericRangeExt_SetMinimum::Minimum' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.ToMinMaxString
// 0x0018 (0x0018 - 0x0000)
struct NumericRangeExt_ToMinMaxString final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_ToMinMaxString) == 0x000008, "Wrong alignment on NumericRangeExt_ToMinMaxString");
static_assert(sizeof(NumericRangeExt_ToMinMaxString) == 0x000018, "Wrong size on NumericRangeExt_ToMinMaxString");
static_assert(offsetof(NumericRangeExt_ToMinMaxString, Range) == 0x000000, "Member 'NumericRangeExt_ToMinMaxString::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_ToMinMaxString, ReturnValue) == 0x000008, "Member 'NumericRangeExt_ToMinMaxString::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.ToString
// 0x0018 (0x0018 - 0x0000)
struct NumericRangeExt_ToString final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_ToString) == 0x000008, "Wrong alignment on NumericRangeExt_ToString");
static_assert(sizeof(NumericRangeExt_ToString) == 0x000018, "Wrong size on NumericRangeExt_ToString");
static_assert(offsetof(NumericRangeExt_ToString, Range) == 0x000000, "Member 'NumericRangeExt_ToString::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_ToString, ReturnValue) == 0x000008, "Member 'NumericRangeExt_ToString::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.ToValueString
// 0x0018 (0x0018 - 0x0000)
struct NumericRangeExt_ToValueString final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_ToValueString) == 0x000008, "Wrong alignment on NumericRangeExt_ToValueString");
static_assert(sizeof(NumericRangeExt_ToValueString) == 0x000018, "Wrong size on NumericRangeExt_ToValueString");
static_assert(offsetof(NumericRangeExt_ToValueString, Range) == 0x000000, "Member 'NumericRangeExt_ToValueString::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_ToValueString, ReturnValue) == 0x000008, "Member 'NumericRangeExt_ToValueString::ReturnValue' has a wrong offset!");

// Function GbxRuntime.NumericRangeExt.ToValueVarianceString
// 0x0018 (0x0018 - 0x0000)
struct NumericRangeExt_ToValueVarianceString final
{
public:
	struct FNumericRange                          Range;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericRangeExt_ToValueVarianceString) == 0x000008, "Wrong alignment on NumericRangeExt_ToValueVarianceString");
static_assert(sizeof(NumericRangeExt_ToValueVarianceString) == 0x000018, "Wrong size on NumericRangeExt_ToValueVarianceString");
static_assert(offsetof(NumericRangeExt_ToValueVarianceString, Range) == 0x000000, "Member 'NumericRangeExt_ToValueVarianceString::Range' has a wrong offset!");
static_assert(offsetof(NumericRangeExt_ToValueVarianceString, ReturnValue) == 0x000008, "Member 'NumericRangeExt_ToValueVarianceString::ReturnValue' has a wrong offset!");

}

