#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Passive_Gunner_MatchedSet

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxAbilities_structs.hpp"
#include "Enum_Gunner_MatchedSet_InentorySlots_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Passive_Gunner_MatchedSet.Passive_Gunner_MatchedSet_C
// 0x00B8 (0x0268 - 0x01B0)
class UPassive_Gunner_MatchedSet_C final : public UOakPassiveAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(Transient, DuplicateTransient)
	float                                         EquippedGearMultiplier;                            // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Gunner_MatchedSet; // 0x01C0(0x0028)()
	TArray<class UInventorySlotData*>             InventorySlotsToIterate;                           // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UManufacturerData*                      RightHandGunManufacturer;                          // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UInventorySlotData*, Enum_Gunner_MatchedSet_InentorySlots> InventorySlotsToEnum;                              // 0x0200(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         GrenadeModifier;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldModifier;                                    // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon1Modifier;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon2Modifier;                                   // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon3Modifier;                                   // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon4Modifier;                                   // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Passive_Gunner_MatchedSet(int32 EntryPoint);
	void OnForcedRefresh();
	void MatchedSet_OnWeaponChanged(class AWeapon* NewWeapon, class AWeapon* LastWeapon);
	void OnPaused();
	void OnResumed();
	void OnActivated();
	void HandleNewEquippedItem(class AActor* NewModifiedActor, class UInventorySlotData* NewSlotData, bool Add_);
	void DetermineTotalGearBonus();
	void MatchedSet_UnequippedItem(class AActor* UnequippedActor, class UInventorySlotData* SlotData);
	void MatchedSet_EquippedItem(class AActor* EquippedActor, class UInventorySlotData* SlotData);
	void TryToModifyIndividualGearBonus(class UInventorySlotData* NewSlot, bool Add_);
	void GetItemManufacturer(class AActor* GearToTest, class UManufacturerData** Manufacturer);
	void SetRightHandManufacturer();
	void CleanupGearBonus();
	void GetIsNewRightHandWeapon_(class AActor* ModifiedEquipment, bool* ItIs_);
	void CalculateTotalGearModifierBonus();
	void SetGearModifierPerInventorySlot(const class UInventorySlotData*& SlotToUse, bool NewModifyValue);
	EGbxAbilityState CalculateAbilityState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Passive_Gunner_MatchedSet_C">();
	}
	static class UPassive_Gunner_MatchedSet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPassive_Gunner_MatchedSet_C>();
	}
};
static_assert(alignof(UPassive_Gunner_MatchedSet_C) == 0x000008, "Wrong alignment on UPassive_Gunner_MatchedSet_C");
static_assert(sizeof(UPassive_Gunner_MatchedSet_C) == 0x000268, "Wrong size on UPassive_Gunner_MatchedSet_C");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, UberGraphFrame) == 0x0001B0, "Member 'UPassive_Gunner_MatchedSet_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, EquippedGearMultiplier) == 0x0001B8, "Member 'UPassive_Gunner_MatchedSet_C::EquippedGearMultiplier' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Gunner_MatchedSet) == 0x0001C0, "Member 'UPassive_Gunner_MatchedSet_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Passive_Gunner_MatchedSet' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, InventorySlotsToIterate) == 0x0001E8, "Member 'UPassive_Gunner_MatchedSet_C::InventorySlotsToIterate' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, RightHandGunManufacturer) == 0x0001F8, "Member 'UPassive_Gunner_MatchedSet_C::RightHandGunManufacturer' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, InventorySlotsToEnum) == 0x000200, "Member 'UPassive_Gunner_MatchedSet_C::InventorySlotsToEnum' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, GrenadeModifier) == 0x000250, "Member 'UPassive_Gunner_MatchedSet_C::GrenadeModifier' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, ShieldModifier) == 0x000254, "Member 'UPassive_Gunner_MatchedSet_C::ShieldModifier' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, Weapon1Modifier) == 0x000258, "Member 'UPassive_Gunner_MatchedSet_C::Weapon1Modifier' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, Weapon2Modifier) == 0x00025C, "Member 'UPassive_Gunner_MatchedSet_C::Weapon2Modifier' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, Weapon3Modifier) == 0x000260, "Member 'UPassive_Gunner_MatchedSet_C::Weapon3Modifier' has a wrong offset!");
static_assert(offsetof(UPassive_Gunner_MatchedSet_C, Weapon4Modifier) == 0x000264, "Member 'UPassive_Gunner_MatchedSet_C::Weapon4Modifier' has a wrong offset!");

}

