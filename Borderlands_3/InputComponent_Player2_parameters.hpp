#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InputComponent_Player2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function InputComponent_Player2.InputComponent_Player2_C.ExecuteUbergraph_InputComponent_Player2
// 0x0098 (0x0098 - 0x0000)
struct InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action2;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action1;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxInputActionData_Discrete*           K2Node_GbxInputActionEvent_Discrete_Action;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsePromptEnabled_Res;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInFFYL_InFFYL;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Val1;                           // 0x0024(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bGamepad1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPawnAttached_bRes;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerformingGroundSlam_ReturnValue;       // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAttemptSecondaryActionSkill_bRes;   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_GbxInputEvent_OakMoveAxis_Val;              // 0x0038(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_GbxInputEvent_OakMoveAxis_bGamepad;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_GbxInputEvent_OakLookAxis_Val;              // 0x0048(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_GbxInputEvent_OakLookAxis_bGamepad;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UsesActionSkillOverride_bRes;             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInFFYL_InFFYL1;                         // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInFFYL_InFFYL2;                         // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsePromptEnabled_Res1;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Val;                            // 0x006C(0x000C)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bGamepad;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsePromptEnabled_Res2;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPawnAttached_bRes1;                     // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerformingGroundSlam_ReturnValue1;      // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsePromptEnabled_Res3;                  // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakCharacter_Player*                   K2Node_DynamicCast_AsOak_Character_Player;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2) == 0x000008, "Wrong alignment on InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2");
static_assert(sizeof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2) == 0x000098, "Wrong size on InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, EntryPoint) == 0x000000, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::EntryPoint' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputActionEvent_Discrete_Action2) == 0x000008, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputActionEvent_Discrete_Action2' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputActionEvent_Discrete_Action1) == 0x000010, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputActionEvent_Discrete_Action1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputActionEvent_Discrete_Action) == 0x000018, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputActionEvent_Discrete_Action' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsUsePromptEnabled_Res) == 0x000020, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsUsePromptEnabled_Res' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsInFFYL_InFFYL) == 0x000021, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsInFFYL_InFFYL' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_CustomEvent_Val1) == 0x000024, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_CustomEvent_Val1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_CustomEvent_bGamepad1) == 0x000030, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_CustomEvent_bGamepad1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsPawnAttached_bRes) == 0x000031, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsPawnAttached_bRes' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsPerformingGroundSlam_ReturnValue) == 0x000032, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsPerformingGroundSlam_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_Not_PreBool_ReturnValue) == 0x000033, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_ShouldAttemptSecondaryActionSkill_bRes) == 0x000034, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_ShouldAttemptSecondaryActionSkill_bRes' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputEvent_OakMoveAxis_Val) == 0x000038, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputEvent_OakMoveAxis_Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputEvent_OakMoveAxis_bGamepad) == 0x000044, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputEvent_OakMoveAxis_bGamepad' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputEvent_OakLookAxis_Val) == 0x000048, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputEvent_OakLookAxis_Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_GbxInputEvent_OakLookAxis_bGamepad) == 0x000054, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_GbxInputEvent_OakLookAxis_bGamepad' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_UsesActionSkillOverride_bRes) == 0x000055, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_UsesActionSkillOverride_bRes' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsInFFYL_InFFYL1) == 0x000056, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsInFFYL_InFFYL1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsInFFYL_InFFYL2) == 0x000057, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsInFFYL_InFFYL2' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_Not_PreBool_ReturnValue1) == 0x000058, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsUsePromptEnabled_Res1) == 0x000059, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsUsePromptEnabled_Res1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000060, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_CustomEvent_Val) == 0x00006C, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_CustomEvent_Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_CustomEvent_bGamepad) == 0x000078, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_CustomEvent_bGamepad' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsUsePromptEnabled_Res2) == 0x000079, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsUsePromptEnabled_Res2' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsPawnAttached_bRes1) == 0x00007A, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsPawnAttached_bRes1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsPerformingGroundSlam_ReturnValue1) == 0x00007B, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsPerformingGroundSlam_ReturnValue1' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_Not_PreBool_ReturnValue2) == 0x00007C, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_IsUsePromptEnabled_Res3) == 0x00007D, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_IsUsePromptEnabled_Res3' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_DynamicCast_AsOak_Character_Player) == 0x000088, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_DynamicCast_AsOak_Character_Player' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2, K2Node_DynamicCast_bSuccess1) == 0x000090, "Member 'InputComponent_Player2_C_ExecuteUbergraph_InputComponent_Player2::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.GbxInputEvent_5
// 0x0010 (0x0010 - 0x0000)
struct InputComponent_Player2_C_GbxInputEvent_5 final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_GbxInputEvent_5) == 0x000004, "Wrong alignment on InputComponent_Player2_C_GbxInputEvent_5");
static_assert(sizeof(InputComponent_Player2_C_GbxInputEvent_5) == 0x000010, "Wrong size on InputComponent_Player2_C_GbxInputEvent_5");
static_assert(offsetof(InputComponent_Player2_C_GbxInputEvent_5, Val) == 0x000000, "Member 'InputComponent_Player2_C_GbxInputEvent_5::Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_GbxInputEvent_5, bGamePad) == 0x00000C, "Member 'InputComponent_Player2_C_GbxInputEvent_5::bGamePad' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.GbxInputEvent_3
// 0x0010 (0x0010 - 0x0000)
struct InputComponent_Player2_C_GbxInputEvent_3 final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_GbxInputEvent_3) == 0x000004, "Wrong alignment on InputComponent_Player2_C_GbxInputEvent_3");
static_assert(sizeof(InputComponent_Player2_C_GbxInputEvent_3) == 0x000010, "Wrong size on InputComponent_Player2_C_GbxInputEvent_3");
static_assert(offsetof(InputComponent_Player2_C_GbxInputEvent_3, Val) == 0x000000, "Member 'InputComponent_Player2_C_GbxInputEvent_3::Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_GbxInputEvent_3, bGamePad) == 0x00000C, "Member 'InputComponent_Player2_C_GbxInputEvent_3::bGamePad' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3
// 0x0008 (0x0008 - 0x0000)
struct InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3) == 0x000008, "Wrong alignment on InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3");
static_assert(sizeof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3) == 0x000008, "Wrong size on InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3");
static_assert(offsetof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3, Action) == 0x000000, "Member 'InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_MarkTarget_K2Node_GbxInputActionEvent_Discrete_3::Action' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4
// 0x0008 (0x0008 - 0x0000)
struct InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4) == 0x000008, "Wrong alignment on InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4");
static_assert(sizeof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4) == 0x000008, "Wrong size on InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4");
static_assert(offsetof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4, Action) == 0x000000, "Member 'InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackNextMission_K2Node_GbxInputActionEvent_Discrete_4::Action' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5
// 0x0008 (0x0008 - 0x0000)
struct InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5 final
{
public:
	class UGbxInputActionData_Discrete*           Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5) == 0x000008, "Wrong alignment on InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5");
static_assert(sizeof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5) == 0x000008, "Wrong size on InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5");
static_assert(offsetof(InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5, Action) == 0x000000, "Member 'InputComponent_Player2_C_GbxInpActEvt_InputAction_Discrete_TrackPreviousMission_K2Node_GbxInputActionEvent_Discrete_5::Action' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.K2Node_GbxInputEvent_OakLookAxis_6_def_exec
// 0x0010 (0x0010 - 0x0000)
struct InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec) == 0x000004, "Wrong alignment on InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec");
static_assert(sizeof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec) == 0x000010, "Wrong size on InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec");
static_assert(offsetof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec, Val) == 0x000000, "Member 'InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec::Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec, bGamePad) == 0x00000C, "Member 'InputComponent_Player2_C_K2Node_GbxInputEvent_OakLookAxis_6_def_exec::bGamePad' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.K2Node_GbxInputEvent_OakMoveAxis_0_def_exec
// 0x0010 (0x0010 - 0x0000)
struct InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec final
{
public:
	struct FVector                                Val;                                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePad;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec) == 0x000004, "Wrong alignment on InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec");
static_assert(sizeof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec) == 0x000010, "Wrong size on InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec");
static_assert(offsetof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec, Val) == 0x000000, "Member 'InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec::Val' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec, bGamePad) == 0x00000C, "Member 'InputComponent_Player2_C_K2Node_GbxInputEvent_OakMoveAxis_0_def_exec::bGamePad' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.IsInFFYL
// 0x0003 (0x0003 - 0x0000)
struct InputComponent_Player2_C_IsInFFYL final
{
public:
	bool                                          InFFYL;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInDownState_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_IsInFFYL) == 0x000001, "Wrong alignment on InputComponent_Player2_C_IsInFFYL");
static_assert(sizeof(InputComponent_Player2_C_IsInFFYL) == 0x000003, "Wrong size on InputComponent_Player2_C_IsInFFYL");
static_assert(offsetof(InputComponent_Player2_C_IsInFFYL, InFFYL) == 0x000000, "Member 'InputComponent_Player2_C_IsInFFYL::InFFYL' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsInFFYL, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'InputComponent_Player2_C_IsInFFYL::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsInFFYL, CallFunc_IsInDownState_ReturnValue) == 0x000002, "Member 'InputComponent_Player2_C_IsInFFYL::CallFunc_IsInDownState_ReturnValue' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.IsUsePromptEnabled
// 0x0020 (0x0020 - 0x0000)
struct InputComponent_Player2_C_IsUsePromptEnabled final
{
public:
	EUsabilityType                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Res;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOakUseComponent*                       CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanRouteInputToCurrentUsable_ReturnValue; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_IsUsePromptEnabled) == 0x000008, "Wrong alignment on InputComponent_Player2_C_IsUsePromptEnabled");
static_assert(sizeof(InputComponent_Player2_C_IsUsePromptEnabled) == 0x000020, "Wrong size on InputComponent_Player2_C_IsUsePromptEnabled");
static_assert(offsetof(InputComponent_Player2_C_IsUsePromptEnabled, Type) == 0x000000, "Member 'InputComponent_Player2_C_IsUsePromptEnabled::Type' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsUsePromptEnabled, Res) == 0x000001, "Member 'InputComponent_Player2_C_IsUsePromptEnabled::Res' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsUsePromptEnabled, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'InputComponent_Player2_C_IsUsePromptEnabled::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsUsePromptEnabled, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'InputComponent_Player2_C_IsUsePromptEnabled::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsUsePromptEnabled, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'InputComponent_Player2_C_IsUsePromptEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsUsePromptEnabled, CallFunc_CanRouteInputToCurrentUsable_ReturnValue) == 0x000019, "Member 'InputComponent_Player2_C_IsUsePromptEnabled::CallFunc_CanRouteInputToCurrentUsable_ReturnValue' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.ShouldAttemptSecondaryActionSkill
// 0x0018 (0x0018 - 0x0000)
struct InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill final
{
public:
	bool                                          bRes;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOakActionAbility*                      CallFunc_GetSecondaryActionAbility_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill) == 0x000008, "Wrong alignment on InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill");
static_assert(sizeof(InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill) == 0x000018, "Wrong size on InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill");
static_assert(offsetof(InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill, bRes) == 0x000000, "Member 'InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill::bRes' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill, CallFunc_GetSecondaryActionAbility_ReturnValue) == 0x000008, "Member 'InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill::CallFunc_GetSecondaryActionAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'InputComponent_Player2_C_ShouldAttemptSecondaryActionSkill::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.IsPawnAttached
// 0x0018 (0x0018 - 0x0000)
struct InputComponent_Player2_C_IsPawnAttached final
{
public:
	bool                                          bRes;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnAttachSlotComponent*               CallFunc_FindPawnAttachSlotComponent_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_IsPawnAttached) == 0x000008, "Wrong alignment on InputComponent_Player2_C_IsPawnAttached");
static_assert(sizeof(InputComponent_Player2_C_IsPawnAttached) == 0x000018, "Wrong size on InputComponent_Player2_C_IsPawnAttached");
static_assert(offsetof(InputComponent_Player2_C_IsPawnAttached, bRes) == 0x000000, "Member 'InputComponent_Player2_C_IsPawnAttached::bRes' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsPawnAttached, CallFunc_FindPawnAttachSlotComponent_ReturnValue) == 0x000008, "Member 'InputComponent_Player2_C_IsPawnAttached::CallFunc_FindPawnAttachSlotComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(InputComponent_Player2_C_IsPawnAttached, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'InputComponent_Player2_C_IsPawnAttached::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function InputComponent_Player2.InputComponent_Player2_C.UsesActionSkillOverride
// 0x0001 (0x0001 - 0x0000)
struct InputComponent_Player2_C_UsesActionSkillOverride final
{
public:
	bool                                          bRes;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InputComponent_Player2_C_UsesActionSkillOverride) == 0x000001, "Wrong alignment on InputComponent_Player2_C_UsesActionSkillOverride");
static_assert(sizeof(InputComponent_Player2_C_UsesActionSkillOverride) == 0x000001, "Wrong size on InputComponent_Player2_C_UsesActionSkillOverride");
static_assert(offsetof(InputComponent_Player2_C_UsesActionSkillOverride, bRes) == 0x000000, "Member 'InputComponent_Player2_C_UsesActionSkillOverride::bRes' has a wrong offset!");

}

