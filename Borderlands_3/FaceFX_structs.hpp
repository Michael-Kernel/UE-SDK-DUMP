#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FaceFX

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum FaceFX.EFaceFXTargetPlatform
// NumValues: 0x0005
enum class EFaceFXTargetPlatform : uint8
{
	PC                                       = 0,
	PS4                                      = 1,
	XBoxOne                                  = 2,
	GGP                                      = 3,
	MAX                                      = 4,
};

// ScriptStruct FaceFX.AnimNode_BlendFaceFXAnimation
// 0x0058 (0x0088 - 0x0030)
struct FAnimNode_BlendFaceFXAnimation final : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x004E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x29];                                      // 0x004F(0x0029)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BoneNamesToExclude;                                // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BlendFaceFXAnimation) == 0x000008, "Wrong alignment on FAnimNode_BlendFaceFXAnimation");
static_assert(sizeof(FAnimNode_BlendFaceFXAnimation) == 0x000088, "Wrong size on FAnimNode_BlendFaceFXAnimation");
static_assert(offsetof(FAnimNode_BlendFaceFXAnimation, ComponentPose) == 0x000030, "Member 'FAnimNode_BlendFaceFXAnimation::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendFaceFXAnimation, Alpha) == 0x000048, "Member 'FAnimNode_BlendFaceFXAnimation::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendFaceFXAnimation, TranslationMode) == 0x00004C, "Member 'FAnimNode_BlendFaceFXAnimation::TranslationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendFaceFXAnimation, RotationMode) == 0x00004D, "Member 'FAnimNode_BlendFaceFXAnimation::RotationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendFaceFXAnimation, ScaleMode) == 0x00004E, "Member 'FAnimNode_BlendFaceFXAnimation::ScaleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendFaceFXAnimation, BoneNamesToExclude) == 0x000078, "Member 'FAnimNode_BlendFaceFXAnimation::BoneNamesToExclude' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAnimData
// 0x0010 (0x0010 - 0x0000)
struct FFaceFXAnimData final
{
public:
	TArray<uint8>                                 RawData;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXAnimData) == 0x000008, "Wrong alignment on FFaceFXAnimData");
static_assert(sizeof(FFaceFXAnimData) == 0x000010, "Wrong size on FFaceFXAnimData");
static_assert(offsetof(FFaceFXAnimData, RawData) == 0x000000, "Member 'FFaceFXAnimData::RawData' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXSkelMeshComponentId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFaceFXSkelMeshComponentId final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXSkelMeshComponentId) == 0x000008, "Wrong alignment on FFaceFXSkelMeshComponentId");
static_assert(sizeof(FFaceFXSkelMeshComponentId) == 0x000010, "Wrong size on FFaceFXSkelMeshComponentId");
static_assert(offsetof(FFaceFXSkelMeshComponentId, Index) == 0x000000, "Member 'FFaceFXSkelMeshComponentId::Index' has a wrong offset!");
static_assert(offsetof(FFaceFXSkelMeshComponentId, Name) == 0x000008, "Member 'FFaceFXSkelMeshComponentId::Name' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAnimId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFaceFXAnimId final
{
public:
	class FName                                   Group;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXAnimId) == 0x000008, "Wrong alignment on FFaceFXAnimId");
static_assert(sizeof(FFaceFXAnimId) == 0x000010, "Wrong size on FFaceFXAnimId");
static_assert(offsetof(FFaceFXAnimId, Group) == 0x000000, "Member 'FFaceFXAnimId::Group' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimId, Name) == 0x000008, "Member 'FFaceFXAnimId::Name' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAnimComponentSet
// 0x0048 (0x0048 - 0x0000)
struct FFaceFXAnimComponentSet final
{
public:
	struct FFaceFXSkelMeshComponentId             SkelMeshComponentId;                               // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFaceFXAnimId                          AnimationId;                                       // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFaceFXAnim>             Animation;                                         // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXAnimComponentSet) == 0x000008, "Wrong alignment on FFaceFXAnimComponentSet");
static_assert(sizeof(FFaceFXAnimComponentSet) == 0x000048, "Wrong size on FFaceFXAnimComponentSet");
static_assert(offsetof(FFaceFXAnimComponentSet, SkelMeshComponentId) == 0x000000, "Member 'FFaceFXAnimComponentSet::SkelMeshComponentId' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimComponentSet, AnimationId) == 0x000010, "Member 'FFaceFXAnimComponentSet::AnimationId' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimComponentSet, Animation) == 0x000020, "Member 'FFaceFXAnimComponentSet::Animation' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXIdData
// 0x0010 (0x0010 - 0x0000)
struct FFaceFXIdData final
{
public:
	uint64                                        ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXIdData) == 0x000008, "Wrong alignment on FFaceFXIdData");
static_assert(sizeof(FFaceFXIdData) == 0x000010, "Wrong size on FFaceFXIdData");
static_assert(offsetof(FFaceFXIdData, ID) == 0x000000, "Member 'FFaceFXIdData::ID' has a wrong offset!");
static_assert(offsetof(FFaceFXIdData, Name) == 0x000008, "Member 'FFaceFXIdData::Name' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXActorData
// 0x0030 (0x0030 - 0x0000)
struct FFaceFXActorData final
{
public:
	TArray<uint8>                                 ActorRawData;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BonesRawData;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFaceFXIdData>                  Ids;                                               // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXActorData) == 0x000008, "Wrong alignment on FFaceFXActorData");
static_assert(sizeof(FFaceFXActorData) == 0x000030, "Wrong size on FFaceFXActorData");
static_assert(offsetof(FFaceFXActorData, ActorRawData) == 0x000000, "Member 'FFaceFXActorData::ActorRawData' has a wrong offset!");
static_assert(offsetof(FFaceFXActorData, BonesRawData) == 0x000010, "Member 'FFaceFXActorData::BonesRawData' has a wrong offset!");
static_assert(offsetof(FFaceFXActorData, Ids) == 0x000020, "Member 'FFaceFXActorData::Ids' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAnimationSectionData
// 0x0078 (0x0078 - 0x0000)
struct FFaceFXAnimationSectionData final
{
public:
	struct FGuid                                  TrackId;                                           // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFaceFXAnimId                          AnimationId;                                       // 0x0018(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFaceFXAnim>             Animation;                                         // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFaceFXSkelMeshComponentId             ComponentId;                                       // 0x0050(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         AnimDuration;                                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           StartTime;                                         // 0x006C(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           EndTime;                                           // 0x0070(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedAnimDuration;                               // 0x0074(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFaceFXAnimationSectionData) == 0x000008, "Wrong alignment on FFaceFXAnimationSectionData");
static_assert(sizeof(FFaceFXAnimationSectionData) == 0x000078, "Wrong size on FFaceFXAnimationSectionData");
static_assert(offsetof(FFaceFXAnimationSectionData, TrackId) == 0x000000, "Member 'FFaceFXAnimationSectionData::TrackId' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, RowIndex) == 0x000010, "Member 'FFaceFXAnimationSectionData::RowIndex' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, AnimationId) == 0x000018, "Member 'FFaceFXAnimationSectionData::AnimationId' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, Animation) == 0x000028, "Member 'FFaceFXAnimationSectionData::Animation' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, ComponentId) == 0x000050, "Member 'FFaceFXAnimationSectionData::ComponentId' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, AnimDuration) == 0x000060, "Member 'FFaceFXAnimationSectionData::AnimDuration' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, StartOffset) == 0x000064, "Member 'FFaceFXAnimationSectionData::StartOffset' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, EndOffset) == 0x000068, "Member 'FFaceFXAnimationSectionData::EndOffset' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, StartTime) == 0x00006C, "Member 'FFaceFXAnimationSectionData::StartTime' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, EndTime) == 0x000070, "Member 'FFaceFXAnimationSectionData::EndTime' has a wrong offset!");
static_assert(offsetof(FFaceFXAnimationSectionData, bCachedAnimDuration) == 0x000074, "Member 'FFaceFXAnimationSectionData::bCachedAnimDuration' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAnimationSectionTemplate
// 0x0078 (0x0098 - 0x0020)
struct FFaceFXAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFaceFXAnimationSectionData            SectionData;                                       // 0x0020(0x0078)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFaceFXAnimationSectionTemplate) == 0x000008, "Wrong alignment on FFaceFXAnimationSectionTemplate");
static_assert(sizeof(FFaceFXAnimationSectionTemplate) == 0x000098, "Wrong size on FFaceFXAnimationSectionTemplate");
static_assert(offsetof(FFaceFXAnimationSectionTemplate, SectionData) == 0x000020, "Member 'FFaceFXAnimationSectionTemplate::SectionData' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAudioAsset
// 0x0018 (0x0018 - 0x0000)
struct FFaceFXAudioAsset final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WwiseID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFaceFXAudioAsset) == 0x000008, "Wrong alignment on FFaceFXAudioAsset");
static_assert(sizeof(FFaceFXAudioAsset) == 0x000018, "Wrong size on FFaceFXAudioAsset");
static_assert(offsetof(FFaceFXAudioAsset, WwiseEvent) == 0x000008, "Member 'FFaceFXAudioAsset::WwiseEvent' has a wrong offset!");
static_assert(offsetof(FFaceFXAudioAsset, WwiseID) == 0x000010, "Member 'FFaceFXAudioAsset::WwiseID' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXEntry
// 0x0048 (0x0048 - 0x0000)
struct FFaceFXEntry final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFaceFXAudioComponent*                  AudioComp;                                         // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFaceFXActor>            Asset;                                             // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFaceFXCharacter*                       Character;                                         // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsAutoPlaySound : 1;                              // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDisableMorphTargets : 1;                        // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasBonesFromMultipleSkeletons : 1;                // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFaceFXEntry) == 0x000008, "Wrong alignment on FFaceFXEntry");
static_assert(sizeof(FFaceFXEntry) == 0x000048, "Wrong size on FFaceFXEntry");
static_assert(offsetof(FFaceFXEntry, SkelMeshComp) == 0x000000, "Member 'FFaceFXEntry::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(FFaceFXEntry, AudioComp) == 0x000008, "Member 'FFaceFXEntry::AudioComp' has a wrong offset!");
static_assert(offsetof(FFaceFXEntry, Asset) == 0x000010, "Member 'FFaceFXEntry::Asset' has a wrong offset!");
static_assert(offsetof(FFaceFXEntry, Character) == 0x000038, "Member 'FFaceFXEntry::Character' has a wrong offset!");

// ScriptStruct FaceFX.GbxFaceFXAnimData
// 0x0038 (0x0038 - 0x0000)
struct FGbxFaceFXAnimData final
{
public:
	struct FFaceFXAnimId                          FaceFXAnimId;                                      // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFaceFXAudioAsset                      Audio;                                             // 0x0010(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFaceFXAnimData>                AnimationRawData;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxFaceFXAnimData) == 0x000008, "Wrong alignment on FGbxFaceFXAnimData");
static_assert(sizeof(FGbxFaceFXAnimData) == 0x000038, "Wrong size on FGbxFaceFXAnimData");
static_assert(offsetof(FGbxFaceFXAnimData, FaceFXAnimId) == 0x000000, "Member 'FGbxFaceFXAnimData::FaceFXAnimId' has a wrong offset!");
static_assert(offsetof(FGbxFaceFXAnimData, Audio) == 0x000010, "Member 'FGbxFaceFXAnimData::Audio' has a wrong offset!");
static_assert(offsetof(FGbxFaceFXAnimData, AnimationRawData) == 0x000028, "Member 'FGbxFaceFXAnimData::AnimationRawData' has a wrong offset!");

// ScriptStruct FaceFX.GbxFaceFXAnimSetData
// 0x0010 (0x0010 - 0x0000)
struct FGbxFaceFXAnimSetData final
{
public:
	TArray<struct FGbxFaceFXAnimData>             FaceFXAnimDataList;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxFaceFXAnimSetData) == 0x000008, "Wrong alignment on FGbxFaceFXAnimSetData");
static_assert(sizeof(FGbxFaceFXAnimSetData) == 0x000010, "Wrong size on FGbxFaceFXAnimSetData");
static_assert(offsetof(FGbxFaceFXAnimSetData, FaceFXAnimDataList) == 0x000000, "Member 'FGbxFaceFXAnimSetData::FaceFXAnimDataList' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXAnimSetData
// 0x0010 (0x0010 - 0x0000)
struct FFaceFXAnimSetData final
{
public:
	TArray<struct FFaceFXAnimData>                Animations;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXAnimSetData) == 0x000008, "Wrong alignment on FFaceFXAnimSetData");
static_assert(sizeof(FFaceFXAnimSetData) == 0x000010, "Wrong size on FFaceFXAnimSetData");
static_assert(offsetof(FFaceFXAnimSetData, Animations) == 0x000000, "Member 'FFaceFXAnimSetData::Animations' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXTrackKey
// 0x0058 (0x0058 - 0x0000)
struct FFaceFXTrackKey final
{
public:
	struct FFaceFXSkelMeshComponentId             SkelMeshComponentId;                               // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFaceFXAnimId                          AnimationId;                                       // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFaceFXAnim>             Animation;                                         // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLoop : 1;                                         // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAnimationDurationLoaded : 1;                    // 0x004C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationDuration;                                 // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFaceFXTrackKey) == 0x000008, "Wrong alignment on FFaceFXTrackKey");
static_assert(sizeof(FFaceFXTrackKey) == 0x000058, "Wrong size on FFaceFXTrackKey");
static_assert(offsetof(FFaceFXTrackKey, SkelMeshComponentId) == 0x000000, "Member 'FFaceFXTrackKey::SkelMeshComponentId' has a wrong offset!");
static_assert(offsetof(FFaceFXTrackKey, AnimationId) == 0x000010, "Member 'FFaceFXTrackKey::AnimationId' has a wrong offset!");
static_assert(offsetof(FFaceFXTrackKey, Animation) == 0x000020, "Member 'FFaceFXTrackKey::Animation' has a wrong offset!");
static_assert(offsetof(FFaceFXTrackKey, Time) == 0x000048, "Member 'FFaceFXTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FFaceFXTrackKey, AnimationDuration) == 0x000050, "Member 'FFaceFXTrackKey::AnimationDuration' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXDLCPathSettings
// 0x0050 (0x0050 - 0x0000)
struct FFaceFXDLCPathSettings final
{
public:
	class FString                                 PatchContentPath;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PluginContentPath;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductionFolderExtension;                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WwiseFolderExtension;                              // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalWwiseFolderExtensions;                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXDLCPathSettings) == 0x000008, "Wrong alignment on FFaceFXDLCPathSettings");
static_assert(sizeof(FFaceFXDLCPathSettings) == 0x000050, "Wrong size on FFaceFXDLCPathSettings");
static_assert(offsetof(FFaceFXDLCPathSettings, PatchContentPath) == 0x000000, "Member 'FFaceFXDLCPathSettings::PatchContentPath' has a wrong offset!");
static_assert(offsetof(FFaceFXDLCPathSettings, PluginContentPath) == 0x000010, "Member 'FFaceFXDLCPathSettings::PluginContentPath' has a wrong offset!");
static_assert(offsetof(FFaceFXDLCPathSettings, ProductionFolderExtension) == 0x000020, "Member 'FFaceFXDLCPathSettings::ProductionFolderExtension' has a wrong offset!");
static_assert(offsetof(FFaceFXDLCPathSettings, WwiseFolderExtension) == 0x000030, "Member 'FFaceFXDLCPathSettings::WwiseFolderExtension' has a wrong offset!");
static_assert(offsetof(FFaceFXDLCPathSettings, AdditionalWwiseFolderExtensions) == 0x000040, "Member 'FFaceFXDLCPathSettings::AdditionalWwiseFolderExtensions' has a wrong offset!");

// ScriptStruct FaceFX.FaceFXLocalizationData
// 0x0020 (0x0020 - 0x0000)
struct FFaceFXLocalizationData final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExportLanguage;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceFXLocalizationData) == 0x000008, "Wrong alignment on FFaceFXLocalizationData");
static_assert(sizeof(FFaceFXLocalizationData) == 0x000020, "Wrong size on FFaceFXLocalizationData");
static_assert(offsetof(FFaceFXLocalizationData, GroupName) == 0x000000, "Member 'FFaceFXLocalizationData::GroupName' has a wrong offset!");
static_assert(offsetof(FFaceFXLocalizationData, ExportLanguage) == 0x000010, "Member 'FFaceFXLocalizationData::ExportLanguage' has a wrong offset!");

}

