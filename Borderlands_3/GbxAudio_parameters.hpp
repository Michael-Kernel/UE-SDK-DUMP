#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAudio

#include "Basic.hpp"

#include "WwiseAudio_structs.hpp"
#include "GbxAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GbxAudio.ActiveAmbientLocationChooser_Blueprint.InitLocationChooser
// 0x0008 (0x0008 - 0x0000)
struct ActiveAmbientLocationChooser_Blueprint_InitLocationChooser final
{
public:
	class UActiveAmbientSoundComponent*           ActiveAmbientComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActiveAmbientLocationChooser_Blueprint_InitLocationChooser) == 0x000008, "Wrong alignment on ActiveAmbientLocationChooser_Blueprint_InitLocationChooser");
static_assert(sizeof(ActiveAmbientLocationChooser_Blueprint_InitLocationChooser) == 0x000008, "Wrong size on ActiveAmbientLocationChooser_Blueprint_InitLocationChooser");
static_assert(offsetof(ActiveAmbientLocationChooser_Blueprint_InitLocationChooser, ActiveAmbientComponent) == 0x000000, "Member 'ActiveAmbientLocationChooser_Blueprint_InitLocationChooser::ActiveAmbientComponent' has a wrong offset!");

// Function GbxAudio.ActiveAmbientLocationChooser_Blueprint.NominateSoundLocation
// 0x0020 (0x0020 - 0x0000)
struct ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation final
{
public:
	class UActiveAmbientSoundComponent*           ActiveAmbientComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Out_Location;                                      // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_Radius;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation) == 0x000008, "Wrong alignment on ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation");
static_assert(sizeof(ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation) == 0x000020, "Wrong size on ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation");
static_assert(offsetof(ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation, ActiveAmbientComponent) == 0x000000, "Member 'ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation::ActiveAmbientComponent' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation, Out_Location) == 0x000008, "Member 'ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation::Out_Location' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation, Out_Radius) == 0x000014, "Member 'ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation::Out_Radius' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation, ReturnValue) == 0x000018, "Member 'ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation::ReturnValue' has a wrong offset!");

// Function GbxAudio.LightAudioComponent.PostWwiseEvent
// 0x0020 (0x0020 - 0x0000)
struct LightAudioComponent_PostWwiseEvent final
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwisePlaybackInstance                 ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightAudioComponent_PostWwiseEvent) == 0x000008, "Wrong alignment on LightAudioComponent_PostWwiseEvent");
static_assert(sizeof(LightAudioComponent_PostWwiseEvent) == 0x000020, "Wrong size on LightAudioComponent_PostWwiseEvent");
static_assert(offsetof(LightAudioComponent_PostWwiseEvent, WwiseEvent) == 0x000000, "Member 'LightAudioComponent_PostWwiseEvent::WwiseEvent' has a wrong offset!");
static_assert(offsetof(LightAudioComponent_PostWwiseEvent, ReturnValue) == 0x000008, "Member 'LightAudioComponent_PostWwiseEvent::ReturnValue' has a wrong offset!");

// Function GbxAudio.LightAudioComponent.SetRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct LightAudioComponent_SetRTPCValue final
{
public:
	class UWwiseRtpc*                             GameParameter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistent;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueChangeDuration;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseCurveInterpolation                      FadeCurve;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightAudioComponent_SetRTPCValue) == 0x000008, "Wrong alignment on LightAudioComponent_SetRTPCValue");
static_assert(sizeof(LightAudioComponent_SetRTPCValue) == 0x000018, "Wrong size on LightAudioComponent_SetRTPCValue");
static_assert(offsetof(LightAudioComponent_SetRTPCValue, GameParameter) == 0x000000, "Member 'LightAudioComponent_SetRTPCValue::GameParameter' has a wrong offset!");
static_assert(offsetof(LightAudioComponent_SetRTPCValue, Value) == 0x000008, "Member 'LightAudioComponent_SetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(LightAudioComponent_SetRTPCValue, bPersistent) == 0x00000C, "Member 'LightAudioComponent_SetRTPCValue::bPersistent' has a wrong offset!");
static_assert(offsetof(LightAudioComponent_SetRTPCValue, ValueChangeDuration) == 0x000010, "Member 'LightAudioComponent_SetRTPCValue::ValueChangeDuration' has a wrong offset!");
static_assert(offsetof(LightAudioComponent_SetRTPCValue, FadeCurve) == 0x000014, "Member 'LightAudioComponent_SetRTPCValue::FadeCurve' has a wrong offset!");

// Function GbxAudio.WwiseListenerEffectComponent.ApplyAudioEffect
// 0x0010 (0x0010 - 0x0000)
struct WwiseListenerEffectComponent_ApplyAudioEffect final
{
public:
	class UWwiseAuxBus*                           Efx;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetPercent;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryPercent;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseListenerEffectComponent_ApplyAudioEffect) == 0x000008, "Wrong alignment on WwiseListenerEffectComponent_ApplyAudioEffect");
static_assert(sizeof(WwiseListenerEffectComponent_ApplyAudioEffect) == 0x000010, "Wrong size on WwiseListenerEffectComponent_ApplyAudioEffect");
static_assert(offsetof(WwiseListenerEffectComponent_ApplyAudioEffect, Efx) == 0x000000, "Member 'WwiseListenerEffectComponent_ApplyAudioEffect::Efx' has a wrong offset!");
static_assert(offsetof(WwiseListenerEffectComponent_ApplyAudioEffect, WetPercent) == 0x000008, "Member 'WwiseListenerEffectComponent_ApplyAudioEffect::WetPercent' has a wrong offset!");
static_assert(offsetof(WwiseListenerEffectComponent_ApplyAudioEffect, DryPercent) == 0x00000C, "Member 'WwiseListenerEffectComponent_ApplyAudioEffect::DryPercent' has a wrong offset!");

// Function GbxAudio.WwiseListenerEffectComponent.RemoveAudioEffect
// 0x0008 (0x0008 - 0x0000)
struct WwiseListenerEffectComponent_RemoveAudioEffect final
{
public:
	class UWwiseAuxBus*                           Efx;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseListenerEffectComponent_RemoveAudioEffect) == 0x000008, "Wrong alignment on WwiseListenerEffectComponent_RemoveAudioEffect");
static_assert(sizeof(WwiseListenerEffectComponent_RemoveAudioEffect) == 0x000008, "Wrong size on WwiseListenerEffectComponent_RemoveAudioEffect");
static_assert(offsetof(WwiseListenerEffectComponent_RemoveAudioEffect, Efx) == 0x000000, "Member 'WwiseListenerEffectComponent_RemoveAudioEffect::Efx' has a wrong offset!");

// Function GbxAudio.ActiveAmbientLocationChooser_PreselectedLocation.AddLocation
// 0x0014 (0x0014 - 0x0000)
struct ActiveAmbientLocationChooser_PreselectedLocation_AddLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActiveAmbientLocationChooser_PreselectedLocation_AddLocation) == 0x000004, "Wrong alignment on ActiveAmbientLocationChooser_PreselectedLocation_AddLocation");
static_assert(sizeof(ActiveAmbientLocationChooser_PreselectedLocation_AddLocation) == 0x000014, "Wrong size on ActiveAmbientLocationChooser_PreselectedLocation_AddLocation");
static_assert(offsetof(ActiveAmbientLocationChooser_PreselectedLocation_AddLocation, InLocation) == 0x000000, "Member 'ActiveAmbientLocationChooser_PreselectedLocation_AddLocation::InLocation' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationChooser_PreselectedLocation_AddLocation, InRadius) == 0x00000C, "Member 'ActiveAmbientLocationChooser_PreselectedLocation_AddLocation::InRadius' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationChooser_PreselectedLocation_AddLocation, ReturnValue) == 0x000010, "Member 'ActiveAmbientLocationChooser_PreselectedLocation_AddLocation::ReturnValue' has a wrong offset!");

// Function GbxAudio.ActiveAmbientLocationValidator_Blueprint.IsProposedLocationValid
// 0x0018 (0x0018 - 0x0000)
struct ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid final
{
public:
	const class UActiveAmbientSoundComponent*     ActiveAmbientComponent;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid) == 0x000008, "Wrong alignment on ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid");
static_assert(sizeof(ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid) == 0x000018, "Wrong size on ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid");
static_assert(offsetof(ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid, ActiveAmbientComponent) == 0x000000, "Member 'ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid::ActiveAmbientComponent' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid, Location) == 0x000008, "Member 'ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid::Location' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid, ReturnValue) == 0x000014, "Member 'ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid::ReturnValue' has a wrong offset!");

// Function GbxAudio.ActiveAmbientSoundComponent.Startle
// 0x0010 (0x0010 - 0x0000)
struct ActiveAmbientSoundComponent_Startle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActiveAmbientSoundComponent_Startle) == 0x000004, "Wrong alignment on ActiveAmbientSoundComponent_Startle");
static_assert(sizeof(ActiveAmbientSoundComponent_Startle) == 0x000010, "Wrong size on ActiveAmbientSoundComponent_Startle");
static_assert(offsetof(ActiveAmbientSoundComponent_Startle, Location) == 0x000000, "Member 'ActiveAmbientSoundComponent_Startle::Location' has a wrong offset!");
static_assert(offsetof(ActiveAmbientSoundComponent_Startle, Radius) == 0x00000C, "Member 'ActiveAmbientSoundComponent_Startle::Radius' has a wrong offset!");

// Function GbxAudio.ActiveAmbientUpdater_Blueprint.InitializeActiveAmbientInstance
// 0x0048 (0x0048 - 0x0000)
struct ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance final
{
public:
	class UActiveAmbientSoundComponent*           ActiveAmbientComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveAmbientInstance                 ActiveAmbientInstance;                             // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance) == 0x000008, "Wrong alignment on ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance");
static_assert(sizeof(ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance) == 0x000048, "Wrong size on ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance");
static_assert(offsetof(ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance, ActiveAmbientComponent) == 0x000000, "Member 'ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance::ActiveAmbientComponent' has a wrong offset!");
static_assert(offsetof(ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance, ActiveAmbientInstance) == 0x000008, "Member 'ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance::ActiveAmbientInstance' has a wrong offset!");

// Function GbxAudio.ActiveAmbientUpdater_Blueprint.UpdateActiveAmbientInstance
// 0x0050 (0x0050 - 0x0000)
struct ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance final
{
public:
	class UActiveAmbientSoundComponent*           ActiveAmbientComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveAmbientInstance                 ActiveAmbientInstance;                             // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance) == 0x000008, "Wrong alignment on ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance");
static_assert(sizeof(ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance) == 0x000050, "Wrong size on ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance");
static_assert(offsetof(ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance, ActiveAmbientComponent) == 0x000000, "Member 'ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance::ActiveAmbientComponent' has a wrong offset!");
static_assert(offsetof(ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance, ActiveAmbientInstance) == 0x000008, "Member 'ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance::ActiveAmbientInstance' has a wrong offset!");
static_assert(offsetof(ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance, DeltaTime) == 0x000048, "Member 'ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance::DeltaTime' has a wrong offset!");

// Function GbxAudio.AudioPrepLocationFinder_Blueprint.AddLocation
// 0x001C (0x001C - 0x0000)
struct AudioPrepLocationFinder_Blueprint_AddLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioPrepLocationFinder_Blueprint_AddLocation) == 0x000004, "Wrong alignment on AudioPrepLocationFinder_Blueprint_AddLocation");
static_assert(sizeof(AudioPrepLocationFinder_Blueprint_AddLocation) == 0x00001C, "Wrong size on AudioPrepLocationFinder_Blueprint_AddLocation");
static_assert(offsetof(AudioPrepLocationFinder_Blueprint_AddLocation, Location) == 0x000000, "Member 'AudioPrepLocationFinder_Blueprint_AddLocation::Location' has a wrong offset!");
static_assert(offsetof(AudioPrepLocationFinder_Blueprint_AddLocation, Rotation) == 0x00000C, "Member 'AudioPrepLocationFinder_Blueprint_AddLocation::Rotation' has a wrong offset!");
static_assert(offsetof(AudioPrepLocationFinder_Blueprint_AddLocation, Radius) == 0x000018, "Member 'AudioPrepLocationFinder_Blueprint_AddLocation::Radius' has a wrong offset!");

// Function GbxAudio.ActiveAmbientLocationFinder_Blueprint.AddFoundLocations
// 0x0010 (0x0010 - 0x0000)
struct ActiveAmbientLocationFinder_Blueprint_AddFoundLocations final
{
public:
	class UActiveAmbientSoundComponent*           ActiveAmbientComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActiveAmbientLocationChooser_PreselectedLocation* PreselectedLocationChooser;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActiveAmbientLocationFinder_Blueprint_AddFoundLocations) == 0x000008, "Wrong alignment on ActiveAmbientLocationFinder_Blueprint_AddFoundLocations");
static_assert(sizeof(ActiveAmbientLocationFinder_Blueprint_AddFoundLocations) == 0x000010, "Wrong size on ActiveAmbientLocationFinder_Blueprint_AddFoundLocations");
static_assert(offsetof(ActiveAmbientLocationFinder_Blueprint_AddFoundLocations, ActiveAmbientComponent) == 0x000000, "Member 'ActiveAmbientLocationFinder_Blueprint_AddFoundLocations::ActiveAmbientComponent' has a wrong offset!");
static_assert(offsetof(ActiveAmbientLocationFinder_Blueprint_AddFoundLocations, PreselectedLocationChooser) == 0x000008, "Member 'ActiveAmbientLocationFinder_Blueprint_AddFoundLocations::PreselectedLocationChooser' has a wrong offset!");

// Function GbxAudio.FoleyMainComponent.PlayFootstep
// 0x0038 (0x0038 - 0x0000)
struct FoleyMainComponent_PlayFootstep final
{
public:
	struct FVector                                FootstepLocation;                                  // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FootstepRotation;                                  // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UWwiseSwitch*                           MaterialSwitch;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeAdjustment;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAdjustment;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            ConfigureEvent;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreview;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FoleyMainComponent_PlayFootstep) == 0x000008, "Wrong alignment on FoleyMainComponent_PlayFootstep");
static_assert(sizeof(FoleyMainComponent_PlayFootstep) == 0x000038, "Wrong size on FoleyMainComponent_PlayFootstep");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, FootstepLocation) == 0x000000, "Member 'FoleyMainComponent_PlayFootstep::FootstepLocation' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, FootstepRotation) == 0x00000C, "Member 'FoleyMainComponent_PlayFootstep::FootstepRotation' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, MaterialSwitch) == 0x000018, "Member 'FoleyMainComponent_PlayFootstep::MaterialSwitch' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, VolumeAdjustment) == 0x000020, "Member 'FoleyMainComponent_PlayFootstep::VolumeAdjustment' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, PitchAdjustment) == 0x000024, "Member 'FoleyMainComponent_PlayFootstep::PitchAdjustment' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, ConfigureEvent) == 0x000028, "Member 'FoleyMainComponent_PlayFootstep::ConfigureEvent' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_PlayFootstep, bPreview) == 0x000030, "Member 'FoleyMainComponent_PlayFootstep::bPreview' has a wrong offset!");

// Function GbxAudio.FoleyMainComponent.PlayFootstepEvent
// 0x0048 (0x0048 - 0x0000)
struct FoleyMainComponent_PlayFootstepEvent final
{
public:
	struct FFoleyEventParams                      EventParams;                                       // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FoleyMainComponent_PlayFootstepEvent) == 0x000008, "Wrong alignment on FoleyMainComponent_PlayFootstepEvent");
static_assert(sizeof(FoleyMainComponent_PlayFootstepEvent) == 0x000048, "Wrong size on FoleyMainComponent_PlayFootstepEvent");
static_assert(offsetof(FoleyMainComponent_PlayFootstepEvent, EventParams) == 0x000000, "Member 'FoleyMainComponent_PlayFootstepEvent::EventParams' has a wrong offset!");

// Function GbxAudio.FoleyMainComponent.SetSurfaceModifier
// 0x0010 (0x0010 - 0x0000)
struct FoleyMainComponent_SetSurfaceModifier final
{
public:
	class UWwiseEvent*                            PlayEvent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootstepVolumeMultiplier;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FoleyMainComponent_SetSurfaceModifier) == 0x000008, "Wrong alignment on FoleyMainComponent_SetSurfaceModifier");
static_assert(sizeof(FoleyMainComponent_SetSurfaceModifier) == 0x000010, "Wrong size on FoleyMainComponent_SetSurfaceModifier");
static_assert(offsetof(FoleyMainComponent_SetSurfaceModifier, PlayEvent) == 0x000000, "Member 'FoleyMainComponent_SetSurfaceModifier::PlayEvent' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_SetSurfaceModifier, Volume) == 0x000008, "Member 'FoleyMainComponent_SetSurfaceModifier::Volume' has a wrong offset!");
static_assert(offsetof(FoleyMainComponent_SetSurfaceModifier, FootstepVolumeMultiplier) == 0x00000C, "Member 'FoleyMainComponent_SetSurfaceModifier::FootstepVolumeMultiplier' has a wrong offset!");

// Function GbxAudio.GbxAudioBlueprintLibrary.ApplyListenerAudioEffect
// 0x0018 (0x0018 - 0x0000)
struct GbxAudioBlueprintLibrary_ApplyListenerAudioEffect final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseAuxBus*                           Efx;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetVolume;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryVolume;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAudioBlueprintLibrary_ApplyListenerAudioEffect) == 0x000008, "Wrong alignment on GbxAudioBlueprintLibrary_ApplyListenerAudioEffect");
static_assert(sizeof(GbxAudioBlueprintLibrary_ApplyListenerAudioEffect) == 0x000018, "Wrong size on GbxAudioBlueprintLibrary_ApplyListenerAudioEffect");
static_assert(offsetof(GbxAudioBlueprintLibrary_ApplyListenerAudioEffect, Character) == 0x000000, "Member 'GbxAudioBlueprintLibrary_ApplyListenerAudioEffect::Character' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_ApplyListenerAudioEffect, Efx) == 0x000008, "Member 'GbxAudioBlueprintLibrary_ApplyListenerAudioEffect::Efx' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_ApplyListenerAudioEffect, WetVolume) == 0x000010, "Member 'GbxAudioBlueprintLibrary_ApplyListenerAudioEffect::WetVolume' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_ApplyListenerAudioEffect, DryVolume) == 0x000014, "Member 'GbxAudioBlueprintLibrary_ApplyListenerAudioEffect::DryVolume' has a wrong offset!");

// Function GbxAudio.GbxAudioBlueprintLibrary.PassesAudioPreparationComponentFilter
// 0x00B8 (0x00B8 - 0x0000)
struct GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioPrepComponentFilter              Filter;                                            // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter) == 0x000008, "Wrong alignment on GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter");
static_assert(sizeof(GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter) == 0x0000B8, "Wrong size on GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter");
static_assert(offsetof(GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter, Component) == 0x000000, "Member 'GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter::Component' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter, Filter) == 0x000008, "Member 'GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter::Filter' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter, ReturnValue) == 0x0000B0, "Member 'GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter::ReturnValue' has a wrong offset!");

// Function GbxAudio.GbxAudioBlueprintLibrary.PassesAudioPreparationHitFilter
// 0x0110 (0x0110 - 0x0000)
struct GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAudioPrepHitResultFilter              Filter;                                            // 0x0090(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter) == 0x000008, "Wrong alignment on GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter");
static_assert(sizeof(GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter) == 0x000110, "Wrong size on GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter");
static_assert(offsetof(GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter, Hit) == 0x000000, "Member 'GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter::Hit' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter, Filter) == 0x000090, "Member 'GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter::Filter' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter, ReturnValue) == 0x000108, "Member 'GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter::ReturnValue' has a wrong offset!");

// Function GbxAudio.GbxAudioBlueprintLibrary.RemoveListenerAudioEffect
// 0x0010 (0x0010 - 0x0000)
struct GbxAudioBlueprintLibrary_RemoveListenerAudioEffect final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseAuxBus*                           Efx;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAudioBlueprintLibrary_RemoveListenerAudioEffect) == 0x000008, "Wrong alignment on GbxAudioBlueprintLibrary_RemoveListenerAudioEffect");
static_assert(sizeof(GbxAudioBlueprintLibrary_RemoveListenerAudioEffect) == 0x000010, "Wrong size on GbxAudioBlueprintLibrary_RemoveListenerAudioEffect");
static_assert(offsetof(GbxAudioBlueprintLibrary_RemoveListenerAudioEffect, Character) == 0x000000, "Member 'GbxAudioBlueprintLibrary_RemoveListenerAudioEffect::Character' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_RemoveListenerAudioEffect, Efx) == 0x000008, "Member 'GbxAudioBlueprintLibrary_RemoveListenerAudioEffect::Efx' has a wrong offset!");

// Function GbxAudio.GbxAudioBlueprintLibrary.TriggerCharacterSound
// 0x0010 (0x0010 - 0x0000)
struct GbxAudioBlueprintLibrary_TriggerCharacterSound final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UCharacterSoundTag*               SoundTag;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GbxAudioBlueprintLibrary_TriggerCharacterSound) == 0x000008, "Wrong alignment on GbxAudioBlueprintLibrary_TriggerCharacterSound");
static_assert(sizeof(GbxAudioBlueprintLibrary_TriggerCharacterSound) == 0x000010, "Wrong size on GbxAudioBlueprintLibrary_TriggerCharacterSound");
static_assert(offsetof(GbxAudioBlueprintLibrary_TriggerCharacterSound, Character) == 0x000000, "Member 'GbxAudioBlueprintLibrary_TriggerCharacterSound::Character' has a wrong offset!");
static_assert(offsetof(GbxAudioBlueprintLibrary_TriggerCharacterSound, SoundTag) == 0x000008, "Member 'GbxAudioBlueprintLibrary_TriggerCharacterSound::SoundTag' has a wrong offset!");

// Function GbxAudio.MusicSequencerComponent.GetCurrentBeat
// 0x0004 (0x0004 - 0x0000)
struct MusicSequencerComponent_GetCurrentBeat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicSequencerComponent_GetCurrentBeat) == 0x000004, "Wrong alignment on MusicSequencerComponent_GetCurrentBeat");
static_assert(sizeof(MusicSequencerComponent_GetCurrentBeat) == 0x000004, "Wrong size on MusicSequencerComponent_GetCurrentBeat");
static_assert(offsetof(MusicSequencerComponent_GetCurrentBeat, ReturnValue) == 0x000000, "Member 'MusicSequencerComponent_GetCurrentBeat::ReturnValue' has a wrong offset!");

// Function GbxAudio.MusicSequencerComponent.GetRealTimeUntilBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicSequencerComponent_GetRealTimeUntilBeat final
{
public:
	float                                         Beat;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicSequencerComponent_GetRealTimeUntilBeat) == 0x000004, "Wrong alignment on MusicSequencerComponent_GetRealTimeUntilBeat");
static_assert(sizeof(MusicSequencerComponent_GetRealTimeUntilBeat) == 0x000008, "Wrong size on MusicSequencerComponent_GetRealTimeUntilBeat");
static_assert(offsetof(MusicSequencerComponent_GetRealTimeUntilBeat, Beat) == 0x000000, "Member 'MusicSequencerComponent_GetRealTimeUntilBeat::Beat' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_GetRealTimeUntilBeat, ReturnValue) == 0x000004, "Member 'MusicSequencerComponent_GetRealTimeUntilBeat::ReturnValue' has a wrong offset!");

// Function GbxAudio.MusicSequencerComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct MusicSequencerComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicSequencerComponent_IsPlaying) == 0x000001, "Wrong alignment on MusicSequencerComponent_IsPlaying");
static_assert(sizeof(MusicSequencerComponent_IsPlaying) == 0x000001, "Wrong size on MusicSequencerComponent_IsPlaying");
static_assert(offsetof(MusicSequencerComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'MusicSequencerComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function GbxAudio.MusicSequencerComponent.PostSequenceEvent
// 0x0028 (0x0028 - 0x0000)
struct MusicSequencerComponent_PostSequenceEvent final
{
public:
	class UWwiseAudioComponent*                   WwiseComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Note;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Velocity;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartBeat;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicSequencerComponent_PostSequenceEvent) == 0x000008, "Wrong alignment on MusicSequencerComponent_PostSequenceEvent");
static_assert(sizeof(MusicSequencerComponent_PostSequenceEvent) == 0x000028, "Wrong size on MusicSequencerComponent_PostSequenceEvent");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, WwiseComponent) == 0x000000, "Member 'MusicSequencerComponent_PostSequenceEvent::WwiseComponent' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, WwiseEvent) == 0x000008, "Member 'MusicSequencerComponent_PostSequenceEvent::WwiseEvent' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, Note) == 0x000010, "Member 'MusicSequencerComponent_PostSequenceEvent::Note' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, Velocity) == 0x000014, "Member 'MusicSequencerComponent_PostSequenceEvent::Velocity' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, Channel) == 0x000018, "Member 'MusicSequencerComponent_PostSequenceEvent::Channel' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, StartBeat) == 0x00001C, "Member 'MusicSequencerComponent_PostSequenceEvent::StartBeat' has a wrong offset!");
static_assert(offsetof(MusicSequencerComponent_PostSequenceEvent, Duration) == 0x000020, "Member 'MusicSequencerComponent_PostSequenceEvent::Duration' has a wrong offset!");

}

