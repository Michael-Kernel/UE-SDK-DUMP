#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ACLPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ACLPlugin_structs.hpp"


namespace SDK
{

// Class ACLPlugin.ACLStatsDumpCommandlet
// 0x0000 (0x0080 - 0x0080)
class UACLStatsDumpCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ACLStatsDumpCommandlet">();
	}
	static class UACLStatsDumpCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UACLStatsDumpCommandlet>();
	}
};
static_assert(alignof(UACLStatsDumpCommandlet) == 0x000008, "Wrong alignment on UACLStatsDumpCommandlet");
static_assert(sizeof(UACLStatsDumpCommandlet) == 0x000080, "Wrong size on UACLStatsDumpCommandlet");

// Class ACLPlugin.AnimCompress_ACLBase
// 0x0000 (0x0048 - 0x0048)
class UAnimCompress_ACLBase : public UAnimCompress
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimCompress_ACLBase">();
	}
	static class UAnimCompress_ACLBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_ACLBase>();
	}
};
static_assert(alignof(UAnimCompress_ACLBase) == 0x000008, "Wrong alignment on UAnimCompress_ACLBase");
static_assert(sizeof(UAnimCompress_ACLBase) == 0x000048, "Wrong size on UAnimCompress_ACLBase");

// Class ACLPlugin.AnimCompress_ACL
// 0x0020 (0x0068 - 0x0048)
class UAnimCompress_ACL final : public UAnimCompress_ACLBase
{
public:
	float                                         DefaultVirtualVertexDistance;                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeVirtualVertexDistance;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafetyFallbackThreshold;                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorThreshold;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneToIgnores;                                     // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimCompress_ACL">();
	}
	static class UAnimCompress_ACL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_ACL>();
	}
};
static_assert(alignof(UAnimCompress_ACL) == 0x000008, "Wrong alignment on UAnimCompress_ACL");
static_assert(sizeof(UAnimCompress_ACL) == 0x000068, "Wrong size on UAnimCompress_ACL");
static_assert(offsetof(UAnimCompress_ACL, DefaultVirtualVertexDistance) == 0x000048, "Member 'UAnimCompress_ACL::DefaultVirtualVertexDistance' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACL, SafeVirtualVertexDistance) == 0x00004C, "Member 'UAnimCompress_ACL::SafeVirtualVertexDistance' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACL, SafetyFallbackThreshold) == 0x000050, "Member 'UAnimCompress_ACL::SafetyFallbackThreshold' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACL, ErrorThreshold) == 0x000054, "Member 'UAnimCompress_ACL::ErrorThreshold' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACL, BoneToIgnores) == 0x000058, "Member 'UAnimCompress_ACL::BoneToIgnores' has a wrong offset!");

// Class ACLPlugin.AnimCompress_ACLCustom
// 0x0028 (0x0070 - 0x0048)
class UAnimCompress_ACLCustom final : public UAnimCompress_ACLBase
{
public:
	float                                         DefaultVirtualVertexDistance;                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeVirtualVertexDistance;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EACLRotationFormat                            RotationFormat;                                    // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EACLVectorFormat                              TranslationFormat;                                 // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EACLVectorFormat                              ScaleFormat;                                       // 0x0052(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ErrorThreshold;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantRotationThresholdAngle;                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantTranslationThreshold;                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantScaleThreshold;                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClipRangeReduceRotations : 1;                     // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClipRangeReduceTranslations : 1;                  // 0x0064(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClipRangeReduceScales : 1;                        // 0x0064(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableSegmenting : 1;                             // 0x0064(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSegmentRangeReduceRotations : 1;                  // 0x0064(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSegmentRangeReduceTranslations : 1;               // 0x0064(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSegmentRangeReduceScales : 1;                     // 0x0064(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        IdealNumKeyFramesPerSegment;                       // 0x0068(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaxNumKeyFramesPerSegment;                         // 0x006A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimCompress_ACLCustom">();
	}
	static class UAnimCompress_ACLCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_ACLCustom>();
	}
};
static_assert(alignof(UAnimCompress_ACLCustom) == 0x000008, "Wrong alignment on UAnimCompress_ACLCustom");
static_assert(sizeof(UAnimCompress_ACLCustom) == 0x000070, "Wrong size on UAnimCompress_ACLCustom");
static_assert(offsetof(UAnimCompress_ACLCustom, DefaultVirtualVertexDistance) == 0x000048, "Member 'UAnimCompress_ACLCustom::DefaultVirtualVertexDistance' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, SafeVirtualVertexDistance) == 0x00004C, "Member 'UAnimCompress_ACLCustom::SafeVirtualVertexDistance' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, RotationFormat) == 0x000050, "Member 'UAnimCompress_ACLCustom::RotationFormat' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, TranslationFormat) == 0x000051, "Member 'UAnimCompress_ACLCustom::TranslationFormat' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, ScaleFormat) == 0x000052, "Member 'UAnimCompress_ACLCustom::ScaleFormat' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, ErrorThreshold) == 0x000054, "Member 'UAnimCompress_ACLCustom::ErrorThreshold' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, ConstantRotationThresholdAngle) == 0x000058, "Member 'UAnimCompress_ACLCustom::ConstantRotationThresholdAngle' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, ConstantTranslationThreshold) == 0x00005C, "Member 'UAnimCompress_ACLCustom::ConstantTranslationThreshold' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, ConstantScaleThreshold) == 0x000060, "Member 'UAnimCompress_ACLCustom::ConstantScaleThreshold' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, IdealNumKeyFramesPerSegment) == 0x000068, "Member 'UAnimCompress_ACLCustom::IdealNumKeyFramesPerSegment' has a wrong offset!");
static_assert(offsetof(UAnimCompress_ACLCustom, MaxNumKeyFramesPerSegment) == 0x00006A, "Member 'UAnimCompress_ACLCustom::MaxNumKeyFramesPerSegment' has a wrong offset!");

}

