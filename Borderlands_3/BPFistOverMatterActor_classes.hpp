#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFistOverMatterActor

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFistOverMatterActor.BPFistOverMatterActor_C
// 0x0098 (0x0520 - 0x0488)
class ABPFistOverMatterActor_C final : public AOwnedActionAbilityActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0488(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDataTableValueHandle                  Web_Sphere_Radius;                                 // 0x0498(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableValueHandle                  Web_Duration;                                      // 0x04B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class AOakCharacter*                          InitialTarget;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UParticleSystemComponent*               SlamEmitter;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundLocation;                                    // 0x04D8(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LeftTimer;                                         // 0x04E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTimerHandle                           RightTimer;                                        // 0x04F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         SlamWaitTime;                                      // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhaseTranceActivationComboData        ActivationCombo;                                   // 0x0500(0x0018)(Edit, BlueprintVisible, Net, NoDestructor, ExposeOnSpawn)
	int32                                         NewVar_0;                                          // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPFistOverMatterActor(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void DoWebSlamRightDamage();
	void DoWebSlamLeftDamage();
	void EndWebSlam();
	void BeginWebSlam();
	void FindGroundLocationAsync();
	void ReceiveBeginPlay();
	void StartLeftHandTimer();
	void StartRightHandTimer();
	void WebSlamParticleSystemEvent(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void SpawnSlamEmitter();
	void GbxAsyncRequest_Hit_63BA0B474B62AE3C6ACDD8B4712D6DD9(const struct FHitResult& Result);
	void GbxAsyncRequest_Miss_63BA0B474B62AE3C6ACDD8B4712D6DD9(const struct FHitResult& Result);
	void UserConstructionScript();
	void GetfindGroundVectorLocations(struct FVector* Start, struct FVector* End);
	void DoSlamDamage(const struct FVector& SlamLocation_);
	void PerformFeedback();
	void OnRep_GroundLocation();

	float GetMaxTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFistOverMatterActor_C">();
	}
	static class ABPFistOverMatterActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPFistOverMatterActor_C>();
	}
};
static_assert(alignof(ABPFistOverMatterActor_C) == 0x000008, "Wrong alignment on ABPFistOverMatterActor_C");
static_assert(sizeof(ABPFistOverMatterActor_C) == 0x000520, "Wrong size on ABPFistOverMatterActor_C");
static_assert(offsetof(ABPFistOverMatterActor_C, UberGraphFrame) == 0x000488, "Member 'ABPFistOverMatterActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, DefaultSceneRoot) == 0x000490, "Member 'ABPFistOverMatterActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, Web_Sphere_Radius) == 0x000498, "Member 'ABPFistOverMatterActor_C::Web_Sphere_Radius' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, Web_Duration) == 0x0004B0, "Member 'ABPFistOverMatterActor_C::Web_Duration' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, InitialTarget) == 0x0004C8, "Member 'ABPFistOverMatterActor_C::InitialTarget' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, SlamEmitter) == 0x0004D0, "Member 'ABPFistOverMatterActor_C::SlamEmitter' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, GroundLocation) == 0x0004D8, "Member 'ABPFistOverMatterActor_C::GroundLocation' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, LeftTimer) == 0x0004E8, "Member 'ABPFistOverMatterActor_C::LeftTimer' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, RightTimer) == 0x0004F0, "Member 'ABPFistOverMatterActor_C::RightTimer' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, SlamWaitTime) == 0x0004F8, "Member 'ABPFistOverMatterActor_C::SlamWaitTime' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, ActivationCombo) == 0x000500, "Member 'ABPFistOverMatterActor_C::ActivationCombo' has a wrong offset!");
static_assert(offsetof(ABPFistOverMatterActor_C, NewVar_0) == 0x000518, "Member 'ABPFistOverMatterActor_C::NewVar_0' has a wrong offset!");

}

