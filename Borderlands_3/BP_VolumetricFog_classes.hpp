#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricFog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolumetricFog.BP_VolumetricFog_C
// 0x0070 (0x04C8 - 0x0458)
class ABP_VolumetricFog_C final : public ARenderActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0458(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FogMesh;                                           // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Color;                                         // 0x0478(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Emissive_Color;                                    // 0x0488(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Fog_Material;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density;                                           // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableNoise;                                      // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Noise_Tile_Size;                                   // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Noise_Exponent;                                    // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Noise_Factor;                                      // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Strength;                                     // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Falloff;                                           // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideWind;                                     // 0x04BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD[0x3];                                      // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Override_Material;                                 // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Set_Properties();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_VolumetricFog(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolumetricFog_C">();
	}
	static class ABP_VolumetricFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolumetricFog_C>();
	}
};
static_assert(alignof(ABP_VolumetricFog_C) == 0x000008, "Wrong alignment on ABP_VolumetricFog_C");
static_assert(sizeof(ABP_VolumetricFog_C) == 0x0004C8, "Wrong size on ABP_VolumetricFog_C");
static_assert(offsetof(ABP_VolumetricFog_C, UberGraphFrame) == 0x000458, "Member 'ABP_VolumetricFog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, FogMesh) == 0x000460, "Member 'ABP_VolumetricFog_C::FogMesh' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Arrow) == 0x000468, "Member 'ABP_VolumetricFog_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, DefaultSceneRoot) == 0x000470, "Member 'ABP_VolumetricFog_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Fog_Color) == 0x000478, "Member 'ABP_VolumetricFog_C::Fog_Color' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Emissive_Color) == 0x000488, "Member 'ABP_VolumetricFog_C::Emissive_Color' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Fog_Material) == 0x000498, "Member 'ABP_VolumetricFog_C::Fog_Material' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Density) == 0x0004A0, "Member 'ABP_VolumetricFog_C::Density' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, bEnableNoise) == 0x0004A4, "Member 'ABP_VolumetricFog_C::bEnableNoise' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Noise_Tile_Size) == 0x0004A8, "Member 'ABP_VolumetricFog_C::Noise_Tile_Size' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Noise_Exponent) == 0x0004AC, "Member 'ABP_VolumetricFog_C::Noise_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Noise_Factor) == 0x0004B0, "Member 'ABP_VolumetricFog_C::Noise_Factor' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Wind_Strength) == 0x0004B4, "Member 'ABP_VolumetricFog_C::Wind_Strength' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Falloff) == 0x0004B8, "Member 'ABP_VolumetricFog_C::Falloff' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, bOverrideWind) == 0x0004BC, "Member 'ABP_VolumetricFog_C::bOverrideWind' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricFog_C, Override_Material) == 0x0004C0, "Member 'ABP_VolumetricFog_C::Override_Material' has a wrong offset!");

}

