#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxVehicle

#include "Basic.hpp"

#include "GbxVehicle_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GbxVehicle.TurretMovementComponent.ServerSetRotationInputs
// 0x0008 (0x0008 - 0x0000)
struct TurretMovementComponent_ServerSetRotationInputs final
{
public:
	struct FVector2D                              InRotationInputs;                                  // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurretMovementComponent_ServerSetRotationInputs) == 0x000004, "Wrong alignment on TurretMovementComponent_ServerSetRotationInputs");
static_assert(sizeof(TurretMovementComponent_ServerSetRotationInputs) == 0x000008, "Wrong size on TurretMovementComponent_ServerSetRotationInputs");
static_assert(offsetof(TurretMovementComponent_ServerSetRotationInputs, InRotationInputs) == 0x000000, "Member 'TurretMovementComponent_ServerSetRotationInputs::InRotationInputs' has a wrong offset!");

// Function GbxVehicle.TurretMovementComponent.SetRotationInputs
// 0x0008 (0x0008 - 0x0000)
struct TurretMovementComponent_SetRotationInputs final
{
public:
	float                                         XValue;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YValue;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurretMovementComponent_SetRotationInputs) == 0x000004, "Wrong alignment on TurretMovementComponent_SetRotationInputs");
static_assert(sizeof(TurretMovementComponent_SetRotationInputs) == 0x000008, "Wrong size on TurretMovementComponent_SetRotationInputs");
static_assert(offsetof(TurretMovementComponent_SetRotationInputs, XValue) == 0x000000, "Member 'TurretMovementComponent_SetRotationInputs::XValue' has a wrong offset!");
static_assert(offsetof(TurretMovementComponent_SetRotationInputs, YValue) == 0x000004, "Member 'TurretMovementComponent_SetRotationInputs::YValue' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.OnRep_IsBoosting
// 0x0001 (0x0001 - 0x0000)
struct VehicleBoostComponent_OnRep_IsBoosting final
{
public:
	bool                                          bWasBoosting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_OnRep_IsBoosting) == 0x000001, "Wrong alignment on VehicleBoostComponent_OnRep_IsBoosting");
static_assert(sizeof(VehicleBoostComponent_OnRep_IsBoosting) == 0x000001, "Wrong size on VehicleBoostComponent_OnRep_IsBoosting");
static_assert(offsetof(VehicleBoostComponent_OnRep_IsBoosting, bWasBoosting) == 0x000000, "Member 'VehicleBoostComponent_OnRep_IsBoosting::bWasBoosting' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.RegisterBoostRegenerateEvent
// 0x0018 (0x0018 - 0x0000)
struct VehicleBoostComponent_RegisterBoostRegenerateEvent final
{
public:
	float                                         BoostTarget;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             BoostValueReachedDelegate;                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_RegisterBoostRegenerateEvent) == 0x000004, "Wrong alignment on VehicleBoostComponent_RegisterBoostRegenerateEvent");
static_assert(sizeof(VehicleBoostComponent_RegisterBoostRegenerateEvent) == 0x000018, "Wrong size on VehicleBoostComponent_RegisterBoostRegenerateEvent");
static_assert(offsetof(VehicleBoostComponent_RegisterBoostRegenerateEvent, BoostTarget) == 0x000000, "Member 'VehicleBoostComponent_RegisterBoostRegenerateEvent::BoostTarget' has a wrong offset!");
static_assert(offsetof(VehicleBoostComponent_RegisterBoostRegenerateEvent, BoostValueReachedDelegate) == 0x000008, "Member 'VehicleBoostComponent_RegisterBoostRegenerateEvent::BoostValueReachedDelegate' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.StopBoost
// 0x0001 (0x0001 - 0x0000)
struct VehicleBoostComponent_StopBoost final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_StopBoost) == 0x000001, "Wrong alignment on VehicleBoostComponent_StopBoost");
static_assert(sizeof(VehicleBoostComponent_StopBoost) == 0x000001, "Wrong size on VehicleBoostComponent_StopBoost");
static_assert(offsetof(VehicleBoostComponent_StopBoost, bForce) == 0x000000, "Member 'VehicleBoostComponent_StopBoost::bForce' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.GetBoostDirection
// 0x000C (0x000C - 0x0000)
struct VehicleBoostComponent_GetBoostDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_GetBoostDirection) == 0x000004, "Wrong alignment on VehicleBoostComponent_GetBoostDirection");
static_assert(sizeof(VehicleBoostComponent_GetBoostDirection) == 0x00000C, "Wrong size on VehicleBoostComponent_GetBoostDirection");
static_assert(offsetof(VehicleBoostComponent_GetBoostDirection, ReturnValue) == 0x000000, "Member 'VehicleBoostComponent_GetBoostDirection::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.GetBoostEnabled
// 0x0001 (0x0001 - 0x0000)
struct VehicleBoostComponent_GetBoostEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_GetBoostEnabled) == 0x000001, "Wrong alignment on VehicleBoostComponent_GetBoostEnabled");
static_assert(sizeof(VehicleBoostComponent_GetBoostEnabled) == 0x000001, "Wrong size on VehicleBoostComponent_GetBoostEnabled");
static_assert(offsetof(VehicleBoostComponent_GetBoostEnabled, ReturnValue) == 0x000000, "Member 'VehicleBoostComponent_GetBoostEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.GetCurrentBoostChargesCount
// 0x0004 (0x0004 - 0x0000)
struct VehicleBoostComponent_GetCurrentBoostChargesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_GetCurrentBoostChargesCount) == 0x000004, "Wrong alignment on VehicleBoostComponent_GetCurrentBoostChargesCount");
static_assert(sizeof(VehicleBoostComponent_GetCurrentBoostChargesCount) == 0x000004, "Wrong size on VehicleBoostComponent_GetCurrentBoostChargesCount");
static_assert(offsetof(VehicleBoostComponent_GetCurrentBoostChargesCount, ReturnValue) == 0x000000, "Member 'VehicleBoostComponent_GetCurrentBoostChargesCount::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.GetCurrentBoostPoolValue
// 0x0004 (0x0004 - 0x0000)
struct VehicleBoostComponent_GetCurrentBoostPoolValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_GetCurrentBoostPoolValue) == 0x000004, "Wrong alignment on VehicleBoostComponent_GetCurrentBoostPoolValue");
static_assert(sizeof(VehicleBoostComponent_GetCurrentBoostPoolValue) == 0x000004, "Wrong size on VehicleBoostComponent_GetCurrentBoostPoolValue");
static_assert(offsetof(VehicleBoostComponent_GetCurrentBoostPoolValue, ReturnValue) == 0x000000, "Member 'VehicleBoostComponent_GetCurrentBoostPoolValue::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.GetMaxBoostPoolValue
// 0x0004 (0x0004 - 0x0000)
struct VehicleBoostComponent_GetMaxBoostPoolValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_GetMaxBoostPoolValue) == 0x000004, "Wrong alignment on VehicleBoostComponent_GetMaxBoostPoolValue");
static_assert(sizeof(VehicleBoostComponent_GetMaxBoostPoolValue) == 0x000004, "Wrong size on VehicleBoostComponent_GetMaxBoostPoolValue");
static_assert(offsetof(VehicleBoostComponent_GetMaxBoostPoolValue, ReturnValue) == 0x000000, "Member 'VehicleBoostComponent_GetMaxBoostPoolValue::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleBoostComponent.GetRelativeBoostSpeed
// 0x0004 (0x0004 - 0x0000)
struct VehicleBoostComponent_GetRelativeBoostSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBoostComponent_GetRelativeBoostSpeed) == 0x000004, "Wrong alignment on VehicleBoostComponent_GetRelativeBoostSpeed");
static_assert(sizeof(VehicleBoostComponent_GetRelativeBoostSpeed) == 0x000004, "Wrong size on VehicleBoostComponent_GetRelativeBoostSpeed");
static_assert(offsetof(VehicleBoostComponent_GetRelativeBoostSpeed, ReturnValue) == 0x000000, "Member 'VehicleBoostComponent_GetRelativeBoostSpeed::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.AddVehiclePart
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_AddVehiclePart final
{
public:
	class UVehiclePartData*                       CharacterPart;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_AddVehiclePart) == 0x000008, "Wrong alignment on Vehicle_AddVehiclePart");
static_assert(sizeof(Vehicle_AddVehiclePart) == 0x000008, "Wrong size on Vehicle_AddVehiclePart");
static_assert(offsetof(Vehicle_AddVehiclePart, CharacterPart) == 0x000000, "Member 'Vehicle_AddVehiclePart::CharacterPart' has a wrong offset!");

// Function GbxVehicle.Vehicle.RemoveVehiclePart
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_RemoveVehiclePart final
{
public:
	class UVehiclePartData*                       CharacterPart;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_RemoveVehiclePart) == 0x000008, "Wrong alignment on Vehicle_RemoveVehiclePart");
static_assert(sizeof(Vehicle_RemoveVehiclePart) == 0x000008, "Wrong size on Vehicle_RemoveVehiclePart");
static_assert(offsetof(Vehicle_RemoveVehiclePart, CharacterPart) == 0x000000, "Member 'Vehicle_RemoveVehiclePart::CharacterPart' has a wrong offset!");

// Function GbxVehicle.Vehicle.GetEquipedParts
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_GetEquipedParts final
{
public:
	TArray<class UVehiclePartData*>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_GetEquipedParts) == 0x000008, "Wrong alignment on Vehicle_GetEquipedParts");
static_assert(sizeof(Vehicle_GetEquipedParts) == 0x000010, "Wrong size on Vehicle_GetEquipedParts");
static_assert(offsetof(Vehicle_GetEquipedParts, ReturnValue) == 0x000000, "Member 'Vehicle_GetEquipedParts::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.GetNumWheelsInAir
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_GetNumWheelsInAir final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_GetNumWheelsInAir) == 0x000004, "Wrong alignment on Vehicle_GetNumWheelsInAir");
static_assert(sizeof(Vehicle_GetNumWheelsInAir) == 0x000004, "Wrong size on Vehicle_GetNumWheelsInAir");
static_assert(offsetof(Vehicle_GetNumWheelsInAir, ReturnValue) == 0x000000, "Member 'Vehicle_GetNumWheelsInAir::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.GetTargetableComponent
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_GetTargetableComponent final
{
public:
	class UTargetableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_GetTargetableComponent) == 0x000008, "Wrong alignment on Vehicle_GetTargetableComponent");
static_assert(sizeof(Vehicle_GetTargetableComponent) == 0x000008, "Wrong size on Vehicle_GetTargetableComponent");
static_assert(offsetof(Vehicle_GetTargetableComponent, ReturnValue) == 0x000000, "Member 'Vehicle_GetTargetableComponent::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.GetTargetingComponent
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_GetTargetingComponent final
{
public:
	class UTargetingComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_GetTargetingComponent) == 0x000008, "Wrong alignment on Vehicle_GetTargetingComponent");
static_assert(sizeof(Vehicle_GetTargetingComponent) == 0x000008, "Wrong size on Vehicle_GetTargetingComponent");
static_assert(offsetof(Vehicle_GetTargetingComponent, ReturnValue) == 0x000000, "Member 'Vehicle_GetTargetingComponent::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.GetTeam
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_GetTeam final
{
public:
	class UTeam*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_GetTeam) == 0x000008, "Wrong alignment on Vehicle_GetTeam");
static_assert(sizeof(Vehicle_GetTeam) == 0x000008, "Wrong size on Vehicle_GetTeam");
static_assert(offsetof(Vehicle_GetTeam, ReturnValue) == 0x000000, "Member 'Vehicle_GetTeam::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.GetTeamComponent
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_GetTeamComponent final
{
public:
	class UTeamComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_GetTeamComponent) == 0x000008, "Wrong alignment on Vehicle_GetTeamComponent");
static_assert(sizeof(Vehicle_GetTeamComponent) == 0x000008, "Wrong size on Vehicle_GetTeamComponent");
static_assert(offsetof(Vehicle_GetTeamComponent, ReturnValue) == 0x000000, "Member 'Vehicle_GetTeamComponent::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_IsInAir) == 0x000001, "Wrong alignment on Vehicle_IsInAir");
static_assert(sizeof(Vehicle_IsInAir) == 0x000001, "Wrong size on Vehicle_IsInAir");
static_assert(offsetof(Vehicle_IsInAir, ReturnValue) == 0x000000, "Member 'Vehicle_IsInAir::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.IsPowerSliding
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_IsPowerSliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_IsPowerSliding) == 0x000001, "Wrong alignment on Vehicle_IsPowerSliding");
static_assert(sizeof(Vehicle_IsPowerSliding) == 0x000001, "Wrong size on Vehicle_IsPowerSliding");
static_assert(offsetof(Vehicle_IsPowerSliding, ReturnValue) == 0x000000, "Member 'Vehicle_IsPowerSliding::ReturnValue' has a wrong offset!");

// Function GbxVehicle.Vehicle.SetTeam
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_SetTeam final
{
public:
	class UTeam*                                  Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Vehicle_SetTeam) == 0x000008, "Wrong alignment on Vehicle_SetTeam");
static_assert(sizeof(Vehicle_SetTeam) == 0x000008, "Wrong size on Vehicle_SetTeam");
static_assert(offsetof(Vehicle_SetTeam, Team) == 0x000000, "Member 'Vehicle_SetTeam::Team' has a wrong offset!");

// Function GbxVehicle.VehicleDigiThrustComponent.SetTeleportDirection
// 0x000C (0x000C - 0x0000)
struct VehicleDigiThrustComponent_SetTeleportDirection final
{
public:
	struct FVector                                WantedDirection;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleDigiThrustComponent_SetTeleportDirection) == 0x000004, "Wrong alignment on VehicleDigiThrustComponent_SetTeleportDirection");
static_assert(sizeof(VehicleDigiThrustComponent_SetTeleportDirection) == 0x00000C, "Wrong size on VehicleDigiThrustComponent_SetTeleportDirection");
static_assert(offsetof(VehicleDigiThrustComponent_SetTeleportDirection, WantedDirection) == 0x000000, "Member 'VehicleDigiThrustComponent_SetTeleportDirection::WantedDirection' has a wrong offset!");

// Function GbxVehicle.VehicleDigiThrustComponent.GetCurrentBoostPoolValue
// 0x0004 (0x0004 - 0x0000)
struct VehicleDigiThrustComponent_GetCurrentBoostPoolValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleDigiThrustComponent_GetCurrentBoostPoolValue) == 0x000004, "Wrong alignment on VehicleDigiThrustComponent_GetCurrentBoostPoolValue");
static_assert(sizeof(VehicleDigiThrustComponent_GetCurrentBoostPoolValue) == 0x000004, "Wrong size on VehicleDigiThrustComponent_GetCurrentBoostPoolValue");
static_assert(offsetof(VehicleDigiThrustComponent_GetCurrentBoostPoolValue, ReturnValue) == 0x000000, "Member 'VehicleDigiThrustComponent_GetCurrentBoostPoolValue::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleDigiThrustComponent.GetMaxBoostPoolValue
// 0x0004 (0x0004 - 0x0000)
struct VehicleDigiThrustComponent_GetMaxBoostPoolValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleDigiThrustComponent_GetMaxBoostPoolValue) == 0x000004, "Wrong alignment on VehicleDigiThrustComponent_GetMaxBoostPoolValue");
static_assert(sizeof(VehicleDigiThrustComponent_GetMaxBoostPoolValue) == 0x000004, "Wrong size on VehicleDigiThrustComponent_GetMaxBoostPoolValue");
static_assert(offsetof(VehicleDigiThrustComponent_GetMaxBoostPoolValue, ReturnValue) == 0x000000, "Member 'VehicleDigiThrustComponent_GetMaxBoostPoolValue::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleDigiThrustComponent.IsTeleporting
// 0x0001 (0x0001 - 0x0000)
struct VehicleDigiThrustComponent_IsTeleporting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleDigiThrustComponent_IsTeleporting) == 0x000001, "Wrong alignment on VehicleDigiThrustComponent_IsTeleporting");
static_assert(sizeof(VehicleDigiThrustComponent_IsTeleporting) == 0x000001, "Wrong size on VehicleDigiThrustComponent_IsTeleporting");
static_assert(offsetof(VehicleDigiThrustComponent_IsTeleporting, ReturnValue) == 0x000000, "Member 'VehicleDigiThrustComponent_IsTeleporting::ReturnValue' has a wrong offset!");

// DelegateFunction GbxVehicle.VehicleHitchAttachPtComponent.HitchAttachAction__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature final
{
public:
	class AVehicle*                               FromVehicle;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature) == 0x000008, "Wrong alignment on VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature");
static_assert(sizeof(VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature) == 0x000008, "Wrong size on VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature");
static_assert(offsetof(VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature, FromVehicle) == 0x000000, "Member 'VehicleHitchAttachPtComponent_HitchAttachAction__DelegateSignature::FromVehicle' has a wrong offset!");

// Function GbxVehicle.VehicleHitchAttachPtComponent.IsAttached
// 0x0001 (0x0001 - 0x0000)
struct VehicleHitchAttachPtComponent_IsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHitchAttachPtComponent_IsAttached) == 0x000001, "Wrong alignment on VehicleHitchAttachPtComponent_IsAttached");
static_assert(sizeof(VehicleHitchAttachPtComponent_IsAttached) == 0x000001, "Wrong size on VehicleHitchAttachPtComponent_IsAttached");
static_assert(offsetof(VehicleHitchAttachPtComponent_IsAttached, ReturnValue) == 0x000000, "Member 'VehicleHitchAttachPtComponent_IsAttached::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleHitchComponent.AttachToHitch
// 0x0008 (0x0008 - 0x0000)
struct VehicleHitchComponent_AttachToHitch final
{
public:
	class UVehicleHitchAttachPtComponent*         AttachPtToAttach;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHitchComponent_AttachToHitch) == 0x000008, "Wrong alignment on VehicleHitchComponent_AttachToHitch");
static_assert(sizeof(VehicleHitchComponent_AttachToHitch) == 0x000008, "Wrong size on VehicleHitchComponent_AttachToHitch");
static_assert(offsetof(VehicleHitchComponent_AttachToHitch, AttachPtToAttach) == 0x000000, "Member 'VehicleHitchComponent_AttachToHitch::AttachPtToAttach' has a wrong offset!");

// DelegateFunction GbxVehicle.VehicleHitchComponent.HitchAttachAction__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct VehicleHitchComponent_HitchAttachAction__DelegateSignature final
{
public:
	class AVehicle*                               FromVehicle;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHitchComponent_HitchAttachAction__DelegateSignature) == 0x000008, "Wrong alignment on VehicleHitchComponent_HitchAttachAction__DelegateSignature");
static_assert(sizeof(VehicleHitchComponent_HitchAttachAction__DelegateSignature) == 0x000008, "Wrong size on VehicleHitchComponent_HitchAttachAction__DelegateSignature");
static_assert(offsetof(VehicleHitchComponent_HitchAttachAction__DelegateSignature, FromVehicle) == 0x000000, "Member 'VehicleHitchComponent_HitchAttachAction__DelegateSignature::FromVehicle' has a wrong offset!");

// Function GbxVehicle.VehicleHitchComponent.TeleportTrailerAndAttachToHitch
// 0x0008 (0x0008 - 0x0000)
struct VehicleHitchComponent_TeleportTrailerAndAttachToHitch final
{
public:
	class AActor*                                 TrailerToAttach;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHitchComponent_TeleportTrailerAndAttachToHitch) == 0x000008, "Wrong alignment on VehicleHitchComponent_TeleportTrailerAndAttachToHitch");
static_assert(sizeof(VehicleHitchComponent_TeleportTrailerAndAttachToHitch) == 0x000008, "Wrong size on VehicleHitchComponent_TeleportTrailerAndAttachToHitch");
static_assert(offsetof(VehicleHitchComponent_TeleportTrailerAndAttachToHitch, TrailerToAttach) == 0x000000, "Member 'VehicleHitchComponent_TeleportTrailerAndAttachToHitch::TrailerToAttach' has a wrong offset!");

// Function GbxVehicle.VehicleHoverComponent.EnableHover
// 0x0001 (0x0001 - 0x0000)
struct VehicleHoverComponent_EnableHover final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHoverComponent_EnableHover) == 0x000001, "Wrong alignment on VehicleHoverComponent_EnableHover");
static_assert(sizeof(VehicleHoverComponent_EnableHover) == 0x000001, "Wrong size on VehicleHoverComponent_EnableHover");
static_assert(offsetof(VehicleHoverComponent_EnableHover, bEnable) == 0x000000, "Member 'VehicleHoverComponent_EnableHover::bEnable' has a wrong offset!");

// Function GbxVehicle.VehicleHoverComponent.ServerUpdateState
// 0x0018 (0x0018 - 0x0000)
struct VehicleHoverComponent_ServerUpdateState final
{
public:
	bool                                          InbIsEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InStrafeInput;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InForwardInput;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InTargetRotation;                                  // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHoverComponent_ServerUpdateState) == 0x000004, "Wrong alignment on VehicleHoverComponent_ServerUpdateState");
static_assert(sizeof(VehicleHoverComponent_ServerUpdateState) == 0x000018, "Wrong size on VehicleHoverComponent_ServerUpdateState");
static_assert(offsetof(VehicleHoverComponent_ServerUpdateState, InbIsEnabled) == 0x000000, "Member 'VehicleHoverComponent_ServerUpdateState::InbIsEnabled' has a wrong offset!");
static_assert(offsetof(VehicleHoverComponent_ServerUpdateState, InStrafeInput) == 0x000004, "Member 'VehicleHoverComponent_ServerUpdateState::InStrafeInput' has a wrong offset!");
static_assert(offsetof(VehicleHoverComponent_ServerUpdateState, InForwardInput) == 0x000008, "Member 'VehicleHoverComponent_ServerUpdateState::InForwardInput' has a wrong offset!");
static_assert(offsetof(VehicleHoverComponent_ServerUpdateState, InTargetRotation) == 0x00000C, "Member 'VehicleHoverComponent_ServerUpdateState::InTargetRotation' has a wrong offset!");

// Function GbxVehicle.VehicleHoverComponent.IsHoverEnabled
// 0x0001 (0x0001 - 0x0000)
struct VehicleHoverComponent_IsHoverEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleHoverComponent_IsHoverEnabled) == 0x000001, "Wrong alignment on VehicleHoverComponent_IsHoverEnabled");
static_assert(sizeof(VehicleHoverComponent_IsHoverEnabled) == 0x000001, "Wrong size on VehicleHoverComponent_IsHoverEnabled");
static_assert(offsetof(VehicleHoverComponent_IsHoverEnabled, ReturnValue) == 0x000000, "Member 'VehicleHoverComponent_IsHoverEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehicleMovementInterface.GetDirectionBasedThrottleAndSteer
// 0x0010 (0x0010 - 0x0000)
struct VehicleMovementInterface_GetDirectionBasedThrottleAndSteer final
{
public:
	struct FVector2D                              StickInput;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleMovementInterface_GetDirectionBasedThrottleAndSteer) == 0x000004, "Wrong alignment on VehicleMovementInterface_GetDirectionBasedThrottleAndSteer");
static_assert(sizeof(VehicleMovementInterface_GetDirectionBasedThrottleAndSteer) == 0x000010, "Wrong size on VehicleMovementInterface_GetDirectionBasedThrottleAndSteer");
static_assert(offsetof(VehicleMovementInterface_GetDirectionBasedThrottleAndSteer, StickInput) == 0x000000, "Member 'VehicleMovementInterface_GetDirectionBasedThrottleAndSteer::StickInput' has a wrong offset!");
static_assert(offsetof(VehicleMovementInterface_GetDirectionBasedThrottleAndSteer, ReturnValue) == 0x000008, "Member 'VehicleMovementInterface_GetDirectionBasedThrottleAndSteer::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehiclePartActor.WeldActorToVehicle
// 0x0008 (0x0008 - 0x0000)
struct VehiclePartActor_WeldActorToVehicle final
{
public:
	class AActor*                                 SpawnedPart;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePartActor_WeldActorToVehicle) == 0x000008, "Wrong alignment on VehiclePartActor_WeldActorToVehicle");
static_assert(sizeof(VehiclePartActor_WeldActorToVehicle) == 0x000008, "Wrong size on VehiclePartActor_WeldActorToVehicle");
static_assert(offsetof(VehiclePartActor_WeldActorToVehicle, SpawnedPart) == 0x000000, "Member 'VehiclePartActor_WeldActorToVehicle::SpawnedPart' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.GetPowerSlideEnabled
// 0x0001 (0x0001 - 0x0000)
struct VehiclePowerSlideComponent_GetPowerSlideEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_GetPowerSlideEnabled) == 0x000001, "Wrong alignment on VehiclePowerSlideComponent_GetPowerSlideEnabled");
static_assert(sizeof(VehiclePowerSlideComponent_GetPowerSlideEnabled) == 0x000001, "Wrong size on VehiclePowerSlideComponent_GetPowerSlideEnabled");
static_assert(offsetof(VehiclePowerSlideComponent_GetPowerSlideEnabled, ReturnValue) == 0x000000, "Member 'VehiclePowerSlideComponent_GetPowerSlideEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.IsPowerSlidePaused
// 0x0001 (0x0001 - 0x0000)
struct VehiclePowerSlideComponent_IsPowerSlidePaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_IsPowerSlidePaused) == 0x000001, "Wrong alignment on VehiclePowerSlideComponent_IsPowerSlidePaused");
static_assert(sizeof(VehiclePowerSlideComponent_IsPowerSlidePaused) == 0x000001, "Wrong size on VehiclePowerSlideComponent_IsPowerSlidePaused");
static_assert(offsetof(VehiclePowerSlideComponent_IsPowerSlidePaused, ReturnValue) == 0x000000, "Member 'VehiclePowerSlideComponent_IsPowerSlidePaused::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.OnRep_IsPowerSliding
// 0x0001 (0x0001 - 0x0000)
struct VehiclePowerSlideComponent_OnRep_IsPowerSliding final
{
public:
	bool                                          bWasPowerSliding;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_OnRep_IsPowerSliding) == 0x000001, "Wrong alignment on VehiclePowerSlideComponent_OnRep_IsPowerSliding");
static_assert(sizeof(VehiclePowerSlideComponent_OnRep_IsPowerSliding) == 0x000001, "Wrong size on VehiclePowerSlideComponent_OnRep_IsPowerSliding");
static_assert(offsetof(VehiclePowerSlideComponent_OnRep_IsPowerSliding, bWasPowerSliding) == 0x000000, "Member 'VehiclePowerSlideComponent_OnRep_IsPowerSliding::bWasPowerSliding' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.PausePowerSlide
// 0x0008 (0x0008 - 0x0000)
struct VehiclePowerSlideComponent_PausePowerSlide final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_PausePowerSlide) == 0x000004, "Wrong alignment on VehiclePowerSlideComponent_PausePowerSlide");
static_assert(sizeof(VehiclePowerSlideComponent_PausePowerSlide) == 0x000008, "Wrong size on VehiclePowerSlideComponent_PausePowerSlide");
static_assert(offsetof(VehiclePowerSlideComponent_PausePowerSlide, Reason) == 0x000000, "Member 'VehiclePowerSlideComponent_PausePowerSlide::Reason' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.ResumePowerSlide
// 0x0008 (0x0008 - 0x0000)
struct VehiclePowerSlideComponent_ResumePowerSlide final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_ResumePowerSlide) == 0x000004, "Wrong alignment on VehiclePowerSlideComponent_ResumePowerSlide");
static_assert(sizeof(VehiclePowerSlideComponent_ResumePowerSlide) == 0x000008, "Wrong size on VehiclePowerSlideComponent_ResumePowerSlide");
static_assert(offsetof(VehiclePowerSlideComponent_ResumePowerSlide, Reason) == 0x000000, "Member 'VehiclePowerSlideComponent_ResumePowerSlide::Reason' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.SetPowerSlideEnabled
// 0x0001 (0x0001 - 0x0000)
struct VehiclePowerSlideComponent_SetPowerSlideEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_SetPowerSlideEnabled) == 0x000001, "Wrong alignment on VehiclePowerSlideComponent_SetPowerSlideEnabled");
static_assert(sizeof(VehiclePowerSlideComponent_SetPowerSlideEnabled) == 0x000001, "Wrong size on VehiclePowerSlideComponent_SetPowerSlideEnabled");
static_assert(offsetof(VehiclePowerSlideComponent_SetPowerSlideEnabled, bEnable) == 0x000000, "Member 'VehiclePowerSlideComponent_SetPowerSlideEnabled::bEnable' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.GetCurrentBoostRatio
// 0x0004 (0x0004 - 0x0000)
struct VehiclePowerSlideComponent_GetCurrentBoostRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_GetCurrentBoostRatio) == 0x000004, "Wrong alignment on VehiclePowerSlideComponent_GetCurrentBoostRatio");
static_assert(sizeof(VehiclePowerSlideComponent_GetCurrentBoostRatio) == 0x000004, "Wrong size on VehiclePowerSlideComponent_GetCurrentBoostRatio");
static_assert(offsetof(VehiclePowerSlideComponent_GetCurrentBoostRatio, ReturnValue) == 0x000000, "Member 'VehiclePowerSlideComponent_GetCurrentBoostRatio::ReturnValue' has a wrong offset!");

// Function GbxVehicle.VehiclePowerSlideComponent.IsInPowerSlideBoost
// 0x0001 (0x0001 - 0x0000)
struct VehiclePowerSlideComponent_IsInPowerSlideBoost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehiclePowerSlideComponent_IsInPowerSlideBoost) == 0x000001, "Wrong alignment on VehiclePowerSlideComponent_IsInPowerSlideBoost");
static_assert(sizeof(VehiclePowerSlideComponent_IsInPowerSlideBoost) == 0x000001, "Wrong size on VehiclePowerSlideComponent_IsInPowerSlideBoost");
static_assert(offsetof(VehiclePowerSlideComponent_IsInPowerSlideBoost, ReturnValue) == 0x000000, "Member 'VehiclePowerSlideComponent_IsInPowerSlideBoost::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.ApplyAngularVelocityInfluence
// 0x0014 (0x0014 - 0x0000)
struct WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInfluence;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence");
static_assert(sizeof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence) == 0x000014, "Wrong size on WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence");
static_assert(offsetof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence, DeltaTime) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence::DeltaTime' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence, MaxInfluence) == 0x000004, "Member 'WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence::MaxInfluence' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence, Pitch) == 0x000008, "Member 'WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence::Pitch' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence, Roll) == 0x00000C, "Member 'WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence::Roll' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence, Yaw) == 0x000010, "Member 'WheeledVehicleMovementComponentNW_ApplyAngularVelocityInfluence::Yaw' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetAerialRotationalDampingEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetAerialRotationalDampingEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetCameraRelativeThrottleAndSteer
// 0x0020 (0x0020 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer final
{
public:
	struct FVector2D                              StickInput;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WantedDirAngle;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleCameraRelativeDrivingMode             Mode;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AngleToSteeringCurve;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer) == 0x000008, "Wrong alignment on WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer) == 0x000020, "Wrong size on WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer, StickInput) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer::StickInput' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer, WantedDirAngle) == 0x000008, "Member 'WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer::WantedDirAngle' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer, Mode) == 0x00000C, "Member 'WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer::Mode' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer, AngleToSteeringCurve) == 0x000010, "Member 'WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer::AngleToSteeringCurve' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer, ReturnValue) == 0x000018, "Member 'WheeledVehicleMovementComponentNW_GetCameraRelativeThrottleAndSteer::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetCoronalBalancingEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetCoronalBalancingEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetDirectionBasedThrottleAndSteer
// 0x0010 (0x0010 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer final
{
public:
	struct FVector2D                              StickInput;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer) == 0x000010, "Wrong size on WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer, StickInput) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer::StickInput' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer, ReturnValue) == 0x000008, "Member 'WheeledVehicleMovementComponentNW_GetDirectionBasedThrottleAndSteer::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetLateralToLongitudinalVelocityShiftEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetLateralToLongitudinalVelocityShiftEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetOversteerFixupEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetOversteerFixupEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetSagittalBalancingEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetSagittalBalancingEnabled::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetAerialRotationalDampingEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled, bEnable) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetAerialRotationalDampingEnabled::bEnable' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetCoronalBalancingEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled, bEnable) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetCoronalBalancingEnabled::bEnable' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetCustomGravityModifier
// 0x0004 (0x0004 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetCustomGravityModifier final
{
public:
	float                                         NewModifier;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetCustomGravityModifier) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_SetCustomGravityModifier");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetCustomGravityModifier) == 0x000004, "Wrong size on WheeledVehicleMovementComponentNW_SetCustomGravityModifier");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetCustomGravityModifier, NewModifier) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetCustomGravityModifier::NewModifier' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetLateralToLongitudinalVelocityShiftEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled, bEnable) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetLateralToLongitudinalVelocityShiftEnabled::bEnable' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetNoDriveBrakeTorque
// 0x0008 (0x0008 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque final
{
public:
	float                                         BrakeTorque;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque) == 0x000008, "Wrong size on WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque, BrakeTorque) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque::BrakeTorque' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque, WheelIndex) == 0x000004, "Member 'WheeledVehicleMovementComponentNW_SetNoDriveBrakeTorque::WheelIndex' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetNoDriveDriveTorque
// 0x0008 (0x0008 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque final
{
public:
	float                                         DriveTorque;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque) == 0x000008, "Wrong size on WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque, DriveTorque) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque::DriveTorque' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque, WheelIndex) == 0x000004, "Member 'WheeledVehicleMovementComponentNW_SetNoDriveDriveTorque::WheelIndex' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetNoDriveSteerAngle
// 0x0008 (0x0008 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle final
{
public:
	float                                         SteerAngle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle) == 0x000008, "Wrong size on WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle, SteerAngle) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle::SteerAngle' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle, WheelIndex) == 0x000004, "Member 'WheeledVehicleMovementComponentNW_SetNoDriveSteerAngle::WheelIndex' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetOversteerFixupEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled, bEnable) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetOversteerFixupEnabled::bEnable' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetSagittalBalancingEnabled
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled, bEnable) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetSagittalBalancingEnabled::bEnable' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.SetSteerAngle
// 0x0008 (0x0008 - 0x0000)
struct WheeledVehicleMovementComponentNW_SetSteerAngle final
{
public:
	float                                         SteerAngle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_SetSteerAngle) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_SetSteerAngle");
static_assert(sizeof(WheeledVehicleMovementComponentNW_SetSteerAngle) == 0x000008, "Wrong size on WheeledVehicleMovementComponentNW_SetSteerAngle");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetSteerAngle, SteerAngle) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_SetSteerAngle::SteerAngle' has a wrong offset!");
static_assert(offsetof(WheeledVehicleMovementComponentNW_SetSteerAngle, WheelIndex) == 0x000004, "Member 'WheeledVehicleMovementComponentNW_SetSteerAngle::WheelIndex' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetCustomGravityModifier
// 0x0004 (0x0004 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetCustomGravityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetCustomGravityModifier) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_GetCustomGravityModifier");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetCustomGravityModifier) == 0x000004, "Wrong size on WheeledVehicleMovementComponentNW_GetCustomGravityModifier");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetCustomGravityModifier, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetCustomGravityModifier::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.GetNumWheelsInAir
// 0x0004 (0x0004 - 0x0000)
struct WheeledVehicleMovementComponentNW_GetNumWheelsInAir final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_GetNumWheelsInAir) == 0x000004, "Wrong alignment on WheeledVehicleMovementComponentNW_GetNumWheelsInAir");
static_assert(sizeof(WheeledVehicleMovementComponentNW_GetNumWheelsInAir) == 0x000004, "Wrong size on WheeledVehicleMovementComponentNW_GetNumWheelsInAir");
static_assert(offsetof(WheeledVehicleMovementComponentNW_GetNumWheelsInAir, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_GetNumWheelsInAir::ReturnValue' has a wrong offset!");

// Function GbxVehicle.WheeledVehicleMovementComponentNW.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct WheeledVehicleMovementComponentNW_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheeledVehicleMovementComponentNW_IsInAir) == 0x000001, "Wrong alignment on WheeledVehicleMovementComponentNW_IsInAir");
static_assert(sizeof(WheeledVehicleMovementComponentNW_IsInAir) == 0x000001, "Wrong size on WheeledVehicleMovementComponentNW_IsInAir");
static_assert(offsetof(WheeledVehicleMovementComponentNW_IsInAir, ReturnValue) == 0x000000, "Member 'WheeledVehicleMovementComponentNW_IsInAir::ReturnValue' has a wrong offset!");

}

