#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_Claptrap_Girlfriend

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ClaptrapGFState_structs.hpp"
#include "BPChar_NonPlayerCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPChar_Claptrap_Girlfriend.BPChar_Claptrap_Girlfriend_C
// 0x00B0 (0x2640 - 0x2590)
class ABPChar_Claptrap_Girlfriend_C final : public ABPChar_NonPlayerCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BPChar_Claptrap_Girlfriend_C;       // 0x2590(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Hair;                                              // 0x2598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AntennaChoice;                                     // 0x25A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, EClaptrapGFState>         ChallengeToPartMap;                                // 0x25A8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         MovementStateTick;                                 // 0x25F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25FC[0x4];                                     // 0x25FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         CompletedChallengeArray;                           // 0x2600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UGestaltPartData_Mesh*>          AntennaChoices;                                    // 0x2610(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance)
	TArray<class UGestaltPartData_Mesh*>          GestaltMeshes;                                     // 0x2620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         AntennaStateLocalInt;                              // 0x2630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialGet;                                       // 0x2634(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void OnRep_MaterialGet();
	void CheckforHandState(EClaptrapGFState EnumState);
	void UpdateMovementStateTick(class UClass* Challenge);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BPChar_Claptrap_Girlfriend(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void UpdateGFState(const TArray<class UClass*>& Challenge_Array);
	void EndState();
	void TestGestalt();
	void ExecuteUbergraph_BPChar_Claptrap_Girlfriend(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_Claptrap_Girlfriend_C">();
	}
	static class ABPChar_Claptrap_Girlfriend_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_Claptrap_Girlfriend_C>();
	}
};
static_assert(alignof(ABPChar_Claptrap_Girlfriend_C) == 0x000010, "Wrong alignment on ABPChar_Claptrap_Girlfriend_C");
static_assert(sizeof(ABPChar_Claptrap_Girlfriend_C) == 0x002640, "Wrong size on ABPChar_Claptrap_Girlfriend_C");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, UberGraphFrame_BPChar_Claptrap_Girlfriend_C) == 0x002590, "Member 'ABPChar_Claptrap_Girlfriend_C::UberGraphFrame_BPChar_Claptrap_Girlfriend_C' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, Hair) == 0x002598, "Member 'ABPChar_Claptrap_Girlfriend_C::Hair' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, AntennaChoice) == 0x0025A0, "Member 'ABPChar_Claptrap_Girlfriend_C::AntennaChoice' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, ChallengeToPartMap) == 0x0025A8, "Member 'ABPChar_Claptrap_Girlfriend_C::ChallengeToPartMap' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, MovementStateTick) == 0x0025F8, "Member 'ABPChar_Claptrap_Girlfriend_C::MovementStateTick' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, CompletedChallengeArray) == 0x002600, "Member 'ABPChar_Claptrap_Girlfriend_C::CompletedChallengeArray' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, AntennaChoices) == 0x002610, "Member 'ABPChar_Claptrap_Girlfriend_C::AntennaChoices' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, GestaltMeshes) == 0x002620, "Member 'ABPChar_Claptrap_Girlfriend_C::GestaltMeshes' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, AntennaStateLocalInt) == 0x002630, "Member 'ABPChar_Claptrap_Girlfriend_C::AntennaStateLocalInt' has a wrong offset!");
static_assert(offsetof(ABPChar_Claptrap_Girlfriend_C, MaterialGet) == 0x002634, "Member 'ABPChar_Claptrap_Girlfriend_C::MaterialGet' has a wrong offset!");

}

