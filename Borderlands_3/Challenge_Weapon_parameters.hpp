#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_Weapon

#include "Basic.hpp"

#include "GbxGameSystemCore_structs.hpp"


namespace SDK::Params
{

// Function Challenge_Weapon.Challenge_Weapon_C.CheckKillCondition
// 0x0070 (0x0070 - 0x0000)
struct Challenge_Weapon_C_CheckKillCondition final
{
public:
	class UDamageComponent*                       DamageReceiver;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCausedDeathDetails                    DeathDetails;                                      // 0x0008(0x0068)(BlueprintVisible, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Challenge_Weapon_C_CheckKillCondition) == 0x000008, "Wrong alignment on Challenge_Weapon_C_CheckKillCondition");
static_assert(sizeof(Challenge_Weapon_C_CheckKillCondition) == 0x000070, "Wrong size on Challenge_Weapon_C_CheckKillCondition");
static_assert(offsetof(Challenge_Weapon_C_CheckKillCondition, DamageReceiver) == 0x000000, "Member 'Challenge_Weapon_C_CheckKillCondition::DamageReceiver' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_CheckKillCondition, DeathDetails) == 0x000008, "Member 'Challenge_Weapon_C_CheckKillCondition::DeathDetails' has a wrong offset!");

// Function Challenge_Weapon.Challenge_Weapon_C.CheckDamage
// 0x0088 (0x0088 - 0x0000)
struct Challenge_Weapon_C_CheckDamage final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGbxDamageType*                   DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageSource*                    DamageSource;                                      // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamagedActor;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCausedDamageDetails                   Details;                                           // 0x0028(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(Challenge_Weapon_C_CheckDamage) == 0x000008, "Wrong alignment on Challenge_Weapon_C_CheckDamage");
static_assert(sizeof(Challenge_Weapon_C_CheckDamage) == 0x000088, "Wrong size on Challenge_Weapon_C_CheckDamage");
static_assert(offsetof(Challenge_Weapon_C_CheckDamage, DamageInstigator) == 0x000000, "Member 'Challenge_Weapon_C_CheckDamage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_CheckDamage, Damage) == 0x000008, "Member 'Challenge_Weapon_C_CheckDamage::Damage' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_CheckDamage, DamageType) == 0x000010, "Member 'Challenge_Weapon_C_CheckDamage::DamageType' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_CheckDamage, DamageSource) == 0x000018, "Member 'Challenge_Weapon_C_CheckDamage::DamageSource' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_CheckDamage, DamagedActor) == 0x000020, "Member 'Challenge_Weapon_C_CheckDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_CheckDamage, Details) == 0x000028, "Member 'Challenge_Weapon_C_CheckDamage::Details' has a wrong offset!");

// Function Challenge_Weapon.Challenge_Weapon_C.CheckZoom
// 0x0001 (0x0001 - 0x0000)
struct Challenge_Weapon_C_CheckZoom final
{
public:
	uint8                                         Zooming;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Weapon_C_CheckZoom) == 0x000001, "Wrong alignment on Challenge_Weapon_C_CheckZoom");
static_assert(sizeof(Challenge_Weapon_C_CheckZoom) == 0x000001, "Wrong size on Challenge_Weapon_C_CheckZoom");
static_assert(offsetof(Challenge_Weapon_C_CheckZoom, Zooming) == 0x000000, "Member 'Challenge_Weapon_C_CheckZoom::Zooming' has a wrong offset!");

// Function Challenge_Weapon.Challenge_Weapon_C.OnInitChallengeInstance
// 0x0010 (0x0010 - 0x0000)
struct Challenge_Weapon_C_OnInitChallengeInstance final
{
public:
	class UChallengesComponent*                   OwningChallenges;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGbxCharacter*                          AssociatedCharacter;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_Weapon_C_OnInitChallengeInstance) == 0x000008, "Wrong alignment on Challenge_Weapon_C_OnInitChallengeInstance");
static_assert(sizeof(Challenge_Weapon_C_OnInitChallengeInstance) == 0x000010, "Wrong size on Challenge_Weapon_C_OnInitChallengeInstance");
static_assert(offsetof(Challenge_Weapon_C_OnInitChallengeInstance, OwningChallenges) == 0x000000, "Member 'Challenge_Weapon_C_OnInitChallengeInstance::OwningChallenges' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_OnInitChallengeInstance, AssociatedCharacter) == 0x000008, "Member 'Challenge_Weapon_C_OnInitChallengeInstance::AssociatedCharacter' has a wrong offset!");

// Function Challenge_Weapon.Challenge_Weapon_C.SetBinds
// 0x0048 (0x0048 - 0x0000)
struct Challenge_Weapon_C_SetBinds final
{
public:
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DamageInstigator, float Damage, class UGbxDamageType* DamageType, class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UDamageComponent* Damaged, struct FCausedDeathDetails& Details)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_Weapon_C_SetBinds) == 0x000008, "Wrong alignment on Challenge_Weapon_C_SetBinds");
static_assert(sizeof(Challenge_Weapon_C_SetBinds) == 0x000048, "Wrong size on Challenge_Weapon_C_SetBinds");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, Temp_bool_IsClosed_Variable) == 0x000000, "Member 'Challenge_Weapon_C_SetBinds::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Challenge_Weapon_C_SetBinds::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, Temp_bool_Has_Been_Initd_Variable) == 0x000018, "Member 'Challenge_Weapon_C_SetBinds::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, K2Node_CreateDelegate_OutputDelegate1) == 0x000020, "Member 'Challenge_Weapon_C_SetBinds::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'Challenge_Weapon_C_SetBinds::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000038, "Member 'Challenge_Weapon_C_SetBinds::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_Weapon_C_SetBinds, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'Challenge_Weapon_C_SetBinds::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

