#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTravelStation

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum GbxTravelStation.ETravelStatus
// NumValues: 0x0007
enum class ETravelStatus : uint8
{
	None                                     = 0,
	Queued                                   = 1,
	Cancelled_OpenMenu                       = 2,
	Cancelled_DownState                      = 3,
	Cancelled_Cinamatic                      = 4,
	Cancelled_DLCOwnership                   = 5,
	ETravelStatus_MAX                        = 6,
};

// Enum GbxTravelStation.EFastTravelDirection
// NumValues: 0x0004
enum class EFastTravelDirection : uint8
{
	SendAndReceive                           = 0,
	SendOnly                                 = 1,
	ReceiveOnly                              = 2,
	EFastTravelDirection_MAX                 = 3,
};

// ScriptStruct GbxTravelStation.ActiveFastTravelData
// 0x0010 (0x0010 - 0x0000)
struct FActiveFastTravelData final
{
public:
	class UFastTravelStationData*                 FastTravelData;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighlightDiscovery;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveFastTravelData) == 0x000008, "Wrong alignment on FActiveFastTravelData");
static_assert(sizeof(FActiveFastTravelData) == 0x000010, "Wrong size on FActiveFastTravelData");
static_assert(offsetof(FActiveFastTravelData, FastTravelData) == 0x000000, "Member 'FActiveFastTravelData::FastTravelData' has a wrong offset!");
static_assert(offsetof(FActiveFastTravelData, bHighlightDiscovery) == 0x000008, "Member 'FActiveFastTravelData::bHighlightDiscovery' has a wrong offset!");

// ScriptStruct GbxTravelStation.SpawnPointTracker
// 0x0028 (0x0028 - 0x0000)
struct FSpawnPointTracker final
{
public:
	TScriptInterface<class ITravelStationSpawnPointInterface> SpawnPoint;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         LastSpawnedAtCounter;                              // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AssignedToActor;                                   // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnPointTracker) == 0x000008, "Wrong alignment on FSpawnPointTracker");
static_assert(sizeof(FSpawnPointTracker) == 0x000028, "Wrong size on FSpawnPointTracker");
static_assert(offsetof(FSpawnPointTracker, SpawnPoint) == 0x000000, "Member 'FSpawnPointTracker::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FSpawnPointTracker, LastSpawnedAtCounter) == 0x000010, "Member 'FSpawnPointTracker::LastSpawnedAtCounter' has a wrong offset!");
static_assert(offsetof(FSpawnPointTracker, AssignedToActor) == 0x000018, "Member 'FSpawnPointTracker::AssignedToActor' has a wrong offset!");

// ScriptStruct GbxTravelStation.ActiveFastTravelSaveData
// 0x0018 (0x0018 - 0x0000)
struct FActiveFastTravelSaveData final
{
public:
	class FString                                 FastTravelStationName;                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlacklisted;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveFastTravelSaveData) == 0x000008, "Wrong alignment on FActiveFastTravelSaveData");
static_assert(sizeof(FActiveFastTravelSaveData) == 0x000018, "Wrong size on FActiveFastTravelSaveData");
static_assert(offsetof(FActiveFastTravelSaveData, FastTravelStationName) == 0x000000, "Member 'FActiveFastTravelSaveData::FastTravelStationName' has a wrong offset!");
static_assert(offsetof(FActiveFastTravelSaveData, bBlacklisted) == 0x000010, "Member 'FActiveFastTravelSaveData::bBlacklisted' has a wrong offset!");

// ScriptStruct GbxTravelStation.TravelDataConditional
// 0x0030 (0x0030 - 0x0000)
struct FTravelDataConditional final
{
public:
	class FString                                 TravelDataSelection;                               // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelTravelStationData*                LevelTravelData;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MovieToPlayDuringTravelMap;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          ConditionToPlayMovie;                              // 0x0020(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxCondition*                          Condition;                                         // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelDataConditional) == 0x000008, "Wrong alignment on FTravelDataConditional");
static_assert(sizeof(FTravelDataConditional) == 0x000030, "Wrong size on FTravelDataConditional");
static_assert(offsetof(FTravelDataConditional, TravelDataSelection) == 0x000000, "Member 'FTravelDataConditional::TravelDataSelection' has a wrong offset!");
static_assert(offsetof(FTravelDataConditional, LevelTravelData) == 0x000010, "Member 'FTravelDataConditional::LevelTravelData' has a wrong offset!");
static_assert(offsetof(FTravelDataConditional, MovieToPlayDuringTravelMap) == 0x000018, "Member 'FTravelDataConditional::MovieToPlayDuringTravelMap' has a wrong offset!");
static_assert(offsetof(FTravelDataConditional, ConditionToPlayMovie) == 0x000020, "Member 'FTravelDataConditional::ConditionToPlayMovie' has a wrong offset!");
static_assert(offsetof(FTravelDataConditional, Condition) == 0x000028, "Member 'FTravelDataConditional::Condition' has a wrong offset!");

// ScriptStruct GbxTravelStation.FastTravelStationActiveEntry
// 0x000C (0x0018 - 0x000C)
struct FFastTravelStationActiveEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFastTravelStationData*                 FastTravelData;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFastTravelStationActiveEntry) == 0x000008, "Wrong alignment on FFastTravelStationActiveEntry");
static_assert(sizeof(FFastTravelStationActiveEntry) == 0x000018, "Wrong size on FFastTravelStationActiveEntry");
static_assert(offsetof(FFastTravelStationActiveEntry, FastTravelData) == 0x000010, "Member 'FFastTravelStationActiveEntry::FastTravelData' has a wrong offset!");

// ScriptStruct GbxTravelStation.FastTravelStationActiveContainer
// 0x0018 (0x00C8 - 0x00B0)
struct FFastTravelStationActiveContainer final : public FFastArraySerializer
{
public:
	TArray<struct FFastTravelStationActiveEntry>  ActiveFastTravelStations;                          // 0x00B0(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFastTravelStationActiveContainer) == 0x000008, "Wrong alignment on FFastTravelStationActiveContainer");
static_assert(sizeof(FFastTravelStationActiveContainer) == 0x0000C8, "Wrong size on FFastTravelStationActiveContainer");
static_assert(offsetof(FFastTravelStationActiveContainer, ActiveFastTravelStations) == 0x0000B0, "Member 'FFastTravelStationActiveContainer::ActiveFastTravelStations' has a wrong offset!");

// ScriptStruct GbxTravelStation.AvailableTravelStation
// 0x0020 (0x0020 - 0x0000)
struct FAvailableTravelStation final
{
public:
	class FString                                 StationToTravelTo;                                 // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFastTravelStationDebugButton*          OptionButton;                                      // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAvailableTravelStation) == 0x000008, "Wrong alignment on FAvailableTravelStation");
static_assert(sizeof(FAvailableTravelStation) == 0x000020, "Wrong size on FAvailableTravelStation");
static_assert(offsetof(FAvailableTravelStation, StationToTravelTo) == 0x000000, "Member 'FAvailableTravelStation::StationToTravelTo' has a wrong offset!");
static_assert(offsetof(FAvailableTravelStation, OptionButton) == 0x000010, "Member 'FAvailableTravelStation::OptionButton' has a wrong offset!");

// ScriptStruct GbxTravelStation.ExternalGraphLevelLinks
// 0x0038 (0x0038 - 0x0000)
struct FExternalGraphLevelLinks final
{
public:
	TSoftObjectPtr<class ULevelData>              LevelData;                                         // 0x0000(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelData>>      LinksToOtherLevel;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExternalGraphLevelLinks) == 0x000008, "Wrong alignment on FExternalGraphLevelLinks");
static_assert(sizeof(FExternalGraphLevelLinks) == 0x000038, "Wrong size on FExternalGraphLevelLinks");
static_assert(offsetof(FExternalGraphLevelLinks, LevelData) == 0x000000, "Member 'FExternalGraphLevelLinks::LevelData' has a wrong offset!");
static_assert(offsetof(FExternalGraphLevelLinks, LinksToOtherLevel) == 0x000028, "Member 'FExternalGraphLevelLinks::LinksToOtherLevel' has a wrong offset!");

// ScriptStruct GbxTravelStation.TravelCountdownInfo
// 0x0010 (0x0010 - 0x0000)
struct FTravelCountdownInfo final
{
public:
	class UTravelStationData*                     TravelStationDestination;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingTime;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelStatus                                 Status;                                            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisallowLocalTravel;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTravelCountdownInfo) == 0x000008, "Wrong alignment on FTravelCountdownInfo");
static_assert(sizeof(FTravelCountdownInfo) == 0x000010, "Wrong size on FTravelCountdownInfo");
static_assert(offsetof(FTravelCountdownInfo, TravelStationDestination) == 0x000000, "Member 'FTravelCountdownInfo::TravelStationDestination' has a wrong offset!");
static_assert(offsetof(FTravelCountdownInfo, RemainingTime) == 0x000008, "Member 'FTravelCountdownInfo::RemainingTime' has a wrong offset!");
static_assert(offsetof(FTravelCountdownInfo, Status) == 0x00000C, "Member 'FTravelCountdownInfo::Status' has a wrong offset!");
static_assert(offsetof(FTravelCountdownInfo, bDisallowLocalTravel) == 0x00000D, "Member 'FTravelCountdownInfo::bDisallowLocalTravel' has a wrong offset!");

}

