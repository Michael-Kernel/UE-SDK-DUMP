#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_HoldAndThrow

#include "Basic.hpp"


namespace SDK::Params
{

// Function FL_HoldAndThrow.FL_HoldAndThrow_C.HNT_Prime
// 0x0028 (0x0028 - 0x0000)
struct FL_HoldAndThrow_C_HNT_Prime final
{
public:
	class AActor*                                 Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ProjectileHoldAndThrow_C> K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_HoldAndThrow_C_HNT_Prime) == 0x000008, "Wrong alignment on FL_HoldAndThrow_C_HNT_Prime");
static_assert(sizeof(FL_HoldAndThrow_C_HNT_Prime) == 0x000028, "Wrong size on FL_HoldAndThrow_C_HNT_Prime");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Prime, Projectile) == 0x000000, "Member 'FL_HoldAndThrow_C_HNT_Prime::Projectile' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Prime, __WorldContext) == 0x000008, "Member 'FL_HoldAndThrow_C_HNT_Prime::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Prime, K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw) == 0x000010, "Member 'FL_HoldAndThrow_C_HNT_Prime::K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Prime, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_HoldAndThrow_C_HNT_Prime::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_HoldAndThrow.FL_HoldAndThrow_C.HNT_Drop
// 0x0028 (0x0028 - 0x0000)
struct FL_HoldAndThrow_C_HNT_Drop final
{
public:
	class AActor*                                 Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ProjectileHoldAndThrow_C> K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_HoldAndThrow_C_HNT_Drop) == 0x000008, "Wrong alignment on FL_HoldAndThrow_C_HNT_Drop");
static_assert(sizeof(FL_HoldAndThrow_C_HNT_Drop) == 0x000028, "Wrong size on FL_HoldAndThrow_C_HNT_Drop");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Drop, Projectile) == 0x000000, "Member 'FL_HoldAndThrow_C_HNT_Drop::Projectile' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Drop, __WorldContext) == 0x000008, "Member 'FL_HoldAndThrow_C_HNT_Drop::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Drop, K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw) == 0x000010, "Member 'FL_HoldAndThrow_C_HNT_Drop::K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Drop, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_HoldAndThrow_C_HNT_Drop::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_HoldAndThrow.FL_HoldAndThrow_C.HNT_Throw
// 0x0028 (0x0028 - 0x0000)
struct FL_HoldAndThrow_C_HNT_Throw final
{
public:
	class AActor*                                 Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ProjectileHoldAndThrow_C> K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_HoldAndThrow_C_HNT_Throw) == 0x000008, "Wrong alignment on FL_HoldAndThrow_C_HNT_Throw");
static_assert(sizeof(FL_HoldAndThrow_C_HNT_Throw) == 0x000028, "Wrong size on FL_HoldAndThrow_C_HNT_Throw");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Throw, Projectile) == 0x000000, "Member 'FL_HoldAndThrow_C_HNT_Throw::Projectile' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Throw, __WorldContext) == 0x000008, "Member 'FL_HoldAndThrow_C_HNT_Throw::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Throw, K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw) == 0x000010, "Member 'FL_HoldAndThrow_C_HNT_Throw::K2Node_DynamicCast_AsBPI_Projectile_Hold_and_Throw' has a wrong offset!");
static_assert(offsetof(FL_HoldAndThrow_C_HNT_Throw, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_HoldAndThrow_C_HNT_Throw::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

