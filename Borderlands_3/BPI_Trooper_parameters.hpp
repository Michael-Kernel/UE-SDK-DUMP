#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Trooper

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_Trooper_BackpackState_structs.hpp"


namespace SDK::Params
{

// Function BPI_Trooper.BPI_Trooper_C.Trooper_ReactToFlashDeath
// 0x0008 (0x0008 - 0x0000)
struct BPI_Trooper_C_Trooper_ReactToFlashDeath final
{
public:
	class AActor*                                 DyingActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Trooper_C_Trooper_ReactToFlashDeath) == 0x000008, "Wrong alignment on BPI_Trooper_C_Trooper_ReactToFlashDeath");
static_assert(sizeof(BPI_Trooper_C_Trooper_ReactToFlashDeath) == 0x000008, "Wrong size on BPI_Trooper_C_Trooper_ReactToFlashDeath");
static_assert(offsetof(BPI_Trooper_C_Trooper_ReactToFlashDeath, DyingActor) == 0x000000, "Member 'BPI_Trooper_C_Trooper_ReactToFlashDeath::DyingActor' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_ReactToJetpackDeath
// 0x0008 (0x0008 - 0x0000)
struct BPI_Trooper_C_Trooper_ReactToJetpackDeath final
{
public:
	class AActor*                                 DyingActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Trooper_C_Trooper_ReactToJetpackDeath) == 0x000008, "Wrong alignment on BPI_Trooper_C_Trooper_ReactToJetpackDeath");
static_assert(sizeof(BPI_Trooper_C_Trooper_ReactToJetpackDeath) == 0x000008, "Wrong size on BPI_Trooper_C_Trooper_ReactToJetpackDeath");
static_assert(offsetof(BPI_Trooper_C_Trooper_ReactToJetpackDeath, DyingActor) == 0x000000, "Member 'BPI_Trooper_C_Trooper_ReactToJetpackDeath::DyingActor' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_GetTeleportDirection
// 0x000C (0x000C - 0x0000)
struct BPI_Trooper_C_Trooper_GetTeleportDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Trooper_C_Trooper_GetTeleportDirection) == 0x000004, "Wrong alignment on BPI_Trooper_C_Trooper_GetTeleportDirection");
static_assert(sizeof(BPI_Trooper_C_Trooper_GetTeleportDirection) == 0x00000C, "Wrong size on BPI_Trooper_C_Trooper_GetTeleportDirection");
static_assert(offsetof(BPI_Trooper_C_Trooper_GetTeleportDirection, Direction) == 0x000000, "Member 'BPI_Trooper_C_Trooper_GetTeleportDirection::Direction' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_SetFlashTrailActive
// 0x0002 (0x0002 - 0x0000)
struct BPI_Trooper_C_Trooper_SetFlashTrailActive final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseAudio;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Trooper_C_Trooper_SetFlashTrailActive) == 0x000001, "Wrong alignment on BPI_Trooper_C_Trooper_SetFlashTrailActive");
static_assert(sizeof(BPI_Trooper_C_Trooper_SetFlashTrailActive) == 0x000002, "Wrong size on BPI_Trooper_C_Trooper_SetFlashTrailActive");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetFlashTrailActive, Enable) == 0x000000, "Member 'BPI_Trooper_C_Trooper_SetFlashTrailActive::Enable' has a wrong offset!");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetFlashTrailActive, UseAudio) == 0x000001, "Member 'BPI_Trooper_C_Trooper_SetFlashTrailActive::UseAudio' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_SetMeleeTrailActive
// 0x0001 (0x0001 - 0x0000)
struct BPI_Trooper_C_Trooper_SetMeleeTrailActive final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Trooper_C_Trooper_SetMeleeTrailActive) == 0x000001, "Wrong alignment on BPI_Trooper_C_Trooper_SetMeleeTrailActive");
static_assert(sizeof(BPI_Trooper_C_Trooper_SetMeleeTrailActive) == 0x000001, "Wrong size on BPI_Trooper_C_Trooper_SetMeleeTrailActive");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetMeleeTrailActive, Enabled) == 0x000000, "Member 'BPI_Trooper_C_Trooper_SetMeleeTrailActive::Enabled' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_SetBackpackState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Trooper_C_Trooper_SetBackpackState final
{
public:
	Enum_Trooper_BackpackState                    State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Trooper_C_Trooper_SetBackpackState) == 0x000001, "Wrong alignment on BPI_Trooper_C_Trooper_SetBackpackState");
static_assert(sizeof(BPI_Trooper_C_Trooper_SetBackpackState) == 0x000001, "Wrong size on BPI_Trooper_C_Trooper_SetBackpackState");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetBackpackState, State) == 0x000000, "Member 'BPI_Trooper_C_Trooper_SetBackpackState::State' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_SetHealBeamActive
// 0x0010 (0x0010 - 0x0000)
struct BPI_Trooper_C_Trooper_SetHealBeamActive final
{
public:
	class AActor*                                 TargetAlly;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Trooper_C_Trooper_SetHealBeamActive) == 0x000008, "Wrong alignment on BPI_Trooper_C_Trooper_SetHealBeamActive");
static_assert(sizeof(BPI_Trooper_C_Trooper_SetHealBeamActive) == 0x000010, "Wrong size on BPI_Trooper_C_Trooper_SetHealBeamActive");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetHealBeamActive, TargetAlly) == 0x000000, "Member 'BPI_Trooper_C_Trooper_SetHealBeamActive::TargetAlly' has a wrong offset!");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetHealBeamActive, Enable) == 0x000008, "Member 'BPI_Trooper_C_Trooper_SetHealBeamActive::Enable' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_TriggerFlashDeath
// 0x0010 (0x0010 - 0x0000)
struct BPI_Trooper_C_Trooper_TriggerFlashDeath final
{
public:
	int32                                         SpeedAtImpact;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalHitDirection;                                 // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Trooper_C_Trooper_TriggerFlashDeath) == 0x000004, "Wrong alignment on BPI_Trooper_C_Trooper_TriggerFlashDeath");
static_assert(sizeof(BPI_Trooper_C_Trooper_TriggerFlashDeath) == 0x000010, "Wrong size on BPI_Trooper_C_Trooper_TriggerFlashDeath");
static_assert(offsetof(BPI_Trooper_C_Trooper_TriggerFlashDeath, SpeedAtImpact) == 0x000000, "Member 'BPI_Trooper_C_Trooper_TriggerFlashDeath::SpeedAtImpact' has a wrong offset!");
static_assert(offsetof(BPI_Trooper_C_Trooper_TriggerFlashDeath, LocalHitDirection) == 0x000004, "Member 'BPI_Trooper_C_Trooper_TriggerFlashDeath::LocalHitDirection' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_RequestCoverFire
// 0x0008 (0x0008 - 0x0000)
struct BPI_Trooper_C_Trooper_RequestCoverFire final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Trooper_C_Trooper_RequestCoverFire) == 0x000008, "Wrong alignment on BPI_Trooper_C_Trooper_RequestCoverFire");
static_assert(sizeof(BPI_Trooper_C_Trooper_RequestCoverFire) == 0x000008, "Wrong size on BPI_Trooper_C_Trooper_RequestCoverFire");
static_assert(offsetof(BPI_Trooper_C_Trooper_RequestCoverFire, OtherActor) == 0x000000, "Member 'BPI_Trooper_C_Trooper_RequestCoverFire::OtherActor' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_SetLaserSightEnabled
// 0x0001 (0x0001 - 0x0000)
struct BPI_Trooper_C_Trooper_SetLaserSightEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Trooper_C_Trooper_SetLaserSightEnabled) == 0x000001, "Wrong alignment on BPI_Trooper_C_Trooper_SetLaserSightEnabled");
static_assert(sizeof(BPI_Trooper_C_Trooper_SetLaserSightEnabled) == 0x000001, "Wrong size on BPI_Trooper_C_Trooper_SetLaserSightEnabled");
static_assert(offsetof(BPI_Trooper_C_Trooper_SetLaserSightEnabled, Enabled) == 0x000000, "Member 'BPI_Trooper_C_Trooper_SetLaserSightEnabled::Enabled' has a wrong offset!");

// Function BPI_Trooper.BPI_Trooper_C.Trooper_TriggerDetonateBackpack
// 0x0001 (0x0001 - 0x0000)
struct BPI_Trooper_C_Trooper_TriggerDetonateBackpack final
{
public:
	bool                                          BigExplosion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Trooper_C_Trooper_TriggerDetonateBackpack) == 0x000001, "Wrong alignment on BPI_Trooper_C_Trooper_TriggerDetonateBackpack");
static_assert(sizeof(BPI_Trooper_C_Trooper_TriggerDetonateBackpack) == 0x000001, "Wrong size on BPI_Trooper_C_Trooper_TriggerDetonateBackpack");
static_assert(offsetof(BPI_Trooper_C_Trooper_TriggerDetonateBackpack, BigExplosion) == 0x000000, "Member 'BPI_Trooper_C_Trooper_TriggerDetonateBackpack::BigExplosion' has a wrong offset!");

}

