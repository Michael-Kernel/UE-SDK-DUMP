#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeap_ATL_BaseWeapon

#include "Basic.hpp"

#include "GbxWeapon_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.ExecuteUbergraph_BPWeap_ATL_BaseWeapon
// 0x00B8 (0x00B8 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_BaseColor;                            // 0x0008(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_HighlightColor;                       // 0x0018(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_MarkerBaseColor;                      // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_MarkerHighlightColor;                 // 0x0038(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_HomingOverrideBase;                   // 0x0048(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_NewParamHomingOverrideHighlight;      // 0x0058(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetLocked_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAutoReload;                          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AProj_Weapon_BaseProjectile_C*          CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AWeapon* EventWeapon)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	class AWeapon*                                K2Node_CustomEvent_EventWeapon;                    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon) == 0x000008, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon) == 0x0000B8, "Wrong size on BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, EntryPoint) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_BaseColor) == 0x000008, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_BaseColor' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_HighlightColor) == 0x000018, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_HighlightColor' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_MarkerBaseColor) == 0x000028, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_MarkerBaseColor' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_MarkerHighlightColor) == 0x000038, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_MarkerHighlightColor' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_HomingOverrideBase) == 0x000048, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_HomingOverrideBase' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_NewParamHomingOverrideHighlight) == 0x000058, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_NewParamHomingOverrideHighlight' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_IsTargetLocked_ReturnValue) == 0x000068, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_IsTargetLocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000069, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_Event_bAutoReload) == 0x00006A, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_Event_bAutoReload' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_Array_Get_Item) == 0x000070, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_CreateDelegate_OutputDelegate) == 0x000090, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_CustomEvent_EventWeapon) == 0x0000A0, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_CustomEvent_EventWeapon' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon, K2Node_CreateDelegate_OutputDelegate1) == 0x0000A8, "Member 'BPWeap_ATL_BaseWeapon_C_ExecuteUbergraph_BPWeap_ATL_BaseWeapon::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.Weapon_NotifyPutDown
// 0x0008 (0x0008 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown final
{
public:
	class AWeapon*                                EventWeapon;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown) == 0x000008, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown) == 0x000008, "Wrong size on BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown, EventWeapon) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_Weapon_NotifyPutDown::EventWeapon' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.SetEmissiveData
// 0x0060 (0x0060 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_SetEmissiveData final
{
public:
	struct FLinearColor                           BaseColor_0;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor_0;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MarkerBaseColor_0;                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MarkerHighlightColor_0;                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HomingOverrideBase;                                // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NewParamHomingOverrideHighlight;                   // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData) == 0x000004, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_SetEmissiveData");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData) == 0x000060, "Wrong size on BPWeap_ATL_BaseWeapon_C_SetEmissiveData");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData, BaseColor_0) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_SetEmissiveData::BaseColor_0' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData, HighlightColor_0) == 0x000010, "Member 'BPWeap_ATL_BaseWeapon_C_SetEmissiveData::HighlightColor_0' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData, MarkerBaseColor_0) == 0x000020, "Member 'BPWeap_ATL_BaseWeapon_C_SetEmissiveData::MarkerBaseColor_0' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData, MarkerHighlightColor_0) == 0x000030, "Member 'BPWeap_ATL_BaseWeapon_C_SetEmissiveData::MarkerHighlightColor_0' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData, HomingOverrideBase) == 0x000040, "Member 'BPWeap_ATL_BaseWeapon_C_SetEmissiveData::HomingOverrideBase' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_SetEmissiveData, NewParamHomingOverrideHighlight) == 0x000050, "Member 'BPWeap_ATL_BaseWeapon_C_SetEmissiveData::NewParamHomingOverrideHighlight' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.RemoveHomingTarget
// 0x0018 (0x0018 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget final
{
public:
	class AActor*                                 HomingTarget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget) == 0x000008, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget) == 0x000018, "Wrong size on BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget, HomingTarget) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget::HomingTarget' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'BPWeap_ATL_BaseWeapon_C_RemoveHomingTarget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.AddHomingTarget
// 0x0010 (0x0010 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_AddHomingTarget final
{
public:
	class AActor*                                 HomingTarget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_AddHomingTarget) == 0x000008, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_AddHomingTarget");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_AddHomingTarget) == 0x000010, "Wrong size on BPWeap_ATL_BaseWeapon_C_AddHomingTarget");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_AddHomingTarget, HomingTarget) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_AddHomingTarget::HomingTarget' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_AddHomingTarget, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'BPWeap_ATL_BaseWeapon_C_AddHomingTarget::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.InitBaseGlow
// 0x0068 (0x0068 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_InitBaseGlow final
{
public:
	struct FWeaponMaterialEffectData              K2Node_MakeStruct_WeaponMaterialEffectData;        // 0x0000(0x0060)(NoDestructor)
	int32                                         CallFunc_PlayDynamicMaterialEffect_ReturnValue;    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_InitBaseGlow) == 0x000008, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_InitBaseGlow");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_InitBaseGlow) == 0x000068, "Wrong size on BPWeap_ATL_BaseWeapon_C_InitBaseGlow");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_InitBaseGlow, K2Node_MakeStruct_WeaponMaterialEffectData) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_InitBaseGlow::K2Node_MakeStruct_WeaponMaterialEffectData' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_InitBaseGlow, CallFunc_PlayDynamicMaterialEffect_ReturnValue) == 0x000060, "Member 'BPWeap_ATL_BaseWeapon_C_InitBaseGlow::CallFunc_PlayDynamicMaterialEffect_ReturnValue' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.InitMarkerGlow
// 0x0068 (0x0068 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_InitMarkerGlow final
{
public:
	struct FWeaponMaterialEffectData              K2Node_MakeStruct_WeaponMaterialEffectData;        // 0x0000(0x0060)(NoDestructor)
	int32                                         CallFunc_PlayDynamicMaterialEffect_ReturnValue;    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_InitMarkerGlow) == 0x000008, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_InitMarkerGlow");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_InitMarkerGlow) == 0x000068, "Wrong size on BPWeap_ATL_BaseWeapon_C_InitMarkerGlow");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_InitMarkerGlow, K2Node_MakeStruct_WeaponMaterialEffectData) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_InitMarkerGlow::K2Node_MakeStruct_WeaponMaterialEffectData' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_InitMarkerGlow, CallFunc_PlayDynamicMaterialEffect_ReturnValue) == 0x000060, "Member 'BPWeap_ATL_BaseWeapon_C_InitMarkerGlow::CallFunc_PlayDynamicMaterialEffect_ReturnValue' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.InitHoming
// 0x0008 (0x0008 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_InitHoming final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_InitHoming) == 0x000004, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_InitHoming");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_InitHoming) == 0x000008, "Wrong size on BPWeap_ATL_BaseWeapon_C_InitHoming");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_InitHoming, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_InitHoming::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_InitHoming, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'BPWeap_ATL_BaseWeapon_C_InitHoming::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BPWeap_ATL_BaseWeapon.BPWeap_ATL_BaseWeapon_C.Notify_ReloadStarted
// 0x0001 (0x0001 - 0x0000)
struct BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted final
{
public:
	bool                                          bAutoReload;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted) == 0x000001, "Wrong alignment on BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted");
static_assert(sizeof(BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted) == 0x000001, "Wrong size on BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted");
static_assert(offsetof(BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted, bAutoReload) == 0x000000, "Member 'BPWeap_ATL_BaseWeapon_C_Notify_ReloadStarted::bAutoReload' has a wrong offset!");

}

