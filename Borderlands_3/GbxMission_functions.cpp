#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxMission

#include "Basic.hpp"

#include "GbxMission_classes.hpp"
#include "GbxMission_parameters.hpp"


namespace SDK
{

// Function GbxMission.MissionDirectorComponent.ActivateAvailableMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMissionDirectorComponent::ActivateAvailableMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDirectorComponent", "ActivateAvailableMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDirectorComponent.AddMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMission>             InMission                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDirectorComponent::AddMission(TSubclassOf<class UMission> InMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDirectorComponent", "AddMission");

	Params::MissionDirectorComponent_AddMission Parms{};

	Parms.InMission = InMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDirectorComponent.ClearMissions
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMissionDirectorComponent::ClearMissions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDirectorComponent", "ClearMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDirectorComponent.GetAllMissions
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class UMission>>     AllMissions                                            (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UMissionDirectorComponent::GetAllMissions(TArray<TSubclassOf<class UMission>>* AllMissions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDirectorComponent", "GetAllMissions");

	Params::MissionDirectorComponent_GetAllMissions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllMissions != nullptr)
		*AllMissions = std::move(Parms.AllMissions);
}


// Function GbxMission.MissionDirectorComponent.IsAnyMissionActive
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMissionActiveResult                    OutResult                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDirectorComponent::IsAnyMissionActive(EMissionActiveResult* OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDirectorComponent", "IsAnyMissionActive");

	Params::MissionDirectorComponent_IsAnyMissionActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = Parms.OutResult;
}


// Function GbxMission.MissionDirectorComponent.IsAnyMissionAvailable
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMissionAvailableResult                 OutResult                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDirectorComponent::IsAnyMissionAvailable(EMissionAvailableResult* OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDirectorComponent", "IsAnyMissionAvailable");

	Params::MissionDirectorComponent_IsAnyMissionAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = Parms.OutResult;
}


// Function GbxMission.Mission.ActivateMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjectiveSet*             InitialObjectiveSet                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAsTrackedMission                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::ActivateMission(class UMissionObjectiveSet* InitialObjectiveSet, bool bSetAsTrackedMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "ActivateMission");

	Params::Mission_ActivateMission Parms{};

	Parms.InitialObjectiveSet = InitialObjectiveSet;
	Parms.bSetAsTrackedMission = bSetAsTrackedMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.AddTimeToMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SecondsToAdd                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::AddTimeToMission(int32 SecondsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "AddTimeToMission");

	Params::Mission_AddTimeToMission Parms{};

	Parms.SecondsToAdd = SecondsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.AdvanceObjectiveSet
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjectiveSet*             ObjectiveSet                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::AdvanceObjectiveSet(class UMissionObjectiveSet* ObjectiveSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "AdvanceObjectiveSet");

	Params::Mission_AdvanceObjectiveSet Parms{};

	Parms.ObjectiveSet = ObjectiveSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.ClearObjective
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::ClearObjective(class UMissionObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "ClearObjective");

	Params::Mission_ClearObjective Parms{};

	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.CompleteMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMission::CompleteMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "CompleteMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.EndKickoff
// (Final, Native, Public, BlueprintCallable)

void UMission::EndKickoff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "EndKickoff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.FailMission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMission::FailMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "FailMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.GetMissionRemainingSeconds
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMission::GetMissionRemainingSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "GetMissionRemainingSeconds");

	Params::Mission_GetMissionRemainingSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.Mission.JumpToObjectiveSet
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjectiveSet*             ObjectiveSet                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBranchingMission                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::JumpToObjectiveSet(class UMissionObjectiveSet* ObjectiveSet, bool bIsBranchingMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "JumpToObjectiveSet");

	Params::Mission_JumpToObjectiveSet Parms{};

	Parms.ObjectiveSet = ObjectiveSet;
	Parms.bIsBranchingMission = bIsBranchingMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.MissionActive
// (Event, Public, BlueprintEvent)

void UMission::MissionActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionActiveLoad
// (Event, Public, BlueprintEvent)

void UMission::MissionActiveLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionActiveLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionComplete
// (Event, Public, BlueprintEvent)

void UMission::MissionComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionCompleteLoad
// (Event, Public, BlueprintEvent)

void UMission::MissionCompleteLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionCompleteLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionFailed
// (Event, Public, BlueprintEvent)

void UMission::MissionFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionGameModeEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMission::MissionGameModeEvent(class FName EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionGameModeEvent");

	Params::Mission_MissionGameModeEvent Parms{};

	Parms.EventName = EventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.Mission.MissionKickoff
// (Event, Public, BlueprintEvent)

void UMission::MissionKickoff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionKickoff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionNotStarted
// (Event, Public, BlueprintEvent)

void UMission::MissionNotStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionNotStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.MissionRemoteEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMission::MissionRemoteEvent(class FName EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionRemoteEvent");

	Params::Mission_MissionRemoteEvent Parms{};

	Parms.EventName = EventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.Mission.MissionTimerExpired
// (Event, Public, BlueprintEvent)

void UMission::MissionTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "MissionTimerExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxMission.Mission.StartMissionTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMission::StartMissionTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "StartMissionTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.StopMissionTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMission::StopMissionTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "StopMissionTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.ThwartObjectiveAndAdvanceObjectiveSet
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjective*                ObjectiveToThwart                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjectiveSet*             ObjectiveSet                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bJumpToSet                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::ThwartObjectiveAndAdvanceObjectiveSet(class UMissionObjective* ObjectiveToThwart, class UMissionObjectiveSet* ObjectiveSet, bool bJumpToSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "ThwartObjectiveAndAdvanceObjectiveSet");

	Params::Mission_ThwartObjectiveAndAdvanceObjectiveSet Parms{};

	Parms.ObjectiveToThwart = ObjectiveToThwart;
	Parms.ObjectiveSet = ObjectiveSet;
	Parms.bJumpToSet = bJumpToSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.UnpauseObjectiveChain
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::UnpauseObjectiveChain(class UMissionObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "UnpauseObjectiveChain");

	Params::Mission_UnpauseObjectiveChain Parms{};

	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.UpdateObjective
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMission::UpdateObjective(class UMissionObjective* Objective, class UObject* Context, uint8 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "UpdateObjective");

	Params::Mission_UpdateObjective Parms{};

	Parms.Objective = Objective;
	Parms.Context = Context;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.Mission.GetObjectiveSetsList
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class UMissionObjectiveSet*>     ObjectiveSetsList                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMission::GetObjectiveSetsList(TArray<class UMissionObjectiveSet*>* ObjectiveSetsList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "GetObjectiveSetsList");

	Params::Mission_GetObjectiveSetsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectiveSetsList != nullptr)
		*ObjectiveSetsList = std::move(Parms.ObjectiveSetsList);
}


// Function GbxMission.Mission.GetObjectivesList
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class UMissionObjective*>        ObjectivesList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMission::GetObjectivesList(TArray<class UMissionObjective*>* ObjectivesList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "GetObjectivesList");

	Params::Mission_GetObjectivesList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectivesList != nullptr)
		*ObjectivesList = std::move(Parms.ObjectivesList);
}


// Function GbxMission.Mission.GetPausableChainedObjectivesList
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class UMissionObjective*>        ObjectivesList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMission::GetPausableChainedObjectivesList(TArray<class UMissionObjective*>* ObjectivesList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Mission", "GetPausableChainedObjectivesList");

	Params::Mission_GetPausableChainedObjectivesList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectivesList != nullptr)
		*ObjectivesList = std::move(Parms.ObjectivesList);
}


// Function GbxMission.MissionReferenceInterface.CheckForMissionReferenceErrors
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMissionReferenceInterface::CheckForMissionReferenceErrors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionReferenceInterface", "CheckForMissionReferenceErrors");

	Params::MissionReferenceInterface_CheckForMissionReferenceErrors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionReferenceInterface.GetMissionClassReferences
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<TSubclassOf<class UMission>>     OutMissions                                            (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void IMissionReferenceInterface::GetMissionClassReferences(TArray<TSubclassOf<class UMission>>* OutMissions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionReferenceInterface", "GetMissionClassReferences");

	Params::MissionReferenceInterface_GetMissionClassReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissions != nullptr)
		*OutMissions = std::move(Parms.OutMissions);
}


// Function GbxMission.MissionIconComponent.EnabledConditionRequiresNativeClass
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionIconComponent::EnabledConditionRequiresNativeClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "EnabledConditionRequiresNativeClass");

	Params::MissionIconComponent_EnabledConditionRequiresNativeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionIconComponent.GetRequiredInterface
// (Final, Native, Public)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UMissionIconComponent::GetRequiredInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "GetRequiredInterface");

	Params::MissionIconComponent_GetRequiredInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionIconComponent.IsIconEnabled
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionIconComponent::IsIconEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "IsIconEnabled");

	Params::MissionIconComponent_IsIconEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionIconComponent.OnRep_Enabled
// (Final, Native, Private)
// Parameters:
// bool                                    bPreviouslyEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionIconComponent::OnRep_Enabled(bool bPreviouslyEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "OnRep_Enabled");

	Params::MissionIconComponent_OnRep_Enabled Parms{};

	Parms.bPreviouslyEnabled = bPreviouslyEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionIconComponent.SetDisabledState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDisabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionIconComponent::SetDisabledState(bool bDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "SetDisabledState");

	Params::MissionIconComponent_SetDisabledState Parms{};

	Parms.bDisabled = bDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionIconComponent.SetIconEnabledCondition
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxCondition*                    EnabledCondition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionIconComponent::SetIconEnabledCondition(class UGbxCondition* EnabledCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "SetIconEnabledCondition");

	Params::MissionIconComponent_SetIconEnabledCondition Parms{};

	Parms.EnabledCondition = EnabledCondition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionIconComponent.SetIconState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMissionIconState                       InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionIconComponent::SetIconState(EMissionIconState InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionIconComponent", "SetIconState");

	Params::MissionIconComponent_SetIconState Parms{};

	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionObserverPlayerInterface.ClientReceiveMissionData
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FReplicatedMissionData           MissionData                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void IMissionObserverPlayerInterface::ClientReceiveMissionData(const struct FReplicatedMissionData& MissionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionObserverPlayerInterface", "ClientReceiveMissionData");

	Params::MissionObserverPlayerInterface_ClientReceiveMissionData Parms{};

	Parms.MissionData = std::move(MissionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionTracker.OnRep_ActiveIcons
// (Final, Native, Public)

void AMissionTracker::OnRep_ActiveIcons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionTracker", "OnRep_ActiveIcons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionTracker.OnRep_LevelLoadEventsIssued
// (Final, Native, Public)

void AMissionTracker::OnRep_LevelLoadEventsIssued()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionTracker", "OnRep_LevelLoadEventsIssued");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionTracker.OnStatIncrement
// (Native, Public)
// Parameters:
// class AActor*                           StatContext                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameStatData*                    StatId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMissionTracker::OnStatIncrement(class AActor* StatContext, class UGameStatData* StatId, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionTracker", "OnStatIncrement");

	Params::MissionTracker_OnStatIncrement Parms{};

	Parms.StatContext = StatContext;
	Parms.StatId = StatId;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientDormantObjectiveAdded
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientDormantObjectiveAdded(TSubclassOf<class UMission> MissionClass, class UMissionObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientDormantObjectiveAdded");

	Params::PlayerMissionComponent_ClientDormantObjectiveAdded Parms{};

	Parms.MissionClass = MissionClass;
	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientDormantObjectiveRemoved
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIssueActiveEvent                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientDormantObjectiveRemoved(TSubclassOf<class UMission> MissionClass, class UMissionObjective* Objective, bool bIssueActiveEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientDormantObjectiveRemoved");

	Params::PlayerMissionComponent_ClientDormantObjectiveRemoved Parms{};

	Parms.MissionClass = MissionClass;
	Parms.Objective = Objective;
	Parms.bIssueActiveEvent = bIssueActiveEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientMissionRegistered
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientMissionRegistered(TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientMissionRegistered");

	Params::PlayerMissionComponent_ClientMissionRegistered Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientMissionTimerChanged
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsToAdd                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientMissionTimerChanged(TSubclassOf<class UMission> MissionClass, float SecondsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientMissionTimerChanged");

	Params::PlayerMissionComponent_ClientMissionTimerChanged Parms{};

	Parms.MissionClass = MissionClass;
	Parms.SecondsToAdd = SecondsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientMissionTimerStarted
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientMissionTimerStarted(TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientMissionTimerStarted");

	Params::PlayerMissionComponent_ClientMissionTimerStarted Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientMissionTimerStopped
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientMissionTimerStopped(TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientMissionTimerStopped");

	Params::PlayerMissionComponent_ClientMissionTimerStopped Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientObjectiveChainUnpaused
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjective*                Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientObjectiveChainUnpaused(TSubclassOf<class UMission> MissionClass, class UMissionObjective* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientObjectiveChainUnpaused");

	Params::PlayerMissionComponent_ClientObjectiveChainUnpaused Parms{};

	Parms.MissionClass = MissionClass;
	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientObjectiveCleared
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjective*                ClearedObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientObjectiveCleared(TSubclassOf<class UMission> MissionClass, class UMissionObjective* ClearedObjective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientObjectiveCleared");

	Params::PlayerMissionComponent_ClientObjectiveCleared Parms{};

	Parms.MissionClass = MissionClass;
	Parms.ClearedObjective = ClearedObjective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientObjectiveSetCompleted
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjectiveSet*             CompletedObjectiveSet                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientObjectiveSetCompleted(TSubclassOf<class UMission> MissionClass, class UMissionObjectiveSet* CompletedObjectiveSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientObjectiveSetCompleted");

	Params::PlayerMissionComponent_ClientObjectiveSetCompleted Parms{};

	Parms.MissionClass = MissionClass;
	Parms.CompletedObjectiveSet = CompletedObjectiveSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientObjectiveUpdated
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjective*                UpdatedObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  ObjectiveBit                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientObjectiveUpdated(TSubclassOf<class UMission> MissionClass, class UMissionObjective* UpdatedObjective, uint32 ObjectiveBit, uint8 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientObjectiveUpdated");

	Params::PlayerMissionComponent_ClientObjectiveUpdated Parms{};

	Parms.MissionClass = MissionClass;
	Parms.UpdatedObjective = UpdatedObjective;
	Parms.ObjectiveBit = ObjectiveBit;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientTrackedMissionChanged
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientTrackedMissionChanged(TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientTrackedMissionChanged");

	Params::PlayerMissionComponent_ClientTrackedMissionChanged Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientUpdateActiveObjectiveSet
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMissionObjectiveSet*             ActiveObjectiveSet                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMissionObjective*>        DormantObjectives                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientUpdateActiveObjectiveSet(TSubclassOf<class UMission> MissionClass, class UMissionObjectiveSet* ActiveObjectiveSet, const TArray<class UMissionObjective*>& DormantObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientUpdateActiveObjectiveSet");

	Params::PlayerMissionComponent_ClientUpdateActiveObjectiveSet Parms{};

	Parms.MissionClass = MissionClass;
	Parms.ActiveObjectiveSet = ActiveObjectiveSet;
	Parms.DormantObjectives = std::move(DormantObjectives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ClientUpdateMissionStatus
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionStatus                          Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ClientUpdateMissionStatus(TSubclassOf<class UMission> MissionClass, EMissionStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ClientUpdateMissionStatus");

	Params::PlayerMissionComponent_ClientUpdateMissionStatus Parms{};

	Parms.MissionClass = MissionClass;
	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ServerSetTrackedMission
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerMissionComponent::ServerSetTrackedMission(TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ServerSetTrackedMission");

	Params::PlayerMissionComponent_ServerSetTrackedMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ServerTrackNextActiveMissionInList
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UPlayerMissionComponent::ServerTrackNextActiveMissionInList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ServerTrackNextActiveMissionInList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.PlayerMissionComponent.ServerTrackPreviousActiveMissionInList
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UPlayerMissionComponent::ServerTrackPreviousActiveMissionInList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerMissionComponent", "ServerTrackPreviousActiveMissionInList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDebugMenu.AdvanceMission
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MissionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDebugMenu::AdvanceMission(const class FName& MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "AdvanceMission");

	Params::MissionDebugMenu_AdvanceMission Parms{};

	Parms.MissionId = MissionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDebugMenu.AdvanceToObjectiveSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MissionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ObjectiveSetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDebugMenu::AdvanceToObjectiveSet(const class FName& MissionId, const class FName& ObjectiveSetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "AdvanceToObjectiveSet");

	Params::MissionDebugMenu_AdvanceToObjectiveSet Parms{};

	Parms.MissionId = MissionId;
	Parms.ObjectiveSetId = ObjectiveSetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDebugMenu.CompleteMission
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MissionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDebugMenu::CompleteMission(const class FName& MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "CompleteMission");

	Params::MissionDebugMenu_CompleteMission Parms{};

	Parms.MissionId = MissionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDebugMenu.GetItemsForMissionGraph
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxCascadingListItemData>OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionDebugMenu::GetItemsForMissionGraph(TArray<struct FGbxCascadingListItemData>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "GetItemsForMissionGraph");

	Params::MissionDebugMenu_GetItemsForMissionGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);
}


// Function GbxMission.MissionDebugMenu.GetItemsForMissionStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMissionDebugStatus                     Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxCascadingListItemData>OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionDebugMenu::GetItemsForMissionStatus(EMissionDebugStatus Status, TArray<struct FGbxCascadingListItemData>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "GetItemsForMissionStatus");

	Params::MissionDebugMenu_GetItemsForMissionStatus Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);
}


// Function GbxMission.MissionDebugMenu.SelectMissionGraph
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MissionGraphId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionDebugMenu::SelectMissionGraph(const class FName& MissionGraphId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "SelectMissionGraph");

	Params::MissionDebugMenu_SelectMissionGraph Parms{};

	Parms.MissionGraphId = MissionGraphId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionDebugMenu.GetMissionStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MissionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionStatus                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMissionStatus UMissionDebugMenu::GetMissionStatus(const class FName& MissionId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "GetMissionStatus");

	Params::MissionDebugMenu_GetMissionStatus Parms{};

	Parms.MissionId = MissionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionDebugMenu.GetMissionWithId
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MissionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMission*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMission* UMissionDebugMenu::GetMissionWithId(const class FName& MissionId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "GetMissionWithId");

	Params::MissionDebugMenu_GetMissionWithId Parms{};

	Parms.MissionId = MissionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionDebugMenu.GetObjectiveSetItemsForMission
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MissionId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxCascadingListItemData>OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionDebugMenu::GetObjectiveSetItemsForMission(const class FName& MissionId, TArray<struct FGbxCascadingListItemData>* OutItems) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "GetObjectiveSetItemsForMission");

	Params::MissionDebugMenu_GetObjectiveSetItemsForMission Parms{};

	Parms.MissionId = MissionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);
}


// Function GbxMission.MissionDebugMenu.NotifyMissionActivationCheatStart
// (Final, Native, Public, BlueprintCallable, Const)

void UMissionDebugMenu::NotifyMissionActivationCheatStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionDebugMenu", "NotifyMissionActivationCheatStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.ActivateMission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::ActivateMission(class UObject* WorldContextObject, TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "ActivateMission");

	Params::MissionFunctionLibrary_ActivateMission Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.ActivateMissionAtObjectiveSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveSetReference    ObjectiveSetRef                                        (Parm, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::ActivateMissionAtObjectiveSet(class UObject* WorldContextObject, const struct FMissionObjectiveSetReference& ObjectiveSetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "ActivateMissionAtObjectiveSet");

	Params::MissionFunctionLibrary_ActivateMissionAtObjectiveSet Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveSetRef = std::move(ObjectiveSetRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.AdvanceMissionObjectiveSetRef
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveSetReference    ObjectiveSetRef                                        (Parm, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::AdvanceMissionObjectiveSetRef(class UObject* WorldContextObject, const struct FMissionObjectiveSetReference& ObjectiveSetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "AdvanceMissionObjectiveSetRef");

	Params::MissionFunctionLibrary_AdvanceMissionObjectiveSetRef Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveSetRef = std::move(ObjectiveSetRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.AdvanceToBreadcrumbObjective
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveReference       BreadcrumbObjectiveRef                                 (Parm, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::AdvanceToBreadcrumbObjective(class UObject* WorldContextObject, const struct FMissionObjectiveReference& BreadcrumbObjectiveRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "AdvanceToBreadcrumbObjective");

	Params::MissionFunctionLibrary_AdvanceToBreadcrumbObjective Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BreadcrumbObjectiveRef = std::move(BreadcrumbObjectiveRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.CompleteMission
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::CompleteMission(class UObject* WorldContextObject, TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "CompleteMission");

	Params::MissionFunctionLibrary_CompleteMission Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.CreateMission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMission*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMission* UMissionFunctionLibrary::CreateMission(class UObject* WorldContextObject, TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "CreateMission");

	Params::MissionFunctionLibrary_CreateMission Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.DebugJumpToMissionObjectiveSetRef
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveSetReference    ObjectiveSetRef                                        (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsBranchingMission                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::DebugJumpToMissionObjectiveSetRef(class UObject* WorldContextObject, const struct FMissionObjectiveSetReference& ObjectiveSetRef, bool bIsBranchingMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "DebugJumpToMissionObjectiveSetRef");

	Params::MissionFunctionLibrary_DebugJumpToMissionObjectiveSetRef Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveSetRef = std::move(ObjectiveSetRef);
	Parms.bIsBranchingMission = bIsBranchingMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.EqualEqual_MissionObjectiveReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMissionObjectiveReference       A                                                      (Parm, NativeAccessSpecifierPublic)
// struct FMissionObjectiveReference       B                                                      (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionFunctionLibrary::EqualEqual_MissionObjectiveReference(const struct FMissionObjectiveReference& A, const struct FMissionObjectiveReference& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "EqualEqual_MissionObjectiveReference");

	Params::MissionFunctionLibrary_EqualEqual_MissionObjectiveReference Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.EqualEqual_MissionObjectiveSetReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMissionObjectiveSetReference    A                                                      (Parm, NativeAccessSpecifierPublic)
// struct FMissionObjectiveSetReference    B                                                      (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionFunctionLibrary::EqualEqual_MissionObjectiveSetReference(const struct FMissionObjectiveSetReference& A, const struct FMissionObjectiveSetReference& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "EqualEqual_MissionObjectiveSetReference");

	Params::MissionFunctionLibrary_EqualEqual_MissionObjectiveSetReference Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.FillMissionEventRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMissionEventReference           MissionEventRef                                        (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::FillMissionEventRef(struct FMissionEventReference& MissionEventRef, TSubclassOf<class UMission>& MissionClass, class FName EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "FillMissionEventRef");

	Params::MissionFunctionLibrary_FillMissionEventRef Parms{};

	Parms.MissionEventRef = std::move(MissionEventRef);
	Parms.MissionClass = MissionClass;
	Parms.EventName = EventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MissionEventRef = std::move(Parms.MissionEventRef);
	MissionClass = Parms.MissionClass;
}


// Function GbxMission.MissionFunctionLibrary.FillMissionObjectiveRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMissionObjectiveReference       MissionObjectiveRef                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::FillMissionObjectiveRef(struct FMissionObjectiveReference& MissionObjectiveRef, TSubclassOf<class UMission>& MissionClass, class FName Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "FillMissionObjectiveRef");

	Params::MissionFunctionLibrary_FillMissionObjectiveRef Parms{};

	Parms.MissionObjectiveRef = std::move(MissionObjectiveRef);
	Parms.MissionClass = MissionClass;
	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MissionObjectiveRef = std::move(Parms.MissionObjectiveRef);
	MissionClass = Parms.MissionClass;
}


// Function GbxMission.MissionFunctionLibrary.FillMissionObjectiveRefWeak
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMissionObjectiveReferenceWeak   MissionObjectiveRef                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::FillMissionObjectiveRefWeak(struct FMissionObjectiveReferenceWeak& MissionObjectiveRef, TSubclassOf<class UMission>& MissionClass, class FName Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "FillMissionObjectiveRefWeak");

	Params::MissionFunctionLibrary_FillMissionObjectiveRefWeak Parms{};

	Parms.MissionObjectiveRef = std::move(MissionObjectiveRef);
	Parms.MissionClass = MissionClass;
	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MissionObjectiveRef = std::move(Parms.MissionObjectiveRef);
	MissionClass = Parms.MissionClass;
}


// Function GbxMission.MissionFunctionLibrary.FillMissionObjectiveSetRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMissionObjectiveSetReference    MissionObjectiveSetRef                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ObjectiveSet                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::FillMissionObjectiveSetRef(struct FMissionObjectiveSetReference& MissionObjectiveSetRef, TSubclassOf<class UMission>& MissionClass, class FName ObjectiveSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "FillMissionObjectiveSetRef");

	Params::MissionFunctionLibrary_FillMissionObjectiveSetRef Parms{};

	Parms.MissionObjectiveSetRef = std::move(MissionObjectiveSetRef);
	Parms.MissionClass = MissionClass;
	Parms.ObjectiveSet = ObjectiveSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MissionObjectiveSetRef = std::move(Parms.MissionObjectiveSetRef);
	MissionClass = Parms.MissionClass;
}


// Function GbxMission.MissionFunctionLibrary.GetActiveMissions
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMission*>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMission*> UMissionFunctionLibrary::GetActiveMissions(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetActiveMissions");

	Params::MissionFunctionLibrary_GetActiveMissions Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetActivePlotMission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMission> UMissionFunctionLibrary::GetActivePlotMission(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetActivePlotMission");

	Params::MissionFunctionLibrary_GetActivePlotMission Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetCurrentlyTrackedMission
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMission> UMissionFunctionLibrary::GetCurrentlyTrackedMission(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetCurrentlyTrackedMission");

	Params::MissionFunctionLibrary_GetCurrentlyTrackedMission Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetEventNameListForMission
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     NamesList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetEventNameListForMission(TSubclassOf<class UMission> MissionClass, TArray<class FName>* NamesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetEventNameListForMission");

	Params::MissionFunctionLibrary_GetEventNameListForMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NamesList != nullptr)
		*NamesList = std::move(Parms.NamesList);
}


// Function GbxMission.MissionFunctionLibrary.GetMission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMission*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMission* UMissionFunctionLibrary::GetMission(class UObject* WorldContextObject, TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMission");

	Params::MissionFunctionLibrary_GetMission Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionClassFromObjectiveReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMissionObjectiveReference       ObjectiveReference                                     (Parm, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMission> UMissionFunctionLibrary::GetMissionClassFromObjectiveReference(const struct FMissionObjectiveReference& ObjectiveReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionClassFromObjectiveReference");

	Params::MissionFunctionLibrary_GetMissionClassFromObjectiveReference Parms{};

	Parms.ObjectiveReference = std::move(ObjectiveReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionClassFromObjectiveReferenceWeak
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMissionObjectiveReferenceWeak   ObjectiveReference                                     (Parm, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMission> UMissionFunctionLibrary::GetMissionClassFromObjectiveReferenceWeak(const struct FMissionObjectiveReferenceWeak& ObjectiveReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionClassFromObjectiveReferenceWeak");

	Params::MissionFunctionLibrary_GetMissionClassFromObjectiveReferenceWeak Parms{};

	Parms.ObjectiveReference = std::move(ObjectiveReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMission*                         MissionObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMissionFunctionLibrary::GetMissionLevel(class UMission* MissionObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionLevel");

	Params::MissionFunctionLibrary_GetMissionLevel Parms{};

	Parms.MissionObj = MissionObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionObjectiveCount
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveReference       ObjectiveRef                                           (Parm, NativeAccessSpecifierPublic)
// int32                                   CurrentObjectiveCount                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalObjectiveCount                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetMissionObjectiveCount(class UObject* WorldContextObject, const struct FMissionObjectiveReference& ObjectiveRef, int32* CurrentObjectiveCount, int32* TotalObjectiveCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionObjectiveCount");

	Params::MissionFunctionLibrary_GetMissionObjectiveCount Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveRef = std::move(ObjectiveRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentObjectiveCount != nullptr)
		*CurrentObjectiveCount = Parms.CurrentObjectiveCount;

	if (TotalObjectiveCount != nullptr)
		*TotalObjectiveCount = Parms.TotalObjectiveCount;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionObjectiveSetStatusRef
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveSetReference    ObjectiveSetRef                                        (Parm, NativeAccessSpecifierPublic)
// EMissionObjectiveSetStatus              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMissionObjectiveSetStatus UMissionFunctionLibrary::GetMissionObjectiveSetStatusRef(class UObject* WorldContextObject, const struct FMissionObjectiveSetReference& ObjectiveSetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionObjectiveSetStatusRef");

	Params::MissionFunctionLibrary_GetMissionObjectiveSetStatusRef Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveSetRef = std::move(ObjectiveSetRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionObjectiveStatusRef
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveReference       ObjectiveRef                                           (Parm, NativeAccessSpecifierPublic)
// class UObject*                          OptionalContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionObjectiveStatus                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMissionObjectiveStatus UMissionFunctionLibrary::GetMissionObjectiveStatusRef(class UObject* WorldContextObject, const struct FMissionObjectiveReference& ObjectiveRef, class UObject* OptionalContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionObjectiveStatusRef");

	Params::MissionFunctionLibrary_GetMissionObjectiveStatusRef Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveRef = std::move(ObjectiveRef);
	Parms.OptionalContext = OptionalContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetMissionStatus
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionStatus                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMissionStatus UMissionFunctionLibrary::GetMissionStatus(class UObject* WorldContextObject, TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetMissionStatus");

	Params::MissionFunctionLibrary_GetMissionStatus Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetObjectiveNameListForMission
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     NamesList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetObjectiveNameListForMission(TSubclassOf<class UMission> MissionClass, TArray<class FName>* NamesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetObjectiveNameListForMission");

	Params::MissionFunctionLibrary_GetObjectiveNameListForMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NamesList != nullptr)
		*NamesList = std::move(Parms.NamesList);
}


// Function GbxMission.MissionFunctionLibrary.GetObjectiveNameListForMissionFromAssetSubclass
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSoftClassPtr<class UClass>             Mission                                                (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     NamesList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetObjectiveNameListForMissionFromAssetSubclass(TSoftClassPtr<class UClass> Mission, TArray<class FName>* NamesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetObjectiveNameListForMissionFromAssetSubclass");

	Params::MissionFunctionLibrary_GetObjectiveNameListForMissionFromAssetSubclass Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NamesList != nullptr)
		*NamesList = std::move(Parms.NamesList);
}


// Function GbxMission.MissionFunctionLibrary.GetObjectiveSetListForMission
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMissionObjectiveSet*>     ObjectiveSetList                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetObjectiveSetListForMission(TSubclassOf<class UMission> MissionClass, TArray<class UMissionObjectiveSet*>* ObjectiveSetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetObjectiveSetListForMission");

	Params::MissionFunctionLibrary_GetObjectiveSetListForMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectiveSetList != nullptr)
		*ObjectiveSetList = std::move(Parms.ObjectiveSetList);
}


// Function GbxMission.MissionFunctionLibrary.GetObjectiveSetNameListForMission
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     NamesList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetObjectiveSetNameListForMission(TSubclassOf<class UMission> MissionClass, TArray<class FName>* NamesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetObjectiveSetNameListForMission");

	Params::MissionFunctionLibrary_GetObjectiveSetNameListForMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NamesList != nullptr)
		*NamesList = std::move(Parms.NamesList);
}


// Function GbxMission.MissionFunctionLibrary.GetObjectiveSetNameListForMissionFromAssetSubclass
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSoftClassPtr<class UClass>             MissionClass                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     NamesList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetObjectiveSetNameListForMissionFromAssetSubclass(TSoftClassPtr<class UClass> MissionClass, TArray<class FName>* NamesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetObjectiveSetNameListForMissionFromAssetSubclass");

	Params::MissionFunctionLibrary_GetObjectiveSetNameListForMissionFromAssetSubclass Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NamesList != nullptr)
		*NamesList = std::move(Parms.NamesList);
}


// Function GbxMission.MissionFunctionLibrary.GetPlotMissionIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMission*                         MissionObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMissionFunctionLibrary::GetPlotMissionIndex(class UMission* MissionObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetPlotMissionIndex");

	Params::MissionFunctionLibrary_GetPlotMissionIndex Parms{};

	Parms.MissionObj = MissionObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.GetSoftObjectiveSetListForMission
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// TSoftClassPtr<class UClass>             MissionClass                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSoftObjectPtr<class UMissionObjectiveSet>>SoftObjectiveSetList                                   (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::GetSoftObjectiveSetListForMission(TSoftClassPtr<class UClass> MissionClass, TArray<TSoftObjectPtr<class UMissionObjectiveSet>>* SoftObjectiveSetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "GetSoftObjectiveSetListForMission");

	Params::MissionFunctionLibrary_GetSoftObjectiveSetListForMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SoftObjectiveSetList != nullptr)
		*SoftObjectiveSetList = std::move(Parms.SoftObjectiveSetList);
}


// Function GbxMission.MissionFunctionLibrary.JumpToMissionObjectiveSetRef
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveSetReference    ObjectiveSetRef                                        (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsBranchingMission                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::JumpToMissionObjectiveSetRef(class UObject* WorldContextObject, const struct FMissionObjectiveSetReference& ObjectiveSetRef, bool bIsBranchingMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "JumpToMissionObjectiveSetRef");

	Params::MissionFunctionLibrary_JumpToMissionObjectiveSetRef Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveSetRef = std::move(ObjectiveSetRef);
	Parms.bIsBranchingMission = bIsBranchingMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.ResolveMissionSoftClassReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftClassPtr<class UClass>             Mission                                                (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMission> UMissionFunctionLibrary::ResolveMissionSoftClassReference(TSoftClassPtr<class UClass> Mission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "ResolveMissionSoftClassReference");

	Params::MissionFunctionLibrary_ResolveMissionSoftClassReference Parms{};

	Parms.Mission = Mission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionFunctionLibrary.SendMissionEvent
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionEventReference           EventRef                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OptionalContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::SendMissionEvent(class UObject* WorldContextObject, const struct FMissionEventReference& EventRef, class UObject* OptionalContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "SendMissionEvent");

	Params::MissionFunctionLibrary_SendMissionEvent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventRef = std::move(EventRef);
	Parms.OptionalContext = OptionalContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.SendMissionEventWithContext
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FMissionEventReference           EventRef                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::SendMissionEventWithContext(const struct FMissionEventReference& EventRef, class UObject* WorldContextObject, class UObject* OptionalContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "SendMissionEventWithContext");

	Params::MissionFunctionLibrary_SendMissionEventWithContext Parms{};

	Parms.EventRef = std::move(EventRef);
	Parms.WorldContextObject = WorldContextObject;
	Parms.OptionalContext = OptionalContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.TrackActiveMission
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::TrackActiveMission(class UObject* WorldContextObject, TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "TrackActiveMission");

	Params::MissionFunctionLibrary_TrackActiveMission Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.TrackNextActiveMissionInList
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::TrackNextActiveMissionInList(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "TrackNextActiveMissionInList");

	Params::MissionFunctionLibrary_TrackNextActiveMissionInList Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.TrackPreviousActiveMissionInList
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::TrackPreviousActiveMissionInList(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "TrackPreviousActiveMissionInList");

	Params::MissionFunctionLibrary_TrackPreviousActiveMissionInList Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionFunctionLibrary.UpdateMissionObjectiveRef
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMissionObjectiveReference       ObjectiveRef                                           (Parm, NativeAccessSpecifierPublic)

void UMissionFunctionLibrary::UpdateMissionObjectiveRef(class UObject* WorldContextObject, const struct FMissionObjectiveReference& ObjectiveRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MissionFunctionLibrary", "UpdateMissionObjectiveRef");

	Params::MissionFunctionLibrary_UpdateMissionObjectiveRef Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectiveRef = std::move(ObjectiveRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxMission.MissionLocationData.EnabledConditionRequiresNativeClass
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionLocationData::EnabledConditionRequiresNativeClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionLocationData", "EnabledConditionRequiresNativeClass");

	Params::MissionLocationData_EnabledConditionRequiresNativeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionLocationData.GetRequiredInterface
// (Final, Native, Public)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UMissionLocationData::GetRequiredInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionLocationData", "GetRequiredInterface");

	Params::MissionLocationData_GetRequiredInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxMission.MissionObjectiveReferenceInterface.GetMissionObjectiveReferences
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FMissionObjectiveReference>OutMissionObjectives                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void IMissionObjectiveReferenceInterface::GetMissionObjectiveReferences(TArray<struct FMissionObjectiveReference>* OutMissionObjectives) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionObjectiveReferenceInterface", "GetMissionObjectiveReferences");

	Params::MissionObjectiveReferenceInterface_GetMissionObjectiveReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissionObjectives != nullptr)
		*OutMissionObjectives = std::move(Parms.OutMissionObjectives);
}


// Function GbxMission.MissionObjectiveSetReferenceInterface.GetMissionObjectiveSetReferences
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FMissionObjectiveSetReference>OutMissionObjectiveSets                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void IMissionObjectiveSetReferenceInterface::GetMissionObjectiveSetReferences(TArray<struct FMissionObjectiveSetReference>* OutMissionObjectiveSets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionObjectiveSetReferenceInterface", "GetMissionObjectiveSetReferences");

	Params::MissionObjectiveSetReferenceInterface_GetMissionObjectiveSetReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissionObjectiveSets != nullptr)
		*OutMissionObjectiveSets = std::move(Parms.OutMissionObjectiveSets);
}


// Function GbxMission.MissionObserverComponent.GetUpdateEventObject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  OutMissionInitialized                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  OutMissionUpdate                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  OutMissionObjectiveUpdate                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  OutMissionObjectiveSetUpdate                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMissionObserverComponent::GetUpdateEventObject(TArray<class UObject*>* OutMissionInitialized, TArray<class UObject*>* OutMissionUpdate, TArray<class UObject*>* OutMissionObjectiveUpdate, TArray<class UObject*>* OutMissionObjectiveSetUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionObserverComponent", "GetUpdateEventObject");

	Params::MissionObserverComponent_GetUpdateEventObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissionInitialized != nullptr)
		*OutMissionInitialized = std::move(Parms.OutMissionInitialized);

	if (OutMissionUpdate != nullptr)
		*OutMissionUpdate = std::move(Parms.OutMissionUpdate);

	if (OutMissionObjectiveUpdate != nullptr)
		*OutMissionObjectiveUpdate = std::move(Parms.OutMissionObjectiveUpdate);

	if (OutMissionObjectiveSetUpdate != nullptr)
		*OutMissionObjectiveSetUpdate = std::move(Parms.OutMissionObjectiveSetUpdate);

	return Parms.ReturnValue;
}


// Function GbxMission.MissionObserverComponent.ObserverMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMission>             MissionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMissionObserverComponent::ObserverMission(TSubclassOf<class UMission> MissionClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionObserverComponent", "ObserverMission");

	Params::MissionObserverComponent_ObserverMission Parms{};

	Parms.MissionClass = MissionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

