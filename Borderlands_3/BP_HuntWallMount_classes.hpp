#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HuntWallMount

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Enum_TrophyState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HuntWallMount.BP_HuntWallMount_C
// 0x00A0 (0x0730 - 0x0690)
class ABP_HuntWallMount_C final : public AConditionalFlavorTextIO
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0690(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Head;                                              // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base;                                              // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            TrophyMesh;                                        // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HuntChallenge;                                     // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C8[0x8];                                      // 0x06C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TrophyTransform;                                   // 0x06D0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	Enum_TrophyState                              Trophy_State;                                      // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelData*                             ChallengeZoneMap;                                  // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameStatData*                          TrophyStat;                                        // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      MyPlayerController;                                // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_Trophy_State_NewEnumerator1;                  // 0x0720(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_Trophy_State_NewEnumerator2;                  // 0x0728(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Challenge_Incomplete();
	void Challenge_Complete();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void EvaluateChallenge();
	void __UserState_Trophy_State_2(bool bFromLoad);
	void __UserState_Trophy_State_0(bool bFromLoad);
	void __UserState_Trophy_State_1(bool bFromLoad);
	void ChallengeCompleted(class UChallengesComponent* ChallengeComponent, class UClass* ChallengeClass);
	void BndEvt__UsableComponent_K2Node_ComponentBoundEvent_0_UsableUsedOnChannelSignature__DelegateSignature_BP_HuntWallMount(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void CheckFirstUseSparkle(bool ShutOff);
	void ExecuteUbergraph_BP_HuntWallMount(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HuntWallMount_C">();
	}
	static class ABP_HuntWallMount_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HuntWallMount_C>();
	}
};
static_assert(alignof(ABP_HuntWallMount_C) == 0x000010, "Wrong alignment on ABP_HuntWallMount_C");
static_assert(sizeof(ABP_HuntWallMount_C) == 0x000730, "Wrong size on ABP_HuntWallMount_C");
static_assert(offsetof(ABP_HuntWallMount_C, UberGraphFrame) == 0x000690, "Member 'ABP_HuntWallMount_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, ParticleSystem) == 0x000698, "Member 'ABP_HuntWallMount_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, Box) == 0x0006A0, "Member 'ABP_HuntWallMount_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, Head) == 0x0006A8, "Member 'ABP_HuntWallMount_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, Base) == 0x0006B0, "Member 'ABP_HuntWallMount_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, TrophyMesh) == 0x0006B8, "Member 'ABP_HuntWallMount_C::TrophyMesh' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, HuntChallenge) == 0x0006C0, "Member 'ABP_HuntWallMount_C::HuntChallenge' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, TrophyTransform) == 0x0006D0, "Member 'ABP_HuntWallMount_C::TrophyTransform' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, Trophy_State) == 0x000700, "Member 'ABP_HuntWallMount_C::Trophy_State' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, ChallengeZoneMap) == 0x000708, "Member 'ABP_HuntWallMount_C::ChallengeZoneMap' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, TrophyStat) == 0x000710, "Member 'ABP_HuntWallMount_C::TrophyStat' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, MyPlayerController) == 0x000718, "Member 'ABP_HuntWallMount_C::MyPlayerController' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, Cond_Trophy_State_NewEnumerator1) == 0x000720, "Member 'ABP_HuntWallMount_C::Cond_Trophy_State_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(ABP_HuntWallMount_C, Cond_Trophy_State_NewEnumerator2) == 0x000728, "Member 'ABP_HuntWallMount_C::Cond_Trophy_State_NewEnumerator2' has a wrong offset!");

}

