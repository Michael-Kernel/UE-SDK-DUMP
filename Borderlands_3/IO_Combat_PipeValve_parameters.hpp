#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IO_Combat_PipeValve

#include "Basic.hpp"

#include "Enum_IO_ExplodingPipe_DestroyedState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_Switch_State_structs.hpp"


namespace SDK::Params
{

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.GetPipeFlowState
// 0x0002 (0x0002 - 0x0000)
struct IO_Combat_PipeValve_C_GetPipeFlowState final
{
public:
	bool                                          HasFlow;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_GetPipeFlowState) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_GetPipeFlowState");
static_assert(sizeof(IO_Combat_PipeValve_C_GetPipeFlowState) == 0x000002, "Wrong size on IO_Combat_PipeValve_C_GetPipeFlowState");
static_assert(offsetof(IO_Combat_PipeValve_C_GetPipeFlowState, HasFlow) == 0x000000, "Member 'IO_Combat_PipeValve_C_GetPipeFlowState::HasFlow' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_GetPipeFlowState, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'IO_Combat_PipeValve_C_GetPipeFlowState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.GetPipeDestroyedState
// 0x0002 (0x0002 - 0x0000)
struct IO_Combat_PipeValve_C_GetPipeDestroyedState final
{
public:
	bool                                          Destroyed;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_GetPipeDestroyedState) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_GetPipeDestroyedState");
static_assert(sizeof(IO_Combat_PipeValve_C_GetPipeDestroyedState) == 0x000002, "Wrong size on IO_Combat_PipeValve_C_GetPipeDestroyedState");
static_assert(offsetof(IO_Combat_PipeValve_C_GetPipeDestroyedState, Destroyed) == 0x000000, "Member 'IO_Combat_PipeValve_C_GetPipeDestroyedState::Destroyed' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_GetPipeDestroyedState, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'IO_Combat_PipeValve_C_GetPipeDestroyedState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SprayTrace
// 0x0268 (0x0268 - 0x0000)
struct IO_Combat_PipeValve_C_SprayTrace final
{
public:
	float                                         ProjectileRadius;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectTypeQuery                              ObjectTypeToTestAgainst;                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CollissionTraceChannel;                            // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OutHitActor;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutHitLocation;                                    // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutHitNormal;                                      // 0x001C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         LocalActorsToIgnore;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0054(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0060(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue1;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictProjectilePathParams           K2Node_MakeStruct_PredictProjectilePathParams;     // 0x00A0(0x0060)()
	struct FPredictProjectilePathResult           CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult; // 0x0100(0x00C0)(ContainsInstancedReference)
	bool                                          CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue; // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CA[0x2];                                      // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0230(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x023C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPredictProjectilePathPointData        CallFunc_Array_Get_Item1;                          // 0x024C(0x001C)(NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_SprayTrace) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_SprayTrace");
static_assert(sizeof(IO_Combat_PipeValve_C_SprayTrace) == 0x000268, "Wrong size on IO_Combat_PipeValve_C_SprayTrace");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, ProjectileRadius) == 0x000000, "Member 'IO_Combat_PipeValve_C_SprayTrace::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, ObjectTypeToTestAgainst) == 0x000004, "Member 'IO_Combat_PipeValve_C_SprayTrace::ObjectTypeToTestAgainst' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CollissionTraceChannel) == 0x000005, "Member 'IO_Combat_PipeValve_C_SprayTrace::CollissionTraceChannel' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, OutHitActor) == 0x000008, "Member 'IO_Combat_PipeValve_C_SprayTrace::OutHitActor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, OutHitLocation) == 0x000010, "Member 'IO_Combat_PipeValve_C_SprayTrace::OutHitLocation' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, OutHitNormal) == 0x00001C, "Member 'IO_Combat_PipeValve_C_SprayTrace::OutHitNormal' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, LocalActorsToIgnore) == 0x000028, "Member 'IO_Combat_PipeValve_C_SprayTrace::LocalActorsToIgnore' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, K2Node_MakeArray_Array) == 0x000038, "Member 'IO_Combat_PipeValve_C_SprayTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, Temp_int_Array_Index_Variable) == 0x000048, "Member 'IO_Combat_PipeValve_C_SprayTrace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'IO_Combat_PipeValve_C_SprayTrace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000054, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000060, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_GetForwardVector_ReturnValue) == 0x00006C, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Array_Get_Item) == 0x000078, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Array_AddUnique_ReturnValue) == 0x000084, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Array_AddUnique_ReturnValue1) == 0x00008C, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Array_AddUnique_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000090, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, K2Node_MakeStruct_PredictProjectilePathParams) == 0x0000A0, "Member 'IO_Combat_PipeValve_C_SprayTrace::K2Node_MakeStruct_PredictProjectilePathParams' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult) == 0x000100, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue) == 0x0001C0, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Array_Length_ReturnValue1) == 0x0001C4, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x0001C8, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001C9, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_Time) == 0x0001CC, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_Distance) == 0x0001D0, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_Location) == 0x0001D4, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x0001E0, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_Normal) == 0x0001EC, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x0001F8, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_PhysMat) == 0x000208, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_HitActor) == 0x000210, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_HitComponent) == 0x000218, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_HitBoneName) == 0x000220, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_HitItem) == 0x000228, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_FaceIndex) == 0x00022C, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_TraceStart) == 0x000230, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_BreakHitResult_TraceEnd) == 0x00023C, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Subtract_IntInt_ReturnValue) == 0x000248, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SprayTrace, CallFunc_Array_Get_Item1) == 0x00024C, "Member 'IO_Combat_PipeValve_C_SprayTrace::CallFunc_Array_Get_Item1' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.CheckForSprayDamage
// 0x00C0 (0x00C0 - 0x0000)
struct IO_Combat_PipeValve_C_CheckForSprayDamage final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_SprayTrace_OutHitActor;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SprayTrace_OutHitLocation;                // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SprayTrace_OutHitNormal;                  // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Temp_struct_Variable;                              // 0x0030(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(IO_Combat_PipeValve_C_CheckForSprayDamage) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_CheckForSprayDamage");
static_assert(sizeof(IO_Combat_PipeValve_C_CheckForSprayDamage) == 0x0000C0, "Wrong size on IO_Combat_PipeValve_C_CheckForSprayDamage");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckForSprayDamage, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'IO_Combat_PipeValve_C_CheckForSprayDamage::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckForSprayDamage, CallFunc_SprayTrace_OutHitActor) == 0x000008, "Member 'IO_Combat_PipeValve_C_CheckForSprayDamage::CallFunc_SprayTrace_OutHitActor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckForSprayDamage, CallFunc_SprayTrace_OutHitLocation) == 0x000010, "Member 'IO_Combat_PipeValve_C_CheckForSprayDamage::CallFunc_SprayTrace_OutHitLocation' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckForSprayDamage, CallFunc_SprayTrace_OutHitNormal) == 0x00001C, "Member 'IO_Combat_PipeValve_C_CheckForSprayDamage::CallFunc_SprayTrace_OutHitNormal' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckForSprayDamage, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'IO_Combat_PipeValve_C_CheckForSprayDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckForSprayDamage, Temp_struct_Variable) == 0x000030, "Member 'IO_Combat_PipeValve_C_CheckForSprayDamage::Temp_struct_Variable' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SetupDestroyedPipes
// 0x0001 (0x0001 - 0x0000)
struct IO_Combat_PipeValve_C_SetupDestroyedPipes final
{
public:
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_SetupDestroyedPipes) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_SetupDestroyedPipes");
static_assert(sizeof(IO_Combat_PipeValve_C_SetupDestroyedPipes) == 0x000001, "Wrong size on IO_Combat_PipeValve_C_SetupDestroyedPipes");
static_assert(offsetof(IO_Combat_PipeValve_C_SetupDestroyedPipes, CallFunc_SetStaticMesh_ReturnValue) == 0x000000, "Member 'IO_Combat_PipeValve_C_SetupDestroyedPipes::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.TurnOnFlowFeedback
// 0x0048 (0x0048 - 0x0000)
struct IO_Combat_PipeValve_C_TurnOnFlowFeedback final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue1;         // 0x0038(0x0008)(NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_TurnOnFlowFeedback) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_TurnOnFlowFeedback");
static_assert(sizeof(IO_Combat_PipeValve_C_TurnOnFlowFeedback) == 0x000048, "Wrong size on IO_Combat_PipeValve_C_TurnOnFlowFeedback");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000020, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, K2Node_CreateDelegate_OutputDelegate1) == 0x000028, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, CallFunc_K2_SetTimerDelegate_ReturnValue1) == 0x000038, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::CallFunc_K2_SetTimerDelegate_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnOnFlowFeedback, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'IO_Combat_PipeValve_C_TurnOnFlowFeedback::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.TurnFlowOff
// 0x0001 (0x0001 - 0x0000)
struct IO_Combat_PipeValve_C_TurnFlowOff final
{
public:
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_TurnFlowOff) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_TurnFlowOff");
static_assert(sizeof(IO_Combat_PipeValve_C_TurnFlowOff) == 0x000001, "Wrong size on IO_Combat_PipeValve_C_TurnFlowOff");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnFlowOff, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000000, "Member 'IO_Combat_PipeValve_C_TurnFlowOff::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.TurnFlowOn
// 0x0001 (0x0001 - 0x0000)
struct IO_Combat_PipeValve_C_TurnFlowOn final
{
public:
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_TurnFlowOn) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_TurnFlowOn");
static_assert(sizeof(IO_Combat_PipeValve_C_TurnFlowOn) == 0x000001, "Wrong size on IO_Combat_PipeValve_C_TurnFlowOn");
static_assert(offsetof(IO_Combat_PipeValve_C_TurnFlowOn, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000000, "Member 'IO_Combat_PipeValve_C_TurnFlowOn::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.CheckChangeFlowState
// 0x0004 (0x0004 - 0x0000)
struct IO_Combat_PipeValve_C_CheckChangeFlowState final
{
public:
	bool                                          CallFunc_IsInEditorMode_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_Switch_State                             CallFunc_GetSwitchState_SwitchState;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_CheckChangeFlowState) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_CheckChangeFlowState");
static_assert(sizeof(IO_Combat_PipeValve_C_CheckChangeFlowState) == 0x000004, "Wrong size on IO_Combat_PipeValve_C_CheckChangeFlowState");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckChangeFlowState, CallFunc_IsInEditorMode_ReturnValue) == 0x000000, "Member 'IO_Combat_PipeValve_C_CheckChangeFlowState::CallFunc_IsInEditorMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckChangeFlowState, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'IO_Combat_PipeValve_C_CheckChangeFlowState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckChangeFlowState, CallFunc_GetSwitchState_SwitchState) == 0x000002, "Member 'IO_Combat_PipeValve_C_CheckChangeFlowState::CallFunc_GetSwitchState_SwitchState' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_CheckChangeFlowState, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'IO_Combat_PipeValve_C_CheckChangeFlowState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.InitialSetup
// 0x0410 (0x0410 - 0x0000)
struct IO_Combat_PipeValve_C_InitialSetup final
{
public:
	TArray<class UStaticMeshComponent*>           PipesMeshArray;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_SprayTrace_OutHitActor;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SprayTrace_OutHitLocation;                // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SprayTrace_OutHitNormal;                  // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0038(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x00C8(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult1;   // 0x0158(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult2;   // 0x01E8(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0278(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult3;   // 0x0288(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0318(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0338(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0348(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue1;               // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X1;                           // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0368(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0374(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x038C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue3;                  // 0x0398(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue1;             // 0x03A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X3;                           // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y3;                           // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z3;                           // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue4;                  // 0x03C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue2;             // 0x03CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X4;                           // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y4;                           // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z4;                           // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x03E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue5;                  // 0x03EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_InitialSetup) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_InitialSetup");
static_assert(sizeof(IO_Combat_PipeValve_C_InitialSetup) == 0x000410, "Wrong size on IO_Combat_PipeValve_C_InitialSetup");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, PipesMeshArray) == 0x000000, "Member 'IO_Combat_PipeValve_C_InitialSetup::PipesMeshArray' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, Temp_int_Array_Index_Variable) == 0x000010, "Member 'IO_Combat_PipeValve_C_InitialSetup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_SprayTrace_OutHitActor) == 0x000018, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_SprayTrace_OutHitActor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_SprayTrace_OutHitLocation) == 0x000020, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_SprayTrace_OutHitLocation' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_SprayTrace_OutHitNormal) == 0x00002C, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_SprayTrace_OutHitNormal' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000038, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0000C8, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_K2_SetRelativeLocation_SweepHitResult1) == 0x000158, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_K2_SetRelativeLocation_SweepHitResult1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_K2_SetRelativeLocation_SweepHitResult2) == 0x0001E8, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_K2_SetRelativeLocation_SweepHitResult2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000278, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_K2_SetRelativeLocation_SweepHitResult3) == 0x000288, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_K2_SetRelativeLocation_SweepHitResult3' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000318, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_VSize_ReturnValue) == 0x000324, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_X) == 0x000328, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Y) == 0x00032C, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Z) == 0x000330, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_FClamp_ReturnValue) == 0x000334, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_MakeVector_ReturnValue) == 0x000338, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Array_Get_Item) == 0x000348, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_IsValid_ReturnValue) == 0x000350, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Array_Length_ReturnValue) == 0x000354, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_SetStaticMesh_ReturnValue) == 0x000358, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_SetStaticMesh_ReturnValue1) == 0x000359, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_SetStaticMesh_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_X1) == 0x00035C, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Y1) == 0x000360, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Z1) == 0x000364, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_GetActorScale3D_ReturnValue) == 0x000368, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_MakeVector_ReturnValue1) == 0x000374, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_X2) == 0x000380, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Y2) == 0x000384, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Z2) == 0x000388, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_MakeVector_ReturnValue2) == 0x00038C, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_MakeVector_ReturnValue3) == 0x000398, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_MakeVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_GetActorScale3D_ReturnValue1) == 0x0003A4, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_GetActorScale3D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_X3) == 0x0003B0, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_X3' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Y3) == 0x0003B4, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Y3' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Z3) == 0x0003B8, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Z3' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003BC, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_MakeVector_ReturnValue4) == 0x0003C0, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_MakeVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_GetActorScale3D_ReturnValue2) == 0x0003CC, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_GetActorScale3D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_X4) == 0x0003D8, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_X4' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Y4) == 0x0003DC, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Y4' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_BreakVector_Z4) == 0x0003E0, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_BreakVector_Z4' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Less_FloatFloat_ReturnValue) == 0x0003E4, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, Temp_int_Loop_Counter_Variable) == 0x0003E8, "Member 'IO_Combat_PipeValve_C_InitialSetup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_MakeVector_ReturnValue5) == 0x0003EC, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_MakeVector_ReturnValue5' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Less_IntInt_ReturnValue) == 0x0003F8, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Add_IntInt_ReturnValue) == 0x0003FC, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000400, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Array_Add_ReturnValue) == 0x000404, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Array_Add_ReturnValue1) == 0x000408, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_InitialSetup, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x00040C, "Member 'IO_Combat_PipeValve_C_InitialSetup::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SetUpPipeValveMaterialParameters
// 0x00C0 (0x00C0 - 0x0000)
struct IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters final
{
public:
	class UStaticMeshComponent*                   StaticMeshIn;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDA_IO_ExplodingPipe_Alternate_C*       DA_ExplodingPipe_Alternate;                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               IconNormalMap;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               IconCompMap;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ElementHighlightColor;                             // 0x0020(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ElementBaseColor;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0060(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0070(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue1;     // 0x0080(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue1;   // 0x0090(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue2;   // 0x00A0(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDA_IO_ExplodingPipe_Alternate_C*       K2Node_DynamicCast_AsDA_IO_Exploding_Pipe_Alternate; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters");
static_assert(sizeof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters) == 0x0000C0, "Wrong size on IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, StaticMeshIn) == 0x000000, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::StaticMeshIn' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, DA_ExplodingPipe_Alternate) == 0x000008, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::DA_ExplodingPipe_Alternate' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, IconNormalMap) == 0x000010, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::IconNormalMap' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, IconCompMap) == 0x000018, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::IconCompMap' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, ElementHighlightColor) == 0x000020, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::ElementHighlightColor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, ElementBaseColor) == 0x000030, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::ElementBaseColor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, DynamicMaterial) == 0x000040, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_GetMaterial_ReturnValue) == 0x000050, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000058, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000060, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000070, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_GetVectorParameterValue_ReturnValue1) == 0x000080, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_GetVectorParameterValue_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_Multiply_LinearColorFloat_ReturnValue1) == 0x000090, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_Multiply_LinearColorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_Multiply_LinearColorFloat_ReturnValue2) == 0x0000A0, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_Multiply_LinearColorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, K2Node_DynamicCast_AsDA_IO_Exploding_Pipe_Alternate) == 0x0000B0, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::K2Node_DynamicCast_AsDA_IO_Exploding_Pipe_Alternate' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters, CallFunc_IsValid_ReturnValue1) == 0x0000B9, "Member 'IO_Combat_PipeValve_C_SetUpPipeValveMaterialParameters::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SwitchIsOn
// 0x0008 (0x0008 - 0x0000)
struct IO_Combat_PipeValve_C_SwitchIsOn final
{
public:
	class AActor*                                 LastActorToUseSwitch;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IO_Combat_PipeValve_C_SwitchIsOn) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_SwitchIsOn");
static_assert(sizeof(IO_Combat_PipeValve_C_SwitchIsOn) == 0x000008, "Wrong size on IO_Combat_PipeValve_C_SwitchIsOn");
static_assert(offsetof(IO_Combat_PipeValve_C_SwitchIsOn, LastActorToUseSwitch) == 0x000000, "Member 'IO_Combat_PipeValve_C_SwitchIsOn::LastActorToUseSwitch' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SwitchIsOff
// 0x0008 (0x0008 - 0x0000)
struct IO_Combat_PipeValve_C_SwitchIsOff final
{
public:
	class AActor*                                 LastActorToUseSwitch;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IO_Combat_PipeValve_C_SwitchIsOff) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_SwitchIsOff");
static_assert(sizeof(IO_Combat_PipeValve_C_SwitchIsOff) == 0x000008, "Wrong size on IO_Combat_PipeValve_C_SwitchIsOff");
static_assert(offsetof(IO_Combat_PipeValve_C_SwitchIsOff, LastActorToUseSwitch) == 0x000000, "Member 'IO_Combat_PipeValve_C_SwitchIsOff::LastActorToUseSwitch' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SetPipeState
// 0x0001 (0x0001 - 0x0000)
struct IO_Combat_PipeValve_C_SetPipeState final
{
public:
	Enum_IO_ExplodingPipe_DestroyedState          PipeState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IO_Combat_PipeValve_C_SetPipeState) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_SetPipeState");
static_assert(sizeof(IO_Combat_PipeValve_C_SetPipeState) == 0x000001, "Wrong size on IO_Combat_PipeValve_C_SetPipeState");
static_assert(offsetof(IO_Combat_PipeValve_C_SetPipeState, PipeState) == 0x000000, "Member 'IO_Combat_PipeValve_C_SetPipeState::PipeState' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.SetPipeFlowState
// 0x0001 (0x0001 - 0x0000)
struct IO_Combat_PipeValve_C_SetPipeFlowState final
{
public:
	bool                                          HasFlow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_SetPipeFlowState) == 0x000001, "Wrong alignment on IO_Combat_PipeValve_C_SetPipeFlowState");
static_assert(sizeof(IO_Combat_PipeValve_C_SetPipeFlowState) == 0x000001, "Wrong size on IO_Combat_PipeValve_C_SetPipeFlowState");
static_assert(offsetof(IO_Combat_PipeValve_C_SetPipeFlowState, HasFlow) == 0x000000, "Member 'IO_Combat_PipeValve_C_SetPipeFlowState::HasFlow' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve
// 0x0010 (0x0010 - 0x0000)
struct IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve final
{
public:
	class UDamageComponent*                       DamageReceiver;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageCauserComponent*                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve) == 0x000008, "Wrong alignment on IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve");
static_assert(sizeof(IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve) == 0x000010, "Wrong size on IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve");
static_assert(offsetof(IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve, DamageReceiver) == 0x000000, "Member 'IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve::DamageReceiver' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve, DamageCauser) == 0x000008, "Member 'IO_Combat_PipeValve_C_BndEvt__OakDamage_K2Node_ComponentBoundEvent_0_DamageCompHealthDepletedDelegate__DelegateSignature_IO_Combat_PipeValve::DamageCauser' has a wrong offset!");

// Function IO_Combat_PipeValve.IO_Combat_PipeValve_C.ExecuteUbergraph_IO_Combat_PipeValve
// 0x0150 (0x0150 - 0x0000)
struct IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* LastActorToUseSwitch)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_LastActorToUseSwitch1;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_LastActorToUseSwitch;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInEditorMode_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_IO_ExplodingPipe_DestroyedState          K2Node_Event_PipeState;                            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* LastActorToUseSwitch)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsInEditorMode_ReturnValue1;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInEditorMode_ReturnValue2;              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HasFlow;                              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0054(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       K2Node_ComponentBoundEvent_DamageReceiver;         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageCauserComponent*                 K2Node_ComponentBoundEvent_DamageCauser;           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_PlayExplosion_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X1;                           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_SprayTrace_OutHitActor;                   // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SprayTrace_OutHitLocation;                // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SprayTrace_OutHitNormal;                  // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue1;               // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	class AElementalPuddle*                       CallFunc_SpawnElementalPuddle_ReturnValue;         // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AElementalPuddle*                       CallFunc_SpawnElementalPuddle_ReturnValue1;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x013C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve) == 0x000010, "Wrong alignment on IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve");
static_assert(sizeof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve) == 0x000150, "Wrong size on IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, EntryPoint) == 0x000000, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::EntryPoint' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, Temp_bool_Has_Been_Initd_Variable) == 0x000018, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_CustomEvent_LastActorToUseSwitch1) == 0x000020, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_CustomEvent_LastActorToUseSwitch1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_CustomEvent_LastActorToUseSwitch) == 0x000030, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_CustomEvent_LastActorToUseSwitch' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_IsInEditorMode_ReturnValue) == 0x000038, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_IsInEditorMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_Event_PipeState) == 0x000039, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_Event_PipeState' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_SwitchEnum_CmpSuccess) == 0x00003A, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003B, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x00003C, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_CreateDelegate_OutputDelegate1) == 0x000040, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_IsInEditorMode_ReturnValue1) == 0x000050, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_IsInEditorMode_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_IsInEditorMode_ReturnValue2) == 0x000051, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_IsInEditorMode_ReturnValue2' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_Event_HasFlow) == 0x000052, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_Event_HasFlow' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000054, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_ComponentBoundEvent_DamageReceiver) == 0x000060, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_ComponentBoundEvent_DamageReceiver' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, K2Node_ComponentBoundEvent_DamageCauser) == 0x000068, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::K2Node_ComponentBoundEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_PlayExplosion_ReturnValue) == 0x000070, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_PlayExplosion_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_IsValid_ReturnValue1) == 0x000078, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_BreakVector_X) == 0x00007C, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_BreakVector_Y) == 0x000080, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_BreakVector_Z) == 0x000084, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, Temp_bool_IsClosed_Variable) == 0x000088, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_BreakVector_X1) == 0x00008C, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_BreakVector_Y1) == 0x000090, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_BreakVector_Z1) == 0x000094, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_SprayTrace_OutHitActor) == 0x000098, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_SprayTrace_OutHitActor' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_SprayTrace_OutHitLocation) == 0x0000A0, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_SprayTrace_OutHitLocation' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_SprayTrace_OutHitNormal) == 0x0000AC, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_SprayTrace_OutHitNormal' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_MakeTransform_ReturnValue) == 0x0000C0, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_MakeTransform_ReturnValue1) == 0x0000F0, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_MakeTransform_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_SpawnElementalPuddle_ReturnValue) == 0x000120, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_SpawnElementalPuddle_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_SpawnElementalPuddle_ReturnValue1) == 0x000128, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_SpawnElementalPuddle_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000130, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00013C, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_VSize_ReturnValue) == 0x000148, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00014C, "Member 'IO_Combat_PipeValve_C_ExecuteUbergraph_IO_Combat_PipeValve::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

}

