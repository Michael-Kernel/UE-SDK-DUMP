#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_ManufacturerReward

#include "Basic.hpp"


namespace SDK::Params
{

// Function Challenge_ManufacturerReward.Challenge_ManufacturerReward_C.ExecuteUbergraph_Challenge_ManufacturerReward
// 0x0030 (0x0030 - 0x0000)
struct Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AGbxPlayerController*             K2Node_Event_CompletedPlayer;                      // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakPlayerController*                   K2Node_DynamicCast_AsOak_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStatValue_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward) == 0x000008, "Wrong alignment on Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward");
static_assert(sizeof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward) == 0x000030, "Wrong size on Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, EntryPoint) == 0x000000, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, K2Node_Event_CompletedPlayer) == 0x000008, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::K2Node_Event_CompletedPlayer' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, K2Node_DynamicCast_AsOak_Player_Controller) == 0x000018, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::K2Node_DynamicCast_AsOak_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000024, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, CallFunc_GetStatValue_ReturnValue) == 0x000028, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::CallFunc_GetStatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'Challenge_ManufacturerReward_C_ExecuteUbergraph_Challenge_ManufacturerReward::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function Challenge_ManufacturerReward.Challenge_ManufacturerReward_C.CompletedChallenge
// 0x0008 (0x0008 - 0x0000)
struct Challenge_ManufacturerReward_C_CompletedChallenge final
{
public:
	const class AGbxPlayerController*             CompletedPlayer;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ManufacturerReward_C_CompletedChallenge) == 0x000008, "Wrong alignment on Challenge_ManufacturerReward_C_CompletedChallenge");
static_assert(sizeof(Challenge_ManufacturerReward_C_CompletedChallenge) == 0x000008, "Wrong size on Challenge_ManufacturerReward_C_CompletedChallenge");
static_assert(offsetof(Challenge_ManufacturerReward_C_CompletedChallenge, CompletedPlayer) == 0x000000, "Member 'Challenge_ManufacturerReward_C_CompletedChallenge::CompletedPlayer' has a wrong offset!");

}

