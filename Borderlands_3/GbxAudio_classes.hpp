#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAudio

#include "Basic.hpp"

#include "WwiseAudio_structs.hpp"
#include "WwiseAudio_classes.hpp"
#include "GbxAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GbxFluidSimulation_classes.hpp"
#include "GbxRuntime_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// Class GbxAudio.ParticleModuleGbxAudioBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleGbxAudioBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleGbxAudioBase">();
	}
	static class UParticleModuleGbxAudioBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleGbxAudioBase>();
	}
};
static_assert(alignof(UParticleModuleGbxAudioBase) == 0x000008, "Wrong alignment on UParticleModuleGbxAudioBase");
static_assert(sizeof(UParticleModuleGbxAudioBase) == 0x000038, "Wrong size on UParticleModuleGbxAudioBase");

// Class GbxAudio.ParticleModuleGbxAudioLoop
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleGbxAudioLoop final : public UParticleModuleGbxAudioBase
{
public:
	class UWwiseEvent*                            LoopStartEvent;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            LoopStopEvent;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseMultiPositionType                       MultiPositionType;                                 // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioComponentRadius;                              // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  GainOverLifetime;                                  // 0x0050(0x0038)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleGbxAudioLoop">();
	}
	static class UParticleModuleGbxAudioLoop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleGbxAudioLoop>();
	}
};
static_assert(alignof(UParticleModuleGbxAudioLoop) == 0x000008, "Wrong alignment on UParticleModuleGbxAudioLoop");
static_assert(sizeof(UParticleModuleGbxAudioLoop) == 0x000088, "Wrong size on UParticleModuleGbxAudioLoop");
static_assert(offsetof(UParticleModuleGbxAudioLoop, LoopStartEvent) == 0x000038, "Member 'UParticleModuleGbxAudioLoop::LoopStartEvent' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioLoop, LoopStopEvent) == 0x000040, "Member 'UParticleModuleGbxAudioLoop::LoopStopEvent' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioLoop, MultiPositionType) == 0x000048, "Member 'UParticleModuleGbxAudioLoop::MultiPositionType' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioLoop, AudioComponentRadius) == 0x00004C, "Member 'UParticleModuleGbxAudioLoop::AudioComponentRadius' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioLoop, GainOverLifetime) == 0x000050, "Member 'UParticleModuleGbxAudioLoop::GainOverLifetime' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationChooser
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientLocationChooser : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser">();
	}
	static class UActiveAmbientLocationChooser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser");
static_assert(sizeof(UActiveAmbientLocationChooser) == 0x000028, "Wrong size on UActiveAmbientLocationChooser");

// Class GbxAudio.ParticleModuleGbxAudioPool
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleGbxAudioPool final : public UParticleModuleGbxAudioBase
{
public:
	class UWwiseEvent*                            AudioEvent;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfAudioComponents;                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStealComponents;                                  // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioComponentRadius;                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  GainOverLifetime;                                  // 0x0050(0x0038)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleModuleGbxAudioPool">();
	}
	static class UParticleModuleGbxAudioPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleGbxAudioPool>();
	}
};
static_assert(alignof(UParticleModuleGbxAudioPool) == 0x000008, "Wrong alignment on UParticleModuleGbxAudioPool");
static_assert(sizeof(UParticleModuleGbxAudioPool) == 0x000088, "Wrong size on UParticleModuleGbxAudioPool");
static_assert(offsetof(UParticleModuleGbxAudioPool, AudioEvent) == 0x000038, "Member 'UParticleModuleGbxAudioPool::AudioEvent' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioPool, MaxNumberOfAudioComponents) == 0x000040, "Member 'UParticleModuleGbxAudioPool::MaxNumberOfAudioComponents' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioPool, bStealComponents) == 0x000044, "Member 'UParticleModuleGbxAudioPool::bStealComponents' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioPool, AudioComponentRadius) == 0x000048, "Member 'UParticleModuleGbxAudioPool::AudioComponentRadius' has a wrong offset!");
static_assert(offsetof(UParticleModuleGbxAudioPool, GainOverLifetime) == 0x000050, "Member 'UParticleModuleGbxAudioPool::GainOverLifetime' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationChooser_Blueprint
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientLocationChooser_Blueprint final : public UActiveAmbientLocationChooser
{
public:
	void InitLocationChooser(class UActiveAmbientSoundComponent* ActiveAmbientComponent);
	bool NominateSoundLocation(class UActiveAmbientSoundComponent* ActiveAmbientComponent, struct FVector* Out_Location, float Out_Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_Blueprint">();
	}
	static class UActiveAmbientLocationChooser_Blueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_Blueprint>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_Blueprint) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_Blueprint");
static_assert(sizeof(UActiveAmbientLocationChooser_Blueprint) == 0x000028, "Wrong size on UActiveAmbientLocationChooser_Blueprint");

// Class GbxAudio.LightAudioComponent
// 0x0098 (0x0368 - 0x02D0)
#pragma pack(push, 0x1)
class alignas(0x08) ULightAudioComponent : public USceneComponent
{
public:
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UWwiseRtpc*, float>                PersistentRTPCValues;                              // 0x02D8(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UWwiseEvent*>                    Loops;                                             // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWwiseLocationOverride>         RelativeDetailedLocations;                         // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDynamicPosition;                                  // 0x0348(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioDistanceThresholdManager*         SubscribedToManager;                               // 0x0350(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FWwisePlaybackInstance PostWwiseEvent(class UWwiseEvent* WwiseEvent);
	void SetRTPCValue(class UWwiseRtpc* GameParameter, float Value, bool bPersistent, float ValueChangeDuration, EWwiseCurveInterpolation FadeCurve);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LightAudioComponent">();
	}
	static class ULightAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightAudioComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(ULightAudioComponent) == 0x000008, "Wrong alignment on ULightAudioComponent");
static_assert(sizeof(ULightAudioComponent) == 0x000368, "Wrong size on ULightAudioComponent");
static_assert(offsetof(ULightAudioComponent, PersistentRTPCValues) == 0x0002D8, "Member 'ULightAudioComponent::PersistentRTPCValues' has a wrong offset!");
static_assert(offsetof(ULightAudioComponent, Loops) == 0x000328, "Member 'ULightAudioComponent::Loops' has a wrong offset!");
static_assert(offsetof(ULightAudioComponent, RelativeDetailedLocations) == 0x000338, "Member 'ULightAudioComponent::RelativeDetailedLocations' has a wrong offset!");
static_assert(offsetof(ULightAudioComponent, bDynamicPosition) == 0x000348, "Member 'ULightAudioComponent::bDynamicPosition' has a wrong offset!");
static_assert(offsetof(ULightAudioComponent, SubscribedToManager) == 0x000350, "Member 'ULightAudioComponent::SubscribedToManager' has a wrong offset!");

// Class GbxAudio.WindAudioLoopComponent
// 0x0038 (0x03A0 - 0x0368)
class UWindAudioLoopComponent final : public ULightAudioComponent
{
public:
	class UWwiseRtpc*                             WindSpeedAudioParameter;                           // 0x0368(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             WindAccelerationAudioParameter;                    // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWindDirectionalSensitivity            WindSensitivity;                                   // 0x0378(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindAudioLoopComponent">();
	}
	static class UWindAudioLoopComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindAudioLoopComponent>();
	}
};
static_assert(alignof(UWindAudioLoopComponent) == 0x000008, "Wrong alignment on UWindAudioLoopComponent");
static_assert(sizeof(UWindAudioLoopComponent) == 0x0003A0, "Wrong size on UWindAudioLoopComponent");
static_assert(offsetof(UWindAudioLoopComponent, WindSpeedAudioParameter) == 0x000368, "Member 'UWindAudioLoopComponent::WindSpeedAudioParameter' has a wrong offset!");
static_assert(offsetof(UWindAudioLoopComponent, WindAccelerationAudioParameter) == 0x000370, "Member 'UWindAudioLoopComponent::WindAccelerationAudioParameter' has a wrong offset!");
static_assert(offsetof(UWindAudioLoopComponent, WindSensitivity) == 0x000378, "Member 'UWindAudioLoopComponent::WindSensitivity' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationChooser_RandomWithinActor
// 0x0020 (0x0048 - 0x0028)
class UActiveAmbientLocationChooser_RandomWithinActor : public UActiveAmbientLocationChooser
{
public:
	TLazyObjectPtr<class AActor>                  WithinActor;                                       // 0x0028(0x001C)(Edit, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_RandomWithinActor">();
	}
	static class UActiveAmbientLocationChooser_RandomWithinActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_RandomWithinActor>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_RandomWithinActor) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_RandomWithinActor");
static_assert(sizeof(UActiveAmbientLocationChooser_RandomWithinActor) == 0x000048, "Wrong size on UActiveAmbientLocationChooser_RandomWithinActor");
static_assert(offsetof(UActiveAmbientLocationChooser_RandomWithinActor, WithinActor) == 0x000028, "Member 'UActiveAmbientLocationChooser_RandomWithinActor::WithinActor' has a wrong offset!");

// Class GbxAudio.WwiseListenerEffectComponent
// 0x0020 (0x0198 - 0x0178)
class UWwiseListenerEffectComponent final : public UActorComponent
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRegisteredWithAudioDevice;                        // 0x0180(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWwiseEffectInfo>               WwiseEffects;                                      // 0x0188(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void ApplyAudioEffect(class UWwiseAuxBus* Efx, float WetPercent, float DryPercent);
	void RemoveAllAudioEffects();
	void RemoveAudioEffect(class UWwiseAuxBus* Efx);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseListenerEffectComponent">();
	}
	static class UWwiseListenerEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseListenerEffectComponent>();
	}
};
static_assert(alignof(UWwiseListenerEffectComponent) == 0x000008, "Wrong alignment on UWwiseListenerEffectComponent");
static_assert(sizeof(UWwiseListenerEffectComponent) == 0x000198, "Wrong size on UWwiseListenerEffectComponent");
static_assert(offsetof(UWwiseListenerEffectComponent, bRegisteredWithAudioDevice) == 0x000180, "Member 'UWwiseListenerEffectComponent::bRegisteredWithAudioDevice' has a wrong offset!");
static_assert(offsetof(UWwiseListenerEffectComponent, WwiseEffects) == 0x000188, "Member 'UWwiseListenerEffectComponent::WwiseEffects' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationChooser_RandomWithTrace
// 0x0010 (0x0058 - 0x0048)
class UActiveAmbientLocationChooser_RandomWithTrace : public UActiveAmbientLocationChooser_RandomWithinActor
{
public:
	struct FVector                                TraceVector;                                       // 0x0048(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_RandomWithTrace">();
	}
	static class UActiveAmbientLocationChooser_RandomWithTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_RandomWithTrace>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_RandomWithTrace) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_RandomWithTrace");
static_assert(sizeof(UActiveAmbientLocationChooser_RandomWithTrace) == 0x000058, "Wrong size on UActiveAmbientLocationChooser_RandomWithTrace");
static_assert(offsetof(UActiveAmbientLocationChooser_RandomWithTrace, TraceVector) == 0x000048, "Member 'UActiveAmbientLocationChooser_RandomWithTrace::TraceVector' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationChooser_RandomOnCeiling
// 0x0000 (0x0058 - 0x0058)
class UActiveAmbientLocationChooser_RandomOnCeiling final : public UActiveAmbientLocationChooser_RandomWithTrace
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_RandomOnCeiling">();
	}
	static class UActiveAmbientLocationChooser_RandomOnCeiling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_RandomOnCeiling>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_RandomOnCeiling) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_RandomOnCeiling");
static_assert(sizeof(UActiveAmbientLocationChooser_RandomOnCeiling) == 0x000058, "Wrong size on UActiveAmbientLocationChooser_RandomOnCeiling");

// Class GbxAudio.ActiveAmbientLocationChooser_RandomOnFloor
// 0x0000 (0x0058 - 0x0058)
class UActiveAmbientLocationChooser_RandomOnFloor final : public UActiveAmbientLocationChooser_RandomWithTrace
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_RandomOnFloor">();
	}
	static class UActiveAmbientLocationChooser_RandomOnFloor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_RandomOnFloor>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_RandomOnFloor) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_RandomOnFloor");
static_assert(sizeof(UActiveAmbientLocationChooser_RandomOnFloor) == 0x000058, "Wrong size on UActiveAmbientLocationChooser_RandomOnFloor");

// Class GbxAudio.ActiveAmbientLocationChooser_PreselectedLocation
// 0x0028 (0x0050 - 0x0028)
class UActiveAmbientLocationChooser_PreselectedLocation : public UActiveAmbientLocationChooser
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Locations;                                         // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Radii;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	bool AddLocation(const struct FVector& InLocation, float InRadius);
	void DrawLocations();
	void UpdateLocations();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_PreselectedLocation">();
	}
	static class UActiveAmbientLocationChooser_PreselectedLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_PreselectedLocation>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_PreselectedLocation) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_PreselectedLocation");
static_assert(sizeof(UActiveAmbientLocationChooser_PreselectedLocation) == 0x000050, "Wrong size on UActiveAmbientLocationChooser_PreselectedLocation");
static_assert(offsetof(UActiveAmbientLocationChooser_PreselectedLocation, Locations) == 0x000030, "Member 'UActiveAmbientLocationChooser_PreselectedLocation::Locations' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_PreselectedLocation, Radii) == 0x000040, "Member 'UActiveAmbientLocationChooser_PreselectedLocation::Radii' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationChooser_Party
// 0x0038 (0x0088 - 0x0050)
class UActiveAmbientLocationChooser_Party final : public UActiveAmbientLocationChooser_PreselectedLocation
{
public:
	float                                         PartierWeight;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartierRadius;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         IntensityRange;                                    // 0x0058(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyDecayPerNomination;                           // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeParty;                                   // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PartyVisualizationLineLength;                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PartyWeights;                                      // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TotalPartyWeight;                                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationChooser_Party">();
	}
	static class UActiveAmbientLocationChooser_Party* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationChooser_Party>();
	}
};
static_assert(alignof(UActiveAmbientLocationChooser_Party) == 0x000008, "Wrong alignment on UActiveAmbientLocationChooser_Party");
static_assert(sizeof(UActiveAmbientLocationChooser_Party) == 0x000088, "Wrong size on UActiveAmbientLocationChooser_Party");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, PartierWeight) == 0x000050, "Member 'UActiveAmbientLocationChooser_Party::PartierWeight' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, PartierRadius) == 0x000054, "Member 'UActiveAmbientLocationChooser_Party::PartierRadius' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, IntensityRange) == 0x000058, "Member 'UActiveAmbientLocationChooser_Party::IntensityRange' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, PartyDecayPerNomination) == 0x000060, "Member 'UActiveAmbientLocationChooser_Party::PartyDecayPerNomination' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, bVisualizeParty) == 0x000064, "Member 'UActiveAmbientLocationChooser_Party::bVisualizeParty' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, PartyVisualizationLineLength) == 0x000068, "Member 'UActiveAmbientLocationChooser_Party::PartyVisualizationLineLength' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, PartyWeights) == 0x000070, "Member 'UActiveAmbientLocationChooser_Party::PartyWeights' has a wrong offset!");
static_assert(offsetof(UActiveAmbientLocationChooser_Party, TotalPartyWeight) == 0x000080, "Member 'UActiveAmbientLocationChooser_Party::TotalPartyWeight' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationValidator
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientLocationValidator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationValidator">();
	}
	static class UActiveAmbientLocationValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationValidator>();
	}
};
static_assert(alignof(UActiveAmbientLocationValidator) == 0x000008, "Wrong alignment on UActiveAmbientLocationValidator");
static_assert(sizeof(UActiveAmbientLocationValidator) == 0x000028, "Wrong size on UActiveAmbientLocationValidator");

// Class GbxAudio.ActiveAmbientLocationValidator_Blueprint
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientLocationValidator_Blueprint final : public UActiveAmbientLocationValidator
{
public:
	bool IsProposedLocationValid(const class UActiveAmbientSoundComponent* ActiveAmbientComponent, const struct FVector& Location) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationValidator_Blueprint">();
	}
	static class UActiveAmbientLocationValidator_Blueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationValidator_Blueprint>();
	}
};
static_assert(alignof(UActiveAmbientLocationValidator_Blueprint) == 0x000008, "Wrong alignment on UActiveAmbientLocationValidator_Blueprint");
static_assert(sizeof(UActiveAmbientLocationValidator_Blueprint) == 0x000028, "Wrong size on UActiveAmbientLocationValidator_Blueprint");

// Class GbxAudio.ActiveAmbientLocationValidator_DistanceFromListener
// 0x0008 (0x0030 - 0x0028)
class UActiveAmbientLocationValidator_DistanceFromListener final : public UActiveAmbientLocationValidator
{
public:
	struct FFloatInterval                         Range;                                             // 0x0028(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationValidator_DistanceFromListener">();
	}
	static class UActiveAmbientLocationValidator_DistanceFromListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationValidator_DistanceFromListener>();
	}
};
static_assert(alignof(UActiveAmbientLocationValidator_DistanceFromListener) == 0x000008, "Wrong alignment on UActiveAmbientLocationValidator_DistanceFromListener");
static_assert(sizeof(UActiveAmbientLocationValidator_DistanceFromListener) == 0x000030, "Wrong size on UActiveAmbientLocationValidator_DistanceFromListener");
static_assert(offsetof(UActiveAmbientLocationValidator_DistanceFromListener, Range) == 0x000028, "Member 'UActiveAmbientLocationValidator_DistanceFromListener::Range' has a wrong offset!");

// Class GbxAudio.ActiveAmbientSound
// 0x0010 (0x0468 - 0x0458)
class AActiveAmbientSound : public AActor
{
public:
	int32                                         TargetInstances;                                   // 0x0458(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActiveAmbientSoundComponent*           ActiveAmbientSound;                                // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DisableSounds();
	void EnableSounds();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientSound">();
	}
	static class AActiveAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AActiveAmbientSound>();
	}
};
static_assert(alignof(AActiveAmbientSound) == 0x000008, "Wrong alignment on AActiveAmbientSound");
static_assert(sizeof(AActiveAmbientSound) == 0x000468, "Wrong size on AActiveAmbientSound");
static_assert(offsetof(AActiveAmbientSound, TargetInstances) == 0x000458, "Member 'AActiveAmbientSound::TargetInstances' has a wrong offset!");
static_assert(offsetof(AActiveAmbientSound, ActiveAmbientSound) == 0x000460, "Member 'AActiveAmbientSound::ActiveAmbientSound' has a wrong offset!");

// Class GbxAudio.ActiveAmbientSoundComponent
// 0x0090 (0x0208 - 0x0178)
class UActiveAmbientSoundComponent final : public UActorComponent
{
public:
	class UWwiseEvent*                            StartEvent;                                        // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         LoopDuration;                                      // 0x0180(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            ExpiredStopEvent;                                  // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpiredStopFadeTime;                               // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSimultaneousInstances;                       // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         RepopulateDelay;                                   // 0x0198(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActiveAmbientLocationChooser*          LocationChooser;                                   // 0x01A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActiveAmbientLocationValidator*        LocationValidator;                                 // 0x01A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActiveAmbientUpdater*>          Updaters;                                          // 0x01B0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bWaryOfPlayers;                                    // 0x01C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaryDistance;                                      // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WaryStopEvent;                                     // 0x01C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaryStopFadeTime;                                  // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartleRecoveryTime;                               // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StartedStopEvent;                                  // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartledStopFadeTime;                              // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveAmbientInstance>         ActiveAmbientInstances;                            // 0x01E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         NextSpawnTime;                                     // 0x01F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastSpawn;                                // 0x01FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingStartleRecovery;                          // 0x0200(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Startle(const struct FVector& Location, float Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientSoundComponent">();
	}
	static class UActiveAmbientSoundComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientSoundComponent>();
	}
};
static_assert(alignof(UActiveAmbientSoundComponent) == 0x000008, "Wrong alignment on UActiveAmbientSoundComponent");
static_assert(sizeof(UActiveAmbientSoundComponent) == 0x000208, "Wrong size on UActiveAmbientSoundComponent");
static_assert(offsetof(UActiveAmbientSoundComponent, StartEvent) == 0x000178, "Member 'UActiveAmbientSoundComponent::StartEvent' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, LoopDuration) == 0x000180, "Member 'UActiveAmbientSoundComponent::LoopDuration' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, ExpiredStopEvent) == 0x000188, "Member 'UActiveAmbientSoundComponent::ExpiredStopEvent' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, ExpiredStopFadeTime) == 0x000190, "Member 'UActiveAmbientSoundComponent::ExpiredStopFadeTime' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, TargetSimultaneousInstances) == 0x000194, "Member 'UActiveAmbientSoundComponent::TargetSimultaneousInstances' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, RepopulateDelay) == 0x000198, "Member 'UActiveAmbientSoundComponent::RepopulateDelay' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, LocationChooser) == 0x0001A0, "Member 'UActiveAmbientSoundComponent::LocationChooser' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, LocationValidator) == 0x0001A8, "Member 'UActiveAmbientSoundComponent::LocationValidator' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, Updaters) == 0x0001B0, "Member 'UActiveAmbientSoundComponent::Updaters' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, bWaryOfPlayers) == 0x0001C0, "Member 'UActiveAmbientSoundComponent::bWaryOfPlayers' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, WaryDistance) == 0x0001C4, "Member 'UActiveAmbientSoundComponent::WaryDistance' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, WaryStopEvent) == 0x0001C8, "Member 'UActiveAmbientSoundComponent::WaryStopEvent' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, WaryStopFadeTime) == 0x0001D0, "Member 'UActiveAmbientSoundComponent::WaryStopFadeTime' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, StartleRecoveryTime) == 0x0001D4, "Member 'UActiveAmbientSoundComponent::StartleRecoveryTime' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, StartedStopEvent) == 0x0001D8, "Member 'UActiveAmbientSoundComponent::StartedStopEvent' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, StartledStopFadeTime) == 0x0001E0, "Member 'UActiveAmbientSoundComponent::StartledStopFadeTime' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, ActiveAmbientInstances) == 0x0001E8, "Member 'UActiveAmbientSoundComponent::ActiveAmbientInstances' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, NextSpawnTime) == 0x0001F8, "Member 'UActiveAmbientSoundComponent::NextSpawnTime' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, TimeSinceLastSpawn) == 0x0001FC, "Member 'UActiveAmbientSoundComponent::TimeSinceLastSpawn' has a wrong offset!");
static_assert(offsetof(UActiveAmbientSoundComponent, RemainingStartleRecovery) == 0x000200, "Member 'UActiveAmbientSoundComponent::RemainingStartleRecovery' has a wrong offset!");

// Class GbxAudio.ActiveAmbientUpdater
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientUpdater : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientUpdater">();
	}
	static class UActiveAmbientUpdater* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientUpdater>();
	}
};
static_assert(alignof(UActiveAmbientUpdater) == 0x000008, "Wrong alignment on UActiveAmbientUpdater");
static_assert(sizeof(UActiveAmbientUpdater) == 0x000028, "Wrong size on UActiveAmbientUpdater");

// Class GbxAudio.ActiveAmbientUpdater_Blueprint
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientUpdater_Blueprint final : public UActiveAmbientUpdater
{
public:
	void InitializeActiveAmbientInstance(class UActiveAmbientSoundComponent* ActiveAmbientComponent, struct FActiveAmbientInstance* ActiveAmbientInstance);
	void UpdateActiveAmbientInstance(class UActiveAmbientSoundComponent* ActiveAmbientComponent, struct FActiveAmbientInstance* ActiveAmbientInstance, float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientUpdater_Blueprint">();
	}
	static class UActiveAmbientUpdater_Blueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientUpdater_Blueprint>();
	}
};
static_assert(alignof(UActiveAmbientUpdater_Blueprint) == 0x000008, "Wrong alignment on UActiveAmbientUpdater_Blueprint");
static_assert(sizeof(UActiveAmbientUpdater_Blueprint) == 0x000028, "Wrong size on UActiveAmbientUpdater_Blueprint");

// Class GbxAudio.ActiveAmbientUpdater_MoveInRandomDirection
// 0x0008 (0x0030 - 0x0028)
class UActiveAmbientUpdater_MoveInRandomDirection : public UActiveAmbientUpdater
{
public:
	struct FFloatInterval                         SpeedRange;                                        // 0x0028(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientUpdater_MoveInRandomDirection">();
	}
	static class UActiveAmbientUpdater_MoveInRandomDirection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientUpdater_MoveInRandomDirection>();
	}
};
static_assert(alignof(UActiveAmbientUpdater_MoveInRandomDirection) == 0x000008, "Wrong alignment on UActiveAmbientUpdater_MoveInRandomDirection");
static_assert(sizeof(UActiveAmbientUpdater_MoveInRandomDirection) == 0x000030, "Wrong size on UActiveAmbientUpdater_MoveInRandomDirection");
static_assert(offsetof(UActiveAmbientUpdater_MoveInRandomDirection, SpeedRange) == 0x000028, "Member 'UActiveAmbientUpdater_MoveInRandomDirection::SpeedRange' has a wrong offset!");

// Class GbxAudio.ActiveAmbientUpdater_MoveWithWobble
// 0x0008 (0x0038 - 0x0030)
class UActiveAmbientUpdater_MoveWithWobble final : public UActiveAmbientUpdater_MoveInRandomDirection
{
public:
	float                                         DirectionUpdateFrequency;                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionUpdateCone;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientUpdater_MoveWithWobble">();
	}
	static class UActiveAmbientUpdater_MoveWithWobble* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientUpdater_MoveWithWobble>();
	}
};
static_assert(alignof(UActiveAmbientUpdater_MoveWithWobble) == 0x000008, "Wrong alignment on UActiveAmbientUpdater_MoveWithWobble");
static_assert(sizeof(UActiveAmbientUpdater_MoveWithWobble) == 0x000038, "Wrong size on UActiveAmbientUpdater_MoveWithWobble");
static_assert(offsetof(UActiveAmbientUpdater_MoveWithWobble, DirectionUpdateFrequency) == 0x000030, "Member 'UActiveAmbientUpdater_MoveWithWobble::DirectionUpdateFrequency' has a wrong offset!");
static_assert(offsetof(UActiveAmbientUpdater_MoveWithWobble, DirectionUpdateCone) == 0x000034, "Member 'UActiveAmbientUpdater_MoveWithWobble::DirectionUpdateCone' has a wrong offset!");

// Class GbxAudio.AmbientSoundBox
// 0x0008 (0x0540 - 0x0538)
class AAmbientSoundBox final : public AWwiseAmbientSound
{
public:
	class UBoxComponent*                          BoxComponent;                                      // 0x0538(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientSoundBox">();
	}
	static class AAmbientSoundBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientSoundBox>();
	}
};
static_assert(alignof(AAmbientSoundBox) == 0x000008, "Wrong alignment on AAmbientSoundBox");
static_assert(sizeof(AAmbientSoundBox) == 0x000540, "Wrong size on AAmbientSoundBox");
static_assert(offsetof(AAmbientSoundBox, BoxComponent) == 0x000538, "Member 'AAmbientSoundBox::BoxComponent' has a wrong offset!");

// Class GbxAudio.AmbientSoundSphere
// 0x0008 (0x0540 - 0x0538)
class AAmbientSoundSphere final : public AWwiseAmbientSound
{
public:
	class USphereComponent*                       SphereComponent;                                   // 0x0538(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientSoundSphere">();
	}
	static class AAmbientSoundSphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientSoundSphere>();
	}
};
static_assert(alignof(AAmbientSoundSphere) == 0x000008, "Wrong alignment on AAmbientSoundSphere");
static_assert(sizeof(AAmbientSoundSphere) == 0x000540, "Wrong size on AAmbientSoundSphere");
static_assert(offsetof(AAmbientSoundSphere, SphereComponent) == 0x000538, "Member 'AAmbientSoundSphere::SphereComponent' has a wrong offset!");

// Class GbxAudio.AmbientSoundSpline
// 0x0028 (0x0560 - 0x0538)
class AAmbientSoundSpline final : public AWwiseAmbientSound
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x0538(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceEmitterUniformScale;                         // 0x0540(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       CachedBounds;                                      // 0x0544(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientSoundSpline">();
	}
	static class AAmbientSoundSpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientSoundSpline>();
	}
};
static_assert(alignof(AAmbientSoundSpline) == 0x000008, "Wrong alignment on AAmbientSoundSpline");
static_assert(sizeof(AAmbientSoundSpline) == 0x000560, "Wrong size on AAmbientSoundSpline");
static_assert(offsetof(AAmbientSoundSpline, SplineComponent) == 0x000538, "Member 'AAmbientSoundSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(AAmbientSoundSpline, bForceEmitterUniformScale) == 0x000540, "Member 'AAmbientSoundSpline::bForceEmitterUniformScale' has a wrong offset!");
static_assert(offsetof(AAmbientSoundSpline, CachedBounds) == 0x000544, "Member 'AAmbientSoundSpline::CachedBounds' has a wrong offset!");

// Class GbxAudio.AnimNotify_CharacterSound
// 0x0008 (0x0040 - 0x0038)
class UAnimNotify_CharacterSound final : public UAnimNotify
{
public:
	class UCharacterSoundTag*                     Tag;                                               // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_CharacterSound">();
	}
	static class UAnimNotify_CharacterSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_CharacterSound>();
	}
};
static_assert(alignof(UAnimNotify_CharacterSound) == 0x000008, "Wrong alignment on UAnimNotify_CharacterSound");
static_assert(sizeof(UAnimNotify_CharacterSound) == 0x000040, "Wrong size on UAnimNotify_CharacterSound");
static_assert(offsetof(UAnimNotify_CharacterSound, Tag) == 0x000038, "Member 'UAnimNotify_CharacterSound::Tag' has a wrong offset!");

// Class GbxAudio.AnimNotify_Foley
// 0x0050 (0x0088 - 0x0038)
class UAnimNotify_Foley : public UAnimNotify
{
public:
	struct FFoleyEventParams                      FoleyParams;                                       // 0x0038(0x0048)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bRestrictToMatchingPlayerPerspective;              // 0x0080(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_Foley">();
	}
	static class UAnimNotify_Foley* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_Foley>();
	}
};
static_assert(alignof(UAnimNotify_Foley) == 0x000008, "Wrong alignment on UAnimNotify_Foley");
static_assert(sizeof(UAnimNotify_Foley) == 0x000088, "Wrong size on UAnimNotify_Foley");
static_assert(offsetof(UAnimNotify_Foley, FoleyParams) == 0x000038, "Member 'UAnimNotify_Foley::FoleyParams' has a wrong offset!");
static_assert(offsetof(UAnimNotify_Foley, bRestrictToMatchingPlayerPerspective) == 0x000080, "Member 'UAnimNotify_Foley::bRestrictToMatchingPlayerPerspective' has a wrong offset!");

// Class GbxAudio.AnimNotify_FootFoley
// 0x0008 (0x0090 - 0x0088)
class UAnimNotify_FootFoley final : public UAnimNotify_Foley
{
public:
	int32                                         FootIndex;                                         // 0x0088(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_FootFoley">();
	}
	static class UAnimNotify_FootFoley* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_FootFoley>();
	}
};
static_assert(alignof(UAnimNotify_FootFoley) == 0x000008, "Wrong alignment on UAnimNotify_FootFoley");
static_assert(sizeof(UAnimNotify_FootFoley) == 0x000090, "Wrong size on UAnimNotify_FootFoley");
static_assert(offsetof(UAnimNotify_FootFoley, FootIndex) == 0x000088, "Member 'UAnimNotify_FootFoley::FootIndex' has a wrong offset!");

// Class GbxAudio.AnimNotify_WwiseEvent
// 0x0030 (0x0068 - 0x0038)
class UAnimNotify_WwiseEvent final : public UAnimNotify
{
public:
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseNotifyComponentMethod                   PlaybackMethod;                                    // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WwiseComponentTag;                                 // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0050(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToOwner;                                    // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitterRadius;                                     // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePerspective;                                // 0x0060(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAcousticsMode                                AcousticsMode;                                     // 0x0061(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_WwiseEvent">();
	}
	static class UAnimNotify_WwiseEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_WwiseEvent>();
	}
};
static_assert(alignof(UAnimNotify_WwiseEvent) == 0x000008, "Wrong alignment on UAnimNotify_WwiseEvent");
static_assert(sizeof(UAnimNotify_WwiseEvent) == 0x000068, "Wrong size on UAnimNotify_WwiseEvent");
static_assert(offsetof(UAnimNotify_WwiseEvent, WwiseEvent) == 0x000038, "Member 'UAnimNotify_WwiseEvent::WwiseEvent' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, PlaybackMethod) == 0x000040, "Member 'UAnimNotify_WwiseEvent::PlaybackMethod' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, WwiseComponentTag) == 0x000048, "Member 'UAnimNotify_WwiseEvent::WwiseComponentTag' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, SocketName) == 0x000050, "Member 'UAnimNotify_WwiseEvent::SocketName' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, bAttachToOwner) == 0x000058, "Member 'UAnimNotify_WwiseEvent::bAttachToOwner' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, EmitterRadius) == 0x00005C, "Member 'UAnimNotify_WwiseEvent::EmitterRadius' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, bIgnorePerspective) == 0x000060, "Member 'UAnimNotify_WwiseEvent::bIgnorePerspective' has a wrong offset!");
static_assert(offsetof(UAnimNotify_WwiseEvent, AcousticsMode) == 0x000061, "Member 'UAnimNotify_WwiseEvent::AcousticsMode' has a wrong offset!");

// Class GbxAudio.AnimNotifyState_LoopingSound
// 0x0080 (0x00B0 - 0x0030)
class UAnimNotifyState_LoopingSound final : public UAnimNotifyState
{
public:
	class UWwiseEvent*                            StartEvent;                                        // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StopEvent;                                         // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseNotifyComponentMethod                   PlaybackMethod;                                    // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WwiseComponentTag;                                 // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0050(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToOwner;                                    // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitterRadius;                                     // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, struct FActiveLoopingSoundNotifyData> ActivePlaybackInstances;                           // 0x0060(0x0050)(BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_LoopingSound">();
	}
	static class UAnimNotifyState_LoopingSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_LoopingSound>();
	}
};
static_assert(alignof(UAnimNotifyState_LoopingSound) == 0x000008, "Wrong alignment on UAnimNotifyState_LoopingSound");
static_assert(sizeof(UAnimNotifyState_LoopingSound) == 0x0000B0, "Wrong size on UAnimNotifyState_LoopingSound");
static_assert(offsetof(UAnimNotifyState_LoopingSound, StartEvent) == 0x000030, "Member 'UAnimNotifyState_LoopingSound::StartEvent' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, StopEvent) == 0x000038, "Member 'UAnimNotifyState_LoopingSound::StopEvent' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, PlaybackMethod) == 0x000040, "Member 'UAnimNotifyState_LoopingSound::PlaybackMethod' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, WwiseComponentTag) == 0x000048, "Member 'UAnimNotifyState_LoopingSound::WwiseComponentTag' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, SocketName) == 0x000050, "Member 'UAnimNotifyState_LoopingSound::SocketName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, bAttachToOwner) == 0x000058, "Member 'UAnimNotifyState_LoopingSound::bAttachToOwner' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, EmitterRadius) == 0x00005C, "Member 'UAnimNotifyState_LoopingSound::EmitterRadius' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_LoopingSound, ActivePlaybackInstances) == 0x000060, "Member 'UAnimNotifyState_LoopingSound::ActivePlaybackInstances' has a wrong offset!");

// Class GbxAudio.AudioDistanceThresholdSubscriberInterface
// 0x0000 (0x0028 - 0x0028)
class IAudioDistanceThresholdSubscriberInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioDistanceThresholdSubscriberInterface">();
	}
	static class IAudioDistanceThresholdSubscriberInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioDistanceThresholdSubscriberInterface>();
	}
};
static_assert(alignof(IAudioDistanceThresholdSubscriberInterface) == 0x000008, "Wrong alignment on IAudioDistanceThresholdSubscriberInterface");
static_assert(sizeof(IAudioDistanceThresholdSubscriberInterface) == 0x000028, "Wrong size on IAudioDistanceThresholdSubscriberInterface");

// Class GbxAudio.AudioDistanceThresholdManager
// 0x0028 (0x0050 - 0x0028)
class UAudioDistanceThresholdManager final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FADMSubscriberData>             SubscriberData;                                    // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioDistanceThresholdManager">();
	}
	static class UAudioDistanceThresholdManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioDistanceThresholdManager>();
	}
};
static_assert(alignof(UAudioDistanceThresholdManager) == 0x000008, "Wrong alignment on UAudioDistanceThresholdManager");
static_assert(sizeof(UAudioDistanceThresholdManager) == 0x000050, "Wrong size on UAudioDistanceThresholdManager");
static_assert(offsetof(UAudioDistanceThresholdManager, World) == 0x000030, "Member 'UAudioDistanceThresholdManager::World' has a wrong offset!");
static_assert(offsetof(UAudioDistanceThresholdManager, SubscriberData) == 0x000038, "Member 'UAudioDistanceThresholdManager::SubscriberData' has a wrong offset!");

// Class GbxAudio.AudioOcclusionVoxelDataProvider
// 0x0178 (0x01A0 - 0x0028)
class UAudioOcclusionVoxelDataProvider final : public UVoxelDataProvider
{
public:
	struct FIntVector                             DataResolution;                                    // 0x0028(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMaterialLibrary;                               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TritonMaterialLibraryFile;                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraTritonMaterialEquivalences;                   // 0x0048(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             CheckCollisionChannel;                             // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            CheckCollisionResponse;                            // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoxelizeFoliage;                                  // 0x009A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExtraTerrainThickness;                             // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlagMatchingVoxels;                               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioPrepComponentFilter              FlagVoxelsForComponentsFilter;                     // 0x00A8(0x00A8)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x50];                                     // 0x0150(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioOcclusionVoxelDataProvider">();
	}
	static class UAudioOcclusionVoxelDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioOcclusionVoxelDataProvider>();
	}
};
static_assert(alignof(UAudioOcclusionVoxelDataProvider) == 0x000008, "Wrong alignment on UAudioOcclusionVoxelDataProvider");
static_assert(sizeof(UAudioOcclusionVoxelDataProvider) == 0x0001A0, "Wrong size on UAudioOcclusionVoxelDataProvider");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, DataResolution) == 0x000028, "Member 'UAudioOcclusionVoxelDataProvider::DataResolution' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, bUseMaterialLibrary) == 0x000034, "Member 'UAudioOcclusionVoxelDataProvider::bUseMaterialLibrary' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, TritonMaterialLibraryFile) == 0x000038, "Member 'UAudioOcclusionVoxelDataProvider::TritonMaterialLibraryFile' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, ExtraTritonMaterialEquivalences) == 0x000048, "Member 'UAudioOcclusionVoxelDataProvider::ExtraTritonMaterialEquivalences' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, CheckCollisionChannel) == 0x000098, "Member 'UAudioOcclusionVoxelDataProvider::CheckCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, CheckCollisionResponse) == 0x000099, "Member 'UAudioOcclusionVoxelDataProvider::CheckCollisionResponse' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, bVoxelizeFoliage) == 0x00009A, "Member 'UAudioOcclusionVoxelDataProvider::bVoxelizeFoliage' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, ExtraTerrainThickness) == 0x00009C, "Member 'UAudioOcclusionVoxelDataProvider::ExtraTerrainThickness' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, bFlagMatchingVoxels) == 0x0000A0, "Member 'UAudioOcclusionVoxelDataProvider::bFlagMatchingVoxels' has a wrong offset!");
static_assert(offsetof(UAudioOcclusionVoxelDataProvider, FlagVoxelsForComponentsFilter) == 0x0000A8, "Member 'UAudioOcclusionVoxelDataProvider::FlagVoxelsForComponentsFilter' has a wrong offset!");

// Class GbxAudio.AudioOcclusionVoxelizerZone
// 0x0000 (0x0458 - 0x0458)
class AAudioOcclusionVoxelizerZone final : public AActor
{
public:
	void ExportAsRaw();
	void ExportAsRLE();
	void Voxelize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioOcclusionVoxelizerZone">();
	}
	static class AAudioOcclusionVoxelizerZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioOcclusionVoxelizerZone>();
	}
};
static_assert(alignof(AAudioOcclusionVoxelizerZone) == 0x000008, "Wrong alignment on AAudioOcclusionVoxelizerZone");
static_assert(sizeof(AAudioOcclusionVoxelizerZone) == 0x000458, "Wrong size on AAudioOcclusionVoxelizerZone");

// Class GbxAudio.AudioPrepLocationConsumer
// 0x0000 (0x0028 - 0x0028)
class IAudioPrepLocationConsumer final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationConsumer">();
	}
	static class IAudioPrepLocationConsumer* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioPrepLocationConsumer>();
	}
};
static_assert(alignof(IAudioPrepLocationConsumer) == 0x000008, "Wrong alignment on IAudioPrepLocationConsumer");
static_assert(sizeof(IAudioPrepLocationConsumer) == 0x000028, "Wrong size on IAudioPrepLocationConsumer");

// Class GbxAudio.AudioPrepLocationFinder
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder">();
	}
	static class UAudioPrepLocationFinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder");
static_assert(sizeof(UAudioPrepLocationFinder) == 0x000028, "Wrong size on UAudioPrepLocationFinder");

// Class GbxAudio.AudioPrepLocationFinder_Blueprint
// 0x0010 (0x0038 - 0x0028)
class UAudioPrepLocationFinder_Blueprint : public UAudioPrepLocationFinder
{
public:
	TScriptInterface<class IAudioPrepLocationConsumer> CurrentConsumer;                                   // 0x0028(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void AddFoundLocations();
	void AddLocation(const struct FVector& Location, const struct FRotator& Rotation, float Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_Blueprint">();
	}
	static class UAudioPrepLocationFinder_Blueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_Blueprint>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_Blueprint) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_Blueprint");
static_assert(sizeof(UAudioPrepLocationFinder_Blueprint) == 0x000038, "Wrong size on UAudioPrepLocationFinder_Blueprint");
static_assert(offsetof(UAudioPrepLocationFinder_Blueprint, CurrentConsumer) == 0x000028, "Member 'UAudioPrepLocationFinder_Blueprint::CurrentConsumer' has a wrong offset!");

// Class GbxAudio.ActiveAmbientLocationFinder_Blueprint
// 0x0000 (0x0028 - 0x0028)
class UActiveAmbientLocationFinder_Blueprint final : public UAudioPrepLocationFinder
{
public:
	void AddFoundLocations(class UActiveAmbientSoundComponent* ActiveAmbientComponent, class UActiveAmbientLocationChooser_PreselectedLocation* PreselectedLocationChooser);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveAmbientLocationFinder_Blueprint">();
	}
	static class UActiveAmbientLocationFinder_Blueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveAmbientLocationFinder_Blueprint>();
	}
};
static_assert(alignof(UActiveAmbientLocationFinder_Blueprint) == 0x000008, "Wrong alignment on UActiveAmbientLocationFinder_Blueprint");
static_assert(sizeof(UActiveAmbientLocationFinder_Blueprint) == 0x000028, "Wrong size on UActiveAmbientLocationFinder_Blueprint");

// Class GbxAudio.AudioPrepLocationFinder_ActorList
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_ActorList final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_ActorList">();
	}
	static class UAudioPrepLocationFinder_ActorList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_ActorList>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_ActorList) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_ActorList");
static_assert(sizeof(UAudioPrepLocationFinder_ActorList) == 0x000028, "Wrong size on UAudioPrepLocationFinder_ActorList");

// Class GbxAudio.AudioPrepLocationFinder_FilteredComponents
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_FilteredComponents final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_FilteredComponents">();
	}
	static class UAudioPrepLocationFinder_FilteredComponents* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_FilteredComponents>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_FilteredComponents) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_FilteredComponents");
static_assert(sizeof(UAudioPrepLocationFinder_FilteredComponents) == 0x000028, "Wrong size on UAudioPrepLocationFinder_FilteredComponents");

// Class GbxAudio.AudioPrepLocationFinder_SplineTracer
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_SplineTracer final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_SplineTracer">();
	}
	static class UAudioPrepLocationFinder_SplineTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_SplineTracer>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_SplineTracer) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_SplineTracer");
static_assert(sizeof(UAudioPrepLocationFinder_SplineTracer) == 0x000028, "Wrong size on UAudioPrepLocationFinder_SplineTracer");

// Class GbxAudio.AudioPrepLocationFinder_PincushionTracer
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_PincushionTracer final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_PincushionTracer">();
	}
	static class UAudioPrepLocationFinder_PincushionTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_PincushionTracer>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_PincushionTracer) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_PincushionTracer");
static_assert(sizeof(UAudioPrepLocationFinder_PincushionTracer) == 0x000028, "Wrong size on UAudioPrepLocationFinder_PincushionTracer");

// Class GbxAudio.AudioPrepLocationFinder_TraceDownToActor
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_TraceDownToActor final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_TraceDownToActor">();
	}
	static class UAudioPrepLocationFinder_TraceDownToActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_TraceDownToActor>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_TraceDownToActor) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_TraceDownToActor");
static_assert(sizeof(UAudioPrepLocationFinder_TraceDownToActor) == 0x000028, "Wrong size on UAudioPrepLocationFinder_TraceDownToActor");

// Class GbxAudio.AudioPrepLocationFinder_FoliageLocations
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_FoliageLocations final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_FoliageLocations">();
	}
	static class UAudioPrepLocationFinder_FoliageLocations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_FoliageLocations>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_FoliageLocations) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_FoliageLocations");
static_assert(sizeof(UAudioPrepLocationFinder_FoliageLocations) == 0x000028, "Wrong size on UAudioPrepLocationFinder_FoliageLocations");

// Class GbxAudio.AudioPrepLocationFinder_LandscapeGrassLocations
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_LandscapeGrassLocations final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_LandscapeGrassLocations">();
	}
	static class UAudioPrepLocationFinder_LandscapeGrassLocations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_LandscapeGrassLocations>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_LandscapeGrassLocations) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_LandscapeGrassLocations");
static_assert(sizeof(UAudioPrepLocationFinder_LandscapeGrassLocations) == 0x000028, "Wrong size on UAudioPrepLocationFinder_LandscapeGrassLocations");

// Class GbxAudio.AudioPrepLocationFinder_InstanceLocations
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_InstanceLocations final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_InstanceLocations">();
	}
	static class UAudioPrepLocationFinder_InstanceLocations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_InstanceLocations>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_InstanceLocations) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_InstanceLocations");
static_assert(sizeof(UAudioPrepLocationFinder_InstanceLocations) == 0x000028, "Wrong size on UAudioPrepLocationFinder_InstanceLocations");

// Class GbxAudio.AudioPrepLocationFinder_Grid
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_Grid final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_Grid">();
	}
	static class UAudioPrepLocationFinder_Grid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_Grid>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_Grid) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_Grid");
static_assert(sizeof(UAudioPrepLocationFinder_Grid) == 0x000028, "Wrong size on UAudioPrepLocationFinder_Grid");

// Class GbxAudio.AudioPrepLocationFinder_TraceGrid
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_TraceGrid final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_TraceGrid">();
	}
	static class UAudioPrepLocationFinder_TraceGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_TraceGrid>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_TraceGrid) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_TraceGrid");
static_assert(sizeof(UAudioPrepLocationFinder_TraceGrid) == 0x000028, "Wrong size on UAudioPrepLocationFinder_TraceGrid");

// Class GbxAudio.AudioPrepLocationFinder_VoxelMaterialBoundary
// 0x0000 (0x0028 - 0x0028)
class UAudioPrepLocationFinder_VoxelMaterialBoundary final : public UAudioPrepLocationFinder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPrepLocationFinder_VoxelMaterialBoundary">();
	}
	static class UAudioPrepLocationFinder_VoxelMaterialBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPrepLocationFinder_VoxelMaterialBoundary>();
	}
};
static_assert(alignof(UAudioPrepLocationFinder_VoxelMaterialBoundary) == 0x000008, "Wrong alignment on UAudioPrepLocationFinder_VoxelMaterialBoundary");
static_assert(sizeof(UAudioPrepLocationFinder_VoxelMaterialBoundary) == 0x000028, "Wrong size on UAudioPrepLocationFinder_VoxelMaterialBoundary");

// Class GbxAudio.CharacterSoundData
// 0x0070 (0x00A0 - 0x0030)
class UCharacterSoundData : public UGbxDataAsset
{
public:
	struct FGbxTriggerProperty                    TriggerRefreshAll;                                 // 0x0030(0x0001)(Edit, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterSoundData*                    InheritData;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInheritableSoundMap                   Sounds;                                            // 0x0040(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FInheritableVocalLoopList              VocalLoops;                                        // 0x0090(0x0010)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void RefreshAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSoundData">();
	}
	static class UCharacterSoundData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterSoundData>();
	}
};
static_assert(alignof(UCharacterSoundData) == 0x000008, "Wrong alignment on UCharacterSoundData");
static_assert(sizeof(UCharacterSoundData) == 0x0000A0, "Wrong size on UCharacterSoundData");
static_assert(offsetof(UCharacterSoundData, TriggerRefreshAll) == 0x000030, "Member 'UCharacterSoundData::TriggerRefreshAll' has a wrong offset!");
static_assert(offsetof(UCharacterSoundData, InheritData) == 0x000038, "Member 'UCharacterSoundData::InheritData' has a wrong offset!");
static_assert(offsetof(UCharacterSoundData, Sounds) == 0x000040, "Member 'UCharacterSoundData::Sounds' has a wrong offset!");
static_assert(offsetof(UCharacterSoundData, VocalLoops) == 0x000090, "Member 'UCharacterSoundData::VocalLoops' has a wrong offset!");

// Class GbxAudio.CharacterSoundInterface
// 0x0000 (0x0028 - 0x0028)
class ICharacterSoundInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSoundInterface">();
	}
	static class ICharacterSoundInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICharacterSoundInterface>();
	}
};
static_assert(alignof(ICharacterSoundInterface) == 0x000008, "Wrong alignment on ICharacterSoundInterface");
static_assert(sizeof(ICharacterSoundInterface) == 0x000028, "Wrong size on ICharacterSoundInterface");

// Class GbxAudio.CharacterSoundLogicComponent
// 0x01C0 (0x0338 - 0x0178)
class UCharacterSoundLogicComponent : public UActorComponent
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrentVocalization                   CurrentVocalization;                               // 0x0180(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FCurrentVocalLoopInfo                  CurrentVocalLoop;                                  // 0x01A0(0x0048)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8[0x150];                                    // 0x01E8(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSoundLogicComponent">();
	}
	static class UCharacterSoundLogicComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterSoundLogicComponent>();
	}
};
static_assert(alignof(UCharacterSoundLogicComponent) == 0x000008, "Wrong alignment on UCharacterSoundLogicComponent");
static_assert(sizeof(UCharacterSoundLogicComponent) == 0x000338, "Wrong size on UCharacterSoundLogicComponent");
static_assert(offsetof(UCharacterSoundLogicComponent, CurrentVocalization) == 0x000180, "Member 'UCharacterSoundLogicComponent::CurrentVocalization' has a wrong offset!");
static_assert(offsetof(UCharacterSoundLogicComponent, CurrentVocalLoop) == 0x0001A0, "Member 'UCharacterSoundLogicComponent::CurrentVocalLoop' has a wrong offset!");

// Class GbxAudio.CharacterSoundTag
// 0x0010 (0x0040 - 0x0030)
class UCharacterSoundTag final : public UGbxDataAsset
{
public:
	ECharacterSoundType                           Type;                                              // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceToPlay;                                      // 0x0034(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighPriorityInterruptingVox;                      // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPainVox;                                          // 0x0039(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeathVox;                                         // 0x003A(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSoundTag">();
	}
	static class UCharacterSoundTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterSoundTag>();
	}
};
static_assert(alignof(UCharacterSoundTag) == 0x000008, "Wrong alignment on UCharacterSoundTag");
static_assert(sizeof(UCharacterSoundTag) == 0x000040, "Wrong size on UCharacterSoundTag");
static_assert(offsetof(UCharacterSoundTag, Type) == 0x000030, "Member 'UCharacterSoundTag::Type' has a wrong offset!");
static_assert(offsetof(UCharacterSoundTag, ChanceToPlay) == 0x000034, "Member 'UCharacterSoundTag::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(UCharacterSoundTag, bHighPriorityInterruptingVox) == 0x000038, "Member 'UCharacterSoundTag::bHighPriorityInterruptingVox' has a wrong offset!");
static_assert(offsetof(UCharacterSoundTag, bPainVox) == 0x000039, "Member 'UCharacterSoundTag::bPainVox' has a wrong offset!");
static_assert(offsetof(UCharacterSoundTag, bDeathVox) == 0x00003A, "Member 'UCharacterSoundTag::bDeathVox' has a wrong offset!");

// Class GbxAudio.DistributedAmbientSound
// 0x0090 (0x04E8 - 0x0458)
class ADistributedAmbientSound final : public AActor
{
public:
	uint8                                         Pad_458[0x10];                                     // 0x0458(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWwiseEvent*>                    SoundVariants;                                     // 0x0468(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EDistributedSoundMode                         SoundMode;                                         // 0x0478(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioPrepLocationFinder*               LocationFinder;                                    // 0x0480(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTreatLocationsAsOneSource;                        // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseMultiPositionType                       MultiPositionType;                                 // 0x0489(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DOffset;                                           // 0x048C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DScale;                                            // 0x0490(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEmitterSize;                                    // 0x0494(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombinedSourceVolumeRatio;                         // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUnconditionalSampleModeForAcoustics;           // 0x049C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWwiseAudioComponent*>           AudioComponents;                                   // 0x04A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PackedTreeData;                                    // 0x04B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x04C0(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DC[0xC];                                      // 0x04DC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoFindNewLocationsAndRebuild();
	void DoUpdateTree();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DistributedAmbientSound">();
	}
	static class ADistributedAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADistributedAmbientSound>();
	}
};
static_assert(alignof(ADistributedAmbientSound) == 0x000008, "Wrong alignment on ADistributedAmbientSound");
static_assert(sizeof(ADistributedAmbientSound) == 0x0004E8, "Wrong size on ADistributedAmbientSound");
static_assert(offsetof(ADistributedAmbientSound, SoundVariants) == 0x000468, "Member 'ADistributedAmbientSound::SoundVariants' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, SoundMode) == 0x000478, "Member 'ADistributedAmbientSound::SoundMode' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, LocationFinder) == 0x000480, "Member 'ADistributedAmbientSound::LocationFinder' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, bTreatLocationsAsOneSource) == 0x000488, "Member 'ADistributedAmbientSound::bTreatLocationsAsOneSource' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, MultiPositionType) == 0x000489, "Member 'ADistributedAmbientSound::MultiPositionType' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, DOffset) == 0x00048C, "Member 'ADistributedAmbientSound::DOffset' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, DScale) == 0x000490, "Member 'ADistributedAmbientSound::DScale' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, MaxEmitterSize) == 0x000494, "Member 'ADistributedAmbientSound::MaxEmitterSize' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, CombinedSourceVolumeRatio) == 0x000498, "Member 'ADistributedAmbientSound::CombinedSourceVolumeRatio' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, bUseUnconditionalSampleModeForAcoustics) == 0x00049C, "Member 'ADistributedAmbientSound::bUseUnconditionalSampleModeForAcoustics' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, AudioComponents) == 0x0004A0, "Member 'ADistributedAmbientSound::AudioComponents' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, PackedTreeData) == 0x0004B0, "Member 'ADistributedAmbientSound::PackedTreeData' has a wrong offset!");
static_assert(offsetof(ADistributedAmbientSound, Bounds) == 0x0004C0, "Member 'ADistributedAmbientSound::Bounds' has a wrong offset!");

// Class GbxAudio.FluidSimExampleZone
// 0x0000 (0x0458 - 0x0458)
class AFluidSimExampleZone final : public AActor
{
public:
	void ApplyToOtherSim();
	void ExportVectorField();
	void UpdateVisualization();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FluidSimExampleZone">();
	}
	static class AFluidSimExampleZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFluidSimExampleZone>();
	}
};
static_assert(alignof(AFluidSimExampleZone) == 0x000008, "Wrong alignment on AFluidSimExampleZone");
static_assert(sizeof(AFluidSimExampleZone) == 0x000458, "Wrong size on AFluidSimExampleZone");

// Class GbxAudio.FoleyAccessoryComponent
// 0x0050 (0x0320 - 0x02D0)
class UFoleyAccessoryComponent final : public USceneComponent
{
public:
	class UWwiseEvent*                            FoleyAccessoryWwiseEvent;                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            LoopStartWwiseEvent;                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccessoryVolume;                                   // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccesoryPitch;                                     // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccessoryRadius;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFoleyMainComponent*                    MyFoleyMain;                                       // 0x02F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x28];                                     // 0x02F8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoleyAccessoryComponent">();
	}
	static class UFoleyAccessoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoleyAccessoryComponent>();
	}
};
static_assert(alignof(UFoleyAccessoryComponent) == 0x000008, "Wrong alignment on UFoleyAccessoryComponent");
static_assert(sizeof(UFoleyAccessoryComponent) == 0x000320, "Wrong size on UFoleyAccessoryComponent");
static_assert(offsetof(UFoleyAccessoryComponent, FoleyAccessoryWwiseEvent) == 0x0002D0, "Member 'UFoleyAccessoryComponent::FoleyAccessoryWwiseEvent' has a wrong offset!");
static_assert(offsetof(UFoleyAccessoryComponent, LoopStartWwiseEvent) == 0x0002D8, "Member 'UFoleyAccessoryComponent::LoopStartWwiseEvent' has a wrong offset!");
static_assert(offsetof(UFoleyAccessoryComponent, AccessoryVolume) == 0x0002E0, "Member 'UFoleyAccessoryComponent::AccessoryVolume' has a wrong offset!");
static_assert(offsetof(UFoleyAccessoryComponent, AccesoryPitch) == 0x0002E4, "Member 'UFoleyAccessoryComponent::AccesoryPitch' has a wrong offset!");
static_assert(offsetof(UFoleyAccessoryComponent, AccessoryRadius) == 0x0002E8, "Member 'UFoleyAccessoryComponent::AccessoryRadius' has a wrong offset!");
static_assert(offsetof(UFoleyAccessoryComponent, MyFoleyMain) == 0x0002F0, "Member 'UFoleyAccessoryComponent::MyFoleyMain' has a wrong offset!");

// Class GbxAudio.FoleyImplementerInterface
// 0x0000 (0x0028 - 0x0028)
class IFoleyImplementerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoleyImplementerInterface">();
	}
	static class IFoleyImplementerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFoleyImplementerInterface>();
	}
};
static_assert(alignof(IFoleyImplementerInterface) == 0x000008, "Wrong alignment on IFoleyImplementerInterface");
static_assert(sizeof(IFoleyImplementerInterface) == 0x000028, "Wrong size on IFoleyImplementerInterface");

// Class GbxAudio.FoleyMainComponent
// 0x0100 (0x0278 - 0x0178)
class UFoleyMainComponent final : public UActorComponent
{
public:
	class UWwiseEvent*                            FoleyMainWwiseEvent;                               // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            LoopStartWwiseEvent;                               // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            FootstepWwiseEvent;                                // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWwiseEvent*>                    PerFootFootstepWwiseEvents;                        // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UWwiseSwitch*                           CharacterSizeSwitch;                               // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoleyVolume;                                       // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoleyPitch;                                        // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootstepVolume;                                    // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootstepPitch;                                     // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FootstepFoleyComponentTags;                        // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FoleyAccessoryVolume;                              // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoleyAccessoryPitch;                               // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExtraFoleyParameter>           ExtraParameters;                                   // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFoleyEventParams                      CachedFootstepParams;                              // 0x01E8(0x0048)(Transient, NativeAccessSpecifierPublic)
	class UWwiseSwitch*                           LastMaterialSwitch;                                // 0x0230(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            SurfaceModifierEvent;                              // 0x0238(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceModifierVolume;                             // 0x0240(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceModifierFootstepVolumeMultiplier;           // 0x0244(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFoleyAccessoryComponent*>       AssociatedFoleyAccessories;                        // 0x0248(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x20];                                     // 0x0258(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFootstep(const struct FVector& FootstepLocation, const struct FRotator& FootstepRotation, class UWwiseSwitch* MaterialSwitch, float VolumeAdjustment, float PitchAdjustment, class UWwiseEvent* ConfigureEvent, bool bPreview);
	void PlayFootstepEvent(const struct FFoleyEventParams& EventParams);
	void SetSurfaceModifier(class UWwiseEvent* PlayEvent, float Volume, float FootstepVolumeMultiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoleyMainComponent">();
	}
	static class UFoleyMainComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoleyMainComponent>();
	}
};
static_assert(alignof(UFoleyMainComponent) == 0x000008, "Wrong alignment on UFoleyMainComponent");
static_assert(sizeof(UFoleyMainComponent) == 0x000278, "Wrong size on UFoleyMainComponent");
static_assert(offsetof(UFoleyMainComponent, FoleyMainWwiseEvent) == 0x000178, "Member 'UFoleyMainComponent::FoleyMainWwiseEvent' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, LoopStartWwiseEvent) == 0x000180, "Member 'UFoleyMainComponent::LoopStartWwiseEvent' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FootstepWwiseEvent) == 0x000188, "Member 'UFoleyMainComponent::FootstepWwiseEvent' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, PerFootFootstepWwiseEvents) == 0x000190, "Member 'UFoleyMainComponent::PerFootFootstepWwiseEvents' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, CharacterSizeSwitch) == 0x0001A0, "Member 'UFoleyMainComponent::CharacterSizeSwitch' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FoleyVolume) == 0x0001A8, "Member 'UFoleyMainComponent::FoleyVolume' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FoleyPitch) == 0x0001AC, "Member 'UFoleyMainComponent::FoleyPitch' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FootstepVolume) == 0x0001B0, "Member 'UFoleyMainComponent::FootstepVolume' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FootstepPitch) == 0x0001B4, "Member 'UFoleyMainComponent::FootstepPitch' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FootstepFoleyComponentTags) == 0x0001B8, "Member 'UFoleyMainComponent::FootstepFoleyComponentTags' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FoleyAccessoryVolume) == 0x0001C8, "Member 'UFoleyMainComponent::FoleyAccessoryVolume' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, FoleyAccessoryPitch) == 0x0001CC, "Member 'UFoleyMainComponent::FoleyAccessoryPitch' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, ExtraParameters) == 0x0001D0, "Member 'UFoleyMainComponent::ExtraParameters' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, AttenuationScalingFactor) == 0x0001E0, "Member 'UFoleyMainComponent::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, CachedFootstepParams) == 0x0001E8, "Member 'UFoleyMainComponent::CachedFootstepParams' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, LastMaterialSwitch) == 0x000230, "Member 'UFoleyMainComponent::LastMaterialSwitch' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, SurfaceModifierEvent) == 0x000238, "Member 'UFoleyMainComponent::SurfaceModifierEvent' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, SurfaceModifierVolume) == 0x000240, "Member 'UFoleyMainComponent::SurfaceModifierVolume' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, SurfaceModifierFootstepVolumeMultiplier) == 0x000244, "Member 'UFoleyMainComponent::SurfaceModifierFootstepVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UFoleyMainComponent, AssociatedFoleyAccessories) == 0x000248, "Member 'UFoleyMainComponent::AssociatedFoleyAccessories' has a wrong offset!");

// Class GbxAudio.GbxAudioBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxAudioBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyListenerAudioEffect(class AActor* Character, class UWwiseAuxBus* Efx, float WetVolume, float DryVolume);
	static bool PassesAudioPreparationComponentFilter(class UPrimitiveComponent* Component, const struct FAudioPrepComponentFilter& Filter);
	static bool PassesAudioPreparationHitFilter(const struct FHitResult& Hit, const struct FAudioPrepHitResultFilter& Filter);
	static void RemoveListenerAudioEffect(class AActor* Character, class UWwiseAuxBus* Efx);
	static void TriggerCharacterSound(class AActor* Character, const class UCharacterSoundTag* SoundTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxAudioBlueprintLibrary">();
	}
	static class UGbxAudioBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAudioBlueprintLibrary>();
	}
};
static_assert(alignof(UGbxAudioBlueprintLibrary) == 0x000008, "Wrong alignment on UGbxAudioBlueprintLibrary");
static_assert(sizeof(UGbxAudioBlueprintLibrary) == 0x000028, "Wrong size on UGbxAudioBlueprintLibrary");

// Class GbxAudio.GbxAudioGlobalsData
// 0x01B8 (0x01E8 - 0x0030)
class UGbxAudioGlobalsData : public UGbxDataAsset
{
public:
	class UWwiseEvent*                            PauseGameAudioEvent;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            UnpauseGameAudioEvent;                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            PreLevelTransitionEvent;                           // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            PostLevelTransitionEvent;                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             MasterVolumeParameter;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserVolumeMusicParameter;                          // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserVolumeSfxParameter;                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserVolumeVOParameter;                             // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserVolumeHdrSfxParameter;                         // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserVolumeHdrVOParameter;                          // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserVolumeHdrMixRtpc;                              // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             UserPS4ControllerRtpc;                             // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWwiseBank*>                     AlwaysLoadedBanks;                                 // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableAcoustics;                                  // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionStrength;                                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         RedirectionVolumeInterval;                         // 0x00A8(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            EarlyReflectionsVolumeCurve;                       // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LateReverbVolumeCurve;                             // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ReverbBoostOutdoornessModifierCurve;               // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverbBoostDryGainFraction;                        // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarlyReflectionsReverbBoostStrength;               // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateReverbReverbBoostStrength;                     // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponFireReverbBoost;                             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionReverbBoost;                              // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            MusicVolumeSliderPreviewSound;                     // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            MusicVolumeSliderPreviewSoundStop;                 // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            SFXVolumeSliderPreviewSound;                       // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            VOVolumeSliderPreviewSound;                        // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            VoiceCommVolumeSliderPreviewSound;                 // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StartStandardCinematicModeEvent;                   // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            EndStandardCinematicModeEvent;                     // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            StartExclusiveCinematicModeEvent;                  // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            EndExclusiveCinematicModeEvent;                    // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterSoundTag*                     JumpedVocalizationTag;                             // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FootstepVolumeRtpc;                                // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FoleyMainVolumeRtpc;                               // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FoleyAccessoryVolumeRtpc;                          // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FootstepPitchRtpc;                                 // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FoleyMainPitchRtpc;                                // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FoleyAccessoryPitchRtpc;                           // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             FoleyPerspectiveRtpc;                              // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             SurfaceModifierVolumeRtpc;                         // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseSwitch*                           HighDetailFoleySwitch;                             // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseSwitch*                           LowDetailFoleySwitch;                              // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            FootstepAction;                                    // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            HandPlantAction;                                   // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstPersonFootstepsForwardOffset;                 // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseRtpc*                             CharacterRelativeSpeedRtpc;                        // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             CharacterRelativeVerticalAirSpeedRtpc;             // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             WalkingSlopeRtpc;                                  // 0x01A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             WaterDepthRtpc;                                    // 0x01B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             RelativeWaterDepthRtpc;                            // 0x01B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             RandomVariationRtpc;                               // 0x01C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             PerspectiveRtpc;                                   // 0x01C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             ExplosionSizeRtpc;                                 // 0x01D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             PlayerLocationOutdoornessRTPC;                     // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseRtpc*                             OutdoornessRTPC;                                   // 0x01E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxAudioGlobalsData">();
	}
	static class UGbxAudioGlobalsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAudioGlobalsData>();
	}
};
static_assert(alignof(UGbxAudioGlobalsData) == 0x000008, "Wrong alignment on UGbxAudioGlobalsData");
static_assert(sizeof(UGbxAudioGlobalsData) == 0x0001E8, "Wrong size on UGbxAudioGlobalsData");
static_assert(offsetof(UGbxAudioGlobalsData, PauseGameAudioEvent) == 0x000030, "Member 'UGbxAudioGlobalsData::PauseGameAudioEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UnpauseGameAudioEvent) == 0x000038, "Member 'UGbxAudioGlobalsData::UnpauseGameAudioEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, PreLevelTransitionEvent) == 0x000040, "Member 'UGbxAudioGlobalsData::PreLevelTransitionEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, PostLevelTransitionEvent) == 0x000048, "Member 'UGbxAudioGlobalsData::PostLevelTransitionEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, MasterVolumeParameter) == 0x000050, "Member 'UGbxAudioGlobalsData::MasterVolumeParameter' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserVolumeMusicParameter) == 0x000058, "Member 'UGbxAudioGlobalsData::UserVolumeMusicParameter' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserVolumeSfxParameter) == 0x000060, "Member 'UGbxAudioGlobalsData::UserVolumeSfxParameter' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserVolumeVOParameter) == 0x000068, "Member 'UGbxAudioGlobalsData::UserVolumeVOParameter' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserVolumeHdrSfxParameter) == 0x000070, "Member 'UGbxAudioGlobalsData::UserVolumeHdrSfxParameter' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserVolumeHdrVOParameter) == 0x000078, "Member 'UGbxAudioGlobalsData::UserVolumeHdrVOParameter' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserVolumeHdrMixRtpc) == 0x000080, "Member 'UGbxAudioGlobalsData::UserVolumeHdrMixRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, UserPS4ControllerRtpc) == 0x000088, "Member 'UGbxAudioGlobalsData::UserPS4ControllerRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, AlwaysLoadedBanks) == 0x000090, "Member 'UGbxAudioGlobalsData::AlwaysLoadedBanks' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, bEnableAcoustics) == 0x0000A0, "Member 'UGbxAudioGlobalsData::bEnableAcoustics' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, OcclusionStrength) == 0x0000A4, "Member 'UGbxAudioGlobalsData::OcclusionStrength' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, RedirectionVolumeInterval) == 0x0000A8, "Member 'UGbxAudioGlobalsData::RedirectionVolumeInterval' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, EarlyReflectionsVolumeCurve) == 0x0000B0, "Member 'UGbxAudioGlobalsData::EarlyReflectionsVolumeCurve' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, LateReverbVolumeCurve) == 0x0000B8, "Member 'UGbxAudioGlobalsData::LateReverbVolumeCurve' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, ReverbBoostOutdoornessModifierCurve) == 0x0000C0, "Member 'UGbxAudioGlobalsData::ReverbBoostOutdoornessModifierCurve' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, ReverbBoostDryGainFraction) == 0x0000C8, "Member 'UGbxAudioGlobalsData::ReverbBoostDryGainFraction' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, EarlyReflectionsReverbBoostStrength) == 0x0000CC, "Member 'UGbxAudioGlobalsData::EarlyReflectionsReverbBoostStrength' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, LateReverbReverbBoostStrength) == 0x0000D0, "Member 'UGbxAudioGlobalsData::LateReverbReverbBoostStrength' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, WeaponFireReverbBoost) == 0x0000D4, "Member 'UGbxAudioGlobalsData::WeaponFireReverbBoost' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, ExplosionReverbBoost) == 0x0000D8, "Member 'UGbxAudioGlobalsData::ExplosionReverbBoost' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, MusicVolumeSliderPreviewSound) == 0x0000E0, "Member 'UGbxAudioGlobalsData::MusicVolumeSliderPreviewSound' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, MusicVolumeSliderPreviewSoundStop) == 0x0000E8, "Member 'UGbxAudioGlobalsData::MusicVolumeSliderPreviewSoundStop' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, SFXVolumeSliderPreviewSound) == 0x0000F0, "Member 'UGbxAudioGlobalsData::SFXVolumeSliderPreviewSound' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, VOVolumeSliderPreviewSound) == 0x0000F8, "Member 'UGbxAudioGlobalsData::VOVolumeSliderPreviewSound' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, VoiceCommVolumeSliderPreviewSound) == 0x000100, "Member 'UGbxAudioGlobalsData::VoiceCommVolumeSliderPreviewSound' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, StartStandardCinematicModeEvent) == 0x000108, "Member 'UGbxAudioGlobalsData::StartStandardCinematicModeEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, EndStandardCinematicModeEvent) == 0x000110, "Member 'UGbxAudioGlobalsData::EndStandardCinematicModeEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, StartExclusiveCinematicModeEvent) == 0x000118, "Member 'UGbxAudioGlobalsData::StartExclusiveCinematicModeEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, EndExclusiveCinematicModeEvent) == 0x000120, "Member 'UGbxAudioGlobalsData::EndExclusiveCinematicModeEvent' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, JumpedVocalizationTag) == 0x000128, "Member 'UGbxAudioGlobalsData::JumpedVocalizationTag' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FootstepVolumeRtpc) == 0x000130, "Member 'UGbxAudioGlobalsData::FootstepVolumeRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FoleyMainVolumeRtpc) == 0x000138, "Member 'UGbxAudioGlobalsData::FoleyMainVolumeRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FoleyAccessoryVolumeRtpc) == 0x000140, "Member 'UGbxAudioGlobalsData::FoleyAccessoryVolumeRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FootstepPitchRtpc) == 0x000148, "Member 'UGbxAudioGlobalsData::FootstepPitchRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FoleyMainPitchRtpc) == 0x000150, "Member 'UGbxAudioGlobalsData::FoleyMainPitchRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FoleyAccessoryPitchRtpc) == 0x000158, "Member 'UGbxAudioGlobalsData::FoleyAccessoryPitchRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FoleyPerspectiveRtpc) == 0x000160, "Member 'UGbxAudioGlobalsData::FoleyPerspectiveRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, SurfaceModifierVolumeRtpc) == 0x000168, "Member 'UGbxAudioGlobalsData::SurfaceModifierVolumeRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, HighDetailFoleySwitch) == 0x000170, "Member 'UGbxAudioGlobalsData::HighDetailFoleySwitch' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, LowDetailFoleySwitch) == 0x000178, "Member 'UGbxAudioGlobalsData::LowDetailFoleySwitch' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FootstepAction) == 0x000180, "Member 'UGbxAudioGlobalsData::FootstepAction' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, HandPlantAction) == 0x000188, "Member 'UGbxAudioGlobalsData::HandPlantAction' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, FirstPersonFootstepsForwardOffset) == 0x000190, "Member 'UGbxAudioGlobalsData::FirstPersonFootstepsForwardOffset' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, CharacterRelativeSpeedRtpc) == 0x000198, "Member 'UGbxAudioGlobalsData::CharacterRelativeSpeedRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, CharacterRelativeVerticalAirSpeedRtpc) == 0x0001A0, "Member 'UGbxAudioGlobalsData::CharacterRelativeVerticalAirSpeedRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, WalkingSlopeRtpc) == 0x0001A8, "Member 'UGbxAudioGlobalsData::WalkingSlopeRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, WaterDepthRtpc) == 0x0001B0, "Member 'UGbxAudioGlobalsData::WaterDepthRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, RelativeWaterDepthRtpc) == 0x0001B8, "Member 'UGbxAudioGlobalsData::RelativeWaterDepthRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, RandomVariationRtpc) == 0x0001C0, "Member 'UGbxAudioGlobalsData::RandomVariationRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, PerspectiveRtpc) == 0x0001C8, "Member 'UGbxAudioGlobalsData::PerspectiveRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, ExplosionSizeRtpc) == 0x0001D0, "Member 'UGbxAudioGlobalsData::ExplosionSizeRtpc' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, PlayerLocationOutdoornessRTPC) == 0x0001D8, "Member 'UGbxAudioGlobalsData::PlayerLocationOutdoornessRTPC' has a wrong offset!");
static_assert(offsetof(UGbxAudioGlobalsData, OutdoornessRTPC) == 0x0001E0, "Member 'UGbxAudioGlobalsData::OutdoornessRTPC' has a wrong offset!");

// Class GbxAudio.GbxAudioSettings
// 0x0040 (0x0068 - 0x0028)
class UGbxAudioSettings final : public UObject
{
public:
	class UGbxAudioGlobalsData*                   AudioGlobalsData;                                  // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultAudioGlobalsData;                           // 0x0030(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoleyCullingDistanceFraction;                      // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoleyCullingDistanceMinVolumeForReduction;         // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoleyCullingDistanceReductionFractionPerDBOverMin; // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                SkipCinematicEvents;                               // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxAudioSettings">();
	}
	static class UGbxAudioSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAudioSettings>();
	}
};
static_assert(alignof(UGbxAudioSettings) == 0x000008, "Wrong alignment on UGbxAudioSettings");
static_assert(sizeof(UGbxAudioSettings) == 0x000068, "Wrong size on UGbxAudioSettings");
static_assert(offsetof(UGbxAudioSettings, AudioGlobalsData) == 0x000028, "Member 'UGbxAudioSettings::AudioGlobalsData' has a wrong offset!");
static_assert(offsetof(UGbxAudioSettings, DefaultAudioGlobalsData) == 0x000030, "Member 'UGbxAudioSettings::DefaultAudioGlobalsData' has a wrong offset!");
static_assert(offsetof(UGbxAudioSettings, FoleyCullingDistanceFraction) == 0x000048, "Member 'UGbxAudioSettings::FoleyCullingDistanceFraction' has a wrong offset!");
static_assert(offsetof(UGbxAudioSettings, FoleyCullingDistanceMinVolumeForReduction) == 0x00004C, "Member 'UGbxAudioSettings::FoleyCullingDistanceMinVolumeForReduction' has a wrong offset!");
static_assert(offsetof(UGbxAudioSettings, FoleyCullingDistanceReductionFractionPerDBOverMin) == 0x000050, "Member 'UGbxAudioSettings::FoleyCullingDistanceReductionFractionPerDBOverMin' has a wrong offset!");
static_assert(offsetof(UGbxAudioSettings, SkipCinematicEvents) == 0x000058, "Member 'UGbxAudioSettings::SkipCinematicEvents' has a wrong offset!");

// Class GbxAudio.MusicSequencerComponent
// 0x00B8 (0x0230 - 0x0178)
class UMusicSequencerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BPM;                                               // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequencerLatencyInSeconds;                         // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillLateEvents;                                   // 0x0188(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x9F];                                     // 0x0189(0x009F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRegisteredWithAudioDevice;                        // 0x0228(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentBeat();
	float GetRealTimeUntilBeat(float Beat);
	bool IsPlaying();
	void PauseSequence();
	void PlaySequence();
	void PostSequenceEvent(class UWwiseAudioComponent* WwiseComponent, class UWwiseEvent* WwiseEvent, int32 Note, int32 Velocity, int32 Channel, float StartBeat, float Duration);
	void StopSequence();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MusicSequencerComponent">();
	}
	static class UMusicSequencerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMusicSequencerComponent>();
	}
};
static_assert(alignof(UMusicSequencerComponent) == 0x000008, "Wrong alignment on UMusicSequencerComponent");
static_assert(sizeof(UMusicSequencerComponent) == 0x000230, "Wrong size on UMusicSequencerComponent");
static_assert(offsetof(UMusicSequencerComponent, BPM) == 0x000180, "Member 'UMusicSequencerComponent::BPM' has a wrong offset!");
static_assert(offsetof(UMusicSequencerComponent, SequencerLatencyInSeconds) == 0x000184, "Member 'UMusicSequencerComponent::SequencerLatencyInSeconds' has a wrong offset!");
static_assert(offsetof(UMusicSequencerComponent, bKillLateEvents) == 0x000188, "Member 'UMusicSequencerComponent::bKillLateEvents' has a wrong offset!");
static_assert(offsetof(UMusicSequencerComponent, bRegisteredWithAudioDevice) == 0x000228, "Member 'UMusicSequencerComponent::bRegisteredWithAudioDevice' has a wrong offset!");

}

