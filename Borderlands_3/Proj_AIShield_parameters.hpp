#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_AIShield

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OakGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WwiseAudio_structs.hpp"


namespace SDK::Params
{

// Function Proj_AIShield.Proj_AIShield_C.ExecuteUbergraph_Proj_AIShield
// 0x03E8 (0x03E8 - 0x0000)
struct Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable2;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_RequestNewMeleeWeapon3;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ThrowSpeed2;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercent;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_TargetSocket;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_TargetOffset;                         // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset1;                    // 0x002C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction1;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon2;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist2;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_ActorToThrowAt;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage1;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ActorSocket;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ActorOffset;                          // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_ThrowAngleOffset;                     // 0x0064(0x000C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_MaxPrediction;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon1;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist1;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_LocationToThrowAt;                    // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowSpeed;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ThrowAnglePercentage;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RequestNewMeleeWeapon;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SpawnIfDoesntExist;                   // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Event_NewMeleeWeaponClass;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_ImpactResult;           // 0x0098(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UWwiseAudioComponent*                   CallFunc_GetDefaultWwiseComponent_ReturnValue;     // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue;               // 0x0130(0x0018)()
	class UWwiseAudioComponent*                   CallFunc_GetDefaultWwiseComponent_ReturnValue1;    // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   CallFunc_GetDefaultWwiseComponent_ReturnValue2;    // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue1;              // 0x0158(0x0018)()
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue2;              // 0x0170(0x0018)()
	struct FHitResult                             K2Node_Event_Hit3;                                 // 0x0188(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_SleepingComponent;      // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_BoneName;               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit2;                                 // 0x0230(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             K2Node_Event_Hit1;                                 // 0x02C0(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0350(0x0090)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Temp_bool_IsClosed_Variable2;                      // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield) == 0x000008, "Wrong alignment on Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield");
static_assert(sizeof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield) == 0x0003E8, "Wrong size on Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, EntryPoint) == 0x000000, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::EntryPoint' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, Temp_bool_Has_Been_Initd_Variable1) == 0x000006, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, Temp_bool_Has_Been_Initd_Variable2) == 0x000007, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::Temp_bool_Has_Been_Initd_Variable2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_RequestNewMeleeWeapon3) == 0x000008, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_RequestNewMeleeWeapon3' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowSpeed2) == 0x00000C, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowSpeed2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowAnglePercent) == 0x000010, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_TargetSocket) == 0x000018, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_TargetSocket' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_TargetOffset) == 0x000020, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_TargetOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowAngleOffset1) == 0x00002C, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowAngleOffset1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_MaxPrediction1) == 0x000038, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_MaxPrediction1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_RequestNewMeleeWeapon2) == 0x00003C, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_RequestNewMeleeWeapon2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_SpawnIfDoesntExist2) == 0x00003D, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_SpawnIfDoesntExist2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ActorToThrowAt) == 0x000040, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowSpeed1) == 0x000048, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowSpeed1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowAnglePercentage1) == 0x00004C, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowAnglePercentage1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ActorSocket) == 0x000050, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ActorSocket' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ActorOffset) == 0x000058, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ActorOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowAngleOffset) == 0x000064, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_MaxPrediction) == 0x000070, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_MaxPrediction' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_RequestNewMeleeWeapon1) == 0x000074, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_RequestNewMeleeWeapon1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_SpawnIfDoesntExist1) == 0x000075, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_SpawnIfDoesntExist1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_LocationToThrowAt) == 0x000078, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowSpeed) == 0x000084, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowSpeed' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_ThrowAnglePercentage) == 0x000088, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_RequestNewMeleeWeapon) == 0x00008C, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_SpawnIfDoesntExist) == 0x00008D, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_SpawnIfDoesntExist' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_NewMeleeWeaponClass) == 0x000090, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_NewMeleeWeaponClass' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_ComponentBoundEvent_ImpactResult) == 0x000098, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_ComponentBoundEvent_ImpactResult' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, CallFunc_GetDefaultWwiseComponent_ReturnValue) == 0x000128, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::CallFunc_GetDefaultWwiseComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, CallFunc_PostWwiseEvent_ReturnValue) == 0x000130, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::CallFunc_PostWwiseEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, CallFunc_GetDefaultWwiseComponent_ReturnValue1) == 0x000148, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::CallFunc_GetDefaultWwiseComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, CallFunc_GetDefaultWwiseComponent_ReturnValue2) == 0x000150, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::CallFunc_GetDefaultWwiseComponent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, CallFunc_PostWwiseEvent_ReturnValue1) == 0x000158, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::CallFunc_PostWwiseEvent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, CallFunc_PostWwiseEvent_ReturnValue2) == 0x000170, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::CallFunc_PostWwiseEvent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_Hit3) == 0x000188, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_Hit3' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_ComponentBoundEvent_SleepingComponent) == 0x000218, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_ComponentBoundEvent_SleepingComponent' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_ComponentBoundEvent_BoneName) == 0x000220, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_ComponentBoundEvent_BoneName' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, Temp_bool_IsClosed_Variable1) == 0x000228, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_Hit2) == 0x000230, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_Hit2' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_Hit1) == 0x0002C0, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_Hit1' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, K2Node_Event_Hit) == 0x000350, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield, Temp_bool_IsClosed_Variable2) == 0x0003E0, "Member 'Proj_AIShield_C_ExecuteUbergraph_Proj_AIShield::Temp_bool_IsClosed_Variable2' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.OnHitNeutral
// 0x0090 (0x0090 - 0x0000)
struct Proj_AIShield_C_OnHitNeutral final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_AIShield_C_OnHitNeutral) == 0x000008, "Wrong alignment on Proj_AIShield_C_OnHitNeutral");
static_assert(sizeof(Proj_AIShield_C_OnHitNeutral) == 0x000090, "Wrong size on Proj_AIShield_C_OnHitNeutral");
static_assert(offsetof(Proj_AIShield_C_OnHitNeutral, Hit) == 0x000000, "Member 'Proj_AIShield_C_OnHitNeutral::Hit' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.OnHitFriendly
// 0x0090 (0x0090 - 0x0000)
struct Proj_AIShield_C_OnHitFriendly final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_AIShield_C_OnHitFriendly) == 0x000008, "Wrong alignment on Proj_AIShield_C_OnHitFriendly");
static_assert(sizeof(Proj_AIShield_C_OnHitFriendly) == 0x000090, "Wrong size on Proj_AIShield_C_OnHitFriendly");
static_assert(offsetof(Proj_AIShield_C_OnHitFriendly, Hit) == 0x000000, "Member 'Proj_AIShield_C_OnHitFriendly::Hit' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.OnHitEnemy
// 0x0090 (0x0090 - 0x0000)
struct Proj_AIShield_C_OnHitEnemy final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_AIShield_C_OnHitEnemy) == 0x000008, "Wrong alignment on Proj_AIShield_C_OnHitEnemy");
static_assert(sizeof(Proj_AIShield_C_OnHitEnemy) == 0x000090, "Wrong size on Proj_AIShield_C_OnHitEnemy");
static_assert(offsetof(Proj_AIShield_C_OnHitEnemy, Hit) == 0x000000, "Member 'Proj_AIShield_C_OnHitEnemy::Hit' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee
// 0x0010 (0x0010 - 0x0000)
struct Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee) == 0x000008, "Wrong alignment on Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee");
static_assert(sizeof(Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee) == 0x000010, "Wrong size on Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee");
static_assert(offsetof(Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee, SleepingComponent) == 0x000000, "Member 'Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee::SleepingComponent' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee, BoneName) == 0x000008, "Member 'Proj_AIShield_C_BndEvt__MeleeMesh_K2Node_ComponentBoundEvent_11_ComponentSleepSignature__DelegateSignature_Proj_Melee::BoneName' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.OnHitWorld
// 0x0090 (0x0090 - 0x0000)
struct Proj_AIShield_C_OnHitWorld final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_AIShield_C_OnHitWorld) == 0x000008, "Wrong alignment on Proj_AIShield_C_OnHitWorld");
static_assert(sizeof(Proj_AIShield_C_OnHitWorld) == 0x000090, "Wrong size on Proj_AIShield_C_OnHitWorld");
static_assert(offsetof(Proj_AIShield_C_OnHitWorld, Hit) == 0x000000, "Member 'Proj_AIShield_C_OnHitWorld::Hit' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee
// 0x0090 (0x0090 - 0x0000)
struct Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee) == 0x000008, "Wrong alignment on Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee");
static_assert(sizeof(Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee) == 0x000090, "Wrong size on Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee");
static_assert(offsetof(Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee, ImpactResult) == 0x000000, "Member 'Proj_AIShield_C_BndEvt__GbxProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature_Proj_PsychoMale_Shared_ThrownMelee::ImpactResult' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.AIMelee_SetNewMeleeWeaponClass
// 0x0008 (0x0008 - 0x0000)
struct Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass final
{
public:
	class UClass*                                 NewMeleeWeaponClass;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass) == 0x000008, "Wrong alignment on Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass");
static_assert(sizeof(Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass) == 0x000008, "Wrong size on Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass");
static_assert(offsetof(Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass, NewMeleeWeaponClass) == 0x000000, "Member 'Proj_AIShield_C_AIMelee_SetNewMeleeWeaponClass::NewMeleeWeaponClass' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.AIMelee_ThrowAtLocation
// 0x0018 (0x0018 - 0x0000)
struct Proj_AIShield_C_AIMelee_ThrowAtLocation final
{
public:
	struct FVector                                LocationToThrowAt;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewMeleeWeapon;                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_AIShield_C_AIMelee_ThrowAtLocation) == 0x000004, "Wrong alignment on Proj_AIShield_C_AIMelee_ThrowAtLocation");
static_assert(sizeof(Proj_AIShield_C_AIMelee_ThrowAtLocation) == 0x000018, "Wrong size on Proj_AIShield_C_AIMelee_ThrowAtLocation");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtLocation, LocationToThrowAt) == 0x000000, "Member 'Proj_AIShield_C_AIMelee_ThrowAtLocation::LocationToThrowAt' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtLocation, ThrowSpeed) == 0x00000C, "Member 'Proj_AIShield_C_AIMelee_ThrowAtLocation::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtLocation, ThrowAnglePercentage) == 0x000010, "Member 'Proj_AIShield_C_AIMelee_ThrowAtLocation::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtLocation, RequestNewMeleeWeapon) == 0x000014, "Member 'Proj_AIShield_C_AIMelee_ThrowAtLocation::RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtLocation, SpawnIfDoesntExist) == 0x000015, "Member 'Proj_AIShield_C_AIMelee_ThrowAtLocation::SpawnIfDoesntExist' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.AIMelee_ThrowAtActor
// 0x0038 (0x0038 - 0x0000)
struct Proj_AIShield_C_AIMelee_ThrowAtActor final
{
public:
	class AActor*                                 ActorToThrowAt;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercentage;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActorSocket;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewMeleeWeapon;                             // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_AIShield_C_AIMelee_ThrowAtActor) == 0x000008, "Wrong alignment on Proj_AIShield_C_AIMelee_ThrowAtActor");
static_assert(sizeof(Proj_AIShield_C_AIMelee_ThrowAtActor) == 0x000038, "Wrong size on Proj_AIShield_C_AIMelee_ThrowAtActor");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, ActorToThrowAt) == 0x000000, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::ActorToThrowAt' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, ThrowSpeed) == 0x000008, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, ThrowAnglePercentage) == 0x00000C, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::ThrowAnglePercentage' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, ActorSocket) == 0x000010, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::ActorSocket' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, ActorOffset) == 0x000018, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::ActorOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, ThrowAngleOffset) == 0x000024, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, MaxPrediction) == 0x000030, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::MaxPrediction' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, RequestNewMeleeWeapon) == 0x000034, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtActor, SpawnIfDoesntExist) == 0x000035, "Member 'Proj_AIShield_C_AIMelee_ThrowAtActor::SpawnIfDoesntExist' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.AIMelee_ThrowAtTarget
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) Proj_AIShield_C_AIMelee_ThrowAtTarget final
{
public:
	float                                         ThrowSpeed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowAnglePercent;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngleOffset;                                  // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         MaxPrediction;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestNewMeleeWeapon;                             // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnIfDoesntExist;                                // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_AIShield_C_AIMelee_ThrowAtTarget) == 0x000008, "Wrong alignment on Proj_AIShield_C_AIMelee_ThrowAtTarget");
static_assert(sizeof(Proj_AIShield_C_AIMelee_ThrowAtTarget) == 0x000030, "Wrong size on Proj_AIShield_C_AIMelee_ThrowAtTarget");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, ThrowSpeed) == 0x000000, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, ThrowAnglePercent) == 0x000004, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::ThrowAnglePercent' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, TargetSocket) == 0x000008, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::TargetSocket' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, TargetOffset) == 0x000010, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, ThrowAngleOffset) == 0x00001C, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::ThrowAngleOffset' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, MaxPrediction) == 0x000028, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::MaxPrediction' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, RequestNewMeleeWeapon) == 0x00002C, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::RequestNewMeleeWeapon' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_AIMelee_ThrowAtTarget, SpawnIfDoesntExist) == 0x00002D, "Member 'Proj_AIShield_C_AIMelee_ThrowAtTarget::SpawnIfDoesntExist' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.AIMelee_Drop
// 0x0001 (0x0001 - 0x0000)
struct Proj_AIShield_C_AIMelee_Drop final
{
public:
	bool                                          RequestNewMeleeWeapon;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Proj_AIShield_C_AIMelee_Drop) == 0x000001, "Wrong alignment on Proj_AIShield_C_AIMelee_Drop");
static_assert(sizeof(Proj_AIShield_C_AIMelee_Drop) == 0x000001, "Wrong size on Proj_AIShield_C_AIMelee_Drop");
static_assert(offsetof(Proj_AIShield_C_AIMelee_Drop, RequestNewMeleeWeapon) == 0x000000, "Member 'Proj_AIShield_C_AIMelee_Drop::RequestNewMeleeWeapon' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.CauseDamageOnImpact
// 0x00B8 (0x00B8 - 0x0000)
struct Proj_AIShield_C_CauseDamageOnImpact final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0090)(BlueprintVisible, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UWwiseAudioComponent*                   CallFunc_GetDefaultWwiseComponent_ReturnValue;     // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetHitActor_ReturnValue;                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 CallFunc_PostWwiseEvent_ReturnValue;               // 0x00A0(0x0018)()
};
static_assert(alignof(Proj_AIShield_C_CauseDamageOnImpact) == 0x000008, "Wrong alignment on Proj_AIShield_C_CauseDamageOnImpact");
static_assert(sizeof(Proj_AIShield_C_CauseDamageOnImpact) == 0x0000B8, "Wrong size on Proj_AIShield_C_CauseDamageOnImpact");
static_assert(offsetof(Proj_AIShield_C_CauseDamageOnImpact, Hit) == 0x000000, "Member 'Proj_AIShield_C_CauseDamageOnImpact::Hit' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_CauseDamageOnImpact, CallFunc_GetDefaultWwiseComponent_ReturnValue) == 0x000090, "Member 'Proj_AIShield_C_CauseDamageOnImpact::CallFunc_GetDefaultWwiseComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_CauseDamageOnImpact, CallFunc_GetHitActor_ReturnValue) == 0x000098, "Member 'Proj_AIShield_C_CauseDamageOnImpact::CallFunc_GetHitActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Proj_AIShield_C_CauseDamageOnImpact, CallFunc_PostWwiseEvent_ReturnValue) == 0x0000A0, "Member 'Proj_AIShield_C_CauseDamageOnImpact::CallFunc_PostWwiseEvent_ReturnValue' has a wrong offset!");

// Function Proj_AIShield.Proj_AIShield_C.AIMelee_GetElementalTypeFromMeleeWeapon
// 0x0001 (0x0001 - 0x0000)
struct Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon final
{
public:
	EOakElementalType                             MeleeWeaponElement;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon) == 0x000001, "Wrong alignment on Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon");
static_assert(sizeof(Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon) == 0x000001, "Wrong size on Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon");
static_assert(offsetof(Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon, MeleeWeaponElement) == 0x000000, "Member 'Proj_AIShield_C_AIMelee_GetElementalTypeFromMeleeWeapon::MeleeWeaponElement' has a wrong offset!");

}

