#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Challenge_Test_KillSource

#include "Basic.hpp"

#include "Challenge_Test_KillSource_classes.hpp"
#include "Challenge_Test_KillSource_parameters.hpp"


namespace SDK
{

// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.ExecuteUbergraph_Challenge_Test_KillSource
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_Test_KillSource_C::ExecuteUbergraph_Challenge_Test_KillSource(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "ExecuteUbergraph_Challenge_Test_KillSource");

	Params::Challenge_Test_KillSource_C_ExecuteUbergraph_Challenge_Test_KillSource Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckKillCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDamageComponent*                 DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCausedDeathDetails              DeathDetails                                           (BlueprintVisible, Parm, OutParm, ReferenceParm)

void UChallenge_Test_KillSource_C::CheckKillCondition(class UDamageComponent* DamageReceiver, struct FCausedDeathDetails& DeathDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "CheckKillCondition");

	Params::Challenge_Test_KillSource_C_CheckKillCondition Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.DeathDetails = std::move(DeathDetails);

	UObject::ProcessEvent(Func, &Parms);

	DeathDetails = std::move(Parms.DeathDetails);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckDamageTaken
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDamageComponent*                 DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGbxDamageType*                   DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageSource*                    DamageSource                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageCauserComponent*           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FReceivedDamageDetails           Details                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UChallenge_Test_KillSource_C::CheckDamageTaken(class UDamageComponent* DamageReceiver, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AController* InstigatedBy, class UDamageCauserComponent* DamageCauser, const struct FReceivedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "CheckDamageTaken");

	Params::Challenge_Test_KillSource_C_CheckDamageTaken Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckPickUpItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PickedUpActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_Test_KillSource_C::CheckPickUpItem(class AActor* PickedUpActor, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "CheckPickUpItem");

	Params::Challenge_Test_KillSource_C_CheckPickUpItem Parms{};

	Parms.PickedUpActor = PickedUpActor;
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckDamageDone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageInstigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGbxDamageType*                   DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageSource*                    DamageSource                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCausedDamageDetails             Details                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UChallenge_Test_KillSource_C::CheckDamageDone(class AActor* DamageInstigator, float Damage, const class UGbxDamageType* DamageType, const class UDamageSource* DamageSource, class AActor* DamagedActor, const struct FCausedDamageDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "CheckDamageDone");

	Params::Challenge_Test_KillSource_C_CheckDamageDone Parms{};

	Parms.DamageInstigator = DamageInstigator;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageSource = DamageSource;
	Parms.DamagedActor = DamagedActor;
	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.CheckModifiedShot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeapon*                          Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FWeaponShotModifierData          Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UChallenge_Test_KillSource_C::CheckModifiedShot(class AWeapon* Weapon, const struct FWeaponShotModifierData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "CheckModifiedShot");

	Params::Challenge_Test_KillSource_C_CheckModifiedShot Parms{};

	Parms.Weapon = Weapon;
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.OnInitChallengeInstance
// (Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UChallengesComponent*             OwningChallenges                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AGbxCharacter*                    AssociatedCharacter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_Test_KillSource_C::OnInitChallengeInstance(class UChallengesComponent* OwningChallenges, class AGbxCharacter* AssociatedCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "OnInitChallengeInstance");

	Params::Challenge_Test_KillSource_C_OnInitChallengeInstance Parms{};

	Parms.OwningChallenges = OwningChallenges;
	Parms.AssociatedCharacter = AssociatedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_Test_KillSource.Challenge_Test_KillSource_C.SetBinds
// (Public, BlueprintCallable, BlueprintEvent, Const)

void UChallenge_Test_KillSource_C::SetBinds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_Test_KillSource_C", "SetBinds");

	UObject::ProcessEvent(Func, nullptr);
}

}

