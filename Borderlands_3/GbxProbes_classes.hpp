#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxProbes

#include "Basic.hpp"

#include "GbxProbesCore_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class GbxProbes.GbxProbesBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxProbesBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EmitTestProbeResult(const struct FGbxProbeId& ProbeId, class FName Test, EGbxProbeResult Result, const class FString& ExtraData);
	static void EmitTestProbeResultWithData(const struct FGbxProbeId& ProbeId, class FName Test, EGbxProbeResult Result, const TArray<struct FGbxProbeExtraData>& ExtraDataArray);
	static void FlushPendingTestProbes();
	static void IsClassEnabled(class FName Class_0, bool* IsEnabled);
	static void IsTestEnabled(class FName Test, bool* IsEnabled);
	static void IsTestProbeEnabled(const struct FGbxProbeId& ProbeId, class FName Test, bool* IsEnabled);
	static void IsValidId(const struct FGbxProbeId& ProbeId, bool* IsValid);
	static void MakeProbeId(const class FString& Class_0, const class FString& Type, const class FString& SubType, struct FGbxProbeId* OutId);
	static void ResolveGbxProbeId(const class UObject* InObj, const struct FGameplayTag& InTag, struct FGbxProbeId* OutId, bool* IsValid);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GbxProbesBlueprintLibrary">();
	}
	static class UGbxProbesBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxProbesBlueprintLibrary>();
	}
};
static_assert(alignof(UGbxProbesBlueprintLibrary) == 0x000008, "Wrong alignment on UGbxProbesBlueprintLibrary");
static_assert(sizeof(UGbxProbesBlueprintLibrary) == 0x000028, "Wrong size on UGbxProbesBlueprintLibrary");

}

