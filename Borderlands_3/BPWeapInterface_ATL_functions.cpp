#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeapInterface_ATL

#include "Basic.hpp"

#include "BPWeapInterface_ATL_classes.hpp"
#include "BPWeapInterface_ATL_parameters.hpp"


namespace SDK
{

// Function BPWeapInterface_ATL.BPWeapInterface_ATL_C.SetEmissiveData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     BaseColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     HighlightColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     MarkerBaseColor                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     MarkerHighlightColor                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     HomingOverrideBase                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     NewParamHomingOverrideHighlight                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPWeapInterface_ATL_C::SetEmissiveData(const struct FLinearColor& BaseColor, const struct FLinearColor& HighlightColor, const struct FLinearColor& MarkerBaseColor, const struct FLinearColor& MarkerHighlightColor, const struct FLinearColor& HomingOverrideBase, const struct FLinearColor& NewParamHomingOverrideHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWeapInterface_ATL_C", "SetEmissiveData");

	Params::BPWeapInterface_ATL_C_SetEmissiveData Parms{};

	Parms.BaseColor = std::move(BaseColor);
	Parms.HighlightColor = std::move(HighlightColor);
	Parms.MarkerBaseColor = std::move(MarkerBaseColor);
	Parms.MarkerHighlightColor = std::move(MarkerHighlightColor);
	Parms.HomingOverrideBase = std::move(HomingOverrideBase);
	Parms.NewParamHomingOverrideHighlight = std::move(NewParamHomingOverrideHighlight);

	UObject::ProcessEvent(Func, &Parms);
}

}

