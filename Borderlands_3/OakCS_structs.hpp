#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OakCS

#include "Basic.hpp"


namespace SDK
{

// Enum OakCS.EDialogEventEnum
// NumValues: 0x0005
enum class EDialogEventEnum : uint8
{
	DE_Introduction                          = 0,
	DE_SubmittedPuzzle                       = 1,
	DE_IdleLine                              = 2,
	DE_PuzzleComplete                        = 3,
	DE_MAX                                   = 4,
};

// Enum OakCS.ECSScoreCondition
// NumValues: 0x0004
enum class ECSScoreCondition : uint8
{
	ParScore                                 = 0,
	HighestScore                             = 1,
	UnderParScore                            = 2,
	ECSScoreCondition_MAX                    = 3,
};

// Enum OakCS.ECSTweenEasingFunc
// NumValues: 0x0008
enum class ECSTweenEasingFunc : uint8
{
	Linear                                   = 0,
	SmoothStep                               = 1,
	EaseInBack                               = 2,
	EaseOutBack                              = 3,
	EaseInSine                               = 4,
	EaseOutSine                              = 5,
	Sine                                     = 6,
	ECSTweenEasingFunc_MAX                   = 7,
};

// Enum OakCS.ECitizenScienceManagerState
// NumValues: 0x0003
enum class ECitizenScienceManagerState : uint8
{
	StreamingManager_Uninitialized           = 0,
	StreamingManager_Initialized             = 1,
	StreamingManager_MAX                     = 2,
};

// Enum OakCS.ECSTutorialElement
// NumValues: 0x0006
enum class ECSTutorialElement : uint8
{
	Guideline                                = 0,
	SubmitButton                             = 1,
	ScoreBar                                 = 2,
	TokenPool                                = 3,
	ScoreDisplay                             = 4,
	ECSTutorialElement_MAX                   = 5,
};

// ScriptStruct OakCS.CSLevelInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FCSLevelInfo final
{
public:
	class FName                                   NameId;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardTextureName;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaterTextureName;                               // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizationTextureName;                          // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterAnimName;                                 // 0x0038(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CharacterName;                                     // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DifficultyLevel;                                   // 0x0060(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Target;                                            // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward;                                            // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestScoreMatchedModifier;                       // 0x0080(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestScoreBeatenModifier;                        // 0x0084(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PuzzleGridHeight;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PuzzleGridWidth;                                   // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemPoolData>           CosmeticRewardItemPoolData;                        // 0x0090(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CosmeticRewardCongratulationMessageTitle;          // 0x00B8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CosmeticRewardCongratulationMessageBody;           // 0x00D0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSLevelInfo) == 0x000008, "Wrong alignment on FCSLevelInfo");
static_assert(sizeof(FCSLevelInfo) == 0x0000E8, "Wrong size on FCSLevelInfo");
static_assert(offsetof(FCSLevelInfo, NameId) == 0x000000, "Member 'FCSLevelInfo::NameId' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, RewardTextureName) == 0x000008, "Member 'FCSLevelInfo::RewardTextureName' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CharaterTextureName) == 0x000018, "Member 'FCSLevelInfo::CharaterTextureName' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CustomizationTextureName) == 0x000028, "Member 'FCSLevelInfo::CustomizationTextureName' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CharacterAnimName) == 0x000038, "Member 'FCSLevelInfo::CharacterAnimName' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CharacterName) == 0x000048, "Member 'FCSLevelInfo::CharacterName' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, DifficultyLevel) == 0x000060, "Member 'FCSLevelInfo::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, Target) == 0x000078, "Member 'FCSLevelInfo::Target' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, Reward) == 0x00007C, "Member 'FCSLevelInfo::Reward' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, HighestScoreMatchedModifier) == 0x000080, "Member 'FCSLevelInfo::HighestScoreMatchedModifier' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, HighestScoreBeatenModifier) == 0x000084, "Member 'FCSLevelInfo::HighestScoreBeatenModifier' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, PuzzleGridHeight) == 0x000088, "Member 'FCSLevelInfo::PuzzleGridHeight' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, PuzzleGridWidth) == 0x00008C, "Member 'FCSLevelInfo::PuzzleGridWidth' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CosmeticRewardItemPoolData) == 0x000090, "Member 'FCSLevelInfo::CosmeticRewardItemPoolData' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CosmeticRewardCongratulationMessageTitle) == 0x0000B8, "Member 'FCSLevelInfo::CosmeticRewardCongratulationMessageTitle' has a wrong offset!");
static_assert(offsetof(FCSLevelInfo, CosmeticRewardCongratulationMessageBody) == 0x0000D0, "Member 'FCSLevelInfo::CosmeticRewardCongratulationMessageBody' has a wrong offset!");

// ScriptStruct OakCS.CSPuzzleFeedbackSettings
// 0x0020 (0x0020 - 0x0000)
struct FCSPuzzleFeedbackSettings final
{
public:
	float                                         DelayBeforeFirstFeedback;                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBeforeProgressBarFeedback;                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToUpdateProgressBar;                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSpeed;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECSTweenEasingFunc                            TileMovementEasingFunction;                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBetweenEachTileFlipped;                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelaytBetweenTileFlippingAndPerferctAlignmentAnim; // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBetweenEachTilePerfectAlignmentAnim;          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSPuzzleFeedbackSettings) == 0x000004, "Wrong alignment on FCSPuzzleFeedbackSettings");
static_assert(sizeof(FCSPuzzleFeedbackSettings) == 0x000020, "Wrong size on FCSPuzzleFeedbackSettings");
static_assert(offsetof(FCSPuzzleFeedbackSettings, DelayBeforeFirstFeedback) == 0x000000, "Member 'FCSPuzzleFeedbackSettings::DelayBeforeFirstFeedback' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, DelayBeforeProgressBarFeedback) == 0x000004, "Member 'FCSPuzzleFeedbackSettings::DelayBeforeProgressBarFeedback' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, TimeToUpdateProgressBar) == 0x000008, "Member 'FCSPuzzleFeedbackSettings::TimeToUpdateProgressBar' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, TileSpeed) == 0x00000C, "Member 'FCSPuzzleFeedbackSettings::TileSpeed' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, TileMovementEasingFunction) == 0x000010, "Member 'FCSPuzzleFeedbackSettings::TileMovementEasingFunction' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, DelayBetweenEachTileFlipped) == 0x000014, "Member 'FCSPuzzleFeedbackSettings::DelayBetweenEachTileFlipped' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, DelaytBetweenTileFlippingAndPerferctAlignmentAnim) == 0x000018, "Member 'FCSPuzzleFeedbackSettings::DelaytBetweenTileFlippingAndPerferctAlignmentAnim' has a wrong offset!");
static_assert(offsetof(FCSPuzzleFeedbackSettings, DelayBetweenEachTilePerfectAlignmentAnim) == 0x00001C, "Member 'FCSPuzzleFeedbackSettings::DelayBetweenEachTilePerfectAlignmentAnim' has a wrong offset!");

// ScriptStruct OakCS.CSPuzzleIntroSettings
// 0x0014 (0x0014 - 0x0000)
struct FCSPuzzleIntroSettings final
{
public:
	float                                         DelayBeforeStartingIntro;                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBetweenEachPuzzleColumn;                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBetweenEachPuzzleTile;                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECSTweenEasingFunc                            EasingFunction;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallingSpeed;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSPuzzleIntroSettings) == 0x000004, "Wrong alignment on FCSPuzzleIntroSettings");
static_assert(sizeof(FCSPuzzleIntroSettings) == 0x000014, "Wrong size on FCSPuzzleIntroSettings");
static_assert(offsetof(FCSPuzzleIntroSettings, DelayBeforeStartingIntro) == 0x000000, "Member 'FCSPuzzleIntroSettings::DelayBeforeStartingIntro' has a wrong offset!");
static_assert(offsetof(FCSPuzzleIntroSettings, DelayBetweenEachPuzzleColumn) == 0x000004, "Member 'FCSPuzzleIntroSettings::DelayBetweenEachPuzzleColumn' has a wrong offset!");
static_assert(offsetof(FCSPuzzleIntroSettings, DelayBetweenEachPuzzleTile) == 0x000008, "Member 'FCSPuzzleIntroSettings::DelayBetweenEachPuzzleTile' has a wrong offset!");
static_assert(offsetof(FCSPuzzleIntroSettings, EasingFunction) == 0x00000C, "Member 'FCSPuzzleIntroSettings::EasingFunction' has a wrong offset!");
static_assert(offsetof(FCSPuzzleIntroSettings, FallingSpeed) == 0x000010, "Member 'FCSPuzzleIntroSettings::FallingSpeed' has a wrong offset!");

// ScriptStruct OakCS.GFxCSTileArray
// 0x0010 (0x0010 - 0x0000)
struct FGFxCSTileArray final
{
public:
	TArray<class UGFxCSPuzzleTile*>               Tiles;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGFxCSTileArray) == 0x000008, "Wrong alignment on FGFxCSTileArray");
static_assert(sizeof(FGFxCSTileArray) == 0x000010, "Wrong size on FGFxCSTileArray");
static_assert(offsetof(FGFxCSTileArray, Tiles) == 0x000000, "Member 'FGFxCSTileArray::Tiles' has a wrong offset!");

// ScriptStruct OakCS.DebugPuzzle
// 0x0038 (0x0038 - 0x0000)
struct FDebugPuzzle final
{
public:
	class FString                                 PuzzleLines;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PuzzleGuides;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTokens;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringMatchingTile;                               // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoringPerfectAlignment;                           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringParScore;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringBestScore;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugPuzzle) == 0x000008, "Wrong alignment on FDebugPuzzle");
static_assert(sizeof(FDebugPuzzle) == 0x000038, "Wrong size on FDebugPuzzle");
static_assert(offsetof(FDebugPuzzle, PuzzleLines) == 0x000000, "Member 'FDebugPuzzle::PuzzleLines' has a wrong offset!");
static_assert(offsetof(FDebugPuzzle, PuzzleGuides) == 0x000010, "Member 'FDebugPuzzle::PuzzleGuides' has a wrong offset!");
static_assert(offsetof(FDebugPuzzle, NumberOfTokens) == 0x000020, "Member 'FDebugPuzzle::NumberOfTokens' has a wrong offset!");
static_assert(offsetof(FDebugPuzzle, ScoringMatchingTile) == 0x000024, "Member 'FDebugPuzzle::ScoringMatchingTile' has a wrong offset!");
static_assert(offsetof(FDebugPuzzle, ScoringPerfectAlignment) == 0x000028, "Member 'FDebugPuzzle::ScoringPerfectAlignment' has a wrong offset!");
static_assert(offsetof(FDebugPuzzle, ScoringParScore) == 0x00002C, "Member 'FDebugPuzzle::ScoringParScore' has a wrong offset!");
static_assert(offsetof(FDebugPuzzle, ScoringBestScore) == 0x000030, "Member 'FDebugPuzzle::ScoringBestScore' has a wrong offset!");

}

