#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IO_MissionUsable

#include "Basic.hpp"

#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GbxMission_structs.hpp"
#include "EnumState_MissionUsable_structs.hpp"
#include "Enum_MissionUsableState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IO_MissionUsable.IO_MissionUsable_C
// 0x0128 (0x0730 - 0x0608)
class AIO_MissionUsable_C : public AMission_InteractiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0608(0x0008)(Transient, DuplicateTransient)
	class UBP_IO_LootSpawnComponent_C*            BP_IO_LootSpawnComponent;                          // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URegionBalanceStateComponent*           RegionBalanceState;                                // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USocketComponent*                       LootSocket;                                        // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMissionObserverComponent*              MissionObserver;                                   // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOakMissionIconComponent*               OakMissionIcon;                                    // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUsableComponent*                       Usable;                                            // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   MissionUsableStartedUse;                           // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   MissionUsableFinishedUse;                          // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   MissionUsableIsUsable;                             // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FMissionEventReference                 MissionEventToSendOnUse;                           // 0x0678(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class AController*                            LastUserController;                                // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumState_MissionUsable                       MissionUsableState;                                // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691[0x3];                                      // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LootSpawnDelay;                                    // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemPoolListInterface*                 ItemPool;                                          // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   LootSocketName;                                    // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULootSpawnPatternData*                  SpawnPattern;                                      // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AGbxLevelSequenceActor*                 GBXLevelSequenceToPlayOnUse;                       // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   MissionUsable_SequenceFinished;                    // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         GBXLevelSequenceDelay;                             // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CC[0x4];                                      // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionEventReference                 MissionEventToSendWhenSequenceIsFinished_;         // 0x06D0(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FMissionObjectiveReference             SequenceFailsafeObjective;                         // 0x06E0(0x0030)(Edit, BlueprintVisible)
	bool                                          SequenceIsMissionSafe;                             // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711[0x3];                                      // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToSpawnLootOver;                               // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttachLoot;                                        // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseMissionLootFailsafe;                            // 0x0719(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OnLateJoin_GoToEndAndStop;                         // 0x071A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71B[0x5];                                      // 0x071B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxCondition*                          Cond_MissionUsableState_NewEnumerator1;            // 0x0720(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGbxCondition*                          Cond_MissionUsableState_NewEnumerator2;            // 0x0728(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void SetLastUser(class AController* Controller);
	void CheckForMissionSequenceFailsafe();
	void UserConstructionScript();
	void SetUsableState(Enum_MissionUsableState State);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_3_UsableUsedOnChannelSignature__DelegateSignature_IO_MissionUsable(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void PrimaryUse();
	void BndEvt__Usable_K2Node_ComponentBoundEvent_4_UsableUsedOnChannelSignature__DelegateSignature_IO_MissionUsable(class AController* UserController, class UPrimitiveComponent* UsedComponent);
	void SecondaryUse();
	void Play_Feedback_Used();
	void Play_Feedback_UsableDefault();
	void Play_Feedback_InUse();
	void Play_Feedback_Usable();
	void __UserState_MissionUsableState_0(bool bFromLoad);
	void __UserState_MissionUsableState_1(bool bFromLoad);
	void __UserState_MissionUsableState_2(bool bFromLoad);
	void BndEvt__GBXLevelSequenceToPlayOnUse_K2Node_ComponentBoundEvent_0_OnMovieSceneSequencePlayerEvent__DelegateSignature_IO_MissionUsable();
	void ExecuteUbergraph_IO_MissionUsable(int32 EntryPoint);
	void MissionUsable_SequenceFinished__DelegateSignature();
	void MissionUsableIsUsable__DelegateSignature();
	void MissionUsableFinishedUse__DelegateSignature();
	void MissionUsableStartedUse__DelegateSignature(class AController* UserController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IO_MissionUsable_C">();
	}
	static class AIO_MissionUsable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIO_MissionUsable_C>();
	}
};
static_assert(alignof(AIO_MissionUsable_C) == 0x000008, "Wrong alignment on AIO_MissionUsable_C");
static_assert(sizeof(AIO_MissionUsable_C) == 0x000730, "Wrong size on AIO_MissionUsable_C");
static_assert(offsetof(AIO_MissionUsable_C, UberGraphFrame) == 0x000608, "Member 'AIO_MissionUsable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, BP_IO_LootSpawnComponent) == 0x000610, "Member 'AIO_MissionUsable_C::BP_IO_LootSpawnComponent' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, RegionBalanceState) == 0x000618, "Member 'AIO_MissionUsable_C::RegionBalanceState' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, LootSocket) == 0x000620, "Member 'AIO_MissionUsable_C::LootSocket' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionObserver) == 0x000628, "Member 'AIO_MissionUsable_C::MissionObserver' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, OakMissionIcon) == 0x000630, "Member 'AIO_MissionUsable_C::OakMissionIcon' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, Usable) == 0x000638, "Member 'AIO_MissionUsable_C::Usable' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, DefaultSceneRoot) == 0x000640, "Member 'AIO_MissionUsable_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionUsableStartedUse) == 0x000648, "Member 'AIO_MissionUsable_C::MissionUsableStartedUse' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionUsableFinishedUse) == 0x000658, "Member 'AIO_MissionUsable_C::MissionUsableFinishedUse' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionUsableIsUsable) == 0x000668, "Member 'AIO_MissionUsable_C::MissionUsableIsUsable' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionEventToSendOnUse) == 0x000678, "Member 'AIO_MissionUsable_C::MissionEventToSendOnUse' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, LastUserController) == 0x000688, "Member 'AIO_MissionUsable_C::LastUserController' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionUsableState) == 0x000690, "Member 'AIO_MissionUsable_C::MissionUsableState' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, LootSpawnDelay) == 0x000694, "Member 'AIO_MissionUsable_C::LootSpawnDelay' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, ItemPool) == 0x000698, "Member 'AIO_MissionUsable_C::ItemPool' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, LootSocketName) == 0x0006A0, "Member 'AIO_MissionUsable_C::LootSocketName' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, SpawnPattern) == 0x0006A8, "Member 'AIO_MissionUsable_C::SpawnPattern' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, GBXLevelSequenceToPlayOnUse) == 0x0006B0, "Member 'AIO_MissionUsable_C::GBXLevelSequenceToPlayOnUse' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionUsable_SequenceFinished) == 0x0006B8, "Member 'AIO_MissionUsable_C::MissionUsable_SequenceFinished' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, GBXLevelSequenceDelay) == 0x0006C8, "Member 'AIO_MissionUsable_C::GBXLevelSequenceDelay' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, MissionEventToSendWhenSequenceIsFinished_) == 0x0006D0, "Member 'AIO_MissionUsable_C::MissionEventToSendWhenSequenceIsFinished_' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, SequenceFailsafeObjective) == 0x0006E0, "Member 'AIO_MissionUsable_C::SequenceFailsafeObjective' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, SequenceIsMissionSafe) == 0x000710, "Member 'AIO_MissionUsable_C::SequenceIsMissionSafe' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, TimeToSpawnLootOver) == 0x000714, "Member 'AIO_MissionUsable_C::TimeToSpawnLootOver' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, AttachLoot) == 0x000718, "Member 'AIO_MissionUsable_C::AttachLoot' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, UseMissionLootFailsafe) == 0x000719, "Member 'AIO_MissionUsable_C::UseMissionLootFailsafe' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, OnLateJoin_GoToEndAndStop) == 0x00071A, "Member 'AIO_MissionUsable_C::OnLateJoin_GoToEndAndStop' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, Cond_MissionUsableState_NewEnumerator1) == 0x000720, "Member 'AIO_MissionUsable_C::Cond_MissionUsableState_NewEnumerator1' has a wrong offset!");
static_assert(offsetof(AIO_MissionUsable_C, Cond_MissionUsableState_NewEnumerator2) == 0x000728, "Member 'AIO_MissionUsable_C::Cond_MissionUsableState_NewEnumerator2' has a wrong offset!");

}

