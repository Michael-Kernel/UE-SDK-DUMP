#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxProbes

#include "Basic.hpp"

#include "GbxProbes_classes.hpp"
#include "GbxProbes_parameters.hpp"


namespace SDK
{

// Function GbxProbes.GbxProbesBlueprintLibrary.EmitTestProbeResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxProbeId                      ProbeId                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxProbeResult                         Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraData                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::EmitTestProbeResult(const struct FGbxProbeId& ProbeId, class FName Test, EGbxProbeResult Result, const class FString& ExtraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "EmitTestProbeResult");

	Params::GbxProbesBlueprintLibrary_EmitTestProbeResult Parms{};

	Parms.ProbeId = std::move(ProbeId);
	Parms.Test = Test;
	Parms.Result = Result;
	Parms.ExtraData = std::move(ExtraData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.EmitTestProbeResultWithData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxProbeId                      ProbeId                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxProbeResult                         Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxProbeExtraData>       ExtraDataArray                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::EmitTestProbeResultWithData(const struct FGbxProbeId& ProbeId, class FName Test, EGbxProbeResult Result, const TArray<struct FGbxProbeExtraData>& ExtraDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "EmitTestProbeResultWithData");

	Params::GbxProbesBlueprintLibrary_EmitTestProbeResultWithData Parms{};

	Parms.ProbeId = std::move(ProbeId);
	Parms.Test = Test;
	Parms.Result = Result;
	Parms.ExtraDataArray = std::move(ExtraDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.FlushPendingTestProbes
// (Final, Native, Static, Public, BlueprintCallable)

void UGbxProbesBlueprintLibrary::FlushPendingTestProbes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "FlushPendingTestProbes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.IsClassEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnabled                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::IsClassEnabled(class FName Class_0, bool* IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "IsClassEnabled");

	Params::GbxProbesBlueprintLibrary_IsClassEnabled Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsEnabled != nullptr)
		*IsEnabled = Parms.IsEnabled;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.IsTestEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnabled                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::IsTestEnabled(class FName Test, bool* IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "IsTestEnabled");

	Params::GbxProbesBlueprintLibrary_IsTestEnabled Parms{};

	Parms.Test = Test;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsEnabled != nullptr)
		*IsEnabled = Parms.IsEnabled;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.IsTestProbeEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxProbeId                      ProbeId                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnabled                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::IsTestProbeEnabled(const struct FGbxProbeId& ProbeId, class FName Test, bool* IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "IsTestProbeEnabled");

	Params::GbxProbesBlueprintLibrary_IsTestProbeEnabled Parms{};

	Parms.ProbeId = std::move(ProbeId);
	Parms.Test = Test;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsEnabled != nullptr)
		*IsEnabled = Parms.IsEnabled;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.IsValidId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGbxProbeId                      ProbeId                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::IsValidId(const struct FGbxProbeId& ProbeId, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "IsValidId");

	Params::GbxProbesBlueprintLibrary_IsValidId Parms{};

	Parms.ProbeId = std::move(ProbeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function GbxProbes.GbxProbesBlueprintLibrary.MakeProbeId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Class_0                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SubType                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxProbeId                      OutId                                                  (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::MakeProbeId(const class FString& Class_0, const class FString& Type, const class FString& SubType, struct FGbxProbeId* OutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "MakeProbeId");

	Params::GbxProbesBlueprintLibrary_MakeProbeId Parms{};

	Parms.Class_0 = std::move(Class_0);
	Parms.Type = std::move(Type);
	Parms.SubType = std::move(SubType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutId != nullptr)
		*OutId = std::move(Parms.OutId);
}


// Function GbxProbes.GbxProbesBlueprintLibrary.ResolveGbxProbeId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          InObj                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     InTag                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxProbeId                      OutId                                                  (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxProbesBlueprintLibrary::ResolveGbxProbeId(const class UObject* InObj, const struct FGameplayTag& InTag, struct FGbxProbeId* OutId, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxProbesBlueprintLibrary", "ResolveGbxProbeId");

	Params::GbxProbesBlueprintLibrary_ResolveGbxProbeId Parms{};

	Parms.InObj = InObj;
	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutId != nullptr)
		*OutId = std::move(Parms.OutId);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}

}

