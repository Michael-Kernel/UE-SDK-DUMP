#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NPC

#include "Basic.hpp"

#include "GbxInventory_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_NPC.BPI_NPC_C.SetNPCEngagePlayerRange
// 0x0004 (0x0004 - 0x0000)
struct BPI_NPC_C_SetNPCEngagePlayerRange final
{
public:
	float                                         Units;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NPC_C_SetNPCEngagePlayerRange) == 0x000004, "Wrong alignment on BPI_NPC_C_SetNPCEngagePlayerRange");
static_assert(sizeof(BPI_NPC_C_SetNPCEngagePlayerRange) == 0x000004, "Wrong size on BPI_NPC_C_SetNPCEngagePlayerRange");
static_assert(offsetof(BPI_NPC_C_SetNPCEngagePlayerRange, Units) == 0x000000, "Member 'BPI_NPC_C_SetNPCEngagePlayerRange::Units' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.NPCCanReviveOthers
// 0x0001 (0x0001 - 0x0000)
struct BPI_NPC_C_NPCCanReviveOthers final
{
public:
	bool                                          CanReviveOthers;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_NPCCanReviveOthers) == 0x000001, "Wrong alignment on BPI_NPC_C_NPCCanReviveOthers");
static_assert(sizeof(BPI_NPC_C_NPCCanReviveOthers) == 0x000001, "Wrong size on BPI_NPC_C_NPCCanReviveOthers");
static_assert(offsetof(BPI_NPC_C_NPCCanReviveOthers, CanReviveOthers) == 0x000000, "Member 'BPI_NPC_C_NPCCanReviveOthers::CanReviveOthers' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.IgnoreEnemies
// 0x0001 (0x0001 - 0x0000)
struct BPI_NPC_C_IgnoreEnemies final
{
public:
	bool                                          IgnoreEnemies_0;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_IgnoreEnemies) == 0x000001, "Wrong alignment on BPI_NPC_C_IgnoreEnemies");
static_assert(sizeof(BPI_NPC_C_IgnoreEnemies) == 0x000001, "Wrong size on BPI_NPC_C_IgnoreEnemies");
static_assert(offsetof(BPI_NPC_C_IgnoreEnemies, IgnoreEnemies_0) == 0x000000, "Member 'BPI_NPC_C_IgnoreEnemies::IgnoreEnemies_0' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.ThingToHold
// 0x00D0 (0x00D0 - 0x0000)
struct BPI_NPC_C_ThingToHold final
{
public:
	class UStaticMesh*                            TheThingToHold;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FItemPoolInfo                          ThePickupToHold;                                   // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FTransform                             OffsetTransform;                                   // 0x0090(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         PutAwayOffset;                                     // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TakeOutOffset;                                     // 0x00C4(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAltAnimation;                                   // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_ThingToHold) == 0x000010, "Wrong alignment on BPI_NPC_C_ThingToHold");
static_assert(sizeof(BPI_NPC_C_ThingToHold) == 0x0000D0, "Wrong size on BPI_NPC_C_ThingToHold");
static_assert(offsetof(BPI_NPC_C_ThingToHold, TheThingToHold) == 0x000000, "Member 'BPI_NPC_C_ThingToHold::TheThingToHold' has a wrong offset!");
static_assert(offsetof(BPI_NPC_C_ThingToHold, ThePickupToHold) == 0x000008, "Member 'BPI_NPC_C_ThingToHold::ThePickupToHold' has a wrong offset!");
static_assert(offsetof(BPI_NPC_C_ThingToHold, OffsetTransform) == 0x000090, "Member 'BPI_NPC_C_ThingToHold::OffsetTransform' has a wrong offset!");
static_assert(offsetof(BPI_NPC_C_ThingToHold, PutAwayOffset) == 0x0000C0, "Member 'BPI_NPC_C_ThingToHold::PutAwayOffset' has a wrong offset!");
static_assert(offsetof(BPI_NPC_C_ThingToHold, TakeOutOffset) == 0x0000C4, "Member 'BPI_NPC_C_ThingToHold::TakeOutOffset' has a wrong offset!");
static_assert(offsetof(BPI_NPC_C_ThingToHold, UseAltAnimation) == 0x0000C8, "Member 'BPI_NPC_C_ThingToHold::UseAltAnimation' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.CanPatrol
// 0x0001 (0x0001 - 0x0000)
struct BPI_NPC_C_CanPatrol final
{
public:
	bool                                          CanPatrol_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_CanPatrol) == 0x000001, "Wrong alignment on BPI_NPC_C_CanPatrol");
static_assert(sizeof(BPI_NPC_C_CanPatrol) == 0x000001, "Wrong size on BPI_NPC_C_CanPatrol");
static_assert(offsetof(BPI_NPC_C_CanPatrol, CanPatrol_0) == 0x000000, "Member 'BPI_NPC_C_CanPatrol::CanPatrol_0' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.EngagePlayerWhenIdle
// 0x0001 (0x0001 - 0x0000)
struct BPI_NPC_C_EngagePlayerWhenIdle final
{
public:
	bool                                          LookAtPlayer;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_EngagePlayerWhenIdle) == 0x000001, "Wrong alignment on BPI_NPC_C_EngagePlayerWhenIdle");
static_assert(sizeof(BPI_NPC_C_EngagePlayerWhenIdle) == 0x000001, "Wrong size on BPI_NPC_C_EngagePlayerWhenIdle");
static_assert(offsetof(BPI_NPC_C_EngagePlayerWhenIdle, LookAtPlayer) == 0x000000, "Member 'BPI_NPC_C_EngagePlayerWhenIdle::LookAtPlayer' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.UseSmartObjects
// 0x0001 (0x0001 - 0x0000)
struct BPI_NPC_C_UseSmartObjects final
{
public:
	bool                                          UseSmartObjects_0;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_UseSmartObjects) == 0x000001, "Wrong alignment on BPI_NPC_C_UseSmartObjects");
static_assert(sizeof(BPI_NPC_C_UseSmartObjects) == 0x000001, "Wrong size on BPI_NPC_C_UseSmartObjects");
static_assert(offsetof(BPI_NPC_C_UseSmartObjects, UseSmartObjects_0) == 0x000000, "Member 'BPI_NPC_C_UseSmartObjects::UseSmartObjects_0' has a wrong offset!");

// Function BPI_NPC.BPI_NPC_C.EngageInCombat
// 0x0001 (0x0001 - 0x0000)
struct BPI_NPC_C_EngageInCombat final
{
public:
	bool                                          EngageInCombat_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_NPC_C_EngageInCombat) == 0x000001, "Wrong alignment on BPI_NPC_C_EngageInCombat");
static_assert(sizeof(BPI_NPC_C_EngageInCombat) == 0x000001, "Wrong size on BPI_NPC_C_EngageInCombat");
static_assert(offsetof(BPI_NPC_C_EngageInCombat, EngageInCombat_0) == 0x000000, "Member 'BPI_NPC_C_EngageInCombat::EngageInCombat_0' has a wrong offset!");

}

