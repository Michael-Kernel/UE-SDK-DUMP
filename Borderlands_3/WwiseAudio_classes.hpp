#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WwiseAudio

#include "Basic.hpp"

#include "WwiseAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class WwiseAudio.MovieSceneWwiseEventSection
// 0x0038 (0x0118 - 0x00E0)
class UMovieSceneWwiseEventSection final : public UMovieSceneSection
{
public:
	EWwiseTrackDirectionality                     PlaybackDirection;                                 // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            WwiseEventStart;                                   // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseEventStop;                                    // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterRadius;                                     // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlaythrough;                                 // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoopingEvent;                                   // 0x00FD(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE[0x1A];                                      // 0x00FE(0x001A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneWwiseEventSection">();
	}
	static class UMovieSceneWwiseEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneWwiseEventSection>();
	}
};
static_assert(alignof(UMovieSceneWwiseEventSection) == 0x000008, "Wrong alignment on UMovieSceneWwiseEventSection");
static_assert(sizeof(UMovieSceneWwiseEventSection) == 0x000118, "Wrong size on UMovieSceneWwiseEventSection");
static_assert(offsetof(UMovieSceneWwiseEventSection, PlaybackDirection) == 0x0000E0, "Member 'UMovieSceneWwiseEventSection::PlaybackDirection' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseEventSection, WwiseEventStart) == 0x0000E8, "Member 'UMovieSceneWwiseEventSection::WwiseEventStart' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseEventSection, WwiseEventStop) == 0x0000F0, "Member 'UMovieSceneWwiseEventSection::WwiseEventStop' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseEventSection, EmitterRadius) == 0x0000F8, "Member 'UMovieSceneWwiseEventSection::EmitterRadius' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseEventSection, bAllowPlaythrough) == 0x0000FC, "Member 'UMovieSceneWwiseEventSection::bAllowPlaythrough' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseEventSection, bIsLoopingEvent) == 0x0000FD, "Member 'UMovieSceneWwiseEventSection::bIsLoopingEvent' has a wrong offset!");

// Class WwiseAudio.AudioParametersProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IAudioParametersProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioParametersProviderInterface">();
	}
	static class IAudioParametersProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioParametersProviderInterface>();
	}
};
static_assert(alignof(IAudioParametersProviderInterface) == 0x000008, "Wrong alignment on IAudioParametersProviderInterface");
static_assert(sizeof(IAudioParametersProviderInterface) == 0x000028, "Wrong size on IAudioParametersProviderInterface");

// Class WwiseAudio.InterpTrackWwiseAudioRTPC
// 0x0010 (0x00A0 - 0x0090)
class UInterpTrackWwiseAudioRTPC final : public UInterpTrackFloatBase
{
public:
	class UWwiseRtpc*                             RTPC;                                              // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlayOnReverse : 1;                                // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bContinueRTPCOnMatineeEnd : 1;                     // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackWwiseAudioRTPC">();
	}
	static class UInterpTrackWwiseAudioRTPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackWwiseAudioRTPC>();
	}
};
static_assert(alignof(UInterpTrackWwiseAudioRTPC) == 0x000008, "Wrong alignment on UInterpTrackWwiseAudioRTPC");
static_assert(sizeof(UInterpTrackWwiseAudioRTPC) == 0x0000A0, "Wrong size on UInterpTrackWwiseAudioRTPC");
static_assert(offsetof(UInterpTrackWwiseAudioRTPC, RTPC) == 0x000090, "Member 'UInterpTrackWwiseAudioRTPC::RTPC' has a wrong offset!");

// Class WwiseAudio.AudioPositioningProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IAudioPositioningProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPositioningProviderInterface">();
	}
	static class IAudioPositioningProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioPositioningProviderInterface>();
	}
};
static_assert(alignof(IAudioPositioningProviderInterface) == 0x000008, "Wrong alignment on IAudioPositioningProviderInterface");
static_assert(sizeof(IAudioPositioningProviderInterface) == 0x000028, "Wrong size on IAudioPositioningProviderInterface");

// Class WwiseAudio.InterpTrackInstWwiseAudioEvent
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstWwiseAudioEvent final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstWwiseAudioEvent">();
	}
	static class UInterpTrackInstWwiseAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstWwiseAudioEvent>();
	}
};
static_assert(alignof(UInterpTrackInstWwiseAudioEvent) == 0x000008, "Wrong alignment on UInterpTrackInstWwiseAudioEvent");
static_assert(sizeof(UInterpTrackInstWwiseAudioEvent) == 0x000030, "Wrong size on UInterpTrackInstWwiseAudioEvent");
static_assert(offsetof(UInterpTrackInstWwiseAudioEvent, LastUpdatePosition) == 0x000028, "Member 'UInterpTrackInstWwiseAudioEvent::LastUpdatePosition' has a wrong offset!");

// Class WwiseAudio.InterpTrackInstWwiseAudioRTPC
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstWwiseAudioRTPC final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstWwiseAudioRTPC">();
	}
	static class UInterpTrackInstWwiseAudioRTPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstWwiseAudioRTPC>();
	}
};
static_assert(alignof(UInterpTrackInstWwiseAudioRTPC) == 0x000008, "Wrong alignment on UInterpTrackInstWwiseAudioRTPC");
static_assert(sizeof(UInterpTrackInstWwiseAudioRTPC) == 0x000030, "Wrong size on UInterpTrackInstWwiseAudioRTPC");
static_assert(offsetof(UInterpTrackInstWwiseAudioRTPC, LastUpdatePosition) == 0x000028, "Member 'UInterpTrackInstWwiseAudioRTPC::LastUpdatePosition' has a wrong offset!");

// Class WwiseAudio.InterpTrackWwiseAudioEvent
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackWwiseAudioEvent final : public UInterpTrackVectorBase
{
public:
	TArray<struct FWwiseAudioEventTrackKey>       Events;                                            // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bContinueEventOnMatineeEnd : 1;                    // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackWwiseAudioEvent">();
	}
	static class UInterpTrackWwiseAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackWwiseAudioEvent>();
	}
};
static_assert(alignof(UInterpTrackWwiseAudioEvent) == 0x000008, "Wrong alignment on UInterpTrackWwiseAudioEvent");
static_assert(sizeof(UInterpTrackWwiseAudioEvent) == 0x0000A8, "Wrong size on UInterpTrackWwiseAudioEvent");
static_assert(offsetof(UInterpTrackWwiseAudioEvent, Events) == 0x000090, "Member 'UInterpTrackWwiseAudioEvent::Events' has a wrong offset!");

// Class WwiseAudio.MovieSceneWwiseTrack
// 0x0018 (0x0070 - 0x0058)
class UMovieSceneWwiseTrack final : public UMovieSceneNameableTrack
{
public:
	bool                                          bAllowRename;                                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             WwiseSections;                                     // 0x0060(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneWwiseTrack">();
	}
	static class UMovieSceneWwiseTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneWwiseTrack>();
	}
};
static_assert(alignof(UMovieSceneWwiseTrack) == 0x000008, "Wrong alignment on UMovieSceneWwiseTrack");
static_assert(sizeof(UMovieSceneWwiseTrack) == 0x000070, "Wrong size on UMovieSceneWwiseTrack");
static_assert(offsetof(UMovieSceneWwiseTrack, bAllowRename) == 0x000058, "Member 'UMovieSceneWwiseTrack::bAllowRename' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseTrack, WwiseSections) == 0x000060, "Member 'UMovieSceneWwiseTrack::WwiseSections' has a wrong offset!");

// Class WwiseAudio.WwiseAmbientSound
// 0x00E0 (0x0538 - 0x0458)
class AWwiseAmbientSound : public AActor
{
public:
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioComponent*                   AkComponent;                                       // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            WwiseEvent;                                        // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartAutomatically;                               // 0x0470(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWwiseAmbientSound*>             ChildEmitters;                                     // 0x0478(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AWwiseAmbientSound*>             SuppressEmitters;                                  // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOnlyEmitWhenContainingListener;                   // 0x0498(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientToPlayer;                                   // 0x0499(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricEmitterRadius;                           // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricEmitterGain;                             // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseRtpc*                             VolumetricAttenuationRTPC;                         // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricAttenuationMaxDistance;                  // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWwiseAmbientSound*>             ExternalActiveRTPCAttenuationPortals;              // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AWwiseAmbientSound*>             ActiveSuppressors;                                 // 0x04C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSet<class AWwiseAmbientSound*>               SuppressorPortals;                                 // 0x04D8(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_528[0x10];                                     // 0x0528(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetAudioEmitterLocation(const struct FVector& ListenerLocation);
	void StartAmbientSound();
	void StopAmbientSound();
	void ToggleAmbientSound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAmbientSound">();
	}
	static class AWwiseAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWwiseAmbientSound>();
	}
};
static_assert(alignof(AWwiseAmbientSound) == 0x000008, "Wrong alignment on AWwiseAmbientSound");
static_assert(sizeof(AWwiseAmbientSound) == 0x000538, "Wrong size on AWwiseAmbientSound");
static_assert(offsetof(AWwiseAmbientSound, AkComponent) == 0x000460, "Member 'AWwiseAmbientSound::AkComponent' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, WwiseEvent) == 0x000468, "Member 'AWwiseAmbientSound::WwiseEvent' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, bStartAutomatically) == 0x000470, "Member 'AWwiseAmbientSound::bStartAutomatically' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, ChildEmitters) == 0x000478, "Member 'AWwiseAmbientSound::ChildEmitters' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, SuppressEmitters) == 0x000488, "Member 'AWwiseAmbientSound::SuppressEmitters' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, bOnlyEmitWhenContainingListener) == 0x000498, "Member 'AWwiseAmbientSound::bOnlyEmitWhenContainingListener' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, bOrientToPlayer) == 0x000499, "Member 'AWwiseAmbientSound::bOrientToPlayer' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, VolumetricEmitterRadius) == 0x00049C, "Member 'AWwiseAmbientSound::VolumetricEmitterRadius' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, VolumetricEmitterGain) == 0x0004A0, "Member 'AWwiseAmbientSound::VolumetricEmitterGain' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, VolumetricAttenuationRTPC) == 0x0004A8, "Member 'AWwiseAmbientSound::VolumetricAttenuationRTPC' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, VolumetricAttenuationMaxDistance) == 0x0004B0, "Member 'AWwiseAmbientSound::VolumetricAttenuationMaxDistance' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, ExternalActiveRTPCAttenuationPortals) == 0x0004B8, "Member 'AWwiseAmbientSound::ExternalActiveRTPCAttenuationPortals' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, ActiveSuppressors) == 0x0004C8, "Member 'AWwiseAmbientSound::ActiveSuppressors' has a wrong offset!");
static_assert(offsetof(AWwiseAmbientSound, SuppressorPortals) == 0x0004D8, "Member 'AWwiseAmbientSound::SuppressorPortals' has a wrong offset!");

// Class WwiseAudio.WwiseAssetSyncDestination
// 0x0020 (0x0048 - 0x0028)
class UWwiseAssetSyncDestination final : public UObject
{
public:
	struct FGuid                                  WwiseObjectID;                                     // 0x0028(0x0010)(Edit, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SyncPath;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAssetSyncDestination">();
	}
	static class UWwiseAssetSyncDestination* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseAssetSyncDestination>();
	}
};
static_assert(alignof(UWwiseAssetSyncDestination) == 0x000008, "Wrong alignment on UWwiseAssetSyncDestination");
static_assert(sizeof(UWwiseAssetSyncDestination) == 0x000048, "Wrong size on UWwiseAssetSyncDestination");
static_assert(offsetof(UWwiseAssetSyncDestination, WwiseObjectID) == 0x000028, "Member 'UWwiseAssetSyncDestination::WwiseObjectID' has a wrong offset!");
static_assert(offsetof(UWwiseAssetSyncDestination, SyncPath) == 0x000038, "Member 'UWwiseAssetSyncDestination::SyncPath' has a wrong offset!");

// Class WwiseAudio.WwiseGameObjectComponent
// 0x0000 (0x02D0 - 0x02D0)
class UWwiseGameObjectComponent : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseGameObjectComponent">();
	}
	static class UWwiseGameObjectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseGameObjectComponent>();
	}
};
static_assert(alignof(UWwiseGameObjectComponent) == 0x000008, "Wrong alignment on UWwiseGameObjectComponent");
static_assert(sizeof(UWwiseGameObjectComponent) == 0x0002D0, "Wrong size on UWwiseGameObjectComponent");

// Class WwiseAudio.WwiseAudioComponent
// 0x0170 (0x0440 - 0x02D0)
class UWwiseAudioComponent final : public UWwiseGameObjectComponent
{
public:
	class UWwiseEvent*                            OnAttachEvent;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseEvent*                            OptionalBodySwitchStopEvent;                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseAudioComponentType                      WwiseComponentType;                                // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitterGain;                                       // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWwiseLocationOverride>         OverrideLocations;                                 // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocationsAreRelative;                     // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioParametersProviderInterface> AudioParametersProvider;                           // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EWwiseAudioComponentMixBehavior               WwiseMixBehavior;                                  // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAcousticsMode                                AcousticsMode;                                     // 0x0311(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_312[0x2];                                      // 0x0312(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReverbBoost;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnStartedNewAudio;                                 // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMusicPlayStarted;                                // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMusicBeat;                                       // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMusicSyncPoint;                                  // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRtpcSync;                                        // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlaybackEnded;                                   // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioPositioningProviderInterface> PositioningProvider;                               // 0x0380(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                PreviousRotationVector;                            // 0x0390(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, float>                           RtpcCallbackValues;                                // 0x03A0(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F0[0x40];                                     // 0x03F0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	EWwiseMultiPositionType                       MultiPositionType;                                 // 0x0430(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0xF];                                      // 0x0431(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FWwisePlaybackInstance> GetPlayingInstances();
	float GetRtpcValue(class UWwiseRtpc* RTPC);
	bool IsPossiblyAudible(class UWwiseEvent* WwiseEvent, float EventAttenuationScale);
	void Jettison();
	void MakeMidiNote(int32 NoteNum, int32 Velocity, int32 Channel, float Duration, float StartTime, class UWwiseEvent* AssociatedEvent);
	void PostTrigger(class UWwiseTrigger* Trigger);
	struct FWwisePlaybackInstance PostWwiseEvent(class UWwiseEvent* WwiseEvent, int32 Flags_0);
	void RegisterRtpcValueCallback(const TArray<class UWwiseRtpc*>& CallbackRtpcs);
	void ScaleAttenuation(float ScalingFactor);
	void ScaleToRadius(float Radius);
	void SetEmitterLocations(const TArray<struct FWwiseLocationOverride>& NewLocations, EWwiseMultiPositionType MultiPositionType_0, bool bLocationsAreRelative);
	void SetRTPCValue(class UWwiseRtpc* GameParameter, float Value, float ValueChangeDuration, EWwiseCurveInterpolation FadeCurve);
	void SetSwitch(class UWwiseSwitch* WwiseSwitch);
	void StartManagedLoop(class UWwiseEvent* NewLoopEvent);
	void StopAll();
	void StopManagedLoop(class UWwiseEvent* OptionalStopEvent);

	float GetMaxAttenuationRadius() const;
	float GetRadius() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAudioComponent">();
	}
	static class UWwiseAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseAudioComponent>();
	}
};
static_assert(alignof(UWwiseAudioComponent) == 0x000008, "Wrong alignment on UWwiseAudioComponent");
static_assert(sizeof(UWwiseAudioComponent) == 0x000440, "Wrong size on UWwiseAudioComponent");
static_assert(offsetof(UWwiseAudioComponent, OnAttachEvent) == 0x0002D0, "Member 'UWwiseAudioComponent::OnAttachEvent' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OptionalBodySwitchStopEvent) == 0x0002D8, "Member 'UWwiseAudioComponent::OptionalBodySwitchStopEvent' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, WwiseComponentType) == 0x0002E0, "Member 'UWwiseAudioComponent::WwiseComponentType' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, EmitterGain) == 0x0002E4, "Member 'UWwiseAudioComponent::EmitterGain' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OverrideLocations) == 0x0002E8, "Member 'UWwiseAudioComponent::OverrideLocations' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, bOverrideLocationsAreRelative) == 0x0002F8, "Member 'UWwiseAudioComponent::bOverrideLocationsAreRelative' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, AudioParametersProvider) == 0x000300, "Member 'UWwiseAudioComponent::AudioParametersProvider' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, WwiseMixBehavior) == 0x000310, "Member 'UWwiseAudioComponent::WwiseMixBehavior' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, AcousticsMode) == 0x000311, "Member 'UWwiseAudioComponent::AcousticsMode' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, ReverbBoost) == 0x000314, "Member 'UWwiseAudioComponent::ReverbBoost' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OnStartedNewAudio) == 0x000318, "Member 'UWwiseAudioComponent::OnStartedNewAudio' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OnMusicPlayStarted) == 0x000328, "Member 'UWwiseAudioComponent::OnMusicPlayStarted' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OnMusicBeat) == 0x000338, "Member 'UWwiseAudioComponent::OnMusicBeat' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OnMusicSyncPoint) == 0x000348, "Member 'UWwiseAudioComponent::OnMusicSyncPoint' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OnRtpcSync) == 0x000358, "Member 'UWwiseAudioComponent::OnRtpcSync' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, OnPlaybackEnded) == 0x000368, "Member 'UWwiseAudioComponent::OnPlaybackEnded' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, PositioningProvider) == 0x000380, "Member 'UWwiseAudioComponent::PositioningProvider' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, PreviousRotationVector) == 0x000390, "Member 'UWwiseAudioComponent::PreviousRotationVector' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, RtpcCallbackValues) == 0x0003A0, "Member 'UWwiseAudioComponent::RtpcCallbackValues' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponent, MultiPositionType) == 0x000430, "Member 'UWwiseAudioComponent::MultiPositionType' has a wrong offset!");

// Class WwiseAudio.WwiseWorldComponentPool
// 0x0018 (0x0190 - 0x0178)
class UWwiseWorldComponentPool final : public UActorComponent
{
public:
	int32                                         DesiredPoolSize;                                   // 0x0178(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentPoolSize;                                   // 0x017C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UWwiseAudioComponent*>           PooledComponents;                                  // 0x0180(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseWorldComponentPool">();
	}
	static class UWwiseWorldComponentPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseWorldComponentPool>();
	}
};
static_assert(alignof(UWwiseWorldComponentPool) == 0x000008, "Wrong alignment on UWwiseWorldComponentPool");
static_assert(sizeof(UWwiseWorldComponentPool) == 0x000190, "Wrong size on UWwiseWorldComponentPool");
static_assert(offsetof(UWwiseWorldComponentPool, DesiredPoolSize) == 0x000178, "Member 'UWwiseWorldComponentPool::DesiredPoolSize' has a wrong offset!");
static_assert(offsetof(UWwiseWorldComponentPool, CurrentPoolSize) == 0x00017C, "Member 'UWwiseWorldComponentPool::CurrentPoolSize' has a wrong offset!");
static_assert(offsetof(UWwiseWorldComponentPool, PooledComponents) == 0x000180, "Member 'UWwiseWorldComponentPool::PooledComponents' has a wrong offset!");

// Class WwiseAudio.WwiseAudioComponentPool
// 0x0028 (0x01A0 - 0x0178)
class UWwiseAudioComponentPool final : public UActorComponent
{
public:
	int32                                         MaxPoolSize;                                       // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwiseAudioComponentPoolMode                  PoolMode;                                          // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycleComponents;                                // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWwiseAudioComponent*>           ReservedComponents;                                // 0x0180(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UWwiseAudioComponent*>           ActiveComponents;                                  // 0x0190(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	class UWwiseAudioComponent* GetPooledComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAudioComponentPool">();
	}
	static class UWwiseAudioComponentPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseAudioComponentPool>();
	}
};
static_assert(alignof(UWwiseAudioComponentPool) == 0x000008, "Wrong alignment on UWwiseAudioComponentPool");
static_assert(sizeof(UWwiseAudioComponentPool) == 0x0001A0, "Wrong size on UWwiseAudioComponentPool");
static_assert(offsetof(UWwiseAudioComponentPool, MaxPoolSize) == 0x000178, "Member 'UWwiseAudioComponentPool::MaxPoolSize' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponentPool, PoolMode) == 0x00017C, "Member 'UWwiseAudioComponentPool::PoolMode' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponentPool, bRecycleComponents) == 0x00017D, "Member 'UWwiseAudioComponentPool::bRecycleComponents' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponentPool, ReservedComponents) == 0x000180, "Member 'UWwiseAudioComponentPool::ReservedComponents' has a wrong offset!");
static_assert(offsetof(UWwiseAudioComponentPool, ActiveComponents) == 0x000190, "Member 'UWwiseAudioComponentPool::ActiveComponents' has a wrong offset!");

// Class WwiseAudio.WwiseObject
// 0x0008 (0x0030 - 0x0028)
class UWwiseObject : public UObject
{
public:
	uint32                                        ShortID;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseObject">();
	}
	static class UWwiseObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseObject>();
	}
};
static_assert(alignof(UWwiseObject) == 0x000008, "Wrong alignment on UWwiseObject");
static_assert(sizeof(UWwiseObject) == 0x000030, "Wrong size on UWwiseObject");
static_assert(offsetof(UWwiseObject, ShortID) == 0x000028, "Member 'UWwiseObject::ShortID' has a wrong offset!");

// Class WwiseAudio.WwiseEvent
// 0x0090 (0x00C0 - 0x0030)
class UWwiseEvent : public UWwiseObject
{
public:
	class UWwiseBank*                             RequiredBank;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAttenuationRadius;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEcho;                                             // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClosedCaptionName;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         DurationRange;                                     // 0x0048(0x0008)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWwiseSwitch*>                   ActionSetSwitches;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bOneShot : 1;                                      // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSimple : 1;                                       // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHighImportance : 1;                               // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLocalizedVoice : 1;                               // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesSpeedParameter : 1;                           // 0x0060(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesApproachSpeedParameter : 1;                   // 0x0060(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesRotationalSpeedParameter : 1;                 // 0x0060(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesComponentRelativeSpeedParameter : 1;          // 0x0060(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesPhysicalMaterialSwitch : 1;                   // 0x0061(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsLiveVoice : 1;                            // 0x0061(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsEchoVoice : 1;                            // 0x0061(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEchoWasForcedOff : 1;                             // 0x0061(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesPerspectiveParameter : 1;                     // 0x0061(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrepareEventRefCount;                              // 0x0064(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPrepareEventDidLoadAllGameSyncs;                  // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x57];                                      // 0x0069(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetMaxDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseEvent">();
	}
	static class UWwiseEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseEvent>();
	}
};
static_assert(alignof(UWwiseEvent) == 0x000008, "Wrong alignment on UWwiseEvent");
static_assert(sizeof(UWwiseEvent) == 0x0000C0, "Wrong size on UWwiseEvent");
static_assert(offsetof(UWwiseEvent, RequiredBank) == 0x000030, "Member 'UWwiseEvent::RequiredBank' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, MaxAttenuationRadius) == 0x000038, "Member 'UWwiseEvent::MaxAttenuationRadius' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, bEcho) == 0x00003C, "Member 'UWwiseEvent::bEcho' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, ClosedCaptionName) == 0x000040, "Member 'UWwiseEvent::ClosedCaptionName' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, DurationRange) == 0x000048, "Member 'UWwiseEvent::DurationRange' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, ActionSetSwitches) == 0x000050, "Member 'UWwiseEvent::ActionSetSwitches' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, PrepareEventRefCount) == 0x000064, "Member 'UWwiseEvent::PrepareEventRefCount' has a wrong offset!");
static_assert(offsetof(UWwiseEvent, bPrepareEventDidLoadAllGameSyncs) == 0x000068, "Member 'UWwiseEvent::bPrepareEventDidLoadAllGameSyncs' has a wrong offset!");

// Class WwiseAudio.WwiseAudioInputEvent
// 0x0090 (0x0150 - 0x00C0)
class UWwiseAudioInputEvent final : public UWwiseEvent
{
public:
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseEvent*                            BaseWwiseEvent;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverflowProtectionLimitInFrames;                   // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        ConnectedSourceID;                                 // 0x00E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FWwisePlaybackInstance>         PlayingInstances;                                  // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x58];                                      // 0x00F8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAudioInputEvent">();
	}
	static class UWwiseAudioInputEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseAudioInputEvent>();
	}
};
static_assert(alignof(UWwiseAudioInputEvent) == 0x000008, "Wrong alignment on UWwiseAudioInputEvent");
static_assert(sizeof(UWwiseAudioInputEvent) == 0x000150, "Wrong size on UWwiseAudioInputEvent");
static_assert(offsetof(UWwiseAudioInputEvent, BaseWwiseEvent) == 0x0000D0, "Member 'UWwiseAudioInputEvent::BaseWwiseEvent' has a wrong offset!");
static_assert(offsetof(UWwiseAudioInputEvent, OverflowProtectionLimitInFrames) == 0x0000D8, "Member 'UWwiseAudioInputEvent::OverflowProtectionLimitInFrames' has a wrong offset!");
static_assert(offsetof(UWwiseAudioInputEvent, ConnectedSourceID) == 0x0000E0, "Member 'UWwiseAudioInputEvent::ConnectedSourceID' has a wrong offset!");
static_assert(offsetof(UWwiseAudioInputEvent, PlayingInstances) == 0x0000E8, "Member 'UWwiseAudioInputEvent::PlayingInstances' has a wrong offset!");

// Class WwiseAudio.WwiseAuxBus
// 0x0008 (0x0038 - 0x0030)
class UWwiseAuxBus final : public UWwiseObject
{
public:
	class UWwiseBank*                             RequiredBank;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAuxBus">();
	}
	static class UWwiseAuxBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseAuxBus>();
	}
};
static_assert(alignof(UWwiseAuxBus) == 0x000008, "Wrong alignment on UWwiseAuxBus");
static_assert(sizeof(UWwiseAuxBus) == 0x000038, "Wrong size on UWwiseAuxBus");
static_assert(offsetof(UWwiseAuxBus, RequiredBank) == 0x000030, "Member 'UWwiseAuxBus::RequiredBank' has a wrong offset!");

// Class WwiseAudio.WwiseBank
// 0x0028 (0x0058 - 0x0030)
class UWwiseBank final : public UWwiseObject
{
public:
	bool                                          bAutoLoad;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWwiseBank*>                     MediaSourceBanks;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint16                                        IncludedEventCount;                                // 0x0048(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesPrepareEvent;                                 // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPrepareEvents;                                // 0x004B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseBank">();
	}
	static class UWwiseBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseBank>();
	}
};
static_assert(alignof(UWwiseBank) == 0x000008, "Wrong alignment on UWwiseBank");
static_assert(sizeof(UWwiseBank) == 0x000058, "Wrong size on UWwiseBank");
static_assert(offsetof(UWwiseBank, bAutoLoad) == 0x000030, "Member 'UWwiseBank::bAutoLoad' has a wrong offset!");
static_assert(offsetof(UWwiseBank, MediaSourceBanks) == 0x000038, "Member 'UWwiseBank::MediaSourceBanks' has a wrong offset!");
static_assert(offsetof(UWwiseBank, IncludedEventCount) == 0x000048, "Member 'UWwiseBank::IncludedEventCount' has a wrong offset!");
static_assert(offsetof(UWwiseBank, bUsesPrepareEvent) == 0x00004A, "Member 'UWwiseBank::bUsesPrepareEvent' has a wrong offset!");
static_assert(offsetof(UWwiseBank, bAutoPrepareEvents) == 0x00004B, "Member 'UWwiseBank::bAutoPrepareEvents' has a wrong offset!");

// Class WwiseAudio.WwiseAudioEffect
// 0x0010 (0x0038 - 0x0028)
class UWwiseAudioEffect : public UObject
{
public:
	class UWwiseAuxBus*                           AuxBus;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectStrengh;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateEffect();
	void DeactivateEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseAudioEffect">();
	}
	static class UWwiseAudioEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseAudioEffect>();
	}
};
static_assert(alignof(UWwiseAudioEffect) == 0x000008, "Wrong alignment on UWwiseAudioEffect");
static_assert(sizeof(UWwiseAudioEffect) == 0x000038, "Wrong size on UWwiseAudioEffect");
static_assert(offsetof(UWwiseAudioEffect, AuxBus) == 0x000028, "Member 'UWwiseAudioEffect::AuxBus' has a wrong offset!");
static_assert(offsetof(UWwiseAudioEffect, EffectStrengh) == 0x000030, "Member 'UWwiseAudioEffect::EffectStrengh' has a wrong offset!");

// Class WwiseAudio.WwiseListenerEnvironmentalEffect
// 0x0018 (0x0050 - 0x0038)
class UWwiseListenerEnvironmentalEffect final : public UWwiseAudioEffect
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseListenerEnvironmentalEffect">();
	}
	static class UWwiseListenerEnvironmentalEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseListenerEnvironmentalEffect>();
	}
};
static_assert(alignof(UWwiseListenerEnvironmentalEffect) == 0x000008, "Wrong alignment on UWwiseListenerEnvironmentalEffect");
static_assert(sizeof(UWwiseListenerEnvironmentalEffect) == 0x000050, "Wrong size on UWwiseListenerEnvironmentalEffect");

// Class WwiseAudio.WwiseZoneAudioEffect
// 0x0028 (0x0060 - 0x0038)
class UWwiseZoneAudioEffect final : public UWwiseAudioEffect
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EffectLocation;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectSize;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectFadeDistance;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseZoneAudioEffect">();
	}
	static class UWwiseZoneAudioEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseZoneAudioEffect>();
	}
};
static_assert(alignof(UWwiseZoneAudioEffect) == 0x000008, "Wrong alignment on UWwiseZoneAudioEffect");
static_assert(sizeof(UWwiseZoneAudioEffect) == 0x000060, "Wrong size on UWwiseZoneAudioEffect");
static_assert(offsetof(UWwiseZoneAudioEffect, EffectLocation) == 0x000048, "Member 'UWwiseZoneAudioEffect::EffectLocation' has a wrong offset!");
static_assert(offsetof(UWwiseZoneAudioEffect, EffectSize) == 0x000054, "Member 'UWwiseZoneAudioEffect::EffectSize' has a wrong offset!");
static_assert(offsetof(UWwiseZoneAudioEffect, EffectFadeDistance) == 0x000058, "Member 'UWwiseZoneAudioEffect::EffectFadeDistance' has a wrong offset!");

// Class WwiseAudio.WwiseEffectProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IWwiseEffectProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseEffectProviderInterface">();
	}
	static class IWwiseEffectProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWwiseEffectProviderInterface>();
	}
};
static_assert(alignof(IWwiseEffectProviderInterface) == 0x000008, "Wrong alignment on IWwiseEffectProviderInterface");
static_assert(sizeof(IWwiseEffectProviderInterface) == 0x000028, "Wrong size on IWwiseEffectProviderInterface");

// Class WwiseAudio.WwiseEnvironmentalEffectProvider
// 0x0000 (0x0028 - 0x0028)
class IWwiseEnvironmentalEffectProvider final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseEnvironmentalEffectProvider">();
	}
	static class IWwiseEnvironmentalEffectProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWwiseEnvironmentalEffectProvider>();
	}
};
static_assert(alignof(IWwiseEnvironmentalEffectProvider) == 0x000008, "Wrong alignment on IWwiseEnvironmentalEffectProvider");
static_assert(sizeof(IWwiseEnvironmentalEffectProvider) == 0x000028, "Wrong size on IWwiseEnvironmentalEffectProvider");

// Class WwiseAudio.WwiseExternalSourcesEditorData
// 0x0000 (0x0030 - 0x0030)
class UWwiseExternalSourcesEditorData final : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseExternalSourcesEditorData">();
	}
	static class UWwiseExternalSourcesEditorData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseExternalSourcesEditorData>();
	}
};
static_assert(alignof(UWwiseExternalSourcesEditorData) == 0x000008, "Wrong alignment on UWwiseExternalSourcesEditorData");
static_assert(sizeof(UWwiseExternalSourcesEditorData) == 0x000030, "Wrong size on UWwiseExternalSourcesEditorData");

// Class WwiseAudio.WwiseExternalSourceDebugData
// 0x0050 (0x0080 - 0x0030)
class UWwiseExternalSourceDebugData final : public UDataAsset
{
public:
	TMap<uint32, class FString>                   UniqueIdToFilename;                                // 0x0030(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseExternalSourceDebugData">();
	}
	static class UWwiseExternalSourceDebugData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseExternalSourceDebugData>();
	}
};
static_assert(alignof(UWwiseExternalSourceDebugData) == 0x000008, "Wrong alignment on UWwiseExternalSourceDebugData");
static_assert(sizeof(UWwiseExternalSourceDebugData) == 0x000080, "Wrong size on UWwiseExternalSourceDebugData");
static_assert(offsetof(UWwiseExternalSourceDebugData, UniqueIdToFilename) == 0x000030, "Member 'UWwiseExternalSourceDebugData::UniqueIdToFilename' has a wrong offset!");

// Class WwiseAudio.WwiseGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UWwiseGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddOutputCaptureMarker(const class FString& MarkerText);
	static TArray<struct FWwiseLocationOverride> ConvertLocationsToWwiseLocationOverrides(const TArray<struct FVector>& Locations, const struct FRotator& Orientation, float Gain, float Radius);
	static class UWwiseAudioEffect* CreateAudioEffect(class UWwiseAuxBus* AuxBus, EWwiseEffectType EffectType, float WetAmount, class AActor* TargetActor);
	static class UWwiseListenerEnvironmentalEffect* CreateListenerAudioEffect(class UWwiseAuxBus* AuxBus, class AActor* TargetActor, float WetAmount);
	static class UWwiseZoneAudioEffect* CreateZoneAudioEffect(class UObject* WorldContextObject, class UWwiseAuxBus* AuxBus, const struct FVector& EffectLocation, float EffectSize, float EffectAttenuationDistance);
	static void ExecuteActionOnAudioInstance(const struct FWwisePlaybackInstance& PlaybackInstance, EWwiseEventAction Action, float TransitionDuration, EWwiseCurveInterpolation FadeCurve);
	static class UWwiseAudioComponent* GetAudioComponentFromPlaybackInstance(const struct FWwisePlaybackInstance& PlaybackInstance, bool bCreateIfNotFound);
	static float GetAudioPlaybackPosition(const struct FWwisePlaybackInstance& PlaybackInstance, bool bExtrapolateSubFrameTime);
	static void GetClosestListenerLocation(class UObject* WorldContextObject, const struct FVector& TestPosition, struct FVector* ClosestLocation, bool* bSuccess);
	static class UWwiseAudioComponent* GetDefaultWwiseComponent(class AActor* Actor, bool bCreateIfNotFound);
	static float GetEstimatedAudioDuration(const struct FWwisePlaybackInstance& PlaybackInstance);
	static class UWwiseEvent* GetPlayingEvent(const struct FWwisePlaybackInstance& PlaybackInstance);
	static void GetWwiseBankEfficiencyReport(TArray<struct FWwiseBankEfficiencyReportDatum>* ReportData);
	static bool IsAudioPaused(const struct FWwisePlaybackInstance& PlaybackInstance);
	static bool IsAudioPlaying(const struct FWwisePlaybackInstance& PlaybackInstance);
	static bool IsPossiblyAudible(class UObject* WorldContextObject, class UWwiseEvent* InWwiseEvent, const struct FVector& Location, float AttenuationScale, float EmitterRadius);
	static void LoadBank(class UWwiseBank* Bank);
	static void PauseAudio(const struct FWwisePlaybackInstance& PlaybackInstance, float TransitionDuration, EWwiseCurveInterpolation FadeCurve);
	static struct FWwisePlaybackInstance PostAttachedEvent(class UWwiseEvent* WwiseEvent, class AActor* AttachToActor, class USceneComponent* AttachToComponent, class FName SocketName, float EmitterRadius);
	static struct FWwisePlaybackInstance PostEventAtLocation(class UObject* WorldContextObject, class UWwiseEvent* WwiseEvent, const struct FVector& Location, float EmitterRadius, const struct FRotator& Orientation);
	static struct FWwisePlaybackInstance PostEventAtMultipleLocations(class UObject* WorldContextObject, class UWwiseEvent* WwiseEvent, const TArray<struct FWwiseLocationOverride>& NewLocations, EWwiseMultiPositionType MultiPositionType);
	static void ResumeAudio(const struct FWwisePlaybackInstance& PlaybackInstance, float TransitionDuration, EWwiseCurveInterpolation FadeCurve);
	static void SetAudioPlaybackPosition(const struct FWwisePlaybackInstance& PlaybackInstance, float PlaybackPosition);
	static void SetGlobalRTPCValue(class UWwiseRtpc* GameParameter, float Value, float TransitionDuration, EWwiseCurveInterpolation FadeCurve);
	static void SetGlobalState(class UWwiseState* State);
	static class UWwiseAudioComponent* SpawnAttachedWwiseComponent(class AActor* Actor, class FName SocketName, bool IsTemporaryComponent, class USceneComponent* AttachmentComponent);
	static class UWwiseAudioComponent* SpawnWwiseComponentAtLocation(const class UObject* WorldContextObject, const struct FVector& Location, float EmitterRadius, const struct FRotator& Orientation, bool IsTemporaryComponent);
	static void StartOutputCapture(const class FString& Filename);
	static void StartProfilerCapture(const class FString& Filename);
	static void StopAudio(const struct FWwisePlaybackInstance& PlaybackInstance, float TransitionDuration, EWwiseCurveInterpolation FadeCurve);
	static void StopOutputCapture();
	static void StopProfilerCapture();
	static void UnloadBank(class UWwiseBank* Bank);
	static void WaitForAudioInputConnection(class UObject* WorldContextObject, class UWwiseAudioInputEvent* AudioInputEvent, const struct FLatentActionInfo& LatentInfo, float MaxWaitTime);
	static void WaitForAudioPlayback(const struct FWwisePlaybackInstance& PlaybackInstance, const struct FLatentActionInfo& LatentInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseGameplayStatics">();
	}
	static class UWwiseGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseGameplayStatics>();
	}
};
static_assert(alignof(UWwiseGameplayStatics) == 0x000008, "Wrong alignment on UWwiseGameplayStatics");
static_assert(sizeof(UWwiseGameplayStatics) == 0x000028, "Wrong size on UWwiseGameplayStatics");

// Class WwiseAudio.WwiseImplementerInterface
// 0x0000 (0x0028 - 0x0028)
class IWwiseImplementerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseImplementerInterface">();
	}
	static class IWwiseImplementerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWwiseImplementerInterface>();
	}
};
static_assert(alignof(IWwiseImplementerInterface) == 0x000008, "Wrong alignment on IWwiseImplementerInterface");
static_assert(sizeof(IWwiseImplementerInterface) == 0x000028, "Wrong size on IWwiseImplementerInterface");

// Class WwiseAudio.WwiseListenerComponent
// 0x0040 (0x0310 - 0x02D0)
class UWwiseListenerComponent final : public UWwiseGameObjectComponent
{
public:
	uint8                                         Pad_2D0[0x40];                                     // 0x02D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UWwiseListenerComponent* FindAssociatedListener(class AActor* TargetActor);

	void ConfigureListener(class UWwiseEvent* WwiseEvent);
	void SetBusRTPCValue(class UWwiseRtpc* GameParameter, float Value, float ValueChangeDuration, EWwiseCurveInterpolation FadeCurve);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseListenerComponent">();
	}
	static class UWwiseListenerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseListenerComponent>();
	}
};
static_assert(alignof(UWwiseListenerComponent) == 0x000008, "Wrong alignment on UWwiseListenerComponent");
static_assert(sizeof(UWwiseListenerComponent) == 0x000310, "Wrong size on UWwiseListenerComponent");

// Class WwiseAudio.WwiseMediaAudioSinkProvider
// 0x0040 (0x0070 - 0x0030)
class UWwiseMediaAudioSinkProvider final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWwiseAudioInputEvent*                  AudioInputPlayEvent;                               // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayOnLocalPlayer;                            // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x2F];                                      // 0x0041(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseMediaAudioSinkProvider">();
	}
	static class UWwiseMediaAudioSinkProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseMediaAudioSinkProvider>();
	}
};
static_assert(alignof(UWwiseMediaAudioSinkProvider) == 0x000008, "Wrong alignment on UWwiseMediaAudioSinkProvider");
static_assert(sizeof(UWwiseMediaAudioSinkProvider) == 0x000070, "Wrong size on UWwiseMediaAudioSinkProvider");
static_assert(offsetof(UWwiseMediaAudioSinkProvider, AudioInputPlayEvent) == 0x000038, "Member 'UWwiseMediaAudioSinkProvider::AudioInputPlayEvent' has a wrong offset!");
static_assert(offsetof(UWwiseMediaAudioSinkProvider, bAutoPlayOnLocalPlayer) == 0x000040, "Member 'UWwiseMediaAudioSinkProvider::bAutoPlayOnLocalPlayer' has a wrong offset!");

// Class WwiseAudio.WwiseRtpc
// 0x0010 (0x0040 - 0x0030)
class UWwiseRtpc final : public UWwiseObject
{
public:
	struct FFloatInterval                         ValueRange;                                        // 0x0030(0x0008)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseRtpc">();
	}
	static class UWwiseRtpc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseRtpc>();
	}
};
static_assert(alignof(UWwiseRtpc) == 0x000008, "Wrong alignment on UWwiseRtpc");
static_assert(sizeof(UWwiseRtpc) == 0x000040, "Wrong size on UWwiseRtpc");
static_assert(offsetof(UWwiseRtpc, ValueRange) == 0x000030, "Member 'UWwiseRtpc::ValueRange' has a wrong offset!");
static_assert(offsetof(UWwiseRtpc, DefaultValue) == 0x000038, "Member 'UWwiseRtpc::DefaultValue' has a wrong offset!");

// Class WwiseAudio.WwiseSettings
// 0x01A0 (0x01C8 - 0x0028)
class UWwiseSettings final : public UObject
{
public:
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x0028(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x0038(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseProjectPath;                                  // 0x0048(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            WwiseLocalizationEquivalents;                      // 0x0058(0x0050)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FString, uint32>                   LocalizedAudioChunks;                              // 0x00A8(0x0050)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ExternalSourcesDebugData;                          // 0x00F8(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWwiseExternalSourceDebugData*          PExternalSourcesDebugData;                         // 0x0110(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldPoolSize;                                     // 0x0118(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWwisePlaybackConfiguration                   DefaultPlaybackConfiguration;                      // 0x011C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DefaultSpeakerAngles;                              // 0x0120(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FString                                 PlaybackConfigurationRtpcName;                     // 0x0130(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVolumeForCaptionDB;                             // 0x0140(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxMemoryPoolsEditor;                              // 0x0144(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxMemoryPoolsCooked;                              // 0x0148(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StreamManagerPoolSizeMB;                           // 0x014C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IOMemoryPoolSizeMB;                                // 0x0150(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        IODeviceGranularityB;                              // 0x0154(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStreamCache;                                // 0x0158(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultPoolSizeEditorMB;                           // 0x015C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPoolSizeCookedMB;                           // 0x0160(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerEngineDefaultPoolSizeMB;                      // 0x0164(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorPoolSizeMB;                                 // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorQueuePoolSizeMB;                            // 0x016C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrepareEventPoolSizeMB;                            // 0x0170(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrepareEventPoolSizeEditorMB;                      // 0x0174(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPoolLowMemoryModeThreshold;                 // 0x0178(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerEnginePoolLowMemoryModeThreshold;             // 0x017C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHardwareXMADecoding;                        // 0x0180(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         APUCachedHeapSizeMB;                               // 0x0184(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         APUNoncachedHeapSizeMB;                            // 0x0188(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxHardwareAcceleratedXMAVoices;                   // 0x018C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x38];                                     // 0x0190(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseSettings">();
	}
	static class UWwiseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseSettings>();
	}
};
static_assert(alignof(UWwiseSettings) == 0x000008, "Wrong alignment on UWwiseSettings");
static_assert(sizeof(UWwiseSettings) == 0x0001C8, "Wrong size on UWwiseSettings");
static_assert(offsetof(UWwiseSettings, WwiseWindowsInstallationPath) == 0x000028, "Member 'UWwiseSettings::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, WwiseMacInstallationPath) == 0x000038, "Member 'UWwiseSettings::WwiseMacInstallationPath' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, WwiseProjectPath) == 0x000048, "Member 'UWwiseSettings::WwiseProjectPath' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, WwiseLocalizationEquivalents) == 0x000058, "Member 'UWwiseSettings::WwiseLocalizationEquivalents' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, LocalizedAudioChunks) == 0x0000A8, "Member 'UWwiseSettings::LocalizedAudioChunks' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, ExternalSourcesDebugData) == 0x0000F8, "Member 'UWwiseSettings::ExternalSourcesDebugData' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, PExternalSourcesDebugData) == 0x000110, "Member 'UWwiseSettings::PExternalSourcesDebugData' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, WorldPoolSize) == 0x000118, "Member 'UWwiseSettings::WorldPoolSize' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, DefaultPlaybackConfiguration) == 0x00011C, "Member 'UWwiseSettings::DefaultPlaybackConfiguration' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, DefaultSpeakerAngles) == 0x000120, "Member 'UWwiseSettings::DefaultSpeakerAngles' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, PlaybackConfigurationRtpcName) == 0x000130, "Member 'UWwiseSettings::PlaybackConfigurationRtpcName' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, MinVolumeForCaptionDB) == 0x000140, "Member 'UWwiseSettings::MinVolumeForCaptionDB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, MaxMemoryPoolsEditor) == 0x000144, "Member 'UWwiseSettings::MaxMemoryPoolsEditor' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, MaxMemoryPoolsCooked) == 0x000148, "Member 'UWwiseSettings::MaxMemoryPoolsCooked' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, StreamManagerPoolSizeMB) == 0x00014C, "Member 'UWwiseSettings::StreamManagerPoolSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, IOMemoryPoolSizeMB) == 0x000150, "Member 'UWwiseSettings::IOMemoryPoolSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, IODeviceGranularityB) == 0x000154, "Member 'UWwiseSettings::IODeviceGranularityB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, bEnableStreamCache) == 0x000158, "Member 'UWwiseSettings::bEnableStreamCache' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, DefaultPoolSizeEditorMB) == 0x00015C, "Member 'UWwiseSettings::DefaultPoolSizeEditorMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, DefaultPoolSizeCookedMB) == 0x000160, "Member 'UWwiseSettings::DefaultPoolSizeCookedMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, LowerEngineDefaultPoolSizeMB) == 0x000164, "Member 'UWwiseSettings::LowerEngineDefaultPoolSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, MonitorPoolSizeMB) == 0x000168, "Member 'UWwiseSettings::MonitorPoolSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, MonitorQueuePoolSizeMB) == 0x00016C, "Member 'UWwiseSettings::MonitorQueuePoolSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, PrepareEventPoolSizeMB) == 0x000170, "Member 'UWwiseSettings::PrepareEventPoolSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, PrepareEventPoolSizeEditorMB) == 0x000174, "Member 'UWwiseSettings::PrepareEventPoolSizeEditorMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, DefaultPoolLowMemoryModeThreshold) == 0x000178, "Member 'UWwiseSettings::DefaultPoolLowMemoryModeThreshold' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, LowerEnginePoolLowMemoryModeThreshold) == 0x00017C, "Member 'UWwiseSettings::LowerEnginePoolLowMemoryModeThreshold' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, bEnableHardwareXMADecoding) == 0x000180, "Member 'UWwiseSettings::bEnableHardwareXMADecoding' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, APUCachedHeapSizeMB) == 0x000184, "Member 'UWwiseSettings::APUCachedHeapSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, APUNoncachedHeapSizeMB) == 0x000188, "Member 'UWwiseSettings::APUNoncachedHeapSizeMB' has a wrong offset!");
static_assert(offsetof(UWwiseSettings, MaxHardwareAcceleratedXMAVoices) == 0x00018C, "Member 'UWwiseSettings::MaxHardwareAcceleratedXMAVoices' has a wrong offset!");

// Class WwiseAudio.WwiseUserSettings
// 0x0020 (0x0048 - 0x0028)
class UWwiseUserSettings final : public UObject
{
public:
	EWwiseAudioComponentSpriteSize                SpriteSize;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWwiseAudioComponents;                         // 0x0029(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        WwiseDebugFlags;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ActiveComponentColor;                              // 0x0030(0x0004)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HibernatingComponentColor;                         // 0x0034(0x0004)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ComponentHighlightColor;                           // 0x0038(0x0004)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SelectionHighlightColor;                           // 0x003C(0x0004)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectionLineThickness;                            // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawAudioThresholdManagerDebug;                   // 0x0044(0x0001)(Edit, ZeroConstructor, Transient, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseUserSettings">();
	}
	static class UWwiseUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseUserSettings>();
	}
};
static_assert(alignof(UWwiseUserSettings) == 0x000008, "Wrong alignment on UWwiseUserSettings");
static_assert(sizeof(UWwiseUserSettings) == 0x000048, "Wrong size on UWwiseUserSettings");
static_assert(offsetof(UWwiseUserSettings, SpriteSize) == 0x000028, "Member 'UWwiseUserSettings::SpriteSize' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, bShowWwiseAudioComponents) == 0x000029, "Member 'UWwiseUserSettings::bShowWwiseAudioComponents' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, WwiseDebugFlags) == 0x00002C, "Member 'UWwiseUserSettings::WwiseDebugFlags' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, ActiveComponentColor) == 0x000030, "Member 'UWwiseUserSettings::ActiveComponentColor' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, HibernatingComponentColor) == 0x000034, "Member 'UWwiseUserSettings::HibernatingComponentColor' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, ComponentHighlightColor) == 0x000038, "Member 'UWwiseUserSettings::ComponentHighlightColor' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, SelectionHighlightColor) == 0x00003C, "Member 'UWwiseUserSettings::SelectionHighlightColor' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, SelectionLineThickness) == 0x000040, "Member 'UWwiseUserSettings::SelectionLineThickness' has a wrong offset!");
static_assert(offsetof(UWwiseUserSettings, bDrawAudioThresholdManagerDebug) == 0x000044, "Member 'UWwiseUserSettings::bDrawAudioThresholdManagerDebug' has a wrong offset!");

// Class WwiseAudio.WwiseState
// 0x0008 (0x0038 - 0x0030)
class UWwiseState final : public UWwiseObject
{
public:
	class UWwiseStateGroup*                       StateGroup;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseState">();
	}
	static class UWwiseState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseState>();
	}
};
static_assert(alignof(UWwiseState) == 0x000008, "Wrong alignment on UWwiseState");
static_assert(sizeof(UWwiseState) == 0x000038, "Wrong size on UWwiseState");
static_assert(offsetof(UWwiseState, StateGroup) == 0x000030, "Member 'UWwiseState::StateGroup' has a wrong offset!");

// Class WwiseAudio.WwiseStateGroup
// 0x0018 (0x0048 - 0x0030)
class UWwiseStateGroup final : public UWwiseObject
{
public:
	TArray<class UWwiseState*>                    ChildStates;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UWwiseState*                            NoneState;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseStateGroup">();
	}
	static class UWwiseStateGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseStateGroup>();
	}
};
static_assert(alignof(UWwiseStateGroup) == 0x000008, "Wrong alignment on UWwiseStateGroup");
static_assert(sizeof(UWwiseStateGroup) == 0x000048, "Wrong size on UWwiseStateGroup");
static_assert(offsetof(UWwiseStateGroup, ChildStates) == 0x000030, "Member 'UWwiseStateGroup::ChildStates' has a wrong offset!");
static_assert(offsetof(UWwiseStateGroup, NoneState) == 0x000040, "Member 'UWwiseStateGroup::NoneState' has a wrong offset!");

// Class WwiseAudio.WwiseSwitch
// 0x0008 (0x0038 - 0x0030)
class UWwiseSwitch final : public UWwiseObject
{
public:
	class UWwiseSwitchGroup*                      SwitchGroup;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseSwitch">();
	}
	static class UWwiseSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseSwitch>();
	}
};
static_assert(alignof(UWwiseSwitch) == 0x000008, "Wrong alignment on UWwiseSwitch");
static_assert(sizeof(UWwiseSwitch) == 0x000038, "Wrong size on UWwiseSwitch");
static_assert(offsetof(UWwiseSwitch, SwitchGroup) == 0x000030, "Member 'UWwiseSwitch::SwitchGroup' has a wrong offset!");

// Class WwiseAudio.WwiseSwitchGroup
// 0x0010 (0x0040 - 0x0030)
class UWwiseSwitchGroup final : public UWwiseObject
{
public:
	TArray<class UWwiseSwitch*>                   ChildSwitches;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseSwitchGroup">();
	}
	static class UWwiseSwitchGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseSwitchGroup>();
	}
};
static_assert(alignof(UWwiseSwitchGroup) == 0x000008, "Wrong alignment on UWwiseSwitchGroup");
static_assert(sizeof(UWwiseSwitchGroup) == 0x000040, "Wrong size on UWwiseSwitchGroup");
static_assert(offsetof(UWwiseSwitchGroup, ChildSwitches) == 0x000030, "Member 'UWwiseSwitchGroup::ChildSwitches' has a wrong offset!");

// Class WwiseAudio.WwiseTrigger
// 0x0000 (0x0030 - 0x0030)
class UWwiseTrigger final : public UWwiseObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WwiseTrigger">();
	}
	static class UWwiseTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWwiseTrigger>();
	}
};
static_assert(alignof(UWwiseTrigger) == 0x000008, "Wrong alignment on UWwiseTrigger");
static_assert(sizeof(UWwiseTrigger) == 0x000030, "Wrong size on UWwiseTrigger");

}

