#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAudio

#include "Basic.hpp"

#include "GbxAudio_classes.hpp"
#include "GbxAudio_parameters.hpp"


namespace SDK
{

// Function GbxAudio.ActiveAmbientLocationChooser_Blueprint.InitLocationChooser
// (Event, Public, BlueprintEvent)
// Parameters:
// class UActiveAmbientSoundComponent*     ActiveAmbientComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActiveAmbientLocationChooser_Blueprint::InitLocationChooser(class UActiveAmbientSoundComponent* ActiveAmbientComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationChooser_Blueprint", "InitLocationChooser");

	Params::ActiveAmbientLocationChooser_Blueprint_InitLocationChooser Parms{};

	Parms.ActiveAmbientComponent = ActiveAmbientComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxAudio.ActiveAmbientLocationChooser_Blueprint.NominateSoundLocation
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UActiveAmbientSoundComponent*     ActiveAmbientComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Out_Location                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Out_Radius                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActiveAmbientLocationChooser_Blueprint::NominateSoundLocation(class UActiveAmbientSoundComponent* ActiveAmbientComponent, struct FVector* Out_Location, float Out_Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationChooser_Blueprint", "NominateSoundLocation");

	Params::ActiveAmbientLocationChooser_Blueprint_NominateSoundLocation Parms{};

	Parms.ActiveAmbientComponent = ActiveAmbientComponent;
	Parms.Out_Radius = Out_Radius;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Location != nullptr)
		*Out_Location = std::move(Parms.Out_Location);

	return Parms.ReturnValue;
}


// Function GbxAudio.LightAudioComponent.PostWwiseEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWwiseEvent*                      WwiseEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWwisePlaybackInstance           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWwisePlaybackInstance ULightAudioComponent::PostWwiseEvent(class UWwiseEvent* WwiseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightAudioComponent", "PostWwiseEvent");

	Params::LightAudioComponent_PostWwiseEvent Parms{};

	Parms.WwiseEvent = WwiseEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.LightAudioComponent.SetRTPCValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWwiseRtpc*                       GameParameter                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPersistent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ValueChangeDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWwiseCurveInterpolation                FadeCurve                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightAudioComponent::SetRTPCValue(class UWwiseRtpc* GameParameter, float Value, bool bPersistent, float ValueChangeDuration, EWwiseCurveInterpolation FadeCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightAudioComponent", "SetRTPCValue");

	Params::LightAudioComponent_SetRTPCValue Parms{};

	Parms.GameParameter = GameParameter;
	Parms.Value = Value;
	Parms.bPersistent = bPersistent;
	Parms.ValueChangeDuration = ValueChangeDuration;
	Parms.FadeCurve = FadeCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.WwiseListenerEffectComponent.ApplyAudioEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWwiseAuxBus*                     Efx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WetPercent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DryPercent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWwiseListenerEffectComponent::ApplyAudioEffect(class UWwiseAuxBus* Efx, float WetPercent, float DryPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WwiseListenerEffectComponent", "ApplyAudioEffect");

	Params::WwiseListenerEffectComponent_ApplyAudioEffect Parms{};

	Parms.Efx = Efx;
	Parms.WetPercent = WetPercent;
	Parms.DryPercent = DryPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.WwiseListenerEffectComponent.RemoveAllAudioEffects
// (Final, Native, Public, BlueprintCallable)

void UWwiseListenerEffectComponent::RemoveAllAudioEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WwiseListenerEffectComponent", "RemoveAllAudioEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.WwiseListenerEffectComponent.RemoveAudioEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWwiseAuxBus*                     Efx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWwiseListenerEffectComponent::RemoveAudioEffect(class UWwiseAuxBus* Efx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WwiseListenerEffectComponent", "RemoveAudioEffect");

	Params::WwiseListenerEffectComponent_RemoveAudioEffect Parms{};

	Parms.Efx = Efx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientLocationChooser_PreselectedLocation.AddLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActiveAmbientLocationChooser_PreselectedLocation::AddLocation(const struct FVector& InLocation, float InRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationChooser_PreselectedLocation", "AddLocation");

	Params::ActiveAmbientLocationChooser_PreselectedLocation_AddLocation Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRadius = InRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.ActiveAmbientLocationChooser_PreselectedLocation.DrawLocations
// (Final, Native, Public)

void UActiveAmbientLocationChooser_PreselectedLocation::DrawLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationChooser_PreselectedLocation", "DrawLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientLocationChooser_PreselectedLocation.UpdateLocations
// (Final, Native, Public)

void UActiveAmbientLocationChooser_PreselectedLocation::UpdateLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationChooser_PreselectedLocation", "UpdateLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientLocationValidator_Blueprint.IsProposedLocationValid
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// class UActiveAmbientSoundComponent*     ActiveAmbientComponent                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActiveAmbientLocationValidator_Blueprint::IsProposedLocationValid(const class UActiveAmbientSoundComponent* ActiveAmbientComponent, const struct FVector& Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationValidator_Blueprint", "IsProposedLocationValid");

	Params::ActiveAmbientLocationValidator_Blueprint_IsProposedLocationValid Parms{};

	Parms.ActiveAmbientComponent = ActiveAmbientComponent;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxAudio.ActiveAmbientSound.DisableSounds
// (Final, Native, Public, BlueprintCallable)

void AActiveAmbientSound::DisableSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientSound", "DisableSounds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientSound.EnableSounds
// (Final, Native, Public, BlueprintCallable)

void AActiveAmbientSound::EnableSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientSound", "EnableSounds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientSoundComponent.Startle
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActiveAmbientSoundComponent::Startle(const struct FVector& Location, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientSoundComponent", "Startle");

	Params::ActiveAmbientSoundComponent_Startle Parms{};

	Parms.Location = std::move(Location);
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientUpdater_Blueprint.InitializeActiveAmbientInstance
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UActiveAmbientSoundComponent*     ActiveAmbientComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveAmbientInstance           ActiveAmbientInstance                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void UActiveAmbientUpdater_Blueprint::InitializeActiveAmbientInstance(class UActiveAmbientSoundComponent* ActiveAmbientComponent, struct FActiveAmbientInstance* ActiveAmbientInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientUpdater_Blueprint", "InitializeActiveAmbientInstance");

	Params::ActiveAmbientUpdater_Blueprint_InitializeActiveAmbientInstance Parms{};

	Parms.ActiveAmbientComponent = ActiveAmbientComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (ActiveAmbientInstance != nullptr)
		*ActiveAmbientInstance = std::move(Parms.ActiveAmbientInstance);
}


// Function GbxAudio.ActiveAmbientUpdater_Blueprint.UpdateActiveAmbientInstance
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UActiveAmbientSoundComponent*     ActiveAmbientComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveAmbientInstance           ActiveAmbientInstance                                  (Parm, OutParm, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActiveAmbientUpdater_Blueprint::UpdateActiveAmbientInstance(class UActiveAmbientSoundComponent* ActiveAmbientComponent, struct FActiveAmbientInstance* ActiveAmbientInstance, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientUpdater_Blueprint", "UpdateActiveAmbientInstance");

	Params::ActiveAmbientUpdater_Blueprint_UpdateActiveAmbientInstance Parms{};

	Parms.ActiveAmbientComponent = ActiveAmbientComponent;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (ActiveAmbientInstance != nullptr)
		*ActiveAmbientInstance = std::move(Parms.ActiveAmbientInstance);
}


// Function GbxAudio.AudioOcclusionVoxelizerZone.ExportAsRaw
// (Final, Native, Public)

void AAudioOcclusionVoxelizerZone::ExportAsRaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioOcclusionVoxelizerZone", "ExportAsRaw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.AudioOcclusionVoxelizerZone.ExportAsRLE
// (Final, Native, Public)

void AAudioOcclusionVoxelizerZone::ExportAsRLE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioOcclusionVoxelizerZone", "ExportAsRLE");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.AudioOcclusionVoxelizerZone.Voxelize
// (Final, Native, Public)

void AAudioOcclusionVoxelizerZone::Voxelize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioOcclusionVoxelizerZone", "Voxelize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.AudioPrepLocationFinder_Blueprint.AddFoundLocations
// (Event, Public, BlueprintEvent)

void UAudioPrepLocationFinder_Blueprint::AddFoundLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioPrepLocationFinder_Blueprint", "AddFoundLocations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxAudio.AudioPrepLocationFinder_Blueprint.AddLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioPrepLocationFinder_Blueprint::AddLocation(const struct FVector& Location, const struct FRotator& Rotation, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioPrepLocationFinder_Blueprint", "AddLocation");

	Params::AudioPrepLocationFinder_Blueprint_AddLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.ActiveAmbientLocationFinder_Blueprint.AddFoundLocations
// (Event, Public, BlueprintEvent)
// Parameters:
// class UActiveAmbientSoundComponent*     ActiveAmbientComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActiveAmbientLocationChooser_PreselectedLocation*PreselectedLocationChooser                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActiveAmbientLocationFinder_Blueprint::AddFoundLocations(class UActiveAmbientSoundComponent* ActiveAmbientComponent, class UActiveAmbientLocationChooser_PreselectedLocation* PreselectedLocationChooser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActiveAmbientLocationFinder_Blueprint", "AddFoundLocations");

	Params::ActiveAmbientLocationFinder_Blueprint_AddFoundLocations Parms{};

	Parms.ActiveAmbientComponent = ActiveAmbientComponent;
	Parms.PreselectedLocationChooser = PreselectedLocationChooser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxAudio.CharacterSoundData.RefreshAll
// (Final, Native, Public)

void UCharacterSoundData::RefreshAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSoundData", "RefreshAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.DistributedAmbientSound.DoFindNewLocationsAndRebuild
// (Final, Native, Public)

void ADistributedAmbientSound::DoFindNewLocationsAndRebuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DistributedAmbientSound", "DoFindNewLocationsAndRebuild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.DistributedAmbientSound.DoUpdateTree
// (Final, Native, Public)

void ADistributedAmbientSound::DoUpdateTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DistributedAmbientSound", "DoUpdateTree");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.FluidSimExampleZone.ApplyToOtherSim
// (Final, Native, Public)

void AFluidSimExampleZone::ApplyToOtherSim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimExampleZone", "ApplyToOtherSim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.FluidSimExampleZone.ExportVectorField
// (Final, Native, Public)

void AFluidSimExampleZone::ExportVectorField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimExampleZone", "ExportVectorField");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.FluidSimExampleZone.UpdateVisualization
// (Final, Native, Public)

void AFluidSimExampleZone::UpdateVisualization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimExampleZone", "UpdateVisualization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.FoleyMainComponent.PlayFootstep
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          FootstepLocation                                       (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         FootstepRotation                                       (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UWwiseSwitch*                     MaterialSwitch                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeAdjustment                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchAdjustment                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      ConfigureEvent                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreview                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFoleyMainComponent::PlayFootstep(const struct FVector& FootstepLocation, const struct FRotator& FootstepRotation, class UWwiseSwitch* MaterialSwitch, float VolumeAdjustment, float PitchAdjustment, class UWwiseEvent* ConfigureEvent, bool bPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FoleyMainComponent", "PlayFootstep");

	Params::FoleyMainComponent_PlayFootstep Parms{};

	Parms.FootstepLocation = std::move(FootstepLocation);
	Parms.FootstepRotation = std::move(FootstepRotation);
	Parms.MaterialSwitch = MaterialSwitch;
	Parms.VolumeAdjustment = VolumeAdjustment;
	Parms.PitchAdjustment = PitchAdjustment;
	Parms.ConfigureEvent = ConfigureEvent;
	Parms.bPreview = bPreview;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.FoleyMainComponent.PlayFootstepEvent
// (Final, Native, Public)
// Parameters:
// struct FFoleyEventParams                EventParams                                            (Parm, NativeAccessSpecifierPublic)

void UFoleyMainComponent::PlayFootstepEvent(const struct FFoleyEventParams& EventParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FoleyMainComponent", "PlayFootstepEvent");

	Params::FoleyMainComponent_PlayFootstepEvent Parms{};

	Parms.EventParams = std::move(EventParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.FoleyMainComponent.SetSurfaceModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWwiseEvent*                      PlayEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootstepVolumeMultiplier                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFoleyMainComponent::SetSurfaceModifier(class UWwiseEvent* PlayEvent, float Volume, float FootstepVolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FoleyMainComponent", "SetSurfaceModifier");

	Params::FoleyMainComponent_SetSurfaceModifier Parms{};

	Parms.PlayEvent = PlayEvent;
	Parms.Volume = Volume;
	Parms.FootstepVolumeMultiplier = FootstepVolumeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintLibrary.ApplyListenerAudioEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseAuxBus*                     Efx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WetVolume                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DryVolume                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintLibrary::ApplyListenerAudioEffect(class AActor* Character, class UWwiseAuxBus* Efx, float WetVolume, float DryVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintLibrary", "ApplyListenerAudioEffect");

	Params::GbxAudioBlueprintLibrary_ApplyListenerAudioEffect Parms{};

	Parms.Character = Character;
	Parms.Efx = Efx;
	Parms.WetVolume = WetVolume;
	Parms.DryVolume = DryVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintLibrary.PassesAudioPreparationComponentFilter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAudioPrepComponentFilter        Filter                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAudioBlueprintLibrary::PassesAudioPreparationComponentFilter(class UPrimitiveComponent* Component, const struct FAudioPrepComponentFilter& Filter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintLibrary", "PassesAudioPreparationComponentFilter");

	Params::GbxAudioBlueprintLibrary_PassesAudioPreparationComponentFilter Parms{};

	Parms.Component = Component;
	Parms.Filter = std::move(Filter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintLibrary.PassesAudioPreparationHitFilter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FAudioPrepHitResultFilter        Filter                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAudioBlueprintLibrary::PassesAudioPreparationHitFilter(const struct FHitResult& Hit, const struct FAudioPrepHitResultFilter& Filter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintLibrary", "PassesAudioPreparationHitFilter");

	Params::GbxAudioBlueprintLibrary_PassesAudioPreparationHitFilter Parms{};

	Parms.Hit = std::move(Hit);
	Parms.Filter = std::move(Filter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintLibrary.RemoveListenerAudioEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseAuxBus*                     Efx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintLibrary::RemoveListenerAudioEffect(class AActor* Character, class UWwiseAuxBus* Efx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintLibrary", "RemoveListenerAudioEffect");

	Params::GbxAudioBlueprintLibrary_RemoveListenerAudioEffect Parms{};

	Parms.Character = Character;
	Parms.Efx = Efx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintLibrary.TriggerCharacterSound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCharacterSoundTag*               SoundTag                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintLibrary::TriggerCharacterSound(class AActor* Character, const class UCharacterSoundTag* SoundTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintLibrary", "TriggerCharacterSound");

	Params::GbxAudioBlueprintLibrary_TriggerCharacterSound Parms{};

	Parms.Character = Character;
	Parms.SoundTag = SoundTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.MusicSequencerComponent.GetCurrentBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicSequencerComponent::GetCurrentBeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "GetCurrentBeat");

	Params::MusicSequencerComponent_GetCurrentBeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.MusicSequencerComponent.GetRealTimeUntilBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Beat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMusicSequencerComponent::GetRealTimeUntilBeat(float Beat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "GetRealTimeUntilBeat");

	Params::MusicSequencerComponent_GetRealTimeUntilBeat Parms{};

	Parms.Beat = Beat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.MusicSequencerComponent.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMusicSequencerComponent::IsPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "IsPlaying");

	Params::MusicSequencerComponent_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.MusicSequencerComponent.PauseSequence
// (Final, Native, Public, BlueprintCallable)

void UMusicSequencerComponent::PauseSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "PauseSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.MusicSequencerComponent.PlaySequence
// (Final, Native, Public, BlueprintCallable)

void UMusicSequencerComponent::PlaySequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "PlaySequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.MusicSequencerComponent.PostSequenceEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWwiseAudioComponent*             WwiseComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWwiseEvent*                      WwiseEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Note                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartBeat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMusicSequencerComponent::PostSequenceEvent(class UWwiseAudioComponent* WwiseComponent, class UWwiseEvent* WwiseEvent, int32 Note, int32 Velocity, int32 Channel, float StartBeat, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "PostSequenceEvent");

	Params::MusicSequencerComponent_PostSequenceEvent Parms{};

	Parms.WwiseComponent = WwiseComponent;
	Parms.WwiseEvent = WwiseEvent;
	Parms.Note = Note;
	Parms.Velocity = Velocity;
	Parms.Channel = Channel;
	Parms.StartBeat = StartBeat;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.MusicSequencerComponent.StopSequence
// (Final, Native, Public, BlueprintCallable)

void UMusicSequencerComponent::StopSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MusicSequencerComponent", "StopSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

