#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DA_IO_Fidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_Fidget_TargetType_structs.hpp"
#include "Enum_FidgetCurve_structs.hpp"
#include "Enum_Fidget_Type_structs.hpp"
#include "GbxRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DA_IO_Fidget.DA_IO_Fidget_C
// 0x0070 (0x00A0 - 0x0030)
class UDA_IO_Fidget_C final : public UGbxDataAssetBlueprintable
{
public:
	class UWwiseEvent*                            Sound_Forward;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ForwardDuration;                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Timeline_Rotation;                                 // 0x003C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Timeline_Translation;                              // 0x0048(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ReverseDuration;                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_FidgetCurve                              Timeline_Curve;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Usable;                                            // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReUsable;                                          // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Damageable;                                        // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Auto_Reverse;                                      // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Auto_ReverseDelay;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWwiseEvent*                            Sound_Reverse;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipMesh;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MoveAlongTrack;                                    // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Track_Rotation;                                    // 0x007C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Track_Translation;                                 // 0x0088(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_FidgetCurve                              Track_Curve;                                       // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTimedUnlock;                                    // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_Fidget_TargetType                        TargetType;                                        // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Fidget_Type                              FidgetType;                                        // 0x0097(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_0;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_IdleDuration;                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DA_IO_Fidget_C">();
	}
	static class UDA_IO_Fidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDA_IO_Fidget_C>();
	}
};
static_assert(alignof(UDA_IO_Fidget_C) == 0x000008, "Wrong alignment on UDA_IO_Fidget_C");
static_assert(sizeof(UDA_IO_Fidget_C) == 0x0000A0, "Wrong size on UDA_IO_Fidget_C");
static_assert(offsetof(UDA_IO_Fidget_C, Sound_Forward) == 0x000030, "Member 'UDA_IO_Fidget_C::Sound_Forward' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Timeline_ForwardDuration) == 0x000038, "Member 'UDA_IO_Fidget_C::Timeline_ForwardDuration' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Timeline_Rotation) == 0x00003C, "Member 'UDA_IO_Fidget_C::Timeline_Rotation' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Timeline_Translation) == 0x000048, "Member 'UDA_IO_Fidget_C::Timeline_Translation' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Timeline_ReverseDuration) == 0x000054, "Member 'UDA_IO_Fidget_C::Timeline_ReverseDuration' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Timeline_Curve) == 0x000058, "Member 'UDA_IO_Fidget_C::Timeline_Curve' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, StaticMesh) == 0x000060, "Member 'UDA_IO_Fidget_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Usable) == 0x000068, "Member 'UDA_IO_Fidget_C::Usable' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, ReUsable) == 0x000069, "Member 'UDA_IO_Fidget_C::ReUsable' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Damageable) == 0x00006A, "Member 'UDA_IO_Fidget_C::Damageable' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Auto_Reverse) == 0x00006B, "Member 'UDA_IO_Fidget_C::Auto_Reverse' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Auto_ReverseDelay) == 0x00006C, "Member 'UDA_IO_Fidget_C::Auto_ReverseDelay' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Sound_Reverse) == 0x000070, "Member 'UDA_IO_Fidget_C::Sound_Reverse' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, FlipMesh) == 0x000078, "Member 'UDA_IO_Fidget_C::FlipMesh' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, MoveAlongTrack) == 0x000079, "Member 'UDA_IO_Fidget_C::MoveAlongTrack' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Track_Rotation) == 0x00007C, "Member 'UDA_IO_Fidget_C::Track_Rotation' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Track_Translation) == 0x000088, "Member 'UDA_IO_Fidget_C::Track_Translation' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Track_Curve) == 0x000094, "Member 'UDA_IO_Fidget_C::Track_Curve' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, UseTimedUnlock) == 0x000095, "Member 'UDA_IO_Fidget_C::UseTimedUnlock' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, TargetType) == 0x000096, "Member 'UDA_IO_Fidget_C::TargetType' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, FidgetType) == 0x000097, "Member 'UDA_IO_Fidget_C::FidgetType' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, NewVar_0) == 0x000098, "Member 'UDA_IO_Fidget_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UDA_IO_Fidget_C, Timeline_IdleDuration) == 0x00009C, "Member 'UDA_IO_Fidget_C::Timeline_IdleDuration' has a wrong offset!");

}

