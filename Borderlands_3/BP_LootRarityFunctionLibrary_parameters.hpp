#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootRarityFunctionLibrary

#include "Basic.hpp"

#include "Struct_BaseItemRarity_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_LootRarityFunctionLibrary.BP_LootRarityFunctionLibrary_C.CalculateRarityWeight
// 0x0070 (0x0070 - 0x0000)
struct BP_LootRarityFunctionLibrary_C_CalculateRarityWeight final
{
public:
	struct FDataTableRowHandle                    RarityTableRowHandle;                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         LevelToDetermineRarityAt;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalRarityWeightLevelBias;                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalRarityWeightLevelBias;                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalRarityWeightModifier;                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalRarityWeightModifier;                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_BaseItemRarity                 CallFunc_GetDataTableRowFromHandle_OutRow;         // 0x0038(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromHandle_ReturnValue;    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyRarityWeightLevelBias_Biased_Level;  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_EvaluateBalanceFormula_ReturnValue;       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight) == 0x000008, "Wrong alignment on BP_LootRarityFunctionLibrary_C_CalculateRarityWeight");
static_assert(sizeof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight) == 0x000070, "Wrong size on BP_LootRarityFunctionLibrary_C_CalculateRarityWeight");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, RarityTableRowHandle) == 0x000000, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::RarityTableRowHandle' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, LevelToDetermineRarityAt) == 0x000010, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::LevelToDetermineRarityAt' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, GlobalRarityWeightLevelBias) == 0x000014, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::GlobalRarityWeightLevelBias' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, LocalRarityWeightLevelBias) == 0x000018, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::LocalRarityWeightLevelBias' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, GlobalRarityWeightModifier) == 0x00001C, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::GlobalRarityWeightModifier' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, LocalRarityWeightModifier) == 0x000020, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::LocalRarityWeightModifier' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, __WorldContext) == 0x000028, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, Weight) == 0x000030, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::Weight' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_GetDataTableRowFromHandle_OutRow) == 0x000038, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_GetDataTableRowFromHandle_OutRow' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_GetDataTableRowFromHandle_ReturnValue) == 0x000058, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_GetDataTableRowFromHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_ApplyRarityWeightLevelBias_Biased_Level) == 0x00005C, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_ApplyRarityWeightLevelBias_Biased_Level' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_EvaluateBalanceFormula_ReturnValue) == 0x000064, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_EvaluateBalanceFormula_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_CalculateRarityWeight, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00006C, "Member 'BP_LootRarityFunctionLibrary_C_CalculateRarityWeight::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");

// Function BP_LootRarityFunctionLibrary.BP_LootRarityFunctionLibrary_C.ApplyRarityWeightLevelBias
// 0x0028 (0x0028 - 0x0000)
struct BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias final
{
public:
	float                                         LevelToDetermineRarityAt;                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalRarityWeightLevelBias;                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalRarityWeightLevelBias;                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RarityWeightLevelBiasMultiplier;                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Biased_Level;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias) == 0x000008, "Wrong alignment on BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias");
static_assert(sizeof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias) == 0x000028, "Wrong size on BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, LevelToDetermineRarityAt) == 0x000000, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::LevelToDetermineRarityAt' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, GlobalRarityWeightLevelBias) == 0x000004, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::GlobalRarityWeightLevelBias' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, LocalRarityWeightLevelBias) == 0x000008, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::LocalRarityWeightLevelBias' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, RarityWeightLevelBiasMultiplier) == 0x00000C, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::RarityWeightLevelBiasMultiplier' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, __WorldContext) == 0x000010, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, Biased_Level) == 0x000018, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::Biased_Level' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000024, "Member 'BP_LootRarityFunctionLibrary_C_ApplyRarityWeightLevelBias::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");

}

