#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightProjectile_MAL_SMG_EMbersPurge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function LightProjectile_MAL_SMG_EMbersPurge.LightProjectile_MAL_SMG_EMbersPurge_C.OnDamage
// 0x03B0 (0x03B0 - 0x0000)
struct LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage final
{
public:
	class ULightProjectile*                       Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bCritical;                                         // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataTableValue_OutValue;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableValue_ReturnValue;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetSource_ReturnValue;                    // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0xF];                                      // 0x0161(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGbxSpawnActorAsyncRequest             K2Node_MakeStruct_GbxSpawnActorAsyncRequest;       // 0x0170(0x0230)(ContainsInstancedReference)
	int32                                         CallFunc_SpawnActorAsync_ReturnValue;              // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage) == 0x000010, "Wrong alignment on LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage");
static_assert(sizeof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage) == 0x0003B0, "Wrong size on LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, Projectile) == 0x000000, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::Projectile' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, Hit) == 0x000008, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::Hit' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, bCritical) == 0x000098, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::bCritical' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_MakeTransform_ReturnValue) == 0x0000A0, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_FaceIndex) == 0x000134, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_TraceStart) == 0x000138, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_BreakHitResult_TraceEnd) == 0x000144, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_GetDataTableValue_OutValue) == 0x000150, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_GetDataTableValue_OutValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_GetDataTableValue_ReturnValue) == 0x000154, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_GetDataTableValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_GetSource_ReturnValue) == 0x000158, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_GetSource_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000160, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, K2Node_MakeStruct_GbxSpawnActorAsyncRequest) == 0x000170, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::K2Node_MakeStruct_GbxSpawnActorAsyncRequest' has a wrong offset!");
static_assert(offsetof(LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage, CallFunc_SpawnActorAsync_ReturnValue) == 0x0003A0, "Member 'LightProjectile_MAL_SMG_EMbersPurge_C_OnDamage::CallFunc_SpawnActorAsync_ReturnValue' has a wrong offset!");

}

