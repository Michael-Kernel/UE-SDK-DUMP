#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Proj_Nog_KamikaziDrone

#include "Basic.hpp"

#include "OakGame_structs.hpp"
#include "OakGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Proj_Nog_KamikaziDrone.Proj_Nog_KamikaziDrone_C
// 0x0050 (0x0780 - 0x0730)
class AProj_Nog_KamikaziDrone_C final : public AOakDroneProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0730(0x0008)(Transient, DuplicateTransient)
	class URotatingMovementComponent*             RotatingMovementStart;                             // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_NogDrone;                                       // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWwiseAudioComponent*                   WwiseAudio;                                        // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DroneColor_MI;                                     // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DroneColor_Active;                                 // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxThrottleSpeed;                                  // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrottleUpTime;                                    // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentThrottleSpeed;                              // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartThrottleSpeed;                                // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrottleUpRate;                                    // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollRotationsPerSecond;                            // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Proj_Nog_KamikaziDrone(int32 EntryPoint);
	void InitializeElement(EOakElementalType ElementType);
	void OnExplode();
	void ReceiveBeginPlay();
	void Nog_BuffDrone_RegisterBuffData(const struct FDataTableRowHandle& NogBuff, class AActor* BuffTarget);
	void Nog_BuffDrone_SupplyPath(const TArray<class AActor*>& PathNodeList);
	void Nog_BuffDrone_SwarmState(const class FString& StateName);
	void Nog_BuffDrone_Detonate(bool WasDestroyed);
	void Nog_BuffDrone_SpecialBuff_Stop();
	void Nog_BuffDrone_SpecialBuff_Start();
	void Nog_BuffDrone_NotifyBuffTarget();
	void Nog_BuffDrone_ReceiverInfo(class AActor* BuffReceiver);
	void UserConstructionScript();
	void SetupMaterials();
	void SetDroneColor(const struct FLinearColor& EmissiveColor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Proj_Nog_KamikaziDrone_C">();
	}
	static class AProj_Nog_KamikaziDrone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProj_Nog_KamikaziDrone_C>();
	}
};
static_assert(alignof(AProj_Nog_KamikaziDrone_C) == 0x000008, "Wrong alignment on AProj_Nog_KamikaziDrone_C");
static_assert(sizeof(AProj_Nog_KamikaziDrone_C) == 0x000780, "Wrong size on AProj_Nog_KamikaziDrone_C");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, UberGraphFrame) == 0x000730, "Member 'AProj_Nog_KamikaziDrone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, RotatingMovementStart) == 0x000738, "Member 'AProj_Nog_KamikaziDrone_C::RotatingMovementStart' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, SM_NogDrone) == 0x000740, "Member 'AProj_Nog_KamikaziDrone_C::SM_NogDrone' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, WwiseAudio) == 0x000748, "Member 'AProj_Nog_KamikaziDrone_C::WwiseAudio' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, DroneColor_MI) == 0x000750, "Member 'AProj_Nog_KamikaziDrone_C::DroneColor_MI' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, DroneColor_Active) == 0x000758, "Member 'AProj_Nog_KamikaziDrone_C::DroneColor_Active' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, MaxThrottleSpeed) == 0x000768, "Member 'AProj_Nog_KamikaziDrone_C::MaxThrottleSpeed' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, ThrottleUpTime) == 0x00076C, "Member 'AProj_Nog_KamikaziDrone_C::ThrottleUpTime' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, CurrentThrottleSpeed) == 0x000770, "Member 'AProj_Nog_KamikaziDrone_C::CurrentThrottleSpeed' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, StartThrottleSpeed) == 0x000774, "Member 'AProj_Nog_KamikaziDrone_C::StartThrottleSpeed' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, ThrottleUpRate) == 0x000778, "Member 'AProj_Nog_KamikaziDrone_C::ThrottleUpRate' has a wrong offset!");
static_assert(offsetof(AProj_Nog_KamikaziDrone_C, RollRotationsPerSecond) == 0x00077C, "Member 'AProj_Nog_KamikaziDrone_C::RollRotationsPerSecond' has a wrong offset!");

}

