#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTwitch

#include "Basic.hpp"

#include "GbxTwitch_structs.hpp"


namespace SDK::Params
{

// Function GbxTwitch.TwitchAPI.RequestTwitchStreams
// 0x0048 (0x0048 - 0x0000)
struct TwitchAPI_RequestTwitchStreams final
{
public:
	int32                                         MaxNbStreams;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserLogin;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<struct FTwitchStreamInfo>& Streams)> StreamInfoReceivedDelegate;                        // 0x0038(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchAPI_RequestTwitchStreams) == 0x000008, "Wrong alignment on TwitchAPI_RequestTwitchStreams");
static_assert(sizeof(TwitchAPI_RequestTwitchStreams) == 0x000048, "Wrong size on TwitchAPI_RequestTwitchStreams");
static_assert(offsetof(TwitchAPI_RequestTwitchStreams, MaxNbStreams) == 0x000000, "Member 'TwitchAPI_RequestTwitchStreams::MaxNbStreams' has a wrong offset!");
static_assert(offsetof(TwitchAPI_RequestTwitchStreams, GameName) == 0x000008, "Member 'TwitchAPI_RequestTwitchStreams::GameName' has a wrong offset!");
static_assert(offsetof(TwitchAPI_RequestTwitchStreams, UserLogin) == 0x000018, "Member 'TwitchAPI_RequestTwitchStreams::UserLogin' has a wrong offset!");
static_assert(offsetof(TwitchAPI_RequestTwitchStreams, Language) == 0x000028, "Member 'TwitchAPI_RequestTwitchStreams::Language' has a wrong offset!");
static_assert(offsetof(TwitchAPI_RequestTwitchStreams, StreamInfoReceivedDelegate) == 0x000038, "Member 'TwitchAPI_RequestTwitchStreams::StreamInfoReceivedDelegate' has a wrong offset!");

// Function GbxTwitch.TwitchIRCClient.JoinChannel
// 0x0020 (0x0020 - 0x0000)
struct TwitchIRCClient_JoinChannel final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FTwitchChannelMessage& ChannelUserMessage)> OnMessageReceived;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchIRCClient_JoinChannel) == 0x000008, "Wrong alignment on TwitchIRCClient_JoinChannel");
static_assert(sizeof(TwitchIRCClient_JoinChannel) == 0x000020, "Wrong size on TwitchIRCClient_JoinChannel");
static_assert(offsetof(TwitchIRCClient_JoinChannel, ChannelName) == 0x000000, "Member 'TwitchIRCClient_JoinChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(TwitchIRCClient_JoinChannel, OnMessageReceived) == 0x000010, "Member 'TwitchIRCClient_JoinChannel::OnMessageReceived' has a wrong offset!");

// Function GbxTwitch.TwitchIRCClient.QuitChannel
// 0x0010 (0x0010 - 0x0000)
struct TwitchIRCClient_QuitChannel final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchIRCClient_QuitChannel) == 0x000008, "Wrong alignment on TwitchIRCClient_QuitChannel");
static_assert(sizeof(TwitchIRCClient_QuitChannel) == 0x000010, "Wrong size on TwitchIRCClient_QuitChannel");
static_assert(offsetof(TwitchIRCClient_QuitChannel, ChannelName) == 0x000000, "Member 'TwitchIRCClient_QuitChannel::ChannelName' has a wrong offset!");

// Function GbxTwitch.TwitchIRCClient.SendChatMessage
// 0x0020 (0x0020 - 0x0000)
struct TwitchIRCClient_SendChatMessage final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchIRCClient_SendChatMessage) == 0x000008, "Wrong alignment on TwitchIRCClient_SendChatMessage");
static_assert(sizeof(TwitchIRCClient_SendChatMessage) == 0x000020, "Wrong size on TwitchIRCClient_SendChatMessage");
static_assert(offsetof(TwitchIRCClient_SendChatMessage, ChannelName) == 0x000000, "Member 'TwitchIRCClient_SendChatMessage::ChannelName' has a wrong offset!");
static_assert(offsetof(TwitchIRCClient_SendChatMessage, Message) == 0x000010, "Member 'TwitchIRCClient_SendChatMessage::Message' has a wrong offset!");

}

