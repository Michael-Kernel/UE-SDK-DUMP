#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxLevelSequence

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// ScriptStruct GbxLevelSequence.GbxLevelSequenceBoundActorSlot
// 0x0018 (0x0018 - 0x0000)
struct FGbxLevelSequenceBoundActorSlot final
{
public:
	struct FGuid                                  BindingID;                                         // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  BoundActor;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGbxLevelSequenceBoundActorSlot) == 0x000004, "Wrong alignment on FGbxLevelSequenceBoundActorSlot");
static_assert(sizeof(FGbxLevelSequenceBoundActorSlot) == 0x000018, "Wrong size on FGbxLevelSequenceBoundActorSlot");
static_assert(offsetof(FGbxLevelSequenceBoundActorSlot, BindingID) == 0x000000, "Member 'FGbxLevelSequenceBoundActorSlot::BindingID' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBoundActorSlot, BoundActor) == 0x000010, "Member 'FGbxLevelSequenceBoundActorSlot::BoundActor' has a wrong offset!");

// ScriptStruct GbxLevelSequence.GbxLevelSequenceBindingSlot
// 0x0050 (0x0050 - 0x0000)
struct FGbxLevelSequenceBindingSlot final
{
public:
	struct FGuid                                  BindingID;                                         // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BindingName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     BindingClass;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  BoundActor;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x003C(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnOwnership                               SpawnOwnership;                                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGbxLevelSequenceBindingSlot) == 0x000008, "Wrong alignment on FGbxLevelSequenceBindingSlot");
static_assert(sizeof(FGbxLevelSequenceBindingSlot) == 0x000050, "Wrong size on FGbxLevelSequenceBindingSlot");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, BindingID) == 0x000000, "Member 'FGbxLevelSequenceBindingSlot::BindingID' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, BindingName) == 0x000010, "Member 'FGbxLevelSequenceBindingSlot::BindingName' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, BindingClass) == 0x000020, "Member 'FGbxLevelSequenceBindingSlot::BindingClass' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, BoundActor) == 0x000028, "Member 'FGbxLevelSequenceBindingSlot::BoundActor' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, Location) == 0x000030, "Member 'FGbxLevelSequenceBindingSlot::Location' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, Rotation) == 0x00003C, "Member 'FGbxLevelSequenceBindingSlot::Rotation' has a wrong offset!");
static_assert(offsetof(FGbxLevelSequenceBindingSlot, SpawnOwnership) == 0x000048, "Member 'FGbxLevelSequenceBindingSlot::SpawnOwnership' has a wrong offset!");

}

