#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPChar_ServiceBot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "WwiseAudio_structs.hpp"
#include "GbxAI_structs.hpp"
#include "BPChar_Enemy_classes.hpp"
#include "Enum_ServiceBot_Type_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPChar_ServiceBot.BPChar_ServiceBot_C
// 0x0180 (0x2510 - 0x2390)
#pragma pack(push, 0x1)
class alignas(0x10) ABPChar_ServiceBot_C : public ABPChar_Enemy_C
{
public:
	uint8                                         Pad_2381[0x7];                                     // 0x2381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BPChar_ServiceBot_C;                // 0x2388(0x0008)(Transient, DuplicateTransient)
	class UWwiseAudioComponent*                   EngineAudio;                                       // 0x2390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RightArm_Sparks;                                   // 0x2398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightArm_GoreStump;                                // 0x23A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LeftArm_Sparks;                                    // 0x23A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftArm_GoreStump;                                 // 0x23B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    AmbientBodyLight;                                  // 0x23B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              Switch_AmbientLight;                               // 0x23C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Head_Sparks;                                       // 0x23C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              Head_Gore;                                         // 0x23D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              RightArm_Gore;                                     // 0x23D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              LeftArm_Gore;                                      // 0x23E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Arm_Digistruct;                                  // 0x23E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              R_Arm_Digistruct_Switch;                           // 0x23F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Arm_Digistruct;                                  // 0x23F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              L_Arm_Digistruct_Switch;                           // 0x2400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Head_Digistruct;                                   // 0x2408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneBodySwitchComponent*              Head_Digistruct_Switch;                            // 0x2410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIExplosiveSpawningComponent_C*        AIExplosiveSpawningComponent;                      // 0x2418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpawnPointComponent*                   BotSpawner;                                        // 0x2420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIUseSlotComponent*                    AIUseSlot;                                         // 0x2428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USmartObjectComponent*                  SmartObject;                                       // 0x2430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Jets_Particle;                                     // 0x2438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Shrink_To_Nothing_FloatScaling_14E769C648BE4E4095E10DACC656CB41; // 0x2440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Shrink_To_Nothing__Direction_14E769C648BE4E4095E10DACC656CB41; // 0x2444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2445[0x3];                                     // 0x2445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Shrink_To_Nothing;                                 // 0x2448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyScaleFloat;                                    // 0x2450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x2454(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasRightArm;                                       // 0x2455(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasLeftArm;                                        // 0x2456(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasHead;                                           // 0x2457(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RequiredHeadRepair;                                // 0x2458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RequiredRightArmRepair;                            // 0x245C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RequiredLeftArmRepair;                             // 0x2460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyedRepairValue;                              // 0x2464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  DamageInstigator;                                  // 0x2468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPAnim_ServiceBot_C*                   AnimInstance;                                      // 0x2470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        HeadRegrowParticle;                                // 0x2478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        RightArmRegrowParticle;                            // 0x2480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LeftArmRegrowParticle;                             // 0x2488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSmartObjectActionSet                  DeadActionSet;                                     // 0x2490(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Right_Arm_Projectile_Class;                        // 0x24B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Left_Arm_Projectile_Class;                         // 0x24B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightArmDominant;                                  // 0x24C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LeftArmDominant;                                   // 0x24C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HeadDominant;                                      // 0x24C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24C3[0x1];                                     // 0x24C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuicideTimer;                                      // 0x24C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxUIName*                             Revived_UIName_PT2;                                // 0x24C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGbxUIName*                             Revived_UIName_PT1;                                // 0x24D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWwisePlaybackInstance                 Audio_DamageLoop;                                  // 0x24D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWwisePlaybackInstance                 Audio_AlarmLoop;                                   // 0x24F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BPChar_ServiceBot(int32 EntryPoint);
	void ServiceBot_TargetChanged(class AActor* TargetActor);
	void ServiceBot_SuicideTimer(bool Start);
	void CE_Suicide();
	void AssignDominantPieces(bool RightArmDominant_0, bool LeftArmDominant_0, bool HeadDominant_0);
	void ServiceBot_Suicide();
	void ServiceBot_ManageUIName(class UGbxUIName* UIName);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void DesignateAttachedPieces(bool HasHead_0, bool HasRightArm_0, bool HasLeftArm_0);
	void BackupAttack();
	void BndEvt__SmartObject_K2Node_ComponentBoundEvent_1_SmartObjectUsageEvent__DelegateSignature_BPChar_ServiceBot(class AController* Controller_0, const struct FGameplayTag& ActionTag);
	void BndEvt__OakDamageComponent_K2Node_ComponentBoundEvent_0_DamageCompDiedDelegate__DelegateSignature_BPChar_ServiceBot(class AActor* DamageReceiver, class AActor* DamageCauser);
	void ResetTeam();
	void ReceiveBeginPlay();
	void ManageAttachedPieces();
	void BndEvt__OakDamageComponent_K2Node_ComponentBoundEvent_1_TakeAnyPipelineHealingDelegate__DelegateSignature_BPChar_ServiceBot(class AActor* HealReceiver, float Healing, class AActor* HealInstigator);
	void RegrowAttachedPiece();
	void HeadDestroyed(const struct FDamageReactionEventSummary& DamageEventSummary);
	void RightArmDestroyed(const struct FDamageReactionEventSummary& DamageEventSummary);
	void LeftArmDestroyed(const struct FDamageReactionEventSummary& DamageEventSummary);
	void ServiceBotLOOT_PrepareForEscape();
	void ServiceBot_Drop();
	void ServiceBot_FireExtinguisher(bool ExtinguishOn);
	void ServiceBot_ShieldOn();
	void ServiceBot_Equip_L();
	void ManageWeapon(bool LeftWeapon, bool HideWeapon);
	void MELEE_SpawnMelee(bool SpawnRight);
	void EMS_ManageReviveParts(bool HasHead_0, bool HasRightArm_0, bool HasLeftArm_0);
	void WeaponFire();
	void WeaponEffects();
	void SpawnGrenade();
	void FIRE_SpawnAxe();
	void EMS_Defibulate();
	void ThrowAttack();
	void WMS_SpawnTurret();
	void EMS_ManageBeam();
	void Deactivate();
	void Activate();
	void OnEnd_EC6759724792DE311AC13AAA3D964D58(EGbxActionEndState EndState, class AActor* Actor);
	void OnAnimEnd_EC6759724792DE311AC13AAA3D964D58();
	void GbxAsyncRequest_Spawned_539745114742BC3F986E3EB1A4D09DFC(class AActor* Actor, int32 InstanceIndex);
	void GbxAsyncRequest_Failed_539745114742BC3F986E3EB1A4D09DFC(class AActor* Actor, int32 InstanceIndex);
	void GbxAsyncRequest_Spawned_F459E0A94B14D135E2BAA09CFE31B007(class AActor* Actor, int32 InstanceIndex);
	void GbxAsyncRequest_Failed_F459E0A94B14D135E2BAA09CFE31B007(class AActor* Actor, int32 InstanceIndex);
	void Shrink_To_Nothing__UpdateFunc();
	void Shrink_To_Nothing__FinishedFunc();
	void UserConstructionScript();
	void IsBotInjured(bool* IsInjured);
	void IsEMSBot(bool* IsEMS);
	void GetBotType(Enum_ServiceBot_Type* BotType);
	void QueryAttachedPieces(bool* HasHead_0, bool* HasRightArm_0, bool* HasLeftArm_0);
	void QueryDominantPieces(bool* RightArmDominant_0, bool* LeftArmDominant_0, bool* HeadDominant_0);
	void IsLootWeaponEquipped(bool* EquippedRight, bool* EquippedLeft);
	void ServiceBot_GetUIName(float PlayThroughIndex, class UGbxUIName** UIName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPChar_ServiceBot_C">();
	}
	static class ABPChar_ServiceBot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPChar_ServiceBot_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABPChar_ServiceBot_C) == 0x000010, "Wrong alignment on ABPChar_ServiceBot_C");
static_assert(sizeof(ABPChar_ServiceBot_C) == 0x002510, "Wrong size on ABPChar_ServiceBot_C");
static_assert(offsetof(ABPChar_ServiceBot_C, UberGraphFrame_BPChar_ServiceBot_C) == 0x002388, "Member 'ABPChar_ServiceBot_C::UberGraphFrame_BPChar_ServiceBot_C' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, EngineAudio) == 0x002390, "Member 'ABPChar_ServiceBot_C::EngineAudio' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RightArm_Sparks) == 0x002398, "Member 'ABPChar_ServiceBot_C::RightArm_Sparks' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RightArm_GoreStump) == 0x0023A0, "Member 'ABPChar_ServiceBot_C::RightArm_GoreStump' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, LeftArm_Sparks) == 0x0023A8, "Member 'ABPChar_ServiceBot_C::LeftArm_Sparks' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, LeftArm_GoreStump) == 0x0023B0, "Member 'ABPChar_ServiceBot_C::LeftArm_GoreStump' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, AmbientBodyLight) == 0x0023B8, "Member 'ABPChar_ServiceBot_C::AmbientBodyLight' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Switch_AmbientLight) == 0x0023C0, "Member 'ABPChar_ServiceBot_C::Switch_AmbientLight' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Head_Sparks) == 0x0023C8, "Member 'ABPChar_ServiceBot_C::Head_Sparks' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Head_Gore) == 0x0023D0, "Member 'ABPChar_ServiceBot_C::Head_Gore' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RightArm_Gore) == 0x0023D8, "Member 'ABPChar_ServiceBot_C::RightArm_Gore' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, LeftArm_Gore) == 0x0023E0, "Member 'ABPChar_ServiceBot_C::LeftArm_Gore' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, R_Arm_Digistruct) == 0x0023E8, "Member 'ABPChar_ServiceBot_C::R_Arm_Digistruct' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, R_Arm_Digistruct_Switch) == 0x0023F0, "Member 'ABPChar_ServiceBot_C::R_Arm_Digistruct_Switch' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, L_Arm_Digistruct) == 0x0023F8, "Member 'ABPChar_ServiceBot_C::L_Arm_Digistruct' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, L_Arm_Digistruct_Switch) == 0x002400, "Member 'ABPChar_ServiceBot_C::L_Arm_Digistruct_Switch' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Head_Digistruct) == 0x002408, "Member 'ABPChar_ServiceBot_C::Head_Digistruct' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Head_Digistruct_Switch) == 0x002410, "Member 'ABPChar_ServiceBot_C::Head_Digistruct_Switch' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, AIExplosiveSpawningComponent) == 0x002418, "Member 'ABPChar_ServiceBot_C::AIExplosiveSpawningComponent' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, BotSpawner) == 0x002420, "Member 'ABPChar_ServiceBot_C::BotSpawner' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, AIUseSlot) == 0x002428, "Member 'ABPChar_ServiceBot_C::AIUseSlot' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, SmartObject) == 0x002430, "Member 'ABPChar_ServiceBot_C::SmartObject' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Jets_Particle) == 0x002438, "Member 'ABPChar_ServiceBot_C::Jets_Particle' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Shrink_To_Nothing_FloatScaling_14E769C648BE4E4095E10DACC656CB41) == 0x002440, "Member 'ABPChar_ServiceBot_C::Shrink_To_Nothing_FloatScaling_14E769C648BE4E4095E10DACC656CB41' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Shrink_To_Nothing__Direction_14E769C648BE4E4095E10DACC656CB41) == 0x002444, "Member 'ABPChar_ServiceBot_C::Shrink_To_Nothing__Direction_14E769C648BE4E4095E10DACC656CB41' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Shrink_To_Nothing) == 0x002448, "Member 'ABPChar_ServiceBot_C::Shrink_To_Nothing' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, BodyScaleFloat) == 0x002450, "Member 'ABPChar_ServiceBot_C::BodyScaleFloat' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, IsActive) == 0x002454, "Member 'ABPChar_ServiceBot_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, HasRightArm) == 0x002455, "Member 'ABPChar_ServiceBot_C::HasRightArm' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, HasLeftArm) == 0x002456, "Member 'ABPChar_ServiceBot_C::HasLeftArm' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, HasHead) == 0x002457, "Member 'ABPChar_ServiceBot_C::HasHead' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RequiredHeadRepair) == 0x002458, "Member 'ABPChar_ServiceBot_C::RequiredHeadRepair' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RequiredRightArmRepair) == 0x00245C, "Member 'ABPChar_ServiceBot_C::RequiredRightArmRepair' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RequiredLeftArmRepair) == 0x002460, "Member 'ABPChar_ServiceBot_C::RequiredLeftArmRepair' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, DestroyedRepairValue) == 0x002464, "Member 'ABPChar_ServiceBot_C::DestroyedRepairValue' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, DamageInstigator) == 0x002468, "Member 'ABPChar_ServiceBot_C::DamageInstigator' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, AnimInstance) == 0x002470, "Member 'ABPChar_ServiceBot_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, HeadRegrowParticle) == 0x002478, "Member 'ABPChar_ServiceBot_C::HeadRegrowParticle' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RightArmRegrowParticle) == 0x002480, "Member 'ABPChar_ServiceBot_C::RightArmRegrowParticle' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, LeftArmRegrowParticle) == 0x002488, "Member 'ABPChar_ServiceBot_C::LeftArmRegrowParticle' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, DeadActionSet) == 0x002490, "Member 'ABPChar_ServiceBot_C::DeadActionSet' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Right_Arm_Projectile_Class) == 0x0024B0, "Member 'ABPChar_ServiceBot_C::Right_Arm_Projectile_Class' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Left_Arm_Projectile_Class) == 0x0024B8, "Member 'ABPChar_ServiceBot_C::Left_Arm_Projectile_Class' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, RightArmDominant) == 0x0024C0, "Member 'ABPChar_ServiceBot_C::RightArmDominant' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, LeftArmDominant) == 0x0024C1, "Member 'ABPChar_ServiceBot_C::LeftArmDominant' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, HeadDominant) == 0x0024C2, "Member 'ABPChar_ServiceBot_C::HeadDominant' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, SuicideTimer) == 0x0024C4, "Member 'ABPChar_ServiceBot_C::SuicideTimer' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Revived_UIName_PT2) == 0x0024C8, "Member 'ABPChar_ServiceBot_C::Revived_UIName_PT2' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Revived_UIName_PT1) == 0x0024D0, "Member 'ABPChar_ServiceBot_C::Revived_UIName_PT1' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Audio_DamageLoop) == 0x0024D8, "Member 'ABPChar_ServiceBot_C::Audio_DamageLoop' has a wrong offset!");
static_assert(offsetof(ABPChar_ServiceBot_C, Audio_AlarmLoop) == 0x0024F0, "Member 'ABPChar_ServiceBot_C::Audio_AlarmLoop' has a wrong offset!");

}

