#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OakCS

#include "Basic.hpp"

#include "OakCS_structs.hpp"
#include "Engine_structs.hpp"
#include "GbxUI_structs.hpp"


namespace SDK::Params
{

// Function OakCS.CSConsoleProxy.OnSumbitPuzzleSolution
// 0x0001 (0x0001 - 0x0000)
struct CSConsoleProxy_OnSumbitPuzzleSolution final
{
public:
	bool                                          bIsOptimal;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSConsoleProxy_OnSumbitPuzzleSolution) == 0x000001, "Wrong alignment on CSConsoleProxy_OnSumbitPuzzleSolution");
static_assert(sizeof(CSConsoleProxy_OnSumbitPuzzleSolution) == 0x000001, "Wrong size on CSConsoleProxy_OnSumbitPuzzleSolution");
static_assert(offsetof(CSConsoleProxy_OnSumbitPuzzleSolution, bIsOptimal) == 0x000000, "Member 'CSConsoleProxy_OnSumbitPuzzleSolution::bIsOptimal' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.CSWaitForScore
// 0x0028 (0x0028 - 0x0000)
struct CSTutorialBPLib_CSWaitForScore final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECSScoreCondition                             ScoreCondition;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_CSWaitForScore) == 0x000008, "Wrong alignment on CSTutorialBPLib_CSWaitForScore");
static_assert(sizeof(CSTutorialBPLib_CSWaitForScore) == 0x000028, "Wrong size on CSTutorialBPLib_CSWaitForScore");
static_assert(offsetof(CSTutorialBPLib_CSWaitForScore, World) == 0x000000, "Member 'CSTutorialBPLib_CSWaitForScore::World' has a wrong offset!");
static_assert(offsetof(CSTutorialBPLib_CSWaitForScore, ScoreCondition) == 0x000008, "Member 'CSTutorialBPLib_CSWaitForScore::ScoreCondition' has a wrong offset!");
static_assert(offsetof(CSTutorialBPLib_CSWaitForScore, LatentInfo) == 0x000010, "Member 'CSTutorialBPLib_CSWaitForScore::LatentInfo' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.HideCSTutorialElement
// 0x0001 (0x0001 - 0x0000)
struct CSTutorialBPLib_HideCSTutorialElement final
{
public:
	ECSTutorialElement                            TutorialElement;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_HideCSTutorialElement) == 0x000001, "Wrong alignment on CSTutorialBPLib_HideCSTutorialElement");
static_assert(sizeof(CSTutorialBPLib_HideCSTutorialElement) == 0x000001, "Wrong size on CSTutorialBPLib_HideCSTutorialElement");
static_assert(offsetof(CSTutorialBPLib_HideCSTutorialElement, TutorialElement) == 0x000000, "Member 'CSTutorialBPLib_HideCSTutorialElement::TutorialElement' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.HideCSTutorialTooltip
// 0x0010 (0x0010 - 0x0000)
struct CSTutorialBPLib_HideCSTutorialTooltip final
{
public:
	class FString                                 Tooltip;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_HideCSTutorialTooltip) == 0x000008, "Wrong alignment on CSTutorialBPLib_HideCSTutorialTooltip");
static_assert(sizeof(CSTutorialBPLib_HideCSTutorialTooltip) == 0x000010, "Wrong size on CSTutorialBPLib_HideCSTutorialTooltip");
static_assert(offsetof(CSTutorialBPLib_HideCSTutorialTooltip, Tooltip) == 0x000000, "Member 'CSTutorialBPLib_HideCSTutorialTooltip::Tooltip' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.HighlightCSTutorialElement
// 0x0001 (0x0001 - 0x0000)
struct CSTutorialBPLib_HighlightCSTutorialElement final
{
public:
	ECSTutorialElement                            TutorialElement;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_HighlightCSTutorialElement) == 0x000001, "Wrong alignment on CSTutorialBPLib_HighlightCSTutorialElement");
static_assert(sizeof(CSTutorialBPLib_HighlightCSTutorialElement) == 0x000001, "Wrong size on CSTutorialBPLib_HighlightCSTutorialElement");
static_assert(offsetof(CSTutorialBPLib_HighlightCSTutorialElement, TutorialElement) == 0x000000, "Member 'CSTutorialBPLib_HighlightCSTutorialElement::TutorialElement' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.ShowCSTutorialElement
// 0x0001 (0x0001 - 0x0000)
struct CSTutorialBPLib_ShowCSTutorialElement final
{
public:
	ECSTutorialElement                            TutorialElement;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_ShowCSTutorialElement) == 0x000001, "Wrong alignment on CSTutorialBPLib_ShowCSTutorialElement");
static_assert(sizeof(CSTutorialBPLib_ShowCSTutorialElement) == 0x000001, "Wrong size on CSTutorialBPLib_ShowCSTutorialElement");
static_assert(offsetof(CSTutorialBPLib_ShowCSTutorialElement, TutorialElement) == 0x000000, "Member 'CSTutorialBPLib_ShowCSTutorialElement::TutorialElement' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.ShowCSTutorialTooltip
// 0x0010 (0x0010 - 0x0000)
struct CSTutorialBPLib_ShowCSTutorialTooltip final
{
public:
	class FString                                 Tooltip;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_ShowCSTutorialTooltip) == 0x000008, "Wrong alignment on CSTutorialBPLib_ShowCSTutorialTooltip");
static_assert(sizeof(CSTutorialBPLib_ShowCSTutorialTooltip) == 0x000010, "Wrong size on CSTutorialBPLib_ShowCSTutorialTooltip");
static_assert(offsetof(CSTutorialBPLib_ShowCSTutorialTooltip, Tooltip) == 0x000000, "Member 'CSTutorialBPLib_ShowCSTutorialTooltip::Tooltip' has a wrong offset!");

// Function OakCS.CSTutorialBPLib.StopHighlightCSTutorialElement
// 0x0001 (0x0001 - 0x0000)
struct CSTutorialBPLib_StopHighlightCSTutorialElement final
{
public:
	ECSTutorialElement                            TutorialElement;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSTutorialBPLib_StopHighlightCSTutorialElement) == 0x000001, "Wrong alignment on CSTutorialBPLib_StopHighlightCSTutorialElement");
static_assert(sizeof(CSTutorialBPLib_StopHighlightCSTutorialElement) == 0x000001, "Wrong size on CSTutorialBPLib_StopHighlightCSTutorialElement");
static_assert(offsetof(CSTutorialBPLib_StopHighlightCSTutorialElement, TutorialElement) == 0x000000, "Member 'CSTutorialBPLib_StopHighlightCSTutorialElement::TutorialElement' has a wrong offset!");

// Function OakCS.GFxCSButton.OnInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct GFxCSButton_OnInputDeviceChanged final
{
public:
	EGbxMenuInputDevice                           NewInputDevice;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSButton_OnInputDeviceChanged) == 0x000001, "Wrong alignment on GFxCSButton_OnInputDeviceChanged");
static_assert(sizeof(GFxCSButton_OnInputDeviceChanged) == 0x000001, "Wrong size on GFxCSButton_OnInputDeviceChanged");
static_assert(offsetof(GFxCSButton_OnInputDeviceChanged, NewInputDevice) == 0x000000, "Member 'GFxCSButton_OnInputDeviceChanged::NewInputDevice' has a wrong offset!");

// Function OakCS.GFxCSBoosterShopMenu.OnBoosterItemClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSBoosterShopMenu_OnBoosterItemClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSBoosterShopMenu_OnBoosterItemClicked) == 0x000008, "Wrong alignment on GFxCSBoosterShopMenu_OnBoosterItemClicked");
static_assert(sizeof(GFxCSBoosterShopMenu_OnBoosterItemClicked) == 0x000038, "Wrong size on GFxCSBoosterShopMenu_OnBoosterItemClicked");
static_assert(offsetof(GFxCSBoosterShopMenu_OnBoosterItemClicked, PressedButton) == 0x000000, "Member 'GFxCSBoosterShopMenu_OnBoosterItemClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSBoosterShopMenu_OnBoosterItemClicked, InputInfo) == 0x000008, "Member 'GFxCSBoosterShopMenu_OnBoosterItemClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSBoosterShopMenu.OnConfirmPurchase
// 0x0040 (0x0040 - 0x0000)
struct GFxCSBoosterShopMenu_OnConfirmPurchase final
{
public:
	const class UGbxGFxDialogBox*                 SourceDialog;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceNameId;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSBoosterShopMenu_OnConfirmPurchase) == 0x000008, "Wrong alignment on GFxCSBoosterShopMenu_OnConfirmPurchase");
static_assert(sizeof(GFxCSBoosterShopMenu_OnConfirmPurchase) == 0x000040, "Wrong size on GFxCSBoosterShopMenu_OnConfirmPurchase");
static_assert(offsetof(GFxCSBoosterShopMenu_OnConfirmPurchase, SourceDialog) == 0x000000, "Member 'GFxCSBoosterShopMenu_OnConfirmPurchase::SourceDialog' has a wrong offset!");
static_assert(offsetof(GFxCSBoosterShopMenu_OnConfirmPurchase, ChoiceNameId) == 0x000008, "Member 'GFxCSBoosterShopMenu_OnConfirmPurchase::ChoiceNameId' has a wrong offset!");
static_assert(offsetof(GFxCSBoosterShopMenu_OnConfirmPurchase, InputInfo) == 0x000010, "Member 'GFxCSBoosterShopMenu_OnConfirmPurchase::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSBoosterShopMenu.OnCSBucksAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct GFxCSBoosterShopMenu_OnCSBucksAmountChanged final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSBoosterShopMenu_OnCSBucksAmountChanged) == 0x000004, "Wrong alignment on GFxCSBoosterShopMenu_OnCSBucksAmountChanged");
static_assert(sizeof(GFxCSBoosterShopMenu_OnCSBucksAmountChanged) == 0x000004, "Wrong size on GFxCSBoosterShopMenu_OnCSBucksAmountChanged");
static_assert(offsetof(GFxCSBoosterShopMenu_OnCSBucksAmountChanged, NewAmount) == 0x000000, "Member 'GFxCSBoosterShopMenu_OnCSBucksAmountChanged::NewAmount' has a wrong offset!");

// Function OakCS.GFxCSHelpMenu.OnCloseClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSHelpMenu_OnCloseClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSHelpMenu_OnCloseClicked) == 0x000008, "Wrong alignment on GFxCSHelpMenu_OnCloseClicked");
static_assert(sizeof(GFxCSHelpMenu_OnCloseClicked) == 0x000038, "Wrong size on GFxCSHelpMenu_OnCloseClicked");
static_assert(offsetof(GFxCSHelpMenu_OnCloseClicked, PressedButton) == 0x000000, "Member 'GFxCSHelpMenu_OnCloseClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSHelpMenu_OnCloseClicked, InputInfo) == 0x000008, "Member 'GFxCSHelpMenu_OnCloseClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSHUD.OnBackClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSHUD_OnBackClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSHUD_OnBackClicked) == 0x000008, "Wrong alignment on GFxCSHUD_OnBackClicked");
static_assert(sizeof(GFxCSHUD_OnBackClicked) == 0x000038, "Wrong size on GFxCSHUD_OnBackClicked");
static_assert(offsetof(GFxCSHUD_OnBackClicked, PressedButton) == 0x000000, "Member 'GFxCSHUD_OnBackClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSHUD_OnBackClicked, InputInfo) == 0x000008, "Member 'GFxCSHUD_OnBackClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSHUD.OnCSBucksAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct GFxCSHUD_OnCSBucksAmountChanged final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSHUD_OnCSBucksAmountChanged) == 0x000004, "Wrong alignment on GFxCSHUD_OnCSBucksAmountChanged");
static_assert(sizeof(GFxCSHUD_OnCSBucksAmountChanged) == 0x000004, "Wrong size on GFxCSHUD_OnCSBucksAmountChanged");
static_assert(offsetof(GFxCSHUD_OnCSBucksAmountChanged, NewAmount) == 0x000000, "Member 'GFxCSHUD_OnCSBucksAmountChanged::NewAmount' has a wrong offset!");

// Function OakCS.GFxCSHUD.OnHelpClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSHUD_OnHelpClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSHUD_OnHelpClicked) == 0x000008, "Wrong alignment on GFxCSHUD_OnHelpClicked");
static_assert(sizeof(GFxCSHUD_OnHelpClicked) == 0x000038, "Wrong size on GFxCSHUD_OnHelpClicked");
static_assert(offsetof(GFxCSHUD_OnHelpClicked, PressedButton) == 0x000000, "Member 'GFxCSHUD_OnHelpClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSHUD_OnHelpClicked, InputInfo) == 0x000008, "Member 'GFxCSHUD_OnHelpClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSLevelSelectorMenu.OnLevelItemClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSLevelSelectorMenu_OnLevelItemClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSLevelSelectorMenu_OnLevelItemClicked) == 0x000008, "Wrong alignment on GFxCSLevelSelectorMenu_OnLevelItemClicked");
static_assert(sizeof(GFxCSLevelSelectorMenu_OnLevelItemClicked) == 0x000038, "Wrong size on GFxCSLevelSelectorMenu_OnLevelItemClicked");
static_assert(offsetof(GFxCSLevelSelectorMenu_OnLevelItemClicked, PressedButton) == 0x000000, "Member 'GFxCSLevelSelectorMenu_OnLevelItemClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSLevelSelectorMenu_OnLevelItemClicked, InputInfo) == 0x000008, "Member 'GFxCSLevelSelectorMenu_OnLevelItemClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSMainMenu.OnBuyBoosterClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSMainMenu_OnBuyBoosterClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSMainMenu_OnBuyBoosterClicked) == 0x000008, "Wrong alignment on GFxCSMainMenu_OnBuyBoosterClicked");
static_assert(sizeof(GFxCSMainMenu_OnBuyBoosterClicked) == 0x000038, "Wrong size on GFxCSMainMenu_OnBuyBoosterClicked");
static_assert(offsetof(GFxCSMainMenu_OnBuyBoosterClicked, PressedButton) == 0x000000, "Member 'GFxCSMainMenu_OnBuyBoosterClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSMainMenu_OnBuyBoosterClicked, InputInfo) == 0x000008, "Member 'GFxCSMainMenu_OnBuyBoosterClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSMainMenu.OnErrorDialogClicked
// 0x0040 (0x0040 - 0x0000)
struct GFxCSMainMenu_OnErrorDialogClicked final
{
public:
	const class UGbxGFxDialogBox*                 SourceDialog;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceNameId;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSMainMenu_OnErrorDialogClicked) == 0x000008, "Wrong alignment on GFxCSMainMenu_OnErrorDialogClicked");
static_assert(sizeof(GFxCSMainMenu_OnErrorDialogClicked) == 0x000040, "Wrong size on GFxCSMainMenu_OnErrorDialogClicked");
static_assert(offsetof(GFxCSMainMenu_OnErrorDialogClicked, SourceDialog) == 0x000000, "Member 'GFxCSMainMenu_OnErrorDialogClicked::SourceDialog' has a wrong offset!");
static_assert(offsetof(GFxCSMainMenu_OnErrorDialogClicked, ChoiceNameId) == 0x000008, "Member 'GFxCSMainMenu_OnErrorDialogClicked::ChoiceNameId' has a wrong offset!");
static_assert(offsetof(GFxCSMainMenu_OnErrorDialogClicked, InputInfo) == 0x000010, "Member 'GFxCSMainMenu_OnErrorDialogClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSMainMenu.OnPlayClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSMainMenu_OnPlayClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSMainMenu_OnPlayClicked) == 0x000008, "Wrong alignment on GFxCSMainMenu_OnPlayClicked");
static_assert(sizeof(GFxCSMainMenu_OnPlayClicked) == 0x000038, "Wrong size on GFxCSMainMenu_OnPlayClicked");
static_assert(offsetof(GFxCSMainMenu_OnPlayClicked, PressedButton) == 0x000000, "Member 'GFxCSMainMenu_OnPlayClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSMainMenu_OnPlayClicked, InputInfo) == 0x000008, "Member 'GFxCSMainMenu_OnPlayClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSMainMenu.OnWhatsThisClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSMainMenu_OnWhatsThisClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSMainMenu_OnWhatsThisClicked) == 0x000008, "Wrong alignment on GFxCSMainMenu_OnWhatsThisClicked");
static_assert(sizeof(GFxCSMainMenu_OnWhatsThisClicked) == 0x000038, "Wrong size on GFxCSMainMenu_OnWhatsThisClicked");
static_assert(offsetof(GFxCSMainMenu_OnWhatsThisClicked, PressedButton) == 0x000000, "Member 'GFxCSMainMenu_OnWhatsThisClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSMainMenu_OnWhatsThisClicked, InputInfo) == 0x000008, "Member 'GFxCSMainMenu_OnWhatsThisClicked::InputInfo' has a wrong offset!");

// Function OakCS.OakCitizenScienceManager.GetCitizenScienceManager
// 0x0008 (0x0008 - 0x0000)
struct OakCitizenScienceManager_GetCitizenScienceManager final
{
public:
	class UOakCitizenScienceManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OakCitizenScienceManager_GetCitizenScienceManager) == 0x000008, "Wrong alignment on OakCitizenScienceManager_GetCitizenScienceManager");
static_assert(sizeof(OakCitizenScienceManager_GetCitizenScienceManager) == 0x000008, "Wrong size on OakCitizenScienceManager_GetCitizenScienceManager");
static_assert(offsetof(OakCitizenScienceManager_GetCitizenScienceManager, ReturnValue) == 0x000000, "Member 'OakCitizenScienceManager_GetCitizenScienceManager::ReturnValue' has a wrong offset!");

// Function OakCS.GFxCSPuzzleMenu.OnConfirmQuickPass
// 0x0040 (0x0040 - 0x0000)
struct GFxCSPuzzleMenu_OnConfirmQuickPass final
{
public:
	const class UGbxGFxDialogBox*                 SourceDialog;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceNameId;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSPuzzleMenu_OnConfirmQuickPass) == 0x000008, "Wrong alignment on GFxCSPuzzleMenu_OnConfirmQuickPass");
static_assert(sizeof(GFxCSPuzzleMenu_OnConfirmQuickPass) == 0x000040, "Wrong size on GFxCSPuzzleMenu_OnConfirmQuickPass");
static_assert(offsetof(GFxCSPuzzleMenu_OnConfirmQuickPass, SourceDialog) == 0x000000, "Member 'GFxCSPuzzleMenu_OnConfirmQuickPass::SourceDialog' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnConfirmQuickPass, ChoiceNameId) == 0x000008, "Member 'GFxCSPuzzleMenu_OnConfirmQuickPass::ChoiceNameId' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnConfirmQuickPass, InputInfo) == 0x000010, "Member 'GFxCSPuzzleMenu_OnConfirmQuickPass::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSPuzzleMenu.OnErrorDialogClicked
// 0x0040 (0x0040 - 0x0000)
struct GFxCSPuzzleMenu_OnErrorDialogClicked final
{
public:
	const class UGbxGFxDialogBox*                 SourceDialog;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceNameId;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSPuzzleMenu_OnErrorDialogClicked) == 0x000008, "Wrong alignment on GFxCSPuzzleMenu_OnErrorDialogClicked");
static_assert(sizeof(GFxCSPuzzleMenu_OnErrorDialogClicked) == 0x000040, "Wrong size on GFxCSPuzzleMenu_OnErrorDialogClicked");
static_assert(offsetof(GFxCSPuzzleMenu_OnErrorDialogClicked, SourceDialog) == 0x000000, "Member 'GFxCSPuzzleMenu_OnErrorDialogClicked::SourceDialog' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnErrorDialogClicked, ChoiceNameId) == 0x000008, "Member 'GFxCSPuzzleMenu_OnErrorDialogClicked::ChoiceNameId' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnErrorDialogClicked, InputInfo) == 0x000010, "Member 'GFxCSPuzzleMenu_OnErrorDialogClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSPuzzleMenu.OnQuickPassClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSPuzzleMenu_OnQuickPassClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSPuzzleMenu_OnQuickPassClicked) == 0x000008, "Wrong alignment on GFxCSPuzzleMenu_OnQuickPassClicked");
static_assert(sizeof(GFxCSPuzzleMenu_OnQuickPassClicked) == 0x000038, "Wrong size on GFxCSPuzzleMenu_OnQuickPassClicked");
static_assert(offsetof(GFxCSPuzzleMenu_OnQuickPassClicked, PressedButton) == 0x000000, "Member 'GFxCSPuzzleMenu_OnQuickPassClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnQuickPassClicked, InputInfo) == 0x000008, "Member 'GFxCSPuzzleMenu_OnQuickPassClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSPuzzleMenu.OnQuitConfirmed
// 0x0040 (0x0040 - 0x0000)
struct GFxCSPuzzleMenu_OnQuitConfirmed final
{
public:
	const class UGbxGFxDialogBox*                 SourceDialog;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceNameId;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSPuzzleMenu_OnQuitConfirmed) == 0x000008, "Wrong alignment on GFxCSPuzzleMenu_OnQuitConfirmed");
static_assert(sizeof(GFxCSPuzzleMenu_OnQuitConfirmed) == 0x000040, "Wrong size on GFxCSPuzzleMenu_OnQuitConfirmed");
static_assert(offsetof(GFxCSPuzzleMenu_OnQuitConfirmed, SourceDialog) == 0x000000, "Member 'GFxCSPuzzleMenu_OnQuitConfirmed::SourceDialog' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnQuitConfirmed, ChoiceNameId) == 0x000008, "Member 'GFxCSPuzzleMenu_OnQuitConfirmed::ChoiceNameId' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnQuitConfirmed, InputInfo) == 0x000010, "Member 'GFxCSPuzzleMenu_OnQuitConfirmed::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSPuzzleMenu.OnSubmitClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSPuzzleMenu_OnSubmitClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSPuzzleMenu_OnSubmitClicked) == 0x000008, "Wrong alignment on GFxCSPuzzleMenu_OnSubmitClicked");
static_assert(sizeof(GFxCSPuzzleMenu_OnSubmitClicked) == 0x000038, "Wrong size on GFxCSPuzzleMenu_OnSubmitClicked");
static_assert(offsetof(GFxCSPuzzleMenu_OnSubmitClicked, PressedButton) == 0x000000, "Member 'GFxCSPuzzleMenu_OnSubmitClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSPuzzleMenu_OnSubmitClicked, InputInfo) == 0x000008, "Member 'GFxCSPuzzleMenu_OnSubmitClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSRewardScreenMenu.OnMainMenuButtonClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSRewardScreenMenu_OnMainMenuButtonClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSRewardScreenMenu_OnMainMenuButtonClicked) == 0x000008, "Wrong alignment on GFxCSRewardScreenMenu_OnMainMenuButtonClicked");
static_assert(sizeof(GFxCSRewardScreenMenu_OnMainMenuButtonClicked) == 0x000038, "Wrong size on GFxCSRewardScreenMenu_OnMainMenuButtonClicked");
static_assert(offsetof(GFxCSRewardScreenMenu_OnMainMenuButtonClicked, PressedButton) == 0x000000, "Member 'GFxCSRewardScreenMenu_OnMainMenuButtonClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSRewardScreenMenu_OnMainMenuButtonClicked, InputInfo) == 0x000008, "Member 'GFxCSRewardScreenMenu_OnMainMenuButtonClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSRewardScreenMenu.OnPlayAgainClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSRewardScreenMenu_OnPlayAgainClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSRewardScreenMenu_OnPlayAgainClicked) == 0x000008, "Wrong alignment on GFxCSRewardScreenMenu_OnPlayAgainClicked");
static_assert(sizeof(GFxCSRewardScreenMenu_OnPlayAgainClicked) == 0x000038, "Wrong size on GFxCSRewardScreenMenu_OnPlayAgainClicked");
static_assert(offsetof(GFxCSRewardScreenMenu_OnPlayAgainClicked, PressedButton) == 0x000000, "Member 'GFxCSRewardScreenMenu_OnPlayAgainClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSRewardScreenMenu_OnPlayAgainClicked, InputInfo) == 0x000008, "Member 'GFxCSRewardScreenMenu_OnPlayAgainClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSRewardScreenMenu.OnPlayNextCharacterClicked
// 0x0038 (0x0038 - 0x0000)
struct GFxCSRewardScreenMenu_OnPlayNextCharacterClicked final
{
public:
	class UGbxGFxButton*                          PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxMenuInputEvent                     InputInfo;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSRewardScreenMenu_OnPlayNextCharacterClicked) == 0x000008, "Wrong alignment on GFxCSRewardScreenMenu_OnPlayNextCharacterClicked");
static_assert(sizeof(GFxCSRewardScreenMenu_OnPlayNextCharacterClicked) == 0x000038, "Wrong size on GFxCSRewardScreenMenu_OnPlayNextCharacterClicked");
static_assert(offsetof(GFxCSRewardScreenMenu_OnPlayNextCharacterClicked, PressedButton) == 0x000000, "Member 'GFxCSRewardScreenMenu_OnPlayNextCharacterClicked::PressedButton' has a wrong offset!");
static_assert(offsetof(GFxCSRewardScreenMenu_OnPlayNextCharacterClicked, InputInfo) == 0x000008, "Member 'GFxCSRewardScreenMenu_OnPlayNextCharacterClicked::InputInfo' has a wrong offset!");

// Function OakCS.GFxCSWhatsThisMenu.OnMovieMediaOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct GFxCSWhatsThisMenu_OnMovieMediaOpenFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GFxCSWhatsThisMenu_OnMovieMediaOpenFailed) == 0x000008, "Wrong alignment on GFxCSWhatsThisMenu_OnMovieMediaOpenFailed");
static_assert(sizeof(GFxCSWhatsThisMenu_OnMovieMediaOpenFailed) == 0x000010, "Wrong size on GFxCSWhatsThisMenu_OnMovieMediaOpenFailed");
static_assert(offsetof(GFxCSWhatsThisMenu_OnMovieMediaOpenFailed, FailedUrl) == 0x000000, "Member 'GFxCSWhatsThisMenu_OnMovieMediaOpenFailed::FailedUrl' has a wrong offset!");

// Function OakCS.TutorialPuzzle.GetTutorialWorld
// 0x0008 (0x0008 - 0x0000)
struct TutorialPuzzle_GetTutorialWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPuzzle_GetTutorialWorld) == 0x000008, "Wrong alignment on TutorialPuzzle_GetTutorialWorld");
static_assert(sizeof(TutorialPuzzle_GetTutorialWorld) == 0x000008, "Wrong size on TutorialPuzzle_GetTutorialWorld");
static_assert(offsetof(TutorialPuzzle_GetTutorialWorld, ReturnValue) == 0x000000, "Member 'TutorialPuzzle_GetTutorialWorld::ReturnValue' has a wrong offset!");

}

