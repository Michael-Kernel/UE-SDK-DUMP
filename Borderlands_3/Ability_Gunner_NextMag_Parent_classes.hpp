#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_Gunner_NextMag_Parent

#include "Basic.hpp"

#include "GbxAbilities_structs.hpp"
#include "GbxGameSystemCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Ability_AnointParent_Gunner_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ability_Gunner_NextMag_Parent.Ability_Gunner_NextMag_Parent_C
// 0x0078 (0x0288 - 0x0210)
class UAbility_Gunner_NextMag_Parent_C : public UAbility_AnointParent_Gunner_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Ability_Gunner_NextMag_Parent_C;    // 0x0210(0x0008)(Transient, DuplicateTransient)
	struct FGbxAbilityResourceController_ScriptDelegate RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_TestEndGame; // 0x0218(0x0028)()
	int32                                         ReloadCount;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOakCharacter*                          OakCharacterOwner;                                 // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttributeInitializationData           MaxReloads;                                        // 0x0250(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_Ability_Gunner_NextMag_Parent(int32 EntryPoint);
	void AnointAutoBearStarted();
	void ReloadedWeapon(class AWeapon* EventWeapon, bool bAutoReload);
	void OnActivated();
	void AnointTriggerEffect(bool TriggerEffect, bool* Res);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ability_Gunner_NextMag_Parent_C">();
	}
	static class UAbility_Gunner_NextMag_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_Gunner_NextMag_Parent_C>();
	}
};
static_assert(alignof(UAbility_Gunner_NextMag_Parent_C) == 0x000008, "Wrong alignment on UAbility_Gunner_NextMag_Parent_C");
static_assert(sizeof(UAbility_Gunner_NextMag_Parent_C) == 0x000288, "Wrong size on UAbility_Gunner_NextMag_Parent_C");
static_assert(offsetof(UAbility_Gunner_NextMag_Parent_C, UberGraphFrame_Ability_Gunner_NextMag_Parent_C) == 0x000210, "Member 'UAbility_Gunner_NextMag_Parent_C::UberGraphFrame_Ability_Gunner_NextMag_Parent_C' has a wrong offset!");
static_assert(offsetof(UAbility_Gunner_NextMag_Parent_C, RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_TestEndGame) == 0x000218, "Member 'UAbility_Gunner_NextMag_Parent_C::RsrcCntrlr_GbxAbilityResourceController_ScriptDelegate_Ability_TestEndGame' has a wrong offset!");
static_assert(offsetof(UAbility_Gunner_NextMag_Parent_C, ReloadCount) == 0x000240, "Member 'UAbility_Gunner_NextMag_Parent_C::ReloadCount' has a wrong offset!");
static_assert(offsetof(UAbility_Gunner_NextMag_Parent_C, OakCharacterOwner) == 0x000248, "Member 'UAbility_Gunner_NextMag_Parent_C::OakCharacterOwner' has a wrong offset!");
static_assert(offsetof(UAbility_Gunner_NextMag_Parent_C, MaxReloads) == 0x000250, "Member 'UAbility_Gunner_NextMag_Parent_C::MaxReloads' has a wrong offset!");

}

