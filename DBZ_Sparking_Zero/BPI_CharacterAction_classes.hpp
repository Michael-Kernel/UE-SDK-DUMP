#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterAction

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_CharacterAction.BPI_CharacterAction_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_CharacterAction_C final : public IInterface
{
public:
	void AnimNotifyAttackCollision(bool Enable);
	void AnimNotifyAttackCollisionTick();
	void AnimNotifyAttackHoming(const struct FKoratAttackHomingDataList& InAttackHoming);
	void AnimNotifyAttackMoveTarget(const struct FKoratAttackHomingDataList& InAttackHoming);
	void AnimNotifyParry(bool Enable);
	void AnimNotifyPossibleVanishingRevenge(bool Enable);
	void AnimNotifyResetArmorLevel(class UObject* SourceObject);
	void AnimNotifyRevengeCounter(const bool Enable, const TArray<struct FKoratReplaceAnimationDataList>& InAnimDataList);
	void AnimNotifySetActionCancel(bool Enable);
	void AnimNotifySetArmorLevel(const struct FKoratArmorLevelDataList& ArmorLevel, class UObject* SourceObject);
	void AnimNotifySonicSway(bool Enable);
	void AnimNotifyVanishing(double InDisappearTime, double InAppearTime, double InSuccessDistance, bool IsDrawVanishingEffect, const TArray<struct FKoratVanishingMove>& InVanishingMove, class USSActionCameraDataAsset* InStartActionCamera, class USSActionCameraDataAsset* InStartOpponentActionCamera, class USSActionCameraDataAsset* InEndActionCamera, class USSActionCameraDataAsset* InEndOpponentActionCamera, bool IsOneshotDeadly);
	void GetRequestAnimData(struct FKoratRequestAnimData* RequestAnimData);
	void IsPlayableDragonDash(bool* IsPlayable);
	void IsPlayablePursuit(EKoratPursuitType InPursuitType, bool* IsPlayable);
	void OnChangeSection(EKoratAnimType InAnimType, class FName SectionName);
	void OnCharacterGaveDamage(EKoratCharacterMovementTransition InMovementTransition, bool InHoming, bool InBlownAttack, EKoratActionAttackType InAttackType, ESituationOfOpponentWhenAttackHit InOpponentHitSituation, const struct FKoratActionDataList& InAttackAction);
	void OnCharacterReceivedDamage(const struct FKoratDamageReactionDataList& InDamageReactionDataList, bool InEndured, bool InIsGuardSuccess);
	void OnCharacterReceivedDamageByCombatives(const struct FKoratCharacterCombativesParameter& InCombativesParameter, bool InEndured, bool bInIsGuardSuccess);
	void OnHitObjectCollisionOccured(const struct FKoratActionDataList& InAction);
	void OnHitObjectStopped(const struct FKoratActionDataList& InAction);
	void OnPlayDragonDash();
	void OnPlayDragonHoming();
	void OnPlayZBurstDash();
	void OnReachedBurstSmashMove();
	void UpdateActionTurn();

	void IsPlayableAction(bool* IsPlayable) const;
	void IsPlayableMove(bool* IsPlayable) const;
	void IsPlayableReaction(bool* IsPlayable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_CharacterAction_C">();
	}
	static class IBPI_CharacterAction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_CharacterAction_C>();
	}
};
static_assert(alignof(IBPI_CharacterAction_C) == 0x000008, "Wrong alignment on IBPI_CharacterAction_C");
static_assert(sizeof(IBPI_CharacterAction_C) == 0x000028, "Wrong size on IBPI_CharacterAction_C");

}

