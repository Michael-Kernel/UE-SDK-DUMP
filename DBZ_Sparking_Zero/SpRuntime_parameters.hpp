#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpRuntime

#include "Basic.hpp"

#include "SpRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function SpRuntime.SpRuntimeBlueprintLibrary.AssertionAssert
// 0x0018 (0x0018 - 0x0000)
struct SpRuntimeBlueprintLibrary_AssertionAssert final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InExpression;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_AssertionAssert) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_AssertionAssert");
static_assert(sizeof(SpRuntimeBlueprintLibrary_AssertionAssert) == 0x000018, "Wrong size on SpRuntimeBlueprintLibrary_AssertionAssert");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionAssert, InMessage) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_AssertionAssert::InMessage' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionAssert, InExpression) == 0x000010, "Member 'SpRuntimeBlueprintLibrary_AssertionAssert::InExpression' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.AssertionError
// 0x0018 (0x0018 - 0x0000)
struct SpRuntimeBlueprintLibrary_AssertionError final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InExpression;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_AssertionError) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_AssertionError");
static_assert(sizeof(SpRuntimeBlueprintLibrary_AssertionError) == 0x000018, "Wrong size on SpRuntimeBlueprintLibrary_AssertionError");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionError, InMessage) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_AssertionError::InMessage' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionError, InExpression) == 0x000010, "Member 'SpRuntimeBlueprintLibrary_AssertionError::InExpression' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.AssertionFatal
// 0x0018 (0x0018 - 0x0000)
struct SpRuntimeBlueprintLibrary_AssertionFatal final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InExpression;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_AssertionFatal) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_AssertionFatal");
static_assert(sizeof(SpRuntimeBlueprintLibrary_AssertionFatal) == 0x000018, "Wrong size on SpRuntimeBlueprintLibrary_AssertionFatal");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionFatal, InMessage) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_AssertionFatal::InMessage' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionFatal, InExpression) == 0x000010, "Member 'SpRuntimeBlueprintLibrary_AssertionFatal::InExpression' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.AssertionInfo
// 0x0010 (0x0010 - 0x0000)
struct SpRuntimeBlueprintLibrary_AssertionInfo final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_AssertionInfo) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_AssertionInfo");
static_assert(sizeof(SpRuntimeBlueprintLibrary_AssertionInfo) == 0x000010, "Wrong size on SpRuntimeBlueprintLibrary_AssertionInfo");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionInfo, InMessage) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_AssertionInfo::InMessage' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.AssertionPrint
// 0x0010 (0x0010 - 0x0000)
struct SpRuntimeBlueprintLibrary_AssertionPrint final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_AssertionPrint) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_AssertionPrint");
static_assert(sizeof(SpRuntimeBlueprintLibrary_AssertionPrint) == 0x000010, "Wrong size on SpRuntimeBlueprintLibrary_AssertionPrint");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionPrint, InMessage) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_AssertionPrint::InMessage' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.AssertionWarning
// 0x0018 (0x0018 - 0x0000)
struct SpRuntimeBlueprintLibrary_AssertionWarning final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InExpression;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_AssertionWarning) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_AssertionWarning");
static_assert(sizeof(SpRuntimeBlueprintLibrary_AssertionWarning) == 0x000018, "Wrong size on SpRuntimeBlueprintLibrary_AssertionWarning");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionWarning, InMessage) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_AssertionWarning::InMessage' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_AssertionWarning, InExpression) == 0x000010, "Member 'SpRuntimeBlueprintLibrary_AssertionWarning::InExpression' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.CreateViewportCaptureSoftTexture
// 0x0030 (0x0030 - 0x0000)
struct SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture) == 0x000008, "Wrong alignment on SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture");
static_assert(sizeof(SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture) == 0x000030, "Wrong size on SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture");
static_assert(offsetof(SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture, ReturnValue) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_CreateViewportCaptureSoftTexture::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.IsGamepadAttached
// 0x0008 (0x0008 - 0x0000)
struct SpRuntimeBlueprintLibrary_IsGamepadAttached final
{
public:
	int32                                         InControllerId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_IsGamepadAttached) == 0x000004, "Wrong alignment on SpRuntimeBlueprintLibrary_IsGamepadAttached");
static_assert(sizeof(SpRuntimeBlueprintLibrary_IsGamepadAttached) == 0x000008, "Wrong size on SpRuntimeBlueprintLibrary_IsGamepadAttached");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached, InControllerId) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached::InControllerId' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached, ReturnValue) == 0x000004, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.IsGamepadAttached_Microsft
// 0x0008 (0x0008 - 0x0000)
struct SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft final
{
public:
	int32                                         InControllerId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft) == 0x000004, "Wrong alignment on SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft");
static_assert(sizeof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft) == 0x000008, "Wrong size on SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft, InControllerId) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft::InControllerId' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft, ReturnValue) == 0x000004, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached_Microsft::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.IsGamepadAttached_Sony
// 0x0008 (0x0008 - 0x0000)
struct SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony final
{
public:
	int32                                         InControllerId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony) == 0x000004, "Wrong alignment on SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony");
static_assert(sizeof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony) == 0x000008, "Wrong size on SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony, InControllerId) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony::InControllerId' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony, ReturnValue) == 0x000004, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached_Sony::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.IsGamepadAttached_Valve
// 0x0008 (0x0008 - 0x0000)
struct SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve final
{
public:
	int32                                         InControllerId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve) == 0x000004, "Wrong alignment on SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve");
static_assert(sizeof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve) == 0x000008, "Wrong size on SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve, InControllerId) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve::InControllerId' has a wrong offset!");
static_assert(offsetof(SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve, ReturnValue) == 0x000004, "Member 'SpRuntimeBlueprintLibrary_IsGamepadAttached_Valve::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.SetDebugDisplayEnable
// 0x0001 (0x0001 - 0x0000)
struct SpRuntimeBlueprintLibrary_SetDebugDisplayEnable final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_SetDebugDisplayEnable) == 0x000001, "Wrong alignment on SpRuntimeBlueprintLibrary_SetDebugDisplayEnable");
static_assert(sizeof(SpRuntimeBlueprintLibrary_SetDebugDisplayEnable) == 0x000001, "Wrong size on SpRuntimeBlueprintLibrary_SetDebugDisplayEnable");
static_assert(offsetof(SpRuntimeBlueprintLibrary_SetDebugDisplayEnable, InEnable) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_SetDebugDisplayEnable::InEnable' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.SetDebugDisplayPrintVisible
// 0x0001 (0x0001 - 0x0000)
struct SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible) == 0x000001, "Wrong alignment on SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible");
static_assert(sizeof(SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible) == 0x000001, "Wrong size on SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible");
static_assert(offsetof(SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible, InVisible) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_SetDebugDisplayPrintVisible::InVisible' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.SetDebugDisplayTelopVisible
// 0x0001 (0x0001 - 0x0000)
struct SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible) == 0x000001, "Wrong alignment on SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible");
static_assert(sizeof(SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible) == 0x000001, "Wrong size on SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible");
static_assert(offsetof(SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible, InVisible) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_SetDebugDisplayTelopVisible::InVisible' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.SetDebugGuiEnable
// 0x0001 (0x0001 - 0x0000)
struct SpRuntimeBlueprintLibrary_SetDebugGuiEnable final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_SetDebugGuiEnable) == 0x000001, "Wrong alignment on SpRuntimeBlueprintLibrary_SetDebugGuiEnable");
static_assert(sizeof(SpRuntimeBlueprintLibrary_SetDebugGuiEnable) == 0x000001, "Wrong size on SpRuntimeBlueprintLibrary_SetDebugGuiEnable");
static_assert(offsetof(SpRuntimeBlueprintLibrary_SetDebugGuiEnable, InEnable) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_SetDebugGuiEnable::InEnable' has a wrong offset!");

// Function SpRuntime.SpRuntimeBlueprintLibrary.SetDebugGuiMeterVisible
// 0x0001 (0x0001 - 0x0000)
struct SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible) == 0x000001, "Wrong alignment on SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible");
static_assert(sizeof(SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible) == 0x000001, "Wrong size on SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible");
static_assert(offsetof(SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible, InVisible) == 0x000000, "Member 'SpRuntimeBlueprintLibrary_SetDebugGuiMeterVisible::InVisible' has a wrong offset!");

// Function SpRuntime.SpDebugModelViewerModelSpawner.GetModel
// 0x0010 (0x0010 - 0x0000)
struct SpDebugModelViewerModelSpawner_GetModel final
{
public:
	struct FSpDebugModelViewerModelHandle         InHandle;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpDebugModelViewerModelSpawner_GetModel) == 0x000008, "Wrong alignment on SpDebugModelViewerModelSpawner_GetModel");
static_assert(sizeof(SpDebugModelViewerModelSpawner_GetModel) == 0x000010, "Wrong size on SpDebugModelViewerModelSpawner_GetModel");
static_assert(offsetof(SpDebugModelViewerModelSpawner_GetModel, InHandle) == 0x000000, "Member 'SpDebugModelViewerModelSpawner_GetModel::InHandle' has a wrong offset!");
static_assert(offsetof(SpDebugModelViewerModelSpawner_GetModel, ReturnValue) == 0x000008, "Member 'SpDebugModelViewerModelSpawner_GetModel::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpDebugModelViewerModelSpawner.GetModelCtrlComponent
// 0x0010 (0x0010 - 0x0000)
struct SpDebugModelViewerModelSpawner_GetModelCtrlComponent final
{
public:
	struct FSpDebugModelViewerModelHandle         InHandle;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class USpDebugModelViewerModelCtrlComponent*  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpDebugModelViewerModelSpawner_GetModelCtrlComponent) == 0x000008, "Wrong alignment on SpDebugModelViewerModelSpawner_GetModelCtrlComponent");
static_assert(sizeof(SpDebugModelViewerModelSpawner_GetModelCtrlComponent) == 0x000010, "Wrong size on SpDebugModelViewerModelSpawner_GetModelCtrlComponent");
static_assert(offsetof(SpDebugModelViewerModelSpawner_GetModelCtrlComponent, InHandle) == 0x000000, "Member 'SpDebugModelViewerModelSpawner_GetModelCtrlComponent::InHandle' has a wrong offset!");
static_assert(offsetof(SpDebugModelViewerModelSpawner_GetModelCtrlComponent, ReturnValue) == 0x000008, "Member 'SpDebugModelViewerModelSpawner_GetModelCtrlComponent::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpDebugModelViewerModelSpawner.GetModelHandle
// 0x0010 (0x0010 - 0x0000)
struct SpDebugModelViewerModelSpawner_GetModelHandle final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpDebugModelViewerModelHandle         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpDebugModelViewerModelSpawner_GetModelHandle) == 0x000008, "Wrong alignment on SpDebugModelViewerModelSpawner_GetModelHandle");
static_assert(sizeof(SpDebugModelViewerModelSpawner_GetModelHandle) == 0x000010, "Wrong size on SpDebugModelViewerModelSpawner_GetModelHandle");
static_assert(offsetof(SpDebugModelViewerModelSpawner_GetModelHandle, InActor) == 0x000000, "Member 'SpDebugModelViewerModelSpawner_GetModelHandle::InActor' has a wrong offset!");
static_assert(offsetof(SpDebugModelViewerModelSpawner_GetModelHandle, ReturnValue) == 0x000008, "Member 'SpDebugModelViewerModelSpawner_GetModelHandle::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpDebugModelViewerModelSpawner.IsManageModel
// 0x0010 (0x0010 - 0x0000)
struct SpDebugModelViewerModelSpawner_IsManageModel final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpDebugModelViewerModelSpawner_IsManageModel) == 0x000008, "Wrong alignment on SpDebugModelViewerModelSpawner_IsManageModel");
static_assert(sizeof(SpDebugModelViewerModelSpawner_IsManageModel) == 0x000010, "Wrong size on SpDebugModelViewerModelSpawner_IsManageModel");
static_assert(offsetof(SpDebugModelViewerModelSpawner_IsManageModel, InActor) == 0x000000, "Member 'SpDebugModelViewerModelSpawner_IsManageModel::InActor' has a wrong offset!");
static_assert(offsetof(SpDebugModelViewerModelSpawner_IsManageModel, ReturnValue) == 0x000008, "Member 'SpDebugModelViewerModelSpawner_IsManageModel::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpDebugModelViewerSpawnCtrlComponent.CreateModel
// 0x0080 (0x0080 - 0x0000)
struct SpDebugModelViewerSpawnCtrlComponent_CreateModel final
{
public:
	class FString                                 InResourcePath;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpDebugModelViewerModelHandle         ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpDebugModelViewerSpawnCtrlComponent_CreateModel) == 0x000010, "Wrong alignment on SpDebugModelViewerSpawnCtrlComponent_CreateModel");
static_assert(sizeof(SpDebugModelViewerSpawnCtrlComponent_CreateModel) == 0x000080, "Wrong size on SpDebugModelViewerSpawnCtrlComponent_CreateModel");
static_assert(offsetof(SpDebugModelViewerSpawnCtrlComponent_CreateModel, InResourcePath) == 0x000000, "Member 'SpDebugModelViewerSpawnCtrlComponent_CreateModel::InResourcePath' has a wrong offset!");
static_assert(offsetof(SpDebugModelViewerSpawnCtrlComponent_CreateModel, InTransform) == 0x000010, "Member 'SpDebugModelViewerSpawnCtrlComponent_CreateModel::InTransform' has a wrong offset!");
static_assert(offsetof(SpDebugModelViewerSpawnCtrlComponent_CreateModel, ReturnValue) == 0x000070, "Member 'SpDebugModelViewerSpawnCtrlComponent_CreateModel::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpDebugModelViewerSpawnCtrlComponent.DeleteModel
// 0x0008 (0x0008 - 0x0000)
struct SpDebugModelViewerSpawnCtrlComponent_DeleteModel final
{
public:
	struct FSpDebugModelViewerModelHandle         InHandle;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpDebugModelViewerSpawnCtrlComponent_DeleteModel) == 0x000004, "Wrong alignment on SpDebugModelViewerSpawnCtrlComponent_DeleteModel");
static_assert(sizeof(SpDebugModelViewerSpawnCtrlComponent_DeleteModel) == 0x000008, "Wrong size on SpDebugModelViewerSpawnCtrlComponent_DeleteModel");
static_assert(offsetof(SpDebugModelViewerSpawnCtrlComponent_DeleteModel, InHandle) == 0x000000, "Member 'SpDebugModelViewerSpawnCtrlComponent_DeleteModel::InHandle' has a wrong offset!");

// Function SpRuntime.SpTextBlock.GetDynamicFontMaterial
// 0x0008 (0x0008 - 0x0000)
struct SpTextBlock_GetDynamicFontMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_GetDynamicFontMaterial) == 0x000008, "Wrong alignment on SpTextBlock_GetDynamicFontMaterial");
static_assert(sizeof(SpTextBlock_GetDynamicFontMaterial) == 0x000008, "Wrong size on SpTextBlock_GetDynamicFontMaterial");
static_assert(offsetof(SpTextBlock_GetDynamicFontMaterial, ReturnValue) == 0x000000, "Member 'SpTextBlock_GetDynamicFontMaterial::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpTextBlock.GetDynamicOutlineMaterial
// 0x0008 (0x0008 - 0x0000)
struct SpTextBlock_GetDynamicOutlineMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_GetDynamicOutlineMaterial) == 0x000008, "Wrong alignment on SpTextBlock_GetDynamicOutlineMaterial");
static_assert(sizeof(SpTextBlock_GetDynamicOutlineMaterial) == 0x000008, "Wrong size on SpTextBlock_GetDynamicOutlineMaterial");
static_assert(offsetof(SpTextBlock_GetDynamicOutlineMaterial, ReturnValue) == 0x000000, "Member 'SpTextBlock_GetDynamicOutlineMaterial::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct SpTextBlock_SetAutoWrapText final
{
public:
	bool                                          InAutoTextWrap;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetAutoWrapText) == 0x000001, "Wrong alignment on SpTextBlock_SetAutoWrapText");
static_assert(sizeof(SpTextBlock_SetAutoWrapText) == 0x000001, "Wrong size on SpTextBlock_SetAutoWrapText");
static_assert(offsetof(SpTextBlock_SetAutoWrapText, InAutoTextWrap) == 0x000000, "Member 'SpTextBlock_SetAutoWrapText::InAutoTextWrap' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetFont
// 0x0058 (0x0058 - 0x0000)
struct SpTextBlock_SetFont final
{
public:
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0000(0x0058)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetFont) == 0x000008, "Wrong alignment on SpTextBlock_SetFont");
static_assert(sizeof(SpTextBlock_SetFont) == 0x000058, "Wrong size on SpTextBlock_SetFont");
static_assert(offsetof(SpTextBlock_SetFont, InFontInfo) == 0x000000, "Member 'SpTextBlock_SetFont::InFontInfo' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct SpTextBlock_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetMinDesiredWidth) == 0x000004, "Wrong alignment on SpTextBlock_SetMinDesiredWidth");
static_assert(sizeof(SpTextBlock_SetMinDesiredWidth) == 0x000004, "Wrong size on SpTextBlock_SetMinDesiredWidth");
static_assert(offsetof(SpTextBlock_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'SpTextBlock_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetOpacity
// 0x0008 (0x0008 - 0x0000)
struct SpTextBlock_SetOpacity final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOpacity;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetOpacity) == 0x000004, "Wrong alignment on SpTextBlock_SetOpacity");
static_assert(sizeof(SpTextBlock_SetOpacity) == 0x000008, "Wrong size on SpTextBlock_SetOpacity");
static_assert(offsetof(SpTextBlock_SetOpacity, InIndex) == 0x000000, "Member 'SpTextBlock_SetOpacity::InIndex' has a wrong offset!");
static_assert(offsetof(SpTextBlock_SetOpacity, InOpacity) == 0x000004, "Member 'SpTextBlock_SetOpacity::InOpacity' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct SpTextBlock_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on SpTextBlock_SetShadowColorAndOpacity");
static_assert(sizeof(SpTextBlock_SetShadowColorAndOpacity) == 0x000010, "Wrong size on SpTextBlock_SetShadowColorAndOpacity");
static_assert(offsetof(SpTextBlock_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'SpTextBlock_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetShadowOffset
// 0x0010 (0x0010 - 0x0000)
struct SpTextBlock_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetShadowOffset) == 0x000008, "Wrong alignment on SpTextBlock_SetShadowOffset");
static_assert(sizeof(SpTextBlock_SetShadowOffset) == 0x000010, "Wrong size on SpTextBlock_SetShadowOffset");
static_assert(offsetof(SpTextBlock_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'SpTextBlock_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetStrikeBrush
// 0x00D0 (0x00D0 - 0x0000)
struct SpTextBlock_SetStrikeBrush final
{
public:
	struct FSlateBrush                            InStrikeBrush;                                     // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetStrikeBrush) == 0x000010, "Wrong alignment on SpTextBlock_SetStrikeBrush");
static_assert(sizeof(SpTextBlock_SetStrikeBrush) == 0x0000D0, "Wrong size on SpTextBlock_SetStrikeBrush");
static_assert(offsetof(SpTextBlock_SetStrikeBrush, InStrikeBrush) == 0x000000, "Member 'SpTextBlock_SetStrikeBrush::InStrikeBrush' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetText
// 0x0018 (0x0018 - 0x0000)
struct SpTextBlock_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetText) == 0x000008, "Wrong alignment on SpTextBlock_SetText");
static_assert(sizeof(SpTextBlock_SetText) == 0x000018, "Wrong size on SpTextBlock_SetText");
static_assert(offsetof(SpTextBlock_SetText, InText) == 0x000000, "Member 'SpTextBlock_SetText::InText' has a wrong offset!");

// Function SpRuntime.SpTextBlock.SetUseColorAndOpacityIndex
// 0x0004 (0x0004 - 0x0000)
struct SpTextBlock_SetUseColorAndOpacityIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_SetUseColorAndOpacityIndex) == 0x000004, "Wrong alignment on SpTextBlock_SetUseColorAndOpacityIndex");
static_assert(sizeof(SpTextBlock_SetUseColorAndOpacityIndex) == 0x000004, "Wrong size on SpTextBlock_SetUseColorAndOpacityIndex");
static_assert(offsetof(SpTextBlock_SetUseColorAndOpacityIndex, InIndex) == 0x000000, "Member 'SpTextBlock_SetUseColorAndOpacityIndex::InIndex' has a wrong offset!");

// Function SpRuntime.SpTextBlock.GetText
// 0x0018 (0x0018 - 0x0000)
struct SpTextBlock_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpTextBlock_GetText) == 0x000008, "Wrong alignment on SpTextBlock_GetText");
static_assert(sizeof(SpTextBlock_GetText) == 0x000018, "Wrong size on SpTextBlock_GetText");
static_assert(offsetof(SpTextBlock_GetText, ReturnValue) == 0x000000, "Member 'SpTextBlock_GetText::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpUIAutoScrollBox.ResetScroll
// 0x0001 (0x0001 - 0x0000)
struct SpUIAutoScrollBox_ResetScroll final
{
public:
	bool                                          bInTickStop;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIAutoScrollBox_ResetScroll) == 0x000001, "Wrong alignment on SpUIAutoScrollBox_ResetScroll");
static_assert(sizeof(SpUIAutoScrollBox_ResetScroll) == 0x000001, "Wrong size on SpUIAutoScrollBox_ResetScroll");
static_assert(offsetof(SpUIAutoScrollBox_ResetScroll, bInTickStop) == 0x000000, "Member 'SpUIAutoScrollBox_ResetScroll::bInTickStop' has a wrong offset!");

// Function SpRuntime.SpUIAutoScrollBox.StopScroll
// 0x0001 (0x0001 - 0x0000)
struct SpUIAutoScrollBox_StopScroll final
{
public:
	bool                                          bInResetPosition;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIAutoScrollBox_StopScroll) == 0x000001, "Wrong alignment on SpUIAutoScrollBox_StopScroll");
static_assert(sizeof(SpUIAutoScrollBox_StopScroll) == 0x000001, "Wrong size on SpUIAutoScrollBox_StopScroll");
static_assert(offsetof(SpUIAutoScrollBox_StopScroll, bInResetPosition) == 0x000000, "Member 'SpUIAutoScrollBox_StopScroll::bInResetPosition' has a wrong offset!");

// Function SpRuntime.SpUICircleGauge.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct SpUICircleGauge_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUICircleGauge_SetPercent) == 0x000004, "Wrong alignment on SpUICircleGauge_SetPercent");
static_assert(sizeof(SpUICircleGauge_SetPercent) == 0x000004, "Wrong size on SpUICircleGauge_SetPercent");
static_assert(offsetof(SpUICircleGauge_SetPercent, InPercent) == 0x000000, "Member 'SpUICircleGauge_SetPercent::InPercent' has a wrong offset!");

// Function SpRuntime.SpUICircleGauge.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct SpUICircleGauge_GetPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUICircleGauge_GetPercent) == 0x000004, "Wrong alignment on SpUICircleGauge_GetPercent");
static_assert(sizeof(SpUICircleGauge_GetPercent) == 0x000004, "Wrong size on SpUICircleGauge_GetPercent");
static_assert(offsetof(SpUICircleGauge_GetPercent, ReturnValue) == 0x000000, "Member 'SpUICircleGauge_GetPercent::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpUICollisionBox.SetCollisionPoint
// 0x0040 (0x0040 - 0x0000)
struct SpUICollisionBox_SetCollisionPoint final
{
public:
	struct FVector2D                              LeftTop;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightTop;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftBottom;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightBottom;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUICollisionBox_SetCollisionPoint) == 0x000008, "Wrong alignment on SpUICollisionBox_SetCollisionPoint");
static_assert(sizeof(SpUICollisionBox_SetCollisionPoint) == 0x000040, "Wrong size on SpUICollisionBox_SetCollisionPoint");
static_assert(offsetof(SpUICollisionBox_SetCollisionPoint, LeftTop) == 0x000000, "Member 'SpUICollisionBox_SetCollisionPoint::LeftTop' has a wrong offset!");
static_assert(offsetof(SpUICollisionBox_SetCollisionPoint, RightTop) == 0x000010, "Member 'SpUICollisionBox_SetCollisionPoint::RightTop' has a wrong offset!");
static_assert(offsetof(SpUICollisionBox_SetCollisionPoint, LeftBottom) == 0x000020, "Member 'SpUICollisionBox_SetCollisionPoint::LeftBottom' has a wrong offset!");
static_assert(offsetof(SpUICollisionBox_SetCollisionPoint, RightBottom) == 0x000030, "Member 'SpUICollisionBox_SetCollisionPoint::RightBottom' has a wrong offset!");

// Function SpRuntime.SpUIFixedScrollBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct SpUIFixedScrollBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIFixedScrollBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on SpUIFixedScrollBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(SpUIFixedScrollBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on SpUIFixedScrollBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(SpUIFixedScrollBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'SpUIFixedScrollBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function SpRuntime.SpUIFixedScrollBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct SpUIFixedScrollBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIFixedScrollBoxSlot_SetPadding) == 0x000004, "Wrong alignment on SpUIFixedScrollBoxSlot_SetPadding");
static_assert(sizeof(SpUIFixedScrollBoxSlot_SetPadding) == 0x000010, "Wrong size on SpUIFixedScrollBoxSlot_SetPadding");
static_assert(offsetof(SpUIFixedScrollBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'SpUIFixedScrollBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function SpRuntime.SpUIFixedScrollBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct SpUIFixedScrollBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIFixedScrollBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on SpUIFixedScrollBoxSlot_SetVerticalAlignment");
static_assert(sizeof(SpUIFixedScrollBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on SpUIFixedScrollBoxSlot_SetVerticalAlignment");
static_assert(offsetof(SpUIFixedScrollBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'SpUIFixedScrollBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function SpRuntime.SpUIGauge.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct SpUIGauge_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIGauge_SetPercent) == 0x000004, "Wrong alignment on SpUIGauge_SetPercent");
static_assert(sizeof(SpUIGauge_SetPercent) == 0x000004, "Wrong size on SpUIGauge_SetPercent");
static_assert(offsetof(SpUIGauge_SetPercent, InPercent) == 0x000000, "Member 'SpUIGauge_SetPercent::InPercent' has a wrong offset!");

// Function SpRuntime.SpUIGauge.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct SpUIGauge_GetPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIGauge_GetPercent) == 0x000004, "Wrong alignment on SpUIGauge_GetPercent");
static_assert(sizeof(SpUIGauge_GetPercent) == 0x000004, "Wrong size on SpUIGauge_GetPercent");
static_assert(offsetof(SpUIGauge_GetPercent, ReturnValue) == 0x000000, "Member 'SpUIGauge_GetPercent::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpUIMultiCollisionBox.SetCollisionPoint
// 0x0048 (0x0048 - 0x0000)
struct SpUIMultiCollisionBox_SetCollisionPoint final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LeftTop;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightTop;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftBottom;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightBottom;                                       // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIMultiCollisionBox_SetCollisionPoint) == 0x000008, "Wrong alignment on SpUIMultiCollisionBox_SetCollisionPoint");
static_assert(sizeof(SpUIMultiCollisionBox_SetCollisionPoint) == 0x000048, "Wrong size on SpUIMultiCollisionBox_SetCollisionPoint");
static_assert(offsetof(SpUIMultiCollisionBox_SetCollisionPoint, InIndex) == 0x000000, "Member 'SpUIMultiCollisionBox_SetCollisionPoint::InIndex' has a wrong offset!");
static_assert(offsetof(SpUIMultiCollisionBox_SetCollisionPoint, LeftTop) == 0x000008, "Member 'SpUIMultiCollisionBox_SetCollisionPoint::LeftTop' has a wrong offset!");
static_assert(offsetof(SpUIMultiCollisionBox_SetCollisionPoint, RightTop) == 0x000018, "Member 'SpUIMultiCollisionBox_SetCollisionPoint::RightTop' has a wrong offset!");
static_assert(offsetof(SpUIMultiCollisionBox_SetCollisionPoint, LeftBottom) == 0x000028, "Member 'SpUIMultiCollisionBox_SetCollisionPoint::LeftBottom' has a wrong offset!");
static_assert(offsetof(SpUIMultiCollisionBox_SetCollisionPoint, RightBottom) == 0x000038, "Member 'SpUIMultiCollisionBox_SetCollisionPoint::RightBottom' has a wrong offset!");

// Function SpRuntime.SpUIMultiCollisionBox.SetFirstFocusCollision
// 0x0004 (0x0004 - 0x0000)
struct SpUIMultiCollisionBox_SetFirstFocusCollision final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIMultiCollisionBox_SetFirstFocusCollision) == 0x000004, "Wrong alignment on SpUIMultiCollisionBox_SetFirstFocusCollision");
static_assert(sizeof(SpUIMultiCollisionBox_SetFirstFocusCollision) == 0x000004, "Wrong size on SpUIMultiCollisionBox_SetFirstFocusCollision");
static_assert(offsetof(SpUIMultiCollisionBox_SetFirstFocusCollision, InIndex) == 0x000000, "Member 'SpUIMultiCollisionBox_SetFirstFocusCollision::InIndex' has a wrong offset!");

// Function SpRuntime.SpUIParticle.SetParticleInjectionAngle
// 0x0008 (0x0008 - 0x0000)
struct SpUIParticle_SetParticleInjectionAngle final
{
public:
	int32                                         InAngle;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHalfArc;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIParticle_SetParticleInjectionAngle) == 0x000004, "Wrong alignment on SpUIParticle_SetParticleInjectionAngle");
static_assert(sizeof(SpUIParticle_SetParticleInjectionAngle) == 0x000008, "Wrong size on SpUIParticle_SetParticleInjectionAngle");
static_assert(offsetof(SpUIParticle_SetParticleInjectionAngle, InAngle) == 0x000000, "Member 'SpUIParticle_SetParticleInjectionAngle::InAngle' has a wrong offset!");
static_assert(offsetof(SpUIParticle_SetParticleInjectionAngle, InHalfArc) == 0x000004, "Member 'SpUIParticle_SetParticleInjectionAngle::InHalfArc' has a wrong offset!");

// Function SpRuntime.SpUIParticle.SetParticlePosition
// 0x0010 (0x0010 - 0x0000)
struct SpUIParticle_SetParticlePosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIParticle_SetParticlePosition) == 0x000008, "Wrong alignment on SpUIParticle_SetParticlePosition");
static_assert(sizeof(SpUIParticle_SetParticlePosition) == 0x000010, "Wrong size on SpUIParticle_SetParticlePosition");
static_assert(offsetof(SpUIParticle_SetParticlePosition, InPosition) == 0x000000, "Member 'SpUIParticle_SetParticlePosition::InPosition' has a wrong offset!");

// Function SpRuntime.SpUIParticle.StopParticle
// 0x0001 (0x0001 - 0x0000)
struct SpUIParticle_StopParticle final
{
public:
	bool                                          bInForce;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIParticle_StopParticle) == 0x000001, "Wrong alignment on SpUIParticle_StopParticle");
static_assert(sizeof(SpUIParticle_StopParticle) == 0x000001, "Wrong size on SpUIParticle_StopParticle");
static_assert(offsetof(SpUIParticle_StopParticle, bInForce) == 0x000000, "Member 'SpUIParticle_StopParticle::bInForce' has a wrong offset!");

// Function SpRuntime.SpUIScrollBox.GetOrientationalContentSize
// 0x0010 (0x0010 - 0x0000)
struct SpUIScrollBox_GetOrientationalContentSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBox_GetOrientationalContentSize) == 0x000008, "Wrong alignment on SpUIScrollBox_GetOrientationalContentSize");
static_assert(sizeof(SpUIScrollBox_GetOrientationalContentSize) == 0x000010, "Wrong size on SpUIScrollBox_GetOrientationalContentSize");
static_assert(offsetof(SpUIScrollBox_GetOrientationalContentSize, ReturnValue) == 0x000000, "Member 'SpUIScrollBox_GetOrientationalContentSize::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpUIScrollBox.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct SpUIScrollBox_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBox_GetScrollOffset) == 0x000004, "Wrong alignment on SpUIScrollBox_GetScrollOffset");
static_assert(sizeof(SpUIScrollBox_GetScrollOffset) == 0x000004, "Wrong size on SpUIScrollBox_GetScrollOffset");
static_assert(offsetof(SpUIScrollBox_GetScrollOffset, ReturnValue) == 0x000000, "Member 'SpUIScrollBox_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpUIScrollBox.GetScrollOffsetRatio
// 0x0004 (0x0004 - 0x0000)
struct SpUIScrollBox_GetScrollOffsetRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBox_GetScrollOffsetRatio) == 0x000004, "Wrong alignment on SpUIScrollBox_GetScrollOffsetRatio");
static_assert(sizeof(SpUIScrollBox_GetScrollOffsetRatio) == 0x000004, "Wrong size on SpUIScrollBox_GetScrollOffsetRatio");
static_assert(offsetof(SpUIScrollBox_GetScrollOffsetRatio, ReturnValue) == 0x000000, "Member 'SpUIScrollBox_GetScrollOffsetRatio::ReturnValue' has a wrong offset!");

// Function SpRuntime.SpUIScrollBox.ScrollAmountValue
// 0x0001 (0x0001 - 0x0000)
struct SpUIScrollBox_ScrollAmountValue final
{
public:
	ESpUIScrollDirection                          InDirection;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBox_ScrollAmountValue) == 0x000001, "Wrong alignment on SpUIScrollBox_ScrollAmountValue");
static_assert(sizeof(SpUIScrollBox_ScrollAmountValue) == 0x000001, "Wrong size on SpUIScrollBox_ScrollAmountValue");
static_assert(offsetof(SpUIScrollBox_ScrollAmountValue, InDirection) == 0x000000, "Member 'SpUIScrollBox_ScrollAmountValue::InDirection' has a wrong offset!");

// Function SpRuntime.SpUIScrollBox.ScrollDirectValue
// 0x0008 (0x0008 - 0x0000)
struct SpUIScrollBox_ScrollDirectValue final
{
public:
	ESpUIScrollDirection                          InDirection;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InScrollValue;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBox_ScrollDirectValue) == 0x000004, "Wrong alignment on SpUIScrollBox_ScrollDirectValue");
static_assert(sizeof(SpUIScrollBox_ScrollDirectValue) == 0x000008, "Wrong size on SpUIScrollBox_ScrollDirectValue");
static_assert(offsetof(SpUIScrollBox_ScrollDirectValue, InDirection) == 0x000000, "Member 'SpUIScrollBox_ScrollDirectValue::InDirection' has a wrong offset!");
static_assert(offsetof(SpUIScrollBox_ScrollDirectValue, InScrollValue) == 0x000004, "Member 'SpUIScrollBox_ScrollDirectValue::InScrollValue' has a wrong offset!");

// Function SpRuntime.SpUIScrollBox.SetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct SpUIScrollBox_SetScrollOffset final
{
public:
	float                                         InNewOffset;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBox_SetScrollOffset) == 0x000004, "Wrong alignment on SpUIScrollBox_SetScrollOffset");
static_assert(sizeof(SpUIScrollBox_SetScrollOffset) == 0x000004, "Wrong size on SpUIScrollBox_SetScrollOffset");
static_assert(offsetof(SpUIScrollBox_SetScrollOffset, InNewOffset) == 0x000000, "Member 'SpUIScrollBox_SetScrollOffset::InNewOffset' has a wrong offset!");

// Function SpRuntime.SpUIScrollBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct SpUIScrollBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on SpUIScrollBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(SpUIScrollBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on SpUIScrollBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(SpUIScrollBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'SpUIScrollBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function SpRuntime.SpUIScrollBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct SpUIScrollBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBoxSlot_SetPadding) == 0x000004, "Wrong alignment on SpUIScrollBoxSlot_SetPadding");
static_assert(sizeof(SpUIScrollBoxSlot_SetPadding) == 0x000010, "Wrong size on SpUIScrollBoxSlot_SetPadding");
static_assert(offsetof(SpUIScrollBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'SpUIScrollBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function SpRuntime.SpUIScrollBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct SpUIScrollBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIScrollBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on SpUIScrollBoxSlot_SetVerticalAlignment");
static_assert(sizeof(SpUIScrollBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on SpUIScrollBoxSlot_SetVerticalAlignment");
static_assert(offsetof(SpUIScrollBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'SpUIScrollBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function SpRuntime.SpUITextParticle.SetParticleInjectionAngle
// 0x0008 (0x0008 - 0x0000)
struct SpUITextParticle_SetParticleInjectionAngle final
{
public:
	int32                                         InAngle;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHalfArc;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUITextParticle_SetParticleInjectionAngle) == 0x000004, "Wrong alignment on SpUITextParticle_SetParticleInjectionAngle");
static_assert(sizeof(SpUITextParticle_SetParticleInjectionAngle) == 0x000008, "Wrong size on SpUITextParticle_SetParticleInjectionAngle");
static_assert(offsetof(SpUITextParticle_SetParticleInjectionAngle, InAngle) == 0x000000, "Member 'SpUITextParticle_SetParticleInjectionAngle::InAngle' has a wrong offset!");
static_assert(offsetof(SpUITextParticle_SetParticleInjectionAngle, InHalfArc) == 0x000004, "Member 'SpUITextParticle_SetParticleInjectionAngle::InHalfArc' has a wrong offset!");

// Function SpRuntime.SpUITextParticle.SetParticlePosition
// 0x0010 (0x0010 - 0x0000)
struct SpUITextParticle_SetParticlePosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUITextParticle_SetParticlePosition) == 0x000008, "Wrong alignment on SpUITextParticle_SetParticlePosition");
static_assert(sizeof(SpUITextParticle_SetParticlePosition) == 0x000010, "Wrong size on SpUITextParticle_SetParticlePosition");
static_assert(offsetof(SpUITextParticle_SetParticlePosition, InPosition) == 0x000000, "Member 'SpUITextParticle_SetParticlePosition::InPosition' has a wrong offset!");

// Function SpRuntime.SpUITextParticle.SetParticleTextArray
// 0x0010 (0x0010 - 0x0000)
struct SpUITextParticle_SetParticleTextArray final
{
public:
	TArray<class FText>                           InTextArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUITextParticle_SetParticleTextArray) == 0x000008, "Wrong alignment on SpUITextParticle_SetParticleTextArray");
static_assert(sizeof(SpUITextParticle_SetParticleTextArray) == 0x000010, "Wrong size on SpUITextParticle_SetParticleTextArray");
static_assert(offsetof(SpUITextParticle_SetParticleTextArray, InTextArray) == 0x000000, "Member 'SpUITextParticle_SetParticleTextArray::InTextArray' has a wrong offset!");

// Function SpRuntime.SpUITextParticle.StopParticle
// 0x0001 (0x0001 - 0x0000)
struct SpUITextParticle_StopParticle final
{
public:
	bool                                          bInForce;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUITextParticle_StopParticle) == 0x000001, "Wrong alignment on SpUITextParticle_StopParticle");
static_assert(sizeof(SpUITextParticle_StopParticle) == 0x000001, "Wrong size on SpUITextParticle_StopParticle");
static_assert(offsetof(SpUITextParticle_StopParticle, bInForce) == 0x000000, "Member 'SpUITextParticle_StopParticle::bInForce' has a wrong offset!");

// Function SpRuntime.SpUIWindow.SetWindowPosition
// 0x0010 (0x0010 - 0x0000)
struct SpUIWindow_SetWindowPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpUIWindow_SetWindowPosition) == 0x000008, "Wrong alignment on SpUIWindow_SetWindowPosition");
static_assert(sizeof(SpUIWindow_SetWindowPosition) == 0x000010, "Wrong size on SpUIWindow_SetWindowPosition");
static_assert(offsetof(SpUIWindow_SetWindowPosition, InPosition) == 0x000000, "Member 'SpUIWindow_SetWindowPosition::InPosition' has a wrong offset!");

}

