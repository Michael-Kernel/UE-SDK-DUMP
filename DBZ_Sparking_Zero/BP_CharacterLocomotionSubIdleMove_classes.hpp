#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubIdleMove

#include "Basic.hpp"

#include "FLocomotionAxisRotationParameter_structs.hpp"
#include "SS_structs.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ECharacterStrutJumpState_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubIdleMove.BP_CharacterLocomotionSubIdleMove_C
// 0x0090 (0x00F0 - 0x0060)
class UBP_CharacterLocomotionSubIdleMove_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	struct FFLocomotionAxisRotationParameter      RotationParameterXRoll;                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      RotationParameterYPitch;                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InRotationParameterZYaw;                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetLocomotionRotation;                          // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        StateTimer;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveZ;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterStrutJumpState                      StrutJumpState;                                    // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StrutJumpTimer;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            StrutJumpSpeedFloat;                               // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GNullVector;                                       // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipStateTimerCheck;                               // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetFreeCameraLookAtRotation(struct FRotator* Rotation);
	void IsCantFlyKidanOnCharacter(bool* bEnable);
	void ResetTimer();
	void SetSkipStateTimerCheck();
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateGiantCharaIdleMove();
	void UpdateRotationIdleMove(double InDeltaSeconds, bool* OutIsTurnEnd);
	void UpdateTimer(double InDeltaSeconds, double* OutSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubIdleMove_C">();
	}
	static class UBP_CharacterLocomotionSubIdleMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubIdleMove_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubIdleMove_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubIdleMove_C");
static_assert(sizeof(UBP_CharacterLocomotionSubIdleMove_C) == 0x0000F0, "Wrong size on UBP_CharacterLocomotionSubIdleMove_C");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, RotationParameterXRoll) == 0x000060, "Member 'UBP_CharacterLocomotionSubIdleMove_C::RotationParameterXRoll' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, RotationParameterYPitch) == 0x000070, "Member 'UBP_CharacterLocomotionSubIdleMove_C::RotationParameterYPitch' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, InRotationParameterZYaw) == 0x000080, "Member 'UBP_CharacterLocomotionSubIdleMove_C::InRotationParameterZYaw' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, TargetLocomotionRotation) == 0x000090, "Member 'UBP_CharacterLocomotionSubIdleMove_C::TargetLocomotionRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, StateTimer) == 0x0000A8, "Member 'UBP_CharacterLocomotionSubIdleMove_C::StateTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, MoveZ) == 0x0000B0, "Member 'UBP_CharacterLocomotionSubIdleMove_C::MoveZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, StrutJumpState) == 0x0000B8, "Member 'UBP_CharacterLocomotionSubIdleMove_C::StrutJumpState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, StrutJumpTimer) == 0x0000C0, "Member 'UBP_CharacterLocomotionSubIdleMove_C::StrutJumpTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, StrutJumpSpeedFloat) == 0x0000C8, "Member 'UBP_CharacterLocomotionSubIdleMove_C::StrutJumpSpeedFloat' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, GNullVector) == 0x0000D0, "Member 'UBP_CharacterLocomotionSubIdleMove_C::GNullVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubIdleMove_C, SkipStateTimerCheck) == 0x0000E8, "Member 'UBP_CharacterLocomotionSubIdleMove_C::SkipStateTimerCheck' has a wrong offset!");

}

