#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratUDS

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KoratUDS_structs.hpp"


namespace SDK::Params
{

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.AbsentDirectionalLightsBrightness
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_AbsentDirectionalLightsBrightness::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.AdjustColorForNightBrightness
// 0x0020 (0x0020 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness) == 0x000020, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness, InColor) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness::InColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness, ReturnValue) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_AdjustColorForNightBrightness::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.AdjustedExposureRange
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange final
{
public:
	double                                        OutMin;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutMax;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange, OutMin) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange::OutMin' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange, OutMax) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_AdjustedExposureRange::OutMax' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.AllVolumetricCloudMIDs
// 0x0018 (0x0018 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs final
{
public:
	bool                                          Shadows;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs) == 0x000018, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs, Shadows) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs::Shadows' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs, ReturnValue) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_AllVolumetricCloudMIDs::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.ApplyConsoleVariableWithCheck
// 0x0020 (0x0020 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck final
{
public:
	class FString                                 Cvar;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Setting;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck) == 0x000020, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck, Cvar) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck::Cvar' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck, Setting) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck::Setting' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck, Type) == 0x000018, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApplyConsoleVariableWithCheck::Type' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.ApplyVolumetricMode
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode final
{
public:
	EKoratUDS_UDS_VolRT_Mode                      Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode, Mode) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApplyVolumetricMode::Mode' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.ApproximateRealSunMoonAndStars
// 0x0090 (0x0090 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars final
{
public:
	int32                                         Month_;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day_;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year_;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeOfDay_;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TimeZone_;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyCalculateSun;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutSunVector;                                      // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutMoonVector;                                     // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutRealPhase;                                      // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPhaseAlignment;                                 // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutCelestialOrbit;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutCelestialYaw;                                   // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars) == 0x000090, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, Month_) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::Month_' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, Day_) == 0x000004, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::Day_' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, Year_) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::Year_' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, TimeOfDay_) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::TimeOfDay_' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, TimeZone_) == 0x000018, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::TimeZone_' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OnlyCalculateSun) == 0x000020, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OnlyCalculateSun' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OutSunVector) == 0x000028, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OutSunVector' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OutMoonVector) == 0x000040, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OutMoonVector' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OutRealPhase) == 0x000058, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OutRealPhase' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OutPhaseAlignment) == 0x000060, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OutPhaseAlignment' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OutCelestialOrbit) == 0x000078, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OutCelestialOrbit' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars, OutCelestialYaw) == 0x000080, "Member 'KoratUDS_Ultra_Dynamic_Sky_ApproximateRealSunMoonAndStars::OutCelestialYaw' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CalculateNightBrightness
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CalculateNightBrightness::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CancelShadowsValue
// 0x0020 (0x0020 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue final
{
public:
	struct FVector                                LightVector;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue) == 0x000020, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue, LightVector) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue::LightVector' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue, ReturnValue) == 0x000018, "Member 'KoratUDS_Ultra_Dynamic_Sky_CancelShadowsValue::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudCoverageHasChanged
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudCoverageHasChanged::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudDarkening
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudDarkening final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudDarkening) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudDarkening");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudDarkening) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudDarkening");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudDarkening, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudDarkening::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudShadowsCloudDensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudShadowsCloudDensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudShadowsLightVectorProcess
// 0x0028 (0x0028 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess) == 0x000028, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess, Vector) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess::Vector' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess, ReturnValue) == 0x000018, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudShadowsLightVectorProcess::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudShadowsParentMaterial
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudShadowsParentMaterial::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudsTimeOfDayFactor
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudsTimeOfDayFactor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CloudTextureVelocity
// 0x0018 (0x0018 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity) == 0x000018, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CloudTextureVelocity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.ConstructionScriptFunction
// 0x0002 (0x0002 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction final
{
public:
	bool                                          RunByCounterpart;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveStaticLights;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction) == 0x000002, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction, RunByCounterpart) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction::RunByCounterpart' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction, MoveStaticLights) == 0x000001, "Member 'KoratUDS_Ultra_Dynamic_Sky_ConstructionScriptFunction::MoveStaticLights' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.ConvertTimeOfDayToTimeCode
// 0x0020 (0x0020 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode) == 0x000020, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode, Time) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode::Time' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode, ReturnValue) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_ConvertTimeOfDayToTimeCode::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.Current2DCloudTint
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_Current2DCloudTint::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentAppliedCloudTopAndBottom
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom final
{
public:
	double                                        OutBottom;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutTop;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom, OutBottom) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom::OutBottom' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom, OutTop) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentAppliedCloudTopAndBottom::OutTop' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentBaseCloudsScale
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentBaseCloudsScale::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentFogDensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentFogDensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentFogDirectionalInscatteringColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentFogDirectionalInscatteringColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentFogInscatteringColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentFogInscatteringColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentLensFlareColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentLensFlareColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentLerpToSimplifiedClouds
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentLerpToSimplifiedClouds::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentLightPollution
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentLightPollution::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentLitIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentLitIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMaxTraceDistance
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMaxTraceDistance::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMieAnisotropy
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMieAnisotropy::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMieScatteringScale
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMieScatteringScale::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonLightColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonLightMaterialColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLightMaterialColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonLitPercent
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonLitPercent::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonMaterialIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonMaterialIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonPhaseAngle
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonPhaseAngle::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonScaleAndCutoutValue
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue final
{
public:
	double                                        OutScale;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutCutout;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue, OutScale) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue::OutScale' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue, OutCutout) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonScaleAndCutoutValue::OutCutout' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentMoonSourceAngle
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentMoonSourceAngle::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentNightSkyGlow
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentNightSkyGlow::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentOverallIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentOverallIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentOvercastSwirl
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentOvercastSwirl::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentRayleighScatteringColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentRayleighScatteringColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSaturation
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSaturation::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSkyAmbientColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSkyAmbientColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSkyLightLowerHemisphereColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSkyLightLowerHemisphereColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentStarsColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentStarsColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunDiskColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunDiskIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunDiskIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunLightColor
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunLightIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunLightIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunRadius
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunRadius::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunriseEventTime
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunriseEventTime::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunsetEventTime
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunsetEventTime::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentSunSourceAngle
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentSunSourceAngle::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentVolumetricCloudAlbedo
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudAlbedo::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentVolumetricCloudMacroVariation
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMacroVariation::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentVolumetricCloudMultiscatteringOcclusion
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudMultiscatteringOcclusion::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentVolumetricCloudsDensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudsDensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentVolumetricCloudSubnoiseAmount
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudSubnoiseAmount::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentVolumetricCloudTaperPosition
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentVolumetricCloudTaperPosition::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentWispsOpacity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentWispsOpacity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.CurrentZDisturbance
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_CurrentZDisturbance::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.DimmingDirectionalLights
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_DimmingDirectionalLights::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.DirectionalInscatteringMultiplier
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_DirectionalInscatteringMultiplier::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.DirectionalLightDimming
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_DirectionalLightDimming::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.FindOverallIntensity
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity final
{
public:
	double                                        Darkening;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity, Darkening) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity::Darkening' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity, ReturnValue) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_FindOverallIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.FlatCloudinessAlpha
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_FlatCloudinessAlpha::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.FogHeightFalloff
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_FogHeightFalloff::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.FogStartDistance
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_FogStartDistance final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_FogStartDistance) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_FogStartDistance");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_FogStartDistance) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_FogStartDistance");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_FogStartDistance, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_FogStartDistance::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetCurrentCloudShadowsIntensityAndSoftness
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness final
{
public:
	double                                        OutIntensity;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutSoftness;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness, OutIntensity) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness::OutIntensity' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness, OutSoftness) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentCloudShadowsIntensityAndSoftness::OutSoftness' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetCurrentDateAndTime
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentDateAndTime::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetCurrentFogBaseColors
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors final
{
public:
	struct FLinearColor                           OutAmbientFogColor;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutDirectionalBaseColor;                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutScaledDirectionalBaseColor;                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors, OutAmbientFogColor) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors::OutAmbientFogColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors, OutDirectionalBaseColor) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors::OutDirectionalBaseColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors, OutScaledDirectionalBaseColor) == 0x000020, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentFogBaseColors::OutScaledDirectionalBaseColor' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetCurrentSkyLightColorAndIntensity
// 0x0018 (0x0018 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity final
{
public:
	double                                        OutIntensity;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutColor;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity) == 0x000018, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity, OutIntensity) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity::OutIntensity' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity, OutColor) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentSkyLightColorAndIntensity::OutColor' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetCurrentVolumetricCloudExtinctionScales
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales final
{
public:
	double                                        OutTop;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutBottom;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales, OutTop) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales::OutTop' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales, OutBottom) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetCurrentVolumetricCloudExtinctionScales::OutBottom' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetSkyMIDParentMaterialInstance
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetSkyMIDParentMaterialInstance::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetTimeOfDayInRealTimeFormat
// 0x0014 (0x0014 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat final
{
public:
	struct FTimecode                              ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat) == 0x000014, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetTimeOfDayInRealTimeFormat::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.GetVolumetricCloudEmissiveColors
// 0x0020 (0x0020 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors final
{
public:
	struct FLinearColor                           OutBottom;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutTop;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors) == 0x000020, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors, OutBottom) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors::OutBottom' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors, OutTop) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_GetVolumetricCloudEmissiveColors::OutTop' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.H_M_S_MSToTimeOfDay
// 0x0018 (0x0018 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay final
{
public:
	int32                                         Hours;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miliseconds;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay) == 0x000018, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay, Hours) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay::Hours' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay, Minutes) == 0x000004, "Member 'KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay::Minutes' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay, Seconds) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay::Seconds' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay, Miliseconds) == 0x00000C, "Member 'KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay::Miliseconds' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay, ReturnValue) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_H_M_S_MSToTimeOfDay::ReturnValue' has a wrong offset!");

// DelegateFunction KoratUDS.KoratUDS_Ultra_Dynamic_Sky.HourlyMulticastDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature) == 0x000004, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature, Hour) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_HourlyMulticastDelegate__DelegateSignature::Hour' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.IsLocationInsideCloudLayer
// 0x0020 (0x0020 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer) == 0x000020, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer, Location) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer::Location' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer, ReturnValue) == 0x000018, "Member 'KoratUDS_Ultra_Dynamic_Sky_IsLocationInsideCloudLayer::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.IsMoonLightCastingShadows
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_IsMoonLightCastingShadows::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.IsSunLightCastingShadows
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_IsSunLightCastingShadows::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.LensFlareParentMaterial
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_LensFlareParentMaterial::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.MoonLightCurrentIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_MoonLightCurrentIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.MoonLightSpecularScale
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_MoonLightSpecularScale::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.MoonLightVolumetricScatteringIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_MoonLightVolumetricScatteringIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.MoonPhaseMultiplier
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_MoonPhaseMultiplier::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.NightFilter
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_NightFilter final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_NightFilter) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_NightFilter");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_NightFilter) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_NightFilter");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_NightFilter, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_NightFilter::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.OvercastLightContribution
// 0x0014 (0x0014 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution final
{
public:
	bool                                          ForVolumetricClouds;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution) == 0x000014, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution, ForVolumetricClouds) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution::ForVolumetricClouds' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution, ReturnValue) == 0x000004, "Member 'KoratUDS_Ultra_Dynamic_Sky_OvercastLightContribution::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.ScaleSampleCount
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount final
{
public:
	double                                        In;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount, In) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount::In' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount, ReturnValue) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_ScaleSampleCount::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.SetDateAndTime
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime, DateTime) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_SetDateAndTime::DateTime' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.SetTimeOfDayUsingTimeCode
// 0x0014 (0x0014 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode final
{
public:
	struct FTimecode                              Timecode;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode) == 0x000014, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode, Timecode) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_SetTimeOfDayUsingTimeCode::Timecode' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.SimplifiedCurrentColor
// 0x0040 (0x0040 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor final
{
public:
	struct FLinearColor                           DayColor;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Dawn_DuskColor;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightColor;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor) == 0x000040, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor, DayColor) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor::DayColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor, Dawn_DuskColor) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor::Dawn_DuskColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor, NightColor) == 0x000020, "Member 'KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor::NightColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor, ReturnValue) == 0x000030, "Member 'KoratUDS_Ultra_Dynamic_Sky_SimplifiedCurrentColor::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.SkyAtmosphereFogContribution
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_SkyAtmosphereFogContribution::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.SkyMIDCloudDensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_SkyMIDCloudDensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.StaticCloudsParentMaterial
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_StaticCloudsParentMaterial::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.SunForwardVector
// 0x0018 (0x0018 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_SunForwardVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_SunForwardVector) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_SunForwardVector");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_SunForwardVector) == 0x000018, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_SunForwardVector");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_SunForwardVector, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_SunForwardVector::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TickSetGate
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TickSetGate final
{
public:
	int32                                         Set;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TickSetGate) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TickSetGate");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TickSetGate) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TickSetGate");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TickSetGate, Set) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TickSetGate::Set' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TickSetGate, ReturnValue) == 0x000004, "Member 'KoratUDS_Ultra_Dynamic_Sky_TickSetGate::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TimeOfDayOffset
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TimeOfDayOffset::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TintColorByWeather
// 0x0040 (0x0040 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather final
{
public:
	struct FLinearColor                           ClearColor;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PartlyCloudyColor;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OvercastColor;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather) == 0x000004, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather) == 0x000040, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather, ClearColor) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather::ClearColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather, PartlyCloudyColor) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather::PartlyCloudyColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather, OvercastColor) == 0x000020, "Member 'KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather::OvercastColor' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather, ReturnValue) == 0x000030, "Member 'KoratUDS_Ultra_Dynamic_Sky_TintColorByWeather::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TotalTimeElapsed
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TotalTimeElapsed::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TransitionSkyLightIntensity
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity final
{
public:
	double                                        NewSkyLightIntensityMultiplier;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TransitionTime;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity, NewSkyLightIntensityMultiplier) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity::NewSkyLightIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity, TransitionTime) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionSkyLightIntensity::TransitionTime' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TransitionTimeOfDay
// 0x0028 (0x0028 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay final
{
public:
	double                                        NewTimeOfDay;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TransitionDuration_Seconds;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunction;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EasingExponent;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowTimeGoingBackwards;                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay) == 0x000028, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay, NewTimeOfDay) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay::NewTimeOfDay' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay, TransitionDuration_Seconds) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay::TransitionDuration_Seconds' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay, EasingFunction) == 0x000010, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay::EasingFunction' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay, EasingExponent) == 0x000018, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay::EasingExponent' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay, AllowTimeGoingBackwards) == 0x000020, "Member 'KoratUDS_Ultra_Dynamic_Sky_TransitionTimeOfDay::AllowTimeGoingBackwards' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.TwilightBrightnessFalloff
// 0x0010 (0x0010 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff final
{
public:
	double                                        Z;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff) == 0x000010, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff, Z) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff::Z' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff, ReturnValue) == 0x000008, "Member 'KoratUDS_Ultra_Dynamic_Sky_TwilightBrightnessFalloff::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.UpdateDirectionalLights
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights final
{
public:
	bool                                          MoveStaticLights;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights, MoveStaticLights) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_UpdateDirectionalLights::MoveStaticLights' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.UseSkyAtmosphere
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_UseSkyAtmosphere::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.Using2DClouds
// 0x0001 (0x0001 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_Using2DClouds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_Using2DClouds) == 0x000001, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_Using2DClouds");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_Using2DClouds) == 0x000001, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_Using2DClouds");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_Using2DClouds, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_Using2DClouds::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricAuroraIntensity
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricAuroraIntensity::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudBaseCloudHeight
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudBaseCloudHeight::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudCloudTopAltitude
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudCloudTopAltitude::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudLayerHeight
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerHeight::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudLayerScale
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudLayerScale::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudsBaseCloudsTexture
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsBaseCloudsTexture::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudShadowsAltitude
// 0x0008 (0x0008 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude) == 0x000008, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudShadowsAltitude::ReturnValue' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.VolumetricCloudsParentMaterials
// 0x0060 (0x0060 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      OutSimplified;                                     // 0x0000(0x0030)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OutComplex;                                        // 0x0030(0x0030)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials) == 0x000060, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials, OutSimplified) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials::OutSimplified' has a wrong offset!");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials, OutComplex) == 0x000030, "Member 'KoratUDS_Ultra_Dynamic_Sky_VolumetricCloudsParentMaterials::OutComplex' has a wrong offset!");

// Function KoratUDS.KoratUDS_Ultra_Dynamic_Sky.X2DCloudsBaseTexture
// 0x0030 (0x0030 - 0x0000)
struct KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture) == 0x000008, "Wrong alignment on KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture");
static_assert(sizeof(KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture) == 0x000030, "Wrong size on KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture");
static_assert(offsetof(KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture, ReturnValue) == 0x000000, "Member 'KoratUDS_Ultra_Dynamic_Sky_X2DCloudsBaseTexture::ReturnValue' has a wrong offset!");

}

