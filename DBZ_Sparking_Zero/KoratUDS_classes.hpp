#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratUDS

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KoratUDS_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KoratUDS.KoratUDS_Ultra_Dynamic_Sky
// 0x14C0 (0x1750 - 0x0290)
class AKoratUDS_Ultra_Dynamic_Sky : public AActor
{
public:
	class UCurveFloat*                            NightFilterCurve;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RefreshSettings;                                   // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeOfDay;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_SkyMode                         SkyMode;                                           // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_ColorMode                       ColorMode;                                         // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CloudCoverage;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Fog;                                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OverallIntensity;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Contrast;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Saturation;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DirectionalBalance;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DawnTime;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DuskTime;                                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NightBrightness;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpreadOutTickBehaviorsOver3Frames;                 // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyFullyUpdateActiveParametersWhenCloudCoverageChanges; // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirectionalLightsAbsentBrightness;                 // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastNightBrightness;                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSkyModeScalabilityMap;                          // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EKoratUDS_UDS_SkyMode>            SkyModeScalabilityMap;                             // 0x0318(0x0050)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          DimDirectionalLightsWithCloudCoverage;             // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DimmingRangeLowerBound;                            // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DimmingRangeUpperBound;                            // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DimmingRangeExponent;                              // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CustomSkySphereMaterial;                           // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimateTimeOfDay;                                  // 0x0390(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DayLength;                                         // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NightLength;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LightsUpdatePeriod;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunriseEventOffset;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunsetEventOffset;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TimeSpeed;                                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InternalTimeOfDay;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalDaysElapsed;                                  // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentTimeOfDayOffset;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        LastFrameTimeOfDay;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EventHour;                                         // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Move_Static_Stationary_Lights;                     // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EKoratUDS_UDS_VolRT_Mode                      VolumetricCloudRenderingMode;                      // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EE[0x2];                                      // 0x03EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BottomAltitude;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LayerHeightScale;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseCloudsScale;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SubNoiseScale;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HighFrequencyNoiseAmount;                          // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistortHighFrequencyNoise;                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtinctionScaleTop;                                // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtinctionScaleBottom;                             // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShiftCurve;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ZDisturbance;                                      // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinimumErosion;                                    // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ViewSampleCountScale;                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceToSampleMaxCount;                          // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShadowSampleScale;                                 // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShadowTracingDistance;                             // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReflectionSampleCountScale;                        // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReflectionShadowSampleCountScale;                  // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_NoiseType                       VolumetricCloudNoiseType;                          // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             VolumetricCustomNoiseTexture;                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseCloudsMipLevel;                                // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MultiscatteringIntensity;                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MultiscatteringOcclusionFactor;                    // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SubNoiseErosion;                                   // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MacroVariation;                                    // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MacroScale;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PhaseG;                                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PhaseG2;                                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MultiscatteringEccentricity;                       // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VolumetricCloudsScale;                             // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricCloudColor;                              // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TracingMaxStartDistance;                           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TracingMaxDistance_InsideCloudLayer;               // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TracingMaxDistance_OutsideCloudLayer;              // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFogInsideClouds;                             // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InsideCloudFogStrength;                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InsideCloudFogColor;                               // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastTurbulence;                                // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloseFadeDistance;                                 // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TwoLayers;                                         // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Layer2CoverageScale;                               // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Layer2ExtinctionScale;                             // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Layer2CloudScale;                                  // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Layer2MipOffset;                                   // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceBetweenLayers;                             // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HighFrequencyMipIncreaseByDistance;                // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeToSimplifiedMaterialWhenOvercast;            // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SimplifiedMaterialCloudCoverageThreshold;          // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SimplifiedMaterialFadeLength;                      // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TopBottomDistribution;                             // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentVolumetricCloudsMID;                        // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloudsPosition;                                    // 0x0598(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        StandardBaseCloudsSize;                            // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        BaseCloudHeight;                                   // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        LowMaterialQualitySampleCountScale;                // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MediumMaterialQualitySampleCountScale;             // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVolumeTexture>          EpicQualityVolumeTexture;                          // 0x05D0(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UVolumeTexture>          HighQualityVolumeTexture;                          // 0x0600(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UVolumeTexture>          LowQualityVolumeTexture;                           // 0x0630(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        EpicMaterialQualitySampleCountScale;               // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      InsideCloudFogParentMaterial;                      // 0x0668(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UNiagaraSystem>          InsideCloudFogSystem;                              // 0x0698(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      PostProcessCloudFogParentMaterial;                 // 0x06C8(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      OvercastTurbulenceParentMaterial;                  // 0x06F8(0x0030)(Edit, BlueprintVisible, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        SoftenCloudLayer1;                                 // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SoftenCloudLayer2;                                 // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SharpenOuterEdge;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTilingLayer1;                                 // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTilingLayer2;                                 // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SoftenHorizon;                                     // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OneCloudLayer;                                     // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CloudHeightLayer1;                                 // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudHeightLayer2;                                 // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastSwirlingTexture;                           // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_NoiseType                       CloudNoiseType;                                    // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CustomNoiseTexture;                                // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunShaderIntensity;                                // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DirectionalLightingIntensity;                      // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunHighlightRadius;                                // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudOpacity;                                      // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HorizonDensityMultiplier;                          // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ZenithDensityMultiplier;                           // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LatitudeGradientPosition;                          // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LatitudeGradientWidth;                             // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundSunDensityMultiplier;                        // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundSunDensityExponent;                          // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundMoonDensityMultiplier;                       // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundMoonDensityExponent;                         // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShineIntensityCurve;                               // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunHighlightIntensityCurve;                        // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunHighlightRadiusCurve;                           // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShineVariation;                                    // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloudSpeed;                                        // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudDirection;                                    // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudPhase;                                        // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomizeCloudFormationOnRun;                      // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CloudsMoveWithTimeOfDay;                           // 0x0821(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_822[0x6];                                      // 0x0822(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeOfDayMovementMultiplier;                       // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LastCloudsTimeOfDayFactor;                         // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                StartingCloudTextureVelocity;                      // 0x0838(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCloudShadows;                                   // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CloudShadowsIntensityWhenSunny;                    // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudShadowsIntensityWhenOvercast;                 // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudShadowsSoftnessWhenSunny;                     // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudShadowsSoftnessWhenOvercast;                  // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogShadows;                                        // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DustShadows;                                       // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        X2DCloudShadowsSpeed;                              // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        X2DCloudShadowsScale;                              // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CustomLightFunctionMaterial;                       // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLightFunctionsOn;                             // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A1[0x7];                                      // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CloudWispsOpacity;                                 // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudWispsTexture;                                 // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudWispsColorIntensity;                          // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManuallyPositionSunTarget;                         // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C1[0x7];                                      // 0x08C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunLightIntensity;                                 // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SunMobility;                                       // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D1[0x7];                                      // 0x08D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunAngle;                                          // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunInclination;                                    // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunVerticalOffset;                                 // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SunCastsShadows;                                   // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F1[0x3];                                      // 0x08F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunLightColor;                                     // 0x08F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_904[0x4];                                      // 0x0904(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunRadius;                                         // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunSoftness;                                       // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunVolumetricScatteringIntensity;                  // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtendDawnAndDusk;                                 // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunDiskIntensity;                                  // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      SunDiskColorCurve;                                 // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ScaleSunRadiusAsItNearsHorizon;                    // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunSpecularScale;                                  // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunYaw;                                            // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        SunZVector;                                        // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        MaxSunSourceAngleScale;                            // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunSourceAngleSoftness;                            // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManuallyPositionMoonTarget;                        // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_969[0x7];                                      // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoonLightIntensity;                                // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            MoonMobility;                                      // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_979[0x7];                                      // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoonAngle;                                         // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonInclination;                                   // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonVerticalOffset;                                // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonOrbitOffset;                                   // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoonCastsShadows;                                  // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoonScale;                                         // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonPhase;                                         // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoonPhaseChangesOverTime;                          // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B9[0x7];                                      // 0x09B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DarkSideBrightness;                                // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonTextureIntensity_Night;                        // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonTextureIntensity_Day;                          // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonLightColor;                                    // 0x09D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonMaterialColor;                                 // 0x09E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NewMoonLightBrightness;                            // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonTextureRotation;                               // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CustomMoonTexture;                                 // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonGlowIntensity;                                 // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonVolumetricScatteringIntensity;                 // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ScaleMoonRadiusAsItNearsHorizon;                   // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonSpecularScale;                                 // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonLightCurrentIntensityValue;                    // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              MoonMasksTexture;                                  // 0x0A38(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        MaxMoonSourceAngleScale;                           // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonSourceAngleSoftness;                           // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_SkyLightMode                    SkyLightMode;                                      // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A79[0x7];                                      // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SkyLightIntensity;                                 // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyLight_Mobility;                                 // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A89[0x7];                                      // 0x0A89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SkyLightTemperature;                               // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColorMultiplier_Day;                       // 0x0A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColorMultiplier_Dawn_Dusk;                 // 0x0AA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColorMultiplier_Night;                     // 0x0AB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkyLightCastsShadows;                              // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC9[0x7];                                      // 0x0AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DFAOMinOcclusion;                                  // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DFAOExponent;                                      // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DynamicSkyLightTransitionTime;                     // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        TargetSkyLightMultiplier;                          // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        DynamicSkyLightMultiplier;                         // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RealTimeCapture;                                   // 0x0AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF9[0x3];                                      // 0x0AF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CapturedSkyLightLowerHemisphereTint;               // 0x0AFC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecaptureSkyLightPeriodically;                     // 0x0B0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SkyLightRecapturePeriod_Seconds;                   // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FactorAbsentDirectionalLightsBrightness;           // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RealTimeCaptureUsesTimeSlicing;                    // 0x0B19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1A[0x6];                                      // 0x0B1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTextureCube>            CustomCubemap;                                     // 0x0B20(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTextureCube>            FlatCubemap;                                       // 0x0B50(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TintedSkyLightLowerHemisphereColor;                // 0x0B80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogColorIntensityScale;                            // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      FogScatteringColorCurve;                           // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringSun;                                // 0x0BA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringMoon;                               // 0x0BB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      FogDirectionalScatteringColorCurve;                // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogDirectionalInscattering;                        // 0x0BC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FoggyDesaturation;                                 // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastDesaturation;                              // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastBrightnessDay;                             // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastBrightnessNight;                           // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AllFogColorsMultiplier;                            // 0x0BF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SkyAtmosphereFogInfluenceCurve;                    // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVolumetricFog;                                  // 0x0C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C11[0x3];                                      // 0x0C11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           AmbientFogColor;                                   // 0x0C14(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DirectionalInscatteringFogColor;                   // 0x0C24(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DirectionalBaseFogColor;                           // 0x0C34(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ScaledDirectionalBaseFogColor;                     // 0x0C44(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C54[0x4];                                      // 0x0C54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BaseFogDensity;                                    // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FoggyDensityContribution;                          // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudyDensityContribution;                         // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DustDensityContribution;                           // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ScaleTotalFogDensity;                              // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogStartDistanceWhenClear;                         // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogDensityWhereStartDistanceReachesZero;           // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseHeightFogFalloff;                              // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudyHeightFogFalloff;                            // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FoggyHeightFogFalloff;                             // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DustyHeightFogFalloff;                             // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogSnowContribution;                               // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        HeightFogDensity;                                  // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        DustAmount;                                        // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DustColor;                                         // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ControlSkyAtmosphereSettings;                      // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD9[0x3];                                      // 0x0CD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           RayleighScatteringColor;                           // 0x0CDC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CEC[0x4];                                      // 0x0CEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DesaturateRayleighScatteringWhenCloudy;            // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BrightenRayleighScatteringWhenCloudy;              // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Sunset_SunriseColor_Absorption;                    // 0x0D00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Sunset_SunriseColorIntensity_AbsorptionScale;      // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepPlanetTopAtCameraXYLocation;                   // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D19[0x3];                                      // 0x0D19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BaseSkyColor_Day;                                  // 0x0D1C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseSkyColor_Dawn_Dusk;                            // 0x0D2C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseSkyColor_Night;                                // 0x0D3C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor_Day;                               // 0x0D4C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor_Dawn_Dusk;                         // 0x0D5C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor_Night;                             // 0x0D6C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor_Day;                                // 0x0D7C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor_Dawn_Dusk;                          // 0x0D8C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor_Night;                              // 0x0D9C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunGlowColor;                                      // 0x0DAC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBC[0x4];                                      // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DirectionalIntensityCurve;                         // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      DirectionalLightScatteringCurve;                   // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AtmosphericScatteringLUTTexture;                   // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSunLightShaftBloom;                          // 0x0DD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD9[0x7];                                      // 0x0DD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunLightShaftMaxBrightness;                        // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunLightShaftBloomThresholdCurve;                  // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunLightShaftBloomScaleCurve;                      // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunLightShaftTintColor;                            // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMoonLightShaftBloom;                         // 0x0E08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E09[0x7];                                      // 0x0E09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoonLightShaftMaxBrightness;                       // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonLightShaftBloomThreshold;                      // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonLightShaftBloomScale;                          // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonLightShaftTintColor;                           // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSunLensFlare;                                // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_LensFlareType                   LensFlareType;                                     // 0x0E39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3A[0x6];                                      // 0x0E3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LensFlareStrength;                                 // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LensFlareTint;                                     // 0x0E48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               LensFlareMID;                                      // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CustomLensFlareParentInstance;                     // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ScaleFlareElements;                                // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StarsIntensity;                                    // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarsColor;                                        // 0x0E78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StarsSpeed;                                        // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StarsTiling;                                       // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StarsDaytimeIntensity;                             // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TilingStarsTexture;                                // 0x0EA0(0x0030)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              RealStarsTexture;                                  // 0x0ED0(0x0030)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        StarsPhase;                                        // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CustomTilingStarsTexture;                          // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CustomRealStarsTexture;                            // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StarsIntensityCurve;                               // 0x0F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NightSkyGlow;                                      // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightSkyGlowColor;                                 // 0x0F28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LightPollutionIntensity;                           // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightPollutionColor;                               // 0x0F40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAuroras;                                        // 0x0F50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F51[0x7];                                      // 0x0F51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AuroraIntensity;                                   // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AuroraSpeed;                                       // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AuroraPhase;                                       // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AuroraColor1;                                      // 0x0F70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AuroraColor2;                                      // 0x0F80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AuroraColor3;                                      // 0x0F90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AuroraLines;                                       // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AuroraIntensityCurve;                              // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VolumetricAuroraSampleCountScale;                  // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VolumetricAuroraLayerHeight;                       // 0x0FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VolumetricAuroraBottomAltitude;                    // 0x0FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      VolumetricAuroraParentMaterial;                    // 0x0FC8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EKoratUDS_UDS_FeatureToggle                   SunLight;                                          // 0x0FF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF9[0x7];                                      // 0x0FF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      CustomSunLightActor;                               // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_FeatureToggle                   MoonLight;                                         // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1009[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      CustomMoonLightActor;                              // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_FeatureToggle                   SkyLight;                                          // 0x1018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1019[0x7];                                     // 0x1019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              CustomSkyLightActor;                               // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_FeatureToggle                   HeightFogFT;                                       // 0x1028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1029[0x7];                                     // 0x1029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  CustomHeightFogActor;                              // 0x1030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Weather_BP;                                        // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LastFrameCloudCoverage;                            // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloudCoverageChangeThisFrame;                      // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        TransitionTimeA;                                   // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        TransitionTimeB;                                   // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          TransitioningTime;                                 // 0x1060(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingFunc                                   TransitionEasingFunction;                          // 0x1061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1062[0x6];                                     // 0x1062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionEasingExponent;                          // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           TransitionTimer;                                   // 0x1070(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        TransitionDuration;                                // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TransitionDaysCounted;                             // 0x1080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          TransitionCanGoBackwards;                          // 0x1084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1085[0x3];                                     // 0x1085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Sky_MID;                                           // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               SunCloudShadowsMID;                                // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MoonCloudShadowsMID;                               // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Complex;                     // 0x10A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Simplified;                  // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               StaticCloudsMID;                                   // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               Volumetric_Aurora_MID;                             // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               Inside_Clouds_Fog_MID;                             // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, TSoftObjectPtr<class UMaterialInstance>> SkyMIDParentInstances;                             // 0x10C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               CloudFogPostProcessMID;                            // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               OvercastTurbulenceMID;                             // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       VolumetricCloudAndShadowMIDs;                      // 0x1128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       VolumetricCloudMIDs;                               // 0x1138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       SkyAndStaticCloudsMID;                             // 0x1148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       SkyAndShadowsMIDs;                                 // 0x1158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UPostProcessComponent*                  Cloud_Fog_PostProcess;                             // 0x1168(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        MoonIconArrow;                                     // 0x1170(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        SunIconArrow;                                      // 0x1178(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    SunIcon;                                           // 0x1180(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    MoonIcon;                                          // 0x1188(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Overcast_Turbulence;                               // 0x1190(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  LensFlare;                                         // 0x1198(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     RealtimeCaptureBasedSkyLight;                      // 0x11A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      Inside_Cloud_Fog;                                  // 0x11A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VolumetricAurora;                                  // 0x11B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticCloudsSphere;                                // 0x11B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    Root;                                              // 0x11C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x11C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     CubeMap_SkyLight;                                  // 0x11D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     CaptureBasedSkyLight;                              // 0x11D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  Exposure;                                          // 0x11E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x11E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             Moon;                                              // 0x11F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             Sun;                                               // 0x11F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x1200(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        Moon_Root;                                         // 0x1208(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        Sun_Root;                                          // 0x1210(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Ultra_Dynamic_Sky_Sphere;                          // 0x1218(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             Sun_LightComponent;                                // 0x1220(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDirectionalLightComponent*             Moon_LightComponent;                               // 0x1228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x1230(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UExponentialHeightFogComponent*         HeightFogComponent;                                // 0x1238(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SunTarget;                                         // 0x1240(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoonTarget;                                        // 0x1258(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mobile;                                            // 0x1270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Runtime;                                           // 0x1271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FogColorsFromSkyAtmosphere;                        // 0x1272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1273[0x1];                                     // 0x1273(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTickSet;                                    // 0x1274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, EKoratUDS_UDS_PropertyType> Properties;                                        // 0x1278(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          DisallowTickSkip;                                  // 0x12C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OverrideWithNewChanges;                            // 0x12C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CorrectedForVolMode;                               // 0x12CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingCloudFogPostProcess;                          // 0x12CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12CC[0x4];                                     // 0x12CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentCameraLocation;                             // 0x12D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForwardShading;                                    // 0x12E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UsexExposureRange;                                 // 0x12E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EA[0x6];                                     // 0x12EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ExposureMin;                                       // 0x12F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExposureMax;                                       // 0x12F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtendDefaultLuminanceRange;                       // 0x1300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseMobileOverrides;                                // 0x1301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_SkyMode                         VolumetricCloudsReplacement;                       // 0x1302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUDS_UDS_SkyLightMode                    RealTimeCaptureSkyLightReplacement;                // 0x1303(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdjustForMobileRenderer;                           // 0x1304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1305[0x3];                                     // 0x1305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MobilePlatforms;                                   // 0x1308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          SimulateRealSun;                                   // 0x1318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateRealMoon;                                  // 0x1319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateRealStars;                                 // 0x131A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131B[0x5];                                     // 0x131B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Latitude;                                          // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Longitude;                                         // 0x1328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TimeZone;                                          // 0x1330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x1338(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x133C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x1340(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1344[0x4];                                     // 0x1344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NorthYaw;                                          // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SimulationSpeed;                                   // 0x1350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrueRealWorldTime;                                 // 0x1358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyDaylightSavingsTime;                          // 0x1359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135A[0x2];                                     // 0x135A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DSTStartMonth;                                     // 0x135C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DSTStartDay;                                       // 0x1360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DSTEndMonth;                                       // 0x1364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DSTEndDay;                                         // 0x1368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DSTChangeHour;                                     // 0x136C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Months;                                            // 0x1370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 Months_LeapYear;                                   // 0x1380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	double                                        StellarCalibration;                                // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        LunarOrbitCalibration;                             // 0x1398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        LunarInclinationCalibration;                       // 0x13A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DaylightSavingsTime;                               // 0x13A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13A9[0x7];                                     // 0x13A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SimulatedSunriseTime;                              // 0x13B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        SimulatedSunsetTime;                               // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        TimeOfDayReplicationPeriod;                        // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReplicatedTimeOfDay;                               // 0x13C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReplicatedMoonPhase;                               // 0x13D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReplicatedDayLength;                               // 0x13D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReplicatedNightLength;                             // 0x13E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReplicatedTimeSpeed;                               // 0x13E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReplicatedSimulationSpeed;                         // 0x13F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             Sunset;                                            // 0x13F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Sunrise;                                           // 0x1408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Midnight;                                          // 0x1418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Hourly;                                            // 0x1428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      VolumetricCloudsParentMaterials_TwoLayerSimplified; // 0x1438(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      VolumetricCloudsParentMaterials_Simplified;        // 0x1468(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      VolumetricCloudsParentMaterials_TwoLayerComplex;   // 0x1498(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      VolumetricCloudsParentMaterials_Complex;           // 0x14C8(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              VolumetricCloudsBaseCloudsTexture_VoronoiSmooth;   // 0x14F8(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              VolumetricCloudsBaseCloudsTexture_VoronoiDiverse;  // 0x1528(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              VolumetricCloudsBaseCloudsTexture_Custom;          // 0x1558(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      CloudShadowsParentMaterial_SkyMode;                // 0x1588(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      CloudShadowsParentMaterial_NotSkyMode;             // 0x15B8(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      LensFlareParentMaterial_ZoomChromatic;             // 0x15E8(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      LensFlareParentMaterial_Anamorphic;                // 0x1618(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      LensFlareParentMaterial_X35mmPrime;                // 0x1648(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              X2DCloudsBaseTexture_VoronoiSmooth;                // 0x1678(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              X2DCloudsBaseTexture_VoronoiDiverse;               // 0x16A8(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      StaticCloudsParentMaterial_UseSkyAtmosphere;       // 0x16D8(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      StaticCloudsParentMaterial_NotUseSkyAtmosphere;    // 0x1708(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ApproximateRealSunMoonandStars_EquationOfTimeCurve; // 0x1738(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           UltraDynamicWeatherParameters;                     // 0x1740(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1748[0x8];                                     // 0x1748(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	double AbsentDirectionalLightsBrightness();
	struct FLinearColor AdjustColorForNightBrightness(const struct FLinearColor& InColor);
	void AdjustedExposureRange(double* OutMin, double* OutMax);
	TArray<class UMaterialInstanceDynamic*> AllVolumetricCloudMIDs(bool Shadows);
	void ApplyConsoleVariableWithCheck(const class FString& Cvar, double Setting, int32 Type);
	void ApplyVolumetricMode(EKoratUDS_UDS_VolRT_Mode Mode);
	void ApproximateRealSunMoonAndStars(int32 Month_, int32 Day_, int32 Year_, double TimeOfDay_, double TimeZone_, bool OnlyCalculateSun, struct FVector* OutSunVector, struct FVector* OutMoonVector, double* OutRealPhase, struct FVector* OutPhaseAlignment, double* OutCelestialOrbit, struct FLinearColor* OutCelestialYaw);
	double CalculateNightBrightness();
	double CancelShadowsValue(const struct FVector& LightVector);
	void CheckForDaylightSavingsTime();
	bool CloudCoverageHasChanged();
	double CloudDarkening();
	double CloudShadowsCloudDensity();
	struct FLinearColor CloudShadowsLightVectorProcess(const struct FVector& Vector);
	TSoftObjectPtr<class UMaterialInterface> CloudShadowsParentMaterial();
	double CloudsTimeOfDayFactor();
	struct FVector CloudTextureVelocity();
	void ConstructionScriptFunction(bool RunByCounterpart, bool MoveStaticLights);
	struct FTimecode ConvertTimeOfDayToTimeCode(double Time);
	struct FLinearColor Current2DCloudTint();
	void CurrentAppliedCloudTopAndBottom(double* OutBottom, double* OutTop);
	double CurrentBaseCloudsScale();
	double CurrentFogDensity();
	struct FLinearColor CurrentFogDirectionalInscatteringColor();
	struct FLinearColor CurrentFogInscatteringColor();
	struct FLinearColor CurrentLensFlareColor();
	double CurrentLerpToSimplifiedClouds();
	struct FLinearColor CurrentLightPollution();
	double CurrentLitIntensity();
	double CurrentMaxTraceDistance();
	double CurrentMieAnisotropy();
	double CurrentMieScatteringScale();
	struct FLinearColor CurrentMoonLightColor();
	struct FLinearColor CurrentMoonLightMaterialColor();
	double CurrentMoonLitPercent();
	double CurrentMoonMaterialIntensity();
	struct FLinearColor CurrentMoonPhaseAngle();
	void CurrentMoonScaleAndCutoutValue(double* OutScale, double* OutCutout);
	double CurrentMoonSourceAngle();
	struct FLinearColor CurrentNightSkyGlow();
	double CurrentOverallIntensity();
	double CurrentOvercastSwirl();
	struct FLinearColor CurrentRayleighScatteringColor();
	double CurrentSaturation();
	struct FLinearColor CurrentSkyAmbientColor();
	struct FLinearColor CurrentSkyLightLowerHemisphereColor();
	struct FLinearColor CurrentStarsColor();
	struct FLinearColor CurrentSunDiskColor();
	double CurrentSunDiskIntensity();
	struct FLinearColor CurrentSunLightColor();
	double CurrentSunLightIntensity();
	double CurrentSunRadius();
	double CurrentSunriseEventTime();
	double CurrentSunsetEventTime();
	double CurrentSunSourceAngle();
	struct FLinearColor CurrentVolumetricCloudAlbedo();
	double CurrentVolumetricCloudMacroVariation();
	double CurrentVolumetricCloudMultiscatteringOcclusion();
	double CurrentVolumetricCloudsDensity();
	double CurrentVolumetricCloudSubnoiseAmount();
	double CurrentVolumetricCloudTaperPosition();
	double CurrentWispsOpacity();
	double CurrentZDisturbance();
	void DayEnded();
	bool DimmingDirectionalLights();
	double DirectionalInscatteringMultiplier();
	double DirectionalLightDimming();
	double FindOverallIntensity(double Darkening);
	void FindRealSunset_SunriseTimes();
	void FinishTimeTransition();
	void FireEditorDispatchers();
	double FlatCloudinessAlpha();
	double FogHeightFalloff();
	double FogStartDistance();
	void ForceValidDay();
	void GetCurrentCloudShadowsIntensityAndSoftness(double* OutIntensity, double* OutSoftness);
	struct FDateTime GetCurrentDateAndTime();
	void GetCurrentFogBaseColors(struct FLinearColor* OutAmbientFogColor, struct FLinearColor* OutDirectionalBaseColor, struct FLinearColor* OutScaledDirectionalBaseColor);
	void GetCurrentSkyLightColorAndIntensity(double* OutIntensity, struct FLinearColor* OutColor);
	void GetCurrentVolumetricCloudExtinctionScales(double* OutTop, double* OutBottom);
	TSoftObjectPtr<class UMaterialInterface> GetSkyMIDParentMaterialInstance();
	struct FTimecode GetTimeOfDayInRealTimeFormat();
	void GetVolumetricCloudEmissiveColors(struct FLinearColor* OutBottom, struct FLinearColor* OutTop);
	double H_M_S_MSToTimeOfDay(int32 Hours, int32 Minutes, int32 Seconds, int32 Miliseconds);
	void HourlyMulticastDelegate__DelegateSignature(int32 Hour);
	void IncrementDay();
	bool IsLocationInsideCloudLayer(const struct FVector& Location);
	bool IsMoonLightCastingShadows();
	bool IsSunLightCastingShadows();
	TSoftObjectPtr<class UMaterialInterface> LensFlareParentMaterial();
	void LoadRequiredAssets();
	void MidnightMulticastDelegate__DelegateSignature();
	double MoonLightCurrentIntensity();
	double MoonLightSpecularScale();
	double MoonLightVolumetricScatteringIntensity();
	double MoonPhaseMultiplier();
	double NightFilter();
	void OnRep_ReplicatedTimeOfDay();
	struct FLinearColor OvercastLightContribution(bool ForVolumetricClouds);
	void QueryProjectSettings();
	void RecaptureSkyLight();
	void RestartInsideCloudFog();
	double ScaleSampleCount(double In);
	void SetCloudTiming();
	void SetDateAndTime(const struct FDateTime& DateTime);
	void SetSunAndMoonRootRotation();
	void SetTimeOfDayUsingTimeCode(const struct FTimecode& Timecode);
	void SetUpLensFlare();
	void SetUpOvercastTurbulence();
	struct FLinearColor SimplifiedCurrentColor(const struct FLinearColor& DayColor, const struct FLinearColor& Dawn_DuskColor, const struct FLinearColor& NightColor);
	double SkyAtmosphereFogContribution();
	double SkyMIDCloudDensity();
	TSoftObjectPtr<class UMaterialInterface> StaticCloudsParentMaterial();
	struct FVector SunForwardVector();
	void SunriseMulticastDelegate__DelegateSignature();
	void SunsetMulticastDelegate__DelegateSignature();
	bool TickSetGate(int32 Set);
	void TickTimeTransition();
	void TimedOverrideWithNewChanges();
	double TimeOfDayOffset();
	struct FLinearColor TintColorByWeather(const struct FLinearColor& ClearColor, const struct FLinearColor& PartlyCloudyColor, const struct FLinearColor& OvercastColor);
	double TotalTimeElapsed();
	void TransitionSkyLightIntensity(double NewSkyLightIntensityMultiplier, double TransitionTime);
	void TransitionTimeOfDay(double NewTimeOfDay, double TransitionDuration_Seconds, EEasingFunc EasingFunction, double EasingExponent, bool AllowTimeGoingBackwards);
	double TwilightBrightnessFalloff(double Z);
	void UpdateActiveVariables();
	void UpdateCurrentVolumetricCloudsMID();
	void UpdateDirectionalLights(bool MoveStaticLights);
	void UpdateDynamicSkyLightMultiplier();
	void UpdateLensFlare();
	void UpdateLights();
	void UpdateMoonParameters();
	void UpdateOvercastTurbulence();
	void UpdateReplicatedTime();
	void UpdateReplicatedToD();
	void UpdateSettingsBasedOnPlatformAndScalability();
	void UpdateStaticClouds();
	void UpdateStaticVariables();
	void UpdateVariablesControlledByWeather();
	bool UseSkyAtmosphere();
	bool Using2DClouds();
	double VolumetricAuroraIntensity();
	double VolumetricCloudBaseCloudHeight();
	double VolumetricCloudCloudTopAltitude();
	double VolumetricCloudLayerHeight();
	double VolumetricCloudLayerScale();
	TSoftObjectPtr<class UTexture2D> VolumetricCloudsBaseCloudsTexture();
	double VolumetricCloudShadowsAltitude();
	void VolumetricCloudsParentMaterials(TSoftObjectPtr<class UMaterialInterface>* OutSimplified, TSoftObjectPtr<class UMaterialInterface>* OutComplex);
	TSoftObjectPtr<class UTexture2D> X2DCloudsBaseTexture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoratUDS_Ultra_Dynamic_Sky">();
	}
	static class AKoratUDS_Ultra_Dynamic_Sky* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKoratUDS_Ultra_Dynamic_Sky>();
	}
};
static_assert(alignof(AKoratUDS_Ultra_Dynamic_Sky) == 0x000008, "Wrong alignment on AKoratUDS_Ultra_Dynamic_Sky");
static_assert(sizeof(AKoratUDS_Ultra_Dynamic_Sky) == 0x001750, "Wrong size on AKoratUDS_Ultra_Dynamic_Sky");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NightFilterCurve) == 0x000290, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NightFilterCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RefreshSettings) == 0x000298, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RefreshSettings' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TimeOfDay) == 0x0002A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TimeOfDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyMode) == 0x0002A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ColorMode) == 0x0002A9, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ColorMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudCoverage) == 0x0002B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudCoverage' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Fog) == 0x0002B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Fog' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OverallIntensity) == 0x0002C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OverallIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Contrast) == 0x0002C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Contrast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Saturation) == 0x0002D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Saturation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalBalance) == 0x0002D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalBalance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DawnTime) == 0x0002E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DawnTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DuskTime) == 0x0002E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DuskTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NightBrightness) == 0x0002F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NightBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SpreadOutTickBehaviorsOver3Frames) == 0x0002F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SpreadOutTickBehaviorsOver3Frames' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OnlyFullyUpdateActiveParametersWhenCloudCoverageChanges) == 0x0002F9, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OnlyFullyUpdateActiveParametersWhenCloudCoverageChanges' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalLightsAbsentBrightness) == 0x000300, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalLightsAbsentBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastNightBrightness) == 0x000308, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastNightBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UseSkyModeScalabilityMap) == 0x000310, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UseSkyModeScalabilityMap' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyModeScalabilityMap) == 0x000318, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyModeScalabilityMap' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DimDirectionalLightsWithCloudCoverage) == 0x000368, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DimDirectionalLightsWithCloudCoverage' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DimmingRangeLowerBound) == 0x000370, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DimmingRangeLowerBound' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DimmingRangeUpperBound) == 0x000378, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DimmingRangeUpperBound' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DimmingRangeExponent) == 0x000380, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DimmingRangeExponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomSkySphereMaterial) == 0x000388, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomSkySphereMaterial' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AnimateTimeOfDay) == 0x000390, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AnimateTimeOfDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DayLength) == 0x000398, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DayLength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NightLength) == 0x0003A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NightLength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LightsUpdatePeriod) == 0x0003A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LightsUpdatePeriod' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunriseEventOffset) == 0x0003B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunriseEventOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunsetEventOffset) == 0x0003B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunsetEventOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TimeSpeed) == 0x0003C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TimeSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, InternalTimeOfDay) == 0x0003C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::InternalTimeOfDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TotalDaysElapsed) == 0x0003D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CurrentTimeOfDayOffset) == 0x0003D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CurrentTimeOfDayOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LastFrameTimeOfDay) == 0x0003E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LastFrameTimeOfDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EventHour) == 0x0003E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EventHour' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Move_Static_Stationary_Lights) == 0x0003EC, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Move_Static_Stationary_Lights' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudRenderingMode) == 0x0003ED, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudRenderingMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BottomAltitude) == 0x0003F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BottomAltitude' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LayerHeightScale) == 0x0003F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LayerHeightScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseCloudsScale) == 0x000400, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseCloudsScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SubNoiseScale) == 0x000408, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SubNoiseScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HighFrequencyNoiseAmount) == 0x000410, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HighFrequencyNoiseAmount' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DistortHighFrequencyNoise) == 0x000418, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DistortHighFrequencyNoise' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ExtinctionScaleTop) == 0x000420, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ExtinctionScaleTop' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ExtinctionScaleBottom) == 0x000428, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ExtinctionScaleBottom' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ShiftCurve) == 0x000430, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ShiftCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ZDisturbance) == 0x000438, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ZDisturbance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MinimumErosion) == 0x000440, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MinimumErosion' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ViewSampleCountScale) == 0x000448, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DistanceToSampleMaxCount) == 0x000450, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DistanceToSampleMaxCount' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ShadowSampleScale) == 0x000458, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ShadowSampleScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ShadowTracingDistance) == 0x000460, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReflectionSampleCountScale) == 0x000468, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReflectionShadowSampleCountScale) == 0x000470, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReflectionShadowSampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudNoiseType) == 0x000478, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudNoiseType' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCustomNoiseTexture) == 0x000480, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCustomNoiseTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseCloudsMipLevel) == 0x000488, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseCloudsMipLevel' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MultiscatteringIntensity) == 0x000490, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MultiscatteringIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MultiscatteringOcclusionFactor) == 0x000498, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MultiscatteringOcclusionFactor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SubNoiseErosion) == 0x0004A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SubNoiseErosion' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MacroVariation) == 0x0004A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MacroVariation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MacroScale) == 0x0004B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MacroScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, PhaseG) == 0x0004B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::PhaseG' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, PhaseG2) == 0x0004C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::PhaseG2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MultiscatteringEccentricity) == 0x0004C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MultiscatteringEccentricity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsScale) == 0x0004D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudColor) == 0x0004D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TracingMaxStartDistance) == 0x0004E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TracingMaxStartDistance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TracingMaxDistance_InsideCloudLayer) == 0x0004F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TracingMaxDistance_InsideCloudLayer' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TracingMaxDistance_OutsideCloudLayer) == 0x0004F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TracingMaxDistance_OutsideCloudLayer' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EnableFogInsideClouds) == 0x000500, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EnableFogInsideClouds' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, InsideCloudFogStrength) == 0x000508, "Member 'AKoratUDS_Ultra_Dynamic_Sky::InsideCloudFogStrength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, InsideCloudFogColor) == 0x000510, "Member 'AKoratUDS_Ultra_Dynamic_Sky::InsideCloudFogColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastTurbulence) == 0x000520, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastTurbulence' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloseFadeDistance) == 0x000528, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloseFadeDistance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TwoLayers) == 0x000530, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TwoLayers' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Layer2CoverageScale) == 0x000538, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Layer2CoverageScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Layer2ExtinctionScale) == 0x000540, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Layer2ExtinctionScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Layer2CloudScale) == 0x000548, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Layer2CloudScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Layer2MipOffset) == 0x000558, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Layer2MipOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DistanceBetweenLayers) == 0x000560, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DistanceBetweenLayers' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HighFrequencyMipIncreaseByDistance) == 0x000568, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HighFrequencyMipIncreaseByDistance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ChangeToSimplifiedMaterialWhenOvercast) == 0x000570, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ChangeToSimplifiedMaterialWhenOvercast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimplifiedMaterialCloudCoverageThreshold) == 0x000578, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimplifiedMaterialCloudCoverageThreshold' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimplifiedMaterialFadeLength) == 0x000580, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimplifiedMaterialFadeLength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TopBottomDistribution) == 0x000588, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TopBottomDistribution' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CurrentVolumetricCloudsMID) == 0x000590, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CurrentVolumetricCloudsMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudsPosition) == 0x000598, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudsPosition' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StandardBaseCloudsSize) == 0x0005B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StandardBaseCloudsSize' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseCloudHeight) == 0x0005B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseCloudHeight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LowMaterialQualitySampleCountScale) == 0x0005C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LowMaterialQualitySampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MediumMaterialQualitySampleCountScale) == 0x0005C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MediumMaterialQualitySampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EpicQualityVolumeTexture) == 0x0005D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EpicQualityVolumeTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HighQualityVolumeTexture) == 0x000600, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HighQualityVolumeTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LowQualityVolumeTexture) == 0x000630, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LowQualityVolumeTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EpicMaterialQualitySampleCountScale) == 0x000660, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EpicMaterialQualitySampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, InsideCloudFogParentMaterial) == 0x000668, "Member 'AKoratUDS_Ultra_Dynamic_Sky::InsideCloudFogParentMaterial' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, InsideCloudFogSystem) == 0x000698, "Member 'AKoratUDS_Ultra_Dynamic_Sky::InsideCloudFogSystem' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, PostProcessCloudFogParentMaterial) == 0x0006C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::PostProcessCloudFogParentMaterial' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastTurbulenceParentMaterial) == 0x0006F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastTurbulenceParentMaterial' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SoftenCloudLayer1) == 0x000728, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SoftenCloudLayer1' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SoftenCloudLayer2) == 0x000730, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SoftenCloudLayer2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SharpenOuterEdge) == 0x000738, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SharpenOuterEdge' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudTilingLayer1) == 0x000740, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudTilingLayer1' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudTilingLayer2) == 0x000748, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudTilingLayer2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SoftenHorizon) == 0x000750, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SoftenHorizon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OneCloudLayer) == 0x000758, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OneCloudLayer' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudHeightLayer1) == 0x000760, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudHeightLayer1' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudHeightLayer2) == 0x000768, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudHeightLayer2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastSwirlingTexture) == 0x000770, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastSwirlingTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudNoiseType) == 0x000778, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudNoiseType' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomNoiseTexture) == 0x000780, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomNoiseTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunShaderIntensity) == 0x000788, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunShaderIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalLightingIntensity) == 0x000790, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalLightingIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunHighlightRadius) == 0x000798, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunHighlightRadius' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudOpacity) == 0x0007A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudOpacity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HorizonDensityMultiplier) == 0x0007A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HorizonDensityMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ZenithDensityMultiplier) == 0x0007B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ZenithDensityMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LatitudeGradientPosition) == 0x0007B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LatitudeGradientPosition' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LatitudeGradientWidth) == 0x0007C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LatitudeGradientWidth' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AroundSunDensityMultiplier) == 0x0007C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AroundSunDensityMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AroundSunDensityExponent) == 0x0007D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AroundSunDensityExponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AroundMoonDensityMultiplier) == 0x0007D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AroundMoonDensityMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AroundMoonDensityExponent) == 0x0007E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AroundMoonDensityExponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ShineIntensityCurve) == 0x0007E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ShineIntensityCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunHighlightIntensityCurve) == 0x0007F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunHighlightIntensityCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunHighlightRadiusCurve) == 0x0007F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunHighlightRadiusCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ShineVariation) == 0x000800, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ShineVariation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudSpeed) == 0x000808, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudDirection) == 0x000810, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudDirection' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudPhase) == 0x000818, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudPhase' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RandomizeCloudFormationOnRun) == 0x000820, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RandomizeCloudFormationOnRun' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudsMoveWithTimeOfDay) == 0x000821, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudsMoveWithTimeOfDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TimeOfDayMovementMultiplier) == 0x000828, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TimeOfDayMovementMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LastCloudsTimeOfDayFactor) == 0x000830, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LastCloudsTimeOfDayFactor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StartingCloudTextureVelocity) == 0x000838, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StartingCloudTextureVelocity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UseCloudShadows) == 0x000850, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UseCloudShadows' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudShadowsIntensityWhenSunny) == 0x000858, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudShadowsIntensityWhenSunny' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudShadowsIntensityWhenOvercast) == 0x000860, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudShadowsIntensityWhenOvercast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudShadowsSoftnessWhenSunny) == 0x000868, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudShadowsSoftnessWhenSunny' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudShadowsSoftnessWhenOvercast) == 0x000870, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudShadowsSoftnessWhenOvercast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogShadows) == 0x000878, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogShadows' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DustShadows) == 0x000880, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DustShadows' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, X2DCloudShadowsSpeed) == 0x000888, "Member 'AKoratUDS_Ultra_Dynamic_Sky::X2DCloudShadowsSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, X2DCloudShadowsScale) == 0x000890, "Member 'AKoratUDS_Ultra_Dynamic_Sky::X2DCloudShadowsScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomLightFunctionMaterial) == 0x000898, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomLightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ForceLightFunctionsOn) == 0x0008A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ForceLightFunctionsOn' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudWispsOpacity) == 0x0008A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudWispsOpacity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudWispsTexture) == 0x0008B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudWispsTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudWispsColorIntensity) == 0x0008B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudWispsColorIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ManuallyPositionSunTarget) == 0x0008C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ManuallyPositionSunTarget' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLightIntensity) == 0x0008C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLightIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunMobility) == 0x0008D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunMobility' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunAngle) == 0x0008D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunInclination) == 0x0008E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunInclination' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunVerticalOffset) == 0x0008E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunVerticalOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunCastsShadows) == 0x0008F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunCastsShadows' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLightColor) == 0x0008F4, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLightColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunRadius) == 0x000908, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunRadius' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunSoftness) == 0x000910, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunSoftness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunVolumetricScatteringIntensity) == 0x000918, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunVolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ExtendDawnAndDusk) == 0x000920, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ExtendDawnAndDusk' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunDiskIntensity) == 0x000928, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunDiskIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunDiskColorCurve) == 0x000930, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunDiskColorCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ScaleSunRadiusAsItNearsHorizon) == 0x000938, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ScaleSunRadiusAsItNearsHorizon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunSpecularScale) == 0x000940, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunSpecularScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunYaw) == 0x000948, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunYaw' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunZVector) == 0x000950, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunZVector' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MaxSunSourceAngleScale) == 0x000958, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MaxSunSourceAngleScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunSourceAngleSoftness) == 0x000960, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunSourceAngleSoftness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ManuallyPositionMoonTarget) == 0x000968, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ManuallyPositionMoonTarget' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightIntensity) == 0x000970, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonMobility) == 0x000978, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonMobility' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonAngle) == 0x000980, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonInclination) == 0x000988, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonInclination' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonVerticalOffset) == 0x000990, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonVerticalOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonOrbitOffset) == 0x000998, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonOrbitOffset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonCastsShadows) == 0x0009A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonCastsShadows' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonScale) == 0x0009A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonPhase) == 0x0009B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonPhase' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonPhaseChangesOverTime) == 0x0009B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonPhaseChangesOverTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DarkSideBrightness) == 0x0009C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DarkSideBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonTextureIntensity_Night) == 0x0009C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonTextureIntensity_Night' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonTextureIntensity_Day) == 0x0009D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonTextureIntensity_Day' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightColor) == 0x0009D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonMaterialColor) == 0x0009E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonMaterialColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NewMoonLightBrightness) == 0x0009F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NewMoonLightBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonTextureRotation) == 0x000A00, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonTextureRotation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomMoonTexture) == 0x000A08, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomMoonTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonGlowIntensity) == 0x000A10, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonGlowIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonVolumetricScatteringIntensity) == 0x000A18, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonVolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ScaleMoonRadiusAsItNearsHorizon) == 0x000A20, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ScaleMoonRadiusAsItNearsHorizon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonSpecularScale) == 0x000A28, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonSpecularScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightCurrentIntensityValue) == 0x000A30, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightCurrentIntensityValue' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonMasksTexture) == 0x000A38, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonMasksTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MaxMoonSourceAngleScale) == 0x000A68, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MaxMoonSourceAngleScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonSourceAngleSoftness) == 0x000A70, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonSourceAngleSoftness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightMode) == 0x000A78, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightIntensity) == 0x000A80, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLight_Mobility) == 0x000A88, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLight_Mobility' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightTemperature) == 0x000A90, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightTemperature' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightColorMultiplier_Day) == 0x000A98, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightColorMultiplier_Day' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightColorMultiplier_Dawn_Dusk) == 0x000AA8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightColorMultiplier_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightColorMultiplier_Night) == 0x000AB8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightColorMultiplier_Night' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightCastsShadows) == 0x000AC8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightCastsShadows' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DFAOMinOcclusion) == 0x000AD0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DFAOMinOcclusion' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DFAOExponent) == 0x000AD8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DFAOExponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DynamicSkyLightTransitionTime) == 0x000AE0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DynamicSkyLightTransitionTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TargetSkyLightMultiplier) == 0x000AE8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TargetSkyLightMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DynamicSkyLightMultiplier) == 0x000AF0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DynamicSkyLightMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RealTimeCapture) == 0x000AF8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RealTimeCapture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CapturedSkyLightLowerHemisphereTint) == 0x000AFC, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CapturedSkyLightLowerHemisphereTint' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RecaptureSkyLightPeriodically) == 0x000B0C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RecaptureSkyLightPeriodically' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightRecapturePeriod_Seconds) == 0x000B10, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightRecapturePeriod_Seconds' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FactorAbsentDirectionalLightsBrightness) == 0x000B18, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FactorAbsentDirectionalLightsBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RealTimeCaptureUsesTimeSlicing) == 0x000B19, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RealTimeCaptureUsesTimeSlicing' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomCubemap) == 0x000B20, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomCubemap' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FlatCubemap) == 0x000B50, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FlatCubemap' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TintedSkyLightLowerHemisphereColor) == 0x000B80, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TintedSkyLightLowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogColorIntensityScale) == 0x000B90, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogColorIntensityScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogScatteringColorCurve) == 0x000B98, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogScatteringColorCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogInscatteringSun) == 0x000BA0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogInscatteringSun' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogInscatteringMoon) == 0x000BB0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogInscatteringMoon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogDirectionalScatteringColorCurve) == 0x000BC0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogDirectionalScatteringColorCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogDirectionalInscattering) == 0x000BC8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogDirectionalInscattering' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FoggyDesaturation) == 0x000BD8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FoggyDesaturation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastDesaturation) == 0x000BE0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastDesaturation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastBrightnessDay) == 0x000BE8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastBrightnessDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastBrightnessNight) == 0x000BF0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastBrightnessNight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AllFogColorsMultiplier) == 0x000BF8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AllFogColorsMultiplier' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyAtmosphereFogInfluenceCurve) == 0x000C08, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyAtmosphereFogInfluenceCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UseVolumetricFog) == 0x000C10, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UseVolumetricFog' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AmbientFogColor) == 0x000C14, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AmbientFogColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalInscatteringFogColor) == 0x000C24, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalInscatteringFogColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalBaseFogColor) == 0x000C34, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalBaseFogColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ScaledDirectionalBaseFogColor) == 0x000C44, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ScaledDirectionalBaseFogColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseFogDensity) == 0x000C58, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseFogDensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FoggyDensityContribution) == 0x000C60, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FoggyDensityContribution' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudyDensityContribution) == 0x000C68, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudyDensityContribution' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DustDensityContribution) == 0x000C70, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DustDensityContribution' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ScaleTotalFogDensity) == 0x000C78, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ScaleTotalFogDensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogStartDistanceWhenClear) == 0x000C80, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogStartDistanceWhenClear' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogDensityWhereStartDistanceReachesZero) == 0x000C88, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogDensityWhereStartDistanceReachesZero' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseHeightFogFalloff) == 0x000C90, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudyHeightFogFalloff) == 0x000C98, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FoggyHeightFogFalloff) == 0x000CA0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FoggyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DustyHeightFogFalloff) == 0x000CA8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DustyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogSnowContribution) == 0x000CB0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogSnowContribution' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HeightFogDensity) == 0x000CB8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HeightFogDensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DustAmount) == 0x000CC0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DustAmount' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DustColor) == 0x000CC8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DustColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ControlSkyAtmosphereSettings) == 0x000CD8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ControlSkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RayleighScatteringColor) == 0x000CDC, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RayleighScatteringColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DesaturateRayleighScatteringWhenCloudy) == 0x000CF0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DesaturateRayleighScatteringWhenCloudy' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BrightenRayleighScatteringWhenCloudy) == 0x000CF8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BrightenRayleighScatteringWhenCloudy' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sunset_SunriseColor_Absorption) == 0x000D00, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sunset_SunriseColor_Absorption' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sunset_SunriseColorIntensity_AbsorptionScale) == 0x000D10, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sunset_SunriseColorIntensity_AbsorptionScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, KeepPlanetTopAtCameraXYLocation) == 0x000D18, "Member 'AKoratUDS_Ultra_Dynamic_Sky::KeepPlanetTopAtCameraXYLocation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseSkyColor_Day) == 0x000D1C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseSkyColor_Day' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseSkyColor_Dawn_Dusk) == 0x000D2C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseSkyColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, BaseSkyColor_Night) == 0x000D3C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::BaseSkyColor_Night' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudLightColor_Day) == 0x000D4C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudLightColor_Day' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudLightColor_Dawn_Dusk) == 0x000D5C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudLightColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudLightColor_Night) == 0x000D6C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudLightColor_Night' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudDarkColor_Day) == 0x000D7C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudDarkColor_Day' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudDarkColor_Dawn_Dusk) == 0x000D8C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudDarkColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudDarkColor_Night) == 0x000D9C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudDarkColor_Night' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunGlowColor) == 0x000DAC, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunGlowColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalIntensityCurve) == 0x000DC0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalIntensityCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DirectionalLightScatteringCurve) == 0x000DC8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DirectionalLightScatteringCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AtmosphericScatteringLUTTexture) == 0x000DD0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AtmosphericScatteringLUTTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EnableSunLightShaftBloom) == 0x000DD8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EnableSunLightShaftBloom' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLightShaftMaxBrightness) == 0x000DE0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLightShaftMaxBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLightShaftBloomThresholdCurve) == 0x000DE8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLightShaftBloomThresholdCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLightShaftBloomScaleCurve) == 0x000DF0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLightShaftBloomScaleCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLightShaftTintColor) == 0x000DF8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLightShaftTintColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EnableMoonLightShaftBloom) == 0x000E08, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EnableMoonLightShaftBloom' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightShaftMaxBrightness) == 0x000E10, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightShaftMaxBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightShaftBloomThreshold) == 0x000E18, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightShaftBloomThreshold' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightShaftBloomScale) == 0x000E20, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightShaftBloomScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLightShaftTintColor) == 0x000E28, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLightShaftTintColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, EnableSunLensFlare) == 0x000E38, "Member 'AKoratUDS_Ultra_Dynamic_Sky::EnableSunLensFlare' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareType) == 0x000E39, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareType' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareStrength) == 0x000E40, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareStrength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareTint) == 0x000E48, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareTint' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareMID) == 0x000E58, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomLensFlareParentInstance) == 0x000E60, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomLensFlareParentInstance' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ScaleFlareElements) == 0x000E68, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ScaleFlareElements' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsIntensity) == 0x000E70, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsColor) == 0x000E78, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsSpeed) == 0x000E88, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsTiling) == 0x000E90, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsTiling' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsDaytimeIntensity) == 0x000E98, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsDaytimeIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TilingStarsTexture) == 0x000EA0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TilingStarsTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RealStarsTexture) == 0x000ED0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RealStarsTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsPhase) == 0x000F00, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsPhase' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomTilingStarsTexture) == 0x000F08, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomTilingStarsTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomRealStarsTexture) == 0x000F10, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomRealStarsTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StarsIntensityCurve) == 0x000F18, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StarsIntensityCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NightSkyGlow) == 0x000F20, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NightSkyGlow' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NightSkyGlowColor) == 0x000F28, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NightSkyGlowColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LightPollutionIntensity) == 0x000F38, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LightPollutionIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LightPollutionColor) == 0x000F40, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LightPollutionColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UseAuroras) == 0x000F50, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UseAuroras' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraIntensity) == 0x000F58, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraSpeed) == 0x000F60, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraPhase) == 0x000F68, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraPhase' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraColor1) == 0x000F70, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraColor1' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraColor2) == 0x000F80, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraColor2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraColor3) == 0x000F90, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraColor3' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraLines) == 0x000FA0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraLines' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AuroraIntensityCurve) == 0x000FA8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AuroraIntensityCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricAuroraSampleCountScale) == 0x000FB0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricAuroraSampleCountScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricAuroraLayerHeight) == 0x000FB8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricAuroraLayerHeight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricAuroraBottomAltitude) == 0x000FC0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricAuroraBottomAltitude' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricAuroraParentMaterial) == 0x000FC8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricAuroraParentMaterial' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunLight) == 0x000FF8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunLight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomSunLightActor) == 0x001000, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomSunLightActor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonLight) == 0x001008, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonLight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomMoonLightActor) == 0x001010, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomMoonLightActor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLight) == 0x001018, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomSkyLightActor) == 0x001020, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomSkyLightActor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HeightFogFT) == 0x001028, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HeightFogFT' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CustomHeightFogActor) == 0x001030, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CustomHeightFogActor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Weather_BP) == 0x001038, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Weather_BP' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LastFrameCloudCoverage) == 0x001040, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LastFrameCloudCoverage' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudCoverageChangeThisFrame) == 0x001048, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudCoverageChangeThisFrame' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionTimeA) == 0x001050, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionTimeA' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionTimeB) == 0x001058, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionTimeB' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitioningTime) == 0x001060, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitioningTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionEasingFunction) == 0x001061, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionEasingFunction' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionEasingExponent) == 0x001068, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionEasingExponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionTimer) == 0x001070, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionTimer' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionDuration) == 0x001078, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionDuration' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionDaysCounted) == 0x001080, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionDaysCounted' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TransitionCanGoBackwards) == 0x001084, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TransitionCanGoBackwards' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sky_MID) == 0x001088, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sky_MID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunCloudShadowsMID) == 0x001090, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunCloudShadowsMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonCloudShadowsMID) == 0x001098, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonCloudShadowsMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Volumetric_Clouds_MID_Complex) == 0x0010A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Volumetric_Clouds_MID_Complex' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Volumetric_Clouds_MID_Simplified) == 0x0010A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Volumetric_Clouds_MID_Simplified' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StaticCloudsMID) == 0x0010B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StaticCloudsMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Volumetric_Aurora_MID) == 0x0010B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Volumetric_Aurora_MID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Inside_Clouds_Fog_MID) == 0x0010C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Inside_Clouds_Fog_MID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyMIDParentInstances) == 0x0010C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyMIDParentInstances' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudFogPostProcessMID) == 0x001118, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudFogPostProcessMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OvercastTurbulenceMID) == 0x001120, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OvercastTurbulenceMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudAndShadowMIDs) == 0x001128, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudAndShadowMIDs' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudMIDs) == 0x001138, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudMIDs' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyAndStaticCloudsMID) == 0x001148, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyAndStaticCloudsMID' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyAndShadowsMIDs) == 0x001158, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyAndShadowsMIDs' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Cloud_Fog_PostProcess) == 0x001168, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Cloud_Fog_PostProcess' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonIconArrow) == 0x001170, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonIconArrow' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunIconArrow) == 0x001178, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunIconArrow' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunIcon) == 0x001180, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunIcon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonIcon) == 0x001188, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonIcon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Overcast_Turbulence) == 0x001190, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Overcast_Turbulence' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlare) == 0x001198, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlare' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RealtimeCaptureBasedSkyLight) == 0x0011A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RealtimeCaptureBasedSkyLight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Inside_Cloud_Fog) == 0x0011A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Inside_Cloud_Fog' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricAurora) == 0x0011B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricAurora' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StaticCloudsSphere) == 0x0011B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StaticCloudsSphere' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Root) == 0x0011C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Root' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloud) == 0x0011C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CubeMap_SkyLight) == 0x0011D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CubeMap_SkyLight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CaptureBasedSkyLight) == 0x0011D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CaptureBasedSkyLight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Exposure) == 0x0011E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Exposure' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HeightFog) == 0x0011E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HeightFog' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Moon) == 0x0011F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Moon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sun) == 0x0011F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sun' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyAtmosphere) == 0x001200, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Moon_Root) == 0x001208, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Moon_Root' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sun_Root) == 0x001210, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sun_Root' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Ultra_Dynamic_Sky_Sphere) == 0x001218, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Ultra_Dynamic_Sky_Sphere' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sun_LightComponent) == 0x001220, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sun_LightComponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Moon_LightComponent) == 0x001228, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Moon_LightComponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SkyLightComponent) == 0x001230, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SkyLightComponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, HeightFogComponent) == 0x001238, "Member 'AKoratUDS_Ultra_Dynamic_Sky::HeightFogComponent' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SunTarget) == 0x001240, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SunTarget' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MoonTarget) == 0x001258, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MoonTarget' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Mobile) == 0x001270, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Mobile' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Runtime) == 0x001271, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Runtime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, FogColorsFromSkyAtmosphere) == 0x001272, "Member 'AKoratUDS_Ultra_Dynamic_Sky::FogColorsFromSkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CurrentTickSet) == 0x001274, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CurrentTickSet' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Properties) == 0x001278, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Properties' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DisallowTickSkip) == 0x0012C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DisallowTickSkip' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, OverrideWithNewChanges) == 0x0012C9, "Member 'AKoratUDS_Ultra_Dynamic_Sky::OverrideWithNewChanges' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CorrectedForVolMode) == 0x0012CA, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CorrectedForVolMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UsingCloudFogPostProcess) == 0x0012CB, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UsingCloudFogPostProcess' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CurrentCameraLocation) == 0x0012D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CurrentCameraLocation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ForwardShading) == 0x0012E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ForwardShading' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UsexExposureRange) == 0x0012E9, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UsexExposureRange' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ExposureMin) == 0x0012F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ExposureMin' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ExposureMax) == 0x0012F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ExposureMax' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ExtendDefaultLuminanceRange) == 0x001300, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ExtendDefaultLuminanceRange' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UseMobileOverrides) == 0x001301, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UseMobileOverrides' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsReplacement) == 0x001302, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsReplacement' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, RealTimeCaptureSkyLightReplacement) == 0x001303, "Member 'AKoratUDS_Ultra_Dynamic_Sky::RealTimeCaptureSkyLightReplacement' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, AdjustForMobileRenderer) == 0x001304, "Member 'AKoratUDS_Ultra_Dynamic_Sky::AdjustForMobileRenderer' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, MobilePlatforms) == 0x001308, "Member 'AKoratUDS_Ultra_Dynamic_Sky::MobilePlatforms' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimulateRealSun) == 0x001318, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimulateRealSun' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimulateRealMoon) == 0x001319, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimulateRealMoon' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimulateRealStars) == 0x00131A, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimulateRealStars' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Latitude) == 0x001320, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Latitude' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Longitude) == 0x001328, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Longitude' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TimeZone) == 0x001330, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TimeZone' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Year) == 0x001338, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Year' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Month) == 0x00133C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Month' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Day) == 0x001340, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Day' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, NorthYaw) == 0x001348, "Member 'AKoratUDS_Ultra_Dynamic_Sky::NorthYaw' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimulationSpeed) == 0x001350, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimulationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TrueRealWorldTime) == 0x001358, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TrueRealWorldTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ApplyDaylightSavingsTime) == 0x001359, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ApplyDaylightSavingsTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DSTStartMonth) == 0x00135C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DSTStartMonth' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DSTStartDay) == 0x001360, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DSTStartDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DSTEndMonth) == 0x001364, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DSTEndMonth' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DSTEndDay) == 0x001368, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DSTEndDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DSTChangeHour) == 0x00136C, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DSTChangeHour' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Months) == 0x001370, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Months' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Months_LeapYear) == 0x001380, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Months_LeapYear' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StellarCalibration) == 0x001390, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StellarCalibration' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LunarOrbitCalibration) == 0x001398, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LunarOrbitCalibration' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LunarInclinationCalibration) == 0x0013A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LunarInclinationCalibration' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, DaylightSavingsTime) == 0x0013A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::DaylightSavingsTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimulatedSunriseTime) == 0x0013B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimulatedSunriseTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, SimulatedSunsetTime) == 0x0013B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::SimulatedSunsetTime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, TimeOfDayReplicationPeriod) == 0x0013C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::TimeOfDayReplicationPeriod' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReplicatedTimeOfDay) == 0x0013C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReplicatedTimeOfDay' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReplicatedMoonPhase) == 0x0013D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReplicatedMoonPhase' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReplicatedDayLength) == 0x0013D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReplicatedDayLength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReplicatedNightLength) == 0x0013E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReplicatedNightLength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReplicatedTimeSpeed) == 0x0013E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReplicatedTimeSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ReplicatedSimulationSpeed) == 0x0013F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ReplicatedSimulationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sunset) == 0x0013F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sunset' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Sunrise) == 0x001408, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Sunrise' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Midnight) == 0x001418, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Midnight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, Hourly) == 0x001428, "Member 'AKoratUDS_Ultra_Dynamic_Sky::Hourly' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsParentMaterials_TwoLayerSimplified) == 0x001438, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsParentMaterials_TwoLayerSimplified' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsParentMaterials_Simplified) == 0x001468, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsParentMaterials_Simplified' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsParentMaterials_TwoLayerComplex) == 0x001498, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsParentMaterials_TwoLayerComplex' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsParentMaterials_Complex) == 0x0014C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsParentMaterials_Complex' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsBaseCloudsTexture_VoronoiSmooth) == 0x0014F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsBaseCloudsTexture_VoronoiSmooth' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsBaseCloudsTexture_VoronoiDiverse) == 0x001528, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsBaseCloudsTexture_VoronoiDiverse' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, VolumetricCloudsBaseCloudsTexture_Custom) == 0x001558, "Member 'AKoratUDS_Ultra_Dynamic_Sky::VolumetricCloudsBaseCloudsTexture_Custom' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudShadowsParentMaterial_SkyMode) == 0x001588, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudShadowsParentMaterial_SkyMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, CloudShadowsParentMaterial_NotSkyMode) == 0x0015B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::CloudShadowsParentMaterial_NotSkyMode' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareParentMaterial_ZoomChromatic) == 0x0015E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareParentMaterial_ZoomChromatic' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareParentMaterial_Anamorphic) == 0x001618, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareParentMaterial_Anamorphic' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, LensFlareParentMaterial_X35mmPrime) == 0x001648, "Member 'AKoratUDS_Ultra_Dynamic_Sky::LensFlareParentMaterial_X35mmPrime' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, X2DCloudsBaseTexture_VoronoiSmooth) == 0x001678, "Member 'AKoratUDS_Ultra_Dynamic_Sky::X2DCloudsBaseTexture_VoronoiSmooth' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, X2DCloudsBaseTexture_VoronoiDiverse) == 0x0016A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::X2DCloudsBaseTexture_VoronoiDiverse' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StaticCloudsParentMaterial_UseSkyAtmosphere) == 0x0016D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StaticCloudsParentMaterial_UseSkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, StaticCloudsParentMaterial_NotUseSkyAtmosphere) == 0x001708, "Member 'AKoratUDS_Ultra_Dynamic_Sky::StaticCloudsParentMaterial_NotUseSkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, ApproximateRealSunMoonandStars_EquationOfTimeCurve) == 0x001738, "Member 'AKoratUDS_Ultra_Dynamic_Sky::ApproximateRealSunMoonandStars_EquationOfTimeCurve' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky, UltraDynamicWeatherParameters) == 0x001740, "Member 'AKoratUDS_Ultra_Dynamic_Sky::UltraDynamicWeatherParameters' has a wrong offset!");

// Class KoratUDS.KoratUDS_Ultra_Dynamic_Sky_Ex
// 0x03D0 (0x1B20 - 0x1750)
class AKoratUDS_Ultra_Dynamic_Sky_Ex final : public AKoratUDS_Ultra_Dynamic_Sky
{
public:
	struct FVector2D                              CloudWholeRotationCenter;                          // 0x1750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudWholeRotationSpeed;                           // 0x1760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudVortexCenter;                                 // 0x1768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexRotationSpeed;                          // 0x1778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexTimeBase;                               // 0x1780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexTimePeriod;                             // 0x1788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexAttenuationLUTScale;                    // 0x1790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudVortexAttenuationLUT;                         // 0x1798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudWholeRotationAngle;                           // 0x17A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloudVortexTimeProgress;                           // 0x17A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Map000_Sky_Ratio;                                  // 0x17B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BaseSkyUVScale;                                    // 0x17B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BaseSkyTexture;                                    // 0x17C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Moon1UVScale;                                      // 0x17D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Moon1UVTranslation;                                // 0x17E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon1RotationAngle;                                // 0x17F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Moon1Texture;                                      // 0x17F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon1Intensity;                                    // 0x1800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Moon1ColorDetail;                                  // 0x1808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon1MaskTransparency;                             // 0x1818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon1Radius;                                       // 0x1820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon1Density;                                      // 0x1828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Moon2UVScale;                                      // 0x1830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Moon2UVTranslation;                                // 0x1840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon2RotationAngle;                                // 0x1850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Moon2Texture;                                      // 0x1858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon2Intensity;                                    // 0x1860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Moon2ColorDetail;                                  // 0x1868(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon2MaskTransparency;                             // 0x1878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon2Radius;                                       // 0x1880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon2Density;                                      // 0x1888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Moon3UVScale;                                      // 0x1890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Moon3UVTranslation;                                // 0x18A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon3RotationAngle;                                // 0x18B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Moon3Texture;                                      // 0x18B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon3Intensity;                                    // 0x18C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Moon3ColorDetail;                                  // 0x18C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon3MaskTransparency;                             // 0x18D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon3Radius;                                       // 0x18E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Moon3Density;                                      // 0x18E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMap000_RealtimeUpdate;                            // 0x18F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F1[0x7];                                     // 0x18F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Map000_Cloud_Ratio;                                // 0x18F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudBaseColorAdjust;                              // 0x1900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudFarUVScale;                                   // 0x1910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarRotationSpeed;                             // 0x1920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudFarTexture;                                   // 0x1928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarIntensity;                                 // 0x1930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarMaskIntensity;                             // 0x1938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarTransparency;                              // 0x1940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudNearUVScale;                                  // 0x1948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearRotationSpeed;                            // 0x1958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudNearTexture;                                  // 0x1960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearIntensity;                                // 0x1968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearMaskIntensity;                            // 0x1970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearTransparency;                             // 0x1978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudThinUVScale;                                  // 0x1980(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinRotationSpeed;                            // 0x1990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudThinTexture;                                  // 0x1998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinIntensity;                                // 0x19A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinMaskIntensity;                            // 0x19A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinTransparency;                             // 0x19B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudTopUVScale;                                   // 0x19B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopRotationSpeed;                             // 0x19C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudTopTexture;                                   // 0x19D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopIntensity;                                 // 0x19D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopMaskIntensity;                             // 0x19E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopTransparency;                              // 0x19E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarRotationAngle;                             // 0x19F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloudNearRotationAngle;                            // 0x19F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloudThinRotationAngle;                            // 0x1A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloudTopRotationAngle;                             // 0x1A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CloudLightColor2;                                  // 0x1A10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor2;                                   // 0x1A20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudColorDensity;                                 // 0x1A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopCloudColor_Near;                                // 0x1A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MiddleCloudColor_Near;                             // 0x1A48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomCloudColor_Near;                             // 0x1A58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopCloudColor_Far;                                 // 0x1A68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MiddleCloudColor_Far;                              // 0x1A78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomCloudColor_Far;                              // 0x1A88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BottomColorBlend;                                  // 0x1A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudHight;                                        // 0x1AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudContrast;                                     // 0x1AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceCloudColor;                                // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceCloudContrast;                             // 0x1AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowSpeed;                            // 0x1AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowDirection;                        // 0x1AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowDetail1Strength;                  // 0x1AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowDetail2Strength;                  // 0x1AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowContrast;                         // 0x1AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowRangeRadius;                      // 0x1AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowRangeDensity;                     // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowHorizontalSpeed;                  // 0x1AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowOverallBrightness;                // 0x1B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastSwirlContrastOrigin;                       // 0x1B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastSwirlContrastScale;                        // 0x1B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogMaxOpacity;                                     // 0x1B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CustomVolumeCloudParameter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoratUDS_Ultra_Dynamic_Sky_Ex">();
	}
	static class AKoratUDS_Ultra_Dynamic_Sky_Ex* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKoratUDS_Ultra_Dynamic_Sky_Ex>();
	}
};
static_assert(alignof(AKoratUDS_Ultra_Dynamic_Sky_Ex) == 0x000008, "Wrong alignment on AKoratUDS_Ultra_Dynamic_Sky_Ex");
static_assert(sizeof(AKoratUDS_Ultra_Dynamic_Sky_Ex) == 0x001B20, "Wrong size on AKoratUDS_Ultra_Dynamic_Sky_Ex");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudWholeRotationCenter) == 0x001750, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudWholeRotationCenter' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudWholeRotationSpeed) == 0x001760, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudWholeRotationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexCenter) == 0x001768, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexCenter' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexRotationSpeed) == 0x001778, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexRotationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexTimeBase) == 0x001780, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexTimeBase' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexTimePeriod) == 0x001788, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexTimePeriod' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexAttenuationLUTScale) == 0x001790, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexAttenuationLUTScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexAttenuationLUT) == 0x001798, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexAttenuationLUT' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudWholeRotationAngle) == 0x0017A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudWholeRotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudVortexTimeProgress) == 0x0017A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudVortexTimeProgress' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Map000_Sky_Ratio) == 0x0017B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Map000_Sky_Ratio' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, BaseSkyUVScale) == 0x0017B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::BaseSkyUVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, BaseSkyTexture) == 0x0017C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::BaseSkyTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1UVScale) == 0x0017D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1UVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1UVTranslation) == 0x0017E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1UVTranslation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1RotationAngle) == 0x0017F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1RotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1Texture) == 0x0017F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1Texture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1Intensity) == 0x001800, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1Intensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1ColorDetail) == 0x001808, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1ColorDetail' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1MaskTransparency) == 0x001818, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1MaskTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1Radius) == 0x001820, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1Radius' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon1Density) == 0x001828, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon1Density' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2UVScale) == 0x001830, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2UVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2UVTranslation) == 0x001840, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2UVTranslation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2RotationAngle) == 0x001850, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2RotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2Texture) == 0x001858, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2Texture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2Intensity) == 0x001860, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2Intensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2ColorDetail) == 0x001868, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2ColorDetail' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2MaskTransparency) == 0x001878, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2MaskTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2Radius) == 0x001880, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2Radius' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon2Density) == 0x001888, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon2Density' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3UVScale) == 0x001890, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3UVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3UVTranslation) == 0x0018A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3UVTranslation' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3RotationAngle) == 0x0018B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3RotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3Texture) == 0x0018B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3Texture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3Intensity) == 0x0018C0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3Intensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3ColorDetail) == 0x0018C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3ColorDetail' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3MaskTransparency) == 0x0018D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3MaskTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3Radius) == 0x0018E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3Radius' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Moon3Density) == 0x0018E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Moon3Density' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, bMap000_RealtimeUpdate) == 0x0018F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::bMap000_RealtimeUpdate' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, Map000_Cloud_Ratio) == 0x0018F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::Map000_Cloud_Ratio' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudBaseColorAdjust) == 0x001900, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudBaseColorAdjust' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarUVScale) == 0x001910, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarUVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarRotationSpeed) == 0x001920, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarRotationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarTexture) == 0x001928, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarIntensity) == 0x001930, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarMaskIntensity) == 0x001938, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarMaskIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarTransparency) == 0x001940, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearUVScale) == 0x001948, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearUVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearRotationSpeed) == 0x001958, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearRotationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearTexture) == 0x001960, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearIntensity) == 0x001968, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearMaskIntensity) == 0x001970, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearMaskIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearTransparency) == 0x001978, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinUVScale) == 0x001980, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinUVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinRotationSpeed) == 0x001990, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinRotationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinTexture) == 0x001998, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinIntensity) == 0x0019A0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinMaskIntensity) == 0x0019A8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinMaskIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinTransparency) == 0x0019B0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopUVScale) == 0x0019B8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopUVScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopRotationSpeed) == 0x0019C8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopRotationSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopTexture) == 0x0019D0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopTexture' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopIntensity) == 0x0019D8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopMaskIntensity) == 0x0019E0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopMaskIntensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopTransparency) == 0x0019E8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopTransparency' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudFarRotationAngle) == 0x0019F0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudFarRotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudNearRotationAngle) == 0x0019F8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudNearRotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudThinRotationAngle) == 0x001A00, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudThinRotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudTopRotationAngle) == 0x001A08, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudTopRotationAngle' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudLightColor2) == 0x001A10, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudLightColor2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudDarkColor2) == 0x001A20, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudDarkColor2' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudColorDensity) == 0x001A30, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudColorDensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, TopCloudColor_Near) == 0x001A38, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::TopCloudColor_Near' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, MiddleCloudColor_Near) == 0x001A48, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::MiddleCloudColor_Near' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, BottomCloudColor_Near) == 0x001A58, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::BottomCloudColor_Near' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, TopCloudColor_Far) == 0x001A68, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::TopCloudColor_Far' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, MiddleCloudColor_Far) == 0x001A78, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::MiddleCloudColor_Far' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, BottomCloudColor_Far) == 0x001A88, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::BottomCloudColor_Far' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, BottomColorBlend) == 0x001A98, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::BottomColorBlend' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudHight) == 0x001AA0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudHight' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CloudContrast) == 0x001AA8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CloudContrast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, DistanceCloudColor) == 0x001AB0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::DistanceCloudColor' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, DistanceCloudContrast) == 0x001AB8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::DistanceCloudContrast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowSpeed) == 0x001AC0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowDirection) == 0x001AC8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowDirection' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowDetail1Strength) == 0x001AD0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowDetail1Strength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowDetail2Strength) == 0x001AD8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowDetail2Strength' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowContrast) == 0x001AE0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowContrast' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowRangeRadius) == 0x001AE8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowRangeRadius' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowRangeDensity) == 0x001AF0, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowRangeDensity' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowHorizontalSpeed) == 0x001AF8, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, CustomCloudShadowOverallBrightness) == 0x001B00, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::CustomCloudShadowOverallBrightness' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, OvercastSwirlContrastOrigin) == 0x001B08, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::OvercastSwirlContrastOrigin' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, OvercastSwirlContrastScale) == 0x001B10, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::OvercastSwirlContrastScale' has a wrong offset!");
static_assert(offsetof(AKoratUDS_Ultra_Dynamic_Sky_Ex, FogMaxOpacity) == 0x001B18, "Member 'AKoratUDS_Ultra_Dynamic_Sky_Ex::FogMaxOpacity' has a wrong offset!");

}

