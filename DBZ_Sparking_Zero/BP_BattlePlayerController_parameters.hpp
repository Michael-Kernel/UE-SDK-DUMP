#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlePlayerController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "EBattleKey_structs.hpp"


namespace SDK::Params
{

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.AddMovementInputXY
// 0x0050 (0x0050 - 0x0000)
struct BP_BattlePlayerController_C_AddMovementInputXY final
{
public:
	struct FVector2D                              InputVector;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MovementRotation;                                  // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RightAxisValue;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForwardAxisValue;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_AddMovementInputXY) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_AddMovementInputXY");
static_assert(sizeof(BP_BattlePlayerController_C_AddMovementInputXY) == 0x000050, "Wrong size on BP_BattlePlayerController_C_AddMovementInputXY");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputXY, InputVector) == 0x000000, "Member 'BP_BattlePlayerController_C_AddMovementInputXY::InputVector' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputXY, MovementRotation) == 0x000010, "Member 'BP_BattlePlayerController_C_AddMovementInputXY::MovementRotation' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputXY, RightAxisValue) == 0x000028, "Member 'BP_BattlePlayerController_C_AddMovementInputXY::RightAxisValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputXY, ForwardAxisValue) == 0x000030, "Member 'BP_BattlePlayerController_C_AddMovementInputXY::ForwardAxisValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputXY, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000038, "Member 'BP_BattlePlayerController_C_AddMovementInputXY::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputXY, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_BattlePlayerController_C_AddMovementInputXY::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.AddMovementInputZ
// 0x0020 (0x0020 - 0x0000)
struct BP_BattlePlayerController_C_AddMovementInputZ final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_AddMovementInputZ) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_AddMovementInputZ");
static_assert(sizeof(BP_BattlePlayerController_C_AddMovementInputZ) == 0x000020, "Wrong size on BP_BattlePlayerController_C_AddMovementInputZ");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputZ, AxisValue) == 0x000000, "Member 'BP_BattlePlayerController_C_AddMovementInputZ::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputZ, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000008, "Member 'BP_BattlePlayerController_C_AddMovementInputZ::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_AddMovementInputZ, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BattlePlayerController_C_AddMovementInputZ::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.ExecuteInputProcess
// 0x0060 (0x0060 - 0x0000)
struct BP_BattlePlayerController_C_ExecuteInputProcess final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USSAiCharacterStatusComponent*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAiEnabled_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSBattleGameStateBase*                 K2Node_DynamicCast_AsSSBattle_Game_State_Base;     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPausedByAnyController_ReturnValue;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_ExecuteInputProcess) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_ExecuteInputProcess");
static_assert(sizeof(BP_BattlePlayerController_C_ExecuteInputProcess) == 0x000060, "Wrong size on BP_BattlePlayerController_C_ExecuteInputProcess");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, Temp_int_Variable) == 0x000000, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, Temp_int_Variable_1) == 0x000004, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_GetValidValue_ReturnValue) == 0x000010, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000011, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000012, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000020, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, K2Node_DynamicCast_AsSSCharacter) == 0x000028, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_MakeLiteralInt_ReturnValue) == 0x000034, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_GetComponentByClass_ReturnValue) == 0x000038, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_IsAiEnabled_ReturnValue) == 0x000042, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_IsAiEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_GetGameState_ReturnValue) == 0x000048, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, K2Node_DynamicCast_AsSSBattle_Game_State_Base) == 0x000050, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::K2Node_DynamicCast_AsSSBattle_Game_State_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteInputProcess, CallFunc_IsPausedByAnyController_ReturnValue) == 0x000059, "Member 'BP_BattlePlayerController_C_ExecuteInputProcess::CallFunc_IsPausedByAnyController_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.ExecuteUbergraph_BP_BattlePlayerController
// 0x0070 (0x0070 - 0x0000)
struct BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBranch                                  CallFunc_CheckPadControllEnable_OutResult;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_GetLocomotionComponent_ActorComponent;    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_GetLocomotionComponent_ActorComponent_1;  // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_PossessedPawn;                        // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController");
static_assert(sizeof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController) == 0x000070, "Wrong size on BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, EntryPoint) == 0x000000, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, CallFunc_CheckPadControllEnable_OutResult) == 0x000004, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::CallFunc_CheckPadControllEnable_OutResult' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000030, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, CallFunc_GetLocomotionComponent_ActorComponent) == 0x000038, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::CallFunc_GetLocomotionComponent_ActorComponent' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000040, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, CallFunc_GetLocomotionComponent_ActorComponent_1) == 0x000058, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::CallFunc_GetLocomotionComponent_ActorComponent_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, K2Node_Event_PossessedPawn) == 0x000060, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::K2Node_Event_PossessedPawn' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_BattlePlayerController_C_ExecuteUbergraph_BP_BattlePlayerController::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.GetFreeCameraRotationInputVector
// 0x0030 (0x0030 - 0x0000)
struct BP_BattlePlayerController_C_GetFreeCameraRotationInputVector final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InputVector;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetCameraRotateInputKeyVector_ReturnValue; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_GetFreeCameraRotationInputVector) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_GetFreeCameraRotationInputVector");
static_assert(sizeof(BP_BattlePlayerController_C_GetFreeCameraRotationInputVector) == 0x000030, "Wrong size on BP_BattlePlayerController_C_GetFreeCameraRotationInputVector");
static_assert(offsetof(BP_BattlePlayerController_C_GetFreeCameraRotationInputVector, IsValid) == 0x000000, "Member 'BP_BattlePlayerController_C_GetFreeCameraRotationInputVector::IsValid' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetFreeCameraRotationInputVector, InputVector) == 0x000008, "Member 'BP_BattlePlayerController_C_GetFreeCameraRotationInputVector::InputVector' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetFreeCameraRotationInputVector, CallFunc_GetCameraRotateInputKeyVector_ReturnValue) == 0x000018, "Member 'BP_BattlePlayerController_C_GetFreeCameraRotationInputVector::CallFunc_GetCameraRotateInputKeyVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetFreeCameraRotationInputVector, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000028, "Member 'BP_BattlePlayerController_C_GetFreeCameraRotationInputVector::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.GetMovementInputVector
// 0x0030 (0x0030 - 0x0000)
struct BP_BattlePlayerController_C_GetMovementInputVector final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InputVector;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMovementInputKeyVector_ReturnValue;    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_GetMovementInputVector) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_GetMovementInputVector");
static_assert(sizeof(BP_BattlePlayerController_C_GetMovementInputVector) == 0x000030, "Wrong size on BP_BattlePlayerController_C_GetMovementInputVector");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputVector, IsValid) == 0x000000, "Member 'BP_BattlePlayerController_C_GetMovementInputVector::IsValid' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputVector, InputVector) == 0x000008, "Member 'BP_BattlePlayerController_C_GetMovementInputVector::InputVector' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputVector, CallFunc_GetMovementInputKeyVector_ReturnValue) == 0x000018, "Member 'BP_BattlePlayerController_C_GetMovementInputVector::CallFunc_GetMovementInputKeyVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputVector, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000028, "Member 'BP_BattlePlayerController_C_GetMovementInputVector::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.GetMovementInputZ
// 0x0010 (0x0010 - 0x0000)
struct BP_BattlePlayerController_C_GetMovementInputZ final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveDownIsDown;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveUpIsDown;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputBattleKeyDown_IsDown;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputBattleKeyDown_IsDown_1;            // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_GetMovementInputZ) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_GetMovementInputZ");
static_assert(sizeof(BP_BattlePlayerController_C_GetMovementInputZ) == 0x000010, "Wrong size on BP_BattlePlayerController_C_GetMovementInputZ");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, AxisValue) == 0x000000, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, MoveDownIsDown) == 0x000008, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::MoveDownIsDown' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, MoveUpIsDown) == 0x000009, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::MoveUpIsDown' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, CallFunc_IsInputBattleKeyDown_IsDown) == 0x00000A, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::CallFunc_IsInputBattleKeyDown_IsDown' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, CallFunc_IsInputBattleKeyDown_IsDown_1) == 0x00000B, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::CallFunc_IsInputBattleKeyDown_IsDown_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00000C, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementInputZ, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x00000D, "Member 'BP_BattlePlayerController_C_GetMovementInputZ::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.GetMovementRotation
// 0x00B0 (0x00B0 - 0x0000)
struct BP_BattlePlayerController_C_GetMovementRotation final
{
public:
	struct FVector2D                              InputVector;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MovementRotation;                                  // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_GetMovementRotation) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_GetMovementRotation");
static_assert(sizeof(BP_BattlePlayerController_C_GetMovementRotation) == 0x0000B0, "Wrong size on BP_BattlePlayerController_C_GetMovementRotation");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, InputVector) == 0x000000, "Member 'BP_BattlePlayerController_C_GetMovementRotation::InputVector' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, MovementRotation) == 0x000010, "Member 'BP_BattlePlayerController_C_GetMovementRotation::MovementRotation' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_GetControlRotation_ReturnValue) == 0x000028, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_BreakVector2D_X) == 0x000040, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00005C, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000070, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_MakeRotator_ReturnValue) == 0x000080, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000098, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000A0, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000A8, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_GetMovementRotation, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000AC, "Member 'BP_BattlePlayerController_C_GetMovementRotation::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.InputDebug
// 0x0020 (0x0020 - 0x0000)
struct BP_BattlePlayerController_C_InputDebug final
{
public:
	bool                                          CallFunc_WasInputKeyJustPressedDebugLockOnChange_ReturnValue; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_InputDebug) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_InputDebug");
static_assert(sizeof(BP_BattlePlayerController_C_InputDebug) == 0x000020, "Wrong size on BP_BattlePlayerController_C_InputDebug");
static_assert(offsetof(BP_BattlePlayerController_C_InputDebug, CallFunc_WasInputKeyJustPressedDebugLockOnChange_ReturnValue) == 0x000000, "Member 'BP_BattlePlayerController_C_InputDebug::CallFunc_WasInputKeyJustPressedDebugLockOnChange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputDebug, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000008, "Member 'BP_BattlePlayerController_C_InputDebug::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputDebug, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BattlePlayerController_C_InputDebug::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.InputFreeCameraRotateYawPitch
// 0x0048 (0x0048 - 0x0000)
struct BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch final
{
public:
	struct FVector2D                              InputVector;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValidInput;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFreeCameraRotationInputVector_IsValid; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetFreeCameraRotationInputVector_InputVector; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch");
static_assert(sizeof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch) == 0x000048, "Wrong size on BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, InputVector) == 0x000000, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::InputVector' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, IsValidInput) == 0x000010, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::IsValidInput' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000020, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, CallFunc_GetFreeCameraRotationInputVector_IsValid) == 0x000031, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::CallFunc_GetFreeCameraRotationInputVector_IsValid' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch, CallFunc_GetFreeCameraRotationInputVector_InputVector) == 0x000038, "Member 'BP_BattlePlayerController_C_InputFreeCameraRotateYawPitch::CallFunc_GetFreeCameraRotationInputVector_InputVector' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.InputMovement
// 0x0010 (0x0010 - 0x0000)
struct BP_BattlePlayerController_C_InputMovement final
{
public:
	struct FVector2D                              InputVector;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_InputMovement) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_InputMovement");
static_assert(sizeof(BP_BattlePlayerController_C_InputMovement) == 0x000010, "Wrong size on BP_BattlePlayerController_C_InputMovement");
static_assert(offsetof(BP_BattlePlayerController_C_InputMovement, InputVector) == 0x000000, "Member 'BP_BattlePlayerController_C_InputMovement::InputVector' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.InputMoveXY
// 0x0090 (0x0090 - 0x0000)
struct BP_BattlePlayerController_C_InputMoveXY final
{
public:
	bool                                          IsValidInput;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MovingRotation;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              InputVector;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion_1;   // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetMovementRotation_MovementRotation;     // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMovementInputVector_IsValid;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetMovementInputVector_InputVector;       // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_InputMoveXY) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_InputMoveXY");
static_assert(sizeof(BP_BattlePlayerController_C_InputMoveXY) == 0x000090, "Wrong size on BP_BattlePlayerController_C_InputMoveXY");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, IsValidInput) == 0x000000, "Member 'BP_BattlePlayerController_C_InputMoveXY::IsValidInput' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, MovingRotation) == 0x000008, "Member 'BP_BattlePlayerController_C_InputMoveXY::MovingRotation' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, InputVector) == 0x000020, "Member 'BP_BattlePlayerController_C_InputMoveXY::InputVector' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000030, "Member 'BP_BattlePlayerController_C_InputMoveXY::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BattlePlayerController_C_InputMoveXY::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, K2Node_DynamicCast_AsBPI_Character_Locomotion_1) == 0x000048, "Member 'BP_BattlePlayerController_C_InputMoveXY::K2Node_DynamicCast_AsBPI_Character_Locomotion_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_BattlePlayerController_C_InputMoveXY::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, CallFunc_GetMovementRotation_MovementRotation) == 0x000060, "Member 'BP_BattlePlayerController_C_InputMoveXY::CallFunc_GetMovementRotation_MovementRotation' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, CallFunc_GetMovementInputVector_IsValid) == 0x000078, "Member 'BP_BattlePlayerController_C_InputMoveXY::CallFunc_GetMovementInputVector_IsValid' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveXY, CallFunc_GetMovementInputVector_InputVector) == 0x000080, "Member 'BP_BattlePlayerController_C_InputMoveXY::CallFunc_GetMovementInputVector_InputVector' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.InputMoveZ
// 0x0020 (0x0020 - 0x0000)
struct BP_BattlePlayerController_C_InputMoveZ final
{
public:
	double                                        CallFunc_GetMovementInputZ_AxisValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_InputMoveZ) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_InputMoveZ");
static_assert(sizeof(BP_BattlePlayerController_C_InputMoveZ) == 0x000020, "Wrong size on BP_BattlePlayerController_C_InputMoveZ");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveZ, CallFunc_GetMovementInputZ_AxisValue) == 0x000000, "Member 'BP_BattlePlayerController_C_InputMoveZ::CallFunc_GetMovementInputZ_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveZ, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000008, "Member 'BP_BattlePlayerController_C_InputMoveZ::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveZ, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BattlePlayerController_C_InputMoveZ::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_InputMoveZ, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000019, "Member 'BP_BattlePlayerController_C_InputMoveZ::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.IsInputBattleKeyDown
// 0x0014 (0x0014 - 0x0000)
struct BP_BattlePlayerController_C_IsInputBattleKeyDown final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownDownRevival_ReturnValue;    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownDragonHomingEnd_ReturnValue; // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownDragonHomingStart_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownDragonDashEnd_ReturnValue;  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownDragonDashStart_ReturnValue; // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownRush_ReturnValue;           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownStep_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownJump_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownSpecial_ReturnValue;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownCharge_ReturnValue;         // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownKidan_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownMoveDown_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownMoveUp_ReturnValue;         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_IsInputBattleKeyDown) == 0x000001, "Wrong alignment on BP_BattlePlayerController_C_IsInputBattleKeyDown");
static_assert(sizeof(BP_BattlePlayerController_C_IsInputBattleKeyDown) == 0x000014, "Wrong size on BP_BattlePlayerController_C_IsInputBattleKeyDown");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, IsDown) == 0x000001, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::IsDown' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, Temp_byte_Variable) == 0x000002, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, Temp_bool_Variable) == 0x000003, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, Temp_bool_Variable_1) == 0x000004, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, Temp_bool_Variable_2) == 0x000005, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownDownRevival_ReturnValue) == 0x000006, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownDownRevival_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownDragonHomingEnd_ReturnValue) == 0x000007, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownDragonHomingEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownDragonHomingStart_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownDragonHomingStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownDragonDashEnd_ReturnValue) == 0x000009, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownDragonDashEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownDragonDashStart_ReturnValue) == 0x00000A, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownDragonDashStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownRush_ReturnValue) == 0x00000B, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownRush_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownStep_ReturnValue) == 0x00000C, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownJump_ReturnValue) == 0x00000D, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownSpecial_ReturnValue) == 0x00000E, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownSpecial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownCharge_ReturnValue) == 0x00000F, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownCharge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownKidan_ReturnValue) == 0x000010, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownKidan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownMoveDown_ReturnValue) == 0x000011, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownMoveDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, CallFunc_IsInputKeyDownMoveUp_ReturnValue) == 0x000012, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::CallFunc_IsInputKeyDownMoveUp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputBattleKeyDown, K2Node_Select_Default) == 0x000013, "Member 'BP_BattlePlayerController_C_IsInputBattleKeyDown::K2Node_Select_Default' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.IsInputKoratBattleKeyDown
// 0x0003 (0x0003 - 0x0000)
struct BP_BattlePlayerController_C_IsInputKoratBattleKeyDown final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownBattleKey_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_IsInputKoratBattleKeyDown) == 0x000001, "Wrong alignment on BP_BattlePlayerController_C_IsInputKoratBattleKeyDown");
static_assert(sizeof(BP_BattlePlayerController_C_IsInputKoratBattleKeyDown) == 0x000003, "Wrong size on BP_BattlePlayerController_C_IsInputKoratBattleKeyDown");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputKoratBattleKeyDown, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_IsInputKoratBattleKeyDown::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputKoratBattleKeyDown, IsDown) == 0x000001, "Member 'BP_BattlePlayerController_C_IsInputKoratBattleKeyDown::IsDown' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_IsInputKoratBattleKeyDown, CallFunc_IsInputKeyDownBattleKey_ReturnValue) == 0x000002, "Member 'BP_BattlePlayerController_C_IsInputKoratBattleKeyDown::CallFunc_IsInputKeyDownBattleKey_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.ReceivePossess
// 0x0008 (0x0008 - 0x0000)
struct BP_BattlePlayerController_C_ReceivePossess final
{
public:
	class APawn*                                  PossessedPawn;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_ReceivePossess) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_ReceivePossess");
static_assert(sizeof(BP_BattlePlayerController_C_ReceivePossess) == 0x000008, "Wrong size on BP_BattlePlayerController_C_ReceivePossess");
static_assert(offsetof(BP_BattlePlayerController_C_ReceivePossess, PossessedPawn) == 0x000000, "Member 'BP_BattlePlayerController_C_ReceivePossess::PossessedPawn' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BattlePlayerController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BattlePlayerController_C_ReceiveTick");
static_assert(sizeof(BP_BattlePlayerController_C_ReceiveTick) == 0x000004, "Wrong size on BP_BattlePlayerController_C_ReceiveTick");
static_assert(offsetof(BP_BattlePlayerController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BattlePlayerController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.SendInputBattleKeyJustPressed
// 0x0048 (0x0048 - 0x0000)
struct BP_BattlePlayerController_C_SendInputBattleKeyJustPressed final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputBattleKeyJustPressed_IsPressed;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_SendInputBattleKeyJustPressed");
static_assert(sizeof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed) == 0x000048, "Wrong size on BP_BattlePlayerController_C_SendInputBattleKeyJustPressed");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, CallFunc_WasInputBattleKeyJustPressed_IsPressed) == 0x000010, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::CallFunc_WasInputBattleKeyJustPressed_IsPressed' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000030, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustPressed, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustPressed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.SendInputBattleKeyJustReleased
// 0x0048 (0x0048 - 0x0000)
struct BP_BattlePlayerController_C_SendInputBattleKeyJustReleased final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputBattleKeyJustReleased_IsReleased; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_SendInputBattleKeyJustReleased");
static_assert(sizeof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased) == 0x000048, "Wrong size on BP_BattlePlayerController_C_SendInputBattleKeyJustReleased");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, CallFunc_WasInputBattleKeyJustReleased_IsReleased) == 0x000010, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::CallFunc_WasInputBattleKeyJustReleased_IsReleased' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000030, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputBattleKeyJustReleased, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_BattlePlayerController_C_SendInputBattleKeyJustReleased::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.SendInputKoratBattleKeyDown
// 0x0080 (0x0080 - 0x0000)
struct BP_BattlePlayerController_C_SendInputKoratBattleKeyDown final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKoratBattleKeyDown_IsDown;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_2;         // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_3;         // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_SendInputKoratBattleKeyDown");
static_assert(sizeof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown) == 0x000080, "Wrong size on BP_BattlePlayerController_C_SendInputKoratBattleKeyDown");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, CallFunc_IsInputKoratBattleKeyDown_IsDown) == 0x000010, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::CallFunc_IsInputKoratBattleKeyDown_IsDown' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000030, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000038, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_AsBPI_Character_Base_2) == 0x000050, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_AsBPI_Character_Base_2' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_AsBPI_Character_Base_3) == 0x000068, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_AsBPI_Character_Base_3' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyDown, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyDown::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.SendInputKoratBattleKeyJustPressed
// 0x0048 (0x0048 - 0x0000)
struct BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKoratBattleKeyJustPressed_IsPressed; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed");
static_assert(sizeof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed) == 0x000048, "Wrong size on BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, CallFunc_WasInputKoratBattleKeyJustPressed_IsPressed) == 0x000010, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::CallFunc_WasInputKoratBattleKeyJustPressed_IsPressed' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000030, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustPressed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.SendInputKoratBattleKeyJustReleased
// 0x0048 (0x0048 - 0x0000)
struct BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKoratBattleKeyJustReleased_IsReleased; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased");
static_assert(sizeof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased) == 0x000048, "Wrong size on BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, CallFunc_WasInputKoratBattleKeyJustReleased_IsReleased) == 0x000010, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::CallFunc_WasInputKoratBattleKeyJustReleased_IsReleased' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000030, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_BattlePlayerController_C_SendInputKoratBattleKeyJustReleased::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.StartKeyInputReplay
// 0x0004 (0x0004 - 0x0000)
struct BP_BattlePlayerController_C_StartKeyInputReplay final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_StartKeyInputReplay) == 0x000004, "Wrong alignment on BP_BattlePlayerController_C_StartKeyInputReplay");
static_assert(sizeof(BP_BattlePlayerController_C_StartKeyInputReplay) == 0x000004, "Wrong size on BP_BattlePlayerController_C_StartKeyInputReplay");
static_assert(offsetof(BP_BattlePlayerController_C_StartKeyInputReplay, PlayerIndex) == 0x000000, "Member 'BP_BattlePlayerController_C_StartKeyInputReplay::PlayerIndex' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.StartKeyInputSave
// 0x0004 (0x0004 - 0x0000)
struct BP_BattlePlayerController_C_StartKeyInputSave final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_StartKeyInputSave) == 0x000004, "Wrong alignment on BP_BattlePlayerController_C_StartKeyInputSave");
static_assert(sizeof(BP_BattlePlayerController_C_StartKeyInputSave) == 0x000004, "Wrong size on BP_BattlePlayerController_C_StartKeyInputSave");
static_assert(offsetof(BP_BattlePlayerController_C_StartKeyInputSave, PlayerIndex) == 0x000000, "Member 'BP_BattlePlayerController_C_StartKeyInputSave::PlayerIndex' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.UpdateHeightAxisValue
// 0x0018 (0x0018 - 0x0000)
struct BP_BattlePlayerController_C_UpdateHeightAxisValue final
{
public:
	bool                                          IsUpward;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_UpdateHeightAxisValue) == 0x000008, "Wrong alignment on BP_BattlePlayerController_C_UpdateHeightAxisValue");
static_assert(sizeof(BP_BattlePlayerController_C_UpdateHeightAxisValue) == 0x000018, "Wrong size on BP_BattlePlayerController_C_UpdateHeightAxisValue");
static_assert(offsetof(BP_BattlePlayerController_C_UpdateHeightAxisValue, IsUpward) == 0x000000, "Member 'BP_BattlePlayerController_C_UpdateHeightAxisValue::IsUpward' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_UpdateHeightAxisValue, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_UpdateHeightAxisValue::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_UpdateHeightAxisValue, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'BP_BattlePlayerController_C_UpdateHeightAxisValue::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.WasInputBattleKeyJustPressed
// 0x0014 (0x0014 - 0x0000)
struct BP_BattlePlayerController_C_WasInputBattleKeyJustPressed final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressed;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedDownRevival_ReturnValue; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedDragonHomingEnd_ReturnValue; // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedDragonHomingStart_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedDragonDashEnd_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedDragonDashStart_ReturnValue; // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedRush_ReturnValue;   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedStep_ReturnValue;   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedJump_ReturnValue;   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedMoveDown_ReturnValue; // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedMoveUp_ReturnValue; // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedSpecial_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedCharge_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedKidan_ReturnValue;  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed) == 0x000001, "Wrong alignment on BP_BattlePlayerController_C_WasInputBattleKeyJustPressed");
static_assert(sizeof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed) == 0x000014, "Wrong size on BP_BattlePlayerController_C_WasInputBattleKeyJustPressed");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, IsPressed) == 0x000001, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::IsPressed' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, Temp_byte_Variable) == 0x000002, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, Temp_bool_Variable) == 0x000003, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, Temp_bool_Variable_1) == 0x000004, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, Temp_bool_Variable_2) == 0x000005, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedDownRevival_ReturnValue) == 0x000006, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedDownRevival_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedDragonHomingEnd_ReturnValue) == 0x000007, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedDragonHomingEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedDragonHomingStart_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedDragonHomingStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedDragonDashEnd_ReturnValue) == 0x000009, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedDragonDashEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedDragonDashStart_ReturnValue) == 0x00000A, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedDragonDashStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedRush_ReturnValue) == 0x00000B, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedRush_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedStep_ReturnValue) == 0x00000C, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedJump_ReturnValue) == 0x00000D, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedMoveDown_ReturnValue) == 0x00000E, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedMoveDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedMoveUp_ReturnValue) == 0x00000F, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedMoveUp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedSpecial_ReturnValue) == 0x000010, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedSpecial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedCharge_ReturnValue) == 0x000011, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedCharge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedKidan_ReturnValue) == 0x000012, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedKidan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustPressed, K2Node_Select_Default) == 0x000013, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustPressed::K2Node_Select_Default' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.WasInputBattleKeyJustReleased
// 0x0014 (0x0014 - 0x0000)
struct BP_BattlePlayerController_C_WasInputBattleKeyJustReleased final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReleased;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedDownRevival_ReturnValue; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedDragonHomingEnd_ReturnValue; // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedDragonHomingStart_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedDragonDashEnd_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedDragonDashStart_ReturnValue; // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedRush_ReturnValue;  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedStep_ReturnValue;  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedJump_ReturnValue;  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedSpecial_ReturnValue; // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedCharge_ReturnValue; // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedKidan_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedMoveDown_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedMoveUp_ReturnValue; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased) == 0x000001, "Wrong alignment on BP_BattlePlayerController_C_WasInputBattleKeyJustReleased");
static_assert(sizeof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased) == 0x000014, "Wrong size on BP_BattlePlayerController_C_WasInputBattleKeyJustReleased");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, IsReleased) == 0x000001, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::IsReleased' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, Temp_byte_Variable) == 0x000002, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, Temp_bool_Variable) == 0x000003, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, Temp_bool_Variable_1) == 0x000004, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, Temp_bool_Variable_2) == 0x000005, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedDownRevival_ReturnValue) == 0x000006, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedDownRevival_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedDragonHomingEnd_ReturnValue) == 0x000007, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedDragonHomingEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedDragonHomingStart_ReturnValue) == 0x000008, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedDragonHomingStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedDragonDashEnd_ReturnValue) == 0x000009, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedDragonDashEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedDragonDashStart_ReturnValue) == 0x00000A, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedDragonDashStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedRush_ReturnValue) == 0x00000B, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedRush_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedStep_ReturnValue) == 0x00000C, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedJump_ReturnValue) == 0x00000D, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedSpecial_ReturnValue) == 0x00000E, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedSpecial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedCharge_ReturnValue) == 0x00000F, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedCharge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedKidan_ReturnValue) == 0x000010, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedKidan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedMoveDown_ReturnValue) == 0x000011, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedMoveDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedMoveUp_ReturnValue) == 0x000012, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedMoveUp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputBattleKeyJustReleased, K2Node_Select_Default) == 0x000013, "Member 'BP_BattlePlayerController_C_WasInputBattleKeyJustReleased::K2Node_Select_Default' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.WasInputKoratBattleKeyJustPressed
// 0x0003 (0x0003 - 0x0000)
struct BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressed;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedBattleKey_ReturnValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed) == 0x000001, "Wrong alignment on BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed");
static_assert(sizeof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed) == 0x000003, "Wrong size on BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed, IsPressed) == 0x000001, "Member 'BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed::IsPressed' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed, CallFunc_WasInputKeyJustPressedBattleKey_ReturnValue) == 0x000002, "Member 'BP_BattlePlayerController_C_WasInputKoratBattleKeyJustPressed::CallFunc_WasInputKeyJustPressedBattleKey_ReturnValue' has a wrong offset!");

// Function BP_BattlePlayerController.BP_BattlePlayerController_C.WasInputKoratBattleKeyJustReleased
// 0x0003 (0x0003 - 0x0000)
struct BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReleased;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedBattleKey_ReturnValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased) == 0x000001, "Wrong alignment on BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased");
static_assert(sizeof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased) == 0x000003, "Wrong size on BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased::BattleKey' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased, IsReleased) == 0x000001, "Member 'BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased::IsReleased' has a wrong offset!");
static_assert(offsetof(BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased, CallFunc_WasInputKeyJustReleasedBattleKey_ReturnValue) == 0x000002, "Member 'BP_BattlePlayerController_C_WasInputKoratBattleKeyJustReleased::CallFunc_WasInputKeyJustReleasedBattleKey_ReturnValue' has a wrong offset!");

}

