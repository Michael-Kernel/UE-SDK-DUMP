#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubDashUkemi

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubDashUkemi.BP_CharacterLocomotionSubDashUkemi_C
// 0x0388 (0x03E8 - 0x0060)
class UBP_CharacterLocomotionSubDashUkemi_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	EKoratDashUkemiState                          DashUkemiStatus;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUkemiType                           DashUkemiType;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDashUkemiInput;                                  // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDashUkemiTimeOver;                               // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DashUkemiBlowTimer;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DashUkemiReserved;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              DashUkemiHitBackData;                              // 0x0078(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                DashUkemiKnockBackVector;                          // 0x0358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratBlowReactionDashUkemiMovementParameter DashUkemiMoveParameter;                            // 0x0370(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DashUkemiMaxAddMoveTime;                           // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashUkemiAddMoveTimer;                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DashUkemiRotation;                                 // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                DashUkemiHitNormal;                                // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug__________e_8k__;                             // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatusOld;                               // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangedLP1toLP2;                                 // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CB[0x5];                                      // 0x03CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DragonDashArrivalTime;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DragonDashTimer;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         ______________;                                    // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckDashUkemiInput(bool* IsInputRequest);
	void GetDashUkemiINParameter(double* E_____B_, double* _____________Y____gn__B_, struct FKoratBlowReactionDashUkemiMovementParameter* _______, double* _____);
	void GetDashUkemiParameter(struct FKoratBlowReactionDashUkemiParameter* _______________);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void InitializeAdditionalDragonDashEnd();
	void InitializeDashUkemiInput();
	void IsEnableAction(bool* IsEnable);
	void SetDashUkemiStatus(EKoratDashUkemiState InDashUkemiStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetUpDashUkemiMovement_Parameter(EKoratDashUkemiState InDashUkemiStatus);
	void SetUpDragonDashParameter();
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StartDashUkemiDragonDash();
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateAdditionalDragonDashEnd(ECharacterLocomotionEventType InEventType, double InDeltaSeconds);
	void UpdateDashUkemiInput(double InDeltaSeconds);
	void UpdateDashUkemiMove(double InDeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubDashUkemi_C">();
	}
	static class UBP_CharacterLocomotionSubDashUkemi_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubDashUkemi_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubDashUkemi_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubDashUkemi_C");
static_assert(sizeof(UBP_CharacterLocomotionSubDashUkemi_C) == 0x0003E8, "Wrong size on UBP_CharacterLocomotionSubDashUkemi_C");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiType) == 0x000061, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, IsDashUkemiInput) == 0x000062, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::IsDashUkemiInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, IsDashUkemiTimeOver) == 0x000063, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::IsDashUkemiTimeOver' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiBlowTimer) == 0x000068, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiBlowTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiReserved) == 0x000070, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiReserved' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiHitBackData) == 0x000078, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiHitBackData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiKnockBackVector) == 0x000358, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiKnockBackVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiMoveParameter) == 0x000370, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiMoveParameter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiMaxAddMoveTime) == 0x000388, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiMaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiAddMoveTimer) == 0x000390, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiAddMoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiRotation) == 0x000398, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DashUkemiHitNormal) == 0x0003B0, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DashUkemiHitNormal' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, Debug__________e_8k__) == 0x0003C8, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::Debug__________e_8k__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DragonDashStatusOld) == 0x0003C9, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DragonDashStatusOld' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, IsChangedLP1toLP2) == 0x0003CA, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::IsChangedLP1toLP2' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DragonDashArrivalTime) == 0x0003D0, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DragonDashArrivalTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, DragonDashTimer) == 0x0003D8, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::DragonDashTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUkemi_C, ______________) == 0x0003E0, "Member 'UBP_CharacterLocomotionSubDashUkemi_C::______________' has a wrong offset!");

}

