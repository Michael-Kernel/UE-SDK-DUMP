#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratControlRigExtension

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ControlRig_structs.hpp"


namespace SDK
{

// Enum KoratControlRigExtension.EKoratLipsAnalyzerStatus
// NumValues: 0x0004
enum class EKoratLipsAnalyzerStatus : uint8
{
	Stop                                     = 0,
	Reading                                  = 1,
	TransitioningToShut                      = 2,
	EKoratLipsAnalyzerStatus_MAX             = 3,
};

// ScriptStruct KoratControlRigExtension.KoratControlRigSocketInfo
// 0x0070 (0x0070 - 0x0000)
struct FKoratControlRigSocketInfo final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             PBS_Transform;                                     // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratControlRigSocketInfo) == 0x000010, "Wrong alignment on FKoratControlRigSocketInfo");
static_assert(sizeof(FKoratControlRigSocketInfo) == 0x000070, "Wrong size on FKoratControlRigSocketInfo");
static_assert(offsetof(FKoratControlRigSocketInfo, SocketName) == 0x000000, "Member 'FKoratControlRigSocketInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FKoratControlRigSocketInfo, ParentBoneName) == 0x000008, "Member 'FKoratControlRigSocketInfo::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FKoratControlRigSocketInfo, PBS_Transform) == 0x000010, "Member 'FKoratControlRigSocketInfo::PBS_Transform' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_IKChainLink
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FKoratRigUnit_IKChainLink final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_IKChainLink) == 0x000008, "Wrong alignment on FKoratRigUnit_IKChainLink");
static_assert(sizeof(FKoratRigUnit_IKChainLink) == 0x000070, "Wrong size on FKoratRigUnit_IKChainLink");

// ScriptStruct KoratControlRigExtension.KoratControlRigTraceResult
// 0x0050 (0x0050 - 0x0000)
struct FKoratControlRigTraceResult final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratControlRigTraceResult) == 0x000008, "Wrong alignment on FKoratControlRigTraceResult");
static_assert(sizeof(FKoratControlRigTraceResult) == 0x000050, "Wrong size on FKoratControlRigTraceResult");
static_assert(offsetof(FKoratControlRigTraceResult, bHit) == 0x000000, "Member 'FKoratControlRigTraceResult::bHit' has a wrong offset!");
static_assert(offsetof(FKoratControlRigTraceResult, HitLocation) == 0x000008, "Member 'FKoratControlRigTraceResult::HitLocation' has a wrong offset!");
static_assert(offsetof(FKoratControlRigTraceResult, HitNormal) == 0x000020, "Member 'FKoratControlRigTraceResult::HitNormal' has a wrong offset!");
static_assert(offsetof(FKoratControlRigTraceResult, StartLocation) == 0x000038, "Member 'FKoratControlRigTraceResult::StartLocation' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_LegIKData
// 0x0100 (0x0100 - 0x0000)
struct alignas(0x10) FKoratRigUnit_LegIKData final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_LegIKData) == 0x000010, "Wrong alignment on FKoratRigUnit_LegIKData");
static_assert(sizeof(FKoratRigUnit_LegIKData) == 0x000100, "Wrong size on FKoratRigUnit_LegIKData");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_GetSocketTransform
// 0x0108 (0x0110 - 0x0008)
struct FKoratRigUnit_GetSocketTransform final : public FRigUnit
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratControlRigSocketInfo             Info;                                              // 0x0010(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EBoneGetterSetterMode                         Space;                                             // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0090(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedIndex;                                       // 0x00F0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_GetSocketTransform) == 0x000010, "Wrong alignment on FKoratRigUnit_GetSocketTransform");
static_assert(sizeof(FKoratRigUnit_GetSocketTransform) == 0x000110, "Wrong size on FKoratRigUnit_GetSocketTransform");
static_assert(offsetof(FKoratRigUnit_GetSocketTransform, Info) == 0x000010, "Member 'FKoratRigUnit_GetSocketTransform::Info' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_GetSocketTransform, Space) == 0x000080, "Member 'FKoratRigUnit_GetSocketTransform::Space' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_GetSocketTransform, Transform) == 0x000090, "Member 'FKoratRigUnit_GetSocketTransform::Transform' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_GetSocketTransform, CachedIndex) == 0x0000F0, "Member 'FKoratRigUnit_GetSocketTransform::CachedIndex' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_IKChain
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FKoratRigUnit_IKChain final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_IKChain) == 0x000008, "Wrong alignment on FKoratRigUnit_IKChain");
static_assert(sizeof(FKoratRigUnit_IKChain) == 0x000048, "Wrong size on FKoratRigUnit_IKChain");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_LegIKDefinition
// 0x0024 (0x0024 - 0x0000)
struct FKoratRigUnit_LegIKDefinition final
{
public:
	struct FRigElementKey                         IKFootBone;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         FKFootBone;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotationAngle;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FootBoneForwardAxis;                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HingeRotationAxis;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationLimit;                              // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKneeTwistCorrection;                        // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_LegIKDefinition) == 0x000004, "Wrong alignment on FKoratRigUnit_LegIKDefinition");
static_assert(sizeof(FKoratRigUnit_LegIKDefinition) == 0x000024, "Wrong size on FKoratRigUnit_LegIKDefinition");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, IKFootBone) == 0x000000, "Member 'FKoratRigUnit_LegIKDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, FKFootBone) == 0x00000C, "Member 'FKoratRigUnit_LegIKDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, NumBonesInLimb) == 0x000018, "Member 'FKoratRigUnit_LegIKDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, MinRotationAngle) == 0x00001C, "Member 'FKoratRigUnit_LegIKDefinition::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, FootBoneForwardAxis) == 0x000020, "Member 'FKoratRigUnit_LegIKDefinition::FootBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, HingeRotationAxis) == 0x000021, "Member 'FKoratRigUnit_LegIKDefinition::HingeRotationAxis' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, bEnableRotationLimit) == 0x000022, "Member 'FKoratRigUnit_LegIKDefinition::bEnableRotationLimit' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIKDefinition, bEnableKneeTwistCorrection) == 0x000023, "Member 'FKoratRigUnit_LegIKDefinition::bEnableKneeTwistCorrection' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_LegIK_WorkData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FKoratRigUnit_LegIK_WorkData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_LegIK_WorkData) == 0x000008, "Wrong alignment on FKoratRigUnit_LegIK_WorkData");
static_assert(sizeof(FKoratRigUnit_LegIK_WorkData) == 0x000020, "Wrong size on FKoratRigUnit_LegIK_WorkData");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_LegIK
// 0x0050 (0x0090 - 0x0040)
struct FKoratRigUnit_LegIK final : public FRigUnit_HighlevelBaseMutable
{
public:
	float                                         ReachPrecision;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratRigUnit_LegIKDefinition>  LegsDefinition;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPropagateToChildren;                              // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratRigUnit_LegIK_WorkData           WorkData;                                          // 0x0070(0x0020)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_LegIK) == 0x000008, "Wrong alignment on FKoratRigUnit_LegIK");
static_assert(sizeof(FKoratRigUnit_LegIK) == 0x000090, "Wrong size on FKoratRigUnit_LegIK");
static_assert(offsetof(FKoratRigUnit_LegIK, ReachPrecision) == 0x000040, "Member 'FKoratRigUnit_LegIK::ReachPrecision' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIK, MaxIterations) == 0x000044, "Member 'FKoratRigUnit_LegIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIK, LegsDefinition) == 0x000048, "Member 'FKoratRigUnit_LegIK::LegsDefinition' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIK, bPropagateToChildren) == 0x000068, "Member 'FKoratRigUnit_LegIK::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_LegIK, WorkData) == 0x000070, "Member 'FKoratRigUnit_LegIK::WorkData' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFloatAtan2
// 0x0010 (0x0018 - 0x0008)
struct FKoratRigUnit_MathFloatAtan2 final : public FRigUnit
{
public:
	float                                         Y;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MathFloatAtan2) == 0x000008, "Wrong alignment on FKoratRigUnit_MathFloatAtan2");
static_assert(sizeof(FKoratRigUnit_MathFloatAtan2) == 0x000018, "Wrong size on FKoratRigUnit_MathFloatAtan2");
static_assert(offsetof(FKoratRigUnit_MathFloatAtan2, Y) == 0x000008, "Member 'FKoratRigUnit_MathFloatAtan2::Y' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFloatAtan2, X) == 0x00000C, "Member 'FKoratRigUnit_MathFloatAtan2::X' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFloatAtan2, Result) == 0x000010, "Member 'FKoratRigUnit_MathFloatAtan2::Result' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFloatInterpTo
// 0x0018 (0x0020 - 0x0008)
struct FKoratRigUnit_MathFloatInterpTo final : public FRigUnit
{
public:
	float                                         Current;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Result;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MathFloatInterpTo) == 0x000008, "Wrong alignment on FKoratRigUnit_MathFloatInterpTo");
static_assert(sizeof(FKoratRigUnit_MathFloatInterpTo) == 0x000020, "Wrong size on FKoratRigUnit_MathFloatInterpTo");
static_assert(offsetof(FKoratRigUnit_MathFloatInterpTo, Current) == 0x000008, "Member 'FKoratRigUnit_MathFloatInterpTo::Current' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFloatInterpTo, Target) == 0x00000C, "Member 'FKoratRigUnit_MathFloatInterpTo::Target' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFloatInterpTo, DeltaTime) == 0x000010, "Member 'FKoratRigUnit_MathFloatInterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFloatInterpTo, InterpSpeed) == 0x000014, "Member 'FKoratRigUnit_MathFloatInterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFloatInterpTo, Result) == 0x000018, "Member 'FKoratRigUnit_MathFloatInterpTo::Result' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathVectorInterpTo
// 0x0050 (0x0058 - 0x0008)
struct FKoratRigUnit_MathVectorInterpTo final : public FRigUnit
{
public:
	struct FVector                                Current;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Result;                                            // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_MathVectorInterpTo) == 0x000008, "Wrong alignment on FKoratRigUnit_MathVectorInterpTo");
static_assert(sizeof(FKoratRigUnit_MathVectorInterpTo) == 0x000058, "Wrong size on FKoratRigUnit_MathVectorInterpTo");
static_assert(offsetof(FKoratRigUnit_MathVectorInterpTo, Current) == 0x000008, "Member 'FKoratRigUnit_MathVectorInterpTo::Current' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathVectorInterpTo, Target) == 0x000020, "Member 'FKoratRigUnit_MathVectorInterpTo::Target' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathVectorInterpTo, DeltaTime) == 0x000038, "Member 'FKoratRigUnit_MathVectorInterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathVectorInterpTo, InterpSpeed) == 0x00003C, "Member 'FKoratRigUnit_MathVectorInterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathVectorInterpTo, Result) == 0x000040, "Member 'FKoratRigUnit_MathVectorInterpTo::Result' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_SphereTraceWorld
// 0x0070 (0x0078 - 0x0008)
struct FKoratRigUnit_SphereTraceWorld final : public FRigUnit
{
public:
	struct FVector                                Start;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                END;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_SphereTraceWorld) == 0x000008, "Wrong alignment on FKoratRigUnit_SphereTraceWorld");
static_assert(sizeof(FKoratRigUnit_SphereTraceWorld) == 0x000078, "Wrong size on FKoratRigUnit_SphereTraceWorld");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, Start) == 0x000008, "Member 'FKoratRigUnit_SphereTraceWorld::Start' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, END) == 0x000020, "Member 'FKoratRigUnit_SphereTraceWorld::END' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, Channel) == 0x000038, "Member 'FKoratRigUnit_SphereTraceWorld::Channel' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, Radius) == 0x00003C, "Member 'FKoratRigUnit_SphereTraceWorld::Radius' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, bHit) == 0x000040, "Member 'FKoratRigUnit_SphereTraceWorld::bHit' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, HitLocation) == 0x000048, "Member 'FKoratRigUnit_SphereTraceWorld::HitLocation' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SphereTraceWorld, HitNormal) == 0x000060, "Member 'FKoratRigUnit_SphereTraceWorld::HitNormal' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_Offset
// 0x0168 (0x0170 - 0x0008)
struct FKoratRigUnit_MathFootIK_Offset final : public FRigUnit
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CharacterSpace;                                    // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Effector;                                          // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleHeight;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTranslateNormal;                            // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TranslateNormal;                                   // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngleDegree;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0130(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0150(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaistMovement;                                     // 0x0168(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MathFootIK_Offset) == 0x000010, "Wrong alignment on FKoratRigUnit_MathFootIK_Offset");
static_assert(sizeof(FKoratRigUnit_MathFootIK_Offset) == 0x000170, "Wrong size on FKoratRigUnit_MathFootIK_Offset");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, CharacterSpace) == 0x000010, "Member 'FKoratRigUnit_MathFootIK_Offset::CharacterSpace' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, Effector) == 0x000070, "Member 'FKoratRigUnit_MathFootIK_Offset::Effector' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, AnkleHeight) == 0x0000D0, "Member 'FKoratRigUnit_MathFootIK_Offset::AnkleHeight' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, bHit) == 0x0000D4, "Member 'FKoratRigUnit_MathFootIK_Offset::bHit' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, HitLocation) == 0x0000D8, "Member 'FKoratRigUnit_MathFootIK_Offset::HitLocation' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, HitNormal) == 0x0000F0, "Member 'FKoratRigUnit_MathFootIK_Offset::HitNormal' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, bEnableTranslateNormal) == 0x000108, "Member 'FKoratRigUnit_MathFootIK_Offset::bEnableTranslateNormal' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, TranslateNormal) == 0x000110, "Member 'FKoratRigUnit_MathFootIK_Offset::TranslateNormal' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, LimitAngleDegree) == 0x000128, "Member 'FKoratRigUnit_MathFootIK_Offset::LimitAngleDegree' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, Rotation) == 0x000130, "Member 'FKoratRigUnit_MathFootIK_Offset::Rotation' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, Translation) == 0x000150, "Member 'FKoratRigUnit_MathFootIK_Offset::Translation' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Offset, WaistMovement) == 0x000168, "Member 'FKoratRigUnit_MathFootIK_Offset::WaistMovement' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_Alpha
// 0x0018 (0x0020 - 0x0008)
struct FKoratRigUnit_MathFootIK_Alpha final : public FRigUnit
{
public:
	float                                         AnkleHeight;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RetargetHeight;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMin;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MathFootIK_Alpha) == 0x000008, "Wrong alignment on FKoratRigUnit_MathFootIK_Alpha");
static_assert(sizeof(FKoratRigUnit_MathFootIK_Alpha) == 0x000020, "Wrong size on FKoratRigUnit_MathFootIK_Alpha");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Alpha, AnkleHeight) == 0x000008, "Member 'FKoratRigUnit_MathFootIK_Alpha::AnkleHeight' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Alpha, RetargetHeight) == 0x00000C, "Member 'FKoratRigUnit_MathFootIK_Alpha::RetargetHeight' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Alpha, RangeMin) == 0x000010, "Member 'FKoratRigUnit_MathFootIK_Alpha::RangeMin' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Alpha, RangeMax) == 0x000014, "Member 'FKoratRigUnit_MathFootIK_Alpha::RangeMax' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_Alpha, Alpha) == 0x000018, "Member 'FKoratRigUnit_MathFootIK_Alpha::Alpha' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_InterpSpeed
// 0x0010 (0x0018 - 0x0008)
struct FKoratRigUnit_MathFootIK_InterpSpeed final : public FRigUnit
{
public:
	float                                         TargetAlpha;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledIK;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MathFootIK_InterpSpeed) == 0x000008, "Wrong alignment on FKoratRigUnit_MathFootIK_InterpSpeed");
static_assert(sizeof(FKoratRigUnit_MathFootIK_InterpSpeed) == 0x000018, "Wrong size on FKoratRigUnit_MathFootIK_InterpSpeed");
static_assert(offsetof(FKoratRigUnit_MathFootIK_InterpSpeed, TargetAlpha) == 0x000008, "Member 'FKoratRigUnit_MathFootIK_InterpSpeed::TargetAlpha' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_InterpSpeed, bEnabledIK) == 0x00000C, "Member 'FKoratRigUnit_MathFootIK_InterpSpeed::bEnabledIK' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_InterpSpeed, InterpSpeed) == 0x000010, "Member 'FKoratRigUnit_MathFootIK_InterpSpeed::InterpSpeed' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_FootTrace
// 0x00A8 (0x00E8 - 0x0040)
struct FKoratRigUnit_MathFootIK_FootTrace final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0040(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneGetterSetterMode                         Space;                                             // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UpVector;                                          // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartScale;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScale;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratControlRigTraceResult            Result;                                            // 0x0078(0x0050)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedIndex;                                       // 0x00C8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratRigUnit_MathFootIK_FootTrace) == 0x000008, "Wrong alignment on FKoratRigUnit_MathFootIK_FootTrace");
static_assert(sizeof(FKoratRigUnit_MathFootIK_FootTrace) == 0x0000E8, "Wrong size on FKoratRigUnit_MathFootIK_FootTrace");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, Item) == 0x000040, "Member 'FKoratRigUnit_MathFootIK_FootTrace::Item' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, Space) == 0x00004C, "Member 'FKoratRigUnit_MathFootIK_FootTrace::Space' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, UpVector) == 0x000050, "Member 'FKoratRigUnit_MathFootIK_FootTrace::UpVector' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, StartScale) == 0x000068, "Member 'FKoratRigUnit_MathFootIK_FootTrace::StartScale' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, EndScale) == 0x00006C, "Member 'FKoratRigUnit_MathFootIK_FootTrace::EndScale' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, Channel) == 0x000070, "Member 'FKoratRigUnit_MathFootIK_FootTrace::Channel' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, Radius) == 0x000074, "Member 'FKoratRigUnit_MathFootIK_FootTrace::Radius' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, Result) == 0x000078, "Member 'FKoratRigUnit_MathFootIK_FootTrace::Result' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_FootTrace, CachedIndex) == 0x0000C8, "Member 'FKoratRigUnit_MathFootIK_FootTrace::CachedIndex' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_CalcAnkleHeight
// 0x0120 (0x0160 - 0x0040)
struct FKoratRigUnit_MathFootIK_CalcAnkleHeight final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         ToeBone;                                           // 0x0040(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ToeBase;                                           // 0x004C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         RootBone;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratControlRigSocketInfo             RetargetSocket;                                    // 0x0070(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             CharacterSpace;                                    // 0x00E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRangeMin;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRangeMax;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleHeight;                                       // 0x0148(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAlpha;                                         // 0x014C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratRigUnit_MathFootIK_CalcAnkleHeight) == 0x000010, "Wrong alignment on FKoratRigUnit_MathFootIK_CalcAnkleHeight");
static_assert(sizeof(FKoratRigUnit_MathFootIK_CalcAnkleHeight) == 0x000160, "Wrong size on FKoratRigUnit_MathFootIK_CalcAnkleHeight");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, ToeBone) == 0x000040, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::ToeBone' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, ToeBase) == 0x00004C, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::ToeBase' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, RootBone) == 0x000058, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::RootBone' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, RetargetSocket) == 0x000070, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::RetargetSocket' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, CharacterSpace) == 0x0000E0, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::CharacterSpace' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, FootRangeMin) == 0x000140, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::FootRangeMin' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, FootRangeMax) == 0x000144, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::FootRangeMax' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, AnkleHeight) == 0x000148, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::AnkleHeight' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, FootAlpha) == 0x00014C, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::FootAlpha' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcAnkleHeight, CachedIndex) == 0x000150, "Member 'FKoratRigUnit_MathFootIK_CalcAnkleHeight::CachedIndex' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_CalcFootIK
// 0x0180 (0x01C0 - 0x0040)
struct FKoratRigUnit_MathFootIK_CalcFootIK final : public FRigUnitMutable
{
public:
	struct FTransform                             CharacterSpace;                                    // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Effector;                                          // 0x00A0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleHeight;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratControlRigTraceResult            HitResult;                                         // 0x00B0(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableTranslateNormal;                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TranslateNormal;                                   // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngleDegree;                                  // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0130(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaistMovement;                                     // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedIndex;                                       // 0x0198(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MathFootIK_CalcFootIK) == 0x000010, "Wrong alignment on FKoratRigUnit_MathFootIK_CalcFootIK");
static_assert(sizeof(FKoratRigUnit_MathFootIK_CalcFootIK) == 0x0001C0, "Wrong size on FKoratRigUnit_MathFootIK_CalcFootIK");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, CharacterSpace) == 0x000040, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::CharacterSpace' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, Effector) == 0x0000A0, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::Effector' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, AnkleHeight) == 0x0000AC, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::AnkleHeight' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, HitResult) == 0x0000B0, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::HitResult' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, bEnableTranslateNormal) == 0x000100, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::bEnableTranslateNormal' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, TranslateNormal) == 0x000108, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::TranslateNormal' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, LimitAngleDegree) == 0x000120, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::LimitAngleDegree' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, Offset) == 0x000130, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::Offset' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, WaistMovement) == 0x000190, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::WaistMovement' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_CalcFootIK, CachedIndex) == 0x000198, "Member 'FKoratRigUnit_MathFootIK_CalcFootIK::CachedIndex' has a wrong offset!");

// ScriptStruct KoratControlRigExtension.KoratRigUnit_MathFootIK_ApplyFoot
// 0x01A0 (0x01E0 - 0x0040)
struct FKoratRigUnit_MathFootIK_ApplyFoot final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         Item;                                              // 0x0040(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CharacterSpace;                                    // 0x0050(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaistMovement;                                     // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleHeight;                                       // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratControlRigTraceResult            HitResult;                                         // 0x00E8(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0140(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedIndex;                                       // 0x01A8(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                TargetOffset;                                      // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratRigUnit_MathFootIK_ApplyFoot) == 0x000010, "Wrong alignment on FKoratRigUnit_MathFootIK_ApplyFoot");
static_assert(sizeof(FKoratRigUnit_MathFootIK_ApplyFoot) == 0x0001E0, "Wrong size on FKoratRigUnit_MathFootIK_ApplyFoot");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, Item) == 0x000040, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::Item' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, CharacterSpace) == 0x000050, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::CharacterSpace' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, UpVector) == 0x0000B0, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::UpVector' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, WaistMovement) == 0x0000C8, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::WaistMovement' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, AnkleHeight) == 0x0000E0, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::AnkleHeight' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, HitResult) == 0x0000E8, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::HitResult' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, Offset) == 0x000140, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::Offset' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, DeltaTime) == 0x0001A0, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::DeltaTime' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, InterpSpeed) == 0x0001A4, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, CachedIndex) == 0x0001A8, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::CachedIndex' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MathFootIK_ApplyFoot, TargetOffset) == 0x0001C8, "Member 'FKoratRigUnit_MathFootIK_ApplyFoot::TargetOffset' has a wrong offset!");

}

