#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubStep

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "FLocomotionRotationParameter_structs.hpp"
#include "ECharacterDirection_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAndStart
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_CheckAndStart final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStartChangeJumpToFly_IsStarted;   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_CheckAndStart) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_CheckAndStart");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_CheckAndStart) == 0x000010, "Wrong size on BP_CharacterLocomotionSubStep_C_CheckAndStart");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStart, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStart::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStart, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStart::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStart, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStart::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStart, CallFunc_CheckAndStartChangeJumpToFly_IsStarted) == 0x00000A, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStart::CallFunc_CheckAndStartChangeJumpToFly_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStart, CallFunc_CheckAndStart_IsStarted) == 0x00000B, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStart::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAndStartChangeJumpToFly
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InChangeJumpToFly;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Step_Enable_IsEnable;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly) == 0x000038, "Wrong size on BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, InChangeJumpToFly) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::InChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, IsChangeStep) == 0x00000A, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, CallFunc_Start_NewParam) == 0x00000B, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000028, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly, CallFunc_Is_Step_Enable_IsEnable) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly::CallFunc_Is_Step_Enable_IsEnable' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAndStartFromJump
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InChangeJumpToFly;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStartChangeJumpToFly_IsStarted;   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump) == 0x000010, "Wrong size on BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump, InChangeJumpToFly) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump::InChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump, CallFunc_CheckAndStartChangeJumpToFly_IsStarted) == 0x00000A, "Member 'BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump::CallFunc_CheckAndStartChangeJumpToFly_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAnimEndAndChangeToIdle
// 0x00A8 (0x00A8 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle final
{
public:
	class FName                                   Temp_name_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_8;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStepInput_input;                        // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckStep_ChangeStep;                     // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_3; // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle) == 0x0000A8, "Wrong size on BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_1) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_2) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_3) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_4) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_5) == 0x000028, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_6) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_7) == 0x000038, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_name_Variable_8) == 0x000040, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_name_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000050, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, Temp_byte_Variable) == 0x000058, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_GetSSCharacter_SSCharacter) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, K2Node_DynamicCast_AsBP_Character) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_IsStepInput_input) == 0x000079, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_IsStepInput_input' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00007A, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00007B, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00007C, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000080, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_BooleanOR_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_CheckStep_ChangeStep) == 0x000089, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_CheckStep_ChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_BooleanOR_ReturnValue_1) == 0x00008A, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_Not_PreBool_ReturnValue) == 0x00008B, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_GetLocomotionComponent_LocomotionComponent_3) == 0x000090, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_GetLocomotionComponent_LocomotionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, K2Node_Select_Default) == 0x000098, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionSubStep_C_CheckAnimEndAndChangeToIdle::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.GetStepParameter
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_GetStepParameter final
{
public:
	EKoratStepType                                InStepType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               InStepStatus;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataStepParameter       OutParameter;                                      // 0x0004(0x001C)(Parm, OutParm, NoDestructor)
	struct FKoratCharacterDataStepParameter       Temp_struct_Variable;                              // 0x0020(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       Temp_struct_Variable_1;                            // 0x003C(0x001C)(NoDestructor)
	EKoratStepType                                Temp_byte_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataStepParameter       Temp_struct_Variable_2;                            // 0x005C(0x001C)(NoDestructor)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               Temp_byte_Variable_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataStepParameter       K2Node_Select_Default;                             // 0x008C(0x001C)(NoDestructor)
	EKoratStepType                                Temp_byte_Variable_2;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataStepParameter       K2Node_Select_Default_1;                           // 0x00AC(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       K2Node_Select_Default_2;                           // 0x00C8(0x001C)(NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_GetStepParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_GetStepParameter");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_GetStepParameter) == 0x0000E8, "Wrong size on BP_CharacterLocomotionSubStep_C_GetStepParameter");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, InStepType) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::InStepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, InStepStatus) == 0x000001, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::InStepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, OutParameter) == 0x000004, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::OutParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, Temp_struct_Variable) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, Temp_struct_Variable_1) == 0x00003C, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, Temp_byte_Variable) == 0x000058, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, Temp_struct_Variable_2) == 0x00005C, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000078, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000080, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, Temp_byte_Variable_1) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, K2Node_Select_Default) == 0x00008C, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, Temp_byte_Variable_2) == 0x0000A8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, K2Node_Select_Default_1) == 0x0000AC, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepParameter, K2Node_Select_Default_2) == 0x0000C8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepParameter::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.GetStepVector
// 0x0220 (0x0220 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_GetStepVector final
{
public:
	ECharacterDirection                           InDirection;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsOrthoDirection;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vector;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddYaw;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LengthSquared;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StepVector;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtRight;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtForward;                                     // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_3; // 0x0150(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculationSideStepAddYaw_ReturnValue;    // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_4; // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetMoveLookAtRotation_OutLookAtRotation;  // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_3; // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculationSideStepAddYaw_InDeltaSeconds_ImplicitCast; // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_AddYaw_ImplicitCast;            // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_GetStepVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_GetStepVector");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_GetStepVector) == 0x000220, "Wrong size on BP_CharacterLocomotionSubStep_C_GetStepVector");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, InDirection) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::InDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, InIsOrthoDirection) == 0x000001, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::InIsOrthoDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, Vector) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::Vector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, AddYaw) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::AddYaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, LengthSquared) == 0x000028, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::LengthSquared' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, TargetLocation) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, StepVector) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::StepVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, LookAtRight) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::LookAtRight' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, LookAtForward) == 0x000078, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::LookAtForward' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, K2Node_SwitchEnum_CmpSuccess) == 0x000091, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000098, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000B0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x0000B8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_BreakRotator_Roll) == 0x0000C0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_BreakRotator_Pitch) == 0x0000C4, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_BreakRotator_Yaw) == 0x0000C8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x0000D0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_MakeRotator_ReturnValue) == 0x0000E0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000F8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000110, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000128, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetSSCharacter_SSCharacter) == 0x000130, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x000138, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetLocomotionComponent_LocomotionComponent_3) == 0x000150, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetLocomotionComponent_LocomotionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000158, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_CalculationSideStepAddYaw_ReturnValue) == 0x000160, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_CalculationSideStepAddYaw_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000168, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Normal2D_ReturnValue) == 0x000180, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000190, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_BreakVector2D_X) == 0x0001A8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_BreakVector2D_Y) == 0x0001B0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_MakeVector_ReturnValue) == 0x0001B8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetLocomotionComponent_LocomotionComponent_4) == 0x0001D0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetLocomotionComponent_LocomotionComponent_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GetMoveLookAtRotation_OutLookAtRotation) == 0x0001D8, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GetMoveLookAtRotation_OutLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue_3) == 0x0001F0, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000208, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000210, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, CallFunc_CalculationSideStepAddYaw_InDeltaSeconds_ImplicitCast) == 0x000214, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::CallFunc_CalculationSideStepAddYaw_InDeltaSeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_GetStepVector, K2Node_VariableSet_AddYaw_ImplicitCast) == 0x000218, "Member 'BP_CharacterLocomotionSubStep_C_GetStepVector::K2Node_VariableSet_AddYaw_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Is Step Enable
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_Is_Step_Enable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTargetDistance_Length;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeDistance_IsNear;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_Is_Step_Enable) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_Is_Step_Enable");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_Is_Step_Enable) == 0x000020, "Wrong size on BP_CharacterLocomotionSubStep_C_Is_Step_Enable");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Is_Step_Enable, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_Is_Step_Enable::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Is_Step_Enable, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_Is_Step_Enable::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Is_Step_Enable, CallFunc_GetTargetDistance_Length) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_Is_Step_Enable::CallFunc_GetTargetDistance_Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Is_Step_Enable, CallFunc_IsNearRangeDistance_IsNear) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_Is_Step_Enable::CallFunc_IsNearRangeDistance_IsNear' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.IsStepOrthoDirection
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection final
{
public:
	EKoratStepType                                InStepType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOrthoDirection;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection) == 0x000018, "Wrong size on BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection, InStepType) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection::InStepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection, IsOrthoDirection) == 0x000001, "Member 'BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection::IsOrthoDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection, K2Node_Select_Default) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.OnEndStepIN
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_OnEndStepIN final
{
public:
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepParameter_OutParameter;            // 0x0000(0x001C)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_OnEndStepIN) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubStep_C_OnEndStepIN");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_OnEndStepIN) == 0x000020, "Wrong size on BP_CharacterLocomotionSubStep_C_OnEndStepIN");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_OnEndStepIN, CallFunc_GetStepParameter_OutParameter) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_OnEndStepIN::CallFunc_GetStepParameter_OutParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_OnEndStepIN, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_CharacterLocomotionSubStep_C_OnEndStepIN::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Set Step Parameter
// 0x0098 (0x0098 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_Set_Step_Parameter final
{
public:
	EKoratStepState                               InStepStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                InStepType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           InMoveDirection;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_1; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStepOrthoDirection_IsOrthoDirection;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_2; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetStepVector_Vector;                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_3; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_4; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_5; // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_6; // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ConsumeMovementInputVector_ReturnValue;   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_StepMaxHoldTime_ImplicitCast;   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_Set_Step_Parameter");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter) == 0x000098, "Wrong size on BP_CharacterLocomotionSubStep_C_Set_Step_Parameter");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, InStepStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::InStepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, InStepType) == 0x000001, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::InStepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, InMoveDirection) == 0x000002, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::InMoveDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement_1) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_IsStepOrthoDirection_IsOrthoDirection) == 0x000021, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_IsStepOrthoDirection_IsOrthoDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement_2) == 0x000028, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetStepVector_Vector) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetStepVector_Vector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement_3) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement_4) == 0x000050, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement_5) == 0x000058, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetCharacterMovement_CharacterMovement_6) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetCharacterMovement_CharacterMovement_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_GetSSCharacter_SSCharacter) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_ConsumeMovementInputVector_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_ConsumeMovementInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Set_Step_Parameter, K2Node_VariableSet_StepMaxHoldTime_ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionSubStep_C_Set_Step_Parameter::K2Node_VariableSet_StepMaxHoldTime_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.SetStepMaxSpeed
// 0x0078 (0x0078 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed final
{
public:
	bool                                          IsUseOTParameter;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSpeedOT;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeedIN;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepParameter_OutParameter;            // 0x0020(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepParameter_OutParameter_1;          // 0x003C(0x001C)(NoDestructor)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MaxSpeedOT_ImplicitCast;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MaxSpeedIN_ImplicitCast;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxSpeedCpp_ImplicitCast;       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed) == 0x000078, "Wrong size on BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, IsUseOTParameter) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::IsUseOTParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, MaxSpeedOT) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::MaxSpeedOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, MaxSpeedIN) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::MaxSpeedIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, CallFunc_GetStepParameter_OutParameter) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::CallFunc_GetStepParameter_OutParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, CallFunc_GetStepParameter_OutParameter_1) == 0x00003C, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::CallFunc_GetStepParameter_OutParameter_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, CallFunc_FMax_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, K2Node_VariableSet_MaxSpeedOT_ImplicitCast) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::K2Node_VariableSet_MaxSpeedOT_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, K2Node_VariableSet_MaxSpeedIN_ImplicitCast) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::K2Node_VariableSet_MaxSpeedIN_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed, K2Node_VariableSet_MaxSpeedCpp_ImplicitCast) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_SetStepMaxSpeed::K2Node_VariableSet_MaxSpeedCpp_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.SetStepStatus
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_SetStepStatus final
{
public:
	EKoratStepState                               InStepStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_SetStepStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_SetStepStatus");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_SetStepStatus) == 0x000020, "Wrong size on BP_CharacterLocomotionSubStep_C_SetStepStatus");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, InStepStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::InStepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_SetStepStatus, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000019, "Member 'BP_CharacterLocomotionSubStep_C_SetStepStatus::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Start
// 0x0268 (0x0268 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_Start final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                OutStepType;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGround;                                          // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_2;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_3;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepParameter_OutParameter;            // 0x0014(0x001C)(NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStepOrthoDirection_IsOrthoDirection;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetMoveLookAtRotation_OutLookAtRotation;  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement;   // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_4;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_5;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_3; // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetMoveLookAtRotation_OutLookAtRotation_1; // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           CallFunc_CalcDirection_Direction;                  // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_4; // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           CallFunc_CalcDirection_Direction_1;                // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_5; // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetStepVector_Vector;                     // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsOnGround_IsOnGround;                 // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_6; // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_2;       // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EKoratStepType                                K2Node_Select_Default_1;                           // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                K2Node_Select_Default_2;                           // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_7; // 0x0210(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                K2Node_Select_Default_3;                           // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_8; // 0x0220(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_9; // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalcDirection_InYaw_ImplicitCast;         // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalcDirection_InYaw_ImplicitCast_1;       // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_Start) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_Start");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_Start) == 0x000268, "Wrong size on BP_CharacterLocomotionSubStep_C_Start");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_Start::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_Start::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, NewParam) == 0x000009, "Member 'BP_CharacterLocomotionSubStep_C_Start::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, OutStepType) == 0x00000A, "Member 'BP_CharacterLocomotionSubStep_C_Start::OutStepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, IsGround) == 0x00000B, "Member 'BP_CharacterLocomotionSubStep_C_Start::IsGround' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_bool_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_byte_Variable) == 0x00000D, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_byte_Variable_1) == 0x00000E, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_bool_Variable_1) == 0x00000F, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_byte_Variable_2) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_byte_Variable_3) == 0x000011, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetStepParameter_OutParameter) == 0x000014, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetStepParameter_OutParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000038, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_IsStepOrthoDirection_IsOrthoDirection) == 0x000040, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_IsStepOrthoDirection_IsOrthoDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetMoveLookAtRotation_OutLookAtRotation) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetMoveLookAtRotation_OutLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_bool_Variable_2) == 0x000061, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Not_PreBool_ReturnValue) == 0x000062, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetCharacterMovement_CharacterMovement) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetCharacterMovement_CharacterMovement' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_byte_Variable_4) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_byte_Variable_5) == 0x000071, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, Temp_bool_Variable_3) == 0x000072, "Member 'BP_CharacterLocomotionSubStep_C_Start::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakVector2D_X) == 0x000078, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakVector2D_Y) == 0x000080, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000A8, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x0000C0, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_3) == 0x0000C8, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetMoveLookAtRotation_OutLookAtRotation_1) == 0x0000D0, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetMoveLookAtRotation_OutLookAtRotation_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000E8, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Not_PreBool_ReturnValue_1) == 0x000100, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x000108, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakRotator_Roll) == 0x000120, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakRotator_Pitch) == 0x000124, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakRotator_Yaw) == 0x000128, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_CalcDirection_Direction) == 0x00012C, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_CalcDirection_Direction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakVector2D_X_1) == 0x000130, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakVector2D_Y_1) == 0x000138, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_4) == 0x000140, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000148, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_MakeVector_ReturnValue_1) == 0x000150, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000168, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakRotator_Roll_1) == 0x000180, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakRotator_Pitch_1) == 0x000184, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakRotator_Yaw_1) == 0x000188, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Not_PreBool_ReturnValue_2) == 0x00018C, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_CalcDirection_Direction_1) == 0x00018D, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_CalcDirection_Direction_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_SwitchEnum_CmpSuccess_1) == 0x00018E, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_SwitchEnum_CmpSuccess_2) == 0x00018F, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_5) == 0x000190, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetStepVector_Vector) == 0x000198, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetStepVector_Vector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetIsOnGround_IsOnGround) == 0x0001B0, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetIsOnGround_IsOnGround' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001B8, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_Select_Default) == 0x0001D0, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_6) == 0x0001E8, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Conv_VectorToRotator_ReturnValue_2) == 0x0001F0, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Conv_VectorToRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_Select_Default_1) == 0x000208, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_Select_Default_2) == 0x000209, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_7) == 0x000210, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, K2Node_Select_Default_3) == 0x000218, "Member 'BP_CharacterLocomotionSubStep_C_Start::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Start_NewParam) == 0x000219, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_8) == 0x000220, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_9) == 0x000228, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakVector2D_X_2) == 0x000230, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_BreakVector2D_Y_2) == 0x000238, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_MakeVector2D_ReturnValue) == 0x000240, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000250, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_Not_PreBool_ReturnValue_3) == 0x000251, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_CalcDirection_InYaw_ImplicitCast) == 0x000258, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_CalcDirection_InYaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Start, CallFunc_CalcDirection_InYaw_ImplicitCast_1) == 0x000260, "Member 'BP_CharacterLocomotionSubStep_C_Start::CallFunc_CalcDirection_InYaw_ImplicitCast_1' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Update
// 0x00B8 (0x00B8 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_Update final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckStep_ChangeStep;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetUseCharacterRotationPitch_UsePitch;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDashUpDown_ChangeDashUpDown;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckJump_ChangeJump;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_3; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_4; // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement;   // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_5; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckJump_ChangeJump_1;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_6; // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDashUpDown_ChangeDashUpDown_1;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRotationStep_IsSuccessfully;        // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetOnlyYawRotation_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRotationStep_IsSuccessfully_1;      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_7; // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckJump_ChangeJump_2;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_Update) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_Update");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_Update) == 0x0000B8, "Wrong size on BP_CharacterLocomotionSubStep_C_Update");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_Update::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, InEventType) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_Update::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, InDeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_Update::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, NewParam) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_Update::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_CheckStep_ChangeStep) == 0x000028, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_CheckStep_ChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetUseCharacterRotationPitch_UsePitch) == 0x000038, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetUseCharacterRotationPitch_UsePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_CheckDashUpDown_ChangeDashUpDown) == 0x000039, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_CheckDashUpDown_ChangeDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, K2Node_SwitchEnum_CmpSuccess) == 0x00003A, "Member 'BP_CharacterLocomotionSubStep_C_Update::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000040, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_CheckJump_ChangeJump) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_CheckJump_ChangeJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_3) == 0x000050, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_4) == 0x000058, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetCharacterMovement_CharacterMovement) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetCharacterMovement_CharacterMovement' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_5) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_CheckJump_ChangeJump_1) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_CheckJump_ChangeJump_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_6) == 0x000078, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_CheckDashUpDown_ChangeDashUpDown_1) == 0x000080, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_CheckDashUpDown_ChangeDashUpDown_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, K2Node_SwitchEnum_CmpSuccess_1) == 0x000081, "Member 'BP_CharacterLocomotionSubStep_C_Update::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_UpdateRotationStep_IsSuccessfully) == 0x000082, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_UpdateRotationStep_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetOnlyYawRotation_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetOnlyYawRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, K2Node_SwitchEnum_CmpSuccess_2) == 0x0000A0, "Member 'BP_CharacterLocomotionSubStep_C_Update::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_UpdateRotationStep_IsSuccessfully_1) == 0x0000A1, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_UpdateRotationStep_IsSuccessfully_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_7) == 0x0000A8, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_Update_NewParam) == 0x0000B0, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_Update_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, CallFunc_CheckJump_ChangeJump_2) == 0x0000B1, "Member 'BP_CharacterLocomotionSubStep_C_Update::CallFunc_CheckJump_ChangeJump_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_Update, K2Node_SwitchEnum_CmpSuccess_3) == 0x0000B2, "Member 'BP_CharacterLocomotionSubStep_C_Update::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.UpdateRotationStep
// 0x00E0 (0x00E0 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_UpdateRotationStep final
{
public:
	struct FRotator                               InNewRotation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InTeleportPhysics;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsUpdateTiltTimer;                               // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetRotation_Rotation;                     // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsInAir_IsInAir;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionRotationParameter          K2Node_Select_Default;                             // 0x0094(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Rotation_IsSuccessfully;              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_UpdateRotationStep");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep) == 0x0000E0, "Wrong size on BP_CharacterLocomotionSubStep_C_UpdateRotationStep");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, InNewRotation) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::InNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, InTeleportPhysics) == 0x000018, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, InIsUpdateTiltTimer) == 0x000019, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::InIsUpdateTiltTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, IsSuccessfully) == 0x00001A, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, Temp_bool_Variable) == 0x00001B, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_GetRotation_Rotation) == 0x000020, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_GetRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_BreakRotator_Roll_1) == 0x000044, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_BreakRotator_Pitch_1) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_BreakRotator_Yaw_1) == 0x00004C, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000050, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_SelectFloat_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_MakeRotator_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_GetIsInAir_IsInAir) == 0x000090, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_GetIsInAir_IsInAir' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, K2Node_Select_Default) == 0x000094, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_Set_Rotation_IsSuccessfully) == 0x0000C4, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_Set_Rotation_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_SelectFloat_B_ImplicitCast) == 0x0000C8, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_SelectFloat_A_ImplicitCast) == 0x0000D0, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateRotationStep, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000D8, "Member 'BP_CharacterLocomotionSubStep_C_UpdateRotationStep::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.UpdateStep
// 0x00E0 (0x00E0 - 0x0000)
struct BP_CharacterLocomotionSubStep_C_UpdateStep final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsKeepRotation;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetRotation;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetUseCharacterRotationPitch_UsePitch;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRotationStep_IsSuccessfully;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetUseCharacterRotationPitch_UsePitch_1;  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetOnlyYawRotation_ReturnValue;           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateRotationStep_IsSuccessfully_1;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPawn_Pawn;                             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStepOrthoDirection_IsOrthoDirection;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetStepVector_Vector;                     // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubStep_C_UpdateStep) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubStep_C_UpdateStep");
static_assert(sizeof(BP_CharacterLocomotionSubStep_C_UpdateStep) == 0x0000E0, "Wrong size on BP_CharacterLocomotionSubStep_C_UpdateStep");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, InIsKeepRotation) == 0x000008, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::InIsKeepRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, TargetRotation) == 0x000010, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::TargetRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetUseCharacterRotationPitch_UsePitch) == 0x000028, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetUseCharacterRotationPitch_UsePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_UpdateRotationStep_IsSuccessfully) == 0x000038, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_UpdateRotationStep_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetUseCharacterRotationPitch_UsePitch_1) == 0x000039, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetUseCharacterRotationPitch_UsePitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000040, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetOnlyYawRotation_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetOnlyYawRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_UpdateRotationStep_IsSuccessfully_1) == 0x000060, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_UpdateRotationStep_IsSuccessfully_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000068, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetPawn_Pawn) == 0x000070, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetPawn_Pawn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_IsStepOrthoDirection_IsOrthoDirection) == 0x000078, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_IsStepOrthoDirection_IsOrthoDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_BreakRotator_Roll_1) == 0x00007C, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_BreakRotator_Pitch_1) == 0x000080, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_BreakRotator_Yaw_1) == 0x000084, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_SelectFloat_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_MakeRotator_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_GetStepVector_Vector) == 0x0000A8, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_GetStepVector_Vector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_SelectFloat_A_ImplicitCast) == 0x0000D0, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubStep_C_UpdateStep, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000D8, "Member 'BP_CharacterLocomotionSubStep_C_UpdateStep::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

}

