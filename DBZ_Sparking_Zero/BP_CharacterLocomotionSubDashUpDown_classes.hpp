#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubDashUpDown

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "EBattleKey_structs.hpp"
#include "BP_CharacterLocomotionSubDash_classes.hpp"
#include "Engine_structs.hpp"
#include "EAnimStateMachineEventType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubDashUpDown.BP_CharacterLocomotionSubDashUpDown_C
// 0x0008 (0x00C8 - 0x00C0)
class UBP_CharacterLocomotionSubDashUpDown_C final : public UBP_CharacterLocomotionSubDash_C
{
public:
	EKoratDashUpDownState                         DashUpDownStatus;                                  // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          DashUpDownType;                                    // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownState                         AnimEventDashUpDownState;                          // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpDownKeyReleased;                               // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          RequestDashUpDownType;                             // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Change_Dash_Up_Down_Status(EKoratDashUpDownState InDashUpDownStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckDashUpDownEnd(double InDeltaSeconds, bool* IsEnd);
	void CheckDashUpDownEndInput(EBattleKey ReleasedBattleKey, bool* IsKeyReleased);
	void CheckDashUpDownInput(bool* IsInputRequest);
	void GetDashUpDownStateMovementParameter(EKoratDashUpDownState InDashUpDownStatus, bool* IsUseParameter, struct FKoratCharacterDataDragonDashMovementParameter* MovementParameter);
	void GetDashUpDownTypeParameter(struct FKoratCharacterDataDragonDashMovementParameter* ________IN, struct FKoratCharacterDataDragonDashMovementParameter* ________LP, struct FKoratCharacterDataDragonDashMovementParameter* ________OT, double* LP___LB_, double* OT_____1___B_, double* Landing__0______1___B_, double* ______IN, double* ______LP);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void IsEnableAction(bool* IsEnable);
	void On_Dash_Up_Down_Anim_Event(EKoratDashUpDownState DashUpDownState, EAnimStateMachineEventType AnimStateMachineEvent);
	void ReloadParam();
	void Set_Dash_Up_Down_Parameter(const struct FVector& InInputVector);
	void Set_Dash_Up_Down_Status(EKoratDashUpDownState InDashUpDownStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetDashUpDownMaxSpeed();
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateDashUpDownMove(double InDeltaSeconds, EKoratDashUpDownState* NextDashUpDownStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubDashUpDown_C">();
	}
	static class UBP_CharacterLocomotionSubDashUpDown_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubDashUpDown_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubDashUpDown_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubDashUpDown_C");
static_assert(sizeof(UBP_CharacterLocomotionSubDashUpDown_C) == 0x0000C8, "Wrong size on UBP_CharacterLocomotionSubDashUpDown_C");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUpDown_C, DashUpDownStatus) == 0x0000C0, "Member 'UBP_CharacterLocomotionSubDashUpDown_C::DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUpDown_C, DashUpDownType) == 0x0000C1, "Member 'UBP_CharacterLocomotionSubDashUpDown_C::DashUpDownType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUpDown_C, AnimEventDashUpDownState) == 0x0000C2, "Member 'UBP_CharacterLocomotionSubDashUpDown_C::AnimEventDashUpDownState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUpDown_C, IsUpDownKeyReleased) == 0x0000C3, "Member 'UBP_CharacterLocomotionSubDashUpDown_C::IsUpDownKeyReleased' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDashUpDown_C, RequestDashUpDownType) == 0x0000C4, "Member 'UBP_CharacterLocomotionSubDashUpDown_C::RequestDashUpDownType' has a wrong offset!");

}

