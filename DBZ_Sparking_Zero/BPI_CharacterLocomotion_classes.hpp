#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterLocomotion

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ECharacterNumbReactionState_structs.hpp"
#include "ECharacterMoveStandUpDirection_structs.hpp"
#include "ECharacterMoveStandUpState_structs.hpp"
#include "EAnimStateMachineEventType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_CharacterLocomotion.BPI_CharacterLocomotion_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_CharacterLocomotion_C final : public IInterface
{
public:
	void AddCharacterMovementXInput(const struct FVector& WorldDirection, double Value);
	void AddCharacterMovementXYInput(const struct FVector2D& Value);
	void AddCharacterMovementYInput(const struct FVector& WorldDirection, double Value);
	void AddCharacterMovementZInputLast(double Value);
	void DebugLockOnChange();
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* OutLocomotionDetailStatus);
	void GetLocomotionNumbReaction(ECharacterNumbReactionState* State, bool* Front);
	void GetLocomotionParameterForAction(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsInAir, double* MaxSpeed, double* NearModeSpeed);
	void GetLocomotionParameterForBurstDash(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForBurstSmash(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForDashUkemi(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, struct FVector2D* InputVector, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratDragonDashState* DragonDashStatus, struct FRotator* DragonDashRotation, EKoratDashUkemiState* DashUkemiStatus, EKoratDashUkemiType* DashUkemiType, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForDashUpDown(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratDashUpDownState* DashUpDownStatus, EKoratDashUpDownType* DashUpDownType, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForHighSpeedMove(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* TargetDistance, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsLockOn, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratHighSpeedMoveState* HighSpeedMoveStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForIdleMove(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* TargetDistance, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsLockOn, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, struct FHitResult* EventHitArgHit, bool* IsEnableMoveEffect, double* MoveEffectStartSpeed, double* MoveEffectEndSpeed, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratDragonDashState* DragonDashStatus, struct FRotator* DragonDashRotation, EKoratBlowState* BlowStatus, EKoratBlowType* BlowType, bool* BlowIsFront, struct FKoratHitBackMovementData* BlowHitBackMovementData, double* BlowHitSpeedNormal, double* BlowHitSpeedParallel, double* BlowBoundSSpeedMax, double* BlowBoundMSpeedMax, int32* BlowReactionLevel, EKoratDragonHomingState* DragonHomingStatus, EKoratDragonHomingState* RevengeDashStatus, bool* IsRequestPlayIdle, bool* IsTransitionRelaxIdle, EKoratActionIdleType* ActionIdleType, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus, EKoratDragonHomingState* BlastDashStatus);
	void GetLocomotionParameterForJump(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, double* DirectionY, double* DirectionZ, struct FVector* Velocity, double* VelocityZ, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForLocomotion(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, EKoratStepState* StepStatus, EKoratStepType* StepType);
	void GetLocomotionParameterForMobileMonitoring(bool* IsObstacleDetection);
	void GetLocomotionParameterForMoveStandUp(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* TargetDistance, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsLockOn, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForNumbReaction(EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForPostPhysics(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, bool* IsEnableMoveEffect, double* MoveEffectStartSpeed, double* MoveEffectEndSpeed, EKoratDragonDashState* DragonDashStatus, struct FRotator* DragonDashRotation);
	void GetLocomotionParameterForStanReaction(EKoratLocomotionState* LocomotionStatus, EKoratStunReactionState* StunReactionStatus, bool* StunReactionIsFront, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForStep(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratStepState* StepStatus, EKoratStepType* StepType, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterForWallUkemi(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratWallUkemiState* WallUkemiStatus, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus);
	void GetLocomotionParameterMoveStandUp(ECharacterMoveStandUpState* ActionStatus, bool* ActionIsFront, ECharacterMoveStandUpDirection* ActionDirection);
	void GetLocomotionParameterSuperHighSpeedMoveStr(EKoratHighSpeedMoveState* HighSpeedMoveStatus);
	void GetRunningAction(struct FKoratActionDataList* OutRunningAction, class FName* OutRunningSection);
	void IsEnableAction(bool* IsEnable);
	void IsNearRangeNow(bool* IsNear);
	void OnBlowAnimEvent(EKoratBlowState BlowState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnDragonDashAnimEvent(EKoratDragonDashState DragonDashState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnDragonHomingAnimEvent(EKoratDragonHomingState DragonHomingState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnEndBlowReaction();
	void OnEndDashCombatives();
	void OnEndJumpFT();
	void OnEndJumpIN();
	void OnEndJumpOT();
	void OnEndJumpUP();
	void OnEndStepIN();
	void OnEndStepOT();
	void OnEndUltimateBlastDash();
	void OnHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void OnPlayDashCombatives();
	void OnPlayDragonDashCounter();
	void OnPlayIdle();
	void OnPlayUltimateBlastDash();
	void OnRequestBlowReaction(const struct FKoratActionDataList& InAction, bool InFrontHit);
	void OnResetStateMachine();
	void OnTargetPlayTeleportationCounter();
	void SetCurrentAnimTimeRemainingFraction(class FName InCurrentStateName, double InFraction);
	void SetEnableMovementInput(bool IsEnable, bool ChangeJumpToFly, EKoratCharacterActionFinishReason ActionFinishReason);
	void SetHeightAxisValue(double HeightAxisValue);
	void SetInputVector(const struct FVector2D& InputVector);
	void SetMovingRotation(const struct FRotator& MovingRotation);

	void GetLocomotionParameterForCamera(double* XYSpeed, bool* IsLockOn, EKoratDragonDashState* DragonDashStatus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_CharacterLocomotion_C">();
	}
	static class IBPI_CharacterLocomotion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_CharacterLocomotion_C>();
	}
};
static_assert(alignof(IBPI_CharacterLocomotion_C) == 0x000008, "Wrong alignment on IBPI_CharacterLocomotion_C");
static_assert(sizeof(IBPI_CharacterLocomotion_C) == 0x000028, "Wrong size on IBPI_CharacterLocomotion_C");

}

