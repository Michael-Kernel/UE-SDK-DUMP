#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_Base

#include "Basic.hpp"

#include "AIModule_classes.hpp"
#include "SS_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_Base.BTD_Base_C
// 0x0060 (0x0100 - 0x00A0)
#pragma pack(push, 0x1)
class alignas(0x08) UBTD_Base_C : public UBTDecorator_BlueprintBase
{
public:
	class ASSCharacter*                           ControlledCharacter;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASSBattleAIController*                  OwnerController;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_AiBTDecoratorUtilityComponent_C*    DecoratorUtilityComponent;                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           TargetCharacter;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USSAiPersonalityComponent*              PersonalityComponent;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USSAiPadGenerationComponent*            PadGenerationComponent;                            // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USSAiCharacterStatusComponent*          AiStatusComponent;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USSAiLearningComponent*                 LearningComponent;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USSAiPerceptionComponent*               PerceptionComponent;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 ConditionNodeName;                                 // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bBtdLog;                                           // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddLog(class AActor* InOwnerActor, const class FString& InLog, const class FString& InSuffixLog, bool InSendLog);
	void Get_Log_Prefix_Name(class AActor* InOwnerActor, class FString* OutName);
	void GetConditionNodeName(class AActor* InOwnerActor, class FString* OutConditionNodeName);
	void GetRandom(class USSRandom** OutRandom);
	void Is_Condition_Checked(class AActor* InOwnerActor, ESSAiNodeConditionResultType* OutChked);
	bool PerformConditionCheck(class AActor* OwnerActor);
	bool PublicPerformConditionCheck(class AActor* InOwnerActor);
	bool SetupWork(class AActor* InOwnerActor);
	bool SetupWorkMini(class AActor* InOwnerActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_Base_C">();
	}
	static class UBTD_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBTD_Base_C) == 0x000008, "Wrong alignment on UBTD_Base_C");
static_assert(sizeof(UBTD_Base_C) == 0x000100, "Wrong size on UBTD_Base_C");
static_assert(offsetof(UBTD_Base_C, ControlledCharacter) == 0x0000A0, "Member 'UBTD_Base_C::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, OwnerController) == 0x0000A8, "Member 'UBTD_Base_C::OwnerController' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, DecoratorUtilityComponent) == 0x0000B0, "Member 'UBTD_Base_C::DecoratorUtilityComponent' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, TargetCharacter) == 0x0000B8, "Member 'UBTD_Base_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, PersonalityComponent) == 0x0000C0, "Member 'UBTD_Base_C::PersonalityComponent' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, PadGenerationComponent) == 0x0000C8, "Member 'UBTD_Base_C::PadGenerationComponent' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, AiStatusComponent) == 0x0000D0, "Member 'UBTD_Base_C::AiStatusComponent' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, LearningComponent) == 0x0000D8, "Member 'UBTD_Base_C::LearningComponent' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, PerceptionComponent) == 0x0000E0, "Member 'UBTD_Base_C::PerceptionComponent' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, ConditionNodeName) == 0x0000E8, "Member 'UBTD_Base_C::ConditionNodeName' has a wrong offset!");
static_assert(offsetof(UBTD_Base_C, bBtdLog) == 0x0000F8, "Member 'UBTD_Base_C::bBtdLog' has a wrong offset!");

}

