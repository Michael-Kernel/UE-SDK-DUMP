#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "EAnimStateMachineEventType_structs.hpp"
#include "Engine_structs.hpp"
#include "ECharacterNumbReactionState_structs.hpp"
#include "ECharacterMoveStandUpDirection_structs.hpp"
#include "ECharacterStrutJumpState_structs.hpp"
#include "FRequestAnimData_structs.hpp"
#include "ECharacterMoveStandUpState_structs.hpp"
#include "FLocomotionAxisRotationParameter_structs.hpp"
#include "FLocomotionRotationParameter_structs.hpp"
#include "FLocomotionSubClass_structs.hpp"
#include "ECharacterDirection_structs.hpp"
#include "EBattleKey_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Add Debug Draw Blow Param
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InDrawType;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InHitTime;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InDrawDuration;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param, InLocation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param::InLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param, InDrawType) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param::InDrawType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param, InHitTime) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param::InHitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param, InDrawDuration) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param::InDrawDuration' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementInput
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddCharacterMovementInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddCharacterMovementInput) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddCharacterMovementInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddCharacterMovementInput) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_AddCharacterMovementInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementInput, WorldDirection) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementInput, Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementInput::Value' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementXInput
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput, WorldDirection) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput, Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput::Value' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementXYInput
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput, Value) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput::Value' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementYInput
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput, WorldDirection) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput, Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput::Value' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementZInputLast
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast, Value) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast::Value' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddChildDashRoute
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddChildDashRoute final
{
public:
	class AActor*                                 DashRouteActor;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddChildDashRoute) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddChildDashRoute");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddChildDashRoute) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_AddChildDashRoute");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddChildDashRoute, DashRouteActor) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddChildDashRoute::DashRouteActor' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddDashVector
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AddDashVector final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_B_ImplicitCast;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AddDashVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_AddDashVector");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AddDashVector) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_AddDashVector");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, DeltaSeconds) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_LessEqual_DoubleDouble_B_ImplicitCast) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_LessEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AddDashVector, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_AddDashVector::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AnimNotifyInputParam
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AnimNotifyInputParam final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AnimNotifyInputParam) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_AnimNotifyInputParam");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AnimNotifyInputParam) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_AnimNotifyInputParam");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AnimNotifyInputParam, Enable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AnimNotifyInputParam::Enable' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AutoSetCharacterMovementModeToIdle
// 0x0003 (0x0003 - 0x0000)
struct BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle final
{
public:
	bool                                          InIsValidSetWalking;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSet;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 SetMovementMode;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle) == 0x000003, "Wrong size on BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle, InIsValidSetWalking) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle::InIsValidSetWalking' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle, IsSet) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle::IsSet' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle, SetMovementMode) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle::SetMovementMode' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CalcDirection
// 0x0080 (0x0080 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CalcDirection final
{
public:
	double                                        InYaw;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InAngleFront;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InAngleLeftRight;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsInclusiveAngleFront;                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           Direction;                                         // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInclusiveAngleFront;                             // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinusFrontHalf;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrontHalf;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngleLeftRight;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngleFront;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           OutDirection;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CalcDirection) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CalcDirection");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CalcDirection) == 0x000080, "Wrong size on BP_CharacterLocomotionComponent_C_CalcDirection");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, InYaw) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::InYaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, InAngleFront) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::InAngleFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, InAngleLeftRight) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::InAngleLeftRight' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, InIsInclusiveAngleFront) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::InIsInclusiveAngleFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, Direction) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::Direction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, IsInclusiveAngleFront) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::IsInclusiveAngleFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, MinusFrontHalf) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::MinusFrontHalf' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, FrontHalf) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::FrontHalf' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, AngleLeftRight) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::AngleLeftRight' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, AngleFront) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::AngleFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, Yaw) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, OutDirection) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::OutDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x000071, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalcDirection, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_CalcDirection::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Calculate Dragon Dash Rotation Speed Param
// 0x00F8 (0x00F8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param final
{
public:
	struct FRotator                               OutRotationSpeed;                                  // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               OutRotationInitialSpeed;                           // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               OutRotationAcceleration;                           // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ResultAcceleration;                                // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ResultInitialSpeed;                                // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ResultSpeed;                                       // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DistanceNow;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTargetDistance_Length;                 // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_DragonDashRotatorLerp_ReturnValue;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_DragonDashRotatorLerp_ReturnValue_1;      // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_DragonDashRotatorLerp_ReturnValue_2;      // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast; // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast_1; // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast_2; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param) == 0x0000F8, "Wrong size on BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, OutRotationSpeed) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::OutRotationSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, OutRotationInitialSpeed) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::OutRotationInitialSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, OutRotationAcceleration) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::OutRotationAcceleration' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, ResultAcceleration) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::ResultAcceleration' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, ResultInitialSpeed) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::ResultInitialSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, ResultSpeed) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::ResultSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, DistanceNow) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::DistanceNow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_GetTargetDistance_Length) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_GetTargetDistance_Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_DragonDashRotatorLerp_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_DragonDashRotatorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_DragonDashRotatorLerp_ReturnValue_1) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_DragonDashRotatorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_DragonDashRotatorLerp_ReturnValue_2) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_DragonDashRotatorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast_1) == 0x0000EC, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param, CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast_2) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param::CallFunc_DragonDashRotatorLerp_InAlpha_ImplicitCast_2' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Calculate Locomotion Rotation
// 0x01B0 (0x01B0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation final
{
public:
	struct FRotator                               InNewRotation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFLocomotionAxisRotationParameter      InRotationParameterXRoll;                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InRotationParameterYPitch;                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InRotationParameterZYaw;                           // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsInterpConstant;                                // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OutNewRotation;                                    // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DeltaSeconds;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotation;                                   // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ResultRotation;                                    // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetRotationInternal_Rotation;             // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculateLocomotionAxisRotation_OutAngle; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateLocomotionAxisRotation_OutAngle_1; // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_CalculateLocomotionAxisRotation_OutAngle_2; // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast; // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast_1; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast_2; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast_1; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast_2; // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation) == 0x0001B0, "Wrong size on BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, InNewRotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::InNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, InRotationParameterXRoll) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::InRotationParameterXRoll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, InRotationParameterYPitch) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::InRotationParameterYPitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, InRotationParameterZYaw) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::InRotationParameterZYaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, InIsInterpConstant) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::InIsInterpConstant' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, OutNewRotation) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::OutNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, DeltaSeconds) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CurrentRotation) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CurrentRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, ResultRotation) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::ResultRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_GetRotationInternal_Rotation) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_GetRotationInternal_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Roll) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Pitch) == 0x0000BC, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Yaw) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Roll_1) == 0x0000C4, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Pitch_1) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Yaw_1) == 0x0000CC, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Roll_2) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Pitch_2) == 0x0000D4, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Yaw_2) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Roll_3) == 0x0000DC, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Pitch_3) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Yaw_3) == 0x0000E4, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_SelectFloat_ReturnValue) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Roll_4) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Pitch_4) == 0x000104, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_BreakRotator_Yaw_4) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_OutAngle) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_OutAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_OutAngle_1) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_OutAngle_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_MakeRotator_ReturnValue) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_MakeRotator_ReturnValue_1) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_OutAngle_2) == 0x000150, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_OutAngle_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_MakeRotator_ReturnValue_2) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast) == 0x000170, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast_1) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast_2) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_InTargetAngle_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast_1) == 0x000190, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast_2) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_CalculateLocomotionAxisRotation_InCurrentAngle_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0001A4, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0001A8, "Member 'BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CalculateAnimationDirectionLocomotionSub
// 0x00B0 (0x00B0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub final
{
public:
	EKoratLocomotionState                         InLocomotionStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InVelocity;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InCharacterRot;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLastVelocityRot;                                 // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Animation_Direction_DirectionY; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Animation_Direction_DirectionZ; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_DirectionY_ImplicitCast;     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_DirectionZ_ImplicitCast;     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub) == 0x0000B0, "Wrong size on BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, InLocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::InLocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, InVelocity) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::InVelocity' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, InCharacterRot) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::InCharacterRot' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, InLastVelocityRot) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::InLastVelocityRot' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, DirectionY_0) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, DirectionZ_0) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_GetLocomotionSub_SubInstance) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_Calculate_Animation_Direction_DirectionY) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_Calculate_Animation_Direction_DirectionY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, CallFunc_Calculate_Animation_Direction_DirectionZ) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::CallFunc_Calculate_Animation_Direction_DirectionZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, K2Node_FunctionResult_DirectionY_ImplicitCast) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::K2Node_FunctionResult_DirectionY_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub, K2Node_FunctionResult_DirectionZ_ImplicitCast) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub::K2Node_FunctionResult_DirectionZ_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CalculateLocomotionAxisRotation
// 0x0160 (0x0160 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation final
{
public:
	double                                        InCurrentAngle;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTargetAngle;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InLocomotionAxisRotationParameter;                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InDeltaSeconds;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsInterpConstant;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OutAngle;                                          // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResultAngle;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_Constant_ReturnValue;           // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_ClampAngle_ReturnValue;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampAngle_MinAngleDegrees_ImplicitCast;  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampAngle_MaxAngleDegrees_ImplicitCast;  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast;       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast; // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast; // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_1;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_2;          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_ResultAngle_ImplicitCast;       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_3;          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_ResultAngle_ImplicitCast_1;     // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation) == 0x000160, "Wrong size on BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, InCurrentAngle) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::InCurrentAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, InTargetAngle) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::InTargetAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, InLocomotionAxisRotationParameter) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::InLocomotionAxisRotationParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, InDeltaSeconds) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, InIsInterpConstant) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::InIsInterpConstant' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, OutAngle) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::OutAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, ResultAngle) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::ResultAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_DegreesToRadians_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_RInterpTo_Constant_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_RInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_BreakRotator_Roll) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_BreakRotator_Pitch) == 0x00009C, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_BreakRotator_Yaw) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_ReturnValue_2) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_ReturnValue_3) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_ClampAngle_ReturnValue) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_RInterpTo_ReturnValue) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_BreakRotator_Roll_1) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_BreakRotator_Pitch_1) == 0x0000FC, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_BreakRotator_Yaw_1) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_DegreesToRadians_A_ImplicitCast) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_DegreesToRadians_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_ClampAngle_MinAngleDegrees_ImplicitCast) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_ClampAngle_MinAngleDegrees_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_ClampAngle_MaxAngleDegrees_ImplicitCast) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_ClampAngle_MaxAngleDegrees_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_RInterpTo_InterpSpeed_ImplicitCast) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_RInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast) == 0x00012C, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000134, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_Roll_ImplicitCast_1) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_Roll_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x00013C, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_Roll_ImplicitCast_2) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_Roll_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, K2Node_VariableSet_ResultAngle_ImplicitCast) == 0x000148, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::K2Node_VariableSet_ResultAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, CallFunc_MakeRotator_Roll_ImplicitCast_3) == 0x000150, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::CallFunc_MakeRotator_Roll_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation, K2Node_VariableSet_ResultAngle_ImplicitCast_1) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation::K2Node_VariableSet_ResultAngle_ImplicitCast_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Change Range Mode
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Change_Range_Mode final
{
public:
	bool                                          IsNear;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Change_Range_Mode) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_Change_Range_Mode");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Change_Range_Mode) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_Change_Range_Mode");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Change_Range_Mode, IsNear) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Change_Range_Mode::IsNear' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDown
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeDown final
{
public:
	bool                                          InIsFront;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDownToRevivalTime;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeOtherDown;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumbReactionToState_IsStartNumbReaction; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckStunReactionToState_IsStartStunReaction; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeDown) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeDown) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDown, InIsFront) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeDown::InIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDown, InDownToRevivalTime) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ChangeDown::InDownToRevivalTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDown, IsChangeOtherDown) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ChangeDown::IsChangeOtherDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDown, CallFunc_CheckNumbReactionToState_IsStartNumbReaction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_ChangeDown::CallFunc_CheckNumbReactionToState_IsStartNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDown, CallFunc_CheckStunReactionToState_IsStartStunReaction) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_ChangeDown::CallFunc_CheckStunReactionToState_IsStartStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDown, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000013, "Member 'BP_CharacterLocomotionComponent_C_ChangeDown::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDownRevivalKeyPressed
// 0x0005 (0x0005 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed final
{
public:
	bool                                          IsChange;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeOtherDownRevival;                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBlowDownRevival_IsOK;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckMoveStandUp_IsStartSubState;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed) == 0x000005, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed, IsChange) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed::IsChange' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed, IsChangeOtherDownRevival) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed::IsChangeOtherDownRevival' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed, CallFunc_CheckBlowDownRevival_IsOK) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed::CallFunc_CheckBlowDownRevival_IsOK' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed, CallFunc_CheckMoveStandUp_IsStartSubState) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed::CallFunc_CheckMoveStandUp_IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDragonDashStatus
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus final
{
public:
	EKoratDragonDashState                         InDragonDashStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDragonDashStateMovementParameter_IsUseParameter; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter CallFunc_GetDragonDashStateMovementParameter_MovementParameter; // 0x0008(0x0020)(NoDestructor)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, InDragonDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::InDragonDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, CallFunc_GetDragonDashStateMovementParameter_IsUseParameter) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::CallFunc_GetDragonDashStateMovementParameter_IsUseParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, CallFunc_GetDragonDashStateMovementParameter_MovementParameter) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::CallFunc_GetDragonDashStateMovementParameter_MovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeIdleMove
// 0x0040 (0x0040 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeIdleMove final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_GetMovementModeInternal_MovementMode;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTransitionFlyingMode_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumbReactionToState_IsStartNumbReaction; // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckStunReactionToState_IsStartStunReaction; // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeIdleMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeIdleMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeIdleMove) == 0x000040, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeIdleMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_GetMovementModeInternal_MovementMode) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_GetMovementModeInternal_MovementMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_IsTransitionFlyingMode_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_IsTransitionFlyingMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_CheckNumbReactionToState_IsStartNumbReaction) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_CheckNumbReactionToState_IsStartNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeIdleMove, CallFunc_CheckStunReactionToState_IsStartStunReaction) == 0x00003A, "Member 'BP_CharacterLocomotionComponent_C_ChangeIdleMove::CallFunc_CheckStunReactionToState_IsStartStunReaction' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateAfterULTFalling
// 0x0308 (0x0308 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling final
{
public:
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              CallFunc_GetBlastUltimateGaveAfterHitBackMovementData_OutMovementData; // 0x0010(0x02E0)()
	EKoratBlowState                               Temp_byte_Variable;                                // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAfterULTFallingFront_OutIsFront;        // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               Temp_byte_Variable_1;                              // 0x0302(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0303(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               K2Node_Select_Default;                             // 0x0305(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling) == 0x000308, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_GetSubBlow_SubBlow) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_MakeLiteralByte_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_GetBlastUltimateGaveAfterHitBackMovementData_OutMovementData) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_GetBlastUltimateGaveAfterHitBackMovementData_OutMovementData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, Temp_byte_Variable) == 0x0002F0, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_Map_Find_Value) == 0x0002F8, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_Map_Find_ReturnValue) == 0x000300, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_IsAfterULTFallingFront_OutIsFront) == 0x000301, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_IsAfterULTFallingFront_OutIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, Temp_byte_Variable_1) == 0x000302, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000303, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, Temp_bool_Variable) == 0x000304, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling, K2Node_Select_Default) == 0x000305, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateAfterULTFalling::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateDragonDash
// 0x00F8 (0x00F8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeStateDragonDash final
{
public:
	EKoratDragonDashState                         InStartState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InSpCost;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsKeepOldDashRotation;                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                OutStepType;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGround;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Dash_Input_Vector_OutInputVector;     // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral;  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISSBattleController>   K2Node_DynamicCast_AsSSBattle_Controller;          // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetMovementInputKeyVector_ReturnValue;    // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Dash_Input_Vector_OutInputVector_1;   // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral_1; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterAction_C> K2Node_DynamicCast_AsBPI_Character_Action;         // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_Vector2DToVector_Z_ImplicitCast;     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_Vector2DToVector_Z_ImplicitCast_1;   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ConsumeSP_InSpCost_ImplicitCast;          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeStateDragonDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash) == 0x0000F8, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeStateDragonDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, InStartState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::InStartState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, InSpCost) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::InSpCost' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, InIsKeepOldDashRotation) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::InIsKeepOldDashRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, OutStepType) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::OutStepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, IsGround) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::IsGround' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Map_Find_Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Get_Dash_Input_Vector_OutInputVector) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Get_Dash_Input_Vector_OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000059, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_GetController_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, K2Node_DynamicCast_AsSSBattle_Controller) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::K2Node_DynamicCast_AsSSBattle_Controller' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_GetMovementInputKeyVector_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_GetMovementInputKeyVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Get_Dash_Input_Vector_OutInputVector_1) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Get_Dash_Input_Vector_OutInputVector_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral_1) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, K2Node_DynamicCast_AsBPI_Character_Action) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::K2Node_DynamicCast_AsBPI_Character_Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Conv_Vector2DToVector_Z_ImplicitCast) == 0x0000EC, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Conv_Vector2DToVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_Conv_Vector2DToVector_Z_ImplicitCast_1) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_Conv_Vector2DToVector_Z_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateDragonDash, CallFunc_ConsumeSP_InSpCost_ImplicitCast) == 0x0000F4, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateDragonDash::CallFunc_ConsumeSP_InSpCost_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateFalling
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeStateFalling final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckFastRepeatCurrentStatus_IsFastRepeat; // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeStateFalling) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeStateFalling");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeStateFalling) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeStateFalling");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_GetSubJump_SubJump) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_GetSubJump_SubJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_Map_Find_Value) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000049, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_CheckFastRepeatCurrentStatus_IsFastRepeat) == 0x00004A, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_CheckFastRepeatCurrentStatus_IsFastRepeat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00004B, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateFalling, CallFunc_BooleanAND_ReturnValue) == 0x00004C, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateFalling::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateIdleMove
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ChangeStateIdleMove final
{
public:
	EKoratActionIdleType                          CallFunc_GetLatestActionIdleType_ActionIdleType;   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ChangeStateIdleMove) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_ChangeStateIdleMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ChangeStateIdleMove) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_ChangeStateIdleMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ChangeStateIdleMove, CallFunc_GetLatestActionIdleType_ActionIdleType) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ChangeStateIdleMove::CallFunc_GetLatestActionIdleType_ActionIdleType' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check Idle Move Key Pressed Action
// 0x0048 (0x0048 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterAction_C> K2Node_DynamicCast_AsBPI_Character_Action;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDragonDashTurn_ChangeDragonDash;     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckShortDashTurn_IsStartShortDash;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckJumpTurn_ChangeJump;                 // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDashUpDownTurn_ChangeDashUpDown;     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDragonHoming_ChangeDragonHoming;     // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckStep_ChangeStep;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action) == 0x000048, "Wrong size on BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, K2Node_DynamicCast_AsBPI_Character_Action) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::K2Node_DynamicCast_AsBPI_Character_Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_CheckDragonDashTurn_ChangeDragonDash) == 0x00002A, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_CheckDragonDashTurn_ChangeDragonDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_GetLocomotionSub_SubInstance) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_CheckShortDashTurn_IsStartShortDash) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_CheckShortDashTurn_IsStartShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_Start_NewParam) == 0x00003A, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_CheckJumpTurn_ChangeJump) == 0x00003B, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_CheckJumpTurn_ChangeJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_CheckDashUpDownTurn_ChangeDashUpDown) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_CheckDashUpDownTurn_ChangeDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_CheckDragonHoming_ChangeDragonHoming) == 0x00003D, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_CheckDragonHoming_ChangeDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x00003E, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x00003F, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action, CallFunc_CheckStep_ChangeStep) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_Check_Idle_Move_Key_Pressed_Action::CallFunc_CheckStep_ChangeStep' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check Start Rotate Auto Idle
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationInternal_Rotation;             // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsRotateAutoIdle_OutIsRotateLanded;    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_GetRotationInternal_Rotation) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_GetRotationInternal_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_GetIsRotateAutoIdle_OutIsRotateLanded) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_GetIsRotateAutoIdle_OutIsRotateLanded' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_Abs_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000041, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle, CallFunc_Abs_A_ImplicitCast) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check Wall Ukemi
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeWallUkemi;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, ChangeWallUkemi) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::ChangeWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_Start_NewParam) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_Check_CanStart) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check ZBurst Dash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeZBurstDash;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, ChangeZBurstDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::ChangeZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000014, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000015, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlastSkill1Dash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeBlastDash;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, ChangeBlastDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::ChangeBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlastSkill2Dash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeBlastDash;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, ChangeBlastDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::ChangeBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlastUltimateDash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeBlastDash;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, ChangeBlastDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::ChangeBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlow
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckBlow final
{
public:
	struct FKoratActionDataList                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          InFrontHit;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeBlow;                                        // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStartWithParam_IsStarted;         // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckBlow) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckBlow");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckBlow) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_CheckBlow");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, InAction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::InAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, InFrontHit) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::InFrontHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, InActionFinishReason) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, ChangeBlow) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::ChangeBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, IsChangeStep) == 0x00000B, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_GetSubBlow_SubBlow) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_MakeLiteralByte_ReturnValue) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlow, CallFunc_CheckAndStartWithParam_IsStarted) == 0x00002A, "Member 'BP_CharacterLocomotionComponent_C_CheckBlow::CallFunc_CheckAndStartWithParam_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlowDownRevival
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckBlowDownRevival final
{
public:
	bool                                          IsOK;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDownRevival_IsOK;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUseHitStop_IsUseHitStop;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckBlowDownRevival");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckBlowDownRevival");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, IsOK) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::IsOK' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, CallFunc_GetSubBlow_SubBlow) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, CallFunc_CheckDownRevival_IsOK) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::CallFunc_CheckDownRevival_IsOK' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, K2Node_DynamicCast_AsBP_Character) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, CallFunc_IsUseHitStop_IsUseHitStop) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::CallFunc_IsUseHitStop_IsUseHitStop' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBlowDownRevival, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckBlowDownRevival::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBurstSmash
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckBurstSmash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartSubState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLocomotionSub_IsStartLocomotionSub;  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckBurstSmash) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckBurstSmash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckBurstSmash) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_CheckBurstSmash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBurstSmash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckBurstSmash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBurstSmash, IsStartSubState) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckBurstSmash::IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBurstSmash, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckBurstSmash::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckBurstSmash, CallFunc_CheckLocomotionSub_IsStartLocomotionSub) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckBurstSmash::CallFunc_CheckLocomotionSub_IsStartLocomotionSub' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDashUkemi
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDashUkemi final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDashUkemi;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDashUkemi) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDashUkemi");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDashUkemi) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDashUkemi");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, ChangeDashUkemi) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::ChangeDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_Start_NewParam) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_Check_CanStart) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUkemi, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUkemi::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDashUpDown
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDashUpDown final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDashUpDown;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDashUpDown) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDashUpDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDashUpDown) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDashUpDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, InInSkip) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, ChangeDashUpDown) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::ChangeDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_Start_NewParam) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDown, CallFunc_Check_CanStart) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDown::CallFunc_Check_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDashUpDownTurn
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDashUpDown;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, InInSkip) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, ChangeDashUpDown) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::ChangeDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, CallFunc_GetLocomotionSub_SubInstance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, CallFunc_Check_CanStart) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, K2Node_DynamicCast_AsBP_Character) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDash
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDragonDash final
{
public:
	EKoratDragonDashState                         InStartState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkipPlayableCheck;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDragonDash;                                  // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBranch                                  CallFunc_IsDragonDashStartRequestOnBattleAssist_OutResult; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDragonDashSpCostIN_SpCostIN;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDragonDashSpCostIN_SpCostIN_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSPCosumable_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterAction_C> K2Node_DynamicCast_AsBPI_Character_Action;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayableDragonDash_IsPlayable;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CheckSPCosumable_InSpCost_ImplicitCast;   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDragonDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDragonDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDragonDash) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDragonDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, InStartState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::InStartState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, IsSkipPlayableCheck) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::IsSkipPlayableCheck' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, ChangeDragonDash) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::ChangeDragonDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_IsDragonDashStartRequestOnBattleAssist_OutResult) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_IsDragonDashStartRequestOnBattleAssist_OutResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_GetDragonDashSpCostIN_SpCostIN) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_GetDragonDashSpCostIN_SpCostIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_GetDragonDashSpCostIN_SpCostIN_1) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_GetDragonDashSpCostIN_SpCostIN_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_CheckSPCosumable_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_CheckSPCosumable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, K2Node_DynamicCast_AsBPI_Character_Action) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::K2Node_DynamicCast_AsBPI_Character_Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_IsPlayableDragonDash_IsPlayable) == 0x000032, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_IsPlayableDragonDash_IsPlayable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDash, CallFunc_CheckSPCosumable_InSpCost_ImplicitCast) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDash::CallFunc_CheckSPCosumable_InSpCost_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDashEnd
// 0x00C0 (0x00C0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDragonDashEnd final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnd;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        End0AngleHalfMinus;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        End0AngleHalfPlus;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDragonDashReverseDirection_IsChangeDirection; // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTargetDistance_Length;                 // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBranch                                  CallFunc_IsDragonDashStopRequestOnBattleAssist_OutResult; // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSPCosumable_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_B_ImplicitCast;    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_B_ImplicitCast_1;  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast_1;  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDragonDashEnd");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd) == 0x0000C0, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDragonDashEnd");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, IsEnd) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::IsEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, End0AngleHalfMinus) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::End0AngleHalfMinus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, End0AngleHalfPlus) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::End0AngleHalfPlus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, DeltaSeconds) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_BreakRotator_Roll) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_BreakRotator_Pitch) == 0x000064, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_BreakRotator_Yaw) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_InRange_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x00006D, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_CheckDragonDashReverseDirection_IsChangeDirection) == 0x00006E, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_CheckDragonDashReverseDirection_IsChangeDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_GetTargetDistance_Length) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_GetTargetDistance_Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_IsDragonDashStopRequestOnBattleAssist_OutResult) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_IsDragonDashStopRequestOnBattleAssist_OutResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, K2Node_SwitchEnum_CmpSuccess) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000083, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_CheckSPCosumable_ReturnValue) == 0x000084, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_CheckSPCosumable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000085, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_BooleanAND_ReturnValue) == 0x000086, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_LessEqual_DoubleDouble_B_ImplicitCast) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_LessEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_LessEqual_DoubleDouble_B_ImplicitCast_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_LessEqual_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_InRange_FloatFloat_Value_ImplicitCast) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_InRange_FloatFloat_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_InRange_FloatFloat_Value_ImplicitCast_1) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_InRange_FloatFloat_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashEnd, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashEnd::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDashReverseDirection
// 0x00C8 (0x00C8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection final
{
public:
	bool                                          IsChangeDirection;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKoratBattleKeyDown_IsDown;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetMoveLookAtRotation_OutLookAtRotation;  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           CallFunc_CalcDirection_Direction;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalcDirection_InYaw_ImplicitCast;         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection) == 0x0000C8, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, IsChangeDirection) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::IsChangeDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_IsInputKoratBattleKeyDown_IsDown) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_IsInputKoratBattleKeyDown_IsDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_GetMoveLookAtRotation_OutLookAtRotation) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_GetMoveLookAtRotation_OutLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_BreakVector2D_X) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_BreakRotator_Roll) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_BreakRotator_Pitch) == 0x0000A4, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_BreakRotator_Yaw) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_CalcDirection_Direction) == 0x0000AC, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_CalcDirection_Direction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000AD, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection, CallFunc_CalcDirection_InYaw_ImplicitCast) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection::CallFunc_CalcDirection_InYaw_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDashTurn
// 0x00E0 (0x00E0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDragonDashTurn final
{
public:
	EKoratDragonDashState                         InStartState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkipPlayableCheck;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDragonDash;                                  // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Dash_Input_Vector_OutInputVector;     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral;  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EKoratBranch                                  CallFunc_IsDragonDashStartRequestOnBattleAssist_OutResult; // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDragonDashSpCostIN_SpCostIN;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDragonDashSpCostIN_SpCostIN_1;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSPCosumable_ReturnValue;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterAction_C> K2Node_DynamicCast_AsBPI_Character_Action;         // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayableDragonDash_IsPlayable;          // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_Vector2DToVector_Z_ImplicitCast;     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CheckSPCosumable_InSpCost_ImplicitCast;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDragonDashTurn");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn) == 0x0000E0, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDragonDashTurn");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, InStartState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::InStartState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, IsSkipPlayableCheck) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::IsSkipPlayableCheck' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, ChangeDragonDash) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::ChangeDragonDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, K2Node_DynamicCast_AsBP_Character) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Get_Dash_Input_Vector_OutInputVector) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Get_Dash_Input_Vector_OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_IsDragonDashStartRequestOnBattleAssist_OutResult) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_IsDragonDashStartRequestOnBattleAssist_OutResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_BreakRotator_Roll) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_BreakRotator_Pitch) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_BreakRotator_Yaw) == 0x000074, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, K2Node_SwitchEnum_CmpSuccess) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Abs_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_GetDragonDashSpCostIN_SpCostIN) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_GetDragonDashSpCostIN_SpCostIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_GetDragonDashSpCostIN_SpCostIN_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_GetDragonDashSpCostIN_SpCostIN_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_CheckSPCosumable_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_CheckSPCosumable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_MakeLiteralByte_ReturnValue) == 0x0000A1, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_GetLocomotionSub_SubInstance) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, K2Node_DynamicCast_AsBPI_Character_Action) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::K2Node_DynamicCast_AsBPI_Character_Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C9, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_IsPlayableDragonDash_IsPlayable) == 0x0000CA, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_IsPlayableDragonDash_IsPlayable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Conv_Vector2DToVector_Z_ImplicitCast) == 0x0000CC, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Conv_Vector2DToVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_Abs_A_ImplicitCast) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonDashTurn, CallFunc_CheckSPCosumable_InSpCost_ImplicitCast) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonDashTurn::CallFunc_CheckSPCosumable_InSpCost_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonHoming
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckDragonHoming final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDragonHoming;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckDragonHoming) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckDragonHoming");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckDragonHoming) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckDragonHoming");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, ChangeDragonHoming) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::ChangeDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckDragonHoming, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckDragonHoming::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckFastRepeatCurrentStatus
// 0x0040 (0x0040 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus final
{
public:
	EKoratLocomotionState                         InCurrentStatus;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFastRepeat;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleElapsedTime;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleGameStateBase_C*              K2Node_DynamicCast_AsBP_Battle_Game_State_Base;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBattleElapsedTime_ReturnValue;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus) == 0x000040, "Wrong size on BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, InCurrentStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::InCurrentStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, IsFastRepeat) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::IsFastRepeat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, BattleElapsedTime) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::BattleElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, K2Node_DynamicCast_AsBP_Battle_Game_State_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::K2Node_DynamicCast_AsBP_Battle_Game_State_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_BooleanAND_ReturnValue_1) == 0x000031, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_GetBattleElapsedTime_ReturnValue) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_GetBattleElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckHighSpeedMove
// 0x0005 (0x0005 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckHighSpeedMove final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartSubState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_actHSMS_actHSM_Off_Result;   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLocomotionSub_IsStartLocomotionSub;  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckHighSpeedMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove) == 0x000005, "Wrong size on BP_CharacterLocomotionComponent_C_CheckHighSpeedMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckHighSpeedMove::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove, IsStartSubState) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckHighSpeedMove::IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckHighSpeedMove::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove, CallFunc_IsGiantChara_actHSMS_actHSM_Off_Result) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckHighSpeedMove::CallFunc_IsGiantChara_actHSMS_actHSM_Off_Result' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckHighSpeedMove, CallFunc_CheckLocomotionSub_IsStartLocomotionSub) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckHighSpeedMove::CallFunc_CheckLocomotionSub_IsStartLocomotionSub' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckIdleMoveKoratKeyPressedAction
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction final
{
public:
	bool                                          CallFunc_CheckHighSpeedMove_IsStartSubState;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction, CallFunc_CheckHighSpeedMove_IsStartSubState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckIdleMoveKoratKeyPressedAction::CallFunc_CheckHighSpeedMove_IsStartSubState' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckJump
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckJump final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeJump;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeJump;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckJump) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckJump");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckJump) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckJump");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, ChangeJump) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::ChangeJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, IsChangeJump) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::IsChangeJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJump, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckJump::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckJumpTurn
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckJumpTurn final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeJump;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeJump;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckJumpTurn) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckJumpTurn");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckJumpTurn) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckJumpTurn");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, ChangeJump) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::ChangeJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, IsChangeJump) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::IsChangeJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, CallFunc_GetLocomotionSub_SubInstance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, CallFunc_Check_CanStart) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, K2Node_DynamicCast_AsBP_Character) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckJumpTurn, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckJumpTurn::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckLocomotionSub
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckLocomotionSub final
{
public:
	EKoratLocomotionState                         InLocomotionStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartLocomotionSub;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckLocomotionSub");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckLocomotionSub");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, InLocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::InLocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, IsStartLocomotionSub) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::IsStartLocomotionSub' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, IsChangeStep) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_Start_NewParam) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckLocomotionSub, CallFunc_Check_CanStart) == 0x000023, "Member 'BP_CharacterLocomotionComponent_C_CheckLocomotionSub::CallFunc_Check_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckMobileMonitoring
// 0x0068 (0x0068 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckMobileMonitoring final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLastMovementInputVector_ReturnValue;   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckMobileMonitoring");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring) == 0x000068, "Wrong size on BP_CharacterLocomotionComponent_C_CheckMobileMonitoring");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_GetLastMovementInputVector_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_GetLastMovementInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_Normal_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_Dot_VectorVector_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMobileMonitoring, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_CheckMobileMonitoring::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckMoveStandUp
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckMoveStandUp final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartSubState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLocomotionSub_IsStartLocomotionSub;  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckMoveStandUp) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckMoveStandUp");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckMoveStandUp) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_CheckMoveStandUp");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMoveStandUp, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckMoveStandUp::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMoveStandUp, IsStartSubState) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckMoveStandUp::IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMoveStandUp, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckMoveStandUp::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckMoveStandUp, CallFunc_CheckLocomotionSub_IsStartLocomotionSub) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckMoveStandUp::CallFunc_CheckLocomotionSub_IsStartLocomotionSub' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckNumbReaction
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckNumbReaction final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartNumbReaction;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumbReactionToState_IsStartNumbReaction; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckNumbReaction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckNumbReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckNumbReaction) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_CheckNumbReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReaction, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReaction::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReaction, IsStartNumbReaction) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReaction::IsStartNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReaction, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReaction::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReaction, CallFunc_CheckNumbReactionToState_IsStartNumbReaction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReaction::CallFunc_CheckNumbReactionToState_IsStartNumbReaction' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckNumbReactionToState
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckNumbReactionToState final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterNumbReactionState                   InStartNumbReactionStatus;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsFront;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartNumbReaction;                               // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckToState_CanStart;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckNumbReactionToState");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckNumbReactionToState");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, InStartNumbReactionStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::InStartNumbReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, InIsFront) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::InIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, IsStartNumbReaction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::IsStartNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_Map_Find_Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_MakeLiteralByte_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckNumbReactionToState, CallFunc_CheckToState_CanStart) == 0x000023, "Member 'BP_CharacterLocomotionComponent_C_CheckNumbReactionToState::CallFunc_CheckToState_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckRevengeDash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckRevengeDash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeRevengeDash;                                 // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckRevengeDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckRevengeDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckRevengeDash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckRevengeDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, ChangeRevengeDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::ChangeRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_CheckAndStart_IsStarted) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckRevengeDash, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckRevengeDash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckShortDash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckShortDash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartShortDash;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckShortDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckShortDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckShortDash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckShortDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, IsStartShortDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::IsStartShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_Start_NewParam) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_Check_CanStart) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDash, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckShortDashTurn
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckShortDashTurn final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartShortDash;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   TurningAction;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCanFly_ReturnValue;                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckShortDashTurn");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_CheckShortDashTurn");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, IsStartShortDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::IsStartShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, TurningAction) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::TurningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, IsChangeStep) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_IsCanFly_ReturnValue) == 0x00000D, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_IsCanFly_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, K2Node_DynamicCast_AsBP_Character) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_MakeLiteralByte_ReturnValue) == 0x00001B, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_BooleanOR_ReturnValue_1) == 0x00001D, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_GetLocomotionSub_SubInstance) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckShortDashTurn, CallFunc_Check_CanStart) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_CheckShortDashTurn::CallFunc_Check_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckSPCosumableDragonDashBK
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK final
{
public:
	bool                                          IsAbleBK;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSPCosumable_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK, IsAbleBK) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK::IsAbleBK' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK, CallFunc_CheckSPCosumable_ReturnValue) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK::CallFunc_CheckSPCosumable_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStep
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckStep final
{
public:
	bool                                          InChangeJumpToFly;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeStep;                                        // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStep_C*       CallFunc_GetSubStep_SubStep;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStartChangeJumpToFly_IsStarted;   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckStep) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckStep");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckStep) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckStep");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, InChangeJumpToFly) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::InChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, ChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::ChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, IsChangeStep) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_MakeLiteralByte_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_GetSubStep_SubStep) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_GetSubStep_SubStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_Map_Find_Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStep, CallFunc_CheckAndStartChangeJumpToFly_IsStarted) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckStep::CallFunc_CheckAndStartChangeJumpToFly_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStrutJump
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckStrutJump final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeJump;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckStrutJump) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckStrutJump");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckStrutJump) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_CheckStrutJump");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStrutJump, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckStrutJump::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStrutJump, ChangeJump) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckStrutJump::ChangeJump' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStunReaction
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckStunReaction final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartStunReaction;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckStunReactionToState_IsStartStunReaction; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckStunReaction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckStunReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckStunReaction) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_CheckStunReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReaction, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReaction::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReaction, IsStartStunReaction) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReaction::IsStartStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReaction, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReaction::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReaction, CallFunc_CheckStunReactionToState_IsStartStunReaction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReaction::CallFunc_CheckStunReactionToState_IsStartStunReaction' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStunReactionToState
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckStunReactionToState final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStunReactionState                       InStartStunReactionStatus;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsFront;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartStunReaction;                               // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckToState_CanStart;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckStunReactionToState");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_CheckStunReactionToState");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, InStartStunReactionStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::InStartStunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, InIsFront) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::InIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, IsStartStunReaction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::IsStartStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_Map_Find_Value) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_MakeLiteralByte_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckStunReactionToState, CallFunc_CheckToState_CanStart) == 0x000023, "Member 'BP_CharacterLocomotionComponent_C_CheckStunReactionToState::CallFunc_CheckToState_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckSuperHighSpeedMove
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartSubState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLocomotionSub_IsStartLocomotionSub;  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove, IsStartSubState) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove::IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove, CallFunc_CheckLocomotionSub_IsStartLocomotionSub) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove::CallFunc_CheckLocomotionSub_IsStartLocomotionSub' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckSuperHighSpeedMoveStr
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartSubState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLocomotionSub_IsStartLocomotionSub;  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr, IsStartSubState) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr::IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr, CallFunc_CheckLocomotionSub_IsStartLocomotionSub) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr::CallFunc_CheckLocomotionSub_IsStartLocomotionSub' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearCharacterRotationPitch
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch final
{
public:
	bool                                          InTeleportPhysics;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch, InTeleportPhysics) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch, IsSuccessfully) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearLocomotionSubStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus final
{
public:
	EKoratLocomotionState                         InLocomotionStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus, InLocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus::InLocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus, CallFunc_GetLocomotionSub_SubInstance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearSubStatus
// 0x002C (0x002C - 0x0000)
struct BP_CharacterLocomotionComponent_C_ClearSubStatus final
{
public:
	EKoratLocomotionState                         ClearTargetStatus;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ClearSubStatus) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_ClearSubStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ClearSubStatus) == 0x00002C, "Wrong size on BP_CharacterLocomotionComponent_C_ClearSubStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, ClearTargetStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::ClearTargetStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, Temp_int_Variable) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, Temp_int_Variable_1) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_GetValidValue_ReturnValue) == 0x000014, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000015, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000016, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_MakeLiteralByte_ReturnValue) == 0x00001D, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001E, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x00001F, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_MakeLiteralInt_ReturnValue) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ClearSubStatus, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_ClearSubStatus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugCalcHitInfo
// 0x0040 (0x0040 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DebugCalcHitInfo final
{
public:
	double                                        HitDotVar;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RadiansToDegrees_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Acos_ReturnValue;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DebugCalcHitInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo) == 0x000040, "Wrong size on BP_CharacterLocomotionComponent_C_DebugCalcHitInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo, HitDotVar) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DebugCalcHitInfo::HitDotVar' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo, HitNormal) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_DebugCalcHitInfo::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_DebugCalcHitInfo::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo, CallFunc_RadiansToDegrees_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_DebugCalcHitInfo::CallFunc_RadiansToDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_DebugCalcHitInfo::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugCalcHitInfo, CallFunc_Acos_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_DebugCalcHitInfo::CallFunc_Acos_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugDrawText
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DebugDrawText final
{
public:
	struct FVector                                TextLocation;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Text;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 TestBaseActor;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Scale;                                             // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DebugDrawText) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DebugDrawText");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DebugDrawText) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_DebugDrawText");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugDrawText, TextLocation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DebugDrawText::TextLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugDrawText, Text) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_DebugDrawText::Text' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugDrawText, TestBaseActor) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_DebugDrawText::TestBaseActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugDrawText, TextColor) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_DebugDrawText::TextColor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugDrawText, Scale) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_DebugDrawText::Scale' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugDrawText, Duration) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_DebugDrawText::Duration' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugInput
// 0x00B0 (0x00B0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DebugInput final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetBuildConfiguration_ReturnValue;        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ISSBattleController>   K2Node_DynamicCast_AsSSBattle_Controller;          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ISSBattleController>   K2Node_DynamicCast_AsSSBattle_Controller_1;        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasInputLocomotionBlowDebug_ReturnValue;  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasInputLocomotionTiltDebug_ReturnValue;  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_1;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_DebugBlowActor_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_DebugBlowActor_C*                   CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_2;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEnableTilt_OutIsEnable;                // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEnableTilt_OutIsEnable_1;              // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DebugInput) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DebugInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DebugInput) == 0x0000B0, "Wrong size on BP_CharacterLocomotionComponent_C_DebugInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_GetBuildConfiguration_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_GetBuildConfiguration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_GetController_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_AsSSBattle_Controller) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_AsSSBattle_Controller' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_AsSSBattle_Controller_1) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_AsSSBattle_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_AsBP_Character) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_HasInputLocomotionBlowDebug_ReturnValue) == 0x000069, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_HasInputLocomotionBlowDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_HasInputLocomotionTiltDebug_ReturnValue) == 0x00006A, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_HasInputLocomotionTiltDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_AsBP_Character_1) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_AsBP_Character_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_FinishSpawningActor_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_AsBP_Character_2) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_AsBP_Character_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, K2Node_DynamicCast_bSuccess_4) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_SetEnableTilt_OutIsEnable) == 0x0000AA, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_SetEnableTilt_OutIsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugInput, CallFunc_SetEnableTilt_OutIsEnable_1) == 0x0000AB, "Member 'BP_CharacterLocomotionComponent_C_DebugInput::CallFunc_SetEnableTilt_OutIsEnable_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugPrint
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DebugPrint final
{
public:
	struct FLinearColor                           TextColor;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DebugPrint) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_DebugPrint");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DebugPrint) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_DebugPrint");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugPrint, TextColor) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DebugPrint::TextColor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugPrint, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_DebugPrint::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugPrintString
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DebugPrintString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          InPrintToScreen;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DebugPrintString) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DebugPrintString");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DebugPrintString) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_DebugPrintString");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugPrintString, InString) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DebugPrintString::InString' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DebugPrintString, InPrintToScreen) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_DebugPrintString::InPrintToScreen' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DragonDashMoveInputX
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DragonDashMoveInputX final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DragonDashMoveInputX");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_DragonDashMoveInputX");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputX::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputX::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputX::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX, CallFunc_BreakVector_Z) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputX::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputX, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputX::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DragonDashMoveInputY
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DragonDashMoveInputY final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DragonDashMoveInputY");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_DragonDashMoveInputY");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputY::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputY::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputY::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY, CallFunc_BreakVector_Z) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputY::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputY, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputY::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DragonDashMoveInputZ
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ, CallFunc_BreakVector_Z) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ExecuteUbergraph_BP_CharacterLocomotionComponent
// 0x11E0 (0x11E0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableMovementInput_IsEnable;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementParameterJumpToFlySeconds_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStep_C*       CallFunc_GetSubStep_SubStep;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNormalSpeed_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDragonDashElapsedTime_ReturnValue;     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDragonDashInterval_ReturnValue;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x00B0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_GetMovementParameterAirControlBoostVelocityThreshold_ReturnValue; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Value;                                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         K2Node_Event_DragonDashState;                      // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    K2Node_Event_AnimStateMachineEvent_2;              // 0x01B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetTargetPawn_ReturnValue;                // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Event_MovingRotation;                       // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Event_InputVector;                          // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterAirControlBoostMultiplier_ReturnValue; // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnable;                             // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ChangeJumpToFly;                      // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             K2Node_Event_ActionFinishReason;                   // 0x0246(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0247(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratCharacterDataZBurstDashParameter CallFunc_GetZBurstDashParameter_OutZBurstDashParameter; // 0x0248(0x0068)(NoDestructor)
	struct FKoratCharacterDataDashUpDownParameter CallFunc_GetDashUpDownParameter_OutDashUpDownParameter; // 0x02B0(0x00E8)(NoDestructor)
	struct FKoratCharacterDataMovementParameter   CallFunc_GetMovementParameter_OutMovementParameter; // 0x0398(0x0240)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_Front;                  // 0x05D8(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_FlyBackIN;              // 0x05F4(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_FlyBackOT;              // 0x0610(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_FlyLeftRightIN;         // 0x062C(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_FlyLeftRightOT;         // 0x0648(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_GroundBackIN;           // 0x0664(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_GroundBackOT;           // 0x0680(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_GroundLeftRightIN;      // 0x069C(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_GroundLeftRightOT;      // 0x06B8(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_LongFrontIN;            // 0x06D4(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_LongFrontOT;            // 0x06F0(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_LongBackIN;             // 0x070C(0x001C)(NoDestructor)
	struct FKoratCharacterDataStepParameter       CallFunc_GetStepsParameter_LongBackOT;             // 0x0728(0x001C)(NoDestructor)
	uint8                                         Pad_744[0x4];                                      // 0x0744(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataShortDashParameter  CallFunc_GetStepsParameter_ShortDash;              // 0x0748(0x0030)(NoDestructor)
	struct FKoratCharacterDataDragonHomingParameter CallFunc_GetDragonHomingParameter_OutDragonHomingParameter; // 0x0778(0x0070)(NoDestructor)
	struct FKoratCharacterDataDragonDashParameter CallFunc_GetDragonDashParameter_OutDragonDashParameter; // 0x07E8(0x0160)(NoDestructor)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction_1;  // 0x0948(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_949[0x7];                                      // 0x0949(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0950(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_959[0x3];                                      // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementParameterAirControl_ReturnValue; // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   K2Node_Event_InAction;                             // 0x0960(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InFrontHit;                           // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               K2Node_Event_BlowState;                            // 0x0969(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    K2Node_Event_AnimStateMachineEvent_1;              // 0x096A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBlow_ChangeBlow;                     // 0x096B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96C[0x4];                                      // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit_1;                                // 0x0970(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump;                       // 0x0A58(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0A60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0A61(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A62[0x2];                                      // 0x0A62(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0A64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0A68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6C[0x4];                                      // 0x0A6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0A70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0A88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0AA0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0AB8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0AD0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0AD8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0AE0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0AE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0AF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0AF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0AFC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0B00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B04[0x4];                                      // 0x0B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0B08(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0B20(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0B38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B39[0x7];                                      // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0B40(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0B48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_HeightAxisValue;                      // 0x0B50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterJumpZVelocity_ReturnValue; // 0x0B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0B5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5D[0x3];                                      // 0x0B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementParameterBrakingDecelerationFlying_ReturnValue; // 0x0B60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterMaxAcceleration_ReturnValue; // 0x0B64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_WorldDirection;                       // 0x0B68(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Value_1;                              // 0x0B80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_WorldDirection_1;                     // 0x0B88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Value_2;                              // 0x0BA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMovementParameterIsAutoJumpToFly_ReturnValue; // 0x0BA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA9[0x7];                                      // 0x0BA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetMovementParameterRotationRate_ReturnValue; // 0x0BB0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0BC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0BCC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0BD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       K2Node_Event_DragonHomingState;                    // 0x0BD4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    K2Node_Event_AnimStateMachineEvent;                // 0x0BD5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD6[0x2];                                      // 0x0BD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0BD8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0BF0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0BF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementParameterGravityScale_ReturnValue; // 0x0BFC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNearWalkSpeed_ReturnValue; // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0x4];                                      // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastUltimateDash_SubBlastDash;     // 0x0C08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0C10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C11[0x3];                                      // 0x0C11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_InCurrentStateName;                   // 0x0C14(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1C[0x4];                                      // 0x0C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_InFraction;                           // 0x0C20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNearSpeed_ReturnValue; // 0x0C28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableMovementInput_IsEnable_1;         // 0x0C2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2D[0x3];                                      // 0x0C2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump_1;                     // 0x0C30(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0C38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C39[0x3];                                      // 0x0C39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementParameterNormalWalkSpeed_ReturnValue; // 0x0C3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNearDistance_ReturnValue; // 0x0C40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C44[0x4];                                      // 0x0C44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0C48(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCanFly_ReturnValue;                     // 0x0C50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0C51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRevengeDash_ChangeRevengeDash;       // 0x0C52(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bLockon;                              // 0x0C53(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMovementParameterJumpMaxCount_ReturnValue; // 0x0C54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_Value_3;                              // 0x0C58(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculationInputVectorNormal_ReturnValue; // 0x0C68(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBattleKey                               K2Node_Event_BattleKey_4;                          // 0x0C78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C79[0x7];                                      // 0x0C79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0C80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0C88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBattleKey                               K2Node_Event_BattleKey_3;                          // 0x0C90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBattleKey                               K2Node_Event_BattleKey_2;                          // 0x0C91(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    K2Node_Event_BattleKey_1;                          // 0x0C92(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    K2Node_Event_BattleKey;                            // 0x0C93(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0C94(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0C95(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0C96(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C97[0x1];                                      // 0x0C97(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump_2;                     // 0x0C98(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0CA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableMovementInput_IsEnable_2;         // 0x0CA1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0CA2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA3[0x1];                                      // 0x0CA3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0CA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_InWarpOffsetPos;                      // 0x0CA8(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_InWarpOffsetRot;                      // 0x0CC0(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Event_InWarpOffsetRotCenterPos;             // 0x0CD8(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class USSCharacterNumeric*              K2Node_Event_InParam;                              // 0x0CF0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0CF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF9[0x3];                                      // 0x0CF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementParameterJumpMaxHoldTime_ReturnValue; // 0x0CFC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBlastUltimateDash_ChangeBlastDash;   // 0x0D00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D01[0x7];                                      // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubIdleMove_C*   CallFunc_GetSubIdleMove_SubIdleMove;               // 0x0D08(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0D10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0D11(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D12[0x6];                                      // 0x0D12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump_3;                     // 0x0D18(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0D20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D21[0x7];                                      // 0x0D21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow_1;                     // 0x0D28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0D30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InBlowIsFront;                        // 0x0D31(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0D32(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue_1; // 0x0D33(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue_2; // 0x0D34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InFront;                              // 0x0D35(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D36[0x2];                                      // 0x0D36(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InDownToRevivalTime;                  // 0x0D38(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeDown_IsChangeOtherDown;             // 0x0D3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3D[0x3];                                      // 0x0D3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow_2;                     // 0x0D40(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterSpeedInterpolateRange_ReturnValue; // 0x0D48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0D4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_GetMovementParameterStartMovementMode_ReturnValue; // 0x0D4D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4E[0x2];                                      // 0x0D4E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSBattleLevelScriptActor*              CallFunc_GetSSBattleLevelScriptActor_ReturnValue;  // 0x0D50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0D58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D59[0x7];                                      // 0x0D59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetProcessingOrderPartitionActorOfPostPhysics_ReturnValue; // 0x0D60(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubStep_C*       CallFunc_GetSubStep_SubStep_1;                     // 0x0D68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0D70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0D71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction_2;  // 0x0D72(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D73[0x1];                                      // 0x0D73(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0D74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratHitBackMovementData              K2Node_Event_InHitBackData;                        // 0x0D78(0x02E0)()
	struct FVector2D                              K2Node_Event_InputVector_1;                        // 0x1058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_InLocation;                           // 0x1068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InDrawType;                           // 0x1080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1084[0x4];                                     // 0x1084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_InHitTime;                            // 0x1088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_InDrawDuration;                       // 0x1090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_InMovementMode;                       // 0x1098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1099[0x7];                                     // 0x1099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_MontageLength;                        // 0x10A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InActor;                              // 0x10A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_InLocation_1;                         // 0x10B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InUseBattleTargetPawn;                // 0x10C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBattleKey                               K2Node_Event_BattleKey_5;                          // 0x10C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable;                               // 0x10CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10CB[0x5];                                     // 0x10CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_WorldDirection_2;                     // 0x10D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Value_4;                              // 0x10E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x10F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x10F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x10F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10F3[0x5];                                     // 0x10F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_JumpToFlySeconds_ImplicitCast;  // 0x10F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NormalModeSpeed_ImplicitCast;   // 0x1100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x1108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x1110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_AirControlBoostVelocityThreshold_ImplicitCast; // 0x1118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_AirControlBoostMultiplier_ImplicitCast; // 0x1120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_WalkableFloorAngle_ImplicitCast; // 0x1128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_GroundFriction_ImplicitCast;    // 0x1130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x1138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_LockOnTurnSpeed_ImplicitCast;   // 0x1140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MoveEffectStartSpeed_ImplicitCast; // 0x1148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MoveEffectEndSpeed_ImplicitCast; // 0x1150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StepNearInputAngleFront_ImplicitCast; // 0x1158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StepNearInputAngleLeftRight_ImplicitCast; // 0x1160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StepFarInputAngleFront_ImplicitCast; // 0x1168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_AirControl_ImplicitCast;        // 0x1170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_JumpZVelocity_ImplicitCast;     // 0x1178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast; // 0x1180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x1188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_GravityScale_ImplicitCast;      // 0x1190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NearWalkModeSpeed_ImplicitCast; // 0x1198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NearModeSpeed_ImplicitCast;     // 0x11A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NormalWalkModeSpeed_ImplicitCast; // 0x11A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NearDistance_ImplicitCast;      // 0x11B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_JumpMaxHoldTime_ImplicitCast;   // 0x11B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ChangeDown_InDownToRevivalTime_ImplicitCast; // 0x11C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_SpeedInterpolateRange_ImplicitCast; // 0x11C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_OnHitDeltaTime_ImplicitCast;    // 0x11D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_TickDeltaSeconds_ImplicitCast;  // 0x11D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent) == 0x0011E0, "Wrong size on BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, EntryPoint) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsEnableMovementInput_IsEnable) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsEnableMovementInput_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterJumpToFlySeconds_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterJumpToFlySeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubStep_SubStep) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubStep_SubStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterNormalSpeed_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterNormalSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetDragonDashElapsedTime_ReturnValue) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetDragonDashElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetDragonDashInterval_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetDragonDashInterval_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000044, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_MyComp) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Other) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_OtherComp) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_bSelfMoved) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_HitLocation) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_HitNormal) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_NormalImpulse) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Hit) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterAirControlBoostVelocityThreshold_ReturnValue) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterAirControlBoostVelocityThreshold_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Value) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetOwner_ReturnValue_1) == 0x0001A8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_1) == 0x0001B0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001B1, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_DragonDashState) == 0x0001B2, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_DragonDashState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_AnimStateMachineEvent_2) == 0x0001B3, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_AnimStateMachineEvent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0001B8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x0001C8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Concat_StrStr_ReturnValue) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetTargetPawn_ReturnValue) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetTargetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_2) == 0x000210, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_MovingRotation) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_MovingRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InputVector) == 0x000230, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterAirControlBoostMultiplier_ReturnValue) == 0x000240, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterAirControlBoostMultiplier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_IsEnable) == 0x000244, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_ChangeJumpToFly) == 0x000245, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_ChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_ActionFinishReason) == 0x000246, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_ActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000247, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetZBurstDashParameter_OutZBurstDashParameter) == 0x000248, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetZBurstDashParameter_OutZBurstDashParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetDashUpDownParameter_OutDashUpDownParameter) == 0x0002B0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetDashUpDownParameter_OutDashUpDownParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameter_OutMovementParameter) == 0x000398, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameter_OutMovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_Front) == 0x0005D8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_Front' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_FlyBackIN) == 0x0005F4, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_FlyBackIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_FlyBackOT) == 0x000610, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_FlyBackOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_FlyLeftRightIN) == 0x00062C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_FlyLeftRightIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_FlyLeftRightOT) == 0x000648, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_FlyLeftRightOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_GroundBackIN) == 0x000664, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_GroundBackIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_GroundBackOT) == 0x000680, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_GroundBackOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_GroundLeftRightIN) == 0x00069C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_GroundLeftRightIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_GroundLeftRightOT) == 0x0006B8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_GroundLeftRightOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_LongFrontIN) == 0x0006D4, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_LongFrontIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_LongFrontOT) == 0x0006F0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_LongFrontOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_LongBackIN) == 0x00070C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_LongBackIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_LongBackOT) == 0x000728, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_LongBackOT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetStepsParameter_ShortDash) == 0x000748, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetStepsParameter_ShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetDragonHomingParameter_OutDragonHomingParameter) == 0x000778, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetDragonHomingParameter_OutDragonHomingParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetDragonDashParameter_OutDragonDashParameter) == 0x0007E8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetDragonDashParameter_OutDragonDashParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_UpdateRunningAction_OutIsChangeAction_1) == 0x000948, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_UpdateRunningAction_OutIsChangeAction_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetOwner_ReturnValue_2) == 0x000950, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_3) == 0x000958, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterAirControl_ReturnValue) == 0x00095C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterAirControl_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InAction) == 0x000960, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InFrontHit) == 0x000968, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InFrontHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BlowState) == 0x000969, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BlowState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_AnimStateMachineEvent_1) == 0x00096A, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_AnimStateMachineEvent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_CheckBlow_ChangeBlow) == 0x00096B, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_CheckBlow_ChangeBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Hit_1) == 0x000970, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Hit_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubJump_SubJump) == 0x000A58, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubJump_SubJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_bBlockingHit) == 0x000A60, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_bInitialOverlap) == 0x000A61, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_Time) == 0x000A64, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_Distance) == 0x000A68, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_Location) == 0x000A70, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_ImpactPoint) == 0x000A88, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_Normal) == 0x000AA0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_ImpactNormal) == 0x000AB8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_PhysMat) == 0x000AD0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_HitActor) == 0x000AD8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_HitComponent) == 0x000AE0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_HitBoneName) == 0x000AE8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_BoneName) == 0x000AF0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_HitItem) == 0x000AF8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_ElementIndex) == 0x000AFC, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_FaceIndex) == 0x000B00, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_TraceStart) == 0x000B08, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakHitResult_TraceEnd) == 0x000B20, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_4) == 0x000B38, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_DynamicCast_AsSSCharacter) == 0x000B40, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_DynamicCast_bSuccess_1) == 0x000B48, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_HeightAxisValue) == 0x000B50, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_HeightAxisValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterJumpZVelocity_ReturnValue) == 0x000B58, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterJumpZVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000B5C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterBrakingDecelerationFlying_ReturnValue) == 0x000B60, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterBrakingDecelerationFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterMaxAcceleration_ReturnValue) == 0x000B64, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_WorldDirection) == 0x000B68, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Value_1) == 0x000B80, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Value_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_WorldDirection_1) == 0x000B88, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_WorldDirection_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Value_2) == 0x000BA0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Value_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterIsAutoJumpToFly_ReturnValue) == 0x000BA8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterIsAutoJumpToFly_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterRotationRate_ReturnValue) == 0x000BB0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterRotationRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakRotator_Roll) == 0x000BC8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakRotator_Pitch) == 0x000BCC, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakRotator_Yaw) == 0x000BD0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_DragonHomingState) == 0x000BD4, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_DragonHomingState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_AnimStateMachineEvent) == 0x000BD5, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_AnimStateMachineEvent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_MakeRotator_ReturnValue) == 0x000BD8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000BF0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_5) == 0x000BF8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterGravityScale_ReturnValue) == 0x000BFC, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterGravityScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterNearWalkSpeed_ReturnValue) == 0x000C00, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterNearWalkSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubBlastUltimateDash_SubBlastDash) == 0x000C08, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubBlastUltimateDash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_6) == 0x000C10, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InCurrentStateName) == 0x000C14, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InCurrentStateName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InFraction) == 0x000C20, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InFraction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterNearSpeed_ReturnValue) == 0x000C28, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterNearSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsEnableMovementInput_IsEnable_1) == 0x000C2C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsEnableMovementInput_IsEnable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubJump_SubJump_1) == 0x000C30, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubJump_SubJump_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_7) == 0x000C38, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterNormalWalkSpeed_ReturnValue) == 0x000C3C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterNormalWalkSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterNearDistance_ReturnValue) == 0x000C40, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterNearDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubBlow_SubBlow) == 0x000C48, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsCanFly_ReturnValue) == 0x000C50, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsCanFly_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_8) == 0x000C51, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_CheckRevengeDash_ChangeRevengeDash) == 0x000C52, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_CheckRevengeDash_ChangeRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_bLockon) == 0x000C53, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_bLockon' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterJumpMaxCount_ReturnValue) == 0x000C54, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterJumpMaxCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Value_3) == 0x000C58, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Value_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_CalculationInputVectorNormal_ReturnValue) == 0x000C68, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_CalculationInputVectorNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BattleKey_4) == 0x000C78, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BattleKey_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakVector2D_X) == 0x000C80, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_BreakVector2D_Y) == 0x000C88, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BattleKey_3) == 0x000C90, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BattleKey_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BattleKey_2) == 0x000C91, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BattleKey_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BattleKey_1) == 0x000C92, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BattleKey_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BattleKey) == 0x000C93, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BattleKey' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000C94, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000C95, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000C96, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubJump_SubJump_2) == 0x000C98, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubJump_SubJump_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_9) == 0x000CA0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsEnableMovementInput_IsEnable_2) == 0x000CA1, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsEnableMovementInput_IsEnable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Array_RemoveItem_ReturnValue) == 0x000CA2, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Array_Add_ReturnValue) == 0x000CA4, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InWarpOffsetPos) == 0x000CA8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InWarpOffsetPos' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InWarpOffsetRot) == 0x000CC0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InWarpOffsetRot' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InWarpOffsetRotCenterPos) == 0x000CD8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InWarpOffsetRotCenterPos' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InParam) == 0x000CF0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000CF8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterJumpMaxHoldTime_ReturnValue) == 0x000CFC, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterJumpMaxHoldTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_CheckBlastUltimateDash_ChangeBlastDash) == 0x000D00, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_CheckBlastUltimateDash_ChangeBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubIdleMove_SubIdleMove) == 0x000D08, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubIdleMove_SubIdleMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_10) == 0x000D10, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000D11, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubJump_SubJump_3) == 0x000D18, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubJump_SubJump_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_11) == 0x000D20, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubBlow_SubBlow_1) == 0x000D28, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubBlow_SubBlow_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_12) == 0x000D30, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InBlowIsFront) == 0x000D31, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InBlowIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000D32, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetConsoleVariableBoolValue_ReturnValue_1) == 0x000D33, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetConsoleVariableBoolValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetConsoleVariableBoolValue_ReturnValue_2) == 0x000D34, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetConsoleVariableBoolValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InFront) == 0x000D35, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InDownToRevivalTime) == 0x000D38, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InDownToRevivalTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_ChangeDown_IsChangeOtherDown) == 0x000D3C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_ChangeDown_IsChangeOtherDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubBlow_SubBlow_2) == 0x000D40, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubBlow_SubBlow_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterSpeedInterpolateRange_ReturnValue) == 0x000D48, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterSpeedInterpolateRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_13) == 0x000D4C, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetMovementParameterStartMovementMode_ReturnValue) == 0x000D4D, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetMovementParameterStartMovementMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSSBattleLevelScriptActor_ReturnValue) == 0x000D50, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSSBattleLevelScriptActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_14) == 0x000D58, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetProcessingOrderPartitionActorOfPostPhysics_ReturnValue) == 0x000D60, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetProcessingOrderPartitionActorOfPostPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_GetSubStep_SubStep_1) == 0x000D68, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_GetSubStep_SubStep_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_15) == 0x000D70, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_16) == 0x000D71, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_UpdateRunningAction_OutIsChangeAction_2) == 0x000D72, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_UpdateRunningAction_OutIsChangeAction_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_DeltaSeconds) == 0x000D74, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InHitBackData) == 0x000D78, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InHitBackData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InputVector_1) == 0x001058, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InputVector_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InLocation) == 0x001068, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InDrawType) == 0x001080, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InDrawType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InHitTime) == 0x001088, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InHitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InDrawDuration) == 0x001090, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InDrawDuration' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InMovementMode) == 0x001098, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InMovementMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_MontageLength) == 0x0010A0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_MontageLength' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InActor) == 0x0010A8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InLocation_1) == 0x0010B0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InLocation_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_InUseBattleTargetPawn) == 0x0010C8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_InUseBattleTargetPawn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_BattleKey_5) == 0x0010C9, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_BattleKey_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Enable) == 0x0010CA, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_WorldDirection_2) == 0x0010D0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_WorldDirection_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_Event_Value_4) == 0x0010E8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_Event_Value_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_IsValid_ReturnValue_17) == 0x0010F0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0010F1, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0010F2, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_JumpToFlySeconds_ImplicitCast) == 0x0010F8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_JumpToFlySeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_NormalModeSpeed_ImplicitCast) == 0x001100, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_NormalModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x001108, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x001110, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_AirControlBoostVelocityThreshold_ImplicitCast) == 0x001118, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_AirControlBoostVelocityThreshold_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_AirControlBoostMultiplier_ImplicitCast) == 0x001120, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_AirControlBoostMultiplier_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_WalkableFloorAngle_ImplicitCast) == 0x001128, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_WalkableFloorAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_GroundFriction_ImplicitCast) == 0x001130, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_GroundFriction_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x001138, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_LockOnTurnSpeed_ImplicitCast) == 0x001140, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_LockOnTurnSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_MoveEffectStartSpeed_ImplicitCast) == 0x001148, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_MoveEffectStartSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_MoveEffectEndSpeed_ImplicitCast) == 0x001150, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_MoveEffectEndSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_StepNearInputAngleFront_ImplicitCast) == 0x001158, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_StepNearInputAngleFront_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_StepNearInputAngleLeftRight_ImplicitCast) == 0x001160, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_StepNearInputAngleLeftRight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_StepFarInputAngleFront_ImplicitCast) == 0x001168, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_StepFarInputAngleFront_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_AirControl_ImplicitCast) == 0x001170, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_AirControl_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_JumpZVelocity_ImplicitCast) == 0x001178, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_JumpZVelocity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast) == 0x001180, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x001188, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_GravityScale_ImplicitCast) == 0x001190, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_GravityScale_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_NearWalkModeSpeed_ImplicitCast) == 0x001198, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_NearWalkModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_NearModeSpeed_ImplicitCast) == 0x0011A0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_NearModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_NormalWalkModeSpeed_ImplicitCast) == 0x0011A8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_NormalWalkModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_NearDistance_ImplicitCast) == 0x0011B0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_NearDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_JumpMaxHoldTime_ImplicitCast) == 0x0011B8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_JumpMaxHoldTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, CallFunc_ChangeDown_InDownToRevivalTime_ImplicitCast) == 0x0011C0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::CallFunc_ChangeDown_InDownToRevivalTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_SpeedInterpolateRange_ImplicitCast) == 0x0011C8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_SpeedInterpolateRange_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_OnHitDeltaTime_ImplicitCast) == 0x0011D0, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_OnHitDeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent, K2Node_VariableSet_TickDeltaSeconds_ImplicitCast) == 0x0011D8, "Member 'BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent::K2Node_VariableSet_TickDeltaSeconds_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.FinishRevengeDash
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_FinishRevengeDash final
{
public:
	class UBP_CharacterLocomotionSubRevengeDash_C* CallFunc_GetSubRevengeDash_SubRevengeDash;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_FinishRevengeDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_FinishRevengeDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_FinishRevengeDash) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_FinishRevengeDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_FinishRevengeDash, CallFunc_GetSubRevengeDash_SubRevengeDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_FinishRevengeDash::CallFunc_GetSubRevengeDash_SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_FinishRevengeDash, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_FinishRevengeDash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Get Dash Input Vector
// 0x00B8 (0x00B8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector final
{
public:
	struct FVector                                InInputVector;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutInputVector;                                    // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutIsInputNeutral;                                 // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputXYZ;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInputNeutral;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector) == 0x0000B8, "Wrong size on BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, InInputVector) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::InInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, OutInputVector) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, OutIsInputNeutral) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::OutIsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, InputXYZ) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::InputXYZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, IsInputNeutral) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::IsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_BreakVector_X) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_BreakVector_Y) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_BreakVector_Z) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_BreakVector_X_1) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_BreakVector_Y_1) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_BreakVector_Z_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_MakeVector2D_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetAddMovementInputVector
// 0x00D0 (0x00D0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetAddMovementInputVector final
{
public:
	struct FVector                                InInputWorldDirectionXY;                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InInputValueXY;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputWorldDirection;                               // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScaleValue;                                        // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGroundRunningScale_ReturnValue;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetMoveLookAtRotation_OutLookAtRotation;  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetOnlyYawRotation_ReturnValue;           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetAddMovementInputVector");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector) == 0x0000D0, "Wrong size on BP_CharacterLocomotionComponent_C_GetAddMovementInputVector");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, InInputWorldDirectionXY) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::InInputWorldDirectionXY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, InInputValueXY) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::InInputValueXY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, InputWorldDirection) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::InputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, ScaleValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, Temp_bool_Variable) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_GetGroundRunningScale_ReturnValue) == 0x000044, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_GetGroundRunningScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_GetMoveLookAtRotation_OutLookAtRotation) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_GetMoveLookAtRotation_OutLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_GetOnlyYawRotation_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_GetOnlyYawRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_BreakVector2D_X) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_BreakVector2D_Y) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, K2Node_Select_Default) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetAddMovementInputVector, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_GetAddMovementInputVector::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlastSkill1DashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus final
{
public:
	EKoratDragonHomingState                       BlastDashStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill1Dash_SubBlastDash;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus, BlastDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus::BlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus, CallFunc_GetSubBlastSkill1Dash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus::CallFunc_GetSubBlastSkill1Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlastSkill2DashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus final
{
public:
	EKoratDragonHomingState                       BlastDashStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill2Dash_SubBlastDash;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus, BlastDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus::BlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus, CallFunc_GetSubBlastSkill2Dash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus::CallFunc_GetSubBlastSkill2Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlastUltimateDashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus final
{
public:
	EKoratDragonHomingState                       BlastDashStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastUltimateDash_SubBlastDash;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus, BlastDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus::BlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus, CallFunc_GetSubBlastUltimateDash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus::CallFunc_GetSubBlastUltimateDash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowHitForecast
// 0x0198 (0x0198 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlowHitForecast final
{
public:
	bool                                          IsHit;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitTime;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             MapAttribute;                                      // 0x0028(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowHitForecastSaveInfo_IsHit;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_Location;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowHitForecastSaveInfo_HitTime;       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             CallFunc_GetBlowHitForecastSaveInfo_MapAttribute;  // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_HitNormal;     // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat;    // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlowHitForecastSaveInfo_HitActor;      // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetBlowHitForecastSaveInfo_HitComponent;  // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetBlowHitForecastSaveInfo_HitBoneName;   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetBlowHitForecastSaveInfo_HitResult;     // 0x00B0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlowHitForecast");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast) == 0x000198, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlowHitForecast");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, IsHit) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::IsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, Location) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, HitTime) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::HitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, MapAttribute) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::MapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, HitNormal) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_IsHit) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_IsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_Location) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitTime) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_MapAttribute) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_MapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitNormal) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitActor) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitComponent) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitBoneName) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecast, CallFunc_GetBlowHitForecastSaveInfo_HitResult) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecast::CallFunc_GetBlowHitForecastSaveInfo_HitResult' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowHitForecastSaveInfo
// 0x02A8 (0x02A8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo final
{
public:
	bool                                          IsHit;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitTime;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             MapAttribute;                                      // 0x0028(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      HitPhysMat;                                        // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitBoneName;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0068(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetForecastBlowHitSaveInfo_OutIsHit;      // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForecastBlowHitSaveInfo_OutLocation;   // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetForecastBlowHitSaveInfo_OutHitTime;    // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             CallFunc_GetForecastBlowHitSaveInfo_OutMapAttribute; // 0x0180(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForecastBlowHitSaveInfo_OutHitNormal;  // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_GetForecastBlowHitSaveInfo_OutHitPhysMat; // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetForecastBlowHitSaveInfo_OutHitActor;   // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetForecastBlowHitSaveInfo_OutHitComponent; // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetForecastBlowHitSaveInfo_OutHitBoneName; // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetForecastBlowHitSaveInfo_OutHitResult;  // 0x01C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo) == 0x0002A8, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, IsHit) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::IsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, Location) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitTime) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, MapAttribute) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::MapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitNormal) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitPhysMat) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitPhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitActor) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitComponent) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitBoneName) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, HitResult) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::HitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetSubBlow_SubBlow) == 0x000150, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_IsValid_ReturnValue) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutIsHit) == 0x000159, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutIsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutLocation) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitTime) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutMapAttribute) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutMapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitNormal) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitPhysMat) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitPhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitActor) == 0x0001A8, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitComponent) == 0x0001B0, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitBoneName) == 0x0001B8, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo, CallFunc_GetForecastBlowHitSaveInfo_OutHitResult) == 0x0001C0, "Member 'BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo::CallFunc_GetForecastBlowHitSaveInfo_OutHitResult' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowInfo
// 0x0320 (0x0320 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlowInfo final
{
public:
	EKoratBlowState                               BlowStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                BlowType;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlowIsFront;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              HitBackData;                                       // 0x0008(0x02E0)(Parm, OutParm)
	double                                        BlowHitSpeedNormal;                                // 0x02E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowHitSpeedParallel;                              // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundSSpeedMax;                                // 0x02F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundMSpeedMax;                                // 0x0300(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlowReactionLevel;                                 // 0x0308(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlowInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlowInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlowInfo) == 0x000320, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlowInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowType) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowIsFront) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, HitBackData) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::HitBackData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowHitSpeedNormal) == 0x0002E8, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowHitSpeedParallel) == 0x0002F0, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowBoundSSpeedMax) == 0x0002F8, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowBoundMSpeedMax) == 0x000300, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, BlowReactionLevel) == 0x000308, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, CallFunc_GetSubBlow_SubBlow) == 0x000310, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowInfo, CallFunc_IsValid_ReturnValue) == 0x000318, "Member 'BP_CharacterLocomotionComponent_C_GetBlowInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBlowStatus final
{
public:
	EKoratBlowState                               BlowStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBlowStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBlowStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBlowStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetBlowStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowStatus, BlowStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBlowStatus::BlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowStatus, CallFunc_GetSubBlow_SubBlow) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBlowStatus::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBlowStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetBlowStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBPCharacterLocomotionComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent final
{
public:
	class UBP_CharacterLocomotionComponent_C*     LocomotionComponent;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent, LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent::LocomotionComponent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBPCharacterMontageComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent final
{
public:
	class UBP_CharacterMontageComponent_C*        Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent, Component) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent::Component' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBurstSmashInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBurstSmashInfo final
{
public:
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBurstSmash_C* CallFunc_GetSubBurstSmash_SubBurstSmash;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBurstSmashInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBurstSmashInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBurstSmashInfo) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetBurstSmashInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBurstSmashInfo, ZBurstDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBurstSmashInfo::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBurstSmashInfo, CallFunc_GetSubBurstSmash_SubBurstSmash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBurstSmashInfo::CallFunc_GetSubBurstSmash_SubBurstSmash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBurstSmashInfo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetBurstSmashInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBurstSmashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetBurstSmashStatus final
{
public:
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBurstSmash_C* CallFunc_GetSubBurstSmash_SubBurstSmash;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetBurstSmashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetBurstSmashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetBurstSmashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetBurstSmashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBurstSmashStatus, ZBurstDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetBurstSmashStatus::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBurstSmashStatus, CallFunc_GetSubBurstSmash_SubBurstSmash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetBurstSmashStatus::CallFunc_GetSubBurstSmash_SubBurstSmash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetBurstSmashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetBurstSmashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetCameraVirtualTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation, Location) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation::Location' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUkemiInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDashUkemiInfo final
{
public:
	EKoratDashUkemiState                          DashUkemiStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUkemiType                           DashUkemiType;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDashUkemiInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDashUkemiInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDashUkemiInfo) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetDashUkemiInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiInfo, DashUkemiStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiInfo::DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiInfo, DashUkemiType) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiInfo::DashUkemiType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiInfo, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiInfo::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiInfo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUkemiStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDashUkemiStatus final
{
public:
	EKoratDashUkemiState                          DashUkemiStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDashUkemiStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDashUkemiStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDashUkemiStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetDashUkemiStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiStatus, DashUkemiStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiStatus::DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiStatus, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiStatus::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUkemiStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetDashUkemiStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUpDownInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDashUpDownInfo final
{
public:
	EKoratDashUpDownState                         DashUpDownStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          DashUpDownType;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDashUpDownInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDashUpDownInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDashUpDownInfo) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetDashUpDownInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownInfo, DashUpDownStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownInfo::DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownInfo, DashUpDownType) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownInfo::DashUpDownType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownInfo, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownInfo::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownInfo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUpDownStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDashUpDownStatus final
{
public:
	EKoratDashUpDownState                         DashUpDownStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDashUpDownStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDashUpDownStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDashUpDownStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetDashUpDownStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownStatus, DashUpDownStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownStatus::DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownStatus, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownStatus::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashUpDownStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetDashUpDownStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashVectorAndRotation
// 0x0118 (0x0118 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation final
{
public:
	struct FVector                                InInputVector;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsOnlyYawRotation;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutVector;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutRotation;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               MoveLookAtRotation;                                // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetMoveLookAtRotation_OutLookAtRotation;  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetOnlyYawRotation_ReturnValue;           // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation) == 0x000118, "Wrong size on BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, InInputVector) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::InInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, InIsOnlyYawRotation) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::InIsOnlyYawRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, OutVector) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::OutVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, OutRotation) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::OutRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, MoveLookAtRotation) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::MoveLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_Normal_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_GetMoveLookAtRotation_OutLookAtRotation) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_GetMoveLookAtRotation_OutLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_GetOnlyYawRotation_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_GetOnlyYawRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDragonDashRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDragonDashRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDragonDashRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDragonDashRotation) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetDragonDashRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashRotation, Rotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashRotation::Rotation' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashRotationPitchRange
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange final
{
public:
	double                                        PitchMin;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchMax;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_PitchMin_ImplicitCast;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_PitchMax_ImplicitCast;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange, PitchMin) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange::PitchMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange, PitchMax) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange::PitchMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange, K2Node_FunctionResult_PitchMin_ImplicitCast) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange::K2Node_FunctionResult_PitchMin_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange, K2Node_FunctionResult_PitchMax_ImplicitCast) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange::K2Node_FunctionResult_PitchMax_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashSpCostIN
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN final
{
public:
	double                                        SpCostIN;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_SpCostIN_ImplicitCast;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN, SpCostIN) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN::SpCostIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN, K2Node_FunctionResult_SpCostIN_ImplicitCast) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN::K2Node_FunctionResult_SpCostIN_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashStateMovementParameter
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter final
{
public:
	EKoratDragonDashState                         InDragonDashStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseParameter;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameter;                                 // 0x0008(0x0020)(Parm, OutParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable;                              // 0x0030(0x0020)(NoDestructor)
	EKoratDragonDashState                         Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable_1;                            // 0x0058(0x0020)(NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable_2;                            // 0x0078(0x0020)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_Select_Default;                             // 0x00A0(0x0020)(NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_Select_Default_1;                           // 0x00C0(0x0020)(NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter) == 0x0000E8, "Wrong size on BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, InDragonDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::InDragonDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, IsUseParameter) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::IsUseParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, MovementParameter) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::MovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_bool_Variable) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_struct_Variable) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_byte_Variable) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_struct_Variable_1) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_struct_Variable_2) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_bool_Variable_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, Temp_bool_Variable_2) == 0x000099, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, K2Node_Select_Default) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, K2Node_Select_Default_1) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter, K2Node_Select_Default_2) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonHomingStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetDragonHomingStatus final
{
public:
	EKoratDragonHomingState                       DragonHomingStatus;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetDragonHomingStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetDragonHomingStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetDragonHomingStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetDragonHomingStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonHomingStatus, DragonHomingStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetDragonHomingStatus::DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonHomingStatus, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetDragonHomingStatus::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetDragonHomingStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetDragonHomingStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetHighSpeedMoveForecast
// 0x0088 (0x0088 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast final
{
public:
	bool                                          IsDetermined;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RemainingTime;                                     // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubHighSpeedMove_C* CallFunc_GetSubHighSpeedMove_SubHighSpeedMove;     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHighSpeedMoveForecast_IsDetermined;    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetHighSpeedMoveForecast_Location;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetHighSpeedMoveForecast_Rotation;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetHighSpeedMoveForecast_RemainingTime;   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast) == 0x000088, "Wrong size on BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, IsDetermined) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::IsDetermined' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, Location) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, Rotation) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, RemainingTime) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::RemainingTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, CallFunc_GetSubHighSpeedMove_SubHighSpeedMove) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::CallFunc_GetSubHighSpeedMove_SubHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, CallFunc_GetHighSpeedMoveForecast_IsDetermined) == 0x000049, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::CallFunc_GetHighSpeedMoveForecast_IsDetermined' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, CallFunc_GetHighSpeedMoveForecast_Location) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::CallFunc_GetHighSpeedMoveForecast_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, CallFunc_GetHighSpeedMoveForecast_Rotation) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::CallFunc_GetHighSpeedMoveForecast_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast, CallFunc_GetHighSpeedMoveForecast_RemainingTime) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast::CallFunc_GetHighSpeedMoveForecast_RemainingTime' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetHighSpeedMoveStatus
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus final
{
public:
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubSuperHighSpeedMove_C* CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubHighSpeedMove_C* CallFunc_GetSubHighSpeedMove_SubHighSpeedMove;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, HighSpeedMoveStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, CallFunc_GetSubHighSpeedMove_SubHighSpeedMove) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::CallFunc_GetSubHighSpeedMove_SubHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetHitBackData
// 0x02E0 (0x02E0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetHitBackData final
{
public:
	struct FKoratHitBackMovementData              HitBackData;                                       // 0x0000(0x02E0)(Parm, OutParm)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetHitBackData) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetHitBackData");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetHitBackData) == 0x0002E0, "Wrong size on BP_CharacterLocomotionComponent_C_GetHitBackData");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetHitBackData, HitBackData) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetHitBackData::HitBackData' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIdleMoveActionDetail
// 0x002C (0x002C - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail final
{
public:
	struct FKoratActionDataList                   OutAction;                                         // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutSection;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         OutDetailStatus;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAir;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         ResultDetail;                                      // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ResultSection;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ResultAction;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	ECharacterStrutJumpState                      CallFunc_GetStrutJumpStatus_JumpStatus;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTransitionFlyingMode_ReturnValue;       // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail) == 0x00002C, "Wrong size on BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, OutAction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, OutSection) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::OutSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, OutDetailStatus) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::OutDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, IsAir) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::IsAir' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, ResultDetail) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::ResultDetail' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, ResultSection) == 0x000014, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::ResultSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, ResultAction) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::ResultAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, CallFunc_GetStrutJumpStatus_JumpStatus) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::CallFunc_GetStrutJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000025, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, CallFunc_IsTransitionFlyingMode_ReturnValue) == 0x000026, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::CallFunc_IsTransitionFlyingMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, CallFunc_BooleanAND_ReturnValue) == 0x000027, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsEnableMoveEffect
// 0x0007 (0x0007 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect) == 0x000007, "Wrong size on BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, CallFunc_GetJumpStatus_JumpStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, CallFunc_GetStepType_StepType) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::CallFunc_GetStepType_StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, CallFunc_GetStepStatus_StepStatus) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect, K2Node_SwitchEnum_CmpSuccess_1) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsInAir
// 0x000B (0x000B - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetIsInAir final
{
public:
	bool                                          IsInAir_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_GetMovementModeInternal_MovementMode;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetIsInAir) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetIsInAir");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetIsInAir) == 0x00000B, "Wrong size on BP_CharacterLocomotionComponent_C_GetIsInAir");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, IsInAir_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable_4) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable_5) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_bool_Variable_6) == 0x000007, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, CallFunc_GetMovementModeInternal_MovementMode) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::CallFunc_GetMovementModeInternal_MovementMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsInAir, K2Node_Select_Default) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_GetIsInAir::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsOnGround
// 0x000B (0x000B - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetIsOnGround final
{
public:
	bool                                          IsOnGround;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_GetMovementModeInternal_MovementMode;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetIsOnGround) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetIsOnGround");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetIsOnGround) == 0x00000B, "Wrong size on BP_CharacterLocomotionComponent_C_GetIsOnGround");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, IsOnGround) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::IsOnGround' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable_4) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable_5) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_bool_Variable_6) == 0x000007, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, CallFunc_GetMovementModeInternal_MovementMode) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::CallFunc_GetMovementModeInternal_MovementMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsOnGround, K2Node_Select_Default) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_GetIsOnGround::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsRotateAutoIdle
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle final
{
public:
	bool                                          OutIsRotateLanded;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle, OutIsRotateLanded) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle::OutIsRotateLanded' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsRotateLanded
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetIsRotateLanded final
{
public:
	bool                                          OutIsRotateLanded;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetIsRotateLanded) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetIsRotateLanded");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetIsRotateLanded) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_GetIsRotateLanded");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetIsRotateLanded, OutIsRotateLanded) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetIsRotateLanded::OutIsRotateLanded' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetKnockBackVector
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetKnockBackVector final
{
public:
	struct FVector                                KnockBackVector;                                   // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetKnockBackVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetKnockBackVector");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetKnockBackVector) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetKnockBackVector");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetKnockBackVector, KnockBackVector) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetKnockBackVector::KnockBackVector' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLatestActionIdleType
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLatestActionIdleType final
{
public:
	EKoratActionIdleType                          ActionIdleType_0;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CallFunc_GetCurrentAction_OutAction;               // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratActionIdleType                          CallFunc_GetActionIdleType_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLatestActionIdleType) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLatestActionIdleType");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLatestActionIdleType) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_GetLatestActionIdleType");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLatestActionIdleType, ActionIdleType_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLatestActionIdleType::ActionIdleType_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLatestActionIdleType, CallFunc_GetCurrentAction_OutAction) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetLatestActionIdleType::CallFunc_GetCurrentAction_OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLatestActionIdleType, CallFunc_GetActionIdleType_ReturnValue) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_GetLatestActionIdleType::CallFunc_GetActionIdleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLatestActionIdleType, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000D, "Member 'BP_CharacterLocomotionComponent_C_GetLatestActionIdleType::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLockOnMode
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLockOnMode final
{
public:
	bool                                          OutIsLockOn;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLockOnMode) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLockOnMode");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLockOnMode) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_GetLockOnMode");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLockOnMode, OutIsLockOn) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLockOnMode::OutIsLockOn' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionComponent) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionComponent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionComponent) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionComponent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionComponent, ActorComponent) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionComponent::ActorComponent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionNumbReaction
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction final
{
public:
	ECharacterNumbReactionState                   State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Front;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction, State) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction::State' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction, Front) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction::Front' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForAction
// 0x00A0 (0x00A0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSpeed;                                          // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed_0;                                   // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction) == 0x0000A0, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, IsNearMode) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::IsNearMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, IsInAir_0) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, MaxSpeed) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, NearModeSpeed_0) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::NearModeSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForBurstDash
// 0x00B8 (0x00B8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         SplineComponent;                                   // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SplineNowDistance;                                 // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0099(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         CallFunc_GetZBurstDashSplineInfo_SplineComponent;  // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashSplineInfo_SplineNowDistance; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         CallFunc_GetZBurstDashStatus_ZBurstDashStatus;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash) == 0x0000B8, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, IsInAir_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, LocomotionStatus) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, ZBurstDashStatus) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, SplineComponent) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::SplineComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, SplineNowDistance) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, IsRequestResetStateMachine_0) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, ResetStateMachineStatus_0) == 0x000099, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, CallFunc_GetZBurstDashSplineInfo_SplineComponent) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::CallFunc_GetZBurstDashSplineInfo_SplineComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, CallFunc_GetZBurstDashSplineInfo_SplineNowDistance) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::CallFunc_GetZBurstDashSplineInfo_SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash, CallFunc_GetZBurstDashStatus_ZBurstDashStatus) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash::CallFunc_GetZBurstDashStatus_ZBurstDashStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForBurstSmash
// 0x00B8 (0x00B8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         SplineComponent;                                   // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SplineNowDistance;                                 // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0099(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         CallFunc_GetZBurstDashSplineInfo_SplineComponent;  // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashSplineInfo_SplineNowDistance; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         CallFunc_GetZBurstDashStatus_ZBurstDashStatus;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash) == 0x0000B8, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, IsInAir_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, LocomotionStatus) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, ZBurstDashStatus) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, SplineComponent) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::SplineComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, SplineNowDistance) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, IsRequestResetStateMachine_0) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, ResetStateMachineStatus_0) == 0x000099, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, CallFunc_GetZBurstDashSplineInfo_SplineComponent) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::CallFunc_GetZBurstDashSplineInfo_SplineComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, CallFunc_GetZBurstDashSplineInfo_SplineNowDistance) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::CallFunc_GetZBurstDashSplineInfo_SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash, CallFunc_GetZBurstDashStatus_ZBurstDashStatus) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash::CallFunc_GetZBurstDashStatus_ZBurstDashStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForDashUkemi
// 0x0290 (0x0290 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity_0;                                        // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ_0;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector_0;                                     // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus_0;                                // 0x00C9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x00D0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EKoratDashUkemiState                          DashUkemiStatus;                                   // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUkemiType                           DashUkemiType;                                     // 0x00E9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForecastBlowHit;                                 // 0x00EA(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitLocation;                           // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForecastBlowHitTime;                               // 0x0108(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             ForecastBlowHitMapAttribute;                       // 0x0110(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForecastBlowHitNormal;                             // 0x0118(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0131(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowHitForecastSaveInfo_IsHit;         // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_Location;      // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowHitForecastSaveInfo_HitTime;       // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             CallFunc_GetBlowHitForecastSaveInfo_MapAttribute;  // 0x0158(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_HitNormal;     // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat;    // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlowHitForecastSaveInfo_HitActor;      // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetBlowHitForecastSaveInfo_HitComponent;  // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetBlowHitForecastSaveInfo_HitBoneName;   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetBlowHitForecastSaveInfo_HitResult;     // 0x0198(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EKoratDashUkemiState                          CallFunc_GetDashUkemiInfo_DashUkemiStatus;         // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUkemiType                           CallFunc_GetDashUkemiInfo_DashUkemiType;           // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi) == 0x000290, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, IsInAir_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, Velocity_0) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, VelocityZ_0) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::VelocityZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, MaxSpeed) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, InputVector_0) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::InputVector_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, InputZ) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::InputZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, LocomotionStatus) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, DragonDashStatus_0) == 0x0000C9, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::DragonDashStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, DragonDashRotation) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::DragonDashRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, DashUkemiStatus) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, DashUkemiType) == 0x0000E9, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::DashUkemiType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, IsForecastBlowHit) == 0x0000EA, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::IsForecastBlowHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitLocation) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitTime) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitMapAttribute) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitMapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitNormal) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, IsRequestResetStateMachine_0) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, ResetStateMachineStatus_0) == 0x000131, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_IsHit) == 0x000132, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_IsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_Location) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitTime) == 0x000150, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_MapAttribute) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_MapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitNormal) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitActor) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitComponent) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitBoneName) == 0x000190, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitResult) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetDashUkemiInfo_DashUkemiStatus) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetDashUkemiInfo_DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetDashUkemiInfo_DashUkemiType) == 0x000281, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetDashUkemiInfo_DashUkemiType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForDashUpDown
// 0x0088 (0x0088 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownState                         DashUpDownStatus;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          DashUpDownType;                                    // 0x0083(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0085(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownState                         CallFunc_GetDashUpDownInfo_DashUpDownStatus;       // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          CallFunc_GetDashUpDownInfo_DashUpDownType;         // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown) == 0x000088, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, IsInAir_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, LocomotionStatus) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, DashUpDownStatus) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, DashUpDownType) == 0x000083, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::DashUpDownType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, IsRequestResetStateMachine_0) == 0x000084, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, ResetStateMachineStatus_0) == 0x000085, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, CallFunc_GetDashUpDownInfo_DashUpDownStatus) == 0x000086, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::CallFunc_GetDashUpDownInfo_DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown, CallFunc_GetDashUpDownInfo_DashUpDownType) == 0x000087, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown::CallFunc_GetDashUpDownInfo_DashUpDownType' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForHighSpeedMove
// 0x0130 (0x0130 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetDistance_0;                                  // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x008A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity_0;                                        // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ_0;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed_0;                                   // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector_0;                                     // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          ShortDashStatus;                                   // 0x00D9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShortDashAdditionalMaxSpeed;                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalSpeed;                          // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashMoveTimer;                                // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0101(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0102(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratHighSpeedMoveState                      CallFunc_GetHighSpeedMoveStatus_HighSpeedMoveStatus; // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          CallFunc_GetShortDashInfo_ShortDashStatus;         // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve; // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashMoveTimer;      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove) == 0x000130, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, TargetDistance_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::TargetDistance_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, DirectionY_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, DirectionZ_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, NearMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, BattleMoveAlpha_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, IsNearMode) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::IsNearMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, IsLockOn) == 0x000089, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::IsLockOn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, IsInAir_0) == 0x00008A, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, Velocity_0) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, VelocityZ_0) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::VelocityZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, MaxSpeed) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, NearModeSpeed_0) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::NearModeSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, InputVector_0) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::InputVector_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, InputZ) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::InputZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, LocomotionStatus) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ShortDashStatus) == 0x0000D9, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ShortDashAdditionalMaxSpeed) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ShortDashAdditionalSpeed) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ShortDashAdditionalSpeedCurve) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ShortDashMoveTimer) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, HighSpeedMoveStatus) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, IsRequestResetStateMachine_0) == 0x000101, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, ResetStateMachineStatus_0) == 0x000102, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetHighSpeedMoveStatus_HighSpeedMoveStatus) == 0x000103, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetHighSpeedMoveStatus_HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetShortDashInfo_ShortDashStatus) == 0x000104, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetShortDashInfo_ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetShortDashInfo_ShortDashMoveTimer) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetShortDashInfo_ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForIdleMove
// 0x0870 (0x0870 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetDistance_0;                                  // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x008A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity_0;                                        // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ_0;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed_0;                                   // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector_0;                                     // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             EventHitArgHit;                                    // 0x00D8(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsEnableMoveEffect_0;                              // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveEffectStartSpeed_0;                            // 0x01C8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveEffectEndSpeed_0;                              // 0x01D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x01D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          ShortDashStatus;                                   // 0x01D9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShortDashAdditionalMaxSpeed;                       // 0x01E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalSpeed;                          // 0x01E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x01F0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashMoveTimer;                                // 0x01F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus_0;                                // 0x0200(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x0208(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EKoratBlowState                               BlowStatus;                                        // 0x0220(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                BlowType;                                          // 0x0221(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlowIsFront;                                       // 0x0222(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_223[0x5];                                      // 0x0223(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              BlowHitBackMovementData;                           // 0x0228(0x02E0)(Parm, OutParm)
	double                                        BlowHitSpeedNormal;                                // 0x0508(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowHitSpeedParallel;                              // 0x0510(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundSSpeedMax;                                // 0x0518(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundMSpeedMax;                                // 0x0520(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlowReactionLevel;                                 // 0x0528(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       DragonHomingStatus;                                // 0x052C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       RevengeDashStatus;                                 // 0x052D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestPlayIdle_0;                               // 0x052E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTransitionRelaxIdle_0;                           // 0x052F(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratActionIdleType                          ActionIdleType_0;                                  // 0x0530(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0531(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0532(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       BlastDashStatus;                                   // 0x0533(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetBlastUltimateDashStatus_BlastDashStatus; // 0x0534(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetRevengeDashStatus_RevengeDashStatus;   // 0x0535(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetDragonHomingStatus_DragonHomingStatus; // 0x0536(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               CallFunc_GetBlowInfo_BlowStatus;                   // 0x0537(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                CallFunc_GetBlowInfo_BlowType;                     // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowInfo_BlowIsFront;                  // 0x0539(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              CallFunc_GetBlowInfo_HitBackData;                  // 0x0540(0x02E0)()
	double                                        CallFunc_GetBlowInfo_BlowHitSpeedNormal;           // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowHitSpeedParallel;         // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowBoundSSpeedMax;           // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowBoundMSpeedMax;           // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBlowInfo_BlowReactionLevel;            // 0x0840(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          CallFunc_GetShortDashInfo_ShortDashStatus;         // 0x0844(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_845[0x3];                                      // 0x0845(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed; // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed; // 0x0850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve; // 0x0858(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashMoveTimer;      // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x0868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove) == 0x000870, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, TargetDistance_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::TargetDistance_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, DirectionY_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, DirectionZ_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, NearMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BattleMoveAlpha_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsNearMode) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsNearMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsLockOn) == 0x000089, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsLockOn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsInAir_0) == 0x00008A, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, Velocity_0) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, VelocityZ_0) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::VelocityZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, MaxSpeed) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, NearModeSpeed_0) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::NearModeSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, InputVector_0) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::InputVector_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, InputZ) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::InputZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, EventHitArgHit) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::EventHitArgHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsEnableMoveEffect_0) == 0x0001C0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsEnableMoveEffect_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, MoveEffectStartSpeed_0) == 0x0001C8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::MoveEffectStartSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, MoveEffectEndSpeed_0) == 0x0001D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::MoveEffectEndSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, LocomotionStatus) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ShortDashStatus) == 0x0001D9, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ShortDashAdditionalMaxSpeed) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ShortDashAdditionalSpeed) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ShortDashAdditionalSpeedCurve) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ShortDashMoveTimer) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, DragonDashStatus_0) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::DragonDashStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, DragonDashRotation) == 0x000208, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::DragonDashRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowStatus) == 0x000220, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowType) == 0x000221, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowIsFront) == 0x000222, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowHitBackMovementData) == 0x000228, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowHitBackMovementData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowHitSpeedNormal) == 0x000508, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowHitSpeedParallel) == 0x000510, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowBoundSSpeedMax) == 0x000518, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowBoundMSpeedMax) == 0x000520, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlowReactionLevel) == 0x000528, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, DragonHomingStatus) == 0x00052C, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, RevengeDashStatus) == 0x00052D, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::RevengeDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsRequestPlayIdle_0) == 0x00052E, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsRequestPlayIdle_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsTransitionRelaxIdle_0) == 0x00052F, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsTransitionRelaxIdle_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ActionIdleType_0) == 0x000530, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ActionIdleType_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, IsRequestResetStateMachine_0) == 0x000531, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, ResetStateMachineStatus_0) == 0x000532, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, BlastDashStatus) == 0x000533, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::BlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlastUltimateDashStatus_BlastDashStatus) == 0x000534, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlastUltimateDashStatus_BlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetRevengeDashStatus_RevengeDashStatus) == 0x000535, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetRevengeDashStatus_RevengeDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetDragonHomingStatus_DragonHomingStatus) == 0x000536, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetDragonHomingStatus_DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowStatus) == 0x000537, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowType) == 0x000538, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowIsFront) == 0x000539, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_HitBackData) == 0x000540, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_HitBackData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowHitSpeedNormal) == 0x000820, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowHitSpeedParallel) == 0x000828, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowBoundSSpeedMax) == 0x000830, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowBoundMSpeedMax) == 0x000838, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetBlowInfo_BlowReactionLevel) == 0x000840, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetBlowInfo_BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetShortDashInfo_ShortDashStatus) == 0x000844, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetShortDashInfo_ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed) == 0x000848, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed) == 0x000850, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve) == 0x000858, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetShortDashInfo_ShortDashMoveTimer) == 0x000860, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetShortDashInfo_ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x000868, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForJump
// 0x0080 (0x0080 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity_0;                                        // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ_0;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               JumpStatus;                                        // 0x0079(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x007A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x007B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump) == 0x000080, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, DirectionY_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, DirectionZ_0) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, Velocity_0) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, VelocityZ_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::VelocityZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, LocomotionStatus) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, JumpStatus) == 0x000079, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, IsRequestResetStateMachine_0) == 0x00007A, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, ResetStateMachineStatus_0) == 0x00007B, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump, CallFunc_GetJumpStatus_JumpStatus) == 0x00007C, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForLocomotion
// 0x0070 (0x0070 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               JumpStatus;                                        // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               StepStatus;                                        // 0x006A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                StepType;                                          // 0x006B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType;                     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion) == 0x000070, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, DirectionY_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, DirectionZ_0) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, NearMoveAlpha_0) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, BattleMoveAlpha_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, LocomotionStatus) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, JumpStatus) == 0x000069, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, StepStatus) == 0x00006A, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, StepType) == 0x00006B, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, CallFunc_GetStepType_StepType) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::CallFunc_GetStepType_StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, CallFunc_GetStepStatus_StepStatus) == 0x00006D, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion, CallFunc_GetJumpStatus_JumpStatus) == 0x00006E, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForMobileMonitoring
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring final
{
public:
	bool                                          IsObstacleDetection;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring, IsObstacleDetection) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring::IsObstacleDetection' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForMoveStandUp
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetDistance_0;                                  // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x008A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity_0;                                        // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ_0;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed_0;                                   // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector_0;                                     // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x00D9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x00DA(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp) == 0x0000E8, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, TargetDistance_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::TargetDistance_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, DirectionY_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, DirectionZ_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, NearMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, BattleMoveAlpha_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, IsNearMode) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::IsNearMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, IsLockOn) == 0x000089, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::IsLockOn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, IsInAir_0) == 0x00008A, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, Velocity_0) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, VelocityZ_0) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::VelocityZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, MaxSpeed) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, NearModeSpeed_0) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::NearModeSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, InputVector_0) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::InputVector_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, InputZ) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::InputZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, LocomotionStatus) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, IsRequestResetStateMachine_0) == 0x0000D9, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, ResetStateMachineStatus_0) == 0x0000DA, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForNumbReaction
// 0x0003 (0x0003 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction final
{
public:
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction) == 0x000003, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction, LocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction, IsRequestResetStateMachine_0) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction, ResetStateMachineStatus_0) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction::ResetStateMachineStatus_0' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForPostPhysics
// 0x0110 (0x0110 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity_0;                                        // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ_0;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed_0;                                   // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector_0;                                     // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableMoveEffect_0;                              // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveEffectStartSpeed_0;                            // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveEffectEndSpeed_0;                              // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus_0;                                // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics) == 0x000110, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, IsNearMode) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::IsNearMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, IsInAir_0) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, Velocity_0) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, VelocityZ_0) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::VelocityZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, MaxSpeed) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, NearModeSpeed_0) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::NearModeSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, InputVector_0) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::InputVector_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, InputZ) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::InputZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, IsEnableMoveEffect_0) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::IsEnableMoveEffect_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, MoveEffectStartSpeed_0) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::MoveEffectStartSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, MoveEffectEndSpeed_0) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::MoveEffectEndSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, DragonDashStatus_0) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::DragonDashStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, DragonDashRotation) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::DragonDashRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForStanReaction
// 0x0007 (0x0007 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction final
{
public:
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStunReactionState                       StunReactionStatus;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StunReactionIsFront;                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStunReactionState                       CallFunc_GetStunReactionInfo_StunReactionStatus;   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStunReactionInfo_StunReactionIsFront;  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction) == 0x000007, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, LocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, StunReactionStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::StunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, StunReactionIsFront) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::StunReactionIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, IsRequestResetStateMachine_0) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, ResetStateMachineStatus_0) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, CallFunc_GetStunReactionInfo_StunReactionStatus) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::CallFunc_GetStunReactionInfo_StunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction, CallFunc_GetStunReactionInfo_StunReactionIsFront) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction::CallFunc_GetStunReactionInfo_StunReactionIsFront' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForStep
// 0x0070 (0x0070 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               StepStatus;                                        // 0x006A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                StepType;                                          // 0x006B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x006D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType;                     // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep) == 0x000070, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, DirectionY_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, DirectionZ_0) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, NearMoveAlpha_0) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, BattleMoveAlpha_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, IsInAir_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, LocomotionStatus) == 0x000069, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, StepStatus) == 0x00006A, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, StepType) == 0x00006B, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, IsRequestResetStateMachine_0) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, ResetStateMachineStatus_0) == 0x00006D, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, CallFunc_GetStepType_StepType) == 0x00006E, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::CallFunc_GetStepType_StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep, CallFunc_GetStepStatus_StepStatus) == 0x00006F, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForWallUkemi
// 0x0220 (0x0220 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi final
{
public:
	double                                        Speed_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed_0;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed_0;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot_0;                                 // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot_0;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation_0;                                // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY_0;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ_0;                                      // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha_0;                                   // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha_0;                                 // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir_0;                                         // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratWallUkemiState                          WallUkemiStatus;                                   // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForecastBlowHit;                                 // 0x0083(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitLocation;                           // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForecastBlowHitTime;                               // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             ForecastBlowHitMapAttribute;                       // 0x00A8(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForecastBlowHitNormal;                             // 0x00B0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine_0;                      // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus_0;                         // 0x00C9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowHitForecastSaveInfo_IsHit;         // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_Location;      // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowHitForecastSaveInfo_HitTime;       // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             CallFunc_GetBlowHitForecastSaveInfo_MapAttribute;  // 0x00F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_HitNormal;     // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat;    // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlowHitForecastSaveInfo_HitActor;      // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetBlowHitForecastSaveInfo_HitComponent;  // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetBlowHitForecastSaveInfo_HitBoneName;   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetBlowHitForecastSaveInfo_HitResult;     // 0x0130(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EKoratWallUkemiState                          CallFunc_GetWallUkemiStatus_WallUkemiStatus;       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi) == 0x000220, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, Speed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, XYSpeed_0) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ZSpeed_0) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ZSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, LastVelocityRot_0) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::LastVelocityRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CharacterRot_0) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CharacterRot_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ToTargetRotation_0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ToTargetRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, DirectionY_0) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::DirectionY_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, DirectionZ_0) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::DirectionZ_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, NearMoveAlpha_0) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::NearMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, BattleMoveAlpha_0) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::BattleMoveAlpha_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, IsInAir_0) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::IsInAir_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, LocomotionStatus) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, WallUkemiStatus) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::WallUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, IsForecastBlowHit) == 0x000083, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::IsForecastBlowHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitLocation) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitTime) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitMapAttribute) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitMapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitNormal) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, IsRequestResetStateMachine_0) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::IsRequestResetStateMachine_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, ResetStateMachineStatus_0) == 0x0000C9, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::ResetStateMachineStatus_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_IsHit) == 0x0000CA, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_IsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_Location) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitTime) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_MapAttribute) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_MapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitNormal) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitActor) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitComponent) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitBoneName) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetBlowHitForecastSaveInfo_HitResult) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetBlowHitForecastSaveInfo_HitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi, CallFunc_GetWallUkemiStatus_WallUkemiStatus) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi::CallFunc_GetWallUkemiStatus_WallUkemiStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterMaxSpeed
// 0x0060 (0x0060 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed final
{
public:
	double                                        NowMaxSpeed;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          CallFunc_GetShortDashInfo_ShortDashStatus;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashMoveTimer;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed) == 0x000060, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, NowMaxSpeed) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::NowMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, Temp_bool_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, Temp_real_Variable) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_GetShortDashInfo_ShortDashStatus) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_GetShortDashInfo_ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_GetShortDashInfo_ShortDashMoveTimer) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_GetShortDashInfo_ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, K2Node_Select_Default) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterMoveStandUp
// 0x0006 (0x0006 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp final
{
public:
	ECharacterMoveStandUpState                    ActionStatus;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionIsFront;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                ActionDirection;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    CallFunc_GetMoveStandUpInfo_ActionStatus;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMoveStandUpInfo_ActionIsFront;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                CallFunc_GetMoveStandUpInfo_ActionDirection;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp) == 0x000006, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp, ActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp::ActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp, ActionIsFront) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp::ActionIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp, ActionDirection) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp::ActionDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp, CallFunc_GetMoveStandUpInfo_ActionStatus) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp::CallFunc_GetMoveStandUpInfo_ActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp, CallFunc_GetMoveStandUpInfo_ActionIsFront) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp::CallFunc_GetMoveStandUpInfo_ActionIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp, CallFunc_GetMoveStandUpInfo_ActionDirection) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp::CallFunc_GetMoveStandUpInfo_ActionDirection' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterSuperHighSpeedMoveStr
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr final
{
public:
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratHighSpeedMoveState                      CallFunc_GetSuperHighSpeedMoveStrStatus_HighSpeedMoveStatus; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr, HighSpeedMoveStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr, CallFunc_GetSuperHighSpeedMoveStrStatus_HighSpeedMoveStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr::CallFunc_GetSuperHighSpeedMoveStrStatus_HighSpeedMoveStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent, ActorComponent) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent::ActorComponent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionSubDetailStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus final
{
public:
	EKoratLocomotionState                         InLocomotionStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         OutDetailStatus;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus, InLocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus::InLocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus, OutDetailStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus::OutDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus, CallFunc_GetLocomotionSub_SubInstance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLookAtRotation
// 0x0088 (0x0088 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLookAtRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVirtualTargetLocation_Location;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLookAtRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLookAtRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLookAtRotation) == 0x000088, "Wrong size on BP_CharacterLocomotionComponent_C_GetLookAtRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, CallFunc_GetOwner_ReturnValue_1) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, CallFunc_GetVirtualTargetLocation_Location) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::CallFunc_GetVirtualTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLookAtRotation, CallFunc_FindLookAtRotation_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetLookAtRotation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMontageComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetMontageComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetMontageComponent) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetMontageComponent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetMontageComponent) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_GetMontageComponent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMontageComponent, ActorComponent) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetMontageComponent::ActorComponent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMoveLookAtRotation
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation final
{
public:
	bool                                          InIsMoveInput;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OutLookAtRotation;                                 // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVirtualTargetLocation_Location;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraVirtualTargetLocation_Location;  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation) == 0x0000E8, "Wrong size on BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, InIsMoveInput) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::InIsMoveInput' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, OutLookAtRotation) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::OutLookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, TargetLocation) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_GetOwner_ReturnValue_1) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_GetVirtualTargetLocation_Location) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_GetVirtualTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_GetOwner_ReturnValue_2) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation, CallFunc_GetCameraVirtualTargetLocation_Location) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation::CallFunc_GetCameraVirtualTargetLocation_Location' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMovementModeInternal
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetMovementModeInternal final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_GetCharacterMovementMode_MovementMode;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetMovementModeInternal");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_GetMovementModeInternal");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal, MovementMode) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetMovementModeInternal::MovementMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetMovementModeInternal::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetMovementModeInternal::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetMovementModeInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMovementModeInternal, CallFunc_GetCharacterMovementMode_MovementMode) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_GetMovementModeInternal::CallFunc_GetCharacterMovementMode_MovementMode' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMoveStandUpInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo final
{
public:
	ECharacterMoveStandUpState                    ActionStatus;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionIsFront;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                ActionDirection;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubMoveStandUp_C* CallFunc_GetSubMoveStandUp_SubMoveStandUp;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo, ActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo::ActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo, ActionIsFront) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo::ActionIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo, ActionDirection) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo::ActionDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo, CallFunc_GetSubMoveStandUp_SubMoveStandUp) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo::CallFunc_GetSubMoveStandUp_SubMoveStandUp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMoveStandUpStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus final
{
public:
	ECharacterMoveStandUpState                    ActionStatus;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubMoveStandUp_C* CallFunc_GetSubMoveStandUp_SubMoveStandUp;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus, ActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus::ActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus, CallFunc_GetSubMoveStandUp_SubMoveStandUp) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus::CallFunc_GetSubMoveStandUp_SubMoveStandUp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetNumbReactionStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetNumbReactionStatus final
{
public:
	ECharacterNumbReactionState                   NumbReactionStatus;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetNumbReactionStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetNumbReactionStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetNumbReactionStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetNumbReactionStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetNumbReactionStatus, NumbReactionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetNumbReactionStatus::NumbReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetNumbReactionStatus, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetNumbReactionStatus::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetNumbReactionStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetNumbReactionStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetOnlyYawRotation
// 0x0058 (0x0058 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetOnlyYawRotation final
{
public:
	struct FRotator                               LookAtRotation_0;                                  // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetOnlyYawRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation) == 0x000058, "Wrong size on BP_CharacterLocomotionComponent_C_GetOnlyYawRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation, LookAtRotation_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetOnlyYawRotation::LookAtRotation_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation, ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetOnlyYawRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetOnlyYawRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_GetOnlyYawRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetOnlyYawRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetOnlyYawRotation, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetOnlyYawRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetReplaceSubInstance
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetReplaceSubInstance final
{
public:
	class FName                                   SubInstanceName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SubInstanceTagName;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SubInstanceClass;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetReplaceSubInstance) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetReplaceSubInstance");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetReplaceSubInstance) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetReplaceSubInstance");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetReplaceSubInstance, SubInstanceName) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetReplaceSubInstance::SubInstanceName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetReplaceSubInstance, SubInstanceTagName) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetReplaceSubInstance::SubInstanceTagName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetReplaceSubInstance, SubInstanceClass) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetReplaceSubInstance::SubInstanceClass' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRequestAnim
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetRequestAnim final
{
public:
	struct FFRequestAnimData                      RequestAnimData;                                   // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetRequestAnim) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetRequestAnim");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetRequestAnim) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_GetRequestAnim");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRequestAnim, RequestAnimData) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetRequestAnim::RequestAnimData' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRevengeDashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetRevengeDashStatus final
{
public:
	EKoratDragonHomingState                       RevengeDashStatus;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubRevengeDash_C* CallFunc_GetSubRevengeDash_SubRevengeDash;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetRevengeDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetRevengeDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetRevengeDashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetRevengeDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRevengeDashStatus, RevengeDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetRevengeDashStatus::RevengeDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRevengeDashStatus, CallFunc_GetSubRevengeDash_SubRevengeDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetRevengeDashStatus::CallFunc_GetSubRevengeDash_SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRevengeDashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetRevengeDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRotationInternal
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetRotationInternal final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCharacterRotation_Rotation;            // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetRotationInternal) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetRotationInternal");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetRotationInternal) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_GetRotationInternal");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRotationInternal, Rotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetRotationInternal::Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRotationInternal, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetRotationInternal::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRotationInternal, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetRotationInternal::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRotationInternal, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetRotationInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRotationInternal, CallFunc_GetCharacterRotation_Rotation) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetRotationInternal::CallFunc_GetCharacterRotation_Rotation' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRunningActionLocomotionSub
// 0x0048 (0x0048 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub final
{
public:
	EKoratLocomotionState                         InLocomotionStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   OutAction;                                         // 0x0004(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutSection;                                        // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ResultSection;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ResultAction;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetRunningSection_RunningSection;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction;           // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub) == 0x000048, "Wrong size on BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, InLocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::InLocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, OutAction) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, OutSection) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::OutSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, ResultSection) == 0x000014, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::ResultSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, ResultAction) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::ResultAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, CallFunc_GetLocomotionSub_SubInstance) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, CallFunc_GetRunningSection_RunningSection) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::CallFunc_GetRunningSection_RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, CallFunc_GetRunningAction_RunningAction) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::CallFunc_GetRunningAction_RunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetShortDashInfo
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetShortDashInfo final
{
public:
	EKoratShortDashState                          ShortDashStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShortDashAdditionalMaxSpeed;                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalSpeed;                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashMoveTimer;                                // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubSuperHighSpeedMove_C* CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubHighSpeedMove_C* CallFunc_GetSubHighSpeedMove_SubHighSpeedMove;     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetShortDashInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetShortDashInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetShortDashInfo) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_GetShortDashInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, ShortDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, ShortDashAdditionalMaxSpeed) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, ShortDashAdditionalSpeed) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, ShortDashAdditionalSpeedCurve) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, ShortDashMoveTimer) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, CallFunc_GetSubShortDash_SubShortDash) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, CallFunc_GetSubHighSpeedMove_SubHighSpeedMove) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::CallFunc_GetSubHighSpeedMove_SubHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashInfo, K2Node_SwitchEnum_CmpSuccess) == 0x000049, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashInfo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetShortDashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetShortDashStatus final
{
public:
	EKoratShortDashState                          ShortDashStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetShortDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetShortDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetShortDashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetShortDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashStatus, ShortDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashStatus::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashStatus, CallFunc_GetSubShortDash_SubShortDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashStatus::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetShortDashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetShortDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStepType
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetStepType final
{
public:
	EKoratStepType                                StepType;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStep_C*       CallFunc_GetSubStep_SubStep;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetStepType) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetStepType");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetStepType) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetStepType");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStepType, StepType) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetStepType::StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStepType, CallFunc_GetSubStep_SubStep) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetStepType::CallFunc_GetSubStep_SubStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStepType, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetStepType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStrutJumpStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetStrutJumpStatus final
{
public:
	ECharacterStrutJumpState                      JumpStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubIdleMove_C*   CallFunc_GetSubIdleMove_SubIdleMove;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetStrutJumpStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetStrutJumpStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetStrutJumpStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetStrutJumpStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStrutJumpStatus, JumpStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetStrutJumpStatus::JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStrutJumpStatus, CallFunc_GetSubIdleMove_SubIdleMove) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetStrutJumpStatus::CallFunc_GetSubIdleMove_SubIdleMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStrutJumpStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetStrutJumpStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStunReactionInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetStunReactionInfo final
{
public:
	EKoratStunReactionState                       StunReactionStatus;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StunReactionIsFront;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetStunReactionInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetStunReactionInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetStunReactionInfo) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetStunReactionInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionInfo, StunReactionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionInfo::StunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionInfo, StunReactionIsFront) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionInfo::StunReactionIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionInfo, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionInfo::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionInfo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStunReactionStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetStunReactionStatus final
{
public:
	EKoratStunReactionState                       StunReactionStatus;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetStunReactionStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetStunReactionStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetStunReactionStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetStunReactionStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionStatus, StunReactionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionStatus::StunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionStatus, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionStatus::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStunReactionStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetStunReactionStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlastSkill1Dash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash final
{
public:
	class UBP_CharacterLocomotionSubBlastDash_C*  SubBlastDash;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash, SubBlastDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash::SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlastSkill2Dash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash final
{
public:
	class UBP_CharacterLocomotionSubBlastDash_C*  SubBlastDash;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash, SubBlastDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash::SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlastUltimateDash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash final
{
public:
	class UBP_CharacterLocomotionSubBlastDash_C*  SubBlastDash;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash, SubBlastDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash::SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blast_Dash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBurstSmash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubBurstSmash final
{
public:
	class UBP_CharacterLocomotionSubBurstSmash_C* SubBurstSmash;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBurstSmash_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Burst_Smash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubBurstSmash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubBurstSmash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash, SubBurstSmash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubBurstSmash::SubBurstSmash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubBurstSmash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubBurstSmash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubBurstSmash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Burst_Smash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubBurstSmash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Burst_Smash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBurstSmash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubBurstSmash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubHighSpeedMove
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove final
{
public:
	class UBP_CharacterLocomotionSubHighSpeedMove_C* SubHighSpeedMove;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubHighSpeedMove_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_High_Speed_Move; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove, SubHighSpeedMove) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove::SubHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_High_Speed_Move) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_High_Speed_Move' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubIdleMove
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubIdleMove final
{
public:
	class UBP_CharacterLocomotionSubIdleMove_C*   SubIdleMove;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubIdleMove_C*   K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubIdleMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubIdleMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubIdleMove) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubIdleMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubIdleMove, SubIdleMove) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubIdleMove::SubIdleMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubIdleMove, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubIdleMove::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubIdleMove, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubIdleMove::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubIdleMove, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubIdleMove::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubIdleMove, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubIdleMove::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubIdleMove, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubIdleMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubMoveStandUp
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubMoveStandUp final
{
public:
	class UBP_CharacterLocomotionSubMoveStandUp_C* SubMoveStandUp;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubMoveStandUp_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Move_Stand_Up; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubMoveStandUp");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubMoveStandUp");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp, SubMoveStandUp) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubMoveStandUp::SubMoveStandUp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubMoveStandUp::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubMoveStandUp::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubMoveStandUp::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Move_Stand_Up) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubMoveStandUp::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Move_Stand_Up' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubMoveStandUp, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubMoveStandUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubRevengeDash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubRevengeDash final
{
public:
	class UBP_CharacterLocomotionSubRevengeDash_C* SubRevengeDash;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubRevengeDash_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Revenge_Dash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubRevengeDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubRevengeDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash, SubRevengeDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubRevengeDash::SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubRevengeDash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubRevengeDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubRevengeDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Revenge_Dash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubRevengeDash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Revenge_Dash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubRevengeDash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubRevengeDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubSuperHighSpeedMove
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove final
{
public:
	class UBP_CharacterLocomotionSubSuperHighSpeedMove_C* SubSuperHighSpeedMove;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubSuperHighSpeedMove_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove, SubSuperHighSpeedMove) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove::SubSuperHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubSuperHighSpeedMoveStr
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr final
{
public:
	class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* SubSupeHighSpeedMoveStr;                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move_Str; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr, SubSupeHighSpeedMoveStr) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr::SubSupeHighSpeedMoveStr' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move_Str) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move_Str' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSuperHighSpeedMoveStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus final
{
public:
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubSuperHighSpeedMove_C* CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus, HighSpeedMoveStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus, CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus::CallFunc_GetSubSuperHighSpeedMove_SubSuperHighSpeedMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSuperHighSpeedMoveStrForecast
// 0x0088 (0x0088 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast final
{
public:
	bool                                          IsDetermined;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RemainingTime;                                     // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr; // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSuperHighSpeedMoveStrForecast_IsDetermined; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSuperHighSpeedMoveStrForecast_Location; // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSuperHighSpeedMoveStrForecast_Rotation; // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetSuperHighSpeedMoveStrForecast_RemainingTime; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast) == 0x000088, "Wrong size on BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, IsDetermined) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::IsDetermined' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, Location) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, Rotation) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, RemainingTime) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::RemainingTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, CallFunc_GetSuperHighSpeedMoveStrForecast_IsDetermined) == 0x000049, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::CallFunc_GetSuperHighSpeedMoveStrForecast_IsDetermined' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, CallFunc_GetSuperHighSpeedMoveStrForecast_Location) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::CallFunc_GetSuperHighSpeedMoveStrForecast_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, CallFunc_GetSuperHighSpeedMoveStrForecast_Rotation) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::CallFunc_GetSuperHighSpeedMoveStrForecast_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast, CallFunc_GetSuperHighSpeedMoveStrForecast_RemainingTime) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast::CallFunc_GetSuperHighSpeedMoveStrForecast_RemainingTime' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSuperHighSpeedMoveStrStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus final
{
public:
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus, HighSpeedMoveStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus, CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus::CallFunc_GetSubSuperHighSpeedMoveStr_SubSupeHighSpeedMoveStr' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetDistance
// 0x0080 (0x0080 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetTargetDistance final
{
public:
	double                                        Length;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVirtualTargetLocation_Location;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetTargetDistance) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetTargetDistance");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetTargetDistance) == 0x000080, "Wrong size on BP_CharacterLocomotionComponent_C_GetTargetDistance");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, Length) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, CallFunc_GetOwner_ReturnValue_1) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, CallFunc_GetVirtualTargetLocation_Location) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::CallFunc_GetVirtualTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistance, CallFunc_VSize_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetDistanceXY
// 0x0080 (0x0080 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetTargetDistanceXY final
{
public:
	double                                        Length;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVirtualTargetLocation_Location;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetTargetDistanceXY");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY) == 0x000080, "Wrong size on BP_CharacterLocomotionComponent_C_GetTargetDistanceXY");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, Length) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, CallFunc_GetOwner_ReturnValue_1) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, CallFunc_GetVirtualTargetLocation_Location) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::CallFunc_GetVirtualTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetDistanceXY, CallFunc_VSizeXY_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetTargetDistanceXY::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetLocationGroundDistance
// 0x0238 (0x0238 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance final
{
public:
	bool                                          OutIsHit;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OutDistance;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVirtualTargetLocation_Location;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleByProfile_OutHit;          // 0x0070(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleByProfile_ReturnValue;     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B[0x1];                                      // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_OutDistance_ImplicitCast;    // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance) == 0x000238, "Wrong size on BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, OutIsHit) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::OutIsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, OutDistance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::OutDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, Temp_object_Variable) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_GetVirtualTargetLocation_Location) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_GetVirtualTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_LineTraceSingleByProfile_OutHit) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_LineTraceSingleByProfile_OutHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_LineTraceSingleByProfile_ReturnValue) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_LineTraceSingleByProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_bBlockingHit) == 0x000159, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_bInitialOverlap) == 0x00015A, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_Time) == 0x00015C, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_Distance) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_Location) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_ImpactPoint) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_Normal) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B0, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_PhysMat) == 0x0001C8, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_HitActor) == 0x0001D0, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_HitComponent) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_HitBoneName) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_BoneName) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_HitItem) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_ElementIndex) == 0x0001F4, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_FaceIndex) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_TraceStart) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, CallFunc_BreakHitResult_TraceEnd) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance, K2Node_FunctionResult_OutDistance_ImplicitCast) == 0x000230, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance::K2Node_FunctionResult_OutDistance_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetLocationInternal
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetTargetLocationInternal final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVirtualTargetLocation_Location;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetTargetLocationInternal");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_GetTargetLocationInternal");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal, Location) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationInternal::Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationInternal::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationInternal::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetTargetLocationInternal, CallFunc_GetVirtualTargetLocation_Location) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetTargetLocationInternal::CallFunc_GetVirtualTargetLocation_Location' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetUseCharacterRotationPitchDetail
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail final
{
public:
	bool                                          UsePitchLimit;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitchInterp;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail, UsePitchLimit) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail::UsePitchLimit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail, UsePitchInterp) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail::UsePitchInterp' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetUseRotationPitchInternal
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal final
{
public:
	bool                                          UsePitch;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetUseCharacterRotationPitch_UsePitch;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal, UsePitch) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal::UsePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal, CallFunc_GetUseCharacterRotationPitch_UsePitch) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal::CallFunc_GetUseCharacterRotationPitch_UsePitch' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetVelocity
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetVelocity final
{
public:
	struct FVector                                Velocity_0;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_Velocity;                     // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetVelocity) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetVelocity");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetVelocity) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_GetVelocity");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetVelocity, Velocity_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetVelocity::Velocity_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetVelocity, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetVelocity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetVelocity, CallFunc_GetVelocity_Velocity) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetVelocity::CallFunc_GetVelocity_Velocity' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetVirtualTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation, Location) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation::Location' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetWallUkemiStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetWallUkemiStatus final
{
public:
	EKoratWallUkemiState                          WallUkemiStatus;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubWallUkemi_C*  CallFunc_GetSubWallUkemi_SubWallUkemi;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetWallUkemiStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetWallUkemiStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetWallUkemiStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetWallUkemiStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetWallUkemiStatus, WallUkemiStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetWallUkemiStatus::WallUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetWallUkemiStatus, CallFunc_GetSubWallUkemi_SubWallUkemi) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetWallUkemiStatus::CallFunc_GetSubWallUkemi_SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetWallUkemiStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetWallUkemiStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetZBurstDashArrivalSecond
// 0x00A0 (0x00A0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_ZBurst_Dash_Remain_Length_RemainLength; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetZBurstDashParameter_________;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashParameter_____;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashParameter_TangentScale;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetZBurstDashParameter______1;            // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetZBurstDashParameter______2;            // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetZBurstDashParameter__________;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashParameter____________;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashParameter_OT_______;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashParameter_______________;    // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond) == 0x0000A0, "Wrong size on BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_Get_ZBurst_Dash_Remain_Length_RemainLength) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_Get_ZBurst_Dash_Remain_Length_RemainLength' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter_________) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter_________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter_____) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter_____' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter_TangentScale) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter_TangentScale' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter______1) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter______1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter______2) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter______2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter__________) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter__________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter____________) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter____________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter_OT_______) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter_OT_______' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_GetZBurstDashParameter_______________) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_GetZBurstDashParameter_______________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetZBurstDashSplineInfo
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo final
{
public:
	class UBP_CharacterSplineComponent_C*         SplineComponent;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SplineNowDistance;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBurstSmash_C* CallFunc_GetSubBurstSmash_SubBurstSmash;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, SplineComponent) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::SplineComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, SplineNowDistance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, CallFunc_GetSubBurstSmash_SubBurstSmash) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::CallFunc_GetSubBurstSmash_SubBurstSmash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo, K2Node_SwitchEnum_CmpSuccess) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetZBurstDashStatus
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetZBurstDashStatus final
{
public:
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBurstSmash_C* CallFunc_GetSubBurstSmash_SubBurstSmash;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetZBurstDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_GetZBurstDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus, ZBurstDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashStatus::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus, CallFunc_GetSubBurstSmash_SubBurstSmash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashStatus::CallFunc_GetSubBurstSmash_SubBurstSmash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashStatus::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashStatus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetZBurstDashStatus, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_GetZBurstDashStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputBattleKeyJustPressed
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed::BattleKey' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputBattleKeyJustReleased
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased::BattleKey' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputFreeCameraVector
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputFreeCameraVector final
{
public:
	struct FVector2D                              InputVector_0;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputFreeCameraVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputFreeCameraVector");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputFreeCameraVector) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_InputFreeCameraVector");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputFreeCameraVector, InputVector_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputFreeCameraVector::InputVector_0' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyDown
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown, BattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown::BattleKey' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyJustPressed
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed::BattleKey' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyJustReleased
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased::BattleKey' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyUp
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp, BattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp::BattleKey' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Interpolate Range Rotator
// 0x00C0 (0x00C0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator final
{
public:
	double                                        InRangeValue;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InRangeBase;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InRangeSize;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InValueMin;                                        // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InValueMax;                                        // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               OutValue;                                          // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        ResultZ;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResultY;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResultX;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeBase;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeSize;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ValueMax;                                          // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ValueMin;                                          // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RangeNow;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator) == 0x0000C0, "Wrong size on BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, InRangeValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::InRangeValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, InRangeBase) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::InRangeBase' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, InRangeSize) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::InRangeSize' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, InValueMin) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::InValueMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, InValueMax) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::InValueMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, OutValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::OutValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, ResultZ) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::ResultZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, ResultY) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::ResultY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, ResultX) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::ResultX' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, RangeBase) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::RangeBase' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, RangeSize) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::RangeSize' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, ValueMax) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::ValueMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, ValueMin) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::ValueMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator, RangeNow) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator::RangeNow' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InterpolateRangeValue
// 0x00B0 (0x00B0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_InterpolateRangeValue final
{
public:
	double                                        InRangeValue;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InRangeBase;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InRangeSize;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InValueMin;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InValueMax;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OutValue;                                          // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeBase;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeSize;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValueMax;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValueMin;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeMax;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeMin;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RangeNow;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_InterpolateRangeValue");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue) == 0x0000B0, "Wrong size on BP_CharacterLocomotionComponent_C_InterpolateRangeValue");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, InRangeValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::InRangeValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, InRangeBase) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::InRangeBase' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, InRangeSize) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::InRangeSize' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, InValueMin) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::InValueMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, InValueMax) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::InValueMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, OutValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::OutValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, RangeBase) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::RangeBase' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, RangeSize) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::RangeSize' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, ValueMax) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::ValueMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, ValueMin) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::ValueMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, RangeMax) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::RangeMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, RangeMin) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::RangeMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, RangeNow) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::RangeNow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_InterpolateRangeValue, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A9, "Member 'BP_CharacterLocomotionComponent_C_InterpolateRangeValue::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Is Near Range Distance
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNear;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeGiantCharaCpp_ReturnValue;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, Distance) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::Distance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, IsNear) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::IsNear' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, CallFunc_IsNearRangeGiantCharaCpp_ReturnValue) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::CallFunc_IsNearRangeGiantCharaCpp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00000B, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance, CallFunc_BooleanAND_ReturnValue_1) == 0x00000D, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Is Near Range Giant Chara
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue_1; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetGiantChara_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_GetConsoleVariableBoolValue_ReturnValue_1) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_GetConsoleVariableBoolValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_IsGiantChara_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_IsGiantChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_IsTargetGiantChara_ReturnValue) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_IsTargetGiantChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara, CallFunc_BooleanOR_ReturnValue_1) == 0x000007, "Member 'BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsAfterULTFallingFront
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront final
{
public:
	bool                                          OutIsFront;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CallFunc_GetBlastUltimateGaveAfterActionDataList_ReturnValue; // 0x0004(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          SSK2Node_SwitchDataAsset_CmpSuccess;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront, OutIsFront) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront::OutIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront, CallFunc_GetBlastUltimateGaveAfterActionDataList_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront::CallFunc_GetBlastUltimateGaveAfterActionDataList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront, SSK2Node_SwitchDataAsset_CmpSuccess) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront::SSK2Node_SwitchDataAsset_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsDashUkemiReserved
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsDashUkemiReserved final
{
public:
	bool                                          IsDashUkemiReserved_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsDashUkemiReserved) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsDashUkemiReserved");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsDashUkemiReserved) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_IsDashUkemiReserved");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDashUkemiReserved, IsDashUkemiReserved_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsDashUkemiReserved::IsDashUkemiReserved_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDashUkemiReserved, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsDashUkemiReserved::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDashUkemiReserved, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_IsDashUkemiReserved::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsDragonDashZMoveOnInputFront
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront final
{
public:
	bool                                          InIsInputNeutral;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutIsZMove;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, InIsInputNeutral) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::InIsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, OutIsZMove) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::OutIsZMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsEnableAction
// 0x00D8 (0x00D8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActionEnable;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EKoratLocomotionState>                 StatusList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	class UBP_CharacterLocomotionSubWallUkemi_C*  CallFunc_GetSubWallUkemi_SubWallUkemi;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_1;                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_2;                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_3;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_4;                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_5;                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_6;                // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_7;                // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExecNative_ReturnValue;                   // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStatusEnableAction_ReturnValue;         // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_8;                // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         CallFunc_Array_Get_Item;                           // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_9;                // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsEnableAction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsEnableAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsEnableAction) == 0x0000D8, "Wrong size on BP_CharacterLocomotionComponent_C_IsEnableAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, IsActionEnable) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::IsActionEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, StatusList) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::StatusList' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubWallUkemi_SubWallUkemi) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubWallUkemi_SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable) == 0x00002A, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_1) == 0x00002B, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubShortDash_SubShortDash) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_3) == 0x000041, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_2) == 0x000042, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_3) == 0x000043, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubBlow_SubBlow) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_4) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_5) == 0x000059, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_4) == 0x00005A, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_5) == 0x00005B, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, Temp_int_Variable) == 0x00005C, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, Temp_int_Variable_1) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Conv_IntToByte_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetValidValue_ReturnValue) == 0x000069, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00006A, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00006B, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetStepStatus_StepStatus) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_6) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess_1) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_6) == 0x000083, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_7) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_7) == 0x000091, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetJumpStatus_JumpStatus) == 0x000092, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, Temp_int_Array_Index_Variable) == 0x000094, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess_2) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_ExecNative_ReturnValue) == 0x000099, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_ExecNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsStatusEnableAction_ReturnValue) == 0x00009A, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsStatusEnableAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, Temp_bool_True_if_break_was_hit_Variable) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_8) == 0x0000A9, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Not_PreBool_ReturnValue) == 0x0000AA, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_8) == 0x0000AB, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Array_Get_Item) == 0x0000AC, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_GetLocomotionSub_SubInstance) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess_3) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsValid_ReturnValue_9) == 0x0000C1, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable_9) == 0x0000C2, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Array_Add_ReturnValue) == 0x0000C4, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000CC, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D1, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_BooleanAND_ReturnValue) == 0x0000D2, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableAction, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000D4, "Member 'BP_CharacterLocomotionComponent_C_IsEnableAction::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsEnableMovementInput
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsEnableMovementInput final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsEnableMovementInput) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsEnableMovementInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsEnableMovementInput) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_IsEnableMovementInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsEnableMovementInput, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsEnableMovementInput::IsEnable' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsGiantChara_actHSMS_actHSM_Off
// 0x0006 (0x0006 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off) == 0x000006, "Wrong size on BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off, Result) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off::Result' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off, CallFunc_IsGiantChara_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off::CallFunc_IsGiantChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsHitFloor
// 0x0130 (0x0130 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsHitFloor final
{
public:
	class AActor*                                 InHitArgOther;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InHitArgHitNormal;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             InHitArgHit;                                       // 0x0020(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsHitFloor_0;                                      // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWalkable_ReturnValue;                   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsHitFloor) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsHitFloor");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsHitFloor) == 0x000130, "Wrong size on BP_CharacterLocomotionComponent_C_IsHitFloor");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, InHitArgOther) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::InHitArgOther' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, InHitArgHitNormal) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::InHitArgHitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, InHitArgHit) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::InHitArgHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, IsHitFloor_0) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::IsHitFloor_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, CallFunc_Dot_VectorVector_ReturnValue) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, CallFunc_IsWalkable_ReturnValue) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::CallFunc_IsWalkable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, K2Node_DynamicCast_AsSSCharacter) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsHitFloor, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_IsHitFloor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsInLimitRangeLocomotionAxisRotation
// 0x00A0 (0x00A0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation final
{
public:
	double                                        InCurrentAngle;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InAxisRotationParameter;                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInLimitRange;                                    // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionAxisRotationParameter      NewLocalVar_3;                                     // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      NewLocalVar_2;                                     // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      NewLocalVar_1;                                     // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          NewLocalVar_0;                                     // 0x004C(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_InRange_FloatFloat_Min_ImplicitCast;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation) == 0x0000A0, "Wrong size on BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, InCurrentAngle) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::InCurrentAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, InAxisRotationParameter) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::InAxisRotationParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, IsInLimitRange) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::IsInLimitRange' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, NewLocalVar_3) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::NewLocalVar_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, NewLocalVar_2) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::NewLocalVar_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, NewLocalVar_1) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, NewLocalVar_0) == 0x00004C, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, CallFunc_InRange_FloatFloat_Min_ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::CallFunc_InRange_FloatFloat_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsInLimitRangeLocomotionRotation
// 0x0090 (0x0090 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation final
{
public:
	struct FFLocomotionRotationParameter          InRotationParameter;                               // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInLimitRange;                                    // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CurrentRotation;                                   // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetRotationInternal_Rotation;             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange; // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange_1; // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange_2; // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast_1; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast_2; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation) == 0x000090, "Wrong size on BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, InRotationParameter) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::InRotationParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, IsInLimitRange) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::IsInLimitRange' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CurrentRotation) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CurrentRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_GetRotationInternal_Rotation) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_GetRotationInternal_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_BreakRotator_Roll) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_BreakRotator_Pitch) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_BreakRotator_Yaw) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange) == 0x000074, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange_1) == 0x000075, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange_2) == 0x000076, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_IsInLimitRangeLocomotionAxisRotation_IsInLimitRange_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast_1) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation, CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast_2) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation::CallFunc_IsInLimitRangeLocomotionAxisRotation_InCurrentAngle_ImplicitCast_2' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsInputKoratBattleKeyDown
// 0x000C (0x000C - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown final
{
public:
	EKoratBattleKey                               InKoratBattleKey;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown) == 0x00000C, "Wrong size on BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown, InKoratBattleKey) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown::InKoratBattleKey' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown, IsDown) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown::IsDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown, CallFunc_Array_Find_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsNearRangeNow
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsNearRangeNow final
{
public:
	bool                                          IsNear;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTargetDistance_Length;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeDistanceCpp_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsNearRangeNow) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsNearRangeNow");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsNearRangeNow) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_IsNearRangeNow");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsNearRangeNow, IsNear) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsNearRangeNow::IsNear' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsNearRangeNow, CallFunc_GetTargetDistance_Length) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsNearRangeNow::CallFunc_GetTargetDistance_Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsNearRangeNow, CallFunc_IsNearRangeDistanceCpp_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_IsNearRangeNow::CallFunc_IsNearRangeDistanceCpp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsNearRangeNow, CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast) == 0x000014, "Member 'BP_CharacterLocomotionComponent_C_IsNearRangeNow::CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadDashUpDownParameter
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter final
{
public:
	struct FKoratCharacterDataDashUpDownParameter CallFunc_GetDashUpDownParameter_OutDashUpDownParameter; // 0x0000(0x00E8)(NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter) == 0x0000E8, "Wrong size on BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter, CallFunc_GetDashUpDownParameter_OutDashUpDownParameter) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_LoadDashUpDownParameter::CallFunc_GetDashUpDownParameter_OutDashUpDownParameter' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadDragonDashParameter
// 0x0168 (0x0168 - 0x0000)
struct BP_CharacterLocomotionComponent_C_LoadDragonDashParameter final
{
public:
	ECharacterDirection                           MoveDirection;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Type;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               Status;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashParameter CallFunc_GetDragonDashParameter_OutDragonDashParameter; // 0x0008(0x0160)(NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_LoadDragonDashParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_LoadDragonDashParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_LoadDragonDashParameter) == 0x000168, "Wrong size on BP_CharacterLocomotionComponent_C_LoadDragonDashParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadDragonDashParameter, MoveDirection) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_LoadDragonDashParameter::MoveDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadDragonDashParameter, Type) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_LoadDragonDashParameter::Type' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadDragonDashParameter, Status) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_LoadDragonDashParameter::Status' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadDragonDashParameter, CallFunc_GetDragonDashParameter_OutDragonDashParameter) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_LoadDragonDashParameter::CallFunc_GetDragonDashParameter_OutDragonDashParameter' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadIdleMoveParam
// 0x02A0 (0x02A0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_LoadIdleMoveParam final
{
public:
	float                                         CallFunc_GetMovementParameterJumpZVelocity_ReturnValue; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNormalSpeed_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNearSpeed_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataMovementParameter   CallFunc_GetMovementParameter_OutMovementParameter; // 0x0010(0x0240)(NoDestructor)
	float                                         CallFunc_GetMovementParameterNearWalkSpeed_ReturnValue; // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterNormalWalkSpeed_ReturnValue; // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterBrakingDecelerationFlying_ReturnValue; // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementParameterMaxAcceleration_ReturnValue; // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_JumpZVelocity_ImplicitCast;     // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NormalModeSpeed_ImplicitCast;   // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NearModeSpeed_ImplicitCast;     // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NearWalkModeSpeed_ImplicitCast; // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NormalWalkModeSpeed_ImplicitCast; // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast; // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_LoadIdleMoveParam");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam) == 0x0002A0, "Wrong size on BP_CharacterLocomotionComponent_C_LoadIdleMoveParam");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterJumpZVelocity_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterJumpZVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterNormalSpeed_ReturnValue) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterNormalSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterNearSpeed_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterNearSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameter_OutMovementParameter) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameter_OutMovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterNearWalkSpeed_ReturnValue) == 0x000250, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterNearWalkSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterNormalWalkSpeed_ReturnValue) == 0x000254, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterNormalWalkSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterBrakingDecelerationFlying_ReturnValue) == 0x000258, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterBrakingDecelerationFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, CallFunc_GetMovementParameterMaxAcceleration_ReturnValue) == 0x00025C, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::CallFunc_GetMovementParameterMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_JumpZVelocity_ImplicitCast) == 0x000260, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_JumpZVelocity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_NormalModeSpeed_ImplicitCast) == 0x000268, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_NormalModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_NearModeSpeed_ImplicitCast) == 0x000270, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_NearModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x000278, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_NearWalkModeSpeed_ImplicitCast) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_NearWalkModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_NormalWalkModeSpeed_ImplicitCast) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_NormalWalkModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast) == 0x000290, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadIdleMoveParam, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x000298, "Member 'BP_CharacterLocomotionComponent_C_LoadIdleMoveParam::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadShortDashParameter
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_LoadShortDashParameter final
{
public:
	struct FKoratCharacterDataShortDashParameter  CallFunc_GetShortDashParameter_OutShortDash;       // 0x0000(0x0030)(NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_LoadShortDashParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_LoadShortDashParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_LoadShortDashParameter) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_LoadShortDashParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadShortDashParameter, CallFunc_GetShortDashParameter_OutShortDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_LoadShortDashParameter::CallFunc_GetShortDashParameter_OutShortDash' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadZBurstDashParameter
// 0x0068 (0x0068 - 0x0000)
struct BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter final
{
public:
	struct FKoratCharacterDataZBurstDashParameter CallFunc_GetZBurstDashParameter_OutZBurstDashParameter; // 0x0000(0x0068)(NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter) == 0x000068, "Wrong size on BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter, CallFunc_GetZBurstDashParameter_OutZBurstDashParameter) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_LoadZBurstDashParameter::CallFunc_GetZBurstDashParameter_OutZBurstDashParameter' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.MoveInputXY
// 0x0060 (0x0060 - 0x0000)
struct BP_CharacterLocomotionComponent_C_MoveInputXY final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAddMovementInputVector_InputWorldDirection; // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAddMovementInputVector_ScaleValue;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_MoveInputXY) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_MoveInputXY");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_MoveInputXY) == 0x000060, "Wrong size on BP_CharacterLocomotionComponent_C_MoveInputXY");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_GetAddMovementInputVector_InputWorldDirection) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_GetAddMovementInputVector_InputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_GetAddMovementInputVector_ScaleValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_GetAddMovementInputVector_ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, K2Node_DynamicCast_AsBP_Character) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputXY, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_MoveInputXY::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.MoveInputZ
// 0x00A8 (0x00A8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_MoveInputZ final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPendingMovementInputVector_ReturnValue; // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Option_0_ImplicitCast;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_MoveInputZ) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_MoveInputZ");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_MoveInputZ) == 0x0000A8, "Wrong size on BP_CharacterLocomotionComponent_C_MoveInputZ");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, K2Node_DynamicCast_AsBP_Character) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_GetPendingMovementInputVector_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_GetPendingMovementInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BreakVector_X) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BreakVector_Y) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BreakVector_Z) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000049, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, Temp_real_Variable) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_GetOwner_ReturnValue_1) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, Temp_bool_Variable) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BreakRotator_Roll) == 0x000064, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BreakRotator_Pitch) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_BreakRotator_Yaw) == 0x00006C, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, K2Node_Select_Default) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_MakeRotator_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, K2Node_Select_Option_0_ImplicitCast) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_MoveInputZ, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_MoveInputZ::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.NotifyPlayMontageLength
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength final
{
public:
	double                                        MontageLength;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength, MontageLength) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength::MontageLength' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnAddWarpOffset
// 0x0048 (0x0048 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnAddWarpOffset final
{
public:
	struct FVector                                InWarpOffsetPos;                                   // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InWarpOffsetRot;                                   // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FVector                                InWarpOffsetRotCenterPos;                          // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnAddWarpOffset) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnAddWarpOffset");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnAddWarpOffset) == 0x000048, "Wrong size on BP_CharacterLocomotionComponent_C_OnAddWarpOffset");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnAddWarpOffset, InWarpOffsetPos) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnAddWarpOffset::InWarpOffsetPos' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnAddWarpOffset, InWarpOffsetRot) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_OnAddWarpOffset::InWarpOffsetRot' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnAddWarpOffset, InWarpOffsetRotCenterPos) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_OnAddWarpOffset::InWarpOffsetRotCenterPos' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnBlowAnimEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnBlowAnimEvent final
{
public:
	EKoratBlowState                               BlowState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimStateMachineEvent;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnBlowAnimEvent) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnBlowAnimEvent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnBlowAnimEvent) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_OnBlowAnimEvent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnBlowAnimEvent, BlowState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnBlowAnimEvent::BlowState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnBlowAnimEvent, AnimStateMachineEvent) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_OnBlowAnimEvent::AnimStateMachineEvent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnChangedCharacterNumeric
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric final
{
public:
	const class USSCharacterNumeric*              InParam;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric, InParam) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric::InParam' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnChangeDown
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnChangeDown final
{
public:
	bool                                          InFront;                                           // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDownToRevivalTime;                               // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnChangeDown) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnChangeDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnChangeDown) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_OnChangeDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnChangeDown, InFront) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnChangeDown::InFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnChangeDown, InDownToRevivalTime) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_OnChangeDown::InDownToRevivalTime' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnDragonDashAnimEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent final
{
public:
	EKoratDragonDashState                         DragonDashState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimStateMachineEvent;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent, DragonDashState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent::DragonDashState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent, AnimStateMachineEvent) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent::AnimStateMachineEvent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnDragonHomingAnimEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent final
{
public:
	EKoratDragonHomingState                       DragonHomingState;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimStateMachineEvent;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent, DragonHomingState) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent::DragonHomingState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent, AnimStateMachineEvent) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent::AnimStateMachineEvent' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnHit
// 0x0150 (0x0150 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0068(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnHit) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnHit");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnHit) == 0x000150, "Wrong size on BP_CharacterLocomotionComponent_C_OnHit");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, MyComp) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnHit::MyComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, Other) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_OnHit::Other' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, OtherComp) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, bSelfMoved) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_OnHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, HitLocation) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_OnHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, HitNormal) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_OnHit::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, NormalImpulse) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnHit, Hit) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_OnHit::Hit' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnLanded
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnLanded) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnLanded");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnLanded) == 0x0000E8, "Wrong size on BP_CharacterLocomotionComponent_C_OnLanded");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnLanded, Hit) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnLanded::Hit' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnRequestBlowReaction
// 0x000C (0x000C - 0x0000)
struct BP_CharacterLocomotionComponent_C_OnRequestBlowReaction final
{
public:
	struct FKoratActionDataList                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          InFrontHit;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_OnRequestBlowReaction) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_OnRequestBlowReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_OnRequestBlowReaction) == 0x00000C, "Wrong size on BP_CharacterLocomotionComponent_C_OnRequestBlowReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnRequestBlowReaction, InAction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_OnRequestBlowReaction::InAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_OnRequestBlowReaction, InFrontHit) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_OnRequestBlowReaction::InFrontHit' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.PlayKnockBack
// 0x02E0 (0x02E0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_PlayKnockBack final
{
public:
	struct FKoratHitBackMovementData              InHitBackData;                                     // 0x0000(0x02E0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_PlayKnockBack) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_PlayKnockBack");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_PlayKnockBack) == 0x0002E0, "Wrong size on BP_CharacterLocomotionComponent_C_PlayKnockBack");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_PlayKnockBack, InHitBackData) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_PlayKnockBack::InHitBackData' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_ReceiveTick");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_ReceiveTick");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReconfirmLockOnMode
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode final
{
public:
	class APawn*                                  CallFunc_GetTargetPawn_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode, CallFunc_GetTargetPawn_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode::CallFunc_GetTargetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ReconfirmLockOnMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReloadDragonDashParam
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ReloadDragonDashParam final
{
public:
	bool                                          CallFunc_GetDragonDashStateMovementParameter_IsUseParameter; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter CallFunc_GetDragonDashStateMovementParameter_MovementParameter; // 0x0008(0x0020)(NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ReloadDragonDashParam) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ReloadDragonDashParam");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ReloadDragonDashParam) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_ReloadDragonDashParam");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReloadDragonDashParam, CallFunc_GetDragonDashStateMovementParameter_IsUseParameter) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ReloadDragonDashParam::CallFunc_GetDragonDashStateMovementParameter_IsUseParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReloadDragonDashParam, CallFunc_GetDragonDashStateMovementParameter_MovementParameter) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ReloadDragonDashParam::CallFunc_GetDragonDashStateMovementParameter_MovementParameter' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReloadIdleMoveParam
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam final
{
public:
	float                                         K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_JumpZVelocity_ImplicitCast;     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam, K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam::K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam, K2Node_VariableSet_JumpZVelocity_ImplicitCast) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam::K2Node_VariableSet_JumpZVelocity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_ReloadIdleMoveParam::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.RequestResetStateMachine
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_RequestResetStateMachine final
{
public:
	EKoratLocomotionState                         InStatus;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_RequestResetStateMachine) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_RequestResetStateMachine");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_RequestResetStateMachine) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_RequestResetStateMachine");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RequestResetStateMachine, InStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_RequestResetStateMachine::InStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetIdleMoveMoveZ
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ final
{
public:
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubIdleMove_C*   K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ, Temp_byte_Variable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveMoveZ::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetIdleMoveTimer
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer final
{
public:
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubIdleMove_C*   K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer, Temp_byte_Variable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Idle_Move' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_ResetIdleMoveTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.RotateDash
// 0x00A0 (0x00A0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_RotateDash final
{
public:
	bool                                          InIsIgnoreRoll;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsIgnorePitch;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsIgnoreYaw;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_2;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_2;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLocomotionRotation_IsSuccessfully;     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Option_0_ImplicitCast;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast_1;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast_2;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_RotateDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_RotateDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_RotateDash) == 0x0000A0, "Wrong size on BP_CharacterLocomotionComponent_C_RotateDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, InIsIgnoreRoll) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::InIsIgnoreRoll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, InIsIgnorePitch) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::InIsIgnorePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, InIsIgnoreYaw) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::InIsIgnoreYaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, Temp_bool_Variable) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, Temp_real_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, Temp_bool_Variable_1) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, Temp_real_Variable_1) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, Temp_bool_Variable_2) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, Temp_real_Variable_2) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, K2Node_Select_Default) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, K2Node_Select_Default_1) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, K2Node_Select_Default_2) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_SetLocomotionRotation_IsSuccessfully) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_SetLocomotionRotation_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, K2Node_Select_Option_0_ImplicitCast) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, K2Node_Select_Option_0_ImplicitCast_1) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::K2Node_Select_Option_0_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, K2Node_Select_Option_0_ImplicitCast_2) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::K2Node_Select_Option_0_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000094, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDash, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_RotateDash::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.RotateDragonDashInputZ
// 0x0148 (0x0148 - 0x0000)
struct BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ final
{
public:
	struct FVector                                InDragonDashMoveInputValue;                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InDeltaSeconds;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchSpeed;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParamPitchMax;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParamPitchMin;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParamPitchSpeed;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Pitch_ImplicitCast;             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_ParamPitchMin_ImplicitCast;     // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_ParamPitchMax_ImplicitCast;     // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_ParamPitchSpeed_ImplicitCast;   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ) == 0x000148, "Wrong size on BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, InDragonDashMoveInputValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::InDragonDashMoveInputValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, InDeltaSeconds) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, DeltaSeconds) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, PitchSpeed) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::PitchSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, Delta) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::Delta' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, ParamPitchMax) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::ParamPitchMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, ParamPitchMin) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::ParamPitchMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, ParamPitchSpeed) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::ParamPitchSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, InputZ) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::InputZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, Pitch) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakVector_X) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakVector_Y) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakVector_Z) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0000D9, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Roll) == 0x0000DC, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Pitch) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Yaw) == 0x0000E4, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Roll_1) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Pitch_1) == 0x0000F4, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Yaw_1) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_MakeRotator_ReturnValue) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Roll_2) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Pitch_2) == 0x00011C, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_BreakRotator_Yaw_2) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000124, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, K2Node_VariableSet_Pitch_ImplicitCast) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::K2Node_VariableSet_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, K2Node_VariableSet_ParamPitchMin_ImplicitCast) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::K2Node_VariableSet_ParamPitchMin_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, K2Node_VariableSet_ParamPitchMax_ImplicitCast) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::K2Node_VariableSet_ParamPitchMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ, K2Node_VariableSet_ParamPitchSpeed_ImplicitCast) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ::K2Node_VariableSet_ParamPitchSpeed_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Set Locomotion Rotation XYZ
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ final
{
public:
	struct FRotator                               InNewRotation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InTeleportPhysics;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionAxisRotationParameter      InRotationParameterXRoll;                          // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InRotationParameterYPitch;                         // 0x002C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionAxisRotationParameter      InRotationParameterZYaw;                           // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsInterpConstant;                                // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsCheckTurn;                                     // 0x004D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x004E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBodyPitchEnabled_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNeedTurn_IsNeedTurn;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMovementParameterWalkFlying_ReturnValue; // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterStrutJumpState                      CallFunc_GetStrutJumpStatus_JumpStatus;            // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Calculate_Locomotion_Rotation_OutNewRotation; // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Calculate_Locomotion_Rotation_OutNewRotation_1; // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ) == 0x0000E8, "Wrong size on BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InNewRotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InTeleportPhysics) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InRotationParameterXRoll) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InRotationParameterXRoll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InRotationParameterYPitch) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InRotationParameterYPitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InRotationParameterZYaw) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InRotationParameterZYaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InIsInterpConstant) == 0x00004C, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InIsInterpConstant' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, InIsCheckTurn) == 0x00004D, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::InIsCheckTurn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, IsSuccessfully) == 0x00004E, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, Rotation) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_GetOwner_ReturnValue) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_GetBodyPitchEnabled_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_GetBodyPitchEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000071, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, K2Node_DynamicCast_AsBP_Character) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_IsNeedTurn_IsNeedTurn) == 0x000081, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_IsNeedTurn_IsNeedTurn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_GetMovementParameterWalkFlying_ReturnValue) == 0x000082, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_GetMovementParameterWalkFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanAND_ReturnValue) == 0x000083, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_Not_PreBool_ReturnValue) == 0x000084, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_GetStrutJumpStatus_JumpStatus) == 0x000085, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_GetStrutJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000086, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000087, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanOR_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000089, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanAND_ReturnValue_1) == 0x00008A, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanAND_ReturnValue_2) == 0x00008B, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanAND_ReturnValue_3) == 0x00008C, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanAND_ReturnValue_4) == 0x00008D, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BooleanAND_ReturnValue_5) == 0x00008E, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00009C, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_Calculate_Locomotion_Rotation_OutNewRotation) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_Calculate_Locomotion_Rotation_OutNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ, CallFunc_Calculate_Locomotion_Rotation_OutNewRotation_1) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ::CallFunc_Calculate_Locomotion_Rotation_OutNewRotation_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetAnimationParameter
// 0x0318 (0x0318 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetAnimationParameter final
{
public:
	bool                                          UpdateOnlyRelatedToRotation;                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HitAngle;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitAirWallVelocity;                                // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKoratActionDataList>           _______;                                           // 0x0028(0x0010)(Edit, BlueprintVisible)
	double                                        LNormalGroundSpeed;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LNearGroundSpeed;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLastInputVector_ReturnValue;           // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSizeXY_ReturnValue_1;                    // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_UpdateCurrentRunningAction_OutRunningAction; // 0x0128(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_UpdateCurrentRunningAction_OutRunningSection; // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGroundMoveOnCharacter_ReturnValue;      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGroundMoveOnCharacter_ReturnValue_1;    // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculateAnimationDirectionLocomotionSub_DirectionY; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateAnimationDirectionLocomotionSub_DirectionZ; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTargetDistance_Length;                 // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationInternal_Rotation;             // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCanFly_ReturnValue;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetHitAirWallNormal_ReturnValue;          // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue_2;                    // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue_1;              // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_1;      // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize2DSquared_ReturnValue;               // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_2;      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_Velocity;                     // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsInAir_IsInAir;                       // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAutoLandingNoMotionHeight_ReturnValue; // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMovementFloorDistance_OutFloorDistance; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMovementFloorDistance_ReturnValue;     // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsEnableMoveEffect_IsEnable;           // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0286(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0287(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_Vector2DToVector_Z_ImplicitCast;     // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetAnimationParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetAnimationParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetAnimationParameter) == 0x000318, "Wrong size on BP_CharacterLocomotionComponent_C_SetAnimationParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, UpdateOnlyRelatedToRotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::UpdateOnlyRelatedToRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, HitAngle) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::HitAngle' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, HitAirWallVelocity) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::HitAirWallVelocity' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, _______) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::_______' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, LNormalGroundSpeed) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::LNormalGroundSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, LNearGroundSpeed) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::LNearGroundSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetMovementComponent_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetLastInputVector_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetLastInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_X) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Y) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Z) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Normal_ReturnValue) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_X_1) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Y_1) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Z_1) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_MakeVector_ReturnValue_1) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_VSize_ReturnValue) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_VSizeXY_ReturnValue) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, K2Node_MakeArray_Array) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_VSizeXY_ReturnValue_1) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_VSizeXY_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_UpdateCurrentRunningAction_OutRunningAction) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_UpdateCurrentRunningAction_OutRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_UpdateCurrentRunningAction_OutRunningSection) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_UpdateCurrentRunningAction_OutRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_X_2) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Y_2) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Z_2) == 0x000148, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000150, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_IsGroundMoveOnCharacter_ReturnValue) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_IsGroundMoveOnCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_IsGroundMoveOnCharacter_ReturnValue_1) == 0x000159, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_IsGroundMoveOnCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_CalculateAnimationDirectionLocomotionSub_DirectionY) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_CalculateAnimationDirectionLocomotionSub_DirectionY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_CalculateAnimationDirectionLocomotionSub_DirectionZ) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_CalculateAnimationDirectionLocomotionSub_DirectionZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_X_3) == 0x000170, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Y_3) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BreakVector_Z_3) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetTargetDistance_Length) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetTargetDistance_Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetRotationInternal_Rotation) == 0x000190, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetRotationInternal_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x0001A8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_IsCanFly_ReturnValue) == 0x0001C0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_IsCanFly_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Vector_IsZero_ReturnValue) == 0x0001C1, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Not_PreBool_ReturnValue) == 0x0001C2, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001C3, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetHitAirWallNormal_ReturnValue) == 0x0001C8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetHitAirWallNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_VSizeXY_ReturnValue_2) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_VSizeXY_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Vector_IsZero_ReturnValue_1) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Vector_IsZero_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0001E9, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BooleanOR_ReturnValue) == 0x0001EA, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x0001EB, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_NotEqual_DoubleDouble_ReturnValue_1) == 0x0001EC, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_NotEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_VSize2DSquared_ReturnValue) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_VSize2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_NotEqual_DoubleDouble_ReturnValue_2) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_NotEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_SelectFloat_ReturnValue) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_SelectFloat_ReturnValue_1) == 0x000208, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_SelectFloat_ReturnValue_2) == 0x000210, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_SelectFloat_ReturnValue_3) == 0x000230, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000238, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Dot_VectorVector_ReturnValue) == 0x000250, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetVelocity_Velocity) == 0x000258, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetVelocity_Velocity' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_DegAcos_ReturnValue) == 0x000270, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetIsInAir_IsInAir) == 0x000278, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetIsInAir_IsInAir' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetAutoLandingNoMotionHeight_ReturnValue) == 0x00027C, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetAutoLandingNoMotionHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetMovementFloorDistance_OutFloorDistance) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetMovementFloorDistance_OutFloorDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetMovementFloorDistance_ReturnValue) == 0x000284, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetMovementFloorDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_GetIsEnableMoveEffect_IsEnable) == 0x000285, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_GetIsEnableMoveEffect_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000286, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000287, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BooleanAND_ReturnValue) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_BooleanAND_ReturnValue_1) == 0x000289, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000290, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Not_PreBool_ReturnValue_2) == 0x0002A8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0002B0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0002B8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0002C0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0002C8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_MakeRotFromX_ReturnValue) == 0x0002D0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_VSize_ReturnValue_1) == 0x0002E8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0002F0, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Conv_Vector2DToVector_Z_ImplicitCast) == 0x0002F8, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Conv_Vector2DToVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x000300, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000308, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetAnimationParameter, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000310, "Member 'BP_CharacterLocomotionComponent_C_SetAnimationParameter::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlastSkill1DashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus final
{
public:
	EKoratDragonHomingState                       InBlastDashStatus;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill1Dash_SubBlastDash;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus, InBlastDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus::InBlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus, CallFunc_GetSubBlastSkill1Dash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus::CallFunc_GetSubBlastSkill1Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlastSkill2DashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus final
{
public:
	EKoratDragonHomingState                       InBlastDashStatus;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill2Dash_SubBlastDash;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus, InBlastDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus::InBlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus, CallFunc_GetSubBlastSkill2Dash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus::CallFunc_GetSubBlastSkill2Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlastUltimateDashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus final
{
public:
	EKoratDragonHomingState                       InBlastDashStatus;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastUltimateDash_SubBlastDash;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus, InBlastDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus::InBlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus, CallFunc_GetSubBlastUltimateDash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus::CallFunc_GetSubBlastUltimateDash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlowInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetBlowInfo final
{
public:
	EKoratBlowState                               InBlowStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetBlowInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetBlowInfo");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetBlowInfo) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetBlowInfo");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlowInfo, InBlowStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetBlowInfo::InBlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlowInfo, CallFunc_GetSubBlow_SubBlow) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetBlowInfo::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlowInfo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetBlowInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlowIsFrontState
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetBlowIsFrontState final
{
public:
	bool                                          InBlowIsFront;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetBlowIsFrontState) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetBlowIsFrontState");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetBlowIsFrontState) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_SetBlowIsFrontState");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetBlowIsFrontState, InBlowIsFront) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetBlowIsFrontState::InBlowIsFront' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCharacterMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetCharacterMovementMode final
{
public:
	EMovementMode                                 InMovementMode;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetCharacterMovementMode) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetCharacterMovementMode");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetCharacterMovementMode) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_SetCharacterMovementMode");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCharacterMovementMode, InMovementMode) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetCharacterMovementMode::InMovementMode' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCharacterRotation
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetCharacterRotation final
{
public:
	struct FRotator                               InNewRotation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InTeleportPhysics;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetCharacterRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetCharacterRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetCharacterRotation) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_SetCharacterRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCharacterRotation, InNewRotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetCharacterRotation::InNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCharacterRotation, InTeleportPhysics) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetCharacterRotation::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCharacterRotation, IsSuccessfully) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_SetCharacterRotation::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCurrentAnimTimeRemainingFraction
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction final
{
public:
	class FName                                   InCurrentStateName;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InFraction;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction, InCurrentStateName) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction::InCurrentStateName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction, InFraction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction::InFraction' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCurrentStatus_
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetCurrentStatus_ final
{
public:
	EKoratLocomotionState                         InCurrentStatus;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleElapsedTime;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleGameStateBase_C*              K2Node_DynamicCast_AsBP_Battle_Game_State_Base;    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBattleElapsedTime_ReturnValue;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_SetCurrentStatusTime_ImplicitCast; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetCurrentStatus_");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_SetCurrentStatus_");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, InCurrentStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::InCurrentStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, BattleElapsedTime) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::BattleElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, Temp_real_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_BooleanAND_ReturnValue_1) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, K2Node_DynamicCast_AsBP_Battle_Game_State_Base) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::K2Node_DynamicCast_AsBP_Battle_Game_State_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_GetBattleElapsedTime_ReturnValue) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_GetBattleElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetCurrentStatus_, K2Node_VariableSet_SetCurrentStatusTime_ImplicitCast) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_SetCurrentStatus_::K2Node_VariableSet_SetCurrentStatusTime_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDashUkemiStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetDashUkemiStatus final
{
public:
	EKoratDashUkemiState                          InDashUkemiStatus;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetDashUkemiStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetDashUkemiStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetDashUkemiStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetDashUkemiStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDashUkemiStatus, InDashUkemiStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetDashUkemiStatus::InDashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDashUkemiStatus, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetDashUkemiStatus::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDashUkemiStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetDashUkemiStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDashUpDownStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetDashUpDownStatus final
{
public:
	EKoratDashUpDownState                         InDashUpDownStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetDashUpDownStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetDashUpDownStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetDashUpDownStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetDashUpDownStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDashUpDownStatus, InDashUpDownStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetDashUpDownStatus::InDashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDashUpDownStatus, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetDashUpDownStatus::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDashUpDownStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetDashUpDownStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonDashMaxSpeed
// 0x0078 (0x0078 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed final
{
public:
	TArray<EKoratDragonDashState>                 StatusList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<EKoratDragonDashState>                 K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         CallFunc_Array_Get_Item;                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDragonDashStateMovementParameter_IsUseParameter; // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter CallFunc_GetDragonDashStateMovementParameter_MovementParameter; // 0x0038(0x0020)(NoDestructor)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_B_ImplicitCast;                      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_A_ImplicitCast;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxSpeedCpp_ImplicitCast;       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed) == 0x000078, "Wrong size on BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, StatusList) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::StatusList' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_GetDragonDashStateMovementParameter_IsUseParameter) == 0x000032, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_GetDragonDashStateMovementParameter_IsUseParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_GetDragonDashStateMovementParameter_MovementParameter) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_GetDragonDashStateMovementParameter_MovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_FMax_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_FMax_B_ImplicitCast) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_FMax_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, CallFunc_FMax_A_ImplicitCast) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::CallFunc_FMax_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed, K2Node_VariableSet_MaxSpeedCpp_ImplicitCast) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashMaxSpeed::K2Node_VariableSet_MaxSpeedCpp_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonDashParameter
// 0x0070 (0x0070 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetDragonDashParameter final
{
public:
	struct FVector                                InInputVector;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsKeepOldDashRotation;                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           MoveDirection;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Type;                                              // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               Status;                                            // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDragonDashZMoveOnInputFront_OutIsZMove; // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDashVectorAndRotation_OutVector;       // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetDashVectorAndRotation_OutRotation;     // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetDragonDashParameter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter) == 0x000070, "Wrong size on BP_CharacterLocomotionComponent_C_SetDragonDashParameter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, InInputVector) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::InInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, InIsKeepOldDashRotation) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::InIsKeepOldDashRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, MoveDirection) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::MoveDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, Type) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::Type' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, Status) == 0x00001B, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::Status' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, CallFunc_MakeLiteralByte_ReturnValue) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, CallFunc_IsDragonDashZMoveOnInputFront_OutIsZMove) == 0x00003A, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::CallFunc_IsDragonDashZMoveOnInputFront_OutIsZMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, CallFunc_GetDashVectorAndRotation_OutVector) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::CallFunc_GetDashVectorAndRotation_OutVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashParameter, CallFunc_GetDashVectorAndRotation_OutRotation) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashParameter::CallFunc_GetDashVectorAndRotation_OutRotation' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonDashRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetDragonDashRotation final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetDragonDashRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetDragonDashRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetDragonDashRotation) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetDragonDashRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonDashRotation, InRotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetDragonDashRotation::InRotation' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonHomingStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetDragonHomingStatus final
{
public:
	EKoratDragonHomingState                       InDragonHomingStatus;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetDragonHomingStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetDragonHomingStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetDragonHomingStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetDragonHomingStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonHomingStatus, InDragonHomingStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetDragonHomingStatus::InDragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonHomingStatus, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetDragonHomingStatus::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetDragonHomingStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetDragonHomingStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetEnableMovementInput
// 0x0003 (0x0003 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetEnableMovementInput final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeJumpToFly_0;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             ActionFinishReason;                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetEnableMovementInput) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetEnableMovementInput");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetEnableMovementInput) == 0x000003, "Wrong size on BP_CharacterLocomotionComponent_C_SetEnableMovementInput");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableMovementInput, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetEnableMovementInput::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableMovementInput, ChangeJumpToFly_0) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_SetEnableMovementInput::ChangeJumpToFly_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableMovementInput, ActionFinishReason) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_SetEnableMovementInput::ActionFinishReason' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetEnableTilt
// 0x0078 (0x0078 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetEnableTilt final
{
public:
	bool                                          InIsEnable;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutIsEnable;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUseCharacterRotationPitch_UsePitch;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_4;                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUseCharacterRotationPitch_UsePitch_1;  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_5;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_6;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_7;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetEnableTilt) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetEnableTilt");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetEnableTilt) == 0x000078, "Wrong size on BP_CharacterLocomotionComponent_C_SetEnableTilt");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, InIsEnable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::InIsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, OutIsEnable) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::OutIsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_1) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_2) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_SetUseCharacterRotationPitch_UsePitch) == 0x000031, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_SetUseCharacterRotationPitch_UsePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_3) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_4) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_SetUseCharacterRotationPitch_UsePitch_1) == 0x000059, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_SetUseCharacterRotationPitch_UsePitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_5) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_6) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetEnableTilt, CallFunc_GetOwner_ReturnValue_7) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_SetEnableTilt::CallFunc_GetOwner_ReturnValue_7' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetHeightAxisValue
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetHeightAxisValue final
{
public:
	double                                        HeightAxisValue_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetHeightAxisValue) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetHeightAxisValue");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetHeightAxisValue) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_SetHeightAxisValue");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetHeightAxisValue, HeightAxisValue_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetHeightAxisValue::HeightAxisValue_0' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetInputVector
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetInputVector final
{
public:
	struct FVector2D                              InputVector_0;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetInputVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetInputVector");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetInputVector) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_SetInputVector");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetInputVector, InputVector_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetInputVector::InputVector_0' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetIsRotateAutoIdle
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle final
{
public:
	bool                                          InIsRotateLanded;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle, InIsRotateLanded) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle::InIsRotateLanded' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetIsRotateLanded
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetIsRotateLanded final
{
public:
	bool                                          InIsRotateLanded;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetIsRotateLanded) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetIsRotateLanded");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetIsRotateLanded) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_SetIsRotateLanded");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetIsRotateLanded, InIsRotateLanded) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetIsRotateLanded::InIsRotateLanded' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetJumpStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetJumpStatus final
{
public:
	EKoratJumpState                               InJumpStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetJumpStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetJumpStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetJumpStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetJumpStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetJumpStatus, InJumpStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetJumpStatus::InJumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetJumpStatus, CallFunc_GetSubJump_SubJump) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetJumpStatus::CallFunc_GetSubJump_SubJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetJumpStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetJumpStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLockOnCharacter
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetLockOnCharacter final
{
public:
	bool                                          bLockon;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetLockOnCharacter) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetLockOnCharacter");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetLockOnCharacter) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_SetLockOnCharacter");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnCharacter, bLockon) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnCharacter::bLockon' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLockOnMode
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetLockOnMode final
{
public:
	bool                                          InIsLockOn;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetTargetPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDebugNoLockOnCharacter_ReturnValue;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetLockOnMode) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetLockOnMode");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetLockOnMode) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetLockOnMode");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnMode, InIsLockOn) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnMode::InIsLockOn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnMode, CallFunc_GetTargetPawn_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnMode::CallFunc_GetTargetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnMode, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnMode, CallFunc_GetDebugNoLockOnCharacter_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnMode::CallFunc_GetDebugNoLockOnCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnMode, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLockOnMode, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000013, "Member 'BP_CharacterLocomotionComponent_C_SetLockOnMode::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLocomotionCurrentStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus final
{
public:
	EKoratLocomotionState                         InCurrentStatus;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus, InCurrentStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus::InCurrentStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLocomotionRotation
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetLocomotionRotation final
{
public:
	struct FRotator                               InNewRotation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InTeleportPhysics;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionRotationParameter          InRotationParameter;                               // 0x001C(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Locomotion_Rotation_XYZ_IsSuccessfully; // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetLocomotionRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_SetLocomotionRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation, InNewRotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionRotation::InNewRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation, InTeleportPhysics) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionRotation::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation, InRotationParameter) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionRotation::InRotationParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation, IsSuccessfully) == 0x00004C, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionRotation::IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetLocomotionRotation, CallFunc_Set_Locomotion_Rotation_XYZ_IsSuccessfully) == 0x00004D, "Member 'BP_CharacterLocomotionComponent_C_SetLocomotionRotation::CallFunc_Set_Locomotion_Rotation_XYZ_IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetMovingRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetMovingRotation final
{
public:
	struct FRotator                               MovingRotation_0;                                  // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetMovingRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetMovingRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetMovingRotation) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetMovingRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetMovingRotation, MovingRotation_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetMovingRotation::MovingRotation_0' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetNumbReactionStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetNumbReactionStatus final
{
public:
	ECharacterNumbReactionState                   InNumbReactionStatus;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetNumbReactionStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetNumbReactionStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetNumbReactionStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetNumbReactionStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetNumbReactionStatus, InNumbReactionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetNumbReactionStatus::InNumbReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetNumbReactionStatus, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetNumbReactionStatus::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetNumbReactionStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetNumbReactionStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetRevengeDashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetRevengeDashStatus final
{
public:
	EKoratDragonHomingState                       InRevengeDashStatus;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubRevengeDash_C* CallFunc_GetSubRevengeDash_SubRevengeDash;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetRevengeDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetRevengeDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetRevengeDashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetRevengeDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetRevengeDashStatus, InRevengeDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetRevengeDashStatus::InRevengeDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetRevengeDashStatus, CallFunc_GetSubRevengeDash_SubRevengeDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetRevengeDashStatus::CallFunc_GetSubRevengeDash_SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetRevengeDashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetRevengeDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetShortDashStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetShortDashStatus final
{
public:
	EKoratShortDashState                          InShortDashStatus;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetShortDashStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetShortDashStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetShortDashStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetShortDashStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetShortDashStatus, InShortDashStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetShortDashStatus::InShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetShortDashStatus, CallFunc_GetSubShortDash_SubShortDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetShortDashStatus::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetShortDashStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetShortDashStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetStepStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetStepStatus final
{
public:
	EKoratStepState                               InStepStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStep_C*       CallFunc_GetSubStep_SubStep;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetStepStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetStepStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetStepStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetStepStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStepStatus, InStepStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetStepStatus::InStepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStepStatus, CallFunc_GetSubStep_SubStep) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetStepStatus::CallFunc_GetSubStep_SubStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStepStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetStepStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetStrutJumpStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetStrutJumpStatus final
{
public:
	ECharacterStrutJumpState                      InJumpStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubIdleMove_C*   CallFunc_GetSubIdleMove_SubIdleMove;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetStrutJumpStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetStrutJumpStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetStrutJumpStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetStrutJumpStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStrutJumpStatus, InJumpStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetStrutJumpStatus::InJumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStrutJumpStatus, CallFunc_GetSubIdleMove_SubIdleMove) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetStrutJumpStatus::CallFunc_GetSubIdleMove_SubIdleMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStrutJumpStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetStrutJumpStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetStunReactionStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetStunReactionStatus final
{
public:
	EKoratStunReactionState                       InStunReactionStatus;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetStunReactionStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetStunReactionStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetStunReactionStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetStunReactionStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStunReactionStatus, InStunReactionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetStunReactionStatus::InStunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStunReactionStatus, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetStunReactionStatus::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetStunReactionStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetStunReactionStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupDragonDashStart
// 0x0078 (0x0078 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetupDragonDashStart final
{
public:
	struct FVector                                InputPin;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsKeepOldDashRotation;                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsEnablePitch;                                   // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUseCharacterRotationPitchDetail_UsePitchLimit; // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUseCharacterRotationPitchDetail_UsePitchInterp; // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_4;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUseCharacterRotationPitch_UsePitch;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetupDragonDashStart");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart) == 0x000078, "Wrong size on BP_CharacterLocomotionComponent_C_SetupDragonDashStart");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, InputPin) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::InputPin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, InIsKeepOldDashRotation) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::InIsKeepOldDashRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, InIsEnablePitch) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::InIsEnablePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_GetOwner_ReturnValue_1) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_SetUseCharacterRotationPitchDetail_UsePitchLimit) == 0x000041, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_SetUseCharacterRotationPitchDetail_UsePitchLimit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_SetUseCharacterRotationPitchDetail_UsePitchInterp) == 0x000042, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_SetUseCharacterRotationPitchDetail_UsePitchInterp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_GetOwner_ReturnValue_2) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_GetOwner_ReturnValue_3) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_GetOwner_ReturnValue_4) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_GetOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupDragonDashStart, CallFunc_SetUseCharacterRotationPitch_UsePitch) == 0x000071, "Member 'BP_CharacterLocomotionComponent_C_SetupDragonDashStart::CallFunc_SetUseCharacterRotationPitch_UsePitch' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupMovementCharacterIdleMove
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove final
{
public:
	bool                                          CallFunc_SetEnableTilt_OutIsEnable;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_JumpMaxHoldTime_ImplicitCast;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove) == 0x000008, "Wrong size on BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove, CallFunc_SetEnableTilt_OutIsEnable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove::CallFunc_SetEnableTilt_OutIsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove, K2Node_VariableSet_JumpMaxHoldTime_ImplicitCast) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementCharacterIdleMove::K2Node_VariableSet_JumpMaxHoldTime_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupMovementComponentIdleMove
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove final
{
public:
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_VariableSet_GroundFriction_ImplicitCast;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWalkableFloorAngle_InWalkableFloorAngle_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AirControlBoostVelocityThreshold_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AirControlBoostMultiplier_ImplicitCast; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AirControl_ImplicitCast;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_JumpZVelocity_ImplicitCast;     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_GravityScale_ImplicitCast;      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove) == 0x000050, "Wrong size on BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, CallFunc_BreakRotator_Roll) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, CallFunc_BreakRotator_Pitch) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, CallFunc_BreakRotator_Yaw) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_GroundFriction_ImplicitCast) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_GroundFriction_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, CallFunc_SetWalkableFloorAngle_InWalkableFloorAngle_ImplicitCast) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::CallFunc_SetWalkableFloorAngle_InWalkableFloorAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_AirControlBoostVelocityThreshold_ImplicitCast) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_AirControlBoostVelocityThreshold_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_AirControlBoostMultiplier_ImplicitCast) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_AirControlBoostMultiplier_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_AirControl_ImplicitCast) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_AirControl_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_JumpZVelocity_ImplicitCast) == 0x000044, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_JumpZVelocity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove, K2Node_VariableSet_GravityScale_ImplicitCast) == 0x00004C, "Member 'BP_CharacterLocomotionComponent_C_SetupMovementComponentIdleMove::K2Node_VariableSet_GravityScale_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupReferenceVariable
// 0x0108 (0x0108 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetupReferenceVariable final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill2Dash_SubBlastDash;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_GetLocomotionSplineComponent_ActorComponent; // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_GetMontageComponent_ActorComponent;       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterSplineComponent_C*         K2Node_DynamicCast_AsBP_Character_Spline_Component; // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterMontageComponent_C*        K2Node_DynamicCast_AsBP_Character_Montage_Component; // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastUltimateDash_SubBlastDash;     // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionSubClass                   CallFunc_Array_Get_Item;                           // 0x00D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_SpawnObject_ReturnValue;                  // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill1Dash_SubBlastDash;       // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetupReferenceVariable");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable) == 0x000108, "Wrong size on BP_CharacterLocomotionComponent_C_SetupReferenceVariable");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetSubBlastSkill2Dash_SubBlastDash) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetSubBlastSkill2Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_AsSSCharacter) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetOwner_ReturnValue_1) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetOwner_ReturnValue_2) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetLocomotionSplineComponent_ActorComponent) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetLocomotionSplineComponent_ActorComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetMontageComponent_ActorComponent) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetMontageComponent_ActorComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_AsBP_Character_Spline_Component) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_AsBP_Character_Spline_Component' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_AsBP_Character_Montage_Component) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_AsBP_Character_Montage_Component' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_bSuccess_4) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetOwner_ReturnValue_3) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_AsCharacter) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, K2Node_DynamicCast_bSuccess_5) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_IsValid_ReturnValue_1) == 0x0000B1, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetSubBlastUltimateDash_SubBlastDash) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetSubBlastUltimateDash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_IsValid_ReturnValue_2) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_Map_Length_ReturnValue) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_SpawnObject_ReturnValue) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_IsValid_ReturnValue_3) == 0x0000F5, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_IsValid_ReturnValue_4) == 0x0000F6, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_GetSubBlastSkill1Dash_SubBlastDash) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_GetSubBlastSkill1Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupReferenceVariable, CallFunc_IsValid_ReturnValue_5) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_SetupReferenceVariable::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupRestartDragonDash
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetupRestartDragonDash final
{
public:
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Dash_Input_Vector_OutInputVector;     // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral;  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_Vector2DToVector_Z_ImplicitCast;     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetupRestartDragonDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetupRestartDragonDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetupRestartDragonDash) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_SetupRestartDragonDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupRestartDragonDash, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetupRestartDragonDash::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupRestartDragonDash, CallFunc_Get_Dash_Input_Vector_OutInputVector) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_SetupRestartDragonDash::CallFunc_Get_Dash_Input_Vector_OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupRestartDragonDash, CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_SetupRestartDragonDash::CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetupRestartDragonDash, CallFunc_Conv_Vector2DToVector_Z_ImplicitCast) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_SetupRestartDragonDash::CallFunc_Conv_Vector2DToVector_Z_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetUseCharacterRotationPitch
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch final
{
public:
	bool                                          InUsePitch;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitch;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch) == 0x000002, "Wrong size on BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch, InUsePitch) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch::InUsePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch, UsePitch) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch::UsePitch' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetUseCharacterRotationPitchDetail
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail final
{
public:
	bool                                          InUsePitchLimit;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InUsePitchInterp;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitchLimit;                                     // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitchInterp;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail, InUsePitchLimit) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail::InUsePitchLimit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail, InUsePitchInterp) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail::InUsePitchInterp' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail, UsePitchLimit) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail::UsePitchLimit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail, UsePitchInterp) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail::UsePitchInterp' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetVirtualTarget
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetVirtualTarget final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InUseBattleTargetPawn;                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetVirtualTarget) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetVirtualTarget");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetVirtualTarget) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_SetVirtualTarget");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetVirtualTarget, InActor) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetVirtualTarget::InActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetVirtualTarget, InLocation) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetVirtualTarget::InLocation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetVirtualTarget, InUseBattleTargetPawn) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_SetVirtualTarget::InUseBattleTargetPawn' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetWallUkemiStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_SetWallUkemiStatus final
{
public:
	EKoratWallUkemiState                          InWallUkemiStatus;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubWallUkemi_C*  CallFunc_GetSubWallUkemi_SubWallUkemi;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_SetWallUkemiStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_SetWallUkemiStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_SetWallUkemiStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_SetWallUkemiStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetWallUkemiStatus, InWallUkemiStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_SetWallUkemiStatus::InWallUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetWallUkemiStatus, CallFunc_GetSubWallUkemi_SubWallUkemi) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_SetWallUkemiStatus::CallFunc_GetSubWallUkemi_SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_SetWallUkemiStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_SetWallUkemiStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartBlowDown
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StartBlowDown final
{
public:
	double                                        InDownToRevivalTime;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartBlowDown_NewParam;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StartBlowDown) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StartBlowDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StartBlowDown) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_StartBlowDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, InDownToRevivalTime) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::InDownToRevivalTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_MakeLiteralByte_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_GetSubBlow_SubBlow) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDown, CallFunc_StartBlowDown_NewParam) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDown::CallFunc_StartBlowDown_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartBlowDownRevival
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StartBlowDownRevival final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StartBlowDownRevival");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_StartBlowDownRevival");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_GetSubBlow_SubBlow) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartBlowDownRevival, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_StartBlowDownRevival::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartShortDash
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StartShortDash final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartShortDash;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeStep;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StartShortDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StartShortDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StartShortDash) == 0x000028, "Wrong size on BP_CharacterLocomotionComponent_C_StartShortDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, IsStartShortDash) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::IsStartShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, IsChangeStep) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::IsChangeStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_MakeLiteralByte_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_GetLocomotionSub_SubInstance) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StartShortDash, CallFunc_Start_NewParam) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_StartShortDash::CallFunc_Start_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StateDragonDash
// 0x0210 (0x0210 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StateDragonDash final
{
public:
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 EventType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Update_Sub_State_Timer_OutSubStateTimer;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSPCosumableDragonDashBK_IsAbleBK;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckShortDash_IsStartShortDash;          // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDashUpDown_ChangeDashUpDown;         // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         CallFunc_Update_Dragon_Dash_Move_NextDragonDashStatus; // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Update_Sub_State_Timer_OutSubStateTimer_1; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetUseRotationPitchInternal_UsePitch;     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AutoSetCharacterMovementModeToIdle_IsSet; // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_AutoSetCharacterMovementModeToIdle_SetMovementMode; // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AutoSetCharacterMovementModeToIdle_IsSet_1; // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_AutoSetCharacterMovementModeToIdle_SetMovementMode_1; // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSuperHighSpeedMove_IsStartSubState;  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSuperHighSpeedMoveStr_IsStartSubState; // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_actHSMS_actHSM_Off_Result;   // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_ReturnValue_1;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLocomotionRotation_IsSuccessfully;     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         Temp_byte_Variable;                                // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_ZBurst_Dash_ChangeZBurstDash;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDashUpDown_ChangeDashUpDown_1;       // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKoratBattleKeyDown_IsDown;         // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckShortDash_IsStartShortDash_1;        // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTurning_ReturnValue;                    // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         CallFunc_Update_Dragon_Dash_Move_NextDragonDashStatus_1; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_5;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Update_Sub_State_Timer_OutSubStateTimer_2; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_6;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_2;        // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_1;                  // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLocomotionRotation_IsSuccessfully_1;   // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegreesToRadians_ReturnValue_2;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_2;                  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLocomotionRotation_IsSuccessfully_2;   // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_7;                    // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B[0x5];                                      // 0x015B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegreesToRadians_ReturnValue_3;           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_3;                  // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLocomotionRotation_IsSuccessfully_3;   // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_3;        // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_8;                    // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_B_ImplicitCast;    // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_1_ImplicitCast;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast;          // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast;       // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast_1;       // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast_1;        // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast_1;     // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast; // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast_1; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_B_ImplicitCast_1;  // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast_2;       // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast_2;        // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast_2;     // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast_3;       // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast_3;        // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast_3;     // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StateDragonDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StateDragonDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StateDragonDash) == 0x000210, "Wrong size on BP_CharacterLocomotionComponent_C_StateDragonDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, InEventType) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, InDeltaSeconds) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, DeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, EventType) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::EventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Update_Sub_State_Timer_OutSubStateTimer) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Update_Sub_State_Timer_OutSubStateTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckSPCosumableDragonDashBK_IsAbleBK) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckSPCosumableDragonDashBK_IsAbleBK' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00002A, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00002B, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_BooleanAND_ReturnValue) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckShortDash_IsStartShortDash) == 0x00002D, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckShortDash_IsStartShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckDashUpDown_ChangeDashUpDown) == 0x00002E, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckDashUpDown_ChangeDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Update_Dragon_Dash_Move_NextDragonDashStatus) == 0x00002F, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Update_Dragon_Dash_Move_NextDragonDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Update_Sub_State_Timer_OutSubStateTimer_1) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Update_Sub_State_Timer_OutSubStateTimer_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GetUseRotationPitchInternal_UsePitch) == 0x000051, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GetUseRotationPitchInternal_UsePitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_1) == 0x000052, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_2) == 0x000053, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000054, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GetOwner_ReturnValue_1) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_AutoSetCharacterMovementModeToIdle_IsSet) == 0x000079, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_AutoSetCharacterMovementModeToIdle_IsSet' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_AutoSetCharacterMovementModeToIdle_SetMovementMode) == 0x00007A, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_AutoSetCharacterMovementModeToIdle_SetMovementMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_AutoSetCharacterMovementModeToIdle_IsSet_1) == 0x000091, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_AutoSetCharacterMovementModeToIdle_IsSet_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_AutoSetCharacterMovementModeToIdle_SetMovementMode_1) == 0x000092, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_AutoSetCharacterMovementModeToIdle_SetMovementMode_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_3) == 0x000093, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckSuperHighSpeedMove_IsStartSubState) == 0x000094, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckSuperHighSpeedMove_IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckSuperHighSpeedMoveStr_IsStartSubState) == 0x000095, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckSuperHighSpeedMoveStr_IsStartSubState' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_IsGiantChara_actHSMS_actHSM_Off_Result) == 0x000096, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_IsGiantChara_actHSMS_actHSM_Off_Result' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable) == 0x000097, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_ReturnValue_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_SetLocomotionRotation_IsSuccessfully) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_SetLocomotionRotation_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_1) == 0x0000B9, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_2) == 0x0000BA, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_3) == 0x0000BB, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_4) == 0x0000BC, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_5) == 0x0000BD, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x0000BE, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000BF, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C1, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_6) == 0x0000C2, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000C3, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000C4, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x0000C5, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x0000C6, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_byte_Variable) == 0x0000C7, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Check_ZBurst_Dash_ChangeZBurstDash) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Check_ZBurst_Dash_ChangeZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckDashUpDown_ChangeDashUpDown_1) == 0x0000C9, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckDashUpDown_ChangeDashUpDown_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_IsInputKoratBattleKeyDown_IsDown) == 0x0000CA, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_IsInputKoratBattleKeyDown_IsDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Not_PreBool_ReturnValue) == 0x0000CB, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_4) == 0x0000CC, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_CheckShortDash_IsStartShortDash_1) == 0x0000CD, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_CheckShortDash_IsStartShortDash_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000CE, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_IsTurning_ReturnValue) == 0x0000CF, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_IsTurning_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Update_Dragon_Dash_Move_NextDragonDashStatus_1) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Update_Dragon_Dash_Move_NextDragonDashStatus_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_5) == 0x0000D1, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_Update_Sub_State_Timer_OutSubStateTimer_2) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_Update_Sub_State_Timer_OutSubStateTimer_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_6) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x0000E1, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_NameName_ReturnValue_2) == 0x0000E2, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_real_Variable) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, Temp_bool_Variable_7) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_Select_Default) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_MakeRotator_ReturnValue) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_ReturnValue_1) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_SetLocomotionRotation_IsSuccessfully_1) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_SetLocomotionRotation_IsSuccessfully_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000131, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_ReturnValue_2) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_ReturnValue_2) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_SetLocomotionRotation_IsSuccessfully_2) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_SetLocomotionRotation_IsSuccessfully_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_7) == 0x000159, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00015A, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_ReturnValue_3) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_ReturnValue_3) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_SetLocomotionRotation_IsSuccessfully_3) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_SetLocomotionRotation_IsSuccessfully_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_Select_Default_1) == 0x000181, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_BooleanAND_ReturnValue_2) == 0x000182, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000183, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_EqualEqual_NameName_ReturnValue_3) == 0x000184, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_EqualEqual_NameName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_SwitchEnum_CmpSuccess_8) == 0x000185, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_SwitchEnum_CmpSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_LessEqual_DoubleDouble_B_ImplicitCast) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_LessEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000190, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, K2Node_Select_Option_1_ImplicitCast) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_A_ImplicitCast) == 0x0001A8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_InterpSpeed_ImplicitCast) == 0x0001B0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_DeltaTime_ImplicitCast_1) == 0x0001B4, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_A_ImplicitCast_1) == 0x0001B8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_InterpSpeed_ImplicitCast_1) == 0x0001C0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_InterpSpeed_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast) == 0x0001C8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast_1) == 0x0001D0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_LessEqual_DoubleDouble_B_ImplicitCast_1) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_LessEqual_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_DeltaTime_ImplicitCast_2) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_DeltaTime_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_A_ImplicitCast_2) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_InterpSpeed_ImplicitCast_2) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_InterpSpeed_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_DeltaTime_ImplicitCast_3) == 0x0001FC, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_DeltaTime_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_DegreesToRadians_A_ImplicitCast_3) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_DegreesToRadians_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateDragonDash, CallFunc_RInterpTo_InterpSpeed_ImplicitCast_3) == 0x000208, "Member 'BP_CharacterLocomotionComponent_C_StateDragonDash::CallFunc_RInterpTo_InterpSpeed_ImplicitCast_3' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StateSuperHighSpeedMove
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove final
{
public:
	class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move_Str; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move_Str) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Super_High_Speed_Move_Str' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StateSuperHighSpeedMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StopJump
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StopJump final
{
public:
	bool                                          InChangeJumpToFly;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StopJump) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StopJump");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StopJump) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_StopJump");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StopJump, InChangeJumpToFly) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StopJump::InChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StopJump, CallFunc_GetSubJump_SubJump) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StopJump::CallFunc_GetSubJump_SubJump' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StopRevengeDash
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_StopRevengeDash final
{
public:
	class UBP_CharacterLocomotionSubRevengeDash_C* CallFunc_GetSubRevengeDash_SubRevengeDash;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_StopRevengeDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_StopRevengeDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_StopRevengeDash) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_StopRevengeDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StopRevengeDash, CallFunc_GetSubRevengeDash_SubRevengeDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_StopRevengeDash::CallFunc_GetSubRevengeDash_SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_StopRevengeDash, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_StopRevengeDash::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Update Dragon Dash Move
// 0x0298 (0x0298 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsDashCombatives;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         NextDragonDashStatus;                              // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDashCombatives;                                  // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeltaSeconds;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Dash_Input_Vector_OutInputVector;     // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral;  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDragonDashZMoveOnInputFront_OutIsZMove; // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegreesToRadians_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDashVectorAndRotation_OutVector;       // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetDashVectorAndRotation_OutRotation;     // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_ReturnValue_1;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_1;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_5;                      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_5;                     // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_5;                       // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDragonDashEnd_IsEnd;                 // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ConsumeSP_InSpCost_ImplicitCast;          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_A_ImplicitCast_1;             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast_2;             // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast;          // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast;       // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1; // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_A_ImplicitCast_1;        // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast_1;     // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast_1;       // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast_1;             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast_2;             // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move) == 0x000298, "Wrong size on BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, InIsDashCombatives) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::InIsDashCombatives' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, NextDragonDashStatus) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::NextDragonDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, IsDashCombatives) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::IsDashCombatives' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, DeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakVector_X) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakVector_Y) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakVector_Z) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_Get_Dash_Input_Vector_OutInputVector) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_Get_Dash_Input_Vector_OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_Get_Dash_Input_Vector_OutIsInputNeutral' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Roll_1) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Pitch_1) == 0x00008C, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Yaw_1) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_ReturnValue) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_ReturnValue_1) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_IsDragonDashZMoveOnInputFront_OutIsZMove) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_IsDragonDashZMoveOnInputFront_OutIsZMove' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000C9, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_Not_PreBool_ReturnValue) == 0x0000CA, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_DegreesToRadians_ReturnValue) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_GetDashVectorAndRotation_OutVector) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_GetDashVectorAndRotation_OutVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_GetDashVectorAndRotation_OutRotation) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_GetDashVectorAndRotation_OutRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Roll_2) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Pitch_2) == 0x00010C, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Yaw_2) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Roll_3) == 0x000114, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Pitch_3) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Yaw_3) == 0x00011C, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_ReturnValue) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_DegreesToRadians_ReturnValue_1) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_DegreesToRadians_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_ReturnValue_1) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_ReturnValue_2) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakVector_X_1) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakVector_Y_1) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakVector_Z_1) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectRotator_ReturnValue) == 0x000170, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeVector_ReturnValue_1) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_RInterpTo_ReturnValue) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_RInterpTo_ReturnValue_1) == 0x0001B8, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_RInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Roll_4) == 0x0001D0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Pitch_4) == 0x0001D4, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Yaw_4) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Roll_5) == 0x0001DC, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Roll_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Pitch_5) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Pitch_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_BreakRotator_Yaw_5) == 0x0001E4, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_BreakRotator_Yaw_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_ReturnValue_2) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_ReturnValue_3) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_ReturnValue_3) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_Not_PreBool_ReturnValue_1) == 0x000210, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_CheckDragonDashEnd_IsEnd) == 0x000211, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_CheckDragonDashEnd_IsEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_A_ImplicitCast) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000220, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_ConsumeSP_InSpCost_ImplicitCast) == 0x000228, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_ConsumeSP_InSpCost_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_A_ImplicitCast_1) == 0x000230, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_A_ImplicitCast_2) == 0x000238, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_DegreesToRadians_A_ImplicitCast) == 0x000240, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_DegreesToRadians_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000248, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_RInterpTo_InterpSpeed_ImplicitCast) == 0x000250, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_RInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_B_ImplicitCast) == 0x000258, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1) == 0x000260, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_DegreesToRadians_A_ImplicitCast_1) == 0x000268, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_DegreesToRadians_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_RInterpTo_InterpSpeed_ImplicitCast_1) == 0x000270, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_RInterpTo_InterpSpeed_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000274, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x000278, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_RInterpTo_DeltaTime_ImplicitCast_1) == 0x00027C, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_RInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_B_ImplicitCast_1) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_SelectFloat_B_ImplicitCast_2) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_SelectFloat_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000290, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x000294, "Member 'BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Update Input Move
// 0x0350 (0x0350 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Update_Input_Move final
{
public:
	double                                        ScaleValueX;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputVectorX;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScaleValueY;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputVectorY;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDashKidan;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           Param_____________0;                               // 0x0048(0x0010)(Edit, BlueprintVisible)
	TScriptInterface<class ISSBattleController>   SSBattleController;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementZ;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValidMovementInputVector;                        // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MovementInputVector;                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MovementRotation;                                  // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Temp_real_Variable;                                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculationInputVectorNormal_ReturnValue; // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAddMovementInputVector_InputWorldDirection; // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAddMovementInputVector_ScaleValue;     // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAddMovementInputVector_InputWorldDirection_1; // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAddMovementInputVector_ScaleValue_1;   // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ISSBattleController>   K2Node_DynamicCast_AsSSBattle_Controller;          // 0x01F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CallFunc_GetCurrentAction_OutAction;               // 0x0204(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratActionCategoryType                      CallFunc_GetActionCategoryType_ReturnValue;        // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x020E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20F[0x1];                                      // 0x020F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_Velocity;                     // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownBattleKey_ReturnValue;      // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26E[0x2];                                      // 0x026E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetMovementInputKeyVector_ReturnValue;    // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownBattleKey_ReturnValue_1;    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           K2Node_MakeArray_Array;                            // 0x0298(0x0010)(ReferenceParm)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetShortDashSpeedDownDistance_ReturnValue; // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           CallFunc_GetTargetCharacter_ReturnValue;           // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetShortDashSpeedDownDistance_ReturnValue_1; // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_DashKidanBrakingDecelerationFlying_ImplicitCast; // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Update_Input_Move) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Update_Input_Move");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Update_Input_Move) == 0x000350, "Wrong size on BP_CharacterLocomotionComponent_C_Update_Input_Move");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, ScaleValueX) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::ScaleValueX' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, InputVectorX) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::InputVectorX' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, ScaleValueY) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::ScaleValueY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, InputVectorY) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::InputVectorY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, IsDashKidan) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::IsDashKidan' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, Param_____________0) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::Param_____________0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, SSBattleController) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::SSBattleController' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, MovementZ) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::MovementZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, IsValidMovementInputVector) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::IsValidMovementInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, MovementInputVector) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::MovementInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, MovementRotation) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::MovementRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, Temp_real_Variable) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetOwner_ReturnValue) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetController_ReturnValue) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetControlRotation_ReturnValue) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakRotator_Roll) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakRotator_Pitch) == 0x0000DC, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakRotator_Yaw) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_CalculationInputVectorNormal_ReturnValue) == 0x000150, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_CalculationInputVectorNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_VectorVector_ReturnValue) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakVector2D_X) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakVector2D_Y) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Normal_ReturnValue) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetAddMovementInputVector_InputWorldDirection) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetAddMovementInputVector_InputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetAddMovementInputVector_ScaleValue) == 0x0001B8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetAddMovementInputVector_ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetAddMovementInputVector_InputWorldDirection_1) == 0x0001C0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetAddMovementInputVector_InputWorldDirection_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetAddMovementInputVector_ScaleValue_1) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetAddMovementInputVector_ScaleValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetOwner_ReturnValue_1) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetController_ReturnValue_1) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, K2Node_DynamicCast_AsSSBattle_Controller) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::K2Node_DynamicCast_AsSSBattle_Controller' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetCurrentAction_OutAction) == 0x000204, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetCurrentAction_OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetActionCategoryType_ReturnValue) == 0x00020C, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetActionCategoryType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00020D, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00020E, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000210, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_VSize_ReturnValue) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x000220, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000238, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetVelocity_Velocity) == 0x000250, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetVelocity_Velocity' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Array_Find_ReturnValue) == 0x000268, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00026C, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_IsInputKeyDownBattleKey_ReturnValue) == 0x00026D, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_IsInputKeyDownBattleKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetMovementInputKeyVector_ReturnValue) == 0x000270, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetMovementInputKeyVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_IsInputKeyDownBattleKey_ReturnValue_1) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_IsInputKeyDownBattleKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000281, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, Temp_real_Variable_1) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000290, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, K2Node_MakeArray_Array) == 0x000298, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0002A8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0002B0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakVector2D_X_1) == 0x0002B8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_BreakVector2D_Y_1) == 0x0002C0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0002C8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetShortDashSpeedDownDistance_ReturnValue) == 0x0002CC, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetShortDashSpeedDownDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_SelectFloat_ReturnValue) == 0x0002D0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetTargetCharacter_ReturnValue) == 0x0002D8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetTargetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_MakeRotator_ReturnValue) == 0x0002E0, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_GetShortDashSpeedDownDistance_ReturnValue_1) == 0x0002F8, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_GetShortDashSpeedDownDistance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000300, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000308, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_SelectFloat_A_ImplicitCast) == 0x000310, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000318, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000320, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, K2Node_VariableSet_DashKidanBrakingDecelerationFlying_ImplicitCast) == 0x000328, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::K2Node_VariableSet_DashKidanBrakingDecelerationFlying_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast) == 0x000330, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::K2Node_VariableSet_BrakingDecelerationFlying_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000338, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000340, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Input_Move, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000348, "Member 'BP_CharacterLocomotionComponent_C_Update_Input_Move::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Update Sub State Timer
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OutSubStateTimer;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer, OutSubStateTimer) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer::OutSubStateTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateCache
// 0x0A48 (0x0A48 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateCache final
{
public:
	EKoratWallUkemiState                          CallFunc_GetWallUkemiStatus_WallUkemiStatus;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStunReactionState                       CallFunc_GetStunReactionInfo_StunReactionStatus;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStunReactionInfo_StunReactionIsFront;  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownState                         CallFunc_GetDashUpDownInfo_DashUpDownStatus;       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          CallFunc_GetDashUpDownInfo_DashUpDownType;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowHitForecastSaveInfo_IsHit;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_Location;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowHitForecastSaveInfo_HitTime;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             CallFunc_GetBlowHitForecastSaveInfo_MapAttribute;  // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlowHitForecastSaveInfo_HitNormal;     // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat;    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlowHitForecastSaveInfo_HitActor;      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetBlowHitForecastSaveInfo_HitComponent;  // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetBlowHitForecastSaveInfo_HitBoneName;   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetBlowHitForecastSaveInfo_HitResult;     // 0x0070(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EKoratDashUkemiState                          CallFunc_GetDashUkemiInfo_DashUkemiStatus;         // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUkemiType                           CallFunc_GetDashUkemiInfo_DashUkemiType;           // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         CallFunc_GetZBurstDashSplineInfo_SplineComponent;  // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetZBurstDashSplineInfo_SplineNowDistance; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         CallFunc_GetZBurstDashStatus_ZBurstDashStatus;     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratHighSpeedMoveState                      CallFunc_GetHighSpeedMoveStatus_HighSpeedMoveStatus; // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetBlastUltimateDashStatus_BlastDashStatus; // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetRevengeDashStatus_RevengeDashStatus;   // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetDragonHomingStatus_DragonHomingStatus; // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               CallFunc_GetBlowInfo_BlowStatus;                   // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                CallFunc_GetBlowInfo_BlowType;                     // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowInfo_BlowIsFront;                  // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratHitBackMovementData              CallFunc_GetBlowInfo_HitBackData;                  // 0x0178(0x02E0)()
	double                                        CallFunc_GetBlowInfo_BlowHitSpeedNormal;           // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowHitSpeedParallel;         // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowBoundSSpeedMax;           // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowBoundMSpeedMax;           // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBlowInfo_BlowReactionLevel;            // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          CallFunc_GetShortDashInfo_ShortDashStatus;         // 0x047C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed; // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed; // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve; // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetShortDashInfo_ShortDashMoveTimer;      // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed; // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLocomotionParameterCache              K2Node_MakeStruct_LocomotionParameterCache;        // 0x04A8(0x0540)(ContainsInstancedReference)
	float                                         K2Node_MakeStruct_ForecastBlowHitTime_ImplicitCast; // 0x09E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_SplineNowDistance_ImplicitCast;  // 0x09EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_BlowHitSpeedNormal_ImplicitCast; // 0x09F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_BlowHitSpeedParallel_ImplicitCast; // 0x09F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_BlowBoundSSpeedMax_ImplicitCast; // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_BlowBoundMSpeedMax_ImplicitCast; // 0x09FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_ShortDashAdditionalMaxSpeed_ImplicitCast; // 0x0A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_ShortDashAdditionalSpeed_ImplicitCast; // 0x0A04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_ShortDashMoveTimer_ImplicitCast; // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_MoveEffectEndSpeed_ImplicitCast; // 0x0A0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_MoveEffectStartSpeed_ImplicitCast; // 0x0A10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_InputZ_ImplicitCast;             // 0x0A14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_NearModeSpeed_ImplicitCast;      // 0x0A18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_MaxSpeed_ImplicitCast;           // 0x0A1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_BattleMoveAlpha_ImplicitCast;    // 0x0A20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_NearMoveAlpha_ImplicitCast;      // 0x0A24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_TargetDistance_ImplicitCast;     // 0x0A28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_VelocityZ_ImplicitCast;          // 0x0A2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_DirectionZ_ImplicitCast;         // 0x0A30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_DirectionY_ImplicitCast;         // 0x0A34(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_ZSpeed_ImplicitCast;             // 0x0A38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_XYSpeed_ImplicitCast;            // 0x0A3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Speed_ImplicitCast;              // 0x0A40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateCache) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateCache");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateCache) == 0x000A48, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateCache");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetWallUkemiStatus_WallUkemiStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetWallUkemiStatus_WallUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetStunReactionInfo_StunReactionStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetStunReactionInfo_StunReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetStunReactionInfo_StunReactionIsFront) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetStunReactionInfo_StunReactionIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetStepType_StepType) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetStepType_StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetStepStatus_StepStatus) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetJumpStatus_JumpStatus) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetDashUpDownInfo_DashUpDownStatus) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetDashUpDownInfo_DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetDashUpDownInfo_DashUpDownType) == 0x000007, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetDashUpDownInfo_DashUpDownType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_IsHit) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_IsHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_Location) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitTime) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_MapAttribute) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_MapAttribute' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitNormal) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitPhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitActor) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitComponent) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitBoneName) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowHitForecastSaveInfo_HitResult) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowHitForecastSaveInfo_HitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetDashUkemiInfo_DashUkemiStatus) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetDashUkemiInfo_DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetDashUkemiInfo_DashUkemiType) == 0x000159, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetDashUkemiInfo_DashUkemiType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetZBurstDashSplineInfo_SplineComponent) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetZBurstDashSplineInfo_SplineComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetZBurstDashSplineInfo_SplineNowDistance) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetZBurstDashSplineInfo_SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetZBurstDashStatus_ZBurstDashStatus) == 0x000170, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetZBurstDashStatus_ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetHighSpeedMoveStatus_HighSpeedMoveStatus) == 0x000171, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetHighSpeedMoveStatus_HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlastUltimateDashStatus_BlastDashStatus) == 0x000172, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlastUltimateDashStatus_BlastDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetRevengeDashStatus_RevengeDashStatus) == 0x000173, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetRevengeDashStatus_RevengeDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetDragonHomingStatus_DragonHomingStatus) == 0x000174, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetDragonHomingStatus_DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowStatus) == 0x000175, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowType) == 0x000176, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowIsFront) == 0x000177, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_HitBackData) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_HitBackData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowHitSpeedNormal) == 0x000458, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowHitSpeedParallel) == 0x000460, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowBoundSSpeedMax) == 0x000468, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowBoundMSpeedMax) == 0x000470, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetBlowInfo_BlowReactionLevel) == 0x000478, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetBlowInfo_BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetShortDashInfo_ShortDashStatus) == 0x00047C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetShortDashInfo_ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed) == 0x000480, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetShortDashInfo_ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed) == 0x000488, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve) == 0x000490, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetShortDashInfo_ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetShortDashInfo_ShortDashMoveTimer) == 0x000498, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetShortDashInfo_ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed) == 0x0004A0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::CallFunc_GetLocomotionParameterMaxSpeed_NowMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_LocomotionParameterCache) == 0x0004A8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_LocomotionParameterCache' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_ForecastBlowHitTime_ImplicitCast) == 0x0009E8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_ForecastBlowHitTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_SplineNowDistance_ImplicitCast) == 0x0009EC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_SplineNowDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_BlowHitSpeedNormal_ImplicitCast) == 0x0009F0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_BlowHitSpeedNormal_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_BlowHitSpeedParallel_ImplicitCast) == 0x0009F4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_BlowHitSpeedParallel_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_BlowBoundSSpeedMax_ImplicitCast) == 0x0009F8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_BlowBoundSSpeedMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_BlowBoundMSpeedMax_ImplicitCast) == 0x0009FC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_BlowBoundMSpeedMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_ShortDashAdditionalMaxSpeed_ImplicitCast) == 0x000A00, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_ShortDashAdditionalMaxSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_ShortDashAdditionalSpeed_ImplicitCast) == 0x000A04, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_ShortDashAdditionalSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_ShortDashMoveTimer_ImplicitCast) == 0x000A08, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_ShortDashMoveTimer_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_MoveEffectEndSpeed_ImplicitCast) == 0x000A0C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_MoveEffectEndSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_MoveEffectStartSpeed_ImplicitCast) == 0x000A10, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_MoveEffectStartSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_InputZ_ImplicitCast) == 0x000A14, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_InputZ_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_NearModeSpeed_ImplicitCast) == 0x000A18, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_NearModeSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_MaxSpeed_ImplicitCast) == 0x000A1C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_MaxSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_BattleMoveAlpha_ImplicitCast) == 0x000A20, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_BattleMoveAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_NearMoveAlpha_ImplicitCast) == 0x000A24, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_NearMoveAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_TargetDistance_ImplicitCast) == 0x000A28, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_TargetDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_VelocityZ_ImplicitCast) == 0x000A2C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_VelocityZ_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_DirectionZ_ImplicitCast) == 0x000A30, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_DirectionZ_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_DirectionY_ImplicitCast) == 0x000A34, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_DirectionY_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_ZSpeed_ImplicitCast) == 0x000A38, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_ZSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_XYSpeed_ImplicitCast) == 0x000A3C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_XYSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCache, K2Node_MakeStruct_Speed_ImplicitCast) == 0x000A40, "Member 'BP_CharacterLocomotionComponent_C_UpdateCache::K2Node_MakeStruct_Speed_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateCurrentRunningAction
// 0x02F8 (0x02F8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction final
{
public:
	struct FKoratActionDataList                   OutRunningAction;                                  // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutRunningSection;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ResultSection;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ResultAction;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class FName                                   Section;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Action;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubRevengeDash_C* CallFunc_GetSubRevengeDash_SubRevengeDash;         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection;         // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction;           // 0x007C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_1;       // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_1;         // 0x00A4(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetRunningSection_RunningSection_2;       // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_2;         // 0x00B4(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_3;       // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_3;         // 0x00DC(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubWallUkemi_C*  CallFunc_GetSubWallUkemi_SubWallUkemi;             // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_4;       // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_4;         // 0x00FC(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_8;                              // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_9;                              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_5;       // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_5;         // 0x012C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableMovementInput_IsEnable;           // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_10;                             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0140(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_6;       // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_6;         // 0x0154(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_11;                             // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0168(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_7;       // 0x0174(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_7;         // 0x017C(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_12;                             // 0x0184(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastUltimateDash_SubBlastDash;     // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_8;       // 0x019C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_8;         // 0x01A4(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         Temp_byte_Variable;                                // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill1Dash_SubBlastDash;       // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_9;       // 0x01BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_9;         // 0x01C4(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_13;                             // 0x01CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill2Dash_SubBlastDash;       // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_10;      // 0x01E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_10;        // 0x01EC(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_14;                             // 0x01F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0200(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_11;      // 0x020C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_11;        // 0x0214(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_15;                             // 0x021C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_16;                             // 0x0224(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               Temp_byte_Variable_1;                              // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable;                              // 0x0230(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_1;                            // 0x0238(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_2;                            // 0x0240(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType;                     // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable_3;                            // 0x024C(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0254(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_4;                            // 0x025C(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_1;                           // 0x0264(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetIdleMoveActionDetail_OutAction;        // 0x026C(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetIdleMoveActionDetail_OutSection;       // 0x0274(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetIdleMoveActionDetail_OutDetailStatus;  // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_5;                            // 0x0288(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRunningSection_RunningSection_12;      // 0x0294(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetRunningAction_RunningAction_12;        // 0x029C(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable_6;                            // 0x02A8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_FindOverrideAction_OutAction;             // 0x02B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindOverrideAction_ReturnValue;           // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable_7;                            // 0x02BC(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               Temp_byte_Variable_2;                              // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CallFunc_GetRunningActionLocomotionSub_OutAction;  // 0x02C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetRunningActionLocomotionSub_OutSection; // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_2;                           // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_8;                            // 0x02E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_3;                              // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   K2Node_Select_Default_3;                           // 0x02EC(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction) == 0x0002F8, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, OutRunningAction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::OutRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, OutRunningSection) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::OutRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, ResultSection) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::ResultSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, ResultAction) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::ResultAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Section) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Section' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Action) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_1) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_2) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_3) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_4) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_5) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubRevengeDash_SubRevengeDash) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubRevengeDash_SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_6) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection) == 0x000074, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction) == 0x00007C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_1) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_2) == 0x000099, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_1) == 0x00009C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_1) == 0x0000A4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_2) == 0x0000AC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_2) == 0x0000B4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_7) == 0x0000BC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubBlow_SubBlow) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_3) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_3) == 0x0000D4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_3) == 0x0000DC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubWallUkemi_SubWallUkemi) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubWallUkemi_SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_4) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_4) == 0x0000F4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_4) == 0x0000FC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_8) == 0x000104, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, K2Node_SwitchEnum_CmpSuccess) == 0x00010C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_9) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_5) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_5) == 0x000124, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_5) == 0x00012C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsEnableMovementInput_IsEnable) == 0x000134, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsEnableMovementInput_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_10) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubShortDash_SubShortDash) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_6) == 0x000148, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_6) == 0x00014C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_6) == 0x000154, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_11) == 0x00015C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_7) == 0x000170, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_7) == 0x000174, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_7) == 0x00017C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_12) == 0x000184, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubBlastUltimateDash_SubBlastDash) == 0x000190, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubBlastUltimateDash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_8) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_8) == 0x00019C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_8) == 0x0001A4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_byte_Variable) == 0x0001AC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubBlastSkill1Dash_SubBlastDash) == 0x0001B0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubBlastSkill1Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_9) == 0x0001B8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_9) == 0x0001BC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_9) == 0x0001C4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_13) == 0x0001CC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubBlastSkill2Dash_SubBlastDash) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubBlastSkill2Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_10) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_10) == 0x0001E4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_10) == 0x0001EC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_14) == 0x0001F4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_11) == 0x000208, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_11) == 0x00020C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_11) == 0x000214, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_15) == 0x00021C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_name_Variable_16) == 0x000224, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_name_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_byte_Variable_1) == 0x00022C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable) == 0x000230, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_1) == 0x000238, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_2) == 0x000240, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetStepType_StepType) == 0x000248, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetStepType_StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetStepStatus_StepStatus) == 0x000249, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_3) == 0x00024C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, K2Node_Select_Default) == 0x000254, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_4) == 0x00025C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, K2Node_Select_Default_1) == 0x000264, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetIdleMoveActionDetail_OutAction) == 0x00026C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetIdleMoveActionDetail_OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetIdleMoveActionDetail_OutSection) == 0x000274, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetIdleMoveActionDetail_OutSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetIdleMoveActionDetail_OutDetailStatus) == 0x00027C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetIdleMoveActionDetail_OutDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_5) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_IsValid_ReturnValue_12) == 0x000290, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningSection_RunningSection_12) == 0x000294, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningSection_RunningSection_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningAction_RunningAction_12) == 0x00029C, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningAction_RunningAction_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetJumpStatus_JumpStatus) == 0x0002A4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_6) == 0x0002A8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_FindOverrideAction_OutAction) == 0x0002B0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_FindOverrideAction_OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_FindOverrideAction_ReturnValue) == 0x0002B8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_FindOverrideAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_7) == 0x0002BC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_byte_Variable_2) == 0x0002C4, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningActionLocomotionSub_OutAction) == 0x0002C8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningActionLocomotionSub_OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, CallFunc_GetRunningActionLocomotionSub_OutSection) == 0x0002D0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::CallFunc_GetRunningActionLocomotionSub_OutSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, K2Node_Select_Default_2) == 0x0002D8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_struct_Variable_8) == 0x0002E0, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, Temp_byte_Variable_3) == 0x0002E8, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction, K2Node_Select_Default_3) == 0x0002EC, "Member 'BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateDragonDashRotationSpeed
// 0x0298 (0x0298 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed final
{
public:
	bool                                          InIsForceSetInitialSpeed;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InNewInputVector;                                  // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InDeltaSeconds;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSameSignZ;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSameSignXY;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewSpeed;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationMaxSpeed;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RotationAcceleration;                              // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RotationInitialSpeed;                              // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                NewInputVector;                                    // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationSpeed; // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationInitialSpeed; // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationAcceleration; // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_5;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_5;                     // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_5;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_6;                      // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_6;                     // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_6;                       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_7;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_7;                     // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_7;                       // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_8;                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_8;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_8;                       // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18E[0x2];                                      // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_9;                      // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_9;                     // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_9;                       // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue_1;                // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue_2;                // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SignOfFloat_ReturnValue_3;                // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue_4;                // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue_5;                // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233[0x5];                                      // 0x0233(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NewSpeed_ImplicitCast;          // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NewSpeed_ImplicitCast_1;        // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast_1;       // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NewSpeed_ImplicitCast_2;        // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NewSpeed_ImplicitCast_3;        // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed) == 0x000298, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, InIsForceSetInitialSpeed) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::InIsForceSetInitialSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, InNewInputVector) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::InNewInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, InDeltaSeconds) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, DeltaSeconds) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, IsSameSignZ) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::IsSameSignZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, IsSameSignXY) == 0x000031, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::IsSameSignXY' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, NewSpeed) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::NewSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, RotationMaxSpeed) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::RotationMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, RotationAcceleration) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::RotationAcceleration' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, RotationInitialSpeed) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::RotationInitialSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, NewInputVector) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::NewInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationSpeed) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationInitialSpeed) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationInitialSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationAcceleration) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Calculate_Dragon_Dash_Rotation_Speed_Param_OutRotationAcceleration' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch) == 0x0000EC, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_1) == 0x0000F4, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_1) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_1) == 0x0000FC, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_2) == 0x000100, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_2) == 0x000104, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_2) == 0x000108, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_3) == 0x00010C, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_3) == 0x000110, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_3) == 0x000114, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Not_PreBool_ReturnValue) == 0x000118, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000120, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000128, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_4) == 0x000130, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_4) == 0x000134, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_4) == 0x000138, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_MakeRotator_ReturnValue) == 0x000140, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000158, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_5) == 0x00015C, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_5) == 0x000160, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_5) == 0x000164, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_6) == 0x000168, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_6) == 0x00016C, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_6) == 0x000170, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_7) == 0x000174, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_7) == 0x000178, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_7) == 0x00017C, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_8) == 0x000180, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_8) == 0x000184, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_8) == 0x000188, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x00018C, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Not_PreBool_ReturnValue_1) == 0x00018D, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000190, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Roll_9) == 0x000198, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Roll_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Pitch_9) == 0x00019C, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Pitch_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakRotator_Yaw_9) == 0x0001A0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakRotator_Yaw_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0001A8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_MakeRotator_ReturnValue_1) == 0x0001B0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakVector_X) == 0x0001C8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakVector_Y) == 0x0001D0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakVector_Z) == 0x0001D8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakVector_X_1) == 0x0001E0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakVector_Y_1) == 0x0001E8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BreakVector_Z_1) == 0x0001F0, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_SignOfFloat_ReturnValue) == 0x0001F8, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_SignOfFloat_ReturnValue_1) == 0x000200, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_SignOfFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_SignOfFloat_ReturnValue_2) == 0x000208, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_SignOfFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000210, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_SignOfFloat_ReturnValue_3) == 0x000218, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_SignOfFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_SignOfFloat_ReturnValue_4) == 0x000220, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_SignOfFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_SignOfFloat_ReturnValue_5) == 0x000228, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_SignOfFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000230, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000231, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_BooleanAND_ReturnValue) == 0x000232, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000238, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000240, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000248, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x000250, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, K2Node_VariableSet_NewSpeed_ImplicitCast) == 0x000258, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::K2Node_VariableSet_NewSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, K2Node_VariableSet_NewSpeed_ImplicitCast_1) == 0x000260, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::K2Node_VariableSet_NewSpeed_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000268, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000270, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000278, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, CallFunc_Less_DoubleDouble_B_ImplicitCast_1) == 0x000280, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::CallFunc_Less_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, K2Node_VariableSet_NewSpeed_ImplicitCast_2) == 0x000288, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::K2Node_VariableSet_NewSpeed_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed, K2Node_VariableSet_NewSpeed_ImplicitCast_3) == 0x000290, "Member 'BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed::K2Node_VariableSet_NewSpeed_ImplicitCast_3' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateIdleMoveTimer
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateLocomotionDetailStatus
// 0x0100 (0x0100 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         OutLocomotionDetailStatus;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         ResultDetailStatus;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_6;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_7;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_8;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_9;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_10;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_11;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               Temp_byte_Variable_12;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_13;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_15;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_16;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_17;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_18;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_19;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubRevengeDash_C* CallFunc_GetSubRevengeDash_SubRevengeDash;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus; // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_1; // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_20;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubWallUkemi_C*  CallFunc_GetSubWallUkemi_SubWallUkemi;             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_2; // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_21;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_3; // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_4; // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_22;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_5; // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_6; // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_23;                             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_7; // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_8; // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_24;                             // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastUltimateDash_SubBlastDash;     // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                Temp_byte_Variable_25;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_9; // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill1Dash_SubBlastDash;       // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_26;                             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_10; // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlastDash_C*  CallFunc_GetSubBlastSkill2Dash_SubBlastDash;       // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_11; // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_27;                             // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_12; // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_28;                             // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_29;                             // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_30;                             // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_31;                             // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_32;                             // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         Temp_byte_Variable_33;                             // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default;                             // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_34;                             // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType;                     // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                CallFunc_GetStepType_StepType_1;                   // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default_1;                           // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default_2;                           // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetIdleMoveActionDetail_OutAction;        // 0x00E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetIdleMoveActionDetail_OutSection;       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetIdleMoveActionDetail_OutDetailStatus;  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default_3;                           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_GetLocomotionSubDetailStatus_OutDetailStatus; // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus) == 0x000100, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, OutLocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::OutLocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, ResultDetailStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::ResultDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_2) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_3) == 0x000005, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_4) == 0x000006, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_5) == 0x000007, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_6) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_7) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_8) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_9) == 0x00000B, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_10) == 0x00000C, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_11) == 0x00000D, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_12) == 0x00000E, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_13) == 0x00000F, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_14) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_15) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_16) == 0x000012, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_17) == 0x000013, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_18) == 0x000014, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_19) == 0x000015, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubRevengeDash_SubRevengeDash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubRevengeDash_SubRevengeDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus) == 0x00002A, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_1) == 0x00002B, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_20) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubWallUkemi_SubWallUkemi) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubWallUkemi_SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_2) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_2) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_21) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_3) == 0x000049, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_3) == 0x00004A, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_4) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_4) == 0x000059, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_22) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_5) == 0x000069, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_5) == 0x00006A, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubShortDash_SubShortDash) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_6) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_6) == 0x000079, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubBlow_SubBlow) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_23) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_7) == 0x000089, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_7) == 0x00008A, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_8) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_8) == 0x000099, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_24) == 0x00009A, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, K2Node_SwitchEnum_CmpSuccess) == 0x00009B, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubBlastUltimateDash_SubBlastDash) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubBlastUltimateDash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_25) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_9) == 0x0000A9, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_9) == 0x0000AA, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubBlastSkill1Dash_SubBlastDash) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubBlastSkill1Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_26) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_10) == 0x0000B9, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_10) == 0x0000BA, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubBlastSkill2Dash_SubBlastDash) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubBlastSkill2Dash_SubBlastDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_11) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_11) == 0x0000C9, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_27) == 0x0000CA, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x0000D0, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_IsValid_ReturnValue_12) == 0x0000D8, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_12) == 0x0000D9, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionDetailStatus_LocomotionDetailStatus_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_28) == 0x0000DA, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_29) == 0x0000DB, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_30) == 0x0000DC, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_31) == 0x0000DD, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_32) == 0x0000DE, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_33) == 0x0000DF, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, K2Node_Select_Default) == 0x0000E0, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, Temp_byte_Variable_34) == 0x0000E1, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::Temp_byte_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetStepStatus_StepStatus) == 0x0000E2, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetStepType_StepType) == 0x0000E3, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetStepType_StepType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000E4, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetStepType_StepType_1) == 0x0000E5, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetStepType_StepType_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, K2Node_Select_Default_1) == 0x0000E6, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, K2Node_Select_Default_2) == 0x0000E7, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetIdleMoveActionDetail_OutAction) == 0x0000E8, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetIdleMoveActionDetail_OutAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetIdleMoveActionDetail_OutSection) == 0x0000F0, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetIdleMoveActionDetail_OutSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetIdleMoveActionDetail_OutDetailStatus) == 0x0000F8, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetIdleMoveActionDetail_OutDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetJumpStatus_JumpStatus) == 0x0000F9, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, K2Node_Select_Default_3) == 0x0000FA, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus, CallFunc_GetLocomotionSubDetailStatus_OutDetailStatus) == 0x0000FB, "Member 'BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus::CallFunc_GetLocomotionSubDetailStatus_OutDetailStatus' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateMobileMonitoring
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring final
{
public:
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateMobileMonitoring::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateRange
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateRange final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForceChange;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFixRangeSpeed;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForce;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceNow;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearNew;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeDistanceCpp_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpdateSpeed_IsUpdate;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_UpdateSpeedCpp_InDistance_ImplicitCast;   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateRange) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateRange");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateRange) == 0x000038, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateRange");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, Distance) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::Distance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, IsForceChange) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::IsForceChange' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, IsFixRangeSpeed) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::IsFixRangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, IsForce) == 0x00000A, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::IsForce' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, DistanceNow) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::DistanceNow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, IsNearNew) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::IsNearNew' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001B, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001E, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, K2Node_SwitchEnum_CmpSuccess) == 0x00001F, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_GetLocomotionSub_SubInstance) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_IsNearRangeDistanceCpp_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_IsNearRangeDistanceCpp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_IsUpdateSpeed_IsUpdate) == 0x00002A, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_IsUpdateSpeed_IsUpdate' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_UpdateSpeedCpp_InDistance_ImplicitCast) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_UpdateSpeedCpp_InDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRange, CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateRange::CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateRunningAction
// 0x00B8 (0x00B8 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateRunningAction final
{
public:
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutIsChangeAction;                                 // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseNoneSection;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeAction;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             ActionFinishReason;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NowRunningSection;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   NowRunningAction;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_UpdateLocomotionDetailStatus_OutLocomotionDetailStatus; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CallFunc_UpdateCurrentRunningAction_OutRunningAction; // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_UpdateCurrentRunningAction_OutRunningSection; // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterActionSpawnSequenceParameter CallFunc_CreateCharacterActionSpawnSequenceParameter_ReturnValue; // 0x0030(0x0020)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterActionSpawnSequenceParameter CallFunc_CreateCharacterActionSpawnSequenceParameter_ReturnValue_1; // 0x0058(0x0020)()
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratSequencePlayInfo                 CallFunc_Array_Get_Item;                           // 0x0084(0x0020)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_2;          // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_3;          // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_4;          // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateRunningAction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateRunningAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateRunningAction) == 0x0000B8, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateRunningAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, InActionFinishReason) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, OutIsChangeAction) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::OutIsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, IsUseNoneSection) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::IsUseNoneSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, IsChangeAction) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::IsChangeAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, ActionFinishReason) == 0x000004, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::ActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, NowRunningSection) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::NowRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, NowRunningAction) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::NowRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_UpdateLocomotionDetailStatus_OutLocomotionDetailStatus) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_UpdateLocomotionDetailStatus_OutLocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_UpdateCurrentRunningAction_OutRunningAction) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_UpdateCurrentRunningAction_OutRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_UpdateCurrentRunningAction_OutRunningSection) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_UpdateCurrentRunningAction_OutRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_NotEqual_NameName_ReturnValue) == 0x00002D, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_CreateCharacterActionSpawnSequenceParameter_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_CreateCharacterActionSpawnSequenceParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_CreateCharacterActionSpawnSequenceParameter_ReturnValue_1) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_CreateCharacterActionSpawnSequenceParameter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, Temp_bool_True_if_break_was_hit_Variable) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_Array_Get_Item) == 0x000084, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A4, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x0000A5, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, Temp_int_Loop_Counter_Variable) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_Less_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_Add_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_BooleanAND_ReturnValue) == 0x0000B4, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_NotEqual_NameName_ReturnValue_2) == 0x0000B5, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_NotEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_NotEqual_NameName_ReturnValue_3) == 0x0000B6, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_NotEqual_NameName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateRunningAction, CallFunc_NotEqual_NameName_ReturnValue_4) == 0x0000B7, "Member 'BP_CharacterLocomotionComponent_C_UpdateRunningAction::CallFunc_NotEqual_NameName_ReturnValue_4' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateSpeed
// 0x00D0 (0x00D0 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateSpeed final
{
public:
	double                                        InDistance;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsFixRangeSpeed;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsNear;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NormalGroundSpeed;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearGroundSpeed;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNear;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFixRangeSpeed;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceNow;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceMax;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceMin;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveSpeed;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGroundMoveOnCharacter_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGroundMoveOnCharacter_ReturnValue_1;    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcNearRangeSpeedRate_ReturnValue;       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeGiantCharaCpp_ReturnValue;     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCanFly_ReturnValue;                     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcNearRangeSpeedRate_InNowDistance_ImplicitCast; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcNearRangeSpeedRate_InNearDistance_ImplicitCast; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateSpeed) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateSpeed");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateSpeed) == 0x0000D0, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateSpeed");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, InDistance) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::InDistance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, InIsFixRangeSpeed) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::InIsFixRangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, InIsNear) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::InIsNear' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, NormalGroundSpeed) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::NormalGroundSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, NearGroundSpeed) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::NearGroundSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, IsNear) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::IsNear' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, IsFixRangeSpeed) == 0x000021, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::IsFixRangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, DistanceNow) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::DistanceNow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, DistanceMax) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::DistanceMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, DistanceMin) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::DistanceMin' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, MoveSpeed) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::MoveSpeed' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_IsGroundMoveOnCharacter_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_IsGroundMoveOnCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_IsGroundMoveOnCharacter_ReturnValue_1) == 0x000051, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_IsGroundMoveOnCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_CalcNearRangeSpeedRate_ReturnValue) == 0x000054, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_CalcNearRangeSpeedRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Not_PreBool_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_IsNearRangeGiantCharaCpp_ReturnValue) == 0x000061, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_IsNearRangeGiantCharaCpp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_BooleanOR_ReturnValue) == 0x000062, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_BooleanOR_ReturnValue_1) == 0x000063, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_IsCanFly_ReturnValue) == 0x000064, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_IsCanFly_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, Temp_bool_Variable) == 0x000090, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, K2Node_Select_Default) == 0x000098, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A1, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_CalcNearRangeSpeedRate_InNowDistance_ImplicitCast) == 0x0000B8, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_CalcNearRangeSpeedRate_InNowDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_CalcNearRangeSpeedRate_InNearDistance_ImplicitCast) == 0x0000BC, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_CalcNearRangeSpeedRate_InNearDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000C0, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateSpeed, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x0000C8, "Member 'BP_CharacterLocomotionComponent_C_UpdateSpeed::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateState
// 0x0060 (0x0060 - 0x0000)
struct BP_CharacterLocomotionComponent_C_UpdateState final
{
public:
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 EventType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CallFunc_UpdateCurrentRunningAction_OutRunningAction; // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_UpdateCurrentRunningAction_OutRunningSection; // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTargetDistance_Length;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeDistanceCpp_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetLookAtRotation_ReturnValue;            // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_UpdateState) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_UpdateState");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_UpdateState) == 0x000060, "Wrong size on BP_CharacterLocomotionComponent_C_UpdateState");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, InEventType) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, InDeltaSeconds) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, DeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, EventType) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::EventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_UpdateCurrentRunningAction_OutRunningAction) == 0x00001C, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_UpdateCurrentRunningAction_OutRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_UpdateCurrentRunningAction_OutRunningSection) == 0x000024, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_UpdateCurrentRunningAction_OutRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00002C, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_IsValid_ReturnValue) == 0x00002D, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_GetTargetDistance_Length) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_GetTargetDistance_Length' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_IsNearRangeDistanceCpp_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_IsNearRangeDistanceCpp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00003A, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00003B, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, K2Node_SwitchEnum_CmpSuccess) == 0x00003C, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_Update_NewParam) == 0x00003D, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_Update_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_GetLookAtRotation_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_GetLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_UpdateState, CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_UpdateState::CallFunc_IsNearRangeDistanceCpp_InDistance_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetCharacterMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetCharacterMovementMode final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetCharacterMovementMode) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetCharacterMovementMode");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetCharacterMovementMode) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_GetCharacterMovementMode");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetCharacterMovementMode, MovementMode) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetCharacterMovementMode::MovementMode' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetCharacterRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetCharacterRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetCharacterRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetCharacterRotation");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetCharacterRotation) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetCharacterRotation");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetCharacterRotation, Rotation) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetCharacterRotation::Rotation' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetJumpStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetJumpStatus final
{
public:
	EKoratJumpState                               JumpStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       CallFunc_GetSubJump_SubJump;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetJumpStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetJumpStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetJumpStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetJumpStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetJumpStatus, JumpStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetJumpStatus::JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetJumpStatus, CallFunc_GetSubJump_SubJump) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetJumpStatus::CallFunc_GetSubJump_SubJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetJumpStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetJumpStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionDetailStatus
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         OutLocomotionDetailStatus;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         ResultDetailStatus;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         CallFunc_UpdateLocomotionDetailStatus_OutLocomotionDetailStatus; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExecNative_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus) == 0x000004, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus, OutLocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus::OutLocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus, ResultDetailStatus) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus::ResultDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus, CallFunc_UpdateLocomotionDetailStatus_OutLocomotionDetailStatus) == 0x000002, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus::CallFunc_UpdateLocomotionDetailStatus_OutLocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus, CallFunc_ExecNative_ReturnValue) == 0x000003, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus::CallFunc_ExecNative_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForCamera
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera final
{
public:
	double                                        XYSpeed_0;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus_0;                                // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera) == 0x000010, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera, XYSpeed_0) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera::XYSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera, IsLockOn) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera::IsLockOn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera, DragonDashStatus_0) == 0x000009, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera::DragonDashStatus_0' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionSub
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetLocomotionSub final
{
public:
	EKoratLocomotionState                         InLocomotionStatus;                                // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       SubInstance;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetLocomotionSub) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetLocomotionSub");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetLocomotionSub) == 0x000020, "Wrong size on BP_CharacterLocomotionComponent_C_GetLocomotionSub");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSub, InLocomotionStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSub::InLocomotionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSub, SubInstance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSub::SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSub, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSub::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetLocomotionSub, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetLocomotionSub::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRunningAction
// 0x0044 (0x0044 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   OutRunningAction;                                  // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutRunningSection;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Section;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Action;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class FName                                   ResultSection;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ResultAction;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_UpdateCurrentRunningAction_OutRunningAction; // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_UpdateCurrentRunningAction_OutRunningSection; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExecNative_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetRunningAction) == 0x000004, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetRunningAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetRunningAction) == 0x000044, "Wrong size on BP_CharacterLocomotionComponent_C_GetRunningAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, OutRunningAction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::OutRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, OutRunningSection) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::OutRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, Section) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::Section' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, Action) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, ResultSection) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::ResultSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, ResultAction) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::ResultAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, CallFunc_UpdateCurrentRunningAction_OutRunningAction) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::CallFunc_UpdateCurrentRunningAction_OutRunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, CallFunc_UpdateCurrentRunningAction_OutRunningSection) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::CallFunc_UpdateCurrentRunningAction_OutRunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetRunningAction, CallFunc_ExecNative_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_GetRunningAction::CallFunc_ExecNative_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStepStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetStepStatus final
{
public:
	EKoratStepState                               StepStatus;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStep_C*       CallFunc_GetSubStep_SubStep;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetStepStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetStepStatus");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetStepStatus) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_GetStepStatus");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStepStatus, StepStatus) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetStepStatus::StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStepStatus, CallFunc_GetSubStep_SubStep) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetStepStatus::CallFunc_GetSubStep_SubStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetStepStatus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetStepStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlow
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubBlow final
{
public:
	class UBP_CharacterLocomotionSubBlow_C*       SubBlow;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blow; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubBlow) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubBlow");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubBlow) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubBlow");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlow, SubBlow) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlow::SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlow, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlow, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlow::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlow, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlow::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlow, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blow) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlow::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Blow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubBlow, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubBlow::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubDashUkemi
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubDashUkemi final
{
public:
	class UBP_CharacterLocomotionSubDashUkemi_C*  SubDashUkemi;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dash_Ukemi; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubDashUkemi");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubDashUkemi");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi, SubDashUkemi) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUkemi::SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUkemi::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUkemi::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUkemi::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dash_Ukemi) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUkemi::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dash_Ukemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUkemi, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUkemi::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubDashUpDown
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubDashUpDown final
{
public:
	class UBP_CharacterLocomotionSubDashUpDown_C* SubDashUpDown;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dash_Up_Down; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubDashUpDown");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubDashUpDown");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown, SubDashUpDown) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUpDown::SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUpDown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUpDown::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUpDown::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dash_Up_Down) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUpDown::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dash_Up_Down' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDashUpDown, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubDashUpDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubDragonHoming
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubDragonHoming final
{
public:
	class UBP_CharacterLocomotionSubDragonHoming_C* SubDragonHoming;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dragon_Homing; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubDragonHoming");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubDragonHoming");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming, SubDragonHoming) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubDragonHoming::SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubDragonHoming::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubDragonHoming::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubDragonHoming::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dragon_Homing) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubDragonHoming::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Dragon_Homing' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubDragonHoming, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubDragonHoming::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubJump
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubJump final
{
public:
	class UBP_CharacterLocomotionSubJump_C*       SubJump;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubJump_C*       K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Jump; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubJump) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubJump");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubJump) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubJump");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubJump, SubJump) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubJump::SubJump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubJump, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubJump::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubJump, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubJump::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubJump, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubJump::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubJump, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Jump) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubJump::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Jump' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubJump, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubJump::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubNumbReaction
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubNumbReaction final
{
public:
	class UBP_CharacterLocomotionSubNumbReaction_C* SubNumbReaction;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Numb_Reaction; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubNumbReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubNumbReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction, SubNumbReaction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubNumbReaction::SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubNumbReaction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubNumbReaction::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubNumbReaction::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Numb_Reaction) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubNumbReaction::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Numb_Reaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubNumbReaction, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubNumbReaction::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubShortDash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubShortDash final
{
public:
	class UBP_CharacterLocomotionSubShortDash_C*  SubShortDash;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubShortDash_C*  K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Short_Dash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubShortDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubShortDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubShortDash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubShortDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubShortDash, SubShortDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubShortDash::SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubShortDash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubShortDash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubShortDash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubShortDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubShortDash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubShortDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubShortDash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Short_Dash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubShortDash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Short_Dash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubShortDash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubShortDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubStep
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubStep final
{
public:
	class UBP_CharacterLocomotionSubStep_C*       SubStep;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStep_C*       K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Step; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubStep) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubStep");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubStep) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubStep");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStep, SubStep) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubStep::SubStep' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStep, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubStep::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStep, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubStep::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStep, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubStep::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStep, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Step) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubStep::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Step' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStep, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubStep::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubStunReaction
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubStunReaction final
{
public:
	class UBP_CharacterLocomotionSubStunReaction_C* SubStunReaction;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubStunReaction_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Stun_Reaction; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubStunReaction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubStunReaction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubStunReaction) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubStunReaction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStunReaction, SubStunReaction) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubStunReaction::SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStunReaction, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubStunReaction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStunReaction, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubStunReaction::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStunReaction, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubStunReaction::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStunReaction, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Stun_Reaction) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubStunReaction::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Stun_Reaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubStunReaction, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubStunReaction::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubWallUkemi
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubWallUkemi final
{
public:
	class UBP_CharacterLocomotionSubWallUkemi_C*  SubWallUkemi;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubWallUkemi_C*  K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Wall_Ukemi; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubWallUkemi");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubWallUkemi");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi, SubWallUkemi) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubWallUkemi::SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubWallUkemi::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubWallUkemi::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubWallUkemi::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Wall_Ukemi) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubWallUkemi::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_Wall_Ukemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubWallUkemi, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubWallUkemi::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubZBurstDash
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetSubZBurstDash final
{
public:
	class UBP_CharacterLocomotionSubZBurstDash_C* SubZBurstDash;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubZBurstDash_C* K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_ZBurst_Dash; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetSubZBurstDash");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash) == 0x000030, "Wrong size on BP_CharacterLocomotionComponent_C_GetSubZBurstDash");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash, SubZBurstDash) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetSubZBurstDash::SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_GetSubZBurstDash::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_GetSubZBurstDash::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_GetSubZBurstDash::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash, K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_ZBurst_Dash) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_GetSubZBurstDash::K2Node_DynamicCast_AsBP_Character_Locomotion_Sub_ZBurst_Dash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetSubZBurstDash, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_GetSubZBurstDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetUseCharacterRotationPitch
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch final
{
public:
	bool                                          UsePitch;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch) == 0x000001, "Wrong alignment on BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch) == 0x000001, "Wrong size on BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch, UsePitch) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch::UsePitch' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsStatusEnableAction
// 0x0090 (0x0090 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsStatusEnableAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubNumbReaction_C* CallFunc_GetSubNumbReaction_SubNumbReaction;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubStunReaction_C* CallFunc_GetSubStunReaction_SubStunReaction;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_1;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBlow_C*       CallFunc_GetSubBlow_SubBlow;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubShortDash_C*  CallFunc_GetSubShortDash_SubShortDash;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_2;                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_3;                // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDragonHoming_C* CallFunc_GetSubDragonHoming_SubDragonHoming;       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_4;                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               CallFunc_GetStepStatus_StepStatus;                 // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUkemi_C*  CallFunc_GetSubDashUkemi_SubDashUkemi;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_5;                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               CallFunc_GetJumpStatus_JumpStatus;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubZBurstDash_C* CallFunc_GetSubZBurstDash_SubZBurstDash;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubWallUkemi_C*  CallFunc_GetSubWallUkemi_SubWallUkemi;             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_6;                // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_7;                // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubDashUpDown_C* CallFunc_GetSubDashUpDown_SubDashUpDown;           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_8;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable_9;                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsStatusEnableAction");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction) == 0x000090, "Wrong size on BP_CharacterLocomotionComponent_C_IsStatusEnableAction");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubNumbReaction_SubNumbReaction) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubNumbReaction_SubNumbReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubStunReaction_SubStunReaction) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubStunReaction_SubStunReaction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable) == 0x00001A, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_1) == 0x00001B, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubBlow_SubBlow) == 0x000020, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubBlow_SubBlow' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubShortDash_SubShortDash) == 0x000028, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubShortDash_SubShortDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_3) == 0x000031, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_2) == 0x000032, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_3) == 0x000033, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubDragonHoming_SubDragonHoming) == 0x000038, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubDragonHoming_SubDragonHoming' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_4) == 0x000041, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_4) == 0x000042, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetStepStatus_StepStatus) == 0x000043, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetStepStatus_StepStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubDashUkemi_SubDashUkemi) == 0x000048, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubDashUkemi_SubDashUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, K2Node_SwitchEnum_CmpSuccess_1) == 0x000050, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_5) == 0x000051, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_5) == 0x000052, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetJumpStatus_JumpStatus) == 0x000053, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetJumpStatus_JumpStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, K2Node_SwitchEnum_CmpSuccess_2) == 0x000054, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubZBurstDash_SubZBurstDash) == 0x000058, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubZBurstDash_SubZBurstDash' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubWallUkemi_SubWallUkemi) == 0x000060, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubWallUkemi_SubWallUkemi' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_6) == 0x000068, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_7) == 0x000069, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_6) == 0x00006A, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_7) == 0x00006B, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetSubDashUpDown_SubDashUpDown) == 0x000070, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetSubDashUpDown_SubDashUpDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_MakeLiteralByte_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_8) == 0x000079, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_GetLocomotionSub_SubInstance) == 0x000080, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_8) == 0x000088, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsValid_ReturnValue_9) == 0x000089, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsStatusEnableAction, CallFunc_IsEnableAction_IsEnable_9) == 0x00008A, "Member 'BP_CharacterLocomotionComponent_C_IsStatusEnableAction::CallFunc_IsEnableAction_IsEnable_9' has a wrong offset!");

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsUpdateSpeedGraph
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       CallFunc_GetLocomotionSub_SubInstance;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpdateSpeed_IsUpdate;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph) == 0x000008, "Wrong alignment on BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph");
static_assert(sizeof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph) == 0x000018, "Wrong size on BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph, CallFunc_GetLocomotionSub_SubInstance) == 0x000008, "Member 'BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph::CallFunc_GetLocomotionSub_SubInstance' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph, CallFunc_IsUpdateSpeed_IsUpdate) == 0x000010, "Member 'BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph::CallFunc_IsUpdateSpeed_IsUpdate' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

