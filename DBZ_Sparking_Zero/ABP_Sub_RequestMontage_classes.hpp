#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Sub_RequestMontage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Sub_RequestMontage.ABP_Sub_RequestMontage_C
// 0x0380 (0x06F0 - 0x0370)
class UABP_Sub_RequestMontage_C final : public USSAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_SubInput;                            // 0x03A8(0x00C8)()
	class UActorComponent*                        LocomotionComponent;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0490(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x04A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratRequestAnimData                  RequestAnimData;                                   // 0x04E0(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsRequestAnim;                                     // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ActionBlendTime;                                   // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendOutTime;                                      // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActionBlendAlpha;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAction;                                          // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E1[0x3];                                      // 0x05E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlaySlotIdMovingAction;                            // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                AnimMontage;                                       // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EKoratAnimType                                AnimType;                                          // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NextSction;                                        // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SetSection;                                        // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsActionCancelEnable;                              // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverwrite;                                       // 0x0619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x061A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequest;                                         // 0x061B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MovingActionBlendTime;                             // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReactionBlendTime;                                 // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovingActionBlendAlpha;                            // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReactionBlendAlpha;                                // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTimeX;                                        // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           SSCharacter;                                       // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentMaxSpeed;                                   // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetDeltaRotator;                                // 0x0658(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   CurrentPlayMontageSectionMovingAction;             // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentPlayMontageSectionAction;                   // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentPlayMontageSectionReaction;                 // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           KidanMontage;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   PreKidanSection;                                   // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreKidanMontagePosition;                           // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKoratCharacterSubActionStateAnimInstance* SubActionStateAnimInstance;                        // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckBlendReaction;                                // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckBlendAction;                                  // 0x06A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckBlendMovingAction;                            // 0x06AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AB[0x5];                                      // 0x06AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        MontageComponent;                                  // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ReleseSectionAnimMontage;                          // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReleseSection;                                     // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReleseSectionSparking;                             // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         BlastAnimation;                                    // 0x06E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	void AnimNotifyMontageSetNextSection(class UAnimSequenceBase* AnimSequence, const class FString& NextSection, const class FString& SetSection_0);
	void AnimNotifyMontageSetReleseSection(class UAnimSequenceBase* AnimSequence, const class FString& NextSection, const class FString& NextSectionSparking, int32 ChargeLevel, int32 ChargeLevelSparking);
	void AnimNotifyMontageStop(class UAnimSequenceBase* AnimSequence);
	void AnimNotifySetActionCancel(bool AnimNotifySetActionCancel_0);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX_0);
	void CheckJumpSection(bool* Continue);
	void DebugPrint();
	void ExecuteUbergraph_ABP_Sub_RequestMontage(int32 EntryPoint);
	void GetABPSubRequestMontage(class UABP_Sub_RequestMontage_C** ABPSubRequestMontage);
	void GetAnimationParameter();
	class UAnimMontage* GetMontage(const EKoratAnimType InAnimType);
	class UAnimMontage* GetOriginalMontage(const EKoratAnimType InAnimType);
	void GetRequestAction();
	void GetSubActionAnimInstance(class UAnimInstance** SubActionAnimInstance);
	void GetSubActionStateAnimInstance(class UKoratCharacterSubActionStateAnimInstance** SubActionStateAnimInstance_0);
	void GetSubRequestMontageAnimInstance(class UABP_Sub_RequestMontage_C** SubrequestMontageAnimInstance);
	bool IsPlayMontage(const EKoratAnimType InAnimType, const class UObject* InObject);
	void JumpSection();
	class FName MontageGetCurrentSection(const class UAnimMontage* Montage);
	bool MontageIsPlaying(const class UAnimMontage* Montage);
	void PlayMontage(const struct FKoratRequestAnimData& InRequestAnimData);
	void ReflectRequestReactionDirection();
	void RequestMontage(EKoratAnimType AnimType_0, bool Overwrite, bool PlayMontage_0);
	void SetEnableMovementInput(const struct FKoratRequestAnimData& KoratRequestAnimData);
	void SetIsContinued(const EKoratAnimType InAnimType, const bool bInContinued);
	void SetKidanNextSection(bool* IsContinue);
	void SetNextSection(const struct FKoratActionDataList& InActionDataList, class FName InSelection);
	void SetReactionDirection(EKoratReactionDirection InReactionDirection);
	void UpdateCurrentPlayMontageSection();
	void UpdateKidanNextSection();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Sub_RequestMontage_C">();
	}
	static class UABP_Sub_RequestMontage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Sub_RequestMontage_C>();
	}
};
static_assert(alignof(UABP_Sub_RequestMontage_C) == 0x000010, "Wrong alignment on UABP_Sub_RequestMontage_C");
static_assert(sizeof(UABP_Sub_RequestMontage_C) == 0x0006F0, "Wrong size on UABP_Sub_RequestMontage_C");
static_assert(offsetof(UABP_Sub_RequestMontage_C, UberGraphFrame) == 0x000370, "Member 'UABP_Sub_RequestMontage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_Sub_RequestMontage_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_Sub_RequestMontage_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_Sub_RequestMontage_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, AnimGraphNode_SubInput) == 0x0003A8, "Member 'UABP_Sub_RequestMontage_C::AnimGraphNode_SubInput' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, LocomotionComponent) == 0x000470, "Member 'UABP_Sub_RequestMontage_C::LocomotionComponent' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, Speed) == 0x000478, "Member 'UABP_Sub_RequestMontage_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, XYSpeed) == 0x000480, "Member 'UABP_Sub_RequestMontage_C::XYSpeed' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ZSpeed) == 0x000488, "Member 'UABP_Sub_RequestMontage_C::ZSpeed' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, LastVelocityRot) == 0x000490, "Member 'UABP_Sub_RequestMontage_C::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CharacterRot) == 0x0004A8, "Member 'UABP_Sub_RequestMontage_C::CharacterRot' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, DirectionY) == 0x0004C0, "Member 'UABP_Sub_RequestMontage_C::DirectionY' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, DirectionZ) == 0x0004C8, "Member 'UABP_Sub_RequestMontage_C::DirectionZ' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, NearMoveAlpha) == 0x0004D0, "Member 'UABP_Sub_RequestMontage_C::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, BattleMoveAlpha) == 0x0004D8, "Member 'UABP_Sub_RequestMontage_C::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, RequestAnimData) == 0x0004E0, "Member 'UABP_Sub_RequestMontage_C::RequestAnimData' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, IsRequestAnim) == 0x0005C0, "Member 'UABP_Sub_RequestMontage_C::IsRequestAnim' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ActionBlendTime) == 0x0005C8, "Member 'UABP_Sub_RequestMontage_C::ActionBlendTime' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, BlendOutTime) == 0x0005D0, "Member 'UABP_Sub_RequestMontage_C::BlendOutTime' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ActionBlendAlpha) == 0x0005D8, "Member 'UABP_Sub_RequestMontage_C::ActionBlendAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, IsAction) == 0x0005E0, "Member 'UABP_Sub_RequestMontage_C::IsAction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, PlaySlotIdMovingAction) == 0x0005E4, "Member 'UABP_Sub_RequestMontage_C::PlaySlotIdMovingAction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, AnimMontage) == 0x0005E8, "Member 'UABP_Sub_RequestMontage_C::AnimMontage' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, AnimType) == 0x0005F0, "Member 'UABP_Sub_RequestMontage_C::AnimType' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, NextSction) == 0x0005F8, "Member 'UABP_Sub_RequestMontage_C::NextSction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, SetSection) == 0x000608, "Member 'UABP_Sub_RequestMontage_C::SetSection' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, IsActionCancelEnable) == 0x000618, "Member 'UABP_Sub_RequestMontage_C::IsActionCancelEnable' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, IsOverwrite) == 0x000619, "Member 'UABP_Sub_RequestMontage_C::IsOverwrite' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, IsPlay) == 0x00061A, "Member 'UABP_Sub_RequestMontage_C::IsPlay' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, IsRequest) == 0x00061B, "Member 'UABP_Sub_RequestMontage_C::IsRequest' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, MovingActionBlendTime) == 0x000620, "Member 'UABP_Sub_RequestMontage_C::MovingActionBlendTime' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ReactionBlendTime) == 0x000628, "Member 'UABP_Sub_RequestMontage_C::ReactionBlendTime' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, MovingActionBlendAlpha) == 0x000630, "Member 'UABP_Sub_RequestMontage_C::MovingActionBlendAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ReactionBlendAlpha) == 0x000638, "Member 'UABP_Sub_RequestMontage_C::ReactionBlendAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, DeltaTimeX) == 0x000640, "Member 'UABP_Sub_RequestMontage_C::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, SSCharacter) == 0x000648, "Member 'UABP_Sub_RequestMontage_C::SSCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CurrentMaxSpeed) == 0x000650, "Member 'UABP_Sub_RequestMontage_C::CurrentMaxSpeed' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, TargetDeltaRotator) == 0x000658, "Member 'UABP_Sub_RequestMontage_C::TargetDeltaRotator' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CurrentPlayMontageSectionMovingAction) == 0x000670, "Member 'UABP_Sub_RequestMontage_C::CurrentPlayMontageSectionMovingAction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CurrentPlayMontageSectionAction) == 0x000678, "Member 'UABP_Sub_RequestMontage_C::CurrentPlayMontageSectionAction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CurrentPlayMontageSectionReaction) == 0x000680, "Member 'UABP_Sub_RequestMontage_C::CurrentPlayMontageSectionReaction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, KidanMontage) == 0x000688, "Member 'UABP_Sub_RequestMontage_C::KidanMontage' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, PreKidanSection) == 0x000690, "Member 'UABP_Sub_RequestMontage_C::PreKidanSection' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, PreKidanMontagePosition) == 0x000698, "Member 'UABP_Sub_RequestMontage_C::PreKidanMontagePosition' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, SubActionStateAnimInstance) == 0x0006A0, "Member 'UABP_Sub_RequestMontage_C::SubActionStateAnimInstance' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CheckBlendReaction) == 0x0006A8, "Member 'UABP_Sub_RequestMontage_C::CheckBlendReaction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CheckBlendAction) == 0x0006A9, "Member 'UABP_Sub_RequestMontage_C::CheckBlendAction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, CheckBlendMovingAction) == 0x0006AA, "Member 'UABP_Sub_RequestMontage_C::CheckBlendMovingAction' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, MontageComponent) == 0x0006B0, "Member 'UABP_Sub_RequestMontage_C::MontageComponent' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ReleseSectionAnimMontage) == 0x0006B8, "Member 'UABP_Sub_RequestMontage_C::ReleseSectionAnimMontage' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ReleseSection) == 0x0006C0, "Member 'UABP_Sub_RequestMontage_C::ReleseSection' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, ReleseSectionSparking) == 0x0006D0, "Member 'UABP_Sub_RequestMontage_C::ReleseSectionSparking' has a wrong offset!");
static_assert(offsetof(UABP_Sub_RequestMontage_C, BlastAnimation) == 0x0006E0, "Member 'UABP_Sub_RequestMontage_C::BlastAnimation' has a wrong offset!");

}

