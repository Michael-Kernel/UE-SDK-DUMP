#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Gas_Planet_Creator_2_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Gas_Planet_Creator_2_V2.BP_Gas_Planet_Creator_2_V2_C
// 0x03A0 (0x0630 - 0x0290)
class ABP_Gas_Planet_Creator_2_V2_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Rings;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Planet;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Root;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Atmosphere;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Atmosphere;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Planet;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Rings;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      SunLight;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        PlanetRadius;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AtmosphereHeight;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Atmosphere_Steps;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Scattering_Color;                                  // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Night_Color;                                       // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Atmosphere_Material;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Planet_Material;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Rings_Material;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Color_Shift;                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Color_Uniformity;                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Coverage;                           // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Frequency;                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Number_of_Stripes;                  // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Persistance;                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Shadows_Size;                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Shadows_Strength;                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Clouds_Speed;                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Clouds_Warp_Coefficient;            // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Equator_Clouds_Clouds_Wind_Speed;                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Equator_Clouds_Color_1;                            // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Equator_Clouds_Color_2;                            // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Equator_Clouds_Color_3;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Equator_Clouds_Color_4;                            // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Color_Shift;                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Color_Uniformity;                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Coverage;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Frequency;                          // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Number_of_Stripes;                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Persistance;                        // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Shadows_Size;                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Shadows_Strength;                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Speed;                              // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Warp_Coefficient;                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tropics_Clouds_Wind_Speed;                         // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tropics_Clouds_Color_1;                            // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tropics_Clouds_Color_2;                            // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tropics_Clouds_Color_3;                            // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tropics_Clouds_Color_4;                            // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Color_Shift;                           // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Color_Uniformity;                      // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Coverage;                              // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Frequency;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Number_of_Stripes;                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Persistance;                           // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Shadows_Size;                          // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Shadows_Strength;                      // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Speed;                                 // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Warp_Coefficient;                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deep_Clouds_Wind_Speed;                            // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Deep_Clouds_Color_1;                               // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Deep_Clouds_Color_2;                               // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Deep_Clouds_Color_3;                               // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Deep_Clouds_Color_4;                               // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Poles_Latitude;                                    // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Poles_Clouds_Frequency;                            // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poles_Color_1;                                     // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poles_Color_2;                                     // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poles_Color_3;                                     // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poles_Color_4;                                     // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Major_Cyclone_Position_X;                          // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Major_Cyclone_Position_Y;                          // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Major_Cyclone_Strength;                            // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor_Storms_Strength;                             // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Tile_Ratio;                                 // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inner_Edge;                                        // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_Edge;                                        // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Frequency_1;                                       // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Frequency_2;                                       // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Density;                                           // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Seed;                                              // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Edge_Hardness;                                     // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Strength;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Hardness;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scattering_Size;                                   // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scattering_Power;                                  // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rings_Color_1;                                     // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rings_Color_2;                                     // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rings_Color_3;                                     // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rings_Color_4;                                     // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sunset_Color_1;                                    // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sunset_Color_2;                                    // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rings_Scatering_Color;                             // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Gas_Planet_Creator_2_V2(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Gas_Planet_Creator_2_V2_C">();
	}
	static class ABP_Gas_Planet_Creator_2_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Gas_Planet_Creator_2_V2_C>();
	}
};
static_assert(alignof(ABP_Gas_Planet_Creator_2_V2_C) == 0x000008, "Wrong alignment on ABP_Gas_Planet_Creator_2_V2_C");
static_assert(sizeof(ABP_Gas_Planet_Creator_2_V2_C) == 0x000630, "Wrong size on ABP_Gas_Planet_Creator_2_V2_C");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, UberGraphFrame) == 0x000290, "Member 'ABP_Gas_Planet_Creator_2_V2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings) == 0x000298, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Planet) == 0x0002A0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Planet' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Root) == 0x0002A8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Atmosphere) == 0x0002B0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Atmosphere' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, DMI_Atmosphere) == 0x0002B8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::DMI_Atmosphere' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, DMI_Planet) == 0x0002C0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::DMI_Planet' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, DMI_Rings) == 0x0002C8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::DMI_Rings' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, SunLight) == 0x0002D0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::SunLight' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, PlanetRadius) == 0x0002D8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::PlanetRadius' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, AtmosphereHeight) == 0x0002E0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Atmosphere_Steps) == 0x0002E8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Atmosphere_Steps' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Scattering_Color) == 0x0002F0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Scattering_Color' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Night_Color) == 0x000300, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Night_Color' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Atmosphere_Material) == 0x000310, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Atmosphere_Material' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Planet_Material) == 0x000318, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Planet_Material' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings_Material) == 0x000320, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings_Material' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Color_Shift) == 0x000328, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Color_Shift' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Color_Uniformity) == 0x000330, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Color_Uniformity' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Coverage) == 0x000338, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Coverage' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Frequency) == 0x000340, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Number_of_Stripes) == 0x000348, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Number_of_Stripes' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Persistance) == 0x000350, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Persistance' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Shadows_Size) == 0x000358, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Shadows_Size' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Shadows_Strength) == 0x000360, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Shadows_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Clouds_Speed) == 0x000368, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Clouds_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Clouds_Warp_Coefficient) == 0x000370, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Clouds_Warp_Coefficient' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Clouds_Wind_Speed) == 0x000378, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Clouds_Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Color_1) == 0x000380, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Color_2) == 0x000390, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Color_3) == 0x0003A0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Color_3' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Equator_Clouds_Color_4) == 0x0003B0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Equator_Clouds_Color_4' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Color_Shift) == 0x0003C0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Color_Shift' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Color_Uniformity) == 0x0003C8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Color_Uniformity' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Coverage) == 0x0003D0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Coverage' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Frequency) == 0x0003D8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Number_of_Stripes) == 0x0003E0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Number_of_Stripes' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Persistance) == 0x0003E8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Persistance' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Shadows_Size) == 0x0003F0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Shadows_Size' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Shadows_Strength) == 0x0003F8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Shadows_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Speed) == 0x000400, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Warp_Coefficient) == 0x000408, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Warp_Coefficient' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Wind_Speed) == 0x000410, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Color_1) == 0x000418, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Color_2) == 0x000428, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Color_3) == 0x000438, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Color_3' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Tropics_Clouds_Color_4) == 0x000448, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Tropics_Clouds_Color_4' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Color_Shift) == 0x000458, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Color_Shift' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Color_Uniformity) == 0x000460, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Color_Uniformity' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Coverage) == 0x000468, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Coverage' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Frequency) == 0x000470, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Number_of_Stripes) == 0x000478, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Number_of_Stripes' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Persistance) == 0x000480, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Persistance' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Shadows_Size) == 0x000488, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Shadows_Size' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Shadows_Strength) == 0x000490, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Shadows_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Speed) == 0x000498, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Warp_Coefficient) == 0x0004A0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Warp_Coefficient' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Wind_Speed) == 0x0004A8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Color_1) == 0x0004B0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Color_2) == 0x0004C0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Color_3) == 0x0004D0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Color_3' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Deep_Clouds_Color_4) == 0x0004E0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Deep_Clouds_Color_4' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Poles_Latitude) == 0x0004F0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Poles_Latitude' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Poles_Clouds_Frequency) == 0x0004F8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Poles_Clouds_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Poles_Color_1) == 0x000500, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Poles_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Poles_Color_2) == 0x000510, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Poles_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Poles_Color_3) == 0x000520, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Poles_Color_3' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Poles_Color_4) == 0x000530, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Poles_Color_4' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Major_Cyclone_Position_X) == 0x000540, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Major_Cyclone_Position_X' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Major_Cyclone_Position_Y) == 0x000548, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Major_Cyclone_Position_Y' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Major_Cyclone_Strength) == 0x000550, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Major_Cyclone_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Minor_Storms_Strength) == 0x000558, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Minor_Storms_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Global_Tile_Ratio) == 0x000560, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Global_Tile_Ratio' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Inner_Edge) == 0x000568, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Inner_Edge' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Outer_Edge) == 0x000570, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Outer_Edge' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Frequency_1) == 0x000578, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Frequency_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Frequency_2) == 0x000580, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Frequency_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Density) == 0x000588, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Density' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Seed) == 0x000590, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Edge_Hardness) == 0x000598, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Edge_Hardness' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Shadow_Strength) == 0x0005A0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Shadow_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Shadow_Hardness) == 0x0005A8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Shadow_Hardness' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Scattering_Size) == 0x0005B0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Scattering_Size' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Scattering_Power) == 0x0005B8, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Scattering_Power' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings_Color_1) == 0x0005C0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings_Color_2) == 0x0005D0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings_Color_3) == 0x0005E0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings_Color_3' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings_Color_4) == 0x0005F0, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings_Color_4' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Sunset_Color_1) == 0x000600, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Sunset_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Sunset_Color_2) == 0x000610, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Sunset_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_Gas_Planet_Creator_2_V2_C, Rings_Scatering_Color) == 0x000620, "Member 'ABP_Gas_Planet_Creator_2_V2_C::Rings_Scatering_Color' has a wrong offset!");

}

