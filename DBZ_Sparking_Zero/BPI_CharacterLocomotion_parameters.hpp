#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterLocomotion

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EAnimStateMachineEventType_structs.hpp"
#include "Engine_structs.hpp"
#include "ECharacterNumbReactionState_structs.hpp"
#include "ECharacterMoveStandUpDirection_structs.hpp"
#include "ECharacterMoveStandUpState_structs.hpp"


namespace SDK::Params
{

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementXInput
// 0x0020 (0x0020 - 0x0000)
struct BPI_CharacterLocomotion_C_AddCharacterMovementXInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_AddCharacterMovementXInput) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_AddCharacterMovementXInput");
static_assert(sizeof(BPI_CharacterLocomotion_C_AddCharacterMovementXInput) == 0x000020, "Wrong size on BPI_CharacterLocomotion_C_AddCharacterMovementXInput");
static_assert(offsetof(BPI_CharacterLocomotion_C_AddCharacterMovementXInput, WorldDirection) == 0x000000, "Member 'BPI_CharacterLocomotion_C_AddCharacterMovementXInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_AddCharacterMovementXInput, Value) == 0x000018, "Member 'BPI_CharacterLocomotion_C_AddCharacterMovementXInput::Value' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementXYInput
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterLocomotion_C_AddCharacterMovementXYInput final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_AddCharacterMovementXYInput) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_AddCharacterMovementXYInput");
static_assert(sizeof(BPI_CharacterLocomotion_C_AddCharacterMovementXYInput) == 0x000010, "Wrong size on BPI_CharacterLocomotion_C_AddCharacterMovementXYInput");
static_assert(offsetof(BPI_CharacterLocomotion_C_AddCharacterMovementXYInput, Value) == 0x000000, "Member 'BPI_CharacterLocomotion_C_AddCharacterMovementXYInput::Value' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementYInput
// 0x0020 (0x0020 - 0x0000)
struct BPI_CharacterLocomotion_C_AddCharacterMovementYInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_AddCharacterMovementYInput) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_AddCharacterMovementYInput");
static_assert(sizeof(BPI_CharacterLocomotion_C_AddCharacterMovementYInput) == 0x000020, "Wrong size on BPI_CharacterLocomotion_C_AddCharacterMovementYInput");
static_assert(offsetof(BPI_CharacterLocomotion_C_AddCharacterMovementYInput, WorldDirection) == 0x000000, "Member 'BPI_CharacterLocomotion_C_AddCharacterMovementYInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_AddCharacterMovementYInput, Value) == 0x000018, "Member 'BPI_CharacterLocomotion_C_AddCharacterMovementYInput::Value' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementZInputLast
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast");
static_assert(sizeof(BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast) == 0x000008, "Wrong size on BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast");
static_assert(offsetof(BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast, Value) == 0x000000, "Member 'BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast::Value' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionDetailStatus
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         OutLocomotionDetailStatus;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionDetailStatus");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionDetailStatus) == 0x000001, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionDetailStatus");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionDetailStatus, OutLocomotionDetailStatus) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionDetailStatus::OutLocomotionDetailStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionNumbReaction
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionNumbReaction final
{
public:
	ECharacterNumbReactionState                   State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Front;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionNumbReaction) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionNumbReaction");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionNumbReaction) == 0x000002, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionNumbReaction");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionNumbReaction, State) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionNumbReaction::State' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionNumbReaction, Front) == 0x000001, "Member 'BPI_CharacterLocomotion_C_GetLocomotionNumbReaction::Front' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForAction
// 0x0098 (0x0098 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForAction final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSpeed;                                          // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed;                                     // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForAction");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction) == 0x000098, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForAction");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, IsNearMode) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::IsNearMode' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, IsInAir) == 0x000081, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, MaxSpeed) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForAction, NearModeSpeed) == 0x000090, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForAction::NearModeSpeed' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForBurstDash
// 0x00A0 (0x00A0 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         SplineComponent;                                   // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SplineNowDistance;                                 // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0099(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash) == 0x0000A0, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, IsInAir) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, LocomotionStatus) == 0x000081, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, ZBurstDashStatus) == 0x000082, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, SplineComponent) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::SplineComponent' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, SplineNowDistance) == 0x000090, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, IsRequestResetStateMachine) == 0x000098, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash, ResetStateMachineStatus) == 0x000099, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForBurstSmash
// 0x00A0 (0x00A0 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         SplineComponent;                                   // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SplineNowDistance;                                 // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0099(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash) == 0x0000A0, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, IsInAir) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, LocomotionStatus) == 0x000081, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, ZBurstDashStatus) == 0x000082, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, SplineComponent) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::SplineComponent' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, SplineNowDistance) == 0x000090, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::SplineNowDistance' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, IsRequestResetStateMachine) == 0x000098, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash, ResetStateMachineStatus) == 0x000099, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForDashUkemi
// 0x0138 (0x0138 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus;                                  // 0x00C9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x00D0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EKoratDashUkemiState                          DashUkemiStatus;                                   // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUkemiType                           DashUkemiType;                                     // 0x00E9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForecastBlowHit;                                 // 0x00EA(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitLocation;                           // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForecastBlowHitTime;                               // 0x0108(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             ForecastBlowHitMapAttribute;                       // 0x0110(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForecastBlowHitNormal;                             // 0x0118(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0131(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi) == 0x000138, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, IsInAir) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, Velocity) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, VelocityZ) == 0x0000A0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::VelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, MaxSpeed) == 0x0000A8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, InputVector) == 0x0000B0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::InputVector' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, InputZ) == 0x0000C0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::InputZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, LocomotionStatus) == 0x0000C8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, DragonDashStatus) == 0x0000C9, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::DragonDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, DragonDashRotation) == 0x0000D0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::DragonDashRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, DashUkemiStatus) == 0x0000E8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, DashUkemiType) == 0x0000E9, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::DashUkemiType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, IsForecastBlowHit) == 0x0000EA, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::IsForecastBlowHit' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitLocation) == 0x0000F0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitLocation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitTime) == 0x000108, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitTime' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitMapAttribute) == 0x000110, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitMapAttribute' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ForecastBlowHitNormal) == 0x000118, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ForecastBlowHitNormal' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, IsRequestResetStateMachine) == 0x000130, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi, ResetStateMachineStatus) == 0x000131, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForDashUpDown
// 0x0088 (0x0088 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownState                         DashUpDownStatus;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDashUpDownType                          DashUpDownType;                                    // 0x0083(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0085(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown) == 0x000088, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, IsInAir) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, LocomotionStatus) == 0x000081, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, DashUpDownStatus) == 0x000082, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, DashUpDownType) == 0x000083, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::DashUpDownType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, IsRequestResetStateMachine) == 0x000084, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown, ResetStateMachineStatus) == 0x000085, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForHighSpeedMove
// 0x0108 (0x0108 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetDistance;                                    // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x008A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed;                                     // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          ShortDashStatus;                                   // 0x00D9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShortDashAdditionalMaxSpeed;                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalSpeed;                          // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashMoveTimer;                                // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0101(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0102(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove) == 0x000108, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, TargetDistance) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::TargetDistance' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, DirectionY) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, DirectionZ) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, NearMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, BattleMoveAlpha) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, IsNearMode) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::IsNearMode' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, IsLockOn) == 0x000089, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::IsLockOn' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, IsInAir) == 0x00008A, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, Velocity) == 0x000090, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, VelocityZ) == 0x0000A8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::VelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, MaxSpeed) == 0x0000B0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, NearModeSpeed) == 0x0000B8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::NearModeSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, InputVector) == 0x0000C0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::InputVector' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, InputZ) == 0x0000D0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::InputZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, LocomotionStatus) == 0x0000D8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ShortDashStatus) == 0x0000D9, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ShortDashAdditionalMaxSpeed) == 0x0000E0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ShortDashAdditionalSpeed) == 0x0000E8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ShortDashAdditionalSpeedCurve) == 0x0000F0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ShortDashMoveTimer) == 0x0000F8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, HighSpeedMoveStatus) == 0x000100, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, IsRequestResetStateMachine) == 0x000101, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove, ResetStateMachineStatus) == 0x000102, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForIdleMove
// 0x0538 (0x0538 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetDistance;                                    // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x008A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed;                                     // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             EventHitArgHit;                                    // 0x00D8(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsEnableMoveEffect;                                // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveEffectStartSpeed;                              // 0x01C8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveEffectEndSpeed;                                // 0x01D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x01D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratShortDashState                          ShortDashStatus;                                   // 0x01D9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShortDashAdditionalMaxSpeed;                       // 0x01E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalSpeed;                          // 0x01E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x01F0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashMoveTimer;                                // 0x01F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus;                                  // 0x0200(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x0208(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EKoratBlowState                               BlowStatus;                                        // 0x0220(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                BlowType;                                          // 0x0221(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlowIsFront;                                       // 0x0222(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_223[0x5];                                      // 0x0223(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              BlowHitBackMovementData;                           // 0x0228(0x02E0)(Parm, OutParm)
	double                                        BlowHitSpeedNormal;                                // 0x0508(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowHitSpeedParallel;                              // 0x0510(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundSSpeedMax;                                // 0x0518(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundMSpeedMax;                                // 0x0520(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlowReactionLevel;                                 // 0x0528(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       DragonHomingStatus;                                // 0x052C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       RevengeDashStatus;                                 // 0x052D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestPlayIdle;                                 // 0x052E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTransitionRelaxIdle;                             // 0x052F(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratActionIdleType                          ActionIdleType;                                    // 0x0530(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0531(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0532(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       BlastDashStatus;                                   // 0x0533(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove) == 0x000538, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, TargetDistance) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::TargetDistance' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, DirectionY) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, DirectionZ) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, NearMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BattleMoveAlpha) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsNearMode) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsNearMode' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsLockOn) == 0x000089, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsLockOn' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsInAir) == 0x00008A, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, Velocity) == 0x000090, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, VelocityZ) == 0x0000A8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::VelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, MaxSpeed) == 0x0000B0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, NearModeSpeed) == 0x0000B8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::NearModeSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, InputVector) == 0x0000C0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::InputVector' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, InputZ) == 0x0000D0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::InputZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, EventHitArgHit) == 0x0000D8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::EventHitArgHit' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsEnableMoveEffect) == 0x0001C0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsEnableMoveEffect' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, MoveEffectStartSpeed) == 0x0001C8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::MoveEffectStartSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, MoveEffectEndSpeed) == 0x0001D0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::MoveEffectEndSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, LocomotionStatus) == 0x0001D8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ShortDashStatus) == 0x0001D9, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ShortDashAdditionalMaxSpeed) == 0x0001E0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ShortDashAdditionalSpeed) == 0x0001E8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ShortDashAdditionalSpeedCurve) == 0x0001F0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ShortDashMoveTimer) == 0x0001F8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, DragonDashStatus) == 0x000200, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::DragonDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, DragonDashRotation) == 0x000208, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::DragonDashRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowStatus) == 0x000220, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowType) == 0x000221, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowIsFront) == 0x000222, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowIsFront' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowHitBackMovementData) == 0x000228, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowHitBackMovementData' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowHitSpeedNormal) == 0x000508, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowHitSpeedParallel) == 0x000510, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowBoundSSpeedMax) == 0x000518, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowBoundMSpeedMax) == 0x000520, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlowReactionLevel) == 0x000528, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, DragonHomingStatus) == 0x00052C, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, RevengeDashStatus) == 0x00052D, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::RevengeDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsRequestPlayIdle) == 0x00052E, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsRequestPlayIdle' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsTransitionRelaxIdle) == 0x00052F, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsTransitionRelaxIdle' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ActionIdleType) == 0x000530, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ActionIdleType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, IsRequestResetStateMachine) == 0x000531, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, ResetStateMachineStatus) == 0x000532, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::ResetStateMachineStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove, BlastDashStatus) == 0x000533, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove::BlastDashStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForJump
// 0x0080 (0x0080 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForJump final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               JumpStatus;                                        // 0x0079(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x007A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x007B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForJump");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump) == 0x000080, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForJump");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, DirectionY) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, DirectionZ) == 0x000050, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, Velocity) == 0x000058, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, VelocityZ) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::VelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, LocomotionStatus) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, JumpStatus) == 0x000079, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::JumpStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, IsRequestResetStateMachine) == 0x00007A, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForJump, ResetStateMachineStatus) == 0x00007B, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForJump::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForLocomotion
// 0x0070 (0x0070 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratJumpState                               JumpStatus;                                        // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               StepStatus;                                        // 0x006A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                StepType;                                          // 0x006B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion) == 0x000070, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, DirectionY) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, DirectionZ) == 0x000050, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, NearMoveAlpha) == 0x000058, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, BattleMoveAlpha) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, LocomotionStatus) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, JumpStatus) == 0x000069, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::JumpStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, StepStatus) == 0x00006A, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::StepStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion, StepType) == 0x00006B, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion::StepType' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForMobileMonitoring
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring final
{
public:
	bool                                          IsObstacleDetection;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring) == 0x000001, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring, IsObstacleDetection) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring::IsObstacleDetection' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForMoveStandUp
// 0x00E0 (0x00E0 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetDistance;                                    // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x008A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed;                                     // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x00D9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x00DA(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp) == 0x0000E0, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, TargetDistance) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::TargetDistance' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, DirectionY) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, DirectionZ) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, NearMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, BattleMoveAlpha) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, IsNearMode) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::IsNearMode' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, IsLockOn) == 0x000089, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::IsLockOn' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, IsInAir) == 0x00008A, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, Velocity) == 0x000090, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, VelocityZ) == 0x0000A8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::VelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, MaxSpeed) == 0x0000B0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, NearModeSpeed) == 0x0000B8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::NearModeSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, InputVector) == 0x0000C0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::InputVector' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, InputZ) == 0x0000D0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::InputZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, LocomotionStatus) == 0x0000D8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, IsRequestResetStateMachine) == 0x0000D9, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp, ResetStateMachineStatus) == 0x0000DA, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForNumbReaction
// 0x0003 (0x0003 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction final
{
public:
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction) == 0x000003, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction, LocomotionStatus) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction, IsRequestResetStateMachine) == 0x000001, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction, ResetStateMachineStatus) == 0x000002, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForPostPhysics
// 0x0108 (0x0108 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed;                                     // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InputVector;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputZ;                                            // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableMoveEffect;                                // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveEffectStartSpeed;                              // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveEffectEndSpeed;                                // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus;                                  // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics) == 0x000108, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, IsNearMode) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::IsNearMode' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, IsInAir) == 0x000081, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, Velocity) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, VelocityZ) == 0x0000A0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::VelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, MaxSpeed) == 0x0000A8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::MaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, NearModeSpeed) == 0x0000B0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::NearModeSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, InputVector) == 0x0000B8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::InputVector' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, InputZ) == 0x0000C8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::InputZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, IsEnableMoveEffect) == 0x0000D0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::IsEnableMoveEffect' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, MoveEffectStartSpeed) == 0x0000D8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::MoveEffectStartSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, MoveEffectEndSpeed) == 0x0000E0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::MoveEffectEndSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, DragonDashStatus) == 0x0000E8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::DragonDashStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics, DragonDashRotation) == 0x0000F0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics::DragonDashRotation' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForStanReaction
// 0x0005 (0x0005 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction final
{
public:
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStunReactionState                       StunReactionStatus;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StunReactionIsFront;                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction) == 0x000005, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction, LocomotionStatus) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction, StunReactionStatus) == 0x000001, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction::StunReactionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction, StunReactionIsFront) == 0x000002, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction::StunReactionIsFront' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction, IsRequestResetStateMachine) == 0x000003, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction, ResetStateMachineStatus) == 0x000004, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForStep
// 0x0070 (0x0070 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForStep final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepState                               StepStatus;                                        // 0x006A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                StepType;                                          // 0x006B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x006D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForStep");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep) == 0x000070, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForStep");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, DirectionY) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, DirectionZ) == 0x000050, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, NearMoveAlpha) == 0x000058, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, BattleMoveAlpha) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, IsInAir) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, LocomotionStatus) == 0x000069, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, StepStatus) == 0x00006A, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::StepStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, StepType) == 0x00006B, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::StepType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, IsRequestResetStateMachine) == 0x00006C, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForStep, ResetStateMachineStatus) == 0x00006D, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForStep::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForWallUkemi
// 0x00D0 (0x00D0 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DirectionY;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         LocomotionStatus;                                  // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratWallUkemiState                          WallUkemiStatus;                                   // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForecastBlowHit;                                 // 0x0083(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitLocation;                           // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForecastBlowHitTime;                               // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             ForecastBlowHitMapAttribute;                       // 0x00A8(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForecastBlowHitNormal;                             // 0x00B0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x00C9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi) == 0x0000D0, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, Speed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::Speed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, XYSpeed) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ZSpeed) == 0x000010, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ZSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, LastVelocityRot) == 0x000018, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, CharacterRot) == 0x000030, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::CharacterRot' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ToTargetRotation) == 0x000048, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, DirectionY) == 0x000060, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::DirectionY' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, DirectionZ) == 0x000068, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::DirectionZ' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, NearMoveAlpha) == 0x000070, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, BattleMoveAlpha) == 0x000078, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, IsInAir) == 0x000080, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::IsInAir' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, LocomotionStatus) == 0x000081, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::LocomotionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, WallUkemiStatus) == 0x000082, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::WallUkemiStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, IsForecastBlowHit) == 0x000083, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::IsForecastBlowHit' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitLocation) == 0x000088, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitLocation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitTime) == 0x0000A0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitTime' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitMapAttribute) == 0x0000A8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitMapAttribute' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ForecastBlowHitNormal) == 0x0000B0, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ForecastBlowHitNormal' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, IsRequestResetStateMachine) == 0x0000C8, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi, ResetStateMachineStatus) == 0x0000C9, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi::ResetStateMachineStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterMoveStandUp
// 0x0003 (0x0003 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp final
{
public:
	ECharacterMoveStandUpState                    ActionStatus;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionIsFront;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                ActionDirection;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp) == 0x000003, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp, ActionStatus) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp::ActionStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp, ActionIsFront) == 0x000001, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp::ActionIsFront' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp, ActionDirection) == 0x000002, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp::ActionDirection' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterSuperHighSpeedMoveStr
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr final
{
public:
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr) == 0x000001, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr, HighSpeedMoveStatus) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr::HighSpeedMoveStatus' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetRunningAction
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterLocomotion_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   OutRunningAction;                                  // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutRunningSection;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetRunningAction) == 0x000004, "Wrong alignment on BPI_CharacterLocomotion_C_GetRunningAction");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetRunningAction) == 0x000010, "Wrong size on BPI_CharacterLocomotion_C_GetRunningAction");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetRunningAction, OutRunningAction) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetRunningAction::OutRunningAction' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetRunningAction, OutRunningSection) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetRunningAction::OutRunningSection' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.IsEnableAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterLocomotion_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_IsEnableAction) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_IsEnableAction");
static_assert(sizeof(BPI_CharacterLocomotion_C_IsEnableAction) == 0x000001, "Wrong size on BPI_CharacterLocomotion_C_IsEnableAction");
static_assert(offsetof(BPI_CharacterLocomotion_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BPI_CharacterLocomotion_C_IsEnableAction::IsEnable' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.IsNearRangeNow
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterLocomotion_C_IsNearRangeNow final
{
public:
	bool                                          IsNear;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_IsNearRangeNow) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_IsNearRangeNow");
static_assert(sizeof(BPI_CharacterLocomotion_C_IsNearRangeNow) == 0x000001, "Wrong size on BPI_CharacterLocomotion_C_IsNearRangeNow");
static_assert(offsetof(BPI_CharacterLocomotion_C_IsNearRangeNow, IsNear) == 0x000000, "Member 'BPI_CharacterLocomotion_C_IsNearRangeNow::IsNear' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnBlowAnimEvent
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterLocomotion_C_OnBlowAnimEvent final
{
public:
	EKoratBlowState                               BlowState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimStateMachineEvent;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_OnBlowAnimEvent) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_OnBlowAnimEvent");
static_assert(sizeof(BPI_CharacterLocomotion_C_OnBlowAnimEvent) == 0x000002, "Wrong size on BPI_CharacterLocomotion_C_OnBlowAnimEvent");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnBlowAnimEvent, BlowState) == 0x000000, "Member 'BPI_CharacterLocomotion_C_OnBlowAnimEvent::BlowState' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnBlowAnimEvent, AnimStateMachineEvent) == 0x000001, "Member 'BPI_CharacterLocomotion_C_OnBlowAnimEvent::AnimStateMachineEvent' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnDragonDashAnimEvent
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterLocomotion_C_OnDragonDashAnimEvent final
{
public:
	EKoratDragonDashState                         DragonDashState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimStateMachineEvent;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_OnDragonDashAnimEvent) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_OnDragonDashAnimEvent");
static_assert(sizeof(BPI_CharacterLocomotion_C_OnDragonDashAnimEvent) == 0x000002, "Wrong size on BPI_CharacterLocomotion_C_OnDragonDashAnimEvent");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnDragonDashAnimEvent, DragonDashState) == 0x000000, "Member 'BPI_CharacterLocomotion_C_OnDragonDashAnimEvent::DragonDashState' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnDragonDashAnimEvent, AnimStateMachineEvent) == 0x000001, "Member 'BPI_CharacterLocomotion_C_OnDragonDashAnimEvent::AnimStateMachineEvent' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnDragonHomingAnimEvent
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent final
{
public:
	EKoratDragonHomingState                       DragonHomingState;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimStateMachineEvent;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent");
static_assert(sizeof(BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent) == 0x000002, "Wrong size on BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent, DragonHomingState) == 0x000000, "Member 'BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent::DragonHomingState' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent, AnimStateMachineEvent) == 0x000001, "Member 'BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent::AnimStateMachineEvent' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnHit
// 0x0150 (0x0150 - 0x0000)
struct BPI_CharacterLocomotion_C_OnHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0068(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BPI_CharacterLocomotion_C_OnHit) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_OnHit");
static_assert(sizeof(BPI_CharacterLocomotion_C_OnHit) == 0x000150, "Wrong size on BPI_CharacterLocomotion_C_OnHit");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, MyComp) == 0x000000, "Member 'BPI_CharacterLocomotion_C_OnHit::MyComp' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, Other) == 0x000008, "Member 'BPI_CharacterLocomotion_C_OnHit::Other' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, OtherComp) == 0x000010, "Member 'BPI_CharacterLocomotion_C_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, bSelfMoved) == 0x000018, "Member 'BPI_CharacterLocomotion_C_OnHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, HitLocation) == 0x000020, "Member 'BPI_CharacterLocomotion_C_OnHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, HitNormal) == 0x000038, "Member 'BPI_CharacterLocomotion_C_OnHit::HitNormal' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, NormalImpulse) == 0x000050, "Member 'BPI_CharacterLocomotion_C_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnHit, Hit) == 0x000068, "Member 'BPI_CharacterLocomotion_C_OnHit::Hit' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnLanded
// 0x00E8 (0x00E8 - 0x0000)
struct BPI_CharacterLocomotion_C_OnLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BPI_CharacterLocomotion_C_OnLanded) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_OnLanded");
static_assert(sizeof(BPI_CharacterLocomotion_C_OnLanded) == 0x0000E8, "Wrong size on BPI_CharacterLocomotion_C_OnLanded");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnLanded, Hit) == 0x000000, "Member 'BPI_CharacterLocomotion_C_OnLanded::Hit' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnRequestBlowReaction
// 0x000C (0x000C - 0x0000)
struct BPI_CharacterLocomotion_C_OnRequestBlowReaction final
{
public:
	struct FKoratActionDataList                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          InFrontHit;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_OnRequestBlowReaction) == 0x000004, "Wrong alignment on BPI_CharacterLocomotion_C_OnRequestBlowReaction");
static_assert(sizeof(BPI_CharacterLocomotion_C_OnRequestBlowReaction) == 0x00000C, "Wrong size on BPI_CharacterLocomotion_C_OnRequestBlowReaction");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnRequestBlowReaction, InAction) == 0x000000, "Member 'BPI_CharacterLocomotion_C_OnRequestBlowReaction::InAction' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_OnRequestBlowReaction, InFrontHit) == 0x000008, "Member 'BPI_CharacterLocomotion_C_OnRequestBlowReaction::InFrontHit' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetCurrentAnimTimeRemainingFraction
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction final
{
public:
	class FName                                   InCurrentStateName;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InFraction;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction");
static_assert(sizeof(BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction) == 0x000010, "Wrong size on BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction, InCurrentStateName) == 0x000000, "Member 'BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction::InCurrentStateName' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction, InFraction) == 0x000008, "Member 'BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction::InFraction' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetEnableMovementInput
// 0x0003 (0x0003 - 0x0000)
struct BPI_CharacterLocomotion_C_SetEnableMovementInput final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeJumpToFly;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             ActionFinishReason;                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_SetEnableMovementInput) == 0x000001, "Wrong alignment on BPI_CharacterLocomotion_C_SetEnableMovementInput");
static_assert(sizeof(BPI_CharacterLocomotion_C_SetEnableMovementInput) == 0x000003, "Wrong size on BPI_CharacterLocomotion_C_SetEnableMovementInput");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetEnableMovementInput, IsEnable) == 0x000000, "Member 'BPI_CharacterLocomotion_C_SetEnableMovementInput::IsEnable' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetEnableMovementInput, ChangeJumpToFly) == 0x000001, "Member 'BPI_CharacterLocomotion_C_SetEnableMovementInput::ChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetEnableMovementInput, ActionFinishReason) == 0x000002, "Member 'BPI_CharacterLocomotion_C_SetEnableMovementInput::ActionFinishReason' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetHeightAxisValue
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterLocomotion_C_SetHeightAxisValue final
{
public:
	double                                        HeightAxisValue;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_SetHeightAxisValue) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_SetHeightAxisValue");
static_assert(sizeof(BPI_CharacterLocomotion_C_SetHeightAxisValue) == 0x000008, "Wrong size on BPI_CharacterLocomotion_C_SetHeightAxisValue");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetHeightAxisValue, HeightAxisValue) == 0x000000, "Member 'BPI_CharacterLocomotion_C_SetHeightAxisValue::HeightAxisValue' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetInputVector
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterLocomotion_C_SetInputVector final
{
public:
	struct FVector2D                              InputVector;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_SetInputVector) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_SetInputVector");
static_assert(sizeof(BPI_CharacterLocomotion_C_SetInputVector) == 0x000010, "Wrong size on BPI_CharacterLocomotion_C_SetInputVector");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetInputVector, InputVector) == 0x000000, "Member 'BPI_CharacterLocomotion_C_SetInputVector::InputVector' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetMovingRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterLocomotion_C_SetMovingRotation final
{
public:
	struct FRotator                               MovingRotation;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharacterLocomotion_C_SetMovingRotation) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_SetMovingRotation");
static_assert(sizeof(BPI_CharacterLocomotion_C_SetMovingRotation) == 0x000018, "Wrong size on BPI_CharacterLocomotion_C_SetMovingRotation");
static_assert(offsetof(BPI_CharacterLocomotion_C_SetMovingRotation, MovingRotation) == 0x000000, "Member 'BPI_CharacterLocomotion_C_SetMovingRotation::MovingRotation' has a wrong offset!");

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForCamera
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera final
{
public:
	double                                        XYSpeed;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus;                                  // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera) == 0x000008, "Wrong alignment on BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera");
static_assert(sizeof(BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera) == 0x000010, "Wrong size on BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera, XYSpeed) == 0x000000, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera::XYSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera, IsLockOn) == 0x000008, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera::IsLockOn' has a wrong offset!");
static_assert(offsetof(BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera, DragonDashStatus) == 0x000009, "Member 'BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera::DragonDashStatus' has a wrong offset!");

}

