#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TransitionFlowBaseComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TransitionFlowBaseComponent.BP_TransitionFlowBaseComponent_C
// 0x00E0 (0x0398 - 0x02B8)
class UBP_TransitionFlowBaseComponent_C : public UKoratCharacterTransitionFlowComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_Character_C*                        BPCharacter;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UKoratCharacterSubActionStateAnimInstance* KoratCharacterSubActionStateAnimInstance;          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          A_T_;                                              // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   W______;                                           // 0x02D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimIndex;                                         // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartTurn;                                       // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnimTurn;                                        // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   _Kn__n_____;                                       // 0x02E4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimIndexOfOpponent;                               // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartTurnOfOpponent;                             // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnimTurnOfOpponent;                              // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ____j_;                                            // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   __Hn_____;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             W__n__;                                            // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKoratActionDataList                   W__Bn__M_____;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   W__Bn________;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ________Bn_____;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   ________Bn______;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitingAction;                                  // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UnfavorableTurningSection;                         // 0x0334(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UnfavorableTurning;                                // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _____n__;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKoratActionDataList>           KidanAction;                                       // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PreliminaryTurningNoMove;                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreliminaryTurningForceAction;                     // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionSubBase_C*       PreliminaryLocomotionSubBase;                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         PreliminaryLocomotionStatus;                       // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             PreliminaryActionFinishReason;                     // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           _____M;                                            // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   _____Minusn_____n_____;                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ________K_nw_K;                                    // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   _______;                                           // 0x038C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLinkOpponent;                                    // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyReactionDirection();
	bool ChangeReaction(const struct FKoratActionDataList& InAction);
	struct FRotator ComputeTargetRotationTowardOpponent(EKoratActionRotationBaseDirection InRotationBaseDirection);
	void End_Preliminary_Turning();
	void EndUnfavorableTurning();
	void ExecuteUbergraph_BP_TransitionFlowBaseComponent(int32 EntryPoint);
	void FlowConditionsActionElapsedTime(float InTime, EKoratInequalitySignType InInequalitySign, ESSFlowConditionsJudgmentType* OutJudgment);
	void FlowConditionsGroundType(ESSFlowConditionsGroundType* OutGroundType);
	void FlowConditionsHaveBeenMet(ESSFlowConditionsJudgmentType* OutJudgment);
	void FlowConditionsLocomotionDetailStatus(ESSFlowConditionsJudgmentType* OutJudgment, const TArray<EKoratCharacterLocomotionDetailStatus>& InCompareDetailList);
	void FlowConditionsNearMode(ESSFlowConditionsJudgmentType* OutJudgment);
	void FlowConditionsShakeOffDirection(ESSFlowConditionsInputDirectionType* OutDirection);
	void FlowConditionsSuccessSuperCounter(ESSFlowConditionsJudgmentType* OutJudgment);
	void FlowConditionsTargetVanishingAppearWait(ESSFlowConditionsJudgmentType* OutJudgment);
	void FlowConditionsUsableCurrentLockonState(const EKoratBlastSlotType InSlot, ESSFlowConditionsJudgmentType* OutJudgment);
	void Get_Current_Action(struct FKoratActionDataList* CurrentAction);
	void GetActionTargetComponent(class USSCharacterActionTargetComponent** ActionTargetComponent);
	void GetBpCharacter(class ABP_Character_C** BPCharacter_0);
	void GetKoratCharacterSubActionStateAnimInstance(class UKoratCharacterSubActionStateAnimInstance** SubActionStateAnimInstance);
	void GetLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent);
	void GetMontageComponent(class UBP_CharacterMontageComponent_C** MontageComponent);
	void GetSSCharacter(class ASSCharacter** SSCharacter_0);
	void GetTurnAngle(double* TurnAngle);
	void HT_____k__Y_();
	void IsNeedTurn(bool* IsNeedTurn_0);
	bool IsTransitingAction();
	void OnTransitAction(const struct FKoratActionDataList& InAction);
	void ProcessReaction();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetCollision(const struct FKoratActionDataList& InAction);
	void ResetParamTransitAction();
	void ResetReactionDirection();
	void ResetTargetRotation(class UKoratCharacterMovementComponent* InCharacterMovement, EKoratActionRotationBaseDirection InRotationBaseDirection, EKoratActionBodyYawMode InBodyYawMode, EKoratActionBodyPitchMode InBodyPitchMode);
	void SetTransitionDestination(const struct FKoratActionDataList& InAction, bool InIsStartTurn, bool InIsAnimTurn, class FName InTurningSection, bool IsNoTurnBeforeTransition);
	void SetTransitionDestinationAnimIndex(const struct FKoratActionDataList& InAction, int32 InAnimIndex, bool InIsStartTurn, bool InIsAnimTurn, class FName InTurningSection);
	void SetTransitionDestinationOfOpponent(const struct FKoratActionDataList& InAction, bool InIsStartTurn, bool InIsAnimTurn, bool InLinkOpponent);
	void SetTurningAndTransitionDestination(const struct FKoratActionDataList& InTurningAction, const struct FKoratActionDataList& InAction, bool InIsAnimTurn, bool InIsTurnNoMove, bool InIsForceTurnAction);
	void Sparking____L___();
	void StartPreliminaryTurning();
	void StartUnfavorableTurning();
	void StopPreliminaryTurning(bool InNoEventCancel);
	void StopUnfavorableTurning();
	void Transit_Moving_Action(const struct FKoratActionDataList& InAction);
	double TransitAction(const struct FKoratActionDataList& InAction);
	double TransitActionInstantly(const struct FKoratActionDataList& InAction);
	void UpdateMovementProperty(class UKoratCharacterMovementComponent* InCharacterMovement, const struct FKoratActionDataList& InAction);
	void UpdateReferenceLocationAndVelocity(class UKoratCharacterMovementComponent* InCharacterMovement);
	void UpdateTargetRotation(class UKoratCharacterMovementComponent* InCharacterMovement, EKoratActionRotationBaseDirection InRotationBaseDirection, EKoratActionBodyYawMode InBodyYawMode, EKoratActionBodyPitchMode InBodyPitchMode);
	void WatchPreliminaryTurning();
	void Z_____n_____Y_();
	void _____hWf__Y_(class UKoratActionTranslationDataAsset* DataAsset, double Duration);
	void ____________Minusn_____Y_();
	void ___________z_n_____Y_();
	void ____j___();
	void _____();
	void _____Minusn_u();
	void _____n___0(EKoratGuardDirection* GuardDirection);
	void _____nMinus__1(EKoratGuardDirection InGuardDirection);
	void _________();
	void _______1n__________Y_();
	void _______1n____________Y_();
	void _______2n__________Y_();
	void _______2n____________Y_();
	void _________n_______(ESSBlastDemoBranchType ________0, EKoratBlastSlotType InSlotType, struct FKoratActionDataList* ActionDataList);
	void ____________n_______(ESSBlastDemoBranchType ________0, EKoratBlastSlotType InSlotType, struct FKoratActionDataList* ActionDataList);
	void ______n_______(ESSBlastDemoBranchType ________0, EKoratBlastSlotType InSlotType, struct FKoratActionDataList* ActionDataList);
	void ________Y_(const EKoratAnimType InAnimType, const class FName InName);
	void ________B(const struct FKoratActionDataList& __Y______, class FName __Y_______);
	void ___h_______w_Hz_(const struct FKoratActionDataList& InTurningAction, class UBP_CharacterLocomotionSubBase_C* InLocomotionSubBase, EKoratLocomotionState InCurrentStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void ___hw_Hz_(const struct FKoratActionDataList& InTurningAction, const struct FKoratActionDataList& InAction, int32 InAnimIndex, bool InIsAnimTurn, bool InIsTurnNoMove, bool InIsForceTurnAction);
	void ____b____n_();
	void ________n_______(ESSBlastDemoBranchType ________0, EKoratBlastSlotType InSlotType, struct FKoratActionDataList* ActionDataList);
	void ________tn_______(ESSBlastDemoBranchType ________0, EKoratBlastSlotType InSlotType, struct FKoratActionDataList* ActionDataList);
	void _______tn_______(ESSBlastDemoBranchType ________0, EKoratBlastSlotType InSlotType, struct FKoratActionDataList* ActionDataList);
	void ____nw_a_nI_I_n___pn__(EKoratBlastSlotType SlotType, int32* Count);
	void ____nw_a_nI_I_nB_pn__(EKoratBlastSlotType SlotType, int32* Count);
	void ___________();
	void __________n__(EKoratBlastSlotType SlotType, struct FKoratBlastSkillTypeDataList* SkillType);
	void ________1_Minusn_____Y_();
	void ________1z_n_____Y_();
	void ________2_Minusn_____Y_();
	void ________2z_n_____Y_();
	void ________n_____Y_();
	void __________n_____Y_();
	void ______(const struct FKoratActionDataList& Action);
	void _____Minusn_____n________Y_();
	void __________L___();
	void _________z_n___________Y_();
	void _____nMinus__0();
	void _____nMinus_();
	void Minus____nMinus_();
	void Minus___________n_____Y_();
	void E___k_______x_(const struct FKoratActionDataList& Front, const struct FKoratActionDataList& Back, const struct FKoratActionDataList& Left, const struct FKoratActionDataList& Right, const struct FKoratActionDataList& Neutral, bool ______BnMinus________U__K, struct FKoratActionDataList* ReturnAction);
	void __Hn_____nMinus_(class FName __Hn______0);
	void _______B_();
	void _LMinusn__n________(struct FKoratActionDataList* CurrentAction);
	void __M___(EKoratActionBodyYawMode InBodyYawMode, EKoratActionBodyPitchMode InBodyPitchMode, const struct FKoratActionDataList& InAction, EKoratActionBodyYawMode* OutBodyYawMode, EKoratActionBodyPitchMode* OutBodyPitchMode);
	void Seven6_k______U__(const struct FKoratHitBackMovementData& InHitBackData);
	void _n______Minus_Y_(const EKoratAnimType InAnimType, const class FName InName);
	void __I_I_n___pn____();
	void __I_I_nB_pn____();
	void _______nMinus_(bool InCharge);
	void __n_____n________Y_(class FName __Y_______);
	void __n________(class FName* SectionName);
	void _Kn________Y_(const EKoratAnimType InAnimType, const class FName InName);
	void _Kn__________n__(EKoratBlastSlotType SlotType, struct FKoratBlastSkillTypeDataList* SkillType);
	void _Kn_____U__(double Value, double Time);
	void _Kn__n________Y_(struct FKoratActionDataList* OutAction);
	void _Knw_H_Minus_(const struct FKoratActionDataList& W_______0, int32 InAnimIndex, bool IsStartTurn_0, bool IsAnimTurn_0, bool InLinkOpponent);
	void _Knw__L();
	void ______n_____Y_();
	void __Knu_n_Qn_____Y_();
	void ____________n_____Y__0();
	void ____________n_____Y_();
	void W_Hz_(const struct FKoratActionDataList& Inw______, int32 InAnimIndex, bool IsStartTurn_0, bool IsAnimTurn_0, class FName InTurningSection, bool IsNoTurnBeforeTransition, bool InNoEventCancel);
	void W__L();
	void W__kHT_____k__Y_();
	void W__kSparking____L___();
	void W__kZ_____n_____Y_();
	void W__k____________Minusn_____Y_();
	void W__k___________z_n_____Y_();
	void W__k_______1n__________Y_();
	void W__k_______1n____________Y_();
	void W__k_______2n__________Y_();
	void W__k_______2n____________Y_();
	void W__k_________n_____Y_(ESSVanishingAssaultType InType);
	void W__k____________n_2_sBB_U__();
	void W__k___________();
	void W__k________1_Minusn_____Y_();
	void W__k________1z_n_____Y_();
	void W__k________2_Minusn_____Y_();
	void W__k________2z_n_____Y_();
	void W__k________n_____Y_();
	void W__k__________n_____Y_();
	void W__k_____Minusn_____n________Y_(class FName JumpSection);
	void W__k__________L___();
	void W__k_________z_n___________Y_();
	void W__k______n_____Y_();
	void W__n_____Minusn_u();
	void W__n_____nMinus__0();
	void W__n_____nMinus_();
	void W__nMinus____nMinus_();
	void W__n____DelegateSignature();
	void W__n__I_I_n___pn____();
	void W__n__I_I_nB_pn____();
	void W_Bn___________();
	void W__B(const struct FKoratActionDataList& __Mn_____, const struct FKoratActionDataList& ___n_____);

	int32 GetActiveEmoteSlotIndex() const;
	bool IsRequestJumpSectionAction() const;
	bool IsRequestTransitionAction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TransitionFlowBaseComponent_C">();
	}
	static class UBP_TransitionFlowBaseComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TransitionFlowBaseComponent_C>();
	}
};
static_assert(alignof(UBP_TransitionFlowBaseComponent_C) == 0x000008, "Wrong alignment on UBP_TransitionFlowBaseComponent_C");
static_assert(sizeof(UBP_TransitionFlowBaseComponent_C) == 0x000398, "Wrong size on UBP_TransitionFlowBaseComponent_C");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, UberGraphFrame) == 0x0002B8, "Member 'UBP_TransitionFlowBaseComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, BPCharacter) == 0x0002C0, "Member 'UBP_TransitionFlowBaseComponent_C::BPCharacter' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, KoratCharacterSubActionStateAnimInstance) == 0x0002C8, "Member 'UBP_TransitionFlowBaseComponent_C::KoratCharacterSubActionStateAnimInstance' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, A_T_) == 0x0002D0, "Member 'UBP_TransitionFlowBaseComponent_C::A_T_' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, W______) == 0x0002D4, "Member 'UBP_TransitionFlowBaseComponent_C::W______' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, AnimIndex) == 0x0002DC, "Member 'UBP_TransitionFlowBaseComponent_C::AnimIndex' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, IsStartTurn) == 0x0002E0, "Member 'UBP_TransitionFlowBaseComponent_C::IsStartTurn' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, IsAnimTurn) == 0x0002E1, "Member 'UBP_TransitionFlowBaseComponent_C::IsAnimTurn' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, _Kn__n_____) == 0x0002E4, "Member 'UBP_TransitionFlowBaseComponent_C::_Kn__n_____' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, AnimIndexOfOpponent) == 0x0002EC, "Member 'UBP_TransitionFlowBaseComponent_C::AnimIndexOfOpponent' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, IsStartTurnOfOpponent) == 0x0002F0, "Member 'UBP_TransitionFlowBaseComponent_C::IsStartTurnOfOpponent' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, IsAnimTurnOfOpponent) == 0x0002F1, "Member 'UBP_TransitionFlowBaseComponent_C::IsAnimTurnOfOpponent' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, ____j_) == 0x0002F4, "Member 'UBP_TransitionFlowBaseComponent_C::____j_' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, __Hn_____) == 0x0002F8, "Member 'UBP_TransitionFlowBaseComponent_C::__Hn_____' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, W__n__) == 0x000300, "Member 'UBP_TransitionFlowBaseComponent_C::W__n__' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, W__Bn__M_____) == 0x000310, "Member 'UBP_TransitionFlowBaseComponent_C::W__Bn__M_____' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, W__Bn________) == 0x000318, "Member 'UBP_TransitionFlowBaseComponent_C::W__Bn________' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, ________Bn_____) == 0x000320, "Member 'UBP_TransitionFlowBaseComponent_C::________Bn_____' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, ________Bn______) == 0x000328, "Member 'UBP_TransitionFlowBaseComponent_C::________Bn______' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, TransitingAction) == 0x000330, "Member 'UBP_TransitionFlowBaseComponent_C::TransitingAction' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, UnfavorableTurningSection) == 0x000334, "Member 'UBP_TransitionFlowBaseComponent_C::UnfavorableTurningSection' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, UnfavorableTurning) == 0x00033C, "Member 'UBP_TransitionFlowBaseComponent_C::UnfavorableTurning' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, _____n__) == 0x000340, "Member 'UBP_TransitionFlowBaseComponent_C::_____n__' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, KidanAction) == 0x000348, "Member 'UBP_TransitionFlowBaseComponent_C::KidanAction' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, PreliminaryTurningNoMove) == 0x000358, "Member 'UBP_TransitionFlowBaseComponent_C::PreliminaryTurningNoMove' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, PreliminaryTurningForceAction) == 0x000359, "Member 'UBP_TransitionFlowBaseComponent_C::PreliminaryTurningForceAction' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, PreliminaryLocomotionSubBase) == 0x000360, "Member 'UBP_TransitionFlowBaseComponent_C::PreliminaryLocomotionSubBase' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, PreliminaryLocomotionStatus) == 0x000368, "Member 'UBP_TransitionFlowBaseComponent_C::PreliminaryLocomotionStatus' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, PreliminaryActionFinishReason) == 0x000369, "Member 'UBP_TransitionFlowBaseComponent_C::PreliminaryActionFinishReason' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, _____M) == 0x000370, "Member 'UBP_TransitionFlowBaseComponent_C::_____M' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, _____Minusn_____n_____) == 0x000380, "Member 'UBP_TransitionFlowBaseComponent_C::_____Minusn_____n_____' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, ________K_nw_K) == 0x000388, "Member 'UBP_TransitionFlowBaseComponent_C::________K_nw_K' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, _______) == 0x00038C, "Member 'UBP_TransitionFlowBaseComponent_C::_______' has a wrong offset!");
static_assert(offsetof(UBP_TransitionFlowBaseComponent_C, IsLinkOpponent) == 0x000394, "Member 'UBP_TransitionFlowBaseComponent_C::IsLinkOpponent' has a wrong offset!");

}

