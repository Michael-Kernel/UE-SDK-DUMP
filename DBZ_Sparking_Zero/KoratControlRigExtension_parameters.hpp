#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratControlRigExtension

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function KoratControlRigExtension.KoratControlRigExtensionInterface.GetOverwriteLimitsClass
// 0x0010 (0x0010 - 0x0000)
struct KoratControlRigExtensionInterface_GetOverwriteLimitsClass final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UControlRig>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratControlRigExtensionInterface_GetOverwriteLimitsClass) == 0x000008, "Wrong alignment on KoratControlRigExtensionInterface_GetOverwriteLimitsClass");
static_assert(sizeof(KoratControlRigExtensionInterface_GetOverwriteLimitsClass) == 0x000010, "Wrong size on KoratControlRigExtensionInterface_GetOverwriteLimitsClass");
static_assert(offsetof(KoratControlRigExtensionInterface_GetOverwriteLimitsClass, InClass) == 0x000000, "Member 'KoratControlRigExtensionInterface_GetOverwriteLimitsClass::InClass' has a wrong offset!");
static_assert(offsetof(KoratControlRigExtensionInterface_GetOverwriteLimitsClass, ReturnValue) == 0x000008, "Member 'KoratControlRigExtensionInterface_GetOverwriteLimitsClass::ReturnValue' has a wrong offset!");

// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.EqualClass
// 0x0040 (0x0040 - 0x0000)
struct KoratControlRigFunctionLibrary_EqualClass final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ClassPtr;                                          // 0x0008(0x0030)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratControlRigFunctionLibrary_EqualClass) == 0x000008, "Wrong alignment on KoratControlRigFunctionLibrary_EqualClass");
static_assert(sizeof(KoratControlRigFunctionLibrary_EqualClass) == 0x000040, "Wrong size on KoratControlRigFunctionLibrary_EqualClass");
static_assert(offsetof(KoratControlRigFunctionLibrary_EqualClass, InClass) == 0x000000, "Member 'KoratControlRigFunctionLibrary_EqualClass::InClass' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_EqualClass, ClassPtr) == 0x000008, "Member 'KoratControlRigFunctionLibrary_EqualClass::ClassPtr' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_EqualClass, ReturnValue) == 0x000038, "Member 'KoratControlRigFunctionLibrary_EqualClass::ReturnValue' has a wrong offset!");

// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.EqualControlRig
// 0x0040 (0x0040 - 0x0000)
struct KoratControlRigFunctionLibrary_EqualControlRig final
{
public:
	const class UControlRig*                      ControlRig;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ClassPtr;                                          // 0x0008(0x0030)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KoratControlRigFunctionLibrary_EqualControlRig) == 0x000008, "Wrong alignment on KoratControlRigFunctionLibrary_EqualControlRig");
static_assert(sizeof(KoratControlRigFunctionLibrary_EqualControlRig) == 0x000040, "Wrong size on KoratControlRigFunctionLibrary_EqualControlRig");
static_assert(offsetof(KoratControlRigFunctionLibrary_EqualControlRig, ControlRig) == 0x000000, "Member 'KoratControlRigFunctionLibrary_EqualControlRig::ControlRig' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_EqualControlRig, ClassPtr) == 0x000008, "Member 'KoratControlRigFunctionLibrary_EqualControlRig::ClassPtr' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_EqualControlRig, ReturnValue) == 0x000038, "Member 'KoratControlRigFunctionLibrary_EqualControlRig::ReturnValue' has a wrong offset!");

// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.OverwriteControlLimits
// 0x0010 (0x0010 - 0x0000)
struct KoratControlRigFunctionLibrary_OverwriteControlLimits final
{
public:
	class UControlRig*                            ControlRig;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UControlRig>                SourceClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratControlRigFunctionLibrary_OverwriteControlLimits) == 0x000008, "Wrong alignment on KoratControlRigFunctionLibrary_OverwriteControlLimits");
static_assert(sizeof(KoratControlRigFunctionLibrary_OverwriteControlLimits) == 0x000010, "Wrong size on KoratControlRigFunctionLibrary_OverwriteControlLimits");
static_assert(offsetof(KoratControlRigFunctionLibrary_OverwriteControlLimits, ControlRig) == 0x000000, "Member 'KoratControlRigFunctionLibrary_OverwriteControlLimits::ControlRig' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_OverwriteControlLimits, SourceClass) == 0x000008, "Member 'KoratControlRigFunctionLibrary_OverwriteControlLimits::SourceClass' has a wrong offset!");

// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.SetControlMaximumRotator
// 0x0028 (0x0028 - 0x0000)
struct KoratControlRigFunctionLibrary_SetControlMaximumRotator final
{
public:
	class UControlRig*                            ControlRig;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratControlRigFunctionLibrary_SetControlMaximumRotator) == 0x000008, "Wrong alignment on KoratControlRigFunctionLibrary_SetControlMaximumRotator");
static_assert(sizeof(KoratControlRigFunctionLibrary_SetControlMaximumRotator) == 0x000028, "Wrong size on KoratControlRigFunctionLibrary_SetControlMaximumRotator");
static_assert(offsetof(KoratControlRigFunctionLibrary_SetControlMaximumRotator, ControlRig) == 0x000000, "Member 'KoratControlRigFunctionLibrary_SetControlMaximumRotator::ControlRig' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_SetControlMaximumRotator, Name_0) == 0x000008, "Member 'KoratControlRigFunctionLibrary_SetControlMaximumRotator::Name_0' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_SetControlMaximumRotator, Value) == 0x000010, "Member 'KoratControlRigFunctionLibrary_SetControlMaximumRotator::Value' has a wrong offset!");

// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.SetControlMinimumRotator
// 0x0028 (0x0028 - 0x0000)
struct KoratControlRigFunctionLibrary_SetControlMinimumRotator final
{
public:
	class UControlRig*                            ControlRig;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KoratControlRigFunctionLibrary_SetControlMinimumRotator) == 0x000008, "Wrong alignment on KoratControlRigFunctionLibrary_SetControlMinimumRotator");
static_assert(sizeof(KoratControlRigFunctionLibrary_SetControlMinimumRotator) == 0x000028, "Wrong size on KoratControlRigFunctionLibrary_SetControlMinimumRotator");
static_assert(offsetof(KoratControlRigFunctionLibrary_SetControlMinimumRotator, ControlRig) == 0x000000, "Member 'KoratControlRigFunctionLibrary_SetControlMinimumRotator::ControlRig' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_SetControlMinimumRotator, Name_0) == 0x000008, "Member 'KoratControlRigFunctionLibrary_SetControlMinimumRotator::Name_0' has a wrong offset!");
static_assert(offsetof(KoratControlRigFunctionLibrary_SetControlMinimumRotator, Value) == 0x000010, "Member 'KoratControlRigFunctionLibrary_SetControlMinimumRotator::Value' has a wrong offset!");

}

