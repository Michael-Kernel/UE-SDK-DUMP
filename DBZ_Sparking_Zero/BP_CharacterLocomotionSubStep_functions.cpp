#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubStep

#include "Basic.hpp"

#include "BP_CharacterLocomotionSubStep_classes.hpp"
#include "BP_CharacterLocomotionSubStep_parameters.hpp"


namespace SDK
{

// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAndStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InInSkip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStarted                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "CheckAndStart");

	Params::BP_CharacterLocomotionSubStep_C_CheckAndStart Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InInSkip = InInSkip;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStarted != nullptr)
		*IsStarted = Parms.IsStarted;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAndStartChangeJumpToFly
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InChangeJumpToFly                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStarted                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::CheckAndStartChangeJumpToFly(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InChangeJumpToFly, bool* IsStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "CheckAndStartChangeJumpToFly");

	Params::BP_CharacterLocomotionSubStep_C_CheckAndStartChangeJumpToFly Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InChangeJumpToFly = InChangeJumpToFly;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStarted != nullptr)
		*IsStarted = Parms.IsStarted;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAndStartFromJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InChangeJumpToFly                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStarted                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::CheckAndStartFromJump(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InChangeJumpToFly, bool* IsStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "CheckAndStartFromJump");

	Params::BP_CharacterLocomotionSubStep_C_CheckAndStartFromJump Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InChangeJumpToFly = InChangeJumpToFly;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStarted != nullptr)
		*IsStarted = Parms.IsStarted;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.CheckAnimEndAndChangeToIdle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubStep_C::CheckAnimEndAndChangeToIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "CheckAnimEndAndChangeToIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.GetStepParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratStepType                          InStepType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepState                         InStepStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratCharacterDataStepParameter OutParameter                                           (Parm, OutParm, NoDestructor)

void UBP_CharacterLocomotionSubStep_C::GetStepParameter(EKoratStepType InStepType, EKoratStepState InStepStatus, struct FKoratCharacterDataStepParameter* OutParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "GetStepParameter");

	Params::BP_CharacterLocomotionSubStep_C_GetStepParameter Parms{};

	Parms.InStepType = InStepType;
	Parms.InStepStatus = InStepStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (OutParameter != nullptr)
		*OutParameter = std::move(Parms.OutParameter);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.GetStepVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterDirection                     InDirection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsOrthoDirection                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::GetStepVector(ECharacterDirection InDirection, bool InIsOrthoDirection, struct FVector* Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "GetStepVector");

	Params::BP_CharacterLocomotionSubStep_C_GetStepVector Parms{};

	Parms.InDirection = InDirection;
	Parms.InIsOrthoDirection = InIsOrthoDirection;

	UObject::ProcessEvent(Func, &Parms);

	if (Vector != nullptr)
		*Vector = std::move(Parms.Vector);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Is Step Enable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::Is_Step_Enable(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "Is Step Enable");

	Params::BP_CharacterLocomotionSubStep_C_Is_Step_Enable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.IsStepOrthoDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratStepType                          InStepType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOrthoDirection                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::IsStepOrthoDirection(EKoratStepType InStepType, bool* IsOrthoDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "IsStepOrthoDirection");

	Params::BP_CharacterLocomotionSubStep_C_IsStepOrthoDirection Parms{};

	Parms.InStepType = InStepType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOrthoDirection != nullptr)
		*IsOrthoDirection = Parms.IsOrthoDirection;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.OnEndStepIN
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubStep_C::OnEndStepIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "OnEndStepIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.OnEndStepOT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubStep_C::OnEndStepOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "OnEndStepOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Set Step Parameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratStepState                         InStepStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepType                          InStepType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterDirection                     InMoveDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::Set_Step_Parameter(EKoratStepState InStepStatus, EKoratStepType InStepType, ECharacterDirection InMoveDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "Set Step Parameter");

	Params::BP_CharacterLocomotionSubStep_C_Set_Step_Parameter Parms{};

	Parms.InStepStatus = InStepStatus;
	Parms.InStepType = InStepType;
	Parms.InMoveDirection = InMoveDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.SetStepMaxSpeed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubStep_C::SetStepMaxSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "SetStepMaxSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.SetStepStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratStepState                         InStepStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::SetStepStatus(EKoratStepState InStepStatus, EKoratCharacterActionFinishReason InActionFinishReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "SetStepStatus");

	Params::BP_CharacterLocomotionSubStep_C_SetStepStatus Parms{};

	Parms.InStepStatus = InStepStatus;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Start
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InInSkip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "Start");

	Params::BP_CharacterLocomotionSubStep_C_Start Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InInSkip = InInSkip;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.StartStepIN
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubStep_C::StartStepIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "StartStepIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.Update
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// ECharacterLocomotionEventType           InEventType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "Update");

	Params::BP_CharacterLocomotionSubStep_C_Update Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InEventType = InEventType;
	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.UpdateRotationStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InNewRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsUpdateTiltTimer                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::UpdateRotationStep(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool InIsUpdateTiltTimer, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "UpdateRotationStep");

	Params::BP_CharacterLocomotionSubStep_C_UpdateRotationStep Parms{};

	Parms.InNewRotation = std::move(InNewRotation);
	Parms.InTeleportPhysics = InTeleportPhysics;
	Parms.InIsUpdateTiltTimer = InIsUpdateTiltTimer;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C.UpdateStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsKeepRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubStep_C::UpdateStep(double InDeltaSeconds, bool InIsKeepRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubStep_C", "UpdateStep");

	Params::BP_CharacterLocomotionSubStep_C_UpdateStep Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;
	Parms.InIsKeepRotation = InIsKeepRotation;

	UObject::ProcessEvent(Func, &Parms);
}

}

