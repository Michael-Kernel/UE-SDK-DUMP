#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AiController

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EBattleKey_structs.hpp"


namespace SDK::Params
{

// Function BP_AiController.BP_AiController_C.BP_AiController_AutoGenFunc
// 0x0001 (0x0001 - 0x0000)
struct BP_AiController_C_BP_AiController_AutoGenFunc final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_BP_AiController_AutoGenFunc) == 0x000001, "Wrong alignment on BP_AiController_C_BP_AiController_AutoGenFunc");
static_assert(sizeof(BP_AiController_C_BP_AiController_AutoGenFunc) == 0x000001, "Wrong size on BP_AiController_C_BP_AiController_AutoGenFunc");
static_assert(offsetof(BP_AiController_C_BP_AiController_AutoGenFunc, InEnable) == 0x000000, "Member 'BP_AiController_C_BP_AiController_AutoGenFunc::InEnable' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.ConvertOldFlow
// 0x0004 (0x0004 - 0x0000)
struct BP_AiController_C_ConvertOldFlow final
{
public:
	EKoratBattleKey                               NewType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    OldType;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOldFlow;                                          // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_ConvertOldFlow) == 0x000001, "Wrong alignment on BP_AiController_C_ConvertOldFlow");
static_assert(sizeof(BP_AiController_C_ConvertOldFlow) == 0x000004, "Wrong size on BP_AiController_C_ConvertOldFlow");
static_assert(offsetof(BP_AiController_C_ConvertOldFlow, NewType) == 0x000000, "Member 'BP_AiController_C_ConvertOldFlow::NewType' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ConvertOldFlow, OldType) == 0x000001, "Member 'BP_AiController_C_ConvertOldFlow::OldType' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ConvertOldFlow, bOldFlow) == 0x000002, "Member 'BP_AiController_C_ConvertOldFlow::bOldFlow' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ConvertOldFlow, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_AiController_C_ConvertOldFlow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.Debug Command
// 0x0070 (0x0070 - 0x0000)
struct BP_AiController_C_Debug_Command final
{
public:
	TArray<class FString>                         InDebugCommand;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         OptNum;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Option;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Command;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_Debug_Command) == 0x000008, "Wrong alignment on BP_AiController_C_Debug_Command");
static_assert(sizeof(BP_AiController_C_Debug_Command) == 0x000070, "Wrong size on BP_AiController_C_Debug_Command");
static_assert(offsetof(BP_AiController_C_Debug_Command, InDebugCommand) == 0x000000, "Member 'BP_AiController_C_Debug_Command::InDebugCommand' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, OptNum) == 0x000010, "Member 'BP_AiController_C_Debug_Command::OptNum' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, Option) == 0x000018, "Member 'BP_AiController_C_Debug_Command::Option' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, Command) == 0x000028, "Member 'BP_AiController_C_Debug_Command::Command' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, K2Node_SwitchString_CmpSuccess) == 0x000038, "Member 'BP_AiController_C_Debug_Command::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AiController_C_Debug_Command::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000050, "Member 'BP_AiController_C_Debug_Command::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'BP_AiController_C_Debug_Command::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_AiController_C_Debug_Command::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000069, "Member 'BP_AiController_C_Debug_Command::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Debug_Command, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_AiController_C_Debug_Command::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.Debug Draw
// 0x0010 (0x0010 - 0x0000)
struct BP_AiController_C_Debug_Draw final
{
public:
	class FString                                 PressedKeys;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_Debug_Draw) == 0x000008, "Wrong alignment on BP_AiController_C_Debug_Draw");
static_assert(sizeof(BP_AiController_C_Debug_Draw) == 0x000010, "Wrong size on BP_AiController_C_Debug_Draw");
static_assert(offsetof(BP_AiController_C_Debug_Draw, PressedKeys) == 0x000000, "Member 'BP_AiController_C_Debug_Draw::PressedKeys' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugChangeLv
// 0x0050 (0x0050 - 0x0000)
struct BP_AiController_C_DebugChangeLv final
{
public:
	class FString                                 InCommandOpt;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USSAiCharacterStatusComponent*          AiCharacterStatusComponent;                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NewLv;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USSAiCharacterStatusComponent*          CallFunc_GetAiCharacterStatusComponent_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugChangeLv) == 0x000008, "Wrong alignment on BP_AiController_C_DebugChangeLv");
static_assert(sizeof(BP_AiController_C_DebugChangeLv) == 0x000050, "Wrong size on BP_AiController_C_DebugChangeLv");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, InCommandOpt) == 0x000000, "Member 'BP_AiController_C_DebugChangeLv::InCommandOpt' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, AiCharacterStatusComponent) == 0x000010, "Member 'BP_AiController_C_DebugChangeLv::AiCharacterStatusComponent' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, NewLv) == 0x000018, "Member 'BP_AiController_C_DebugChangeLv::NewLv' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_AiController_C_DebugChangeLv::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, CallFunc_Conv_StringToInt_ReturnValue) == 0x000020, "Member 'BP_AiController_C_DebugChangeLv::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'BP_AiController_C_DebugChangeLv::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_AiController_C_DebugChangeLv::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, K2Node_DynamicCast_AsSSCharacter) == 0x000038, "Member 'BP_AiController_C_DebugChangeLv::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_AiController_C_DebugChangeLv::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_AiController_C_DebugChangeLv::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeLv, CallFunc_GetAiCharacterStatusComponent_ReturnValue) == 0x000048, "Member 'BP_AiController_C_DebugChangeLv::CallFunc_GetAiCharacterStatusComponent_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugChangeType
// 0x0058 (0x0058 - 0x0000)
struct BP_AiController_C_DebugChangeType final
{
public:
	class FString                                 InCommandOpt;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USSAiCharacterStatusComponent*          AiCharacterStatusComponent;                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NewLv;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratAiTypeDataList                   K2Node_MakeStruct_KoratAiTypeDataList;             // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USSAiCharacterStatusComponent*          CallFunc_GetAiCharacterStatusComponent_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugChangeType) == 0x000008, "Wrong alignment on BP_AiController_C_DebugChangeType");
static_assert(sizeof(BP_AiController_C_DebugChangeType) == 0x000058, "Wrong size on BP_AiController_C_DebugChangeType");
static_assert(offsetof(BP_AiController_C_DebugChangeType, InCommandOpt) == 0x000000, "Member 'BP_AiController_C_DebugChangeType::InCommandOpt' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, AiCharacterStatusComponent) == 0x000010, "Member 'BP_AiController_C_DebugChangeType::AiCharacterStatusComponent' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, NewLv) == 0x000018, "Member 'BP_AiController_C_DebugChangeType::NewLv' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, CallFunc_Conv_StringToName_ReturnValue) == 0x00001C, "Member 'BP_AiController_C_DebugChangeType::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, K2Node_MakeStruct_KoratAiTypeDataList) == 0x000024, "Member 'BP_AiController_C_DebugChangeType::K2Node_MakeStruct_KoratAiTypeDataList' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, CallFunc_K2_GetPawn_ReturnValue) == 0x000030, "Member 'BP_AiController_C_DebugChangeType::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, K2Node_DynamicCast_AsSSCharacter) == 0x000038, "Member 'BP_AiController_C_DebugChangeType::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_AiController_C_DebugChangeType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, CallFunc_GetAiCharacterStatusComponent_ReturnValue) == 0x000048, "Member 'BP_AiController_C_DebugChangeType::CallFunc_GetAiCharacterStatusComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugChangeType, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_AiController_C_DebugChangeType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugCharacterStatusMax
// 0x0028 (0x0028 - 0x0000)
struct BP_AiController_C_DebugCharacterStatusMax final
{
public:
	class ASSCharacter*                           ControlledCharacter;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxSPGaugeValue_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxHPGaugeValue_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugCharacterStatusMax) == 0x000008, "Wrong alignment on BP_AiController_C_DebugCharacterStatusMax");
static_assert(sizeof(BP_AiController_C_DebugCharacterStatusMax) == 0x000028, "Wrong size on BP_AiController_C_DebugCharacterStatusMax");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMax, ControlledCharacter) == 0x000000, "Member 'BP_AiController_C_DebugCharacterStatusMax::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMax, CallFunc_GetMaxSPGaugeValue_ReturnValue) == 0x000008, "Member 'BP_AiController_C_DebugCharacterStatusMax::CallFunc_GetMaxSPGaugeValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMax, CallFunc_GetMaxHPGaugeValue_ReturnValue) == 0x00000C, "Member 'BP_AiController_C_DebugCharacterStatusMax::CallFunc_GetMaxHPGaugeValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMax, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'BP_AiController_C_DebugCharacterStatusMax::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMax, K2Node_DynamicCast_AsSSCharacter) == 0x000018, "Member 'BP_AiController_C_DebugCharacterStatusMax::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMax, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AiController_C_DebugCharacterStatusMax::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugCharacterStatusMin
// 0x0020 (0x0020 - 0x0000)
struct BP_AiController_C_DebugCharacterStatusMin final
{
public:
	class ASSCharacter*                           ControlledCharacter;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugCharacterStatusMin) == 0x000008, "Wrong alignment on BP_AiController_C_DebugCharacterStatusMin");
static_assert(sizeof(BP_AiController_C_DebugCharacterStatusMin) == 0x000020, "Wrong size on BP_AiController_C_DebugCharacterStatusMin");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMin, ControlledCharacter) == 0x000000, "Member 'BP_AiController_C_DebugCharacterStatusMin::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMin, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_AiController_C_DebugCharacterStatusMin::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMin, K2Node_DynamicCast_AsSSCharacter) == 0x000010, "Member 'BP_AiController_C_DebugCharacterStatusMin::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugCharacterStatusMin, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AiController_C_DebugCharacterStatusMin::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugDispInfo
// 0x0030 (0x0030 - 0x0000)
struct BP_AiController_C_DebugDispInfo final
{
public:
	class USSAiCharacterStatusComponent*          AiCharacterStatusComponent;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USSAiCharacterStatusComponent*          CallFunc_GetAiCharacterStatusComponent_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugDispInfo) == 0x000008, "Wrong alignment on BP_AiController_C_DebugDispInfo");
static_assert(sizeof(BP_AiController_C_DebugDispInfo) == 0x000030, "Wrong size on BP_AiController_C_DebugDispInfo");
static_assert(offsetof(BP_AiController_C_DebugDispInfo, AiCharacterStatusComponent) == 0x000000, "Member 'BP_AiController_C_DebugDispInfo::AiCharacterStatusComponent' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDispInfo, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_AiController_C_DebugDispInfo::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDispInfo, K2Node_DynamicCast_AsSSCharacter) == 0x000010, "Member 'BP_AiController_C_DebugDispInfo::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDispInfo, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AiController_C_DebugDispInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDispInfo, CallFunc_GetAiCharacterStatusComponent_ReturnValue) == 0x000020, "Member 'BP_AiController_C_DebugDispInfo::CallFunc_GetAiCharacterStatusComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDispInfo, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_AiController_C_DebugDispInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugDrawPathSetting
// 0x0001 (0x0001 - 0x0000)
struct BP_AiController_C_DebugDrawPathSetting final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugDrawPathSetting) == 0x000001, "Wrong alignment on BP_AiController_C_DebugDrawPathSetting");
static_assert(sizeof(BP_AiController_C_DebugDrawPathSetting) == 0x000001, "Wrong size on BP_AiController_C_DebugDrawPathSetting");
static_assert(offsetof(BP_AiController_C_DebugDrawPathSetting, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_AiController_C_DebugDrawPathSetting::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugDrawTargetDistance
// 0x0028 (0x0028 - 0x0000)
struct BP_AiController_C_DebugDrawTargetDistance final
{
public:
	struct FLinearColor                           DrawTextColor;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLongRange_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMediumRange_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShortRange_ReturnValue;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugDrawTargetDistance) == 0x000008, "Wrong alignment on BP_AiController_C_DebugDrawTargetDistance");
static_assert(sizeof(BP_AiController_C_DebugDrawTargetDistance) == 0x000028, "Wrong size on BP_AiController_C_DebugDrawTargetDistance");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistance, DrawTextColor) == 0x000000, "Member 'BP_AiController_C_DebugDrawTargetDistance::DrawTextColor' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistance, CallFunc_IsLongRange_ReturnValue) == 0x000010, "Member 'BP_AiController_C_DebugDrawTargetDistance::CallFunc_IsLongRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistance, CallFunc_IsMediumRange_ReturnValue) == 0x000011, "Member 'BP_AiController_C_DebugDrawTargetDistance::CallFunc_IsMediumRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistance, CallFunc_IsShortRange_ReturnValue) == 0x000012, "Member 'BP_AiController_C_DebugDrawTargetDistance::CallFunc_IsShortRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistance, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'BP_AiController_C_DebugDrawTargetDistance::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistance, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_AiController_C_DebugDrawTargetDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugDrawTargetDistanceOnOff
// 0x0020 (0x0020 - 0x0000)
struct BP_AiController_C_DebugDrawTargetDistanceOnOff final
{
public:
	class FString                                 InCommandOpt;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class ASSCharacter*                           ControlledCharacter;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugDrawTargetDistanceOnOff) == 0x000008, "Wrong alignment on BP_AiController_C_DebugDrawTargetDistanceOnOff");
static_assert(sizeof(BP_AiController_C_DebugDrawTargetDistanceOnOff) == 0x000020, "Wrong size on BP_AiController_C_DebugDrawTargetDistanceOnOff");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistanceOnOff, InCommandOpt) == 0x000000, "Member 'BP_AiController_C_DebugDrawTargetDistanceOnOff::InCommandOpt' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistanceOnOff, ControlledCharacter) == 0x000010, "Member 'BP_AiController_C_DebugDrawTargetDistanceOnOff::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugDrawTargetDistanceOnOff, K2Node_SwitchString_CmpSuccess) == 0x000018, "Member 'BP_AiController_C_DebugDrawTargetDistanceOnOff::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugResetCoolDown
// 0x0018 (0x0018 - 0x0000)
struct BP_AiController_C_DebugResetCoolDown final
{
public:
	class USSAiPadGenerationComponent*            PadGenerationComponent;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USSAiPadGenerationComponent*            CallFunc_GetPadGenerationComponent_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugResetCoolDown) == 0x000008, "Wrong alignment on BP_AiController_C_DebugResetCoolDown");
static_assert(sizeof(BP_AiController_C_DebugResetCoolDown) == 0x000018, "Wrong size on BP_AiController_C_DebugResetCoolDown");
static_assert(offsetof(BP_AiController_C_DebugResetCoolDown, PadGenerationComponent) == 0x000000, "Member 'BP_AiController_C_DebugResetCoolDown::PadGenerationComponent' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugResetCoolDown, CallFunc_GetPadGenerationComponent_ReturnValue) == 0x000008, "Member 'BP_AiController_C_DebugResetCoolDown::CallFunc_GetPadGenerationComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugResetCoolDown, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AiController_C_DebugResetCoolDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugRoutineOrder
// 0x0038 (0x0038 - 0x0000)
struct BP_AiController_C_DebugRoutineOrder final
{
public:
	class FString                                 InCommandOpt;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USSAiPadGenerationComponent*            PadGenerationComponent;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USSAiPadGenerationComponent*            CallFunc_GetPadGenerationComponent_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesCommandExist_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InputCommand_ReturnValue;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugRoutineOrder) == 0x000008, "Wrong alignment on BP_AiController_C_DebugRoutineOrder");
static_assert(sizeof(BP_AiController_C_DebugRoutineOrder) == 0x000038, "Wrong size on BP_AiController_C_DebugRoutineOrder");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, InCommandOpt) == 0x000000, "Member 'BP_AiController_C_DebugRoutineOrder::InCommandOpt' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, PadGenerationComponent) == 0x000010, "Member 'BP_AiController_C_DebugRoutineOrder::PadGenerationComponent' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, CallFunc_GetPadGenerationComponent_ReturnValue) == 0x000018, "Member 'BP_AiController_C_DebugRoutineOrder::CallFunc_GetPadGenerationComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, CallFunc_Conv_StringToName_ReturnValue) == 0x000020, "Member 'BP_AiController_C_DebugRoutineOrder::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000028, "Member 'BP_AiController_C_DebugRoutineOrder::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, CallFunc_DoesCommandExist_ReturnValue) == 0x000030, "Member 'BP_AiController_C_DebugRoutineOrder::CallFunc_DoesCommandExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, CallFunc_InputCommand_ReturnValue) == 0x000031, "Member 'BP_AiController_C_DebugRoutineOrder::CallFunc_InputCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugRoutineOrder, CallFunc_IsValid_ReturnValue) == 0x000032, "Member 'BP_AiController_C_DebugRoutineOrder::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.DebugSearchOnOff
// 0x0038 (0x0038 - 0x0000)
struct BP_AiController_C_DebugSearchOnOff final
{
public:
	class FString                                 InCommandOpt;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class ASSCharacter*                           ControlledCharacter;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_DebugSearchOnOff) == 0x000008, "Wrong alignment on BP_AiController_C_DebugSearchOnOff");
static_assert(sizeof(BP_AiController_C_DebugSearchOnOff) == 0x000038, "Wrong size on BP_AiController_C_DebugSearchOnOff");
static_assert(offsetof(BP_AiController_C_DebugSearchOnOff, InCommandOpt) == 0x000000, "Member 'BP_AiController_C_DebugSearchOnOff::InCommandOpt' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugSearchOnOff, ControlledCharacter) == 0x000010, "Member 'BP_AiController_C_DebugSearchOnOff::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugSearchOnOff, K2Node_SwitchString_CmpSuccess) == 0x000018, "Member 'BP_AiController_C_DebugSearchOnOff::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugSearchOnOff, CallFunc_K2_GetPawn_ReturnValue) == 0x000020, "Member 'BP_AiController_C_DebugSearchOnOff::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugSearchOnOff, K2Node_DynamicCast_AsSSCharacter) == 0x000028, "Member 'BP_AiController_C_DebugSearchOnOff::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_DebugSearchOnOff, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AiController_C_DebugSearchOnOff::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.ExecuteInputProcess
// 0x0230 (0x0230 - 0x0000)
struct BP_AiController_C_ExecuteInputProcess final
{
public:
	bool                                          bIsMove;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MoveVector;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    CallFunc_ConvertOldFlow_OldType;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ConvertOldFlow_bOldFlow;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    CallFunc_ConvertOldFlow_OldType_1;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ConvertOldFlow_bOldFlow_1;                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDownBattleKey_ReturnValue;      // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustReleasedBattleKey_ReturnValue; // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressedBattleKey_ReturnValue; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_1;         // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveUpDownAxisValue_ReturnValue;       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion_1;   // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetCameraRotateInputKeyVector_ReturnValue; // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetMovementRotation_OutMoveRotator;       // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion_2;   // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_2;         // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetMovementInputKeyVector_ReturnValue;    // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion_3;   // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_3;         // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_4;         // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_2;                 // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_5;         // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_6;         // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion_4;   // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_3;                 // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_7;         // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_8;         // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_9;         // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_4;                 // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base_10;        // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetHeightAxisValue_HeightAxisValue_ImplicitCast; // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_AddCharacterMovementZInputLast_Value_ImplicitCast; // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_ExecuteInputProcess) == 0x000008, "Wrong alignment on BP_AiController_C_ExecuteInputProcess");
static_assert(sizeof(BP_AiController_C_ExecuteInputProcess) == 0x000230, "Wrong size on BP_AiController_C_ExecuteInputProcess");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, bIsMove) == 0x000000, "Member 'BP_AiController_C_ExecuteInputProcess::bIsMove' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, MoveVector) == 0x000008, "Member 'BP_AiController_C_ExecuteInputProcess::MoveVector' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, Temp_int_Variable) == 0x000018, "Member 'BP_AiController_C_ExecuteInputProcess::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, Temp_int_Variable_1) == 0x00001C, "Member 'BP_AiController_C_ExecuteInputProcess::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetValidValue_ReturnValue) == 0x000028, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000029, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_ConvertOldFlow_OldType) == 0x00002A, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_ConvertOldFlow_OldType' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_ConvertOldFlow_bOldFlow) == 0x00002B, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_ConvertOldFlow_bOldFlow' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00002C, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000030, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_ConvertOldFlow_OldType_1) == 0x000034, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_ConvertOldFlow_OldType_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_ConvertOldFlow_bOldFlow_1) == 0x000035, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_ConvertOldFlow_bOldFlow_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_IsInputKeyDownBattleKey_ReturnValue) == 0x000036, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_IsInputKeyDownBattleKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_WasInputKeyJustReleasedBattleKey_ReturnValue) == 0x000037, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_WasInputKeyJustReleasedBattleKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_WasInputKeyJustPressedBattleKey_ReturnValue) == 0x000038, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_WasInputKeyJustPressedBattleKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000040, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_1) == 0x000058, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetMoveUpDownAxisValue_ReturnValue) == 0x00006C, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetMoveUpDownAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000070, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Locomotion_1) == 0x000088, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Locomotion_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_3) == 0x000098, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetCameraRotateInputKeyVector_ReturnValue) == 0x0000A0, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetCameraRotateInputKeyVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetMovementRotation_OutMoveRotator) == 0x0000B0, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetMovementRotation_OutMoveRotator' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_K2_GetPawn_ReturnValue) == 0x0000C8, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Locomotion_2) == 0x0000D0, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Locomotion_2' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_4) == 0x0000E0, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_2) == 0x0000E8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_2' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_5) == 0x0000F8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetMovementInputKeyVector_ReturnValue) == 0x000100, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetMovementInputKeyVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Locomotion_3) == 0x000110, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Locomotion_3' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_6) == 0x000120, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000121, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000128, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_3) == 0x000130, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_3' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_7) == 0x000140, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_4) == 0x000148, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_4' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_8) == 0x000158, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_K2_GetPawn_ReturnValue_2) == 0x000160, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_K2_GetPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_5) == 0x000168, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_5' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_9) == 0x000178, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_6) == 0x000180, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_6' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_10) == 0x000190, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000191, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Locomotion_4) == 0x000198, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Locomotion_4' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_11) == 0x0001A8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_K2_GetPawn_ReturnValue_3) == 0x0001B0, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_K2_GetPawn_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_7) == 0x0001B8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_7' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_12) == 0x0001C8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_8) == 0x0001D0, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_8' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_13) == 0x0001E0, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_MakeLiteralInt_ReturnValue) == 0x0001E4, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_9) == 0x0001E8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_9' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_14) == 0x0001F8, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_Less_IntInt_ReturnValue) == 0x0001F9, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_K2_GetPawn_ReturnValue_4) == 0x000200, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_K2_GetPawn_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_AsBPI_Character_Base_10) == 0x000208, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_AsBPI_Character_Base_10' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, K2Node_DynamicCast_bSuccess_15) == 0x000218, "Member 'BP_AiController_C_ExecuteInputProcess::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_SetHeightAxisValue_HeightAxisValue_ImplicitCast) == 0x000220, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_SetHeightAxisValue_HeightAxisValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteInputProcess, CallFunc_AddCharacterMovementZInputLast_Value_ImplicitCast) == 0x000228, "Member 'BP_AiController_C_ExecuteInputProcess::CallFunc_AddCharacterMovementZInputLast_Value_ImplicitCast' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.ExecuteUbergraph_BP_AiController
// 0x0020 (0x0020 - 0x0000)
struct BP_AiController_C_ExecuteUbergraph_BP_AiController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAiRun_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_Event_InDebugCommand;                       // 0x0010(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(BP_AiController_C_ExecuteUbergraph_BP_AiController) == 0x000008, "Wrong alignment on BP_AiController_C_ExecuteUbergraph_BP_AiController");
static_assert(sizeof(BP_AiController_C_ExecuteUbergraph_BP_AiController) == 0x000020, "Wrong size on BP_AiController_C_ExecuteUbergraph_BP_AiController");
static_assert(offsetof(BP_AiController_C_ExecuteUbergraph_BP_AiController, EntryPoint) == 0x000000, "Member 'BP_AiController_C_ExecuteUbergraph_BP_AiController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteUbergraph_BP_AiController, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_AiController_C_ExecuteUbergraph_BP_AiController::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteUbergraph_BP_AiController, CallFunc_CanAiRun_ReturnValue) == 0x000008, "Member 'BP_AiController_C_ExecuteUbergraph_BP_AiController::CallFunc_CanAiRun_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_ExecuteUbergraph_BP_AiController, K2Node_Event_InDebugCommand) == 0x000010, "Member 'BP_AiController_C_ExecuteUbergraph_BP_AiController::K2Node_Event_InDebugCommand' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.GetMovementRotation
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AiController_C_GetMovementRotation final
{
public:
	struct FVector2D                              InMoveVector;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutMoveRotator;                                    // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_GetMovementRotation) == 0x000008, "Wrong alignment on BP_AiController_C_GetMovementRotation");
static_assert(sizeof(BP_AiController_C_GetMovementRotation) == 0x0000A0, "Wrong size on BP_AiController_C_GetMovementRotation");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, InMoveVector) == 0x000000, "Member 'BP_AiController_C_GetMovementRotation::InMoveVector' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, OutMoveRotator) == 0x000010, "Member 'BP_AiController_C_GetMovementRotation::OutMoveRotator' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_GetControlRotation_ReturnValue) == 0x000028, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_BreakVector2D_X) == 0x000040, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00005C, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_SelectFloat_ReturnValue) == 0x000068, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_MakeRotator_ReturnValue) == 0x000070, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_SelectFloat_A_ImplicitCast) == 0x000088, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000098, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_GetMovementRotation, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00009C, "Member 'BP_AiController_C_GetMovementRotation::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.InitializeBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct BP_AiController_C_InitializeBehaviorTree final
{
public:
	class UBehaviorTree*                          ComboBehaviorTree;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RunBehaviorTree_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_InitializeBehaviorTree) == 0x000008, "Wrong alignment on BP_AiController_C_InitializeBehaviorTree");
static_assert(sizeof(BP_AiController_C_InitializeBehaviorTree) == 0x000010, "Wrong size on BP_AiController_C_InitializeBehaviorTree");
static_assert(offsetof(BP_AiController_C_InitializeBehaviorTree, ComboBehaviorTree) == 0x000000, "Member 'BP_AiController_C_InitializeBehaviorTree::ComboBehaviorTree' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_InitializeBehaviorTree, CallFunc_RunBehaviorTree_ReturnValue) == 0x000008, "Member 'BP_AiController_C_InitializeBehaviorTree::CallFunc_RunBehaviorTree_ReturnValue' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.OnAiCommand
// 0x0010 (0x0010 - 0x0000)
struct BP_AiController_C_OnAiCommand final
{
public:
	TArray<class FString>                         InDebugCommand;                                    // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_AiController_C_OnAiCommand) == 0x000008, "Wrong alignment on BP_AiController_C_OnAiCommand");
static_assert(sizeof(BP_AiController_C_OnAiCommand) == 0x000010, "Wrong size on BP_AiController_C_OnAiCommand");
static_assert(offsetof(BP_AiController_C_OnAiCommand, InDebugCommand) == 0x000000, "Member 'BP_AiController_C_OnAiCommand::InDebugCommand' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AiController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AiController_C_ReceiveTick");
static_assert(sizeof(BP_AiController_C_ReceiveTick) == 0x000004, "Wrong size on BP_AiController_C_ReceiveTick");
static_assert(offsetof(BP_AiController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AiController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.Set Locomotion Component
// 0x0028 (0x0028 - 0x0000)
struct BP_AiController_C_Set_Locomotion_Component final
{
public:
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterBase_C>  K2Node_DynamicCast_AsBPI_Character_Base;           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_GetLocomotionComponent_ActorComponent;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_Set_Locomotion_Component) == 0x000008, "Wrong alignment on BP_AiController_C_Set_Locomotion_Component");
static_assert(sizeof(BP_AiController_C_Set_Locomotion_Component) == 0x000028, "Wrong size on BP_AiController_C_Set_Locomotion_Component");
static_assert(offsetof(BP_AiController_C_Set_Locomotion_Component, CallFunc_K2_GetPawn_ReturnValue) == 0x000000, "Member 'BP_AiController_C_Set_Locomotion_Component::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Set_Locomotion_Component, K2Node_DynamicCast_AsBPI_Character_Base) == 0x000008, "Member 'BP_AiController_C_Set_Locomotion_Component::K2Node_DynamicCast_AsBPI_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Set_Locomotion_Component, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AiController_C_Set_Locomotion_Component::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Set_Locomotion_Component, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_AiController_C_Set_Locomotion_Component::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_Set_Locomotion_Component, CallFunc_GetLocomotionComponent_ActorComponent) == 0x000020, "Member 'BP_AiController_C_Set_Locomotion_Component::CallFunc_GetLocomotionComponent_ActorComponent' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.UpdateSpecificBehaviorTree
// 0x0030 (0x0030 - 0x0000)
struct BP_AiController_C_UpdateSpecificBehaviorTree final
{
public:
	class UBehaviorTree*                          ComboBehaviorTree;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USSAiBTDecoratorUtilityComponent*       CallFunc_GetDecoratorUtilityComponent_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UBehaviorTree*                    CallFunc_GetAiSpecificBehaviorTree_ReturnValue;    // 0x0010(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTreeComponent*                 K2Node_DynamicCast_AsBehavior_Tree_Component;      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_UpdateSpecificBehaviorTree) == 0x000008, "Wrong alignment on BP_AiController_C_UpdateSpecificBehaviorTree");
static_assert(sizeof(BP_AiController_C_UpdateSpecificBehaviorTree) == 0x000030, "Wrong size on BP_AiController_C_UpdateSpecificBehaviorTree");
static_assert(offsetof(BP_AiController_C_UpdateSpecificBehaviorTree, ComboBehaviorTree) == 0x000000, "Member 'BP_AiController_C_UpdateSpecificBehaviorTree::ComboBehaviorTree' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_UpdateSpecificBehaviorTree, CallFunc_GetDecoratorUtilityComponent_ReturnValue) == 0x000008, "Member 'BP_AiController_C_UpdateSpecificBehaviorTree::CallFunc_GetDecoratorUtilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_UpdateSpecificBehaviorTree, CallFunc_GetAiSpecificBehaviorTree_ReturnValue) == 0x000010, "Member 'BP_AiController_C_UpdateSpecificBehaviorTree::CallFunc_GetAiSpecificBehaviorTree_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_UpdateSpecificBehaviorTree, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_AiController_C_UpdateSpecificBehaviorTree::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_UpdateSpecificBehaviorTree, K2Node_DynamicCast_AsBehavior_Tree_Component) == 0x000020, "Member 'BP_AiController_C_UpdateSpecificBehaviorTree::K2Node_DynamicCast_AsBehavior_Tree_Component' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_UpdateSpecificBehaviorTree, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AiController_C_UpdateSpecificBehaviorTree::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AiController.BP_AiController_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BP_AiController_C_UserConstructionScript final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AiController_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_AiController_C_UserConstructionScript");
static_assert(sizeof(BP_AiController_C_UserConstructionScript) == 0x000020, "Wrong size on BP_AiController_C_UserConstructionScript");
static_assert(offsetof(BP_AiController_C_UserConstructionScript, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_AiController_C_UserConstructionScript::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AiController_C_UserConstructionScript, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'BP_AiController_C_UserConstructionScript::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

}

