#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Star_Anomaly_1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Star_Anomaly_1.BP_Star_Anomaly_1_C
// 0x01A8 (0x0438 - 0x0290)
class ABP_Star_Anomaly_1_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            MaterialBillboard;                                 // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MaterialBillboard1;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Type;                                       // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Brightness;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Size;                                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialSpriteElement>         Sprite_Elements;                                   // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               DMI_Disk;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Shadows;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Core_Disks_Density;                                // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Core_Disks_Radius;                                 // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dense_Clouds_Radius;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Disk_1_Radius;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Disk_2_Radius;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Emissive;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Tile;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Halo;                                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inner_Disk_Radius;                                 // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity;                                           // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity_Inner_Density;                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity_Inner_Radius;                              // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity_Outer_Density;                             // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity_Outer_Radius;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_Disk_Tile_X;                                 // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_Disk_Tile_Y;                                 // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Waves_Speed;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Waves_Strength;                                    // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Luminosity;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Star_Luminosity;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Disk_1_Color;                                      // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Disk_2_Color;                                      // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Disk_3_Color;                                      // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Halo_Color;                                        // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Inner_Disk_Color;                                  // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Outer_Color;                                       // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lens_Main_Color;                                   // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lens_Outer_Color;                                  // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Star_Color;                                        // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Star_Anomaly_1(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Star_Anomaly_1_C">();
	}
	static class ABP_Star_Anomaly_1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Star_Anomaly_1_C>();
	}
};
static_assert(alignof(ABP_Star_Anomaly_1_C) == 0x000008, "Wrong alignment on ABP_Star_Anomaly_1_C");
static_assert(sizeof(ABP_Star_Anomaly_1_C) == 0x000438, "Wrong size on ABP_Star_Anomaly_1_C");
static_assert(offsetof(ABP_Star_Anomaly_1_C, UberGraphFrame) == 0x000290, "Member 'ABP_Star_Anomaly_1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, MaterialBillboard) == 0x000298, "Member 'ABP_Star_Anomaly_1_C::MaterialBillboard' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, MaterialBillboard1) == 0x0002A0, "Member 'ABP_Star_Anomaly_1_C::MaterialBillboard1' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Sphere) == 0x0002A8, "Member 'ABP_Star_Anomaly_1_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Cube) == 0x0002B0, "Member 'ABP_Star_Anomaly_1_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_Star_Anomaly_1_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Object_Type) == 0x0002C0, "Member 'ABP_Star_Anomaly_1_C::Object_Type' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Brightness) == 0x0002D0, "Member 'ABP_Star_Anomaly_1_C::Brightness' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Size) == 0x0002D8, "Member 'ABP_Star_Anomaly_1_C::Size' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Sprite_Elements) == 0x0002E0, "Member 'ABP_Star_Anomaly_1_C::Sprite_Elements' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, DMI_Disk) == 0x0002F0, "Member 'ABP_Star_Anomaly_1_C::DMI_Disk' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Clouds_Shadows) == 0x0002F8, "Member 'ABP_Star_Anomaly_1_C::Clouds_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Core_Disks_Density) == 0x000300, "Member 'ABP_Star_Anomaly_1_C::Core_Disks_Density' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Core_Disks_Radius) == 0x000308, "Member 'ABP_Star_Anomaly_1_C::Core_Disks_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Dense_Clouds_Radius) == 0x000310, "Member 'ABP_Star_Anomaly_1_C::Dense_Clouds_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Disk_1_Radius) == 0x000318, "Member 'ABP_Star_Anomaly_1_C::Disk_1_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Disk_2_Radius) == 0x000320, "Member 'ABP_Star_Anomaly_1_C::Disk_2_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Emissive) == 0x000328, "Member 'ABP_Star_Anomaly_1_C::Emissive' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Global_Tile) == 0x000330, "Member 'ABP_Star_Anomaly_1_C::Global_Tile' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Halo) == 0x000338, "Member 'ABP_Star_Anomaly_1_C::Halo' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Inner_Disk_Radius) == 0x000340, "Member 'ABP_Star_Anomaly_1_C::Inner_Disk_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Opacity) == 0x000348, "Member 'ABP_Star_Anomaly_1_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Opacity_Inner_Density) == 0x000350, "Member 'ABP_Star_Anomaly_1_C::Opacity_Inner_Density' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Opacity_Inner_Radius) == 0x000358, "Member 'ABP_Star_Anomaly_1_C::Opacity_Inner_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Opacity_Outer_Density) == 0x000360, "Member 'ABP_Star_Anomaly_1_C::Opacity_Outer_Density' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Opacity_Outer_Radius) == 0x000368, "Member 'ABP_Star_Anomaly_1_C::Opacity_Outer_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Outer_Disk_Tile_X) == 0x000370, "Member 'ABP_Star_Anomaly_1_C::Outer_Disk_Tile_X' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Outer_Disk_Tile_Y) == 0x000378, "Member 'ABP_Star_Anomaly_1_C::Outer_Disk_Tile_Y' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Speed) == 0x000380, "Member 'ABP_Star_Anomaly_1_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Waves_Speed) == 0x000388, "Member 'ABP_Star_Anomaly_1_C::Waves_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Waves_Strength) == 0x000390, "Member 'ABP_Star_Anomaly_1_C::Waves_Strength' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Lens_Luminosity) == 0x000398, "Member 'ABP_Star_Anomaly_1_C::Lens_Luminosity' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Star_Luminosity) == 0x0003A0, "Member 'ABP_Star_Anomaly_1_C::Star_Luminosity' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Disk_1_Color) == 0x0003A8, "Member 'ABP_Star_Anomaly_1_C::Disk_1_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Disk_2_Color) == 0x0003B8, "Member 'ABP_Star_Anomaly_1_C::Disk_2_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Disk_3_Color) == 0x0003C8, "Member 'ABP_Star_Anomaly_1_C::Disk_3_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Halo_Color) == 0x0003D8, "Member 'ABP_Star_Anomaly_1_C::Halo_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Inner_Disk_Color) == 0x0003E8, "Member 'ABP_Star_Anomaly_1_C::Inner_Disk_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Outer_Color) == 0x0003F8, "Member 'ABP_Star_Anomaly_1_C::Outer_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Lens_Main_Color) == 0x000408, "Member 'ABP_Star_Anomaly_1_C::Lens_Main_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Lens_Outer_Color) == 0x000418, "Member 'ABP_Star_Anomaly_1_C::Lens_Outer_Color' has a wrong offset!");
static_assert(offsetof(ABP_Star_Anomaly_1_C, Star_Color) == 0x000428, "Member 'ABP_Star_Anomaly_1_C::Star_Color' has a wrong offset!");

}

