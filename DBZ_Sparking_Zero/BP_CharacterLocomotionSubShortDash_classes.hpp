#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubShortDash

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubShortDash.BP_CharacterLocomotionSubShortDash_C
// 0x0050 (0x00B0 - 0x0060)
class UBP_CharacterLocomotionSubShortDash_C : public UBP_CharacterLocomotionSubBase_C
{
public:
	EKoratShortDashState                          ShortDashStatus;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShortDashMoveTimer;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseMaxSpeed;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalMaxSpeed;                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShortDashAdditionalSpeed;                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastInputVector;                                   // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashSpeedDownDistance;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckRestartShortDash(bool* IsStart);
	void CheckShortDashKeyPressedAction(bool* IsStartAction);
	void ConsumeSPShortDashIN();
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void GetShortDashParameter(class UCurveFloat** ___________, double* ________, double* _____, double* ___, double* OTxw_Y_LNB_, double* __B_, bool* Minus_Bk______Y_K, double* Minus_Bn___, double* ______0);
	void IsEnableAction(bool* IsEnable);
	void IsUpdateSpeed(bool* IsUpdate);
	void SetShortDashCoolTime();
	void SetShortDashMovementParameter();
	void SetShortDashStatus(EKoratShortDashState InShortDashStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetShortDashStopMovement();
	void SetUpShortDash();
	void SetUpShortDashMovement_Parameter(EKoratDashUkemiState InShortDashStatus);
	void ShortDashIdleMove();
	void ShortDashINOT();
	void ShortDashINOTKeyPressed();
	void ShortDashINOTStop();
	void ShortDashINOTUpdate();
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateIdleMove(ECharacterLocomotionEventType InEventType, double InDeltaSeconds);
	void UpdateMaxSpeed(bool* IsEnd);
	void UpdateShortDashMove(double InDeltaSeconds, EKoratShortDashState* NextShortDashStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubShortDash_C">();
	}
	static class UBP_CharacterLocomotionSubShortDash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubShortDash_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubShortDash_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubShortDash_C");
static_assert(sizeof(UBP_CharacterLocomotionSubShortDash_C) == 0x0000B0, "Wrong size on UBP_CharacterLocomotionSubShortDash_C");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, ShortDashStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubShortDash_C::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, ShortDashMoveTimer) == 0x000068, "Member 'UBP_CharacterLocomotionSubShortDash_C::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, BaseMaxSpeed) == 0x000070, "Member 'UBP_CharacterLocomotionSubShortDash_C::BaseMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, ShortDashAdditionalMaxSpeed) == 0x000078, "Member 'UBP_CharacterLocomotionSubShortDash_C::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, ShortDashAdditionalSpeed) == 0x000080, "Member 'UBP_CharacterLocomotionSubShortDash_C::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, ShortDashAdditionalSpeedCurve) == 0x000088, "Member 'UBP_CharacterLocomotionSubShortDash_C::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, LastInputVector) == 0x000090, "Member 'UBP_CharacterLocomotionSubShortDash_C::LastInputVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubShortDash_C, DashSpeedDownDistance) == 0x0000A8, "Member 'UBP_CharacterLocomotionSubShortDash_C::DashSpeedDownDistance' has a wrong offset!");

}

