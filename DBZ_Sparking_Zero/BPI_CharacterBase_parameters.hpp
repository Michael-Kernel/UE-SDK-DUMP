#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "Engine_structs.hpp"
#include "EBattleKey_structs.hpp"
#include "FRequestAnimData_structs.hpp"


namespace SDK::Params
{

// Function BPI_CharacterBase.BPI_CharacterBase_C.Add Debug Draw Blow Param
// 0x0030 (0x0030 - 0x0000)
struct BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InDrawType;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InHitTime;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InDrawDuration;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param");
static_assert(sizeof(BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param) == 0x000030, "Wrong size on BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param");
static_assert(offsetof(BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param, InLocation) == 0x000000, "Member 'BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param::InLocation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param, InDrawType) == 0x000018, "Member 'BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param::InDrawType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param, InHitTime) == 0x000020, "Member 'BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param::InHitTime' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param, InDrawDuration) == 0x000028, "Member 'BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param::InDrawDuration' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.AddCharacterMovementInput
// 0x0020 (0x0020 - 0x0000)
struct BPI_CharacterBase_C_AddCharacterMovementInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_AddCharacterMovementInput) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_AddCharacterMovementInput");
static_assert(sizeof(BPI_CharacterBase_C_AddCharacterMovementInput) == 0x000020, "Wrong size on BPI_CharacterBase_C_AddCharacterMovementInput");
static_assert(offsetof(BPI_CharacterBase_C_AddCharacterMovementInput, WorldDirection) == 0x000000, "Member 'BPI_CharacterBase_C_AddCharacterMovementInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_AddCharacterMovementInput, Value) == 0x000018, "Member 'BPI_CharacterBase_C_AddCharacterMovementInput::Value' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.AddChildDashRoute
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_AddChildDashRoute final
{
public:
	class AActor*                                 DashRouteActor;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_AddChildDashRoute) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_AddChildDashRoute");
static_assert(sizeof(BPI_CharacterBase_C_AddChildDashRoute) == 0x000008, "Wrong size on BPI_CharacterBase_C_AddChildDashRoute");
static_assert(offsetof(BPI_CharacterBase_C_AddChildDashRoute, DashRouteActor) == 0x000000, "Member 'BPI_CharacterBase_C_AddChildDashRoute::DashRouteActor' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.AnimNotifyInputParam
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_AnimNotifyInputParam final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_AnimNotifyInputParam) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_AnimNotifyInputParam");
static_assert(sizeof(BPI_CharacterBase_C_AnimNotifyInputParam) == 0x000001, "Wrong size on BPI_CharacterBase_C_AnimNotifyInputParam");
static_assert(offsetof(BPI_CharacterBase_C_AnimNotifyInputParam, Enable) == 0x000000, "Member 'BPI_CharacterBase_C_AnimNotifyInputParam::Enable' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.AutoSetCharacterMovementModeToIdle
// 0x0003 (0x0003 - 0x0000)
struct BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle final
{
public:
	bool                                          InIsValidSetWalking;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSet;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 SetMovementMode;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle");
static_assert(sizeof(BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle) == 0x000003, "Wrong size on BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle");
static_assert(offsetof(BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle, InIsValidSetWalking) == 0x000000, "Member 'BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle::InIsValidSetWalking' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle, IsSet) == 0x000001, "Member 'BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle::IsSet' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle, SetMovementMode) == 0x000002, "Member 'BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle::SetMovementMode' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.ClearCharacterRotationPitch
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterBase_C_ClearCharacterRotationPitch final
{
public:
	bool                                          InTeleportPhysics;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_ClearCharacterRotationPitch) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_ClearCharacterRotationPitch");
static_assert(sizeof(BPI_CharacterBase_C_ClearCharacterRotationPitch) == 0x000002, "Wrong size on BPI_CharacterBase_C_ClearCharacterRotationPitch");
static_assert(offsetof(BPI_CharacterBase_C_ClearCharacterRotationPitch, InTeleportPhysics) == 0x000000, "Member 'BPI_CharacterBase_C_ClearCharacterRotationPitch::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_ClearCharacterRotationPitch, IsSuccessfully) == 0x000001, "Member 'BPI_CharacterBase_C_ClearCharacterRotationPitch::IsSuccessfully' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetBPCharacterLocomotionComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_GetBPCharacterLocomotionComponent final
{
public:
	class UBP_CharacterLocomotionComponent_C*     LocomotionComponent;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetBPCharacterLocomotionComponent) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetBPCharacterLocomotionComponent");
static_assert(sizeof(BPI_CharacterBase_C_GetBPCharacterLocomotionComponent) == 0x000008, "Wrong size on BPI_CharacterBase_C_GetBPCharacterLocomotionComponent");
static_assert(offsetof(BPI_CharacterBase_C_GetBPCharacterLocomotionComponent, LocomotionComponent) == 0x000000, "Member 'BPI_CharacterBase_C_GetBPCharacterLocomotionComponent::LocomotionComponent' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetBPCharacterMontageComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_GetBPCharacterMontageComponent final
{
public:
	class UBP_CharacterMontageComponent_C*        Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetBPCharacterMontageComponent) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetBPCharacterMontageComponent");
static_assert(sizeof(BPI_CharacterBase_C_GetBPCharacterMontageComponent) == 0x000008, "Wrong size on BPI_CharacterBase_C_GetBPCharacterMontageComponent");
static_assert(offsetof(BPI_CharacterBase_C_GetBPCharacterMontageComponent, Component) == 0x000000, "Member 'BPI_CharacterBase_C_GetBPCharacterMontageComponent::Component' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetCameraVirtualTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterBase_C_GetCameraVirtualTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetCameraVirtualTargetLocation) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetCameraVirtualTargetLocation");
static_assert(sizeof(BPI_CharacterBase_C_GetCameraVirtualTargetLocation) == 0x000018, "Wrong size on BPI_CharacterBase_C_GetCameraVirtualTargetLocation");
static_assert(offsetof(BPI_CharacterBase_C_GetCameraVirtualTargetLocation, Location) == 0x000000, "Member 'BPI_CharacterBase_C_GetCameraVirtualTargetLocation::Location' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetHitBackData
// 0x02E0 (0x02E0 - 0x0000)
struct BPI_CharacterBase_C_GetHitBackData final
{
public:
	struct FKoratHitBackMovementData              HitBackData;                                       // 0x0000(0x02E0)(Parm, OutParm)
};
static_assert(alignof(BPI_CharacterBase_C_GetHitBackData) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetHitBackData");
static_assert(sizeof(BPI_CharacterBase_C_GetHitBackData) == 0x0002E0, "Wrong size on BPI_CharacterBase_C_GetHitBackData");
static_assert(offsetof(BPI_CharacterBase_C_GetHitBackData, HitBackData) == 0x000000, "Member 'BPI_CharacterBase_C_GetHitBackData::HitBackData' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetKnockBackVector
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterBase_C_GetKnockBackVector final
{
public:
	struct FVector                                KnockBackVector;                                   // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetKnockBackVector) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetKnockBackVector");
static_assert(sizeof(BPI_CharacterBase_C_GetKnockBackVector) == 0x000018, "Wrong size on BPI_CharacterBase_C_GetKnockBackVector");
static_assert(offsetof(BPI_CharacterBase_C_GetKnockBackVector, KnockBackVector) == 0x000000, "Member 'BPI_CharacterBase_C_GetKnockBackVector::KnockBackVector' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetLocomotionComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_GetLocomotionComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetLocomotionComponent) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetLocomotionComponent");
static_assert(sizeof(BPI_CharacterBase_C_GetLocomotionComponent) == 0x000008, "Wrong size on BPI_CharacterBase_C_GetLocomotionComponent");
static_assert(offsetof(BPI_CharacterBase_C_GetLocomotionComponent, ActorComponent) == 0x000000, "Member 'BPI_CharacterBase_C_GetLocomotionComponent::ActorComponent' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetLocomotionSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_GetLocomotionSplineComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetLocomotionSplineComponent) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetLocomotionSplineComponent");
static_assert(sizeof(BPI_CharacterBase_C_GetLocomotionSplineComponent) == 0x000008, "Wrong size on BPI_CharacterBase_C_GetLocomotionSplineComponent");
static_assert(offsetof(BPI_CharacterBase_C_GetLocomotionSplineComponent, ActorComponent) == 0x000000, "Member 'BPI_CharacterBase_C_GetLocomotionSplineComponent::ActorComponent' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetMontageComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_GetMontageComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetMontageComponent) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetMontageComponent");
static_assert(sizeof(BPI_CharacterBase_C_GetMontageComponent) == 0x000008, "Wrong size on BPI_CharacterBase_C_GetMontageComponent");
static_assert(offsetof(BPI_CharacterBase_C_GetMontageComponent, ActorComponent) == 0x000000, "Member 'BPI_CharacterBase_C_GetMontageComponent::ActorComponent' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetReplaceSubInstance
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterBase_C_GetReplaceSubInstance final
{
public:
	class FName                                   SubInstanceName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SubInstanceTagName;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SubInstanceClass;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetReplaceSubInstance) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetReplaceSubInstance");
static_assert(sizeof(BPI_CharacterBase_C_GetReplaceSubInstance) == 0x000018, "Wrong size on BPI_CharacterBase_C_GetReplaceSubInstance");
static_assert(offsetof(BPI_CharacterBase_C_GetReplaceSubInstance, SubInstanceName) == 0x000000, "Member 'BPI_CharacterBase_C_GetReplaceSubInstance::SubInstanceName' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_GetReplaceSubInstance, SubInstanceTagName) == 0x000008, "Member 'BPI_CharacterBase_C_GetReplaceSubInstance::SubInstanceTagName' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_GetReplaceSubInstance, SubInstanceClass) == 0x000010, "Member 'BPI_CharacterBase_C_GetReplaceSubInstance::SubInstanceClass' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetRequestAnim
// 0x0038 (0x0038 - 0x0000)
struct BPI_CharacterBase_C_GetRequestAnim final
{
public:
	struct FFRequestAnimData                      RequestAnimData;                                   // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetRequestAnim) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetRequestAnim");
static_assert(sizeof(BPI_CharacterBase_C_GetRequestAnim) == 0x000038, "Wrong size on BPI_CharacterBase_C_GetRequestAnim");
static_assert(offsetof(BPI_CharacterBase_C_GetRequestAnim, RequestAnimData) == 0x000000, "Member 'BPI_CharacterBase_C_GetRequestAnim::RequestAnimData' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetUseCharacterRotationPitchDetail
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail final
{
public:
	bool                                          UsePitchLimit;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitchInterp;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail");
static_assert(sizeof(BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail) == 0x000002, "Wrong size on BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail");
static_assert(offsetof(BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail, UsePitchLimit) == 0x000000, "Member 'BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail::UsePitchLimit' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail, UsePitchInterp) == 0x000001, "Member 'BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail::UsePitchInterp' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetVirtualTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterBase_C_GetVirtualTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetVirtualTargetLocation) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetVirtualTargetLocation");
static_assert(sizeof(BPI_CharacterBase_C_GetVirtualTargetLocation) == 0x000018, "Wrong size on BPI_CharacterBase_C_GetVirtualTargetLocation");
static_assert(offsetof(BPI_CharacterBase_C_GetVirtualTargetLocation, Location) == 0x000000, "Member 'BPI_CharacterBase_C_GetVirtualTargetLocation::Location' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputBattleKeyJustPressed
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_InputBattleKeyJustPressed final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputBattleKeyJustPressed) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_InputBattleKeyJustPressed");
static_assert(sizeof(BPI_CharacterBase_C_InputBattleKeyJustPressed) == 0x000001, "Wrong size on BPI_CharacterBase_C_InputBattleKeyJustPressed");
static_assert(offsetof(BPI_CharacterBase_C_InputBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BPI_CharacterBase_C_InputBattleKeyJustPressed::BattleKey' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputBattleKeyJustReleased
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_InputBattleKeyJustReleased final
{
public:
	EBattleKey                                    BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputBattleKeyJustReleased) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_InputBattleKeyJustReleased");
static_assert(sizeof(BPI_CharacterBase_C_InputBattleKeyJustReleased) == 0x000001, "Wrong size on BPI_CharacterBase_C_InputBattleKeyJustReleased");
static_assert(offsetof(BPI_CharacterBase_C_InputBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BPI_CharacterBase_C_InputBattleKeyJustReleased::BattleKey' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputFreeCameraVector
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterBase_C_InputFreeCameraVector final
{
public:
	struct FVector2D                              InputVector;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputFreeCameraVector) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_InputFreeCameraVector");
static_assert(sizeof(BPI_CharacterBase_C_InputFreeCameraVector) == 0x000010, "Wrong size on BPI_CharacterBase_C_InputFreeCameraVector");
static_assert(offsetof(BPI_CharacterBase_C_InputFreeCameraVector, InputVector) == 0x000000, "Member 'BPI_CharacterBase_C_InputFreeCameraVector::InputVector' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyDown
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_InputKoratBattleKeyDown final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputKoratBattleKeyDown) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_InputKoratBattleKeyDown");
static_assert(sizeof(BPI_CharacterBase_C_InputKoratBattleKeyDown) == 0x000001, "Wrong size on BPI_CharacterBase_C_InputKoratBattleKeyDown");
static_assert(offsetof(BPI_CharacterBase_C_InputKoratBattleKeyDown, BattleKey) == 0x000000, "Member 'BPI_CharacterBase_C_InputKoratBattleKeyDown::BattleKey' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyJustPressed
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_InputKoratBattleKeyJustPressed final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputKoratBattleKeyJustPressed) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_InputKoratBattleKeyJustPressed");
static_assert(sizeof(BPI_CharacterBase_C_InputKoratBattleKeyJustPressed) == 0x000001, "Wrong size on BPI_CharacterBase_C_InputKoratBattleKeyJustPressed");
static_assert(offsetof(BPI_CharacterBase_C_InputKoratBattleKeyJustPressed, BattleKey) == 0x000000, "Member 'BPI_CharacterBase_C_InputKoratBattleKeyJustPressed::BattleKey' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyJustReleased
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_InputKoratBattleKeyJustReleased final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputKoratBattleKeyJustReleased) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_InputKoratBattleKeyJustReleased");
static_assert(sizeof(BPI_CharacterBase_C_InputKoratBattleKeyJustReleased) == 0x000001, "Wrong size on BPI_CharacterBase_C_InputKoratBattleKeyJustReleased");
static_assert(offsetof(BPI_CharacterBase_C_InputKoratBattleKeyJustReleased, BattleKey) == 0x000000, "Member 'BPI_CharacterBase_C_InputKoratBattleKeyJustReleased::BattleKey' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyUp
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_InputKoratBattleKeyUp final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_InputKoratBattleKeyUp) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_InputKoratBattleKeyUp");
static_assert(sizeof(BPI_CharacterBase_C_InputKoratBattleKeyUp) == 0x000001, "Wrong size on BPI_CharacterBase_C_InputKoratBattleKeyUp");
static_assert(offsetof(BPI_CharacterBase_C_InputKoratBattleKeyUp, BattleKey) == 0x000000, "Member 'BPI_CharacterBase_C_InputKoratBattleKeyUp::BattleKey' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.NotifyPlayMontageLength
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterBase_C_NotifyPlayMontageLength final
{
public:
	double                                        MontageLength;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_NotifyPlayMontageLength) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_NotifyPlayMontageLength");
static_assert(sizeof(BPI_CharacterBase_C_NotifyPlayMontageLength) == 0x000008, "Wrong size on BPI_CharacterBase_C_NotifyPlayMontageLength");
static_assert(offsetof(BPI_CharacterBase_C_NotifyPlayMontageLength, MontageLength) == 0x000000, "Member 'BPI_CharacterBase_C_NotifyPlayMontageLength::MontageLength' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.PlayKnockBack
// 0x02E0 (0x02E0 - 0x0000)
struct BPI_CharacterBase_C_PlayKnockBack final
{
public:
	struct FKoratHitBackMovementData              InHitBackData;                                     // 0x0000(0x02E0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_CharacterBase_C_PlayKnockBack) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_PlayKnockBack");
static_assert(sizeof(BPI_CharacterBase_C_PlayKnockBack) == 0x0002E0, "Wrong size on BPI_CharacterBase_C_PlayKnockBack");
static_assert(offsetof(BPI_CharacterBase_C_PlayKnockBack, InHitBackData) == 0x000000, "Member 'BPI_CharacterBase_C_PlayKnockBack::InHitBackData' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.SetCharacterMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_SetCharacterMovementMode final
{
public:
	EMovementMode                                 InMovementMode;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_SetCharacterMovementMode) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_SetCharacterMovementMode");
static_assert(sizeof(BPI_CharacterBase_C_SetCharacterMovementMode) == 0x000001, "Wrong size on BPI_CharacterBase_C_SetCharacterMovementMode");
static_assert(offsetof(BPI_CharacterBase_C_SetCharacterMovementMode, InMovementMode) == 0x000000, "Member 'BPI_CharacterBase_C_SetCharacterMovementMode::InMovementMode' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.SetCharacterRotation
// 0x0020 (0x0020 - 0x0000)
struct BPI_CharacterBase_C_SetCharacterRotation final
{
public:
	struct FRotator                               InNewRotation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InTeleportPhysics;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccessfully;                                    // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_SetCharacterRotation) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_SetCharacterRotation");
static_assert(sizeof(BPI_CharacterBase_C_SetCharacterRotation) == 0x000020, "Wrong size on BPI_CharacterBase_C_SetCharacterRotation");
static_assert(offsetof(BPI_CharacterBase_C_SetCharacterRotation, InNewRotation) == 0x000000, "Member 'BPI_CharacterBase_C_SetCharacterRotation::InNewRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetCharacterRotation, InTeleportPhysics) == 0x000018, "Member 'BPI_CharacterBase_C_SetCharacterRotation::InTeleportPhysics' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetCharacterRotation, IsSuccessfully) == 0x000019, "Member 'BPI_CharacterBase_C_SetCharacterRotation::IsSuccessfully' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.SetUseCharacterRotationPitch
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterBase_C_SetUseCharacterRotationPitch final
{
public:
	bool                                          InUsePitch;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitch;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_SetUseCharacterRotationPitch) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_SetUseCharacterRotationPitch");
static_assert(sizeof(BPI_CharacterBase_C_SetUseCharacterRotationPitch) == 0x000002, "Wrong size on BPI_CharacterBase_C_SetUseCharacterRotationPitch");
static_assert(offsetof(BPI_CharacterBase_C_SetUseCharacterRotationPitch, InUsePitch) == 0x000000, "Member 'BPI_CharacterBase_C_SetUseCharacterRotationPitch::InUsePitch' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetUseCharacterRotationPitch, UsePitch) == 0x000001, "Member 'BPI_CharacterBase_C_SetUseCharacterRotationPitch::UsePitch' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.SetUseCharacterRotationPitchDetail
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail final
{
public:
	bool                                          InUsePitchLimit;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InUsePitchInterp;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitchLimit;                                     // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePitchInterp;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail");
static_assert(sizeof(BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail) == 0x000004, "Wrong size on BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail");
static_assert(offsetof(BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail, InUsePitchLimit) == 0x000000, "Member 'BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail::InUsePitchLimit' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail, InUsePitchInterp) == 0x000001, "Member 'BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail::InUsePitchInterp' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail, UsePitchLimit) == 0x000002, "Member 'BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail::UsePitchLimit' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail, UsePitchInterp) == 0x000003, "Member 'BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail::UsePitchInterp' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.SetVirtualTarget
// 0x0028 (0x0028 - 0x0000)
struct BPI_CharacterBase_C_SetVirtualTarget final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InUseBattleTargetPawn;                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_SetVirtualTarget) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_SetVirtualTarget");
static_assert(sizeof(BPI_CharacterBase_C_SetVirtualTarget) == 0x000028, "Wrong size on BPI_CharacterBase_C_SetVirtualTarget");
static_assert(offsetof(BPI_CharacterBase_C_SetVirtualTarget, InActor) == 0x000000, "Member 'BPI_CharacterBase_C_SetVirtualTarget::InActor' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetVirtualTarget, InLocation) == 0x000008, "Member 'BPI_CharacterBase_C_SetVirtualTarget::InLocation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterBase_C_SetVirtualTarget, InUseBattleTargetPawn) == 0x000020, "Member 'BPI_CharacterBase_C_SetVirtualTarget::InUseBattleTargetPawn' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetCharacterMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_GetCharacterMovementMode final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetCharacterMovementMode) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_GetCharacterMovementMode");
static_assert(sizeof(BPI_CharacterBase_C_GetCharacterMovementMode) == 0x000001, "Wrong size on BPI_CharacterBase_C_GetCharacterMovementMode");
static_assert(offsetof(BPI_CharacterBase_C_GetCharacterMovementMode, MovementMode) == 0x000000, "Member 'BPI_CharacterBase_C_GetCharacterMovementMode::MovementMode' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetCharacterRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterBase_C_GetCharacterRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharacterBase_C_GetCharacterRotation) == 0x000008, "Wrong alignment on BPI_CharacterBase_C_GetCharacterRotation");
static_assert(sizeof(BPI_CharacterBase_C_GetCharacterRotation) == 0x000018, "Wrong size on BPI_CharacterBase_C_GetCharacterRotation");
static_assert(offsetof(BPI_CharacterBase_C_GetCharacterRotation, Rotation) == 0x000000, "Member 'BPI_CharacterBase_C_GetCharacterRotation::Rotation' has a wrong offset!");

// Function BPI_CharacterBase.BPI_CharacterBase_C.GetUseCharacterRotationPitch
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterBase_C_GetUseCharacterRotationPitch final
{
public:
	bool                                          UsePitch;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterBase_C_GetUseCharacterRotationPitch) == 0x000001, "Wrong alignment on BPI_CharacterBase_C_GetUseCharacterRotationPitch");
static_assert(sizeof(BPI_CharacterBase_C_GetUseCharacterRotationPitch) == 0x000001, "Wrong size on BPI_CharacterBase_C_GetUseCharacterRotationPitch");
static_assert(offsetof(BPI_CharacterBase_C_GetUseCharacterRotationPitch, UsePitch) == 0x000000, "Member 'BPI_CharacterBase_C_GetUseCharacterRotationPitch::UsePitch' has a wrong offset!");

}

