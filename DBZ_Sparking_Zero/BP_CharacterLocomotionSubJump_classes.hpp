#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubJump

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C
// 0x0058 (0x00B8 - 0x0060)
class UBP_CharacterLocomotionSubJump_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	EKoratJumpState                               JumpStatus;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JumpToFlyTimer;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                JumpINVelocity;                                    // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumpKeyReleased;                                 // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FallStartPoint;                                    // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpCantFallTimer;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartFromShortDash;                              // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void LandedJump();
	void OnEndJumpFT();
	void OnEndJumpIN();
	void OnEndJumpOT();
	void OnEndJumpUP();
	void Set_Jump_Status(EKoratJumpState InJumpStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StartFalling();
	void StartJumpUp();
	void StopJump(bool InChangeJumpToFly);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateRotationJump();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubJump_C">();
	}
	static class UBP_CharacterLocomotionSubJump_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubJump_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubJump_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubJump_C");
static_assert(sizeof(UBP_CharacterLocomotionSubJump_C) == 0x0000B8, "Wrong size on UBP_CharacterLocomotionSubJump_C");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, JumpStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubJump_C::JumpStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, JumpToFlyTimer) == 0x000068, "Member 'UBP_CharacterLocomotionSubJump_C::JumpToFlyTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, JumpINVelocity) == 0x000070, "Member 'UBP_CharacterLocomotionSubJump_C::JumpINVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, IsJumpKeyReleased) == 0x000088, "Member 'UBP_CharacterLocomotionSubJump_C::IsJumpKeyReleased' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, FallStartPoint) == 0x000090, "Member 'UBP_CharacterLocomotionSubJump_C::FallStartPoint' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, JumpCantFallTimer) == 0x0000A8, "Member 'UBP_CharacterLocomotionSubJump_C::JumpCantFallTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubJump_C, IsStartFromShortDash) == 0x0000B0, "Member 'UBP_CharacterLocomotionSubJump_C::IsStartFromShortDash' has a wrong offset!");

}

