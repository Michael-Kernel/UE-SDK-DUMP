#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubNumbReaction

#include "Basic.hpp"

#include "ECharacterNumbReactionState_structs.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.Check
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_Check final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStart;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckToState_CanStart;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_Check) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_Check");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_Check) == 0x000010, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_Check");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Check, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Check::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Check, CanStart) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Check::CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Check, CallFunc_CheckToState_CanStart) == 0x000009, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Check::CallFunc_CheckToState_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.CheckAndStart
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart) == 0x000020, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, CallFunc_Check_CanStart) == 0x000018, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, CallFunc_Start_NewParam) == 0x000019, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart, CallFunc_CheckAndStart_IsStarted) == 0x00001A, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckAndStart::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.CheckNumbReactionEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumbState_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd) == 0x000018, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd, IsEnd) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd::IsEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd, CallFunc_GetSSCharacter_SSCharacter) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd, CallFunc_IsNumbState_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckNumbReactionEnd::CallFunc_IsNumbState_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.CheckToState
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_CheckToState final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterNumbReactionState                   InStartStatus;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStart;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumbState_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_CheckToState");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState) == 0x000020, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_CheckToState");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckToState::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState, InStartStatus) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckToState::InStartStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState, CanStart) == 0x000009, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckToState::CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState, CallFunc_GetSSCharacter_SSCharacter) == 0x000010, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckToState::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState, CallFunc_IsNumbState_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckToState::CallFunc_IsNumbState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_CheckToState, CallFunc_Check_CanStart) == 0x000019, "Member 'BP_CharacterLocomotionSubNumbReaction_C_CheckToState::CallFunc_Check_CanStart' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.GetLocomotionDetailStatus
// 0x0006 (0x0006 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         LocomotionDetailStatus;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterNumbReactionState                   Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus) == 0x000006, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus, LocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus::LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus, Temp_byte_Variable) == 0x000001, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus, Temp_byte_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus, Temp_byte_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus, Temp_byte_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus, K2Node_Select_Default) == 0x000005, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetLocomotionDetailStatus::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.GetRunningAction
// 0x002C (0x002C - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   RunningAction;                                     // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	ECharacterNumbReactionState                   Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable;                              // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_1;                            // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_2;                            // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   K2Node_Select_Default;                             // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction) == 0x00002C, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction, RunningAction) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction::RunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction, Temp_struct_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction, Temp_struct_Variable_1) == 0x000014, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction, Temp_struct_Variable_2) == 0x00001C, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction, K2Node_Select_Default) == 0x000024, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningAction::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.GetRunningSection
// 0x002C (0x002C - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection final
{
public:
	class FName                                   RunningSection;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterNumbReactionState                   Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection) == 0x00002C, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection, RunningSection) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection::RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection, Temp_name_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection, Temp_name_Variable_1) == 0x000014, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection, Temp_name_Variable_2) == 0x00001C, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection, K2Node_Select_Default) == 0x000024, "Member 'BP_CharacterLocomotionSubNumbReaction_C_GetRunningSection::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.IsEnableAction
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction) == 0x000002, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_CharacterLocomotionSubNumbReaction_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.SetNumbReactionStatus
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus final
{
public:
	ECharacterNumbReactionState                   InNumbReactionStatus;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus) == 0x000030, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, InNumbReactionStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::InNumbReactionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000018, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000020, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000028, "Member 'BP_CharacterLocomotionSubNumbReaction_C_SetNumbReactionStatus::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.Start
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_Start final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_Start) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_Start");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_Start) == 0x000010, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_Start");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Start, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Start::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Start, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Start::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Start, NewParam) == 0x000009, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Start::NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.StartToState
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_StartToState final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterNumbReactionState                   InStartStatus;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsFront;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_StartToState) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_StartToState");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_StartToState) == 0x000020, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_StartToState");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_StartToState, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_StartToState::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_StartToState, InStartStatus) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_StartToState::InStartStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_StartToState, InIsFront) == 0x000009, "Member 'BP_CharacterLocomotionSubNumbReaction_C_StartToState::InIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_StartToState, CallFunc_Start_NewParam) == 0x00000A, "Member 'BP_CharacterLocomotionSubNumbReaction_C_StartToState::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_StartToState, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubNumbReaction_C_StartToState::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_StartToState, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000018, "Member 'BP_CharacterLocomotionSubNumbReaction_C_StartToState::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");

// Function BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C.Update
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionSubNumbReaction_C_Update final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 CallFunc_GetUpdateEventType_EventType;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumbReactionEnd_IsEnd;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNumbReactionEnd_IsEnd_1;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_3; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeDown_IsChangeOtherDown;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 CallFunc_GetUpdateEventType_EventType_1;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubNumbReaction_C_Update) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubNumbReaction_C_Update");
static_assert(sizeof(BP_CharacterLocomotionSubNumbReaction_C_Update) == 0x000050, "Wrong size on BP_CharacterLocomotionSubNumbReaction_C_Update");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, InEventType) == 0x000008, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, InDeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, NewParam) == 0x000018, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_GetUpdateEventType_EventType) == 0x000019, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_GetUpdateEventType_EventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000020, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_CheckNumbReactionEnd_IsEnd) == 0x000028, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_CheckNumbReactionEnd_IsEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_CheckNumbReactionEnd_IsEnd_1) == 0x000029, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_CheckNumbReactionEnd_IsEnd_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000030, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000038, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent_3) == 0x000040, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_ChangeDown_IsChangeOtherDown) == 0x000048, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_ChangeDown_IsChangeOtherDown' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_GetUpdateEventType_EventType_1) == 0x000049, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_GetUpdateEventType_EventType_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, K2Node_SwitchEnum_CmpSuccess_1) == 0x00004A, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00004B, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, K2Node_SwitchEnum_CmpSuccess_2) == 0x00004C, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubNumbReaction_C_Update, CallFunc_Update_NewParam) == 0x00004D, "Member 'BP_CharacterLocomotionSubNumbReaction_C_Update::CallFunc_Update_NewParam' has a wrong offset!");

}

