#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SS_Base_MasterField

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Chaos_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FieldSystemEngine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SS_Base_MasterField.SS_Base_MasterField_C
// 0x0408 (0x06A0 - 0x0298)
class ASS_Base_MasterField_C : public AFieldSystemActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFieldSystemMetaDataProcessingResolution* FieldSystemMetaDataProcessingResolution;           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PlaneVolumeBox;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneVolume;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DirectionalArrowNull;                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereVolumeCol;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SphereVolume;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoxVolume;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxVolumeCol;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UReturnResultsTerminal*                 ReturnResultsTerminal;                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Field_Active;                                      // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOperatorField*                         OperatorFIeld_Input;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ActivationType;                                    // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Field_Falloff_Shape;                               // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTick;                                           // 0x02FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DelayAmount;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_External_Strain;                               // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Strain_Magnitude;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             StrainFalloffType;                                 // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StrainFalloffMinMax;                               // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumStrainHits;                                     // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRadialVector;                                   // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Radial_Magnitude;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirectionalVector;                              // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirectionalMagnitude;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTorque;                                         // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TorqueMult;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             VelocityFieldFalloffType;                          // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              VelocityFalloffMinMax;                             // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNoise;                                          // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NoiseMinMax;                                       // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDecay;                                          // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DecayAmount;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             DecayFalloffType;                                  // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DecayFalloffMinMax;                                // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FieldVolume;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DecayDelay;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDecayAmount;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RadialPositionOffset;                              // 0x03D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverideDIrectionalVector;                          // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DIrectionalVectorOveride;                          // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TorqueVectorOveride;                               // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Velocity_Vector_Switch;                            // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForceMult;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoxCullingOnPlanar;                                // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlanarFalloffDistOveride;                          // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Dynamic_Switch;                              // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivateTaggedStaticAndSkeletal;                   // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Chaos_Field_Name;                                  // 0x0448(0x0018)(Edit, BlueprintVisible)
	struct FLinearColor                           FieldColour;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugText;                                     // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowWireFrame;                                     // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowSolidShapes;                                   // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_473[0x5];                                      // 0x0473(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirectionalDisplayScale;                           // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadialDisplayScale;                                // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Text_Vertical_Offset;                              // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldPhysicsType                             LinearPhysicsType;                                 // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldPhysicsType                             AngularPhysicsType;                                // 0x0491(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             FieldFalloffType;                                  // 0x0492(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             Field_Falloff_Noise;                               // 0x0493(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             Field_Falloff_Torque;                              // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLifespan;                                       // 0x0495(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_496[0x2];                                      // 0x0496(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FieldLifespan;                                     // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFramesForTiming;                                // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FPS;                                               // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectStateTypeEnum                          Dynamic_State;                                     // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlanarFalloffDist;                                 // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalDecay;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FalloffMinMax;                                     // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PlanarFalloffExtentColor;                          // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DIrectionalVelocityVector;                         // 0x04E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UpVector;                                          // 0x0500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0518(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardVector;                                     // 0x0530(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightVector;                                       // 0x0548(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Skel;                                              // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AStaticMeshActor*>               SimmableStaticMeshes;                              // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ASkeletalMeshActor*>             SimmableSkelMeshes;                                // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   PulseLevel;                                        // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           TextDisplay;                                       // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UTextRenderComponent*>           AllText;                                           // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FLinearColor                           ArrowColour_Dir;                                   // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ArrowColour_Normal;                                // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DeactivatedColour;                                 // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DeactivatedTextColour;                             // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Preview_Material;                                  // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimeElapsed;                                       // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NoiseScaleMult;                                    // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewVar_0;                                          // 0x0610(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTriggered;                                       // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NoiseScaleBase;                                    // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyActor;                                      // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             FieldFalloffType_Input;                            // 0x0681(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_682[0x6];                                      // 0x0682(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FalloffMinMax_Input;                               // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Magnitude_Input;                                   // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateNoise(class UNoiseField** OutputPin);
	void CE_Trigger();
	void DisplayTextSetup();
	void ExecuteUbergraph_SS_Base_MasterField(int32 EntryPoint);
	void FalloffAndCullSwitch_Main(double Magnitude, EFieldFalloffType FalloffType, const struct FVector2D& FalloffMinMax_0, class UOperatorField* OperatorField, class UCullingField** CullingField);
	void FalloffShapeSwitch(EFieldFalloffType FalloffType, const struct FVector2D& FalloffMinMax_0, class UOperatorField** OperatorFieldOut);
	void ForceMultiplier();
	void InitializeFieldVariables();
	void MakeDynamic_EnableNonGC();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetVisibility();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SS_Base_MasterField_C">();
	}
	static class ASS_Base_MasterField_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASS_Base_MasterField_C>();
	}
};
static_assert(alignof(ASS_Base_MasterField_C) == 0x000010, "Wrong alignment on ASS_Base_MasterField_C");
static_assert(sizeof(ASS_Base_MasterField_C) == 0x0006A0, "Wrong size on ASS_Base_MasterField_C");
static_assert(offsetof(ASS_Base_MasterField_C, UberGraphFrame) == 0x000298, "Member 'ASS_Base_MasterField_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FieldSystemMetaDataProcessingResolution) == 0x0002A0, "Member 'ASS_Base_MasterField_C::FieldSystemMetaDataProcessingResolution' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, PlaneVolumeBox) == 0x0002A8, "Member 'ASS_Base_MasterField_C::PlaneVolumeBox' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, PlaneVolume) == 0x0002B0, "Member 'ASS_Base_MasterField_C::PlaneVolume' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DirectionalArrowNull) == 0x0002B8, "Member 'ASS_Base_MasterField_C::DirectionalArrowNull' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, SphereVolumeCol) == 0x0002C0, "Member 'ASS_Base_MasterField_C::SphereVolumeCol' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, SphereVolume) == 0x0002C8, "Member 'ASS_Base_MasterField_C::SphereVolume' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, BoxVolume) == 0x0002D0, "Member 'ASS_Base_MasterField_C::BoxVolume' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, BoxVolumeCol) == 0x0002D8, "Member 'ASS_Base_MasterField_C::BoxVolumeCol' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ReturnResultsTerminal) == 0x0002E0, "Member 'ASS_Base_MasterField_C::ReturnResultsTerminal' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Field_Active) == 0x0002E8, "Member 'ASS_Base_MasterField_C::Field_Active' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, OperatorFIeld_Input) == 0x0002F0, "Member 'ASS_Base_MasterField_C::OperatorFIeld_Input' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Debug) == 0x0002F8, "Member 'ASS_Base_MasterField_C::Debug' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ActivationType) == 0x0002F9, "Member 'ASS_Base_MasterField_C::ActivationType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Field_Falloff_Shape) == 0x0002FA, "Member 'ASS_Base_MasterField_C::Field_Falloff_Shape' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseTick) == 0x0002FB, "Member 'ASS_Base_MasterField_C::UseTick' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DelayAmount) == 0x000300, "Member 'ASS_Base_MasterField_C::DelayAmount' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Use_External_Strain) == 0x000308, "Member 'ASS_Base_MasterField_C::Use_External_Strain' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Strain_Magnitude) == 0x000310, "Member 'ASS_Base_MasterField_C::Strain_Magnitude' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, StrainFalloffType) == 0x000318, "Member 'ASS_Base_MasterField_C::StrainFalloffType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, StrainFalloffMinMax) == 0x000320, "Member 'ASS_Base_MasterField_C::StrainFalloffMinMax' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, NumStrainHits) == 0x000330, "Member 'ASS_Base_MasterField_C::NumStrainHits' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseRadialVector) == 0x000334, "Member 'ASS_Base_MasterField_C::UseRadialVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Radial_Magnitude) == 0x000338, "Member 'ASS_Base_MasterField_C::Radial_Magnitude' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseDirectionalVector) == 0x000340, "Member 'ASS_Base_MasterField_C::UseDirectionalVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DirectionalMagnitude) == 0x000348, "Member 'ASS_Base_MasterField_C::DirectionalMagnitude' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseTorque) == 0x000350, "Member 'ASS_Base_MasterField_C::UseTorque' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, TorqueMult) == 0x000358, "Member 'ASS_Base_MasterField_C::TorqueMult' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, VelocityFieldFalloffType) == 0x000360, "Member 'ASS_Base_MasterField_C::VelocityFieldFalloffType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, VelocityFalloffMinMax) == 0x000368, "Member 'ASS_Base_MasterField_C::VelocityFalloffMinMax' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseNoise) == 0x000378, "Member 'ASS_Base_MasterField_C::UseNoise' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, NoiseMinMax) == 0x000380, "Member 'ASS_Base_MasterField_C::NoiseMinMax' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseDecay) == 0x000390, "Member 'ASS_Base_MasterField_C::UseDecay' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DecayAmount) == 0x000398, "Member 'ASS_Base_MasterField_C::DecayAmount' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DecayFalloffType) == 0x0003A0, "Member 'ASS_Base_MasterField_C::DecayFalloffType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DecayFalloffMinMax) == 0x0003A8, "Member 'ASS_Base_MasterField_C::DecayFalloffMinMax' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FieldVolume) == 0x0003B8, "Member 'ASS_Base_MasterField_C::FieldVolume' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DecayDelay) == 0x0003C0, "Member 'ASS_Base_MasterField_C::DecayDelay' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, MaxDecayAmount) == 0x0003C8, "Member 'ASS_Base_MasterField_C::MaxDecayAmount' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, RadialPositionOffset) == 0x0003D0, "Member 'ASS_Base_MasterField_C::RadialPositionOffset' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, OverideDIrectionalVector) == 0x0003E8, "Member 'ASS_Base_MasterField_C::OverideDIrectionalVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DIrectionalVectorOveride) == 0x0003F0, "Member 'ASS_Base_MasterField_C::DIrectionalVectorOveride' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, TorqueVectorOveride) == 0x000408, "Member 'ASS_Base_MasterField_C::TorqueVectorOveride' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Velocity_Vector_Switch) == 0x000420, "Member 'ASS_Base_MasterField_C::Velocity_Vector_Switch' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ForceMult) == 0x000428, "Member 'ASS_Base_MasterField_C::ForceMult' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, BoxCullingOnPlanar) == 0x000430, "Member 'ASS_Base_MasterField_C::BoxCullingOnPlanar' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, PlanarFalloffDistOveride) == 0x000438, "Member 'ASS_Base_MasterField_C::PlanarFalloffDistOveride' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Force_Dynamic_Switch) == 0x000440, "Member 'ASS_Base_MasterField_C::Force_Dynamic_Switch' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ActivateTaggedStaticAndSkeletal) == 0x000441, "Member 'ASS_Base_MasterField_C::ActivateTaggedStaticAndSkeletal' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Chaos_Field_Name) == 0x000448, "Member 'ASS_Base_MasterField_C::Chaos_Field_Name' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FieldColour) == 0x000460, "Member 'ASS_Base_MasterField_C::FieldColour' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ShowDebugText) == 0x000470, "Member 'ASS_Base_MasterField_C::ShowDebugText' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ShowWireFrame) == 0x000471, "Member 'ASS_Base_MasterField_C::ShowWireFrame' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ShowSolidShapes) == 0x000472, "Member 'ASS_Base_MasterField_C::ShowSolidShapes' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DirectionalDisplayScale) == 0x000478, "Member 'ASS_Base_MasterField_C::DirectionalDisplayScale' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, RadialDisplayScale) == 0x000480, "Member 'ASS_Base_MasterField_C::RadialDisplayScale' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Text_Vertical_Offset) == 0x000488, "Member 'ASS_Base_MasterField_C::Text_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, LinearPhysicsType) == 0x000490, "Member 'ASS_Base_MasterField_C::LinearPhysicsType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, AngularPhysicsType) == 0x000491, "Member 'ASS_Base_MasterField_C::AngularPhysicsType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FieldFalloffType) == 0x000492, "Member 'ASS_Base_MasterField_C::FieldFalloffType' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Field_Falloff_Noise) == 0x000493, "Member 'ASS_Base_MasterField_C::Field_Falloff_Noise' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Field_Falloff_Torque) == 0x000494, "Member 'ASS_Base_MasterField_C::Field_Falloff_Torque' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseLifespan) == 0x000495, "Member 'ASS_Base_MasterField_C::UseLifespan' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FieldLifespan) == 0x000498, "Member 'ASS_Base_MasterField_C::FieldLifespan' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UseFramesForTiming) == 0x0004A0, "Member 'ASS_Base_MasterField_C::UseFramesForTiming' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FPS) == 0x0004A8, "Member 'ASS_Base_MasterField_C::FPS' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Dynamic_State) == 0x0004B0, "Member 'ASS_Base_MasterField_C::Dynamic_State' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, PlanarFalloffDist) == 0x0004B8, "Member 'ASS_Base_MasterField_C::PlanarFalloffDist' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, TotalDecay) == 0x0004C0, "Member 'ASS_Base_MasterField_C::TotalDecay' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FalloffMinMax) == 0x0004C8, "Member 'ASS_Base_MasterField_C::FalloffMinMax' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, PlanarFalloffExtentColor) == 0x0004D8, "Member 'ASS_Base_MasterField_C::PlanarFalloffExtentColor' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DIrectionalVelocityVector) == 0x0004E8, "Member 'ASS_Base_MasterField_C::DIrectionalVelocityVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, UpVector) == 0x000500, "Member 'ASS_Base_MasterField_C::UpVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, WorldLocation) == 0x000518, "Member 'ASS_Base_MasterField_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ForwardVector) == 0x000530, "Member 'ASS_Base_MasterField_C::ForwardVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, RightVector) == 0x000548, "Member 'ASS_Base_MasterField_C::RightVector' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Skel) == 0x000560, "Member 'ASS_Base_MasterField_C::Skel' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, SimmableStaticMeshes) == 0x000568, "Member 'ASS_Base_MasterField_C::SimmableStaticMeshes' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, SimmableSkelMeshes) == 0x000578, "Member 'ASS_Base_MasterField_C::SimmableSkelMeshes' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, PulseLevel) == 0x000588, "Member 'ASS_Base_MasterField_C::PulseLevel' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, TextDisplay) == 0x000590, "Member 'ASS_Base_MasterField_C::TextDisplay' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, AllText) == 0x0005A0, "Member 'ASS_Base_MasterField_C::AllText' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ArrowColour_Dir) == 0x0005B0, "Member 'ASS_Base_MasterField_C::ArrowColour_Dir' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, ArrowColour_Normal) == 0x0005C0, "Member 'ASS_Base_MasterField_C::ArrowColour_Normal' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DeactivatedColour) == 0x0005D0, "Member 'ASS_Base_MasterField_C::DeactivatedColour' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DeactivatedTextColour) == 0x0005E0, "Member 'ASS_Base_MasterField_C::DeactivatedTextColour' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Preview_Material) == 0x0005F0, "Member 'ASS_Base_MasterField_C::Preview_Material' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, TimeElapsed) == 0x0005F8, "Member 'ASS_Base_MasterField_C::TimeElapsed' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, NoiseScaleMult) == 0x000600, "Member 'ASS_Base_MasterField_C::NoiseScaleMult' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, NewVar_0) == 0x000610, "Member 'ASS_Base_MasterField_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, IsTriggered) == 0x000670, "Member 'ASS_Base_MasterField_C::IsTriggered' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, NoiseScaleBase) == 0x000678, "Member 'ASS_Base_MasterField_C::NoiseScaleBase' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, DestroyActor) == 0x000680, "Member 'ASS_Base_MasterField_C::DestroyActor' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FieldFalloffType_Input) == 0x000681, "Member 'ASS_Base_MasterField_C::FieldFalloffType_Input' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, FalloffMinMax_Input) == 0x000688, "Member 'ASS_Base_MasterField_C::FalloffMinMax_Input' has a wrong offset!");
static_assert(offsetof(ASS_Base_MasterField_C, Magnitude_Input) == 0x000698, "Member 'ASS_Base_MasterField_C::Magnitude_Input' has a wrong offset!");

}

