#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlePracticeManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SS_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattlePracticeManager.BP_BattlePracticeManager_C
// 0x0010 (0x03F0 - 0x03E0)
class ABP_BattlePracticeManager_C final : public ASSBattlePracticeManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void Debug_Command(TArray<class FString>& InDebugCommand);
	void DebugPlayModel(const class FString& InCommandOpt);
	void DebugSetupMenu(const class FString& InCommandOpt);
	void DebugStartPlayer();
	void DebugStartReset(const class FString& InCommandOpt);
	void ExecuteUbergraph_BP_BattlePracticeManager(int32 EntryPoint);
	void OnDebugCommand(const TArray<class FString>& InDebugCommand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattlePracticeManager_C">();
	}
	static class ABP_BattlePracticeManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattlePracticeManager_C>();
	}
};
static_assert(alignof(ABP_BattlePracticeManager_C) == 0x000008, "Wrong alignment on ABP_BattlePracticeManager_C");
static_assert(sizeof(ABP_BattlePracticeManager_C) == 0x0003F0, "Wrong size on ABP_BattlePracticeManager_C");
static_assert(offsetof(ABP_BattlePracticeManager_C, UberGraphFrame) == 0x0003E0, "Member 'ABP_BattlePracticeManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattlePracticeManager_C, DefaultSceneRoot) == 0x0003E8, "Member 'ABP_BattlePracticeManager_C::DefaultSceneRoot' has a wrong offset!");

}

