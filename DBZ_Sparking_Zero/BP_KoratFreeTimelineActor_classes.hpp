#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KoratFreeTimelineActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EPlayInfoLabel_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"
#include "EFreeTimelinePlaySection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KoratFreeTimelineActor.BP_KoratFreeTimelineActor_C
// 0x0230 (0x0F50 - 0x0D20)
class ABP_KoratFreeTimelineActor_C : public AKoratFreeTimelineActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D20(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_KoratEffectMultipleColorComponent_C* BP_KoratEffectMultipleColorComponent;              // 0x0D28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MaterialBillboard;                                 // 0x0D30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TScriptInterface<class IIKoratFreeTimelineCanPlayChecker>> CanPlayCheckerArray;                               // 0x0D38(0x0010)(Edit, BlueprintVisible)
	TMap<class FName, struct FKoratSequenceLabelParametersArray> SequencerLabelInfo;                                // 0x0D48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayInfoLabel, struct FKoratSequenceLabelParametersArray> UserDefinePlayInfo;                                // 0x0D98(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    Identity;                                          // 0x0DE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    HitLocationOnly;                                   // 0x0DF8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    HitLocationAndHitRotation;                         // 0x0E08(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    HitLocationAndCharaYaw;                            // 0x0E18(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    HitLocationAndCharaInputMoveRotation;              // 0x0E28(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    MyselfLocationOnly;                                // 0x0E38(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    MyselfLocationAndMyselfRotation;                   // 0x0E48(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    MyselfLocationAndHitRotation;                      // 0x0E58(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    MyselfLocationAndCharaYaw;                         // 0x0E68(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    MyselfLocationAndCharaInputMoveRotation;           // 0x0E78(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    MyselfLocationAndRotationAndScale;                 // 0x0E88(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    OldType;                                           // 0x0E98(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    CharacterSocketLocation;                           // 0x0EA8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    CharacterSocketLocationAndCharaYaw;                // 0x0EB8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    CharacterSocketLocationAndRotationAndScale;        // 0x0EC8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EKoratFreeTimelineTransformElement>    CharacterSocketLocationAndCharaYawAndScale;        // 0x0ED8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<EFreeTimelinePlaySection, class FName>   SectionEnumDefineMap;                              // 0x0EE8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EFreeTimelinePlaySection                      PlaySectionSetting;                                // 0x0F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F39[0x7];                                      // 0x0F39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EKoratFreeTimelineTransformElement>    DecalPreset;                                       // 0x0F40(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)

public:
	bool CanPlay();
	void CheckeAllCanPlay(TArray<TScriptInterface<class IIKoratFreeTimelineCanPlayChecker>>& CheckerArray, bool* Result);
	void ExecuteUbergraph_BP_KoratFreeTimelineActor(int32 EntryPoint);
	void Find_Sequence_Play_Info_Array_from_UserDefine(EPlayInfoLabel PlayInfoLabelEnum, TArray<struct FKoratSequencePlayInfo>* Return_Play_Info, bool* Result);
	void Find_Sequence_Play_Info_from_UserDefine(EPlayInfoLabel PlayInfoLabelEnum, struct FKoratSequencePlayInfo* Return_Play_Info, bool* Result);
	TArray<struct FKoratSequencePlayInfo> FindSequencePlayInfo(const class FName InKey);
	bool IsOneShot();
	struct FTransform MakeOverrideTransform();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Set_Sequence_Section_Setting(EFreeTimelinePlaySection PlayInfoLabelEnum);
	void SetAssetBySoftObjectPath(const struct FSoftObjectPath& AssetSoftObjectPath, bool* Result);
	void SetInteractAttributeData(const struct FKoratInteractAttributeData& InInteractData);
	void UserConstructionScript();

	TArray<EKoratFreeTimelineTransformElement> GetTransformProcessingOrderArray() const;
	TArray<EKoratFreeTimelineTransformElement> GetTransformProcessingOrderArrayBasedOnPreset(const EKoratFreeTimelineOverrideTransformPreset InPreset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KoratFreeTimelineActor_C">();
	}
	static class ABP_KoratFreeTimelineActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KoratFreeTimelineActor_C>();
	}
};
static_assert(alignof(ABP_KoratFreeTimelineActor_C) == 0x000010, "Wrong alignment on ABP_KoratFreeTimelineActor_C");
static_assert(sizeof(ABP_KoratFreeTimelineActor_C) == 0x000F50, "Wrong size on ABP_KoratFreeTimelineActor_C");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, UberGraphFrame) == 0x000D20, "Member 'ABP_KoratFreeTimelineActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, BP_KoratEffectMultipleColorComponent) == 0x000D28, "Member 'ABP_KoratFreeTimelineActor_C::BP_KoratEffectMultipleColorComponent' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MaterialBillboard) == 0x000D30, "Member 'ABP_KoratFreeTimelineActor_C::MaterialBillboard' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, CanPlayCheckerArray) == 0x000D38, "Member 'ABP_KoratFreeTimelineActor_C::CanPlayCheckerArray' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, SequencerLabelInfo) == 0x000D48, "Member 'ABP_KoratFreeTimelineActor_C::SequencerLabelInfo' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, UserDefinePlayInfo) == 0x000D98, "Member 'ABP_KoratFreeTimelineActor_C::UserDefinePlayInfo' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, Identity) == 0x000DE8, "Member 'ABP_KoratFreeTimelineActor_C::Identity' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, HitLocationOnly) == 0x000DF8, "Member 'ABP_KoratFreeTimelineActor_C::HitLocationOnly' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, HitLocationAndHitRotation) == 0x000E08, "Member 'ABP_KoratFreeTimelineActor_C::HitLocationAndHitRotation' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, HitLocationAndCharaYaw) == 0x000E18, "Member 'ABP_KoratFreeTimelineActor_C::HitLocationAndCharaYaw' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, HitLocationAndCharaInputMoveRotation) == 0x000E28, "Member 'ABP_KoratFreeTimelineActor_C::HitLocationAndCharaInputMoveRotation' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MyselfLocationOnly) == 0x000E38, "Member 'ABP_KoratFreeTimelineActor_C::MyselfLocationOnly' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MyselfLocationAndMyselfRotation) == 0x000E48, "Member 'ABP_KoratFreeTimelineActor_C::MyselfLocationAndMyselfRotation' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MyselfLocationAndHitRotation) == 0x000E58, "Member 'ABP_KoratFreeTimelineActor_C::MyselfLocationAndHitRotation' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MyselfLocationAndCharaYaw) == 0x000E68, "Member 'ABP_KoratFreeTimelineActor_C::MyselfLocationAndCharaYaw' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MyselfLocationAndCharaInputMoveRotation) == 0x000E78, "Member 'ABP_KoratFreeTimelineActor_C::MyselfLocationAndCharaInputMoveRotation' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, MyselfLocationAndRotationAndScale) == 0x000E88, "Member 'ABP_KoratFreeTimelineActor_C::MyselfLocationAndRotationAndScale' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, OldType) == 0x000E98, "Member 'ABP_KoratFreeTimelineActor_C::OldType' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, CharacterSocketLocation) == 0x000EA8, "Member 'ABP_KoratFreeTimelineActor_C::CharacterSocketLocation' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, CharacterSocketLocationAndCharaYaw) == 0x000EB8, "Member 'ABP_KoratFreeTimelineActor_C::CharacterSocketLocationAndCharaYaw' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, CharacterSocketLocationAndRotationAndScale) == 0x000EC8, "Member 'ABP_KoratFreeTimelineActor_C::CharacterSocketLocationAndRotationAndScale' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, CharacterSocketLocationAndCharaYawAndScale) == 0x000ED8, "Member 'ABP_KoratFreeTimelineActor_C::CharacterSocketLocationAndCharaYawAndScale' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, SectionEnumDefineMap) == 0x000EE8, "Member 'ABP_KoratFreeTimelineActor_C::SectionEnumDefineMap' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, PlaySectionSetting) == 0x000F38, "Member 'ABP_KoratFreeTimelineActor_C::PlaySectionSetting' has a wrong offset!");
static_assert(offsetof(ABP_KoratFreeTimelineActor_C, DecalPreset) == 0x000F40, "Member 'ABP_KoratFreeTimelineActor_C::DecalPreset' has a wrong offset!");

}

